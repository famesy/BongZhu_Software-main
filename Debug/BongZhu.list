
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000144d4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  080147a8  080147a8  000247a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014da0  08014da0  00024da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014da8  08014da8  00024da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014dac  08014dac  00024dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08014db0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c74  240001e0  08014f90  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e54  08014f90  00030e54  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038f95  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005a3e  00000000  00000000  000691a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ab0  00000000  00000000  0006ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018b8  00000000  00000000  00070698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039d29  00000000  00000000  00071f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002823a  00000000  00000000  000abc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016df23  00000000  00000000  000d3eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00241dd6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007fa0  00000000  00000000  00241e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801478c 	.word	0x0801478c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	0801478c 	.word	0x0801478c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include "AMT21.h"

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->prev_position = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	821a      	strh	r2, [r3, #16]
	dev->k0 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	749a      	strb	r2, [r3, #18]
	dev->k1 = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	74da      	strb	r2, [r3, #19]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f00a fb89 	bl	800ae34 <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
			//1, 100);
	HAL_UART_Transmit(dev->uartHandle, &(dev->address),
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 010a 	add.w	r1, r3, #10
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	f00e fe98 	bl	800f464 <HAL_UART_Transmit>
				1, 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6858      	ldr	r0, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	891b      	ldrh	r3, [r3, #8]
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	f00a fb78 	bl	800ae34 <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 010c 	add.w	r1, r3, #12
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2202      	movs	r2, #2
 8000752:	f00e ff1d 	bl	800f590 <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x4000) == 0x4000;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	749a      	strb	r2, [r3, #18]
	dev->k1 = (dev->uart_buf & 0x8000) == 0x8000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	0bdb      	lsrs	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	74da      	strb	r2, [r3, #19]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AMT21_check_value>:
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = dev->uart_buf & 0x3FFF;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	899b      	ldrh	r3, [r3, #12]
 8000794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000798:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = dev->uart_buf & 0x0001;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	899b      	ldrh	r3, [r3, #12]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 1) & 0x0001;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	899b      	ldrh	r3, [r3, #12]
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	737b      	strb	r3, [r7, #13]
 80007ba:	e020      	b.n	80007fe <AMT21_check_value+0x76>
		dev->uart_buf = dev->uart_buf >> 2;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d8:	4053      	eors	r3, r2
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007f2:	4053      	eors	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007f8:	7b7b      	ldrb	r3, [r7, #13]
 80007fa:	3301      	adds	r3, #1
 80007fc:	737b      	strb	r3, [r7, #13]
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	2b05      	cmp	r3, #5
 8000802:	d9db      	bls.n	80007bc <AMT21_check_value+0x34>
	}
	k0_check = !k0_check;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73bb      	strb	r3, [r7, #14]
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7c9b      	ldrb	r3, [r3, #18]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	429a      	cmp	r2, r3
 8000828:	d109      	bne.n	800083e <AMT21_check_value+0xb6>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7cdb      	ldrb	r3, [r3, #19]
 800082e:	7bba      	ldrb	r2, [r7, #14]
 8000830:	429a      	cmp	r2, r3
 8000832:	d104      	bne.n	800083e <AMT21_check_value+0xb6>
		dev->position = position_temp;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	897a      	ldrh	r2, [r7, #10]
 8000838:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <AMT21_check_value+0xb8>
	} else {
		return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
	}
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <AMT21_unwrap>:

int32_t AMT21_unwrap(int32_t pulse, int32_t prev_pulse) {
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	int32_t dPulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
	if (pulse - prev_pulse > 8191) {
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000864:	db06      	blt.n	8000874 <AMT21_unwrap+0x28>
		dPulse = -(16383 - (pulse-prev_pulse));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <AMT21_unwrap+0x5c>)
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e011      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else if ( pulse -  prev_pulse < -8191) {
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc07      	bgt.n	8000890 <AMT21_unwrap+0x44>
		dPulse = 16383 - (prev_pulse - pulse);
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	1ad2      	subs	r2, r2, r3
 8000886:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e003      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else {
		dPulse =  pulse -  prev_pulse;
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	60fb      	str	r3, [r7, #12]
	}
	return dPulse;
 8000898:	68fb      	ldr	r3, [r7, #12]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	ffffc001 	.word	0xffffc001

080008ac <KalmanFilter_initialise>:
 *  Created on: Jan 28, 2022
 *      Author: fame
 */
#include "KalmanFilter.h"

void KalmanFilter_initialise(KalmanFilter *dev, float x1,float x2,float p11,float p12,float p21,float p22, float R, float Q){
 80008ac:	b480      	push	{r7}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6278      	str	r0, [r7, #36]	; 0x24
 80008b4:	ed87 0a08 	vstr	s0, [r7, #32]
 80008b8:	edc7 0a07 	vstr	s1, [r7, #28]
 80008bc:	ed87 1a06 	vstr	s2, [r7, #24]
 80008c0:	edc7 1a05 	vstr	s3, [r7, #20]
 80008c4:	ed87 2a04 	vstr	s4, [r7, #16]
 80008c8:	edc7 2a03 	vstr	s5, [r7, #12]
 80008cc:	ed87 3a02 	vstr	s6, [r7, #8]
 80008d0:	edc7 3a01 	vstr	s7, [r7, #4]
	/* Parameter */
	dev->R = R;
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	601a      	str	r2, [r3, #0]
	dev->Q = Q;
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	605a      	str	r2, [r3, #4]

	/* KF "memory" */
	dev->x1 = x1;
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	6a3a      	ldr	r2, [r7, #32]
 80008e4:	609a      	str	r2, [r3, #8]
	dev->x2 = x2;
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	69fa      	ldr	r2, [r7, #28]
 80008ea:	60da      	str	r2, [r3, #12]
	dev->p11 = p11;
 80008ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	611a      	str	r2, [r3, #16]
	dev->p12 = p12;
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	615a      	str	r2, [r3, #20]
	dev->p21 = p21;
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	619a      	str	r2, [r3, #24]
	dev->p22 = p22;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	61da      	str	r2, [r3, #28]
}
 8000904:	bf00      	nop
 8000906:	372c      	adds	r7, #44	; 0x2c
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <PIDController_initialise>:
 *  Created on: Jan 21, 2022
 *      Author: fame
 */
#include "PID.h"

void PIDController_initialise(PIDController *pid, float Kp, float Ki, float Kd){
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	ed87 0a02 	vstr	s0, [r7, #8]
 800091c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000920:	ed87 1a00 	vstr	s2, [r7]
	pid->Kp = Kp;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	609a      	str	r2, [r3, #8]
	pid->out = 0;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f04f 0200 	mov.w	r2, #0
 800093c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <PIDController_update>:

float PIDController_update(PIDController *pid, float setpoint, float measurement) {
 800094c:	b480      	push	{r7}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	ed87 0a02 	vstr	s0, [r7, #8]
 8000958:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measurement;
 800095c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000960:	edd7 7a01 	vldr	s15, [r7, #4]
 8000964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000968:	edc7 7a05 	vstr	s15, [r7, #20]
	/*
	 * P term
	 */
	pid->proportional_term = pid->Kp * error;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	ed93 7a00 	vldr	s14, [r3]
 8000972:	edd7 7a05 	vldr	s15, [r7, #20]
 8000976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	edc3 7a07 	vstr	s15, [r3, #28]

	/*
	 * I term
	 */
	pid->integrator += error;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	ed93 7a08 	vldr	s14, [r3, #32]
 8000986:	edd7 7a05 	vldr	s15, [r7, #20]
 800098a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->integral_term = pid->Ki * pid->integrator;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	ed93 7a01 	vldr	s14, [r3, #4]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	edd3 7a08 	vldr	s15, [r3, #32]
 80009a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	/*
	 * D term
	 */
	pid->derivative_term = pid->Kd * (error - pid->prevError);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80009b6:	edd7 6a05 	vldr	s13, [r7, #20]
 80009ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80009be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	pid->prevError = error;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
	/*
	 * Calculate a final value
	 */
	pid->out = pid->proportional_term + pid->integral_term + pid->derivative_term;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	ed93 7a07 	vldr	s14, [r3, #28]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80009da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80009e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	if (pid->out > 2500){
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80009f4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000a3c <PIDController_update+0xf0>
 80009f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a00:	dd03      	ble.n	8000a0a <PIDController_update+0xbe>
		pid->out = 2500;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <PIDController_update+0xf4>)
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
 8000a08:	e00c      	b.n	8000a24 <PIDController_update+0xd8>
	}
	else if(pid->out < -2500){
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000a10:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000a44 <PIDController_update+0xf8>
 8000a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1c:	d502      	bpl.n	8000a24 <PIDController_update+0xd8>
		pid->out = -2500;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <PIDController_update+0xfc>)
 8000a22:	631a      	str	r2, [r3, #48]	; 0x30
	}
	return pid->out;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	ee07 3a90 	vmov	s15, r3
}
 8000a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a30:	371c      	adds	r7, #28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	451c4000 	.word	0x451c4000
 8000a40:	451c4000 	.word	0x451c4000
 8000a44:	c51c4000 	.word	0xc51c4000
 8000a48:	c51c4000 	.word	0xc51c4000

08000a4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2224      	movs	r2, #36	; 0x24
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f010 fc2f 	bl	80112c8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a6c:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <MX_ADC1_Init+0xe8>)
 8000a6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac8:	4819      	ldr	r0, [pc, #100]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aca:	f007 ff87 	bl	80089dc <HAL_ADC_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f005 fe78 	bl	80067c8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4813      	ldr	r0, [pc, #76]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ae4:	f008 ffc0 	bl	8009a68 <HAL_ADCEx_MultiModeConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000aee:	f005 fe6b 	bl	80067c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_ADC1_Init+0xec>)
 8000af4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af6:	2306      	movs	r3, #6
 8000af8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000afe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b02:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b04:	2304      	movs	r3, #4
 8000b06:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000b18:	f008 f968 	bl	8008dec <HAL_ADC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000b22:	f005 fe51 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3730      	adds	r7, #48	; 0x30
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24000354 	.word	0x24000354
 8000b34:	40022000 	.word	0x40022000
 8000b38:	2a000400 	.word	0x2a000400

08000b3c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2224      	movs	r2, #36	; 0x24
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f010 fbbd 	bl	80112c8 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b50:	4a30      	ldr	r2, [pc, #192]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b52:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b66:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b68:	2204      	movs	r2, #4
 8000b6a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bba:	4815      	ldr	r0, [pc, #84]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000bbc:	f007 ff0e 	bl	80089dc <HAL_ADC_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000bc6:	f005 fdff 	bl	80067c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_ADC3_Init+0xdc>)
 8000bcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bd6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bda:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000bfa:	f008 f8f7 	bl	8008dec <HAL_ADC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000c04:	f005 fde0 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	240003c4 	.word	0x240003c4
 8000c14:	58026000 	.word	0x58026000
 8000c18:	c7520000 	.word	0xc7520000

08000c1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <HAL_ADC_MspInit+0xa8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12a      	bne.n	8000c94 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c44:	4a20      	ldr	r2, [pc, #128]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c46:	f043 0320 	orr.w	r3, r3, #32
 8000c4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480f      	ldr	r0, [pc, #60]	; (8000ccc <HAL_ADC_MspInit+0xb0>)
 8000c8e:	f009 ff29 	bl	800aae4 <HAL_GPIO_Init>
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c92:	e013      	b.n	8000cbc <HAL_ADC_MspInit+0xa0>
  else if(adcHandle->Instance==ADC3)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_ADC_MspInit+0xb4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10e      	bne.n	8000cbc <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40022000 	.word	0x40022000
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58020800 	.word	0x58020800
 8000cd0:	58026000 	.word	0x58026000

08000cd4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <MX_CRC_Init+0x54>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_CRC_Init+0x50>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_CRC_Init+0x50>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cec:	221d      	movs	r2, #29
 8000cee:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cf2:	2210      	movs	r2, #16
 8000cf4:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cf8:	22c4      	movs	r2, #196	; 0xc4
 8000cfa:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_CRC_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_CRC_Init+0x50>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_CRC_Init+0x50>)
 8000d10:	f009 f89c 	bl	8009e4c <HAL_CRC_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000d1a:	f005 fd55 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	24000434 	.word	0x24000434
 8000d28:	58024c00 	.word	0x58024c00

08000d2c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <HAL_CRC_MspInit+0x3c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10e      	bne.n	8000d5c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_CRC_MspInit+0x40>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_CRC_MspInit+0x40>)
 8000d46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_CRC_MspInit+0x40>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	58024c00 	.word	0x58024c00
 8000d6c:	58024400 	.word	0x58024400

08000d70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4b62      	ldr	r3, [pc, #392]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a60      	ldr	r2, [pc, #384]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b5e      	ldr	r3, [pc, #376]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a59      	ldr	r2, [pc, #356]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b56      	ldr	r3, [pc, #344]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b53      	ldr	r3, [pc, #332]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a51      	ldr	r2, [pc, #324]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b4f      	ldr	r3, [pc, #316]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	4a4a      	ldr	r2, [pc, #296]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df0:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	4a42      	ldr	r2, [pc, #264]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0e:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1c:	4b3c      	ldr	r3, [pc, #240]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	4a3b      	ldr	r2, [pc, #236]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2c:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR1_Pin|DIR2_Pin|OE_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000e40:	4834      	ldr	r0, [pc, #208]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e42:	f009 fff7 	bl	800ae34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 8000e4c:	4832      	ldr	r0, [pc, #200]	; (8000f18 <MX_GPIO_Init+0x1a8>)
 8000e4e:	f009 fff1 	bl	800ae34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e52:	2200      	movs	r2, #0
 8000e54:	f644 7111 	movw	r1, #20241	; 0x4f11
 8000e58:	4830      	ldr	r0, [pc, #192]	; (8000f1c <MX_GPIO_Init+0x1ac>)
 8000e5a:	f009 ffeb 	bl	800ae34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000e64:	482e      	ldr	r0, [pc, #184]	; (8000f20 <MX_GPIO_Init+0x1b0>)
 8000e66:	f009 ffe5 	bl	800ae34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	21f0      	movs	r1, #240	; 0xf0
 8000e6e:	482d      	ldr	r0, [pc, #180]	; (8000f24 <MX_GPIO_Init+0x1b4>)
 8000e70:	f009 ffe0 	bl	800ae34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|OE_Pin;
 8000e74:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4821      	ldr	r0, [pc, #132]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e8e:	f009 fe29 	bl	800aae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8000e92:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8000e96:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	481b      	ldr	r0, [pc, #108]	; (8000f18 <MX_GPIO_Init+0x1a8>)
 8000eac:	f009 fe1a 	bl	800aae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000eb0:	f644 7311 	movw	r3, #20241	; 0x4f11
 8000eb4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <MX_GPIO_Init+0x1ac>)
 8000eca:	f009 fe0b 	bl	800aae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 8000ece:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480e      	ldr	r0, [pc, #56]	; (8000f20 <MX_GPIO_Init+0x1b0>)
 8000ee8:	f009 fdfc 	bl	800aae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8000eec:	23f0      	movs	r3, #240	; 0xf0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	4808      	ldr	r0, [pc, #32]	; (8000f24 <MX_GPIO_Init+0x1b4>)
 8000f04:	f009 fdee 	bl	800aae4 <HAL_GPIO_Init>

}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58021000 	.word	0x58021000
 8000f18:	58020800 	.word	0x58020800
 8000f1c:	58020c00 	.word	0x58020c00
 8000f20:	58020000 	.word	0x58020000
 8000f24:	58020400 	.word	0x58020400

08000f28 <IVK>:
	q_arr[4] = roll;
	memcpy(config_arr, q_arr, sizeof(q_arr));
	return 1;
}

void IVK(float q[5], float x_dot[5], float *m_dot) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	ed2d 8b04 	vpush	{d8-d9}
 8000f2e:	b0ec      	sub	sp, #432	; 0x1b0
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	6018      	str	r0, [r3, #0]
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	6019      	str	r1, [r3, #0]
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	601a      	str	r2, [r3, #0]
	double e_J_inv_tmp;
	double e_J_inv_tmp_tmp;
	double f_J_inv_tmp_tmp;
	int i;
	int i1;
	J_inv_tmp_tmp = q[1] + 2.0 * q[2];
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	edd3 7a00 	vldr	s15, [r3]
 8000f4e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3308      	adds	r3, #8
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f6a:	ed87 7b66 	vstr	d7, [r7, #408]	; 0x198
	b_J_inv_tmp_tmp = ((((J_inv_tmp_tmp + q[3]) + 1.6845) + -0.8995) + -0.73665)
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	330c      	adds	r3, #12
 8000f76:	edd3 7a00 	vldr	s15, [r3]
 8000f7a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f7e:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8000f82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f86:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 8001350 <IVK+0x428>
 8000f8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f8e:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 8001358 <IVK+0x430>
 8000f92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f96:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 8001360 <IVK+0x438>
 8000f9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f9e:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 8001368 <IVK+0x440>
 8000fa2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fa6:	ed87 7b64 	vstr	d7, [r7, #400]	; 0x190
			+ 1.52205;
	c_J_inv_tmp_tmp = sin(b_J_inv_tmp_tmp);
 8000faa:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8000fae:	f012 fe1b 	bl	8013be8 <sin>
 8000fb2:	ed87 0b62 	vstr	d0, [r7, #392]	; 0x188
	d_J_inv_tmp_tmp = sin(q[0]);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc4:	eeb0 0b47 	vmov.f64	d0, d7
 8000fc8:	f012 fe0e 	bl	8013be8 <sin>
 8000fcc:	ed87 0b60 	vstr	d0, [r7, #384]	; 0x180
	J_inv_tmp = cos(((J_inv_tmp_tmp + 1.6845) + -0.8995) + -0.73665);
 8000fd0:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8000fd4:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001350 <IVK+0x428>
 8000fd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fdc:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001358 <IVK+0x430>
 8000fe0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fe4:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001360 <IVK+0x438>
 8000fe8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fec:	eeb0 0b47 	vmov.f64	d0, d7
 8000ff0:	f012 fda6 	bl	8013b40 <cos>
 8000ff4:	ed87 0b5e 	vstr	d0, [r7, #376]	; 0x178
	b_J_inv_tmp = cos(b_J_inv_tmp_tmp);
 8000ff8:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8000ffc:	f012 fda0 	bl	8013b40 <cos>
 8001000:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	J_inv_tmp_tmp = ((q[1] + q[2]) + 1.6845) + -0.8995;
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3304      	adds	r3, #4
 800100c:	ed93 7a00 	vldr	s14, [r3]
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3308      	adds	r3, #8
 8001018:	edd3 7a00 	vldr	s15, [r3]
 800101c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001020:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001024:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001350 <IVK+0x428>
 8001028:	ee37 7b06 	vadd.f64	d7, d7, d6
 800102c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001358 <IVK+0x430>
 8001030:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001034:	ed87 7b66 	vstr	d7, [r7, #408]	; 0x198
	c_J_inv_tmp = cos(J_inv_tmp_tmp);
 8001038:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 800103c:	f012 fd80 	bl	8013b40 <cos>
 8001040:	ed87 0b5a 	vstr	d0, [r7, #360]	; 0x168
	d_J_inv_tmp = sin(J_inv_tmp_tmp);
 8001044:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8001048:	f012 fdce 	bl	8013be8 <sin>
 800104c:	ed87 0b58 	vstr	d0, [r7, #352]	; 0x160
	J_inv_tmp_tmp = sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3304      	adds	r3, #4
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3308      	adds	r3, #8
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001070:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001074:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001078:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001350 <IVK+0x428>
 800107c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001080:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001358 <IVK+0x430>
 8001084:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001088:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001360 <IVK+0x438>
 800108c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001090:	eeb0 0b47 	vmov.f64	d0, d7
 8001094:	f012 fda8 	bl	8013be8 <sin>
 8001098:	ed87 0b66 	vstr	d0, [r7, #408]	; 0x198
	b_J_inv_tmp_tmp = cos(q[1] + 1.6845);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3304      	adds	r3, #4
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ac:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001350 <IVK+0x428>
 80010b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010b4:	eeb0 0b47 	vmov.f64	d0, d7
 80010b8:	f012 fd42 	bl	8013b40 <cos>
 80010bc:	ed87 0b64 	vstr	d0, [r7, #400]	; 0x190
	e_J_inv_tmp_tmp = sin(q[1] + 1.6845);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3304      	adds	r3, #4
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d0:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8001350 <IVK+0x428>
 80010d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010d8:	eeb0 0b47 	vmov.f64	d0, d7
 80010dc:	f012 fd84 	bl	8013be8 <sin>
 80010e0:	ed87 0b56 	vstr	d0, [r7, #344]	; 0x158
	f_J_inv_tmp_tmp = cos(q[0]);
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	edd3 7a00 	vldr	s15, [r3]
 80010ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f2:	eeb0 0b47 	vmov.f64	d0, d7
 80010f6:	f012 fd23 	bl	8013b40 <cos>
 80010fa:	ed87 0b54 	vstr	d0, [r7, #336]	; 0x150
	e_J_inv_tmp = cos(q[2]);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3308      	adds	r3, #8
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800110e:	eeb0 0b47 	vmov.f64	d0, d7
 8001112:	f012 fd15 	bl	8013b40 <cos>
 8001116:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
	dv[0] = 0.0;
 800111a:	f107 0110 	add.w	r1, r7, #16
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	e9c1 2300 	strd	r2, r3, [r1]
	dv[5] = 0.0;
 800112a:	f107 0110 	add.w	r1, r7, #16
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	d = f_J_inv_tmp_tmp * f_J_inv_tmp_tmp;
 800113a:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800113e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001142:	ed87 7b6a 	vstr	d7, [r7, #424]	; 0x1a8
	d1 = d_J_inv_tmp_tmp * d_J_inv_tmp_tmp;
 8001146:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800114a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800114e:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	dv[10] = -(25.0 * d_J_inv_tmp_tmp)
 8001152:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001156:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 800115a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800115e:	eeb1 8b47 	vneg.f64	d8, d7
			/ (9.0
					* (((((((146.0 * c_J_inv_tmp_tmp * d
 8001162:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8001166:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8001378 <IVK+0x450>
 800116a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800116e:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001172:	ee26 6b07 	vmul.f64	d6, d6, d7
							+ 410.488 * J_inv_tmp * d)
 8001176:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800117a:	ed9f 5b81 	vldr	d5, [pc, #516]	; 8001380 <IVK+0x458>
 800117e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001182:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001186:	ee25 7b07 	vmul.f64	d7, d5, d7
 800118a:	ee36 9b07 	vadd.f64	d9, d6, d7
							+ 146.0
									* sin(
											(((((q[1] + 2.0 * q[2]) + q[3])
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3304      	adds	r3, #4
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3308      	adds	r3, #8
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80011b2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	330c      	adds	r3, #12
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c6:	ee36 7b07 	vadd.f64	d7, d6, d7
													+ 1.6845) + -0.8995)
 80011ca:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8001350 <IVK+0x428>
 80011ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011d2:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8001358 <IVK+0x430>
 80011d6:	ee37 7b46 	vsub.f64	d7, d7, d6
													+ -0.73665) + 1.52205) * d1)
 80011da:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8001360 <IVK+0x438>
 80011de:	ee37 7b46 	vsub.f64	d7, d7, d6
									* sin(
 80011e2:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8001368 <IVK+0x440>
 80011e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011ea:	eeb0 0b47 	vmov.f64	d0, d7
 80011ee:	f012 fcfb 	bl	8013be8 <sin>
 80011f2:	eeb0 7b40 	vmov.f64	d7, d0
 80011f6:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001378 <IVK+0x450>
 80011fa:	ee27 6b06 	vmul.f64	d6, d7, d6
													+ -0.73665) + 1.52205) * d1)
 80011fe:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8001202:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 146.0
 8001206:	ee39 9b07 	vadd.f64	d9, d9, d7
							+ 410.488
									* cos(
											(((q[1] + 2.0 * q[2]) + 1.6845)
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3304      	adds	r3, #4
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3308      	adds	r3, #8
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800122a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800122e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001232:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001350 <IVK+0x428>
 8001236:	ee37 7b06 	vadd.f64	d7, d7, d6
													+ -0.8995) + -0.73665) * d1)
 800123a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001358 <IVK+0x430>
 800123e:	ee37 7b46 	vsub.f64	d7, d7, d6
									* cos(
 8001242:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001360 <IVK+0x438>
 8001246:	ee37 7b46 	vsub.f64	d7, d7, d6
 800124a:	eeb0 0b47 	vmov.f64	d0, d7
 800124e:	f012 fc77 	bl	8013b40 <cos>
 8001252:	eeb0 7b40 	vmov.f64	d7, d0
 8001256:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001380 <IVK+0x458>
 800125a:	ee27 6b06 	vmul.f64	d6, d7, d6
													+ -0.8995) + -0.73665) * d1)
 800125e:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8001262:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 410.488
 8001266:	ee39 6b07 	vadd.f64	d6, d9, d7
							+ 60.0 * c_J_inv_tmp * d)
 800126a:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800126e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001388 <IVK+0x460>
 8001272:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001276:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 800127a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800127e:	ee36 9b07 	vadd.f64	d9, d6, d7
							+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3304      	adds	r3, #4
 800128a:	ed93 7a00 	vldr	s14, [r3]
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3308      	adds	r3, #8
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012a2:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001350 <IVK+0x428>
 80012a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012aa:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001358 <IVK+0x430>
 80012ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80012b2:	eeb0 0b47 	vmov.f64	d0, d7
 80012b6:	f012 fc43 	bl	8013b40 <cos>
 80012ba:	eeb0 7b40 	vmov.f64	d7, d0
 80012be:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001388 <IVK+0x460>
 80012c2:	ee27 6b06 	vmul.f64	d6, d7, d6
									* d1) + 352.278 * b_J_inv_tmp_tmp * d)
 80012c6:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 80012ca:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 80012ce:	ee39 6b07 	vadd.f64	d6, d9, d7
									* d1) + 352.278 * b_J_inv_tmp_tmp * d)
 80012d2:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80012d6:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8001390 <IVK+0x468>
 80012da:	ee27 5b05 	vmul.f64	d5, d7, d5
 80012de:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80012e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012e6:	ee36 9b07 	vadd.f64	d9, d6, d7
							+ 352.278 * cos(q[1] + 1.6845) * d1));
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3304      	adds	r3, #4
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012fa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001350 <IVK+0x428>
 80012fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001302:	eeb0 0b47 	vmov.f64	d0, d7
 8001306:	f012 fc1b 	bl	8013b40 <cos>
 800130a:	eeb0 7b40 	vmov.f64	d7, d0
 800130e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8001390 <IVK+0x468>
 8001312:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001316:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 800131a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800131e:	ee39 7b07 	vadd.f64	d7, d9, d7
					* (((((((146.0 * c_J_inv_tmp_tmp * d
 8001322:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001326:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (9.0
 800132a:	ee88 7b06 	vdiv.f64	d7, d8, d6
	dv[10] = -(25.0 * d_J_inv_tmp_tmp)
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	dv[15] = 25.0 * f_J_inv_tmp_tmp
 8001336:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800133a:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 800133e:	ee27 8b06 	vmul.f64	d8, d7, d6
			/ (9.0
					* (((((((146.0
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3304      	adds	r3, #4
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	e033      	b.n	80013b8 <IVK+0x490>
 8001350:	45a1cac1 	.word	0x45a1cac1
 8001354:	3ffaf3b6 	.word	0x3ffaf3b6
 8001358:	39581062 	.word	0x39581062
 800135c:	3fecc8b4 	.word	0x3fecc8b4
 8001360:	05532618 	.word	0x05532618
 8001364:	3fe792a3 	.word	0x3fe792a3
 8001368:	19ce075f 	.word	0x19ce075f
 800136c:	3ff85a51 	.word	0x3ff85a51
 8001370:	19ce075f 	.word	0x19ce075f
 8001374:	3ff85a51 	.word	0x3ff85a51
 8001378:	00000000 	.word	0x00000000
 800137c:	40624000 	.word	0x40624000
 8001380:	d916872b 	.word	0xd916872b
 8001384:	4079a7ce 	.word	0x4079a7ce
 8001388:	00000000 	.word	0x00000000
 800138c:	404e0000 	.word	0x404e0000
 8001390:	b020c49c 	.word	0xb020c49c
 8001394:	40760472 	.word	0x40760472
 8001398:	45a1cac1 	.word	0x45a1cac1
 800139c:	3ffaf3b6 	.word	0x3ffaf3b6
 80013a0:	39581062 	.word	0x39581062
 80013a4:	3fecc8b4 	.word	0x3fecc8b4
 80013a8:	05532618 	.word	0x05532618
 80013ac:	3fe792a3 	.word	0x3fe792a3
 80013b0:	eb851eb8 	.word	0xeb851eb8
 80013b4:	40d80d51 	.word	0x40d80d51
 80013b8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3308      	adds	r3, #8
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80013d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	330c      	adds	r3, #12
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013e8:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 8001398 <IVK+0x470>
 80013ec:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 80013f0:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 80013a0 <IVK+0x478>
 80013f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013f8:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 80013a8 <IVK+0x480>
 80013fc:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8001400:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 8001370 <IVK+0x448>
 8001404:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001408:	eeb0 0b47 	vmov.f64	d0, d7
 800140c:	f012 fbec 	bl	8013be8 <sin>
 8001410:	eeb0 7b40 	vmov.f64	d7, d0
 8001414:	ed1f 6b28 	vldr	d6, [pc, #-160]	; 8001378 <IVK+0x450>
 8001418:	ee27 6b06 	vmul.f64	d6, d7, d6
							* (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)
 800141c:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001420:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001424:	ee26 9b07 	vmul.f64	d9, d6, d7
							+ 410.488
									* cos(
											(((q[1] + 2.0 * q[2]) + 1.6845)
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3304      	adds	r3, #4
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3308      	adds	r3, #8
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001448:	ee37 7b07 	vadd.f64	d7, d7, d7
 800144c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001450:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 8001398 <IVK+0x470>
 8001454:	ee37 7b06 	vadd.f64	d7, d7, d6
													+ -0.8995) + -0.73665)
 8001458:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 80013a0 <IVK+0x478>
 800145c:	ee37 7b46 	vsub.f64	d7, d7, d6
									* cos(
 8001460:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 80013a8 <IVK+0x480>
 8001464:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001468:	eeb0 0b47 	vmov.f64	d0, d7
 800146c:	f012 fb68 	bl	8013b40 <cos>
 8001470:	eeb0 7b40 	vmov.f64	d7, d0
 8001474:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8001380 <IVK+0x458>
 8001478:	ee27 6b06 	vmul.f64	d6, d7, d6
									* (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 800147c:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001480:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001484:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 410.488
 8001488:	ee39 9b07 	vadd.f64	d9, d9, d7
							+ 146.0
									* sin(
											(((((q[1] + 2.0 * q[2]) + q[3])
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3304      	adds	r3, #4
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3308      	adds	r3, #8
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ac:	ee37 7b07 	vadd.f64	d7, d7, d7
 80014b0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	330c      	adds	r3, #12
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014c4:	ee36 7b07 	vadd.f64	d7, d6, d7
													+ 1.6845) + -0.8995)
 80014c8:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 8001398 <IVK+0x470>
 80014cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014d0:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 80013a0 <IVK+0x478>
 80014d4:	ee37 7b46 	vsub.f64	d7, d7, d6
													+ -0.73665) + 1.52205)
 80014d8:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 80013a8 <IVK+0x480>
 80014dc:	ee37 7b46 	vsub.f64	d7, d7, d6
									* sin(
 80014e0:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 8001370 <IVK+0x448>
 80014e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014e8:	eeb0 0b47 	vmov.f64	d0, d7
 80014ec:	f012 fb7c 	bl	8013be8 <sin>
 80014f0:	eeb0 7b40 	vmov.f64	d7, d0
 80014f4:	ed1f 6b60 	vldr	d6, [pc, #-384]	; 8001378 <IVK+0x450>
 80014f8:	ee27 6b06 	vmul.f64	d6, d7, d6
									* (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 80014fc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001500:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001504:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 146.0
 8001508:	ee39 9b07 	vadd.f64	d9, d9, d7
							+ 410.488
									* cos(
											(((q[1] + 2.0 * q[2]) + 1.6845)
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3304      	adds	r3, #4
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3308      	adds	r3, #8
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800152c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001530:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001534:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 8001398 <IVK+0x470>
 8001538:	ee37 7b06 	vadd.f64	d7, d7, d6
													+ -0.8995) + -0.73665)
 800153c:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80013a0 <IVK+0x478>
 8001540:	ee37 7b46 	vsub.f64	d7, d7, d6
									* cos(
 8001544:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80013a8 <IVK+0x480>
 8001548:	ee37 7b46 	vsub.f64	d7, d7, d6
 800154c:	eeb0 0b47 	vmov.f64	d0, d7
 8001550:	f012 faf6 	bl	8013b40 <cos>
 8001554:	eeb0 7b40 	vmov.f64	d7, d0
 8001558:	ed1f 6b77 	vldr	d6, [pc, #-476]	; 8001380 <IVK+0x458>
 800155c:	ee27 6b06 	vmul.f64	d6, d7, d6
									* (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 8001560:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001564:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001568:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 410.488
 800156c:	ee39 9b07 	vadd.f64	d9, d9, d7
							+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3304      	adds	r3, #4
 8001578:	ed93 7a00 	vldr	s14, [r3]
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3308      	adds	r3, #8
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001590:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 8001398 <IVK+0x470>
 8001594:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001598:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 80013a0 <IVK+0x478>
 800159c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80015a0:	eeb0 0b47 	vmov.f64	d0, d7
 80015a4:	f012 facc 	bl	8013b40 <cos>
 80015a8:	eeb0 7b40 	vmov.f64	d7, d0
 80015ac:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 8001388 <IVK+0x460>
 80015b0:	ee27 6b06 	vmul.f64	d6, d7, d6
									* (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 80015b4:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80015b8:	ee27 7b07 	vmul.f64	d7, d7, d7
 80015bc:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 80015c0:	ee39 9b07 	vadd.f64	d9, d9, d7
							+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3304      	adds	r3, #4
 80015cc:	ed93 7a00 	vldr	s14, [r3]
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3308      	adds	r3, #8
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e4:	ed1f 6b94 	vldr	d6, [pc, #-592]	; 8001398 <IVK+0x470>
 80015e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015ec:	ed1f 6b94 	vldr	d6, [pc, #-592]	; 80013a0 <IVK+0x478>
 80015f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80015f4:	eeb0 0b47 	vmov.f64	d0, d7
 80015f8:	f012 faa2 	bl	8013b40 <cos>
 80015fc:	eeb0 7b40 	vmov.f64	d7, d0
 8001600:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8001388 <IVK+0x460>
 8001604:	ee27 6b06 	vmul.f64	d6, d7, d6
									* (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 8001608:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800160c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001610:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8001614:	ee39 9b07 	vadd.f64	d9, d9, d7
							+ 352.278 * cos(q[1] + 1.6845)
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3304      	adds	r3, #4
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001628:	ed1f 6ba5 	vldr	d6, [pc, #-660]	; 8001398 <IVK+0x470>
 800162c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001630:	eeb0 0b47 	vmov.f64	d0, d7
 8001634:	f012 fa84 	bl	8013b40 <cos>
 8001638:	eeb0 7b40 	vmov.f64	d7, d0
 800163c:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 8001390 <IVK+0x468>
 8001640:	ee27 6b06 	vmul.f64	d6, d7, d6
									* (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 8001644:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001648:	ee27 7b07 	vmul.f64	d7, d7, d7
 800164c:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 352.278 * cos(q[1] + 1.6845)
 8001650:	ee39 9b07 	vadd.f64	d9, d9, d7
							+ 352.278 * cos(q[1] + 1.6845)
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3304      	adds	r3, #4
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001664:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8001398 <IVK+0x470>
 8001668:	ee37 7b06 	vadd.f64	d7, d7, d6
 800166c:	eeb0 0b47 	vmov.f64	d0, d7
 8001670:	f012 fa66 	bl	8013b40 <cos>
 8001674:	eeb0 7b40 	vmov.f64	d7, d0
 8001678:	ed1f 6bbb 	vldr	d6, [pc, #-748]	; 8001390 <IVK+0x468>
 800167c:	ee27 6b06 	vmul.f64	d6, d7, d6
									* (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 8001680:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001684:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001688:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 352.278 * cos(q[1] + 1.6845)
 800168c:	ee39 7b07 	vadd.f64	d7, d9, d7
					* (((((((146.0
 8001690:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001694:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (9.0
 8001698:	ee88 7b06 	vdiv.f64	d7, d8, d6
	dv[15] = 25.0 * f_J_inv_tmp_tmp
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	dv[20] = 0.0;
 80016a4:	f107 0110 	add.w	r1, r7, #16
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	d2 = sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3304      	adds	r3, #4
 80016bc:	ed93 7a00 	vldr	s14, [r3]
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3308      	adds	r3, #8
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d4:	ed1f 6bd0 	vldr	d6, [pc, #-832]	; 8001398 <IVK+0x470>
 80016d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016dc:	ed1f 6bd0 	vldr	d6, [pc, #-832]	; 80013a0 <IVK+0x478>
 80016e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80016e4:	eeb0 0b47 	vmov.f64	d0, d7
 80016e8:	f012 fa7e 	bl	8013be8 <sin>
 80016ec:	ed87 0b4e 	vstr	d0, [r7, #312]	; 0x138
	d3 = 24629.28 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665)
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3304      	adds	r3, #4
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3308      	adds	r3, #8
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001710:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001714:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001718:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 8001398 <IVK+0x470>
 800171c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001720:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 80013a0 <IVK+0x478>
 8001724:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001728:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 80013a8 <IVK+0x480>
 800172c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001730:	eeb0 0b47 	vmov.f64	d0, d7
 8001734:	f012 fa04 	bl	8013b40 <cos>
 8001738:	eeb0 7b40 	vmov.f64	d7, d0
 800173c:	ed1f 6be4 	vldr	d6, [pc, #-912]	; 80013b0 <IVK+0x488>
 8001740:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001744:	ed97 6b4e 	vldr	d6, [r7, #312]	; 0x138
 8001748:	ee26 7b07 	vmul.f64	d7, d6, d7
 800174c:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
			* d2;
	d4 = 24629.28 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8001750:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8001754:	ed1f 6bea 	vldr	d6, [pc, #-936]	; 80013b0 <IVK+0x488>
 8001758:	ee27 8b06 	vmul.f64	d8, d7, d6
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3304      	adds	r3, #4
 8001764:	ed93 7a00 	vldr	s14, [r3]
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3308      	adds	r3, #8
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001778:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800177c:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8001b58 <IVK+0xc30>
 8001780:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001784:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8001b60 <IVK+0xc38>
 8001788:	ee37 7b46 	vsub.f64	d7, d7, d6
 800178c:	eeb0 0b47 	vmov.f64	d0, d7
 8001790:	f012 f9d6 	bl	8013b40 <cos>
 8001794:	eeb0 7b40 	vmov.f64	d7, d0
 8001798:	ee28 7b07 	vmul.f64	d7, d8, d7
 800179c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	d5 = 289211.783328
			* cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665)
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3304      	adds	r3, #4
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3308      	adds	r3, #8
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017c8:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8001b58 <IVK+0xc30>
 80017cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017d0:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8001b60 <IVK+0xc38>
 80017d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017d8:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8001b98 <IVK+0xc70>
 80017dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017e0:	eeb0 0b47 	vmov.f64	d0, d7
 80017e4:	f012 f9ac 	bl	8013b40 <cos>
 80017e8:	eeb0 7b40 	vmov.f64	d7, d0
 80017ec:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001b68 <IVK+0xc40>
 80017f0:	ee27 7b06 	vmul.f64	d7, d7, d6
	d5 = 289211.783328
 80017f4:	ed97 6b56 	vldr	d6, [r7, #344]	; 0x158
 80017f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017fc:	ed87 7b48 	vstr	d7, [r7, #288]	; 0x120
			* e_J_inv_tmp_tmp;
	d6 = 289211.783328 * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8001800:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8001804:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001b68 <IVK+0xc40>
 8001808:	ee27 7b06 	vmul.f64	d7, d7, d6
 800180c:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8001810:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001814:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	d7 = 21136.68 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3304      	adds	r3, #4
 8001820:	ed93 7a00 	vldr	s14, [r3]
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3308      	adds	r3, #8
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001838:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8001b58 <IVK+0xc30>
 800183c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001840:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8001b60 <IVK+0xc38>
 8001844:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001848:	eeb0 0b47 	vmov.f64	d0, d7
 800184c:	f012 f978 	bl	8013b40 <cos>
 8001850:	eeb0 7b40 	vmov.f64	d7, d0
 8001854:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8001b70 <IVK+0xc48>
 8001858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800185c:	ed97 6b56 	vldr	d6, [r7, #344]	; 0x158
 8001860:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001864:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
	d8 = 21136.68 * d2 * b_J_inv_tmp_tmp;
 8001868:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 800186c:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001b70 <IVK+0xc48>
 8001870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001874:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8001878:	ee26 7b07 	vmul.f64	d7, d6, d7
 800187c:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
	dv[1] =
			27.0
					* (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp
 8001880:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8001884:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8001b78 <IVK+0xc50>
 8001888:	ee27 6b06 	vmul.f64	d6, d7, d6
 800188c:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8001890:	ee26 6b07 	vmul.f64	d6, d6, d7
							* d_J_inv_tmp_tmp
 8001894:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001898:	ee26 6b07 	vmul.f64	d6, d6, d7
							+ 119862.496 * b_J_inv_tmp * J_inv_tmp
 800189c:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80018a0:	ed9f 5bbb 	vldr	d5, [pc, #748]	; 8001b90 <IVK+0xc68>
 80018a4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80018a8:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80018ac:	ee25 5b07 	vmul.f64	d5, d5, d7
									* d_J_inv_tmp_tmp)
 80018b0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80018b4:	ee25 7b07 	vmul.f64	d7, d5, d7
							+ 119862.496 * b_J_inv_tmp * J_inv_tmp
 80018b8:	ee36 6b07 	vadd.f64	d6, d6, d7
							+ 119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp
 80018bc:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80018c0:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8001b90 <IVK+0xc68>
 80018c4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80018c8:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80018cc:	ee25 5b07 	vmul.f64	d5, d5, d7
									* d_J_inv_tmp_tmp)
 80018d0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80018d4:	ee25 7b07 	vmul.f64	d7, d5, d7
							+ 119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp
 80018d8:	ee36 6b07 	vadd.f64	d6, d6, d7
							+ 8760.0 * b_J_inv_tmp * c_J_inv_tmp
 80018dc:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80018e0:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8001b78 <IVK+0xc50>
 80018e4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80018e8:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80018ec:	ee25 5b07 	vmul.f64	d5, d5, d7
									* d_J_inv_tmp_tmp)
 80018f0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80018f4:	ee25 7b07 	vmul.f64	d7, d5, d7
							+ 8760.0 * b_J_inv_tmp * c_J_inv_tmp
 80018f8:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp
 80018fc:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8001900:	ee27 5b06 	vmul.f64	d5, d7, d6
					/ (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d
 8001904:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8001908:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001b80 <IVK+0xc58>
 800190c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001910:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8001914:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001918:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 800191c:	ee26 6b07 	vmul.f64	d6, d6, d7
							- 24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d)
 8001920:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8001924:	ed9f 4b96 	vldr	d4, [pc, #600]	; 8001b80 <IVK+0xc58>
 8001928:	ee27 4b04 	vmul.f64	d4, d7, d4
 800192c:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8001930:	ee24 4b07 	vmul.f64	d4, d4, d7
 8001934:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001938:	ee24 7b07 	vmul.f64	d7, d4, d7
 800193c:	ee36 6b47 	vsub.f64	d6, d6, d7
							+ d3 * d1) - d4 * d1)
 8001940:	ed97 4b4c 	vldr	d4, [r7, #304]	; 0x130
 8001944:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8001948:	ee24 7b07 	vmul.f64	d7, d4, d7
 800194c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001950:	ed97 4b4a 	vldr	d4, [r7, #296]	; 0x128
 8001954:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8001958:	ee24 7b07 	vmul.f64	d7, d4, d7
 800195c:	ee36 6b47 	vsub.f64	d6, d6, d7
							+ 289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d)
 8001960:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8001964:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8001b68 <IVK+0xc40>
 8001968:	ee27 4b04 	vmul.f64	d4, d7, d4
 800196c:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8001970:	ee24 4b07 	vmul.f64	d4, d4, d7
 8001974:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001978:	ee24 7b07 	vmul.f64	d7, d4, d7
 800197c:	ee36 6b07 	vadd.f64	d6, d6, d7
							- d6 * d) + d5 * d1) - d6 * d1)
 8001980:	ed97 4b46 	vldr	d4, [r7, #280]	; 0x118
 8001984:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001988:	ee24 7b07 	vmul.f64	d7, d4, d7
 800198c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001990:	ed97 4b48 	vldr	d4, [r7, #288]	; 0x120
 8001994:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8001998:	ee24 7b07 	vmul.f64	d7, d4, d7
 800199c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80019a0:	ed97 4b46 	vldr	d4, [r7, #280]	; 0x118
 80019a4:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 80019a8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80019ac:	ee36 6b47 	vsub.f64	d6, d6, d7
							+ 21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d)
 80019b0:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80019b4:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 8001b70 <IVK+0xc48>
 80019b8:	ee27 4b04 	vmul.f64	d4, d7, d4
 80019bc:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80019c0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80019c4:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80019c8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80019cc:	ee36 6b07 	vadd.f64	d6, d6, d7
							- 21136.68 * d_J_inv_tmp * b_J_inv_tmp_tmp * d)
 80019d0:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80019d4:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8001b70 <IVK+0xc48>
 80019d8:	ee27 4b04 	vmul.f64	d4, d7, d4
 80019dc:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80019e0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80019e4:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80019e8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80019ec:	ee36 6b47 	vsub.f64	d6, d6, d7
							+ d7 * d1) - d8 * d1);
 80019f0:	ed97 4b44 	vldr	d4, [r7, #272]	; 0x110
 80019f4:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 80019f8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80019fc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a00:	ed97 4b42 	vldr	d4, [r7, #264]	; 0x108
 8001a04:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8001a08:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001a0c:	ee36 6b47 	vsub.f64	d6, d6, d7
					/ (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d
 8001a10:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[1] =
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	ed83 7b02 	vstr	d7, [r3, #8]
	d9 = 8760.0
			* cos(
					(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995)
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3304      	adds	r3, #4
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3308      	adds	r3, #8
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a3c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a40:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	330c      	adds	r3, #12
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a58:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001b58 <IVK+0xc30>
 8001a5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a60:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001b60 <IVK+0xc38>
 8001a64:	ee37 7b46 	vsub.f64	d7, d7, d6
							+ -0.73665) + 1.52205)
 8001a68:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001b98 <IVK+0xc70>
 8001a6c:	ee37 7b46 	vsub.f64	d7, d7, d6
			* cos(
 8001a70:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001b88 <IVK+0xc60>
 8001a74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a78:	eeb0 0b47 	vmov.f64	d0, d7
 8001a7c:	f012 f860 	bl	8013b40 <cos>
 8001a80:	eeb0 7b40 	vmov.f64	d7, d0
 8001a84:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001b78 <IVK+0xc50>
 8001a88:	ee27 8b06 	vmul.f64	d8, d7, d6
			* cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3304      	adds	r3, #4
 8001a94:	ed93 7a00 	vldr	s14, [r3]
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	edd3 7a00 	vldr	s15, [r3]
 8001aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aac:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001b58 <IVK+0xc30>
 8001ab0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ab4:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001b60 <IVK+0xc38>
 8001ab8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001abc:	eeb0 0b47 	vmov.f64	d0, d7
 8001ac0:	f012 f83e 	bl	8013b40 <cos>
 8001ac4:	eeb0 7b40 	vmov.f64	d7, d0
	d9 = 8760.0
 8001ac8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001acc:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
	d10 = 8760.0
			* sin(
					(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995)
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001af0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001af4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	330c      	adds	r3, #12
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b0c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001b58 <IVK+0xc30>
 8001b10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b14:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001b60 <IVK+0xc38>
 8001b18:	ee37 7b46 	vsub.f64	d7, d7, d6
							+ -0.73665) + 1.52205)
 8001b1c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001b98 <IVK+0xc70>
 8001b20:	ee37 7b46 	vsub.f64	d7, d7, d6
			* sin(
 8001b24:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001b88 <IVK+0xc60>
 8001b28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b2c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b30:	f012 f85a 	bl	8013be8 <sin>
 8001b34:	eeb0 7b40 	vmov.f64	d7, d0
 8001b38:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001b78 <IVK+0xc50>
 8001b3c:	ee27 8b06 	vmul.f64	d8, d7, d6
			* sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	3304      	adds	r3, #4
 8001b48:	ed93 7a00 	vldr	s14, [r3]
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3308      	adds	r3, #8
 8001b54:	e038      	b.n	8001bc8 <IVK+0xca0>
 8001b56:	bf00      	nop
 8001b58:	45a1cac1 	.word	0x45a1cac1
 8001b5c:	3ffaf3b6 	.word	0x3ffaf3b6
 8001b60:	39581062 	.word	0x39581062
 8001b64:	3fecc8b4 	.word	0x3fecc8b4
 8001b68:	2220bc38 	.word	0x2220bc38
 8001b6c:	4111a6ef 	.word	0x4111a6ef
 8001b70:	851eb852 	.word	0x851eb852
 8001b74:	40d4a42b 	.word	0x40d4a42b
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	40c11c00 	.word	0x40c11c00
 8001b80:	eb851eb8 	.word	0xeb851eb8
 8001b84:	40d80d51 	.word	0x40d80d51
 8001b88:	19ce075f 	.word	0x19ce075f
 8001b8c:	3ff85a51 	.word	0x3ff85a51
 8001b90:	ef9db22d 	.word	0xef9db22d
 8001b94:	40fd4367 	.word	0x40fd4367
 8001b98:	05532618 	.word	0x05532618
 8001b9c:	3fe792a3 	.word	0x3fe792a3
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	404e0000 	.word	0x404e0000
 8001ba8:	45a1cac1 	.word	0x45a1cac1
 8001bac:	3ffaf3b6 	.word	0x3ffaf3b6
 8001bb0:	39581062 	.word	0x39581062
 8001bb4:	3fecc8b4 	.word	0x3fecc8b4
 8001bb8:	05532618 	.word	0x05532618
 8001bbc:	3fe792a3 	.word	0x3fe792a3
 8001bc0:	d916872b 	.word	0xd916872b
 8001bc4:	4089a7ce 	.word	0x4089a7ce
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bd4:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 8001ba8 <IVK+0xc80>
 8001bd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bdc:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 8001bb0 <IVK+0xc88>
 8001be0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001be4:	eeb0 0b47 	vmov.f64	d0, d7
 8001be8:	f011 fffe 	bl	8013be8 <sin>
 8001bec:	eeb0 7b40 	vmov.f64	d7, d0
	d10 = 8760.0
 8001bf0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001bf4:	ed87 7b3e 	vstr	d7, [r7, #248]	; 0xf8
	d3 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)
 8001bf8:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001bfc:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001c00:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8001c04:	ee26 6b07 	vmul.f64	d6, d6, d7
			- d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 8001c08:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001c0c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c10:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8001c14:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c18:	ee36 6b47 	vsub.f64	d6, d6, d7
			+ d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 8001c1c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c20:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c24:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8001c28:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c2c:	ee36 6b07 	vadd.f64	d6, d6, d7
			- d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 8001c30:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c34:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c38:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8001c3c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c40:	ee36 6b47 	vsub.f64	d6, d6, d7
			+ d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 8001c44:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001c48:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c4c:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8001c50:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c54:	ee36 6b07 	vadd.f64	d6, d6, d7
			- d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 8001c58:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001c5c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c60:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8001c64:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c68:	ee36 6b47 	vsub.f64	d6, d6, d7
			+ d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 8001c6c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c70:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c74:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8001c78:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c7c:	ee36 6b07 	vadd.f64	d6, d6, d7
			- d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 8001c80:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c84:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c88:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8001c8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c90:	ee36 6b47 	vsub.f64	d6, d6, d7
			+ d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 8001c94:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001c98:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c9c:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 8001ca0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ca4:	ee36 6b07 	vadd.f64	d6, d6, d7
			- d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 8001ca8:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001cac:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001cb0:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8001cb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001cb8:	ee36 6b47 	vsub.f64	d6, d6, d7
			+ d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 8001cbc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001cc0:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001cc4:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 8001cc8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ccc:	ee36 6b07 	vadd.f64	d6, d6, d7
			- d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp);
 8001cd0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001cd4:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001cd8:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8001cdc:	ee25 7b07 	vmul.f64	d7, d5, d7
	d3 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)
 8001ce0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ce4:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	dv[6] = -(27.0
			* (((d10 * f_J_inv_tmp_tmp
 8001ce8:	ed97 6b3e 	vldr	d6, [r7, #248]	; 0xf8
 8001cec:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001cf0:	ee26 8b07 	vmul.f64	d8, d6, d7
					+ 119862.496
							* cos(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d14:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001d18:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	330c      	adds	r3, #12
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d30:	ed1f 6b63 	vldr	d6, [pc, #-396]	; 8001ba8 <IVK+0xc80>
 8001d34:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8001d38:	ed1f 6b63 	vldr	d6, [pc, #-396]	; 8001bb0 <IVK+0xc88>
 8001d3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d40:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8001b98 <IVK+0xc70>
 8001d44:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8001d48:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 8001b88 <IVK+0xc60>
 8001d4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d50:	eeb0 0b47 	vmov.f64	d0, d7
 8001d54:	f011 fef4 	bl	8013b40 <cos>
 8001d58:	eeb0 7b40 	vmov.f64	d7, d0
 8001d5c:	ed1f 6b74 	vldr	d6, [pc, #-464]	; 8001b90 <IVK+0xc68>
 8001d60:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001d88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d8c:	ed1f 6b7a 	vldr	d6, [pc, #-488]	; 8001ba8 <IVK+0xc80>
 8001d90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d94:	ed1f 6b7a 	vldr	d6, [pc, #-488]	; 8001bb0 <IVK+0xc88>
 8001d98:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8001d9c:	ed1f 6b82 	vldr	d6, [pc, #-520]	; 8001b98 <IVK+0xc70>
 8001da0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001da4:	eeb0 0b47 	vmov.f64	d0, d7
 8001da8:	f011 feca 	bl	8013b40 <cos>
 8001dac:	eeb0 7b40 	vmov.f64	d7, d0
 8001db0:	ee29 6b07 	vmul.f64	d6, d9, d7
											+ -0.73665) * f_J_inv_tmp_tmp)
 8001db4:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001db8:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 119862.496
 8001dbc:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ 119862.496
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001de0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001de4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	330c      	adds	r3, #12
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001df8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001dfc:	ed1f 6b96 	vldr	d6, [pc, #-600]	; 8001ba8 <IVK+0xc80>
 8001e00:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8001e04:	ed1f 6b96 	vldr	d6, [pc, #-600]	; 8001bb0 <IVK+0xc88>
 8001e08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e0c:	ed1f 6b9e 	vldr	d6, [pc, #-632]	; 8001b98 <IVK+0xc70>
 8001e10:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8001e14:	ed1f 6ba4 	vldr	d6, [pc, #-656]	; 8001b88 <IVK+0xc60>
 8001e18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e1c:	eeb0 0b47 	vmov.f64	d0, d7
 8001e20:	f011 fee2 	bl	8013be8 <sin>
 8001e24:	eeb0 7b40 	vmov.f64	d7, d0
 8001e28:	ed1f 6ba7 	vldr	d6, [pc, #-668]	; 8001b90 <IVK+0xc68>
 8001e2c:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3304      	adds	r3, #4
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3308      	adds	r3, #8
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e50:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001e54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e58:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 8001ba8 <IVK+0xc80>
 8001e5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e60:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 8001bb0 <IVK+0xc88>
 8001e64:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8001e68:	ed1f 6bb5 	vldr	d6, [pc, #-724]	; 8001b98 <IVK+0xc70>
 8001e6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e70:	eeb0 0b47 	vmov.f64	d0, d7
 8001e74:	f011 feb8 	bl	8013be8 <sin>
 8001e78:	eeb0 7b40 	vmov.f64	d7, d0
 8001e7c:	ee29 6b07 	vmul.f64	d6, d9, d7
											+ -0.73665) * f_J_inv_tmp_tmp)
 8001e80:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001e84:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 119862.496
 8001e88:	ee38 6b07 	vadd.f64	d6, d8, d7
					+ d9 * f_J_inv_tmp_tmp)) / d3;
 8001e8c:	ed97 5b40 	vldr	d5, [r7, #256]	; 0x100
 8001e90:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001e94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e98:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (((d10 * f_J_inv_tmp_tmp
 8001e9c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8001ea0:	ee27 7b06 	vmul.f64	d7, d7, d6
	dv[6] = -(27.0
 8001ea4:	eeb1 5b47 	vneg.f64	d5, d7
					+ d9 * f_J_inv_tmp_tmp)) / d3;
 8001ea8:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8001eac:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[6] = -(27.0
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	dv[11] = -(27.0
			* (820.976 * J_inv_tmp * f_J_inv_tmp_tmp
 8001eb8:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8001ebc:	ed1f 6bc0 	vldr	d6, [pc, #-768]	; 8001bc0 <IVK+0xc98>
 8001ec0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ec4:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001ec8:	ee26 8b07 	vmul.f64	d8, d6, d7
					+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	ed93 7a00 	vldr	s14, [r3]
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3308      	adds	r3, #8
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eec:	ed1f 6bd2 	vldr	d6, [pc, #-840]	; 8001ba8 <IVK+0xc80>
 8001ef0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ef4:	ed1f 6bd2 	vldr	d6, [pc, #-840]	; 8001bb0 <IVK+0xc88>
 8001ef8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001efc:	eeb0 0b47 	vmov.f64	d0, d7
 8001f00:	f011 fe1e 	bl	8013b40 <cos>
 8001f04:	eeb0 7b40 	vmov.f64	d7, d0
 8001f08:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8001ba0 <IVK+0xc78>
 8001f0c:	ee27 6b06 	vmul.f64	d6, d7, d6
							* f_J_inv_tmp_tmp)) / d3;
 8001f10:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001f14:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8001f18:	ee38 7b07 	vadd.f64	d7, d8, d7
			* (820.976 * J_inv_tmp * f_J_inv_tmp_tmp
 8001f1c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8001f20:	ee27 7b06 	vmul.f64	d7, d7, d6
	dv[11] = -(27.0
 8001f24:	eeb1 5b47 	vneg.f64	d5, d7
							* f_J_inv_tmp_tmp)) / d3;
 8001f28:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8001f2c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[11] = -(27.0
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	dv[16] = -(27.0
			* (820.976
					* cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665)
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3308      	adds	r3, #8
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f58:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f60:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001ba8 <IVK+0xc80>
 8001f64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f68:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001bb0 <IVK+0xc88>
 8001f6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f70:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001bb8 <IVK+0xc90>
 8001f74:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f78:	eeb0 0b47 	vmov.f64	d0, d7
 8001f7c:	f011 fde0 	bl	8013b40 <cos>
 8001f80:	eeb0 7b40 	vmov.f64	d7, d0
 8001f84:	ed1f 6bf2 	vldr	d6, [pc, #-968]	; 8001bc0 <IVK+0xc98>
 8001f88:	ee27 6b06 	vmul.f64	d6, d7, d6
					* d_J_inv_tmp_tmp
 8001f8c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001f90:	ee26 8b07 	vmul.f64	d8, d6, d7
					+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	ed93 7a00 	vldr	s14, [r3]
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3308      	adds	r3, #8
 8001fa8:	edd3 7a00 	vldr	s15, [r3]
 8001fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fb4:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 8002388 <IVK+0x1460>
 8001fb8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fbc:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 8002390 <IVK+0x1468>
 8001fc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fc4:	eeb0 0b47 	vmov.f64	d0, d7
 8001fc8:	f011 fdba 	bl	8013b40 <cos>
 8001fcc:	eeb0 7b40 	vmov.f64	d7, d0
 8001fd0:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8002398 <IVK+0x1470>
 8001fd4:	ee27 6b06 	vmul.f64	d6, d7, d6
							* d_J_inv_tmp_tmp)) / d3;
 8001fd8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001fdc:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8001fe0:	ee38 7b07 	vadd.f64	d7, d8, d7
			* (820.976
 8001fe4:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8001fe8:	ee27 7b06 	vmul.f64	d7, d7, d6
	dv[16] = -(27.0
 8001fec:	eeb1 5b47 	vneg.f64	d5, d7
							* d_J_inv_tmp_tmp)) / d3;
 8001ff0:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8001ff4:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[16] = -(27.0
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	dv[21] = -(27.0 * (820.976 * J_inv_tmp_tmp + 60.0 * d_J_inv_tmp)) / d3;
 8002000:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002004:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80023a0 <IVK+0x1478>
 8002008:	ee27 6b06 	vmul.f64	d6, d7, d6
 800200c:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8002010:	ed9f 5be1 	vldr	d5, [pc, #900]	; 8002398 <IVK+0x1470>
 8002014:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002018:	ee36 7b07 	vadd.f64	d7, d6, d7
 800201c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002020:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002024:	eeb1 5b47 	vneg.f64	d5, d7
 8002028:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 800202c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
	d4 = 2.0 * d3;
 8002038:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 800203c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002040:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	dv[2] = -(55.0
			* (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp
 8002044:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8002048:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 80023a8 <IVK+0x1480>
 800204c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002050:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002054:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002058:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800205c:	ee26 6b07 	vmul.f64	d6, d6, d7
					* d_J_inv_tmp_tmp
 8002060:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002064:	ee26 6b07 	vmul.f64	d6, d6, d7
					+ 59931.248 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * e_J_inv_tmp
 8002068:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800206c:	ed9f 5bce 	vldr	d5, [pc, #824]	; 80023a8 <IVK+0x1480>
 8002070:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002074:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002078:	ee25 5b07 	vmul.f64	d5, d5, d7
 800207c:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8002080:	ee25 5b07 	vmul.f64	d5, d5, d7
							* d_J_inv_tmp_tmp)
 8002084:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002088:	ee25 7b07 	vmul.f64	d7, d5, d7
					+ 59931.248 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * e_J_inv_tmp
 800208c:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ d9 * e_J_inv_tmp * d_J_inv_tmp_tmp)
 8002090:	ed97 5b40 	vldr	d5, [r7, #256]	; 0x100
 8002094:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8002098:	ee25 5b07 	vmul.f64	d5, d5, d7
 800209c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80020a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80020a4:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ 51432.588 * b_J_inv_tmp * b_J_inv_tmp_tmp * e_J_inv_tmp
 80020a8:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80020ac:	ed9f 5bc4 	vldr	d5, [pc, #784]	; 80023c0 <IVK+0x1498>
 80020b0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80020b4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80020b8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80020bc:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80020c0:	ee25 5b07 	vmul.f64	d5, d5, d7
							* d_J_inv_tmp_tmp)
 80020c4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80020c8:	ee25 7b07 	vmul.f64	d7, d5, d7
					+ 51432.588 * b_J_inv_tmp * b_J_inv_tmp_tmp * e_J_inv_tmp
 80020cc:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ d10 * e_J_inv_tmp * d_J_inv_tmp_tmp)
 80020d0:	ed97 5b3e 	vldr	d5, [r7, #248]	; 0xf8
 80020d4:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80020d8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80020dc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80020e0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80020e4:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ 51432.588 * c_J_inv_tmp_tmp * e_J_inv_tmp_tmp
 80020e8:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80020ec:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 80023c0 <IVK+0x1498>
 80020f0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80020f4:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80020f8:	ee25 5b07 	vmul.f64	d5, d5, d7
							* e_J_inv_tmp * d_J_inv_tmp_tmp)) / d4;
 80020fc:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8002100:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002104:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002108:	ee25 7b07 	vmul.f64	d7, d5, d7
					+ 51432.588 * c_J_inv_tmp_tmp * e_J_inv_tmp_tmp
 800210c:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp
 8002110:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80023e8 <IVK+0x14c0>
 8002114:	ee27 7b06 	vmul.f64	d7, d7, d6
	dv[2] = -(55.0
 8002118:	eeb1 5b47 	vneg.f64	d5, d7
							* e_J_inv_tmp * d_J_inv_tmp_tmp)) / d4;
 800211c:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8002120:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[2] = -(55.0
 8002124:	f107 0310 	add.w	r3, r7, #16
 8002128:	ed83 7b04 	vstr	d7, [r3, #16]
	dv[7] =
			55.0
					* (((((59931.248
							* cos(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3304      	adds	r3, #4
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3308      	adds	r3, #8
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800214c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002150:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	330c      	adds	r3, #12
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002164:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002168:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8002388 <IVK+0x1460>
 800216c:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8002170:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8002390 <IVK+0x1468>
 8002174:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002178:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80023d8 <IVK+0x14b0>
 800217c:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8002180:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 80023b8 <IVK+0x1490>
 8002184:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002188:	eeb0 0b47 	vmov.f64	d0, d7
 800218c:	f011 fcd8 	bl	8013b40 <cos>
 8002190:	eeb0 7b40 	vmov.f64	d7, d0
 8002194:	ed9f 6b84 	vldr	d6, [pc, #528]	; 80023a8 <IVK+0x1480>
 8002198:	ee27 8b06 	vmul.f64	d8, d7, d6
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3304      	adds	r3, #4
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3308      	adds	r3, #8
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021bc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021c4:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8002388 <IVK+0x1460>
 80021c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021cc:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8002390 <IVK+0x1468>
 80021d0:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 80021d4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80023d8 <IVK+0x14b0>
 80021d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021dc:	eeb0 0b47 	vmov.f64	d0, d7
 80021e0:	f011 fcae 	bl	8013b40 <cos>
 80021e4:	eeb0 7b40 	vmov.f64	d7, d0
 80021e8:	ee28 6b07 	vmul.f64	d6, d8, d7
											+ -0.73665) * f_J_inv_tmp_tmp
 80021ec:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80021f0:	ee26 6b07 	vmul.f64	d6, d6, d7
							* e_J_inv_tmp
 80021f4:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80021f8:	ee26 8b07 	vmul.f64	d8, d6, d7
							+ 59931.248
									* sin(
											(((((q[1] + 2.0 * q[2]) + q[3])
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	3304      	adds	r3, #4
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3308      	adds	r3, #8
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800221c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002220:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	330c      	adds	r3, #12
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002234:	ee36 7b07 	vadd.f64	d7, d6, d7
													+ 1.6845) + -0.8995)
 8002238:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8002388 <IVK+0x1460>
 800223c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002240:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8002390 <IVK+0x1468>
 8002244:	ee37 7b46 	vsub.f64	d7, d7, d6
													+ -0.73665) + 1.52205)
 8002248:	ed9f 6b63 	vldr	d6, [pc, #396]	; 80023d8 <IVK+0x14b0>
 800224c:	ee37 7b46 	vsub.f64	d7, d7, d6
									* sin(
 8002250:	ed9f 6b59 	vldr	d6, [pc, #356]	; 80023b8 <IVK+0x1490>
 8002254:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002258:	eeb0 0b47 	vmov.f64	d0, d7
 800225c:	f011 fcc4 	bl	8013be8 <sin>
 8002260:	eeb0 7b40 	vmov.f64	d7, d0
 8002264:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80023a8 <IVK+0x1480>
 8002268:	ee27 9b06 	vmul.f64	d9, d7, d6
									* sin(
											(((q[1] + 2.0 * q[2]) + 1.6845)
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3304      	adds	r3, #4
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3308      	adds	r3, #8
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800228c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002290:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002294:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002388 <IVK+0x1460>
 8002298:	ee37 7b06 	vadd.f64	d7, d7, d6
													+ -0.8995) + -0.73665)
 800229c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002390 <IVK+0x1468>
 80022a0:	ee37 7b46 	vsub.f64	d7, d7, d6
									* sin(
 80022a4:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 80023d8 <IVK+0x14b0>
 80022a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022ac:	eeb0 0b47 	vmov.f64	d0, d7
 80022b0:	f011 fc9a 	bl	8013be8 <sin>
 80022b4:	eeb0 7b40 	vmov.f64	d7, d0
 80022b8:	ee29 6b07 	vmul.f64	d6, d9, d7
									* f_J_inv_tmp_tmp * e_J_inv_tmp)
 80022bc:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80022c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80022c4:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80022c8:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 59931.248
 80022cc:	ee38 8b07 	vadd.f64	d8, d8, d7
							+ 8760.0
									* cos(
											(((((q[1] + 2.0 * q[2]) + q[3])
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3304      	adds	r3, #4
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3308      	adds	r3, #8
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80022f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	330c      	adds	r3, #12
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002308:	ee36 7b07 	vadd.f64	d7, d6, d7
													+ 1.6845) + -0.8995)
 800230c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002388 <IVK+0x1460>
 8002310:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002314:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002390 <IVK+0x1468>
 8002318:	ee37 7b46 	vsub.f64	d7, d7, d6
													+ -0.73665) + 1.52205)
 800231c:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 80023d8 <IVK+0x14b0>
 8002320:	ee37 7b46 	vsub.f64	d7, d7, d6
									* cos(
 8002324:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80023b8 <IVK+0x1490>
 8002328:	ee37 7b06 	vadd.f64	d7, d7, d6
 800232c:	eeb0 0b47 	vmov.f64	d0, d7
 8002330:	f011 fc06 	bl	8013b40 <cos>
 8002334:	eeb0 7b40 	vmov.f64	d7, d0
 8002338:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 80023b0 <IVK+0x1488>
 800233c:	ee27 9b06 	vmul.f64	d9, d7, d6
									* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3304      	adds	r3, #4
 8002348:	ed93 7a00 	vldr	s14, [r3]
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3308      	adds	r3, #8
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002360:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8002388 <IVK+0x1460>
 8002364:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002368:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8002390 <IVK+0x1468>
 800236c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002370:	eeb0 0b47 	vmov.f64	d0, d7
 8002374:	f011 fbe4 	bl	8013b40 <cos>
 8002378:	eeb0 7b40 	vmov.f64	d7, d0
 800237c:	ee29 9b07 	vmul.f64	d9, d9, d7
									* cos(q[0]) * e_J_inv_tmp)
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	e03b      	b.n	8002400 <IVK+0x14d8>
 8002388:	45a1cac1 	.word	0x45a1cac1
 800238c:	3ffaf3b6 	.word	0x3ffaf3b6
 8002390:	39581062 	.word	0x39581062
 8002394:	3fecc8b4 	.word	0x3fecc8b4
 8002398:	00000000 	.word	0x00000000
 800239c:	404e0000 	.word	0x404e0000
 80023a0:	d916872b 	.word	0xd916872b
 80023a4:	4089a7ce 	.word	0x4089a7ce
 80023a8:	ef9db22d 	.word	0xef9db22d
 80023ac:	40ed4367 	.word	0x40ed4367
 80023b0:	00000000 	.word	0x00000000
 80023b4:	40c11c00 	.word	0x40c11c00
 80023b8:	19ce075f 	.word	0x19ce075f
 80023bc:	3ff85a51 	.word	0x3ff85a51
 80023c0:	d0e56042 	.word	0xd0e56042
 80023c4:	40e91d12 	.word	0x40e91d12
 80023c8:	00000000 	.word	0x00000000
 80023cc:	404e0000 	.word	0x404e0000
 80023d0:	b020c49c 	.word	0xb020c49c
 80023d4:	40760472 	.word	0x40760472
 80023d8:	05532618 	.word	0x05532618
 80023dc:	3fe792a3 	.word	0x3fe792a3
 80023e0:	d916872b 	.word	0xd916872b
 80023e4:	4079a7ce 	.word	0x4079a7ce
 80023e8:	00000000 	.word	0x00000000
 80023ec:	404b8000 	.word	0x404b8000
 80023f0:	45a1cac1 	.word	0x45a1cac1
 80023f4:	3ffaf3b6 	.word	0x3ffaf3b6
 80023f8:	39581062 	.word	0x39581062
 80023fc:	3fecc8b4 	.word	0x3fecc8b4
 8002400:	edd3 7a00 	vldr	s15, [r3]
 8002404:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002408:	eeb0 0b47 	vmov.f64	d0, d7
 800240c:	f011 fb98 	bl	8013b40 <cos>
 8002410:	eeb0 7b40 	vmov.f64	d7, d0
 8002414:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002418:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800241c:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 8760.0
 8002420:	ee38 8b07 	vadd.f64	d8, d8, d7
							+ 51432.588
									* cos(
											(((((q[1] + 2.0 * q[2]) + q[3])
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3304      	adds	r3, #4
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3308      	adds	r3, #8
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002444:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002448:	ee36 6b07 	vadd.f64	d6, d6, d7
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	330c      	adds	r3, #12
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800245c:	ee36 7b07 	vadd.f64	d7, d6, d7
													+ 1.6845) + -0.8995)
 8002460:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 80023f0 <IVK+0x14c8>
 8002464:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002468:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 80023f8 <IVK+0x14d0>
 800246c:	ee37 7b46 	vsub.f64	d7, d7, d6
													+ -0.73665) + 1.52205)
 8002470:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 80023d8 <IVK+0x14b0>
 8002474:	ee37 7b46 	vsub.f64	d7, d7, d6
									* cos(
 8002478:	ed1f 6b31 	vldr	d6, [pc, #-196]	; 80023b8 <IVK+0x1490>
 800247c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002480:	eeb0 0b47 	vmov.f64	d0, d7
 8002484:	f011 fb5c 	bl	8013b40 <cos>
 8002488:	eeb0 7b40 	vmov.f64	d7, d0
 800248c:	ed1f 6b34 	vldr	d6, [pc, #-208]	; 80023c0 <IVK+0x1498>
 8002490:	ee27 9b06 	vmul.f64	d9, d7, d6
									* cos(q[1] + 1.6845) * f_J_inv_tmp_tmp
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3304      	adds	r3, #4
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024a4:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 80023f0 <IVK+0x14c8>
 80024a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80024ac:	eeb0 0b47 	vmov.f64	d0, d7
 80024b0:	f011 fb46 	bl	8013b40 <cos>
 80024b4:	eeb0 7b40 	vmov.f64	d7, d0
 80024b8:	ee29 6b07 	vmul.f64	d6, d9, d7
 80024bc:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80024c0:	ee26 6b07 	vmul.f64	d6, d6, d7
									* e_J_inv_tmp)
 80024c4:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80024c8:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 51432.588
 80024cc:	ee38 8b07 	vadd.f64	d8, d8, d7
							+ 8760.0
									* sin(
											(((((q[1] + 2.0 * q[2]) + q[3])
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3304      	adds	r3, #4
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3308      	adds	r3, #8
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80024f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	330c      	adds	r3, #12
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002508:	ee36 7b07 	vadd.f64	d7, d6, d7
													+ 1.6845) + -0.8995)
 800250c:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 80023f0 <IVK+0x14c8>
 8002510:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002514:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 80023f8 <IVK+0x14d0>
 8002518:	ee37 7b46 	vsub.f64	d7, d7, d6
													+ -0.73665) + 1.52205)
 800251c:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 80023d8 <IVK+0x14b0>
 8002520:	ee37 7b46 	vsub.f64	d7, d7, d6
									* sin(
 8002524:	ed1f 6b5c 	vldr	d6, [pc, #-368]	; 80023b8 <IVK+0x1490>
 8002528:	ee37 7b06 	vadd.f64	d7, d7, d6
 800252c:	eeb0 0b47 	vmov.f64	d0, d7
 8002530:	f011 fb5a 	bl	8013be8 <sin>
 8002534:	eeb0 7b40 	vmov.f64	d7, d0
 8002538:	ed1f 6b63 	vldr	d6, [pc, #-396]	; 80023b0 <IVK+0x1488>
 800253c:	ee27 9b06 	vmul.f64	d9, d7, d6
									* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3304      	adds	r3, #4
 8002548:	ed93 7a00 	vldr	s14, [r3]
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3308      	adds	r3, #8
 8002554:	edd3 7a00 	vldr	s15, [r3]
 8002558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002560:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 80023f0 <IVK+0x14c8>
 8002564:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002568:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 80023f8 <IVK+0x14d0>
 800256c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002570:	eeb0 0b47 	vmov.f64	d0, d7
 8002574:	f011 fb38 	bl	8013be8 <sin>
 8002578:	eeb0 7b40 	vmov.f64	d7, d0
 800257c:	ee29 9b07 	vmul.f64	d9, d9, d7
									* cos(q[0]) * e_J_inv_tmp)
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800258e:	eeb0 0b47 	vmov.f64	d0, d7
 8002592:	f011 fad5 	bl	8013b40 <cos>
 8002596:	eeb0 7b40 	vmov.f64	d7, d0
 800259a:	ee29 6b07 	vmul.f64	d6, d9, d7
 800259e:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80025a2:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 8760.0
 80025a6:	ee38 8b07 	vadd.f64	d8, d8, d7
							+ 51432.588
									* sin(
											(((((q[1] + 2.0 * q[2]) + q[3])
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3304      	adds	r3, #4
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3308      	adds	r3, #8
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 80025ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025e2:	ee36 7b07 	vadd.f64	d7, d6, d7
													+ 1.6845) + -0.8995)
 80025e6:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 80023f0 <IVK+0x14c8>
 80025ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80025ee:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 80023f8 <IVK+0x14d0>
 80025f2:	ee37 7b46 	vsub.f64	d7, d7, d6
													+ -0.73665) + 1.52205)
 80025f6:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 80023d8 <IVK+0x14b0>
 80025fa:	ee37 7b46 	vsub.f64	d7, d7, d6
									* sin(
 80025fe:	ed1f 6b92 	vldr	d6, [pc, #-584]	; 80023b8 <IVK+0x1490>
 8002602:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002606:	eeb0 0b47 	vmov.f64	d0, d7
 800260a:	f011 faed 	bl	8013be8 <sin>
 800260e:	eeb0 7b40 	vmov.f64	d7, d0
 8002612:	ed1f 6b95 	vldr	d6, [pc, #-596]	; 80023c0 <IVK+0x1498>
 8002616:	ee27 9b06 	vmul.f64	d9, d7, d6
									* sin(q[1] + 1.6845) * f_J_inv_tmp_tmp
 800261a:	f107 030c 	add.w	r3, r7, #12
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3304      	adds	r3, #4
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800262a:	ed1f 6b8f 	vldr	d6, [pc, #-572]	; 80023f0 <IVK+0x14c8>
 800262e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002632:	eeb0 0b47 	vmov.f64	d0, d7
 8002636:	f011 fad7 	bl	8013be8 <sin>
 800263a:	eeb0 7b40 	vmov.f64	d7, d0
 800263e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002642:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002646:	ee26 6b07 	vmul.f64	d6, d6, d7
									* e_J_inv_tmp) / d4;
 800264a:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800264e:	ee26 7b07 	vmul.f64	d7, d6, d7
							+ 51432.588
 8002652:	ee38 7b07 	vadd.f64	d7, d8, d7
					* (((((59931.248
 8002656:	ed1f 6b9c 	vldr	d6, [pc, #-624]	; 80023e8 <IVK+0x14c0>
 800265a:	ee27 5b06 	vmul.f64	d5, d7, d6
									* e_J_inv_tmp) / d4;
 800265e:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8002662:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[7] =
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	dv[12] = 55.0
			* ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3304      	adds	r3, #4
 8002676:	ed93 7a00 	vldr	s14, [r3]
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3308      	adds	r3, #8
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800268e:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 80023f0 <IVK+0x14c8>
 8002692:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002696:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 80023f8 <IVK+0x14d0>
 800269a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800269e:	eeb0 0b47 	vmov.f64	d0, d7
 80026a2:	f011 fa4d 	bl	8013b40 <cos>
 80026a6:	eeb0 7b40 	vmov.f64	d7, d0
 80026aa:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 80023c8 <IVK+0x14a0>
 80026ae:	ee27 8b06 	vmul.f64	d8, d7, d6
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026c0:	eeb0 0b47 	vmov.f64	d0, d7
 80026c4:	f011 fa3c 	bl	8013b40 <cos>
 80026c8:	eeb0 7b40 	vmov.f64	d7, d0
 80026cc:	ee28 6b07 	vmul.f64	d6, d8, d7
					* e_J_inv_tmp
 80026d0:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80026d4:	ee26 8b07 	vmul.f64	d8, d6, d7
					+ 352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3304      	adds	r3, #4
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026e8:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 80023f0 <IVK+0x14c8>
 80026ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026f0:	eeb0 0b47 	vmov.f64	d0, d7
 80026f4:	f011 fa24 	bl	8013b40 <cos>
 80026f8:	eeb0 7b40 	vmov.f64	d7, d0
 80026fc:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 80023d0 <IVK+0x14a8>
 8002700:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002704:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002708:	ee26 6b07 	vmul.f64	d6, d6, d7
							* e_J_inv_tmp)
 800270c:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8002710:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp
 8002714:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ 410.488
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3304      	adds	r3, #4
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3308      	adds	r3, #8
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002738:	ee37 7b07 	vadd.f64	d7, d7, d7
 800273c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002740:	ed1f 6bd5 	vldr	d6, [pc, #-852]	; 80023f0 <IVK+0x14c8>
 8002744:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002748:	ed1f 6bd5 	vldr	d6, [pc, #-852]	; 80023f8 <IVK+0x14d0>
 800274c:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8002750:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 80023d8 <IVK+0x14b0>
 8002754:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002758:	eeb0 0b47 	vmov.f64	d0, d7
 800275c:	f011 f9f0 	bl	8013b40 <cos>
 8002760:	eeb0 7b40 	vmov.f64	d7, d0
 8002764:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 80023e0 <IVK+0x14b8>
 8002768:	ee27 6b06 	vmul.f64	d6, d7, d6
											+ -0.73665) * f_J_inv_tmp_tmp
 800276c:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002770:	ee26 6b07 	vmul.f64	d6, d6, d7
							* e_J_inv_tmp) / d4;
 8002774:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8002778:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 410.488
 800277c:	ee38 7b07 	vadd.f64	d7, d8, d7
			* ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])
 8002780:	ed1f 6be7 	vldr	d6, [pc, #-924]	; 80023e8 <IVK+0x14c0>
 8002784:	ee27 5b06 	vmul.f64	d5, d7, d6
							* e_J_inv_tmp) / d4;
 8002788:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 800278c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[12] = 55.0
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	dv[17] = 55.0
			* ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3304      	adds	r3, #4
 80027a0:	ed93 7a00 	vldr	s14, [r3]
 80027a4:	f107 030c 	add.w	r3, r7, #12
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3308      	adds	r3, #8
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027b8:	ed1f 6bf3 	vldr	d6, [pc, #-972]	; 80023f0 <IVK+0x14c8>
 80027bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80027c0:	ed1f 6bf3 	vldr	d6, [pc, #-972]	; 80023f8 <IVK+0x14d0>
 80027c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80027c8:	eeb0 0b47 	vmov.f64	d0, d7
 80027cc:	f011 f9b8 	bl	8013b40 <cos>
 80027d0:	eeb0 7b40 	vmov.f64	d7, d0
 80027d4:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 8002ba8 <IVK+0x1c80>
 80027d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80027dc:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80027e0:	ee26 6b07 	vmul.f64	d6, d6, d7
					* d_J_inv_tmp_tmp
 80027e4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80027e8:	ee26 8b07 	vmul.f64	d8, d6, d7
					+ 352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3304      	adds	r3, #4
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027fc:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8002bb0 <IVK+0x1c88>
 8002800:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002804:	eeb0 0b47 	vmov.f64	d0, d7
 8002808:	f011 f99a 	bl	8013b40 <cos>
 800280c:	eeb0 7b40 	vmov.f64	d7, d0
 8002810:	ed9f 6be9 	vldr	d6, [pc, #932]	; 8002bb8 <IVK+0x1c90>
 8002814:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002818:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800281c:	ee26 6b07 	vmul.f64	d6, d6, d7
							* d_J_inv_tmp_tmp)
 8002820:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002824:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp
 8002828:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ 410.488
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3304      	adds	r3, #4
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3308      	adds	r3, #8
 8002844:	edd3 7a00 	vldr	s15, [r3]
 8002848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800284c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002850:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002854:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8002bb0 <IVK+0x1c88>
 8002858:	ee37 7b06 	vadd.f64	d7, d7, d6
 800285c:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8002be8 <IVK+0x1cc0>
 8002860:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8002864:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8002bf0 <IVK+0x1cc8>
 8002868:	ee37 7b46 	vsub.f64	d7, d7, d6
 800286c:	eeb0 0b47 	vmov.f64	d0, d7
 8002870:	f011 f966 	bl	8013b40 <cos>
 8002874:	eeb0 7b40 	vmov.f64	d7, d0
 8002878:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 8002bc0 <IVK+0x1c98>
 800287c:	ee27 6b06 	vmul.f64	d6, d7, d6
											+ -0.73665) * e_J_inv_tmp
 8002880:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8002884:	ee26 6b07 	vmul.f64	d6, d6, d7
							* d_J_inv_tmp_tmp) / d4;
 8002888:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800288c:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 410.488
 8002890:	ee38 7b07 	vadd.f64	d7, d8, d7
			* ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp
 8002894:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8002bc8 <IVK+0x1ca0>
 8002898:	ee27 5b06 	vmul.f64	d5, d7, d6
							* d_J_inv_tmp_tmp) / d4;
 800289c:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 80028a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[17] = 55.0
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	dv[22] = 55.0
			* ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp
 80028ac:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80028b0:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002bc0 <IVK+0x1c98>
 80028b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80028b8:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80028bc:	ee26 8b07 	vmul.f64	d8, d6, d7
					+ 60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 80028c0:	f107 030c 	add.w	r3, r7, #12
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3304      	adds	r3, #4
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3308      	adds	r3, #8
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028e0:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8002bb0 <IVK+0x1c88>
 80028e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028e8:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8002be8 <IVK+0x1cc0>
 80028ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028f0:	eeb0 0b47 	vmov.f64	d0, d7
 80028f4:	f011 f978 	bl	8013be8 <sin>
 80028f8:	eeb0 7b40 	vmov.f64	d7, d0
 80028fc:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8002ba8 <IVK+0x1c80>
 8002900:	ee27 6b06 	vmul.f64	d6, d7, d6
							* e_J_inv_tmp)
 8002904:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8002908:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 800290c:	ee38 6b07 	vadd.f64	d6, d8, d7
					+ 352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) / d4;
 8002910:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8002914:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8002bb8 <IVK+0x1c90>
 8002918:	ee27 5b05 	vmul.f64	d5, d7, d5
 800291c:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8002920:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002924:	ee36 7b07 	vadd.f64	d7, d6, d7
			* ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp
 8002928:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002bc8 <IVK+0x1ca0>
 800292c:	ee27 5b06 	vmul.f64	d5, d7, d6
					+ 352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) / d4;
 8002930:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8002934:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[22] = 55.0
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	d4 = 21136.68
			* sin(
					(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995)
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3304      	adds	r3, #4
 8002948:	edd3 7a00 	vldr	s15, [r3]
 800294c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3308      	adds	r3, #8
 8002958:	edd3 7a00 	vldr	s15, [r3]
 800295c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002960:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002964:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002968:	f107 030c 	add.w	r3, r7, #12
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002978:	ee36 7b07 	vadd.f64	d7, d6, d7
 800297c:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8002bb0 <IVK+0x1c88>
 8002980:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002984:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002be8 <IVK+0x1cc0>
 8002988:	ee37 7b46 	vsub.f64	d7, d7, d6
							+ -0.73665) + 1.52205);
 800298c:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002bf0 <IVK+0x1cc8>
 8002990:	ee37 7b46 	vsub.f64	d7, d7, d6
			* sin(
 8002994:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8002c28 <IVK+0x1d00>
 8002998:	ee37 7b06 	vadd.f64	d7, d7, d6
 800299c:	eeb0 0b47 	vmov.f64	d0, d7
 80029a0:	f011 f922 	bl	8013be8 <sin>
 80029a4:	eeb0 7b40 	vmov.f64	d7, d0
	d4 = 21136.68
 80029a8:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8002bd0 <IVK+0x1ca8>
 80029ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029b0:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	d5 = d4 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 80029b4:	f107 030c 	add.w	r3, r7, #12
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3304      	adds	r3, #4
 80029bc:	ed93 7a00 	vldr	s14, [r3]
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3308      	adds	r3, #8
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029d4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8002bb0 <IVK+0x1c88>
 80029d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029dc:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8002be8 <IVK+0x1cc0>
 80029e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80029e4:	eeb0 0b47 	vmov.f64	d0, d7
 80029e8:	f011 f8aa 	bl	8013b40 <cos>
 80029ec:	eeb0 6b40 	vmov.f64	d6, d0
 80029f0:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 80029f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80029f8:	ed97 6b56 	vldr	d6, [r7, #344]	; 0x158
 80029fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a00:	ed87 7b48 	vstr	d7, [r7, #288]	; 0x120
	d4 = d4 * d2 * b_J_inv_tmp_tmp;
 8002a04:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8002a08:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8002a0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a10:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8002a14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a18:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	d6 = 24629.28
			* sin(
					(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995)
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3304      	adds	r3, #4
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3308      	adds	r3, #8
 8002a34:	edd3 7a00 	vldr	s15, [r3]
 8002a38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a3c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002a40:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	330c      	adds	r3, #12
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a58:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8002bb0 <IVK+0x1c88>
 8002a5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a60:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002be8 <IVK+0x1cc0>
 8002a64:	ee37 7b46 	vsub.f64	d7, d7, d6
							+ -0.73665) + 1.52205);
 8002a68:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002bf0 <IVK+0x1cc8>
 8002a6c:	ee37 7b46 	vsub.f64	d7, d7, d6
			* sin(
 8002a70:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8002c28 <IVK+0x1d00>
 8002a74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a78:	eeb0 0b47 	vmov.f64	d0, d7
 8002a7c:	f011 f8b4 	bl	8013be8 <sin>
 8002a80:	eeb0 7b40 	vmov.f64	d7, d0
	d6 = 24629.28
 8002a84:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8002bd8 <IVK+0x1cb0>
 8002a88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a8c:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	d2 *= d6 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	3304      	adds	r3, #4
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002aa0:	f107 030c 	add.w	r3, r7, #12
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ab0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002ab4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ab8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8002bb0 <IVK+0x1c88>
 8002abc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ac0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002be8 <IVK+0x1cc0>
 8002ac4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ac8:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002bf0 <IVK+0x1cc8>
 8002acc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ad0:	eeb0 0b47 	vmov.f64	d0, d7
 8002ad4:	f011 f834 	bl	8013b40 <cos>
 8002ad8:	eeb0 6b40 	vmov.f64	d6, d0
 8002adc:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8002ae0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002ae4:	ed97 6b4e 	vldr	d6, [r7, #312]	; 0x138
 8002ae8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002aec:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
	d6 = d6 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002af0:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 8002af4:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002af8:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3304      	adds	r3, #4
 8002b04:	ed93 7a00 	vldr	s14, [r3]
 8002b08:	f107 030c 	add.w	r3, r7, #12
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3308      	adds	r3, #8
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b1c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8002bb0 <IVK+0x1c88>
 8002b20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b24:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8002be8 <IVK+0x1cc0>
 8002b28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b2c:	eeb0 0b47 	vmov.f64	d0, d7
 8002b30:	f011 f806 	bl	8013b40 <cos>
 8002b34:	eeb0 7b40 	vmov.f64	d7, d0
 8002b38:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002b3c:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	d7 = 289211.783328
			* sin(
					(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995)
 8002b40:	f107 030c 	add.w	r3, r7, #12
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3304      	adds	r3, #4
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3308      	adds	r3, #8
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b60:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002b64:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	edd3 7a00 	vldr	s15, [r3]
 8002b74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b78:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b7c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8002bb0 <IVK+0x1c88>
 8002b80:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b84:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002be8 <IVK+0x1cc0>
 8002b88:	ee37 7b46 	vsub.f64	d7, d7, d6
							+ -0.73665) + 1.52205);
 8002b8c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002bf0 <IVK+0x1cc8>
 8002b90:	ee37 7b46 	vsub.f64	d7, d7, d6
			* sin(
 8002b94:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8002c28 <IVK+0x1d00>
 8002b98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b9c:	eeb0 0b47 	vmov.f64	d0, d7
 8002ba0:	e05a      	b.n	8002c58 <IVK+0x1d30>
 8002ba2:	bf00      	nop
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	404e0000 	.word	0x404e0000
 8002bb0:	45a1cac1 	.word	0x45a1cac1
 8002bb4:	3ffaf3b6 	.word	0x3ffaf3b6
 8002bb8:	b020c49c 	.word	0xb020c49c
 8002bbc:	40760472 	.word	0x40760472
 8002bc0:	d916872b 	.word	0xd916872b
 8002bc4:	4079a7ce 	.word	0x4079a7ce
 8002bc8:	00000000 	.word	0x00000000
 8002bcc:	404b8000 	.word	0x404b8000
 8002bd0:	851eb852 	.word	0x851eb852
 8002bd4:	40d4a42b 	.word	0x40d4a42b
 8002bd8:	eb851eb8 	.word	0xeb851eb8
 8002bdc:	40d80d51 	.word	0x40d80d51
 8002be0:	2220bc38 	.word	0x2220bc38
 8002be4:	4111a6ef 	.word	0x4111a6ef
 8002be8:	39581062 	.word	0x39581062
 8002bec:	3fecc8b4 	.word	0x3fecc8b4
 8002bf0:	05532618 	.word	0x05532618
 8002bf4:	3fe792a3 	.word	0x3fe792a3
 8002bf8:	66666666 	.word	0x66666666
 8002bfc:	40fe10a6 	.word	0x40fe10a6
 8002c00:	eaa8eb47 	.word	0xeaa8eb47
 8002c04:	413610aa 	.word	0x413610aa
 8002c08:	66666667 	.word	0x66666667
 8002c0c:	40f9cd36 	.word	0x40f9cd36
 8002c10:	00000000 	.word	0x00000000
 8002c14:	40f33f80 	.word	0x40f33f80
 8002c18:	2b020c4b 	.word	0x2b020c4b
 8002c1c:	412c40b5 	.word	0x412c40b5
 8002c20:	28f5c28f 	.word	0x28f5c28f
 8002c24:	410b0efc 	.word	0x410b0efc
 8002c28:	19ce075f 	.word	0x19ce075f
 8002c2c:	3ff85a51 	.word	0x3ff85a51
 8002c30:	05532618 	.word	0x05532618
 8002c34:	3fe792a3 	.word	0x3fe792a3
 8002c38:	0664d3c0 	.word	0x0664d3c0
 8002c3c:	4143dbcd 	.word	0x4143dbcd
 8002c40:	f5c28f5d 	.word	0xf5c28f5d
 8002c44:	410738b0 	.word	0x410738b0
 8002c48:	45a1cac1 	.word	0x45a1cac1
 8002c4c:	3ffaf3b6 	.word	0x3ffaf3b6
 8002c50:	39581062 	.word	0x39581062
 8002c54:	3fecc8b4 	.word	0x3fecc8b4
 8002c58:	f010 ffc6 	bl	8013be8 <sin>
 8002c5c:	eeb0 7b40 	vmov.f64	d7, d0
	d7 = 289211.783328
 8002c60:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8002be0 <IVK+0x1cb8>
 8002c64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c68:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
	d8 = d7 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665)
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3304      	adds	r3, #4
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3308      	adds	r3, #8
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c8c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002c90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c94:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8002c48 <IVK+0x1d20>
 8002c98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c9c:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002be8 <IVK+0x1cc0>
 8002ca0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ca4:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002bf0 <IVK+0x1cc8>
 8002ca8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002cac:	eeb0 0b47 	vmov.f64	d0, d7
 8002cb0:	f010 ff46 	bl	8013b40 <cos>
 8002cb4:	eeb0 6b40 	vmov.f64	d6, d0
 8002cb8:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 8002cbc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002cc0:	ed97 6b56 	vldr	d6, [r7, #344]	; 0x158
 8002cc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002cc8:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
			* e_J_inv_tmp_tmp;
	d7 = d7 * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8002ccc:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 8002cd0:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002cd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002cd8:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8002cdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002ce0:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
	d9 = c_J_inv_tmp_tmp * c_J_inv_tmp_tmp;
 8002ce4:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002ce8:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002cec:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
	d10 = 78840.0 * d9 * d_J_inv_tmp;
 8002cf0:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8002cf4:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8002c10 <IVK+0x1ce8>
 8002cf8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cfc:	ed97 6b58 	vldr	d6, [r7, #352]	; 0x160
 8002d00:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d04:	ed87 7b3e 	vstr	d7, [r7, #248]	; 0xf8
	d9 = 925786.58400000015 * d9 * e_J_inv_tmp_tmp;
 8002d08:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8002d0c:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8002c18 <IVK+0x1cf0>
 8002d10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d14:	ed97 6b56 	vldr	d6, [r7, #344]	; 0x158
 8002d18:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d1c:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
	e_J_inv_tmp = d10 * d_J_inv_tmp_tmp;
 8002d20:	ed97 6b3e 	vldr	d6, [r7, #248]	; 0xf8
 8002d24:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002d28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d2c:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
	d11 = d9 * d_J_inv_tmp_tmp;
 8002d30:	ed97 6b40 	vldr	d6, [r7, #256]	; 0x100
 8002d34:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002d38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d3c:	ed87 7b3c 	vstr	d7, [r7, #240]	; 0xf0
	dv[3] =
			4.0
					* (((((((((((((((123146.4 * J_inv_tmp * d_J_inv_tmp
 8002d40:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002d44:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8002bf8 <IVK+0x1cd0>
 8002d48:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d4c:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8002d50:	ee26 6b07 	vmul.f64	d6, d6, d7
							* f_J_inv_tmp_tmp
 8002d54:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002d58:	ee26 6b07 	vmul.f64	d6, d6, d7
							- 123146.4 * J_inv_tmp_tmp * c_J_inv_tmp
 8002d5c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002d60:	ed1f 5b5b 	vldr	d5, [pc, #-364]	; 8002bf8 <IVK+0x1cd0>
 8002d64:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002d68:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8002d6c:	ee25 5b07 	vmul.f64	d5, d5, d7
									* f_J_inv_tmp_tmp)
 8002d70:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002d74:	ee25 7b07 	vmul.f64	d7, d5, d7
							- 123146.4 * J_inv_tmp_tmp * c_J_inv_tmp
 8002d78:	ee36 6b47 	vsub.f64	d6, d6, d7
							+ 1.4460589166400002E+6 * J_inv_tmp
 8002d7c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002d80:	ed1f 5b61 	vldr	d5, [pc, #-388]	; 8002c00 <IVK+0x1cd8>
 8002d84:	ee27 5b05 	vmul.f64	d5, d7, d5
									* e_J_inv_tmp_tmp * f_J_inv_tmp_tmp)
 8002d88:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8002d8c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002d90:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002d94:	ee25 7b07 	vmul.f64	d7, d5, d7
							+ 1.4460589166400002E+6 * J_inv_tmp
 8002d98:	ee36 6b07 	vadd.f64	d6, d6, d7
							- 1.4460589166400002E+6 * J_inv_tmp_tmp
 8002d9c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002da0:	ed1f 5b69 	vldr	d5, [pc, #-420]	; 8002c00 <IVK+0x1cd8>
 8002da4:	ee27 5b05 	vmul.f64	d5, d7, d5
									* b_J_inv_tmp_tmp * f_J_inv_tmp_tmp)
 8002da8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002dac:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002db0:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002db4:	ee25 7b07 	vmul.f64	d7, d5, d7
							- 1.4460589166400002E+6 * J_inv_tmp_tmp
 8002db8:	ee36 6b47 	vsub.f64	d6, d6, d7
							+ 105683.40000000001 * c_J_inv_tmp * e_J_inv_tmp_tmp
 8002dbc:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8002dc0:	ed1f 5b6f 	vldr	d5, [pc, #-444]	; 8002c08 <IVK+0x1ce0>
 8002dc4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002dc8:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8002dcc:	ee25 5b07 	vmul.f64	d5, d5, d7
									* f_J_inv_tmp_tmp)
 8002dd0:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002dd4:	ee25 7b07 	vmul.f64	d7, d5, d7
							+ 105683.40000000001 * c_J_inv_tmp * e_J_inv_tmp_tmp
 8002dd8:	ee36 6b07 	vadd.f64	d6, d6, d7
							- 105683.40000000001 * d_J_inv_tmp * b_J_inv_tmp_tmp
 8002ddc:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8002de0:	ed1f 5b77 	vldr	d5, [pc, #-476]	; 8002c08 <IVK+0x1ce0>
 8002de4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002de8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002dec:	ee25 5b07 	vmul.f64	d5, d5, d7
									* f_J_inv_tmp_tmp) + e_J_inv_tmp) + d11)
 8002df0:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002df4:	ee25 7b07 	vmul.f64	d7, d5, d7
							- 105683.40000000001 * d_J_inv_tmp * b_J_inv_tmp_tmp
 8002df8:	ee36 6b47 	vsub.f64	d6, d6, d7
									* f_J_inv_tmp_tmp) + e_J_inv_tmp) + d11)
 8002dfc:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8002e00:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002e04:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 8002e08:	ee36 6b07 	vadd.f64	d6, d6, d7
							+ 78840.0 * b_J_inv_tmp * c_J_inv_tmp_tmp
 8002e0c:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8002e10:	ed1f 5b81 	vldr	d5, [pc, #-516]	; 8002c10 <IVK+0x1ce8>
 8002e14:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002e18:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002e1c:	ee25 5b07 	vmul.f64	d5, d5, d7
									* c_J_inv_tmp * d_J_inv_tmp_tmp)
 8002e20:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8002e24:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e28:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002e2c:	ee25 7b07 	vmul.f64	d7, d5, d7
							+ 78840.0 * b_J_inv_tmp * c_J_inv_tmp_tmp
 8002e30:	ee36 6b07 	vadd.f64	d6, d6, d7
							+ 925786.58400000015 * b_J_inv_tmp * c_J_inv_tmp_tmp
 8002e34:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8002e38:	ed1f 5b89 	vldr	d5, [pc, #-548]	; 8002c18 <IVK+0x1cf0>
 8002e3c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002e40:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002e44:	ee25 5b07 	vmul.f64	d5, d5, d7
									* b_J_inv_tmp_tmp * d_J_inv_tmp_tmp)
 8002e48:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002e4c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e50:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002e54:	ee25 7b07 	vmul.f64	d7, d5, d7
							+ 925786.58400000015 * b_J_inv_tmp * c_J_inv_tmp_tmp
 8002e58:	ee36 6b07 	vadd.f64	d6, d6, d7
							+ 221663.52 * c_J_inv_tmp_tmp * J_inv_tmp
 8002e5c:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002e60:	ed1f 5b91 	vldr	d5, [pc, #-580]	; 8002c20 <IVK+0x1cf8>
 8002e64:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002e68:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002e6c:	ee25 5b07 	vmul.f64	d5, d5, d7
									* d_J_inv_tmp * d_J_inv_tmp_tmp)
 8002e70:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8002e74:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e78:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002e7c:	ee25 7b07 	vmul.f64	d7, d5, d7
							+ 221663.52 * c_J_inv_tmp_tmp * J_inv_tmp
 8002e80:	ee36 8b07 	vadd.f64	d8, d6, d7
							- 221663.52
									* sin(
											(((((q[1] + 2.0 * q[2]) + q[3])
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ea4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002ea8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	edd3 7a00 	vldr	s15, [r3]
 8002eb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ebc:	ee36 7b07 	vadd.f64	d7, d6, d7
													+ 1.6845) + -0.8995)
 8002ec0:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8002c48 <IVK+0x1d20>
 8002ec4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ec8:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8002c50 <IVK+0x1d28>
 8002ecc:	ee37 7b46 	vsub.f64	d7, d7, d6
													+ -0.73665) + 1.52205)
 8002ed0:	ed1f 6ba9 	vldr	d6, [pc, #-676]	; 8002c30 <IVK+0x1d08>
 8002ed4:	ee37 7b46 	vsub.f64	d7, d7, d6
									* sin(
 8002ed8:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 8002c28 <IVK+0x1d00>
 8002edc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ee0:	eeb0 0b47 	vmov.f64	d0, d7
 8002ee4:	f010 fe80 	bl	8013be8 <sin>
 8002ee8:	eeb0 7b40 	vmov.f64	d7, d0
 8002eec:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8002c20 <IVK+0x1cf8>
 8002ef0:	ee27 6b06 	vmul.f64	d6, d7, d6
									* J_inv_tmp_tmp * c_J_inv_tmp
 8002ef4:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002ef8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002efc:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8002f00:	ee26 6b07 	vmul.f64	d6, d6, d7
									* d_J_inv_tmp_tmp)
 8002f04:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002f08:	ee26 7b07 	vmul.f64	d7, d6, d7
							- 221663.52
 8002f0c:	ee38 6b47 	vsub.f64	d6, d8, d7
							+ 2.6029060499520004E+6 * c_J_inv_tmp_tmp
 8002f10:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002f14:	ed1f 5bb8 	vldr	d5, [pc, #-736]	; 8002c38 <IVK+0x1d10>
 8002f18:	ee27 5b05 	vmul.f64	d5, d7, d5
									* J_inv_tmp * e_J_inv_tmp_tmp
 8002f1c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002f20:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002f24:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8002f28:	ee25 5b07 	vmul.f64	d5, d5, d7
									* d_J_inv_tmp_tmp)
 8002f2c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002f30:	ee25 7b07 	vmul.f64	d7, d5, d7
							+ 2.6029060499520004E+6 * c_J_inv_tmp_tmp
 8002f34:	ee36 8b07 	vadd.f64	d8, d6, d7
							- 2.6029060499520004E+6
									* sin(
											(((((q[1] + 2.0 * q[2]) + q[3])
 8002f38:	f107 030c 	add.w	r3, r7, #12
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3308      	adds	r3, #8
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f58:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002f5c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	330c      	adds	r3, #12
 8002f68:	edd3 7a00 	vldr	s15, [r3]
 8002f6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f70:	ee36 7b07 	vadd.f64	d7, d6, d7
													+ 1.6845) + -0.8995)
 8002f74:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8002c48 <IVK+0x1d20>
 8002f78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f7c:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8002c50 <IVK+0x1d28>
 8002f80:	ee37 7b46 	vsub.f64	d7, d7, d6
													+ -0.73665) + 1.52205)
 8002f84:	ed1f 6bd6 	vldr	d6, [pc, #-856]	; 8002c30 <IVK+0x1d08>
 8002f88:	ee37 7b46 	vsub.f64	d7, d7, d6
									* sin(
 8002f8c:	ed1f 6bda 	vldr	d6, [pc, #-872]	; 8002c28 <IVK+0x1d00>
 8002f90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f94:	eeb0 0b47 	vmov.f64	d0, d7
 8002f98:	f010 fe26 	bl	8013be8 <sin>
 8002f9c:	eeb0 7b40 	vmov.f64	d7, d0
 8002fa0:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8002c38 <IVK+0x1d10>
 8002fa4:	ee27 6b06 	vmul.f64	d6, d7, d6
									* J_inv_tmp_tmp * b_J_inv_tmp_tmp
 8002fa8:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002fac:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002fb0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002fb4:	ee26 6b07 	vmul.f64	d6, d6, d7
									* d_J_inv_tmp_tmp)
 8002fb8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002fbc:	ee26 7b07 	vmul.f64	d7, d6, d7
							- 2.6029060499520004E+6
 8002fc0:	ee38 6b47 	vsub.f64	d6, d8, d7
							+ 190230.12000000002 * c_J_inv_tmp_tmp * c_J_inv_tmp
 8002fc4:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002fc8:	ed1f 5be3 	vldr	d5, [pc, #-908]	; 8002c40 <IVK+0x1d18>
 8002fcc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002fd0:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8002fd4:	ee25 5b07 	vmul.f64	d5, d5, d7
									* e_J_inv_tmp_tmp * d_J_inv_tmp_tmp)
 8002fd8:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8002fdc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002fe0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002fe4:	ee25 7b07 	vmul.f64	d7, d5, d7
							+ 190230.12000000002 * c_J_inv_tmp_tmp * c_J_inv_tmp
 8002fe8:	ee36 8b07 	vadd.f64	d8, d6, d7
							- 190230.12000000002
									* sin(
											(((((q[1] + 2.0 * q[2]) + q[3])
 8002fec:	f107 030c 	add.w	r3, r7, #12
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	edd3 7a00 	vldr	s15, [r3]
 8002ff8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ffc:	f107 030c 	add.w	r3, r7, #12
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3308      	adds	r3, #8
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800300c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003010:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003014:	f107 030c 	add.w	r3, r7, #12
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	330c      	adds	r3, #12
 800301c:	edd3 7a00 	vldr	s15, [r3]
 8003020:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003024:	ee36 7b07 	vadd.f64	d7, d6, d7
													+ 1.6845) + -0.8995)
 8003028:	ed1f 6bf9 	vldr	d6, [pc, #-996]	; 8002c48 <IVK+0x1d20>
 800302c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003030:	ed1f 6bf9 	vldr	d6, [pc, #-996]	; 8002c50 <IVK+0x1d28>
 8003034:	ee37 7b46 	vsub.f64	d7, d7, d6
													+ -0.73665) + 1.52205)
 8003038:	ed9f 6bf9 	vldr	d6, [pc, #996]	; 8003420 <IVK+0x24f8>
 800303c:	ee37 7b46 	vsub.f64	d7, d7, d6
									* sin(
 8003040:	ed9f 6bf9 	vldr	d6, [pc, #996]	; 8003428 <IVK+0x2500>
 8003044:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003048:	eeb0 0b47 	vmov.f64	d0, d7
 800304c:	f010 fdcc 	bl	8013be8 <sin>
 8003050:	eeb0 7b40 	vmov.f64	d7, d0
 8003054:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8003430 <IVK+0x2508>
 8003058:	ee27 6b06 	vmul.f64	d6, d7, d6
									* d_J_inv_tmp * b_J_inv_tmp_tmp
 800305c:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8003060:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003064:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003068:	ee26 6b07 	vmul.f64	d6, d6, d7
									* d_J_inv_tmp_tmp)
 800306c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003070:	ee26 7b07 	vmul.f64	d7, d6, d7
							- 190230.12000000002
 8003074:	ee38 7b47 	vsub.f64	d7, d8, d7
					* (((((((((((((((123146.4 * J_inv_tmp * d_J_inv_tmp
 8003078:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800307c:	ee27 8b06 	vmul.f64	d8, d7, d6
					/ (9.0
							* (((((((((((21136.68 * c_J_inv_tmp_tmp
 8003080:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003084:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8003438 <IVK+0x2510>
 8003088:	ee27 6b06 	vmul.f64	d6, d7, d6
									* c_J_inv_tmp * e_J_inv_tmp_tmp * d
 800308c:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8003090:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003094:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8003098:	ee26 6b07 	vmul.f64	d6, d6, d7
 800309c:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80030a0:	ee26 9b07 	vmul.f64	d9, d6, d7
									- 21136.68
											* sin(
													(((((q[1] + 2.0 * q[2])
 80030a4:	f107 030c 	add.w	r3, r7, #12
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3304      	adds	r3, #4
 80030ac:	edd3 7a00 	vldr	s15, [r3]
 80030b0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80030b4:	f107 030c 	add.w	r3, r7, #12
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3308      	adds	r3, #8
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80030c8:	ee36 6b07 	vadd.f64	d6, d6, d7
															+ q[3]) + 1.6845)
 80030cc:	f107 030c 	add.w	r3, r7, #12
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	330c      	adds	r3, #12
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80030e0:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8003470 <IVK+0x2548>
 80030e4:	ee37 7b06 	vadd.f64	d7, d7, d6
															+ -0.8995)
 80030e8:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8003478 <IVK+0x2550>
 80030ec:	ee37 7b46 	vsub.f64	d7, d7, d6
															+ -0.73665)
 80030f0:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8003420 <IVK+0x24f8>
 80030f4:	ee37 7b46 	vsub.f64	d7, d7, d6
											* sin(
 80030f8:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8003428 <IVK+0x2500>
 80030fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003100:	eeb0 0b47 	vmov.f64	d0, d7
 8003104:	f010 fd70 	bl	8013be8 <sin>
 8003108:	eeb0 7b40 	vmov.f64	d7, d0
 800310c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8003438 <IVK+0x2510>
 8003110:	ee27 6b06 	vmul.f64	d6, d7, d6
															+ 1.52205)
											* d_J_inv_tmp * b_J_inv_tmp_tmp * d)
 8003114:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8003118:	ee26 6b07 	vmul.f64	d6, d6, d7
 800311c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003120:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003124:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003128:	ee26 7b07 	vmul.f64	d7, d6, d7
									- 21136.68
 800312c:	ee39 6b47 	vsub.f64	d6, d9, d7
									+ d5 * d1) - d4 * d1)
 8003130:	ed97 5b48 	vldr	d5, [r7, #288]	; 0x120
 8003134:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003138:	ee25 7b07 	vmul.f64	d7, d5, d7
 800313c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003140:	ed97 5b4a 	vldr	d5, [r7, #296]	; 0x128
 8003144:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003148:	ee25 7b07 	vmul.f64	d7, d5, d7
 800314c:	ee36 6b47 	vsub.f64	d6, d6, d7
									+ 24629.28 * c_J_inv_tmp_tmp * J_inv_tmp
 8003150:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003154:	ed9f 5bba 	vldr	d5, [pc, #744]	; 8003440 <IVK+0x2518>
 8003158:	ee27 5b05 	vmul.f64	d5, d7, d5
 800315c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8003160:	ee25 5b07 	vmul.f64	d5, d5, d7
											* d_J_inv_tmp * d)
 8003164:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8003168:	ee25 5b07 	vmul.f64	d5, d5, d7
 800316c:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003170:	ee25 7b07 	vmul.f64	d7, d5, d7
									+ 24629.28 * c_J_inv_tmp_tmp * J_inv_tmp
 8003174:	ee36 9b07 	vadd.f64	d9, d6, d7
									- 24629.28
											* sin(
													(((((q[1] + 2.0 * q[2])
 8003178:	f107 030c 	add.w	r3, r7, #12
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3304      	adds	r3, #4
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003188:	f107 030c 	add.w	r3, r7, #12
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3308      	adds	r3, #8
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003198:	ee37 7b07 	vadd.f64	d7, d7, d7
 800319c:	ee36 6b07 	vadd.f64	d6, d6, d7
															+ q[3]) + 1.6845)
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	330c      	adds	r3, #12
 80031a8:	edd3 7a00 	vldr	s15, [r3]
 80031ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031b4:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8003470 <IVK+0x2548>
 80031b8:	ee37 7b06 	vadd.f64	d7, d7, d6
															+ -0.8995)
 80031bc:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8003478 <IVK+0x2550>
 80031c0:	ee37 7b46 	vsub.f64	d7, d7, d6
															+ -0.73665)
 80031c4:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8003420 <IVK+0x24f8>
 80031c8:	ee37 7b46 	vsub.f64	d7, d7, d6
											* sin(
 80031cc:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8003428 <IVK+0x2500>
 80031d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031d4:	eeb0 0b47 	vmov.f64	d0, d7
 80031d8:	f010 fd06 	bl	8013be8 <sin>
 80031dc:	eeb0 7b40 	vmov.f64	d7, d0
 80031e0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8003440 <IVK+0x2518>
 80031e4:	ee27 6b06 	vmul.f64	d6, d7, d6
															+ 1.52205)
											* J_inv_tmp_tmp * c_J_inv_tmp * d)
 80031e8:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80031ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80031f0:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80031f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80031f8:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80031fc:	ee26 7b07 	vmul.f64	d7, d6, d7
									- 24629.28
 8003200:	ee39 6b47 	vsub.f64	d6, d9, d7
									+ d2 * d1) - d6 * d1)
 8003204:	ed97 5b4e 	vldr	d5, [r7, #312]	; 0x138
 8003208:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 800320c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003210:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003214:	ed97 5b46 	vldr	d5, [r7, #280]	; 0x118
 8003218:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 800321c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003220:	ee36 6b47 	vsub.f64	d6, d6, d7
									+ 289211.783328 * c_J_inv_tmp_tmp
 8003224:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003228:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8003448 <IVK+0x2520>
 800322c:	ee27 5b05 	vmul.f64	d5, d7, d5
											* J_inv_tmp * e_J_inv_tmp_tmp * d)
 8003230:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8003234:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003238:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 800323c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003240:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003244:	ee25 7b07 	vmul.f64	d7, d5, d7
									+ 289211.783328 * c_J_inv_tmp_tmp
 8003248:	ee36 6b07 	vadd.f64	d6, d6, d7
									- d7 * d) + d8 * d1) - d7 * d1));
 800324c:	ed97 5b44 	vldr	d5, [r7, #272]	; 0x110
 8003250:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003254:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003258:	ee36 6b47 	vsub.f64	d6, d6, d7
 800325c:	ed97 5b42 	vldr	d5, [r7, #264]	; 0x108
 8003260:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003264:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003268:	ee36 6b07 	vadd.f64	d6, d6, d7
 800326c:	ed97 5b44 	vldr	d5, [r7, #272]	; 0x110
 8003270:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003274:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003278:	ee36 7b47 	vsub.f64	d7, d6, d7
							* (((((((((((21136.68 * c_J_inv_tmp_tmp
 800327c:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8003280:	ee27 6b06 	vmul.f64	d6, d7, d6
					/ (9.0
 8003284:	ee88 7b06 	vdiv.f64	d7, d8, d6
	dv[3] =
 8003288:	f107 0310 	add.w	r3, r7, #16
 800328c:	ed83 7b06 	vstr	d7, [r3, #24]
	d = 9.0
			* (((((((((((d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)
 8003290:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8003294:	ee27 6b07 	vmul.f64	d6, d7, d7
 8003298:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 800329c:	ee26 6b07 	vmul.f64	d6, d6, d7
					- d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 80032a0:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80032a4:	ee27 5b07 	vmul.f64	d5, d7, d7
 80032a8:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 80032ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 80032b0:	ee36 6b47 	vsub.f64	d6, d6, d7
					+ d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 80032b4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80032b8:	ee27 5b07 	vmul.f64	d5, d7, d7
 80032bc:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 80032c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80032c4:	ee36 6b07 	vadd.f64	d6, d6, d7
					- d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 80032c8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80032cc:	ee27 5b07 	vmul.f64	d5, d7, d7
 80032d0:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 80032d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80032d8:	ee36 6b47 	vsub.f64	d6, d6, d7
					+ d2 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 80032dc:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80032e0:	ee27 5b07 	vmul.f64	d5, d7, d7
 80032e4:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 80032e8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80032ec:	ee36 6b07 	vadd.f64	d6, d6, d7
					- d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 80032f0:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80032f4:	ee27 5b07 	vmul.f64	d5, d7, d7
 80032f8:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 80032fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003300:	ee36 6b47 	vsub.f64	d6, d6, d7
					+ d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 8003304:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003308:	ee27 5b07 	vmul.f64	d5, d7, d7
 800330c:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003310:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003314:	ee36 6b07 	vadd.f64	d6, d6, d7
					- d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 8003318:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800331c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003320:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8003324:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003328:	ee36 6b47 	vsub.f64	d6, d6, d7
					+ d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 800332c:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8003330:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003334:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8003338:	ee25 7b07 	vmul.f64	d7, d5, d7
 800333c:	ee36 6b07 	vadd.f64	d6, d6, d7
					- d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp))
 8003340:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8003344:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003348:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800334c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003350:	ee36 6b47 	vsub.f64	d6, d6, d7
					+ d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp))
 8003354:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003358:	ee27 5b07 	vmul.f64	d5, d7, d7
 800335c:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8003360:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003364:	ee36 6b07 	vadd.f64	d6, d6, d7
					- d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp));
 8003368:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800336c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003370:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 8003374:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003378:	ee36 7b47 	vsub.f64	d7, d6, d7
	d = 9.0
 800337c:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8003380:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003384:	ed87 7b6a 	vstr	d7, [r7, #424]	; 0x1a8
	d1 = d10 * f_J_inv_tmp_tmp;
 8003388:	ed97 6b3e 	vldr	d6, [r7, #248]	; 0xf8
 800338c:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8003390:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003394:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	d2 = d9 * f_J_inv_tmp_tmp;
 8003398:	ed97 6b40 	vldr	d6, [r7, #256]	; 0x100
 800339c:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80033a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033a4:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
	dv[8] = -(4.0
			* (((((((((((((((123146.4
					* sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665)
 80033a8:	f107 030c 	add.w	r3, r7, #12
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3304      	adds	r3, #4
 80033b0:	edd3 7a00 	vldr	s15, [r3]
 80033b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3308      	adds	r3, #8
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033c8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80033cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80033d0:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8003470 <IVK+0x2548>
 80033d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033d8:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8003478 <IVK+0x2550>
 80033dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033e0:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003420 <IVK+0x24f8>
 80033e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033e8:	eeb0 0b47 	vmov.f64	d0, d7
 80033ec:	f010 fbfc 	bl	8013be8 <sin>
 80033f0:	eeb0 7b40 	vmov.f64	d7, d0
 80033f4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8003450 <IVK+0x2528>
 80033f8:	ee27 8b06 	vmul.f64	d8, d7, d6
					* cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp
 80033fc:	f107 030c 	add.w	r3, r7, #12
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3304      	adds	r3, #4
 8003404:	ed93 7a00 	vldr	s14, [r3]
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3308      	adds	r3, #8
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003418:	e03a      	b.n	8003490 <IVK+0x2568>
 800341a:	bf00      	nop
 800341c:	f3af 8000 	nop.w
 8003420:	05532618 	.word	0x05532618
 8003424:	3fe792a3 	.word	0x3fe792a3
 8003428:	19ce075f 	.word	0x19ce075f
 800342c:	3ff85a51 	.word	0x3ff85a51
 8003430:	f5c28f5d 	.word	0xf5c28f5d
 8003434:	410738b0 	.word	0x410738b0
 8003438:	851eb852 	.word	0x851eb852
 800343c:	40d4a42b 	.word	0x40d4a42b
 8003440:	eb851eb8 	.word	0xeb851eb8
 8003444:	40d80d51 	.word	0x40d80d51
 8003448:	2220bc38 	.word	0x2220bc38
 800344c:	4111a6ef 	.word	0x4111a6ef
 8003450:	66666666 	.word	0x66666666
 8003454:	40fe10a6 	.word	0x40fe10a6
 8003458:	eaa8eb47 	.word	0xeaa8eb47
 800345c:	413610aa 	.word	0x413610aa
 8003460:	66666667 	.word	0x66666667
 8003464:	40f9cd36 	.word	0x40f9cd36
 8003468:	00000000 	.word	0x00000000
 800346c:	40f33f80 	.word	0x40f33f80
 8003470:	45a1cac1 	.word	0x45a1cac1
 8003474:	3ffaf3b6 	.word	0x3ffaf3b6
 8003478:	39581062 	.word	0x39581062
 800347c:	3fecc8b4 	.word	0x3fecc8b4
 8003480:	19ce075f 	.word	0x19ce075f
 8003484:	3ff85a51 	.word	0x3ff85a51
 8003488:	05532618 	.word	0x05532618
 800348c:	3fe792a3 	.word	0x3fe792a3
 8003490:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003494:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 8003470 <IVK+0x2548>
 8003498:	ee37 7b06 	vadd.f64	d7, d7, d6
 800349c:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 8003478 <IVK+0x2550>
 80034a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034a4:	eeb0 0b47 	vmov.f64	d0, d7
 80034a8:	f010 fb4a 	bl	8013b40 <cos>
 80034ac:	eeb0 7b40 	vmov.f64	d7, d0
 80034b0:	ee28 6b07 	vmul.f64	d6, d8, d7
 80034b4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80034b8:	ee26 8b07 	vmul.f64	d8, d6, d7
					- 123146.4
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 80034bc:	f107 030c 	add.w	r3, r7, #12
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3304      	adds	r3, #4
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3308      	adds	r3, #8
 80034d4:	edd3 7a00 	vldr	s15, [r3]
 80034d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80034e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80034e4:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 8003470 <IVK+0x2548>
 80034e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034ec:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 8003478 <IVK+0x2550>
 80034f0:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 80034f4:	ed1f 6b1c 	vldr	d6, [pc, #-112]	; 8003488 <IVK+0x2560>
 80034f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003500:	f010 fb1e 	bl	8013b40 <cos>
 8003504:	eeb0 7b40 	vmov.f64	d7, d0
 8003508:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 8003450 <IVK+0x2528>
 800350c:	ee27 9b06 	vmul.f64	d9, d7, d6
											+ -0.73665)
							* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3304      	adds	r3, #4
 8003518:	ed93 7a00 	vldr	s14, [r3]
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003530:	ed1f 6b31 	vldr	d6, [pc, #-196]	; 8003470 <IVK+0x2548>
 8003534:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003538:	ed1f 6b31 	vldr	d6, [pc, #-196]	; 8003478 <IVK+0x2550>
 800353c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003540:	eeb0 0b47 	vmov.f64	d0, d7
 8003544:	f010 fb50 	bl	8013be8 <sin>
 8003548:	eeb0 7b40 	vmov.f64	d7, d0
 800354c:	ee29 6b07 	vmul.f64	d6, d9, d7
							* d_J_inv_tmp_tmp)
 8003550:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003554:	ee26 7b07 	vmul.f64	d7, d6, d7
					- 123146.4
 8003558:	ee38 8b47 	vsub.f64	d8, d8, d7
					- 1.4460589166400002E+6
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 800355c:	f107 030c 	add.w	r3, r7, #12
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3304      	adds	r3, #4
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800356c:	f107 030c 	add.w	r3, r7, #12
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3308      	adds	r3, #8
 8003574:	edd3 7a00 	vldr	s15, [r3]
 8003578:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800357c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003580:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003584:	ed1f 6b46 	vldr	d6, [pc, #-280]	; 8003470 <IVK+0x2548>
 8003588:	ee37 7b06 	vadd.f64	d7, d7, d6
 800358c:	ed1f 6b46 	vldr	d6, [pc, #-280]	; 8003478 <IVK+0x2550>
 8003590:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8003594:	ed1f 6b44 	vldr	d6, [pc, #-272]	; 8003488 <IVK+0x2560>
 8003598:	ee37 7b46 	vsub.f64	d7, d7, d6
 800359c:	eeb0 0b47 	vmov.f64	d0, d7
 80035a0:	f010 face 	bl	8013b40 <cos>
 80035a4:	eeb0 7b40 	vmov.f64	d7, d0
 80035a8:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 8003458 <IVK+0x2530>
 80035ac:	ee27 9b06 	vmul.f64	d9, d7, d6
											+ -0.73665) * sin(q[1] + 1.6845)
 80035b0:	f107 030c 	add.w	r3, r7, #12
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3304      	adds	r3, #4
 80035b8:	edd3 7a00 	vldr	s15, [r3]
 80035bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035c0:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 8003470 <IVK+0x2548>
 80035c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035c8:	eeb0 0b47 	vmov.f64	d0, d7
 80035cc:	f010 fb0c 	bl	8013be8 <sin>
 80035d0:	eeb0 7b40 	vmov.f64	d7, d0
 80035d4:	ee29 6b07 	vmul.f64	d6, d9, d7
							* d_J_inv_tmp_tmp)
 80035d8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80035dc:	ee26 7b07 	vmul.f64	d7, d6, d7
					- 1.4460589166400002E+6
 80035e0:	ee38 8b47 	vsub.f64	d8, d8, d7
					+ 1.4460589166400002E+6
							* sin(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3304      	adds	r3, #4
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80035f4:	f107 030c 	add.w	r3, r7, #12
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3308      	adds	r3, #8
 80035fc:	edd3 7a00 	vldr	s15, [r3]
 8003600:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003604:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003608:	ee36 7b07 	vadd.f64	d7, d6, d7
 800360c:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 8003470 <IVK+0x2548>
 8003610:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003614:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 8003478 <IVK+0x2550>
 8003618:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 800361c:	ed1f 6b66 	vldr	d6, [pc, #-408]	; 8003488 <IVK+0x2560>
 8003620:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003624:	eeb0 0b47 	vmov.f64	d0, d7
 8003628:	f010 fade 	bl	8013be8 <sin>
 800362c:	eeb0 7b40 	vmov.f64	d7, d0
 8003630:	ed1f 6b77 	vldr	d6, [pc, #-476]	; 8003458 <IVK+0x2530>
 8003634:	ee27 9b06 	vmul.f64	d9, d7, d6
											+ -0.73665) * cos(q[1] + 1.6845)
 8003638:	f107 030c 	add.w	r3, r7, #12
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3304      	adds	r3, #4
 8003640:	edd3 7a00 	vldr	s15, [r3]
 8003644:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003648:	ed1f 6b77 	vldr	d6, [pc, #-476]	; 8003470 <IVK+0x2548>
 800364c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003650:	eeb0 0b47 	vmov.f64	d0, d7
 8003654:	f010 fa74 	bl	8013b40 <cos>
 8003658:	eeb0 7b40 	vmov.f64	d7, d0
 800365c:	ee29 6b07 	vmul.f64	d6, d9, d7
							* d_J_inv_tmp_tmp) + d1)
 8003660:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003664:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 1.4460589166400002E+6
 8003668:	ee38 6b07 	vadd.f64	d6, d8, d7
							* d_J_inv_tmp_tmp) + d1)
 800366c:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003670:	ee36 8b07 	vadd.f64	d8, d6, d7
					- 105683.40000000001
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8003674:	f107 030c 	add.w	r3, r7, #12
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3304      	adds	r3, #4
 800367c:	ed93 7a00 	vldr	s14, [r3]
 8003680:	f107 030c 	add.w	r3, r7, #12
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3308      	adds	r3, #8
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003690:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003694:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 8003470 <IVK+0x2548>
 8003698:	ee37 7b06 	vadd.f64	d7, d7, d6
 800369c:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 8003478 <IVK+0x2550>
 80036a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80036a4:	eeb0 0b47 	vmov.f64	d0, d7
 80036a8:	f010 fa4a 	bl	8013b40 <cos>
 80036ac:	eeb0 7b40 	vmov.f64	d7, d0
 80036b0:	ed1f 6b95 	vldr	d6, [pc, #-596]	; 8003460 <IVK+0x2538>
 80036b4:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(q[1] + 1.6845) * d_J_inv_tmp_tmp)
 80036b8:	f107 030c 	add.w	r3, r7, #12
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3304      	adds	r3, #4
 80036c0:	edd3 7a00 	vldr	s15, [r3]
 80036c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036c8:	ed1f 6b97 	vldr	d6, [pc, #-604]	; 8003470 <IVK+0x2548>
 80036cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80036d0:	eeb0 0b47 	vmov.f64	d0, d7
 80036d4:	f010 fa88 	bl	8013be8 <sin>
 80036d8:	eeb0 7b40 	vmov.f64	d7, d0
 80036dc:	ee29 6b07 	vmul.f64	d6, d9, d7
 80036e0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80036e4:	ee26 7b07 	vmul.f64	d7, d6, d7
					- 105683.40000000001
 80036e8:	ee38 8b47 	vsub.f64	d8, d8, d7
					+ 105683.40000000001
							* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 80036ec:	f107 030c 	add.w	r3, r7, #12
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3304      	adds	r3, #4
 80036f4:	ed93 7a00 	vldr	s14, [r3]
 80036f8:	f107 030c 	add.w	r3, r7, #12
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3308      	adds	r3, #8
 8003700:	edd3 7a00 	vldr	s15, [r3]
 8003704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003708:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800370c:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8003470 <IVK+0x2548>
 8003710:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003714:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8003478 <IVK+0x2550>
 8003718:	ee37 7b46 	vsub.f64	d7, d7, d6
 800371c:	eeb0 0b47 	vmov.f64	d0, d7
 8003720:	f010 fa62 	bl	8013be8 <sin>
 8003724:	eeb0 7b40 	vmov.f64	d7, d0
 8003728:	ed1f 6bb3 	vldr	d6, [pc, #-716]	; 8003460 <IVK+0x2538>
 800372c:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) + d2)
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3304      	adds	r3, #4
 8003738:	edd3 7a00 	vldr	s15, [r3]
 800373c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003740:	ed1f 6bb5 	vldr	d6, [pc, #-724]	; 8003470 <IVK+0x2548>
 8003744:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003748:	eeb0 0b47 	vmov.f64	d0, d7
 800374c:	f010 f9f8 	bl	8013b40 <cos>
 8003750:	eeb0 7b40 	vmov.f64	d7, d0
 8003754:	ee29 6b07 	vmul.f64	d6, d9, d7
 8003758:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800375c:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 105683.40000000001
 8003760:	ee38 6b07 	vadd.f64	d6, d8, d7
							* cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) + d2)
 8003764:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003768:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 78840.0
							* cos(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3304      	adds	r3, #4
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3308      	adds	r3, #8
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800378c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003790:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003794:	f107 030c 	add.w	r3, r7, #12
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037a8:	ed1f 6bcf 	vldr	d6, [pc, #-828]	; 8003470 <IVK+0x2548>
 80037ac:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 80037b0:	ed1f 6bcf 	vldr	d6, [pc, #-828]	; 8003478 <IVK+0x2550>
 80037b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80037b8:	ed1f 6bcd 	vldr	d6, [pc, #-820]	; 8003488 <IVK+0x2560>
 80037bc:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 80037c0:	ed1f 6bd1 	vldr	d6, [pc, #-836]	; 8003480 <IVK+0x2558>
 80037c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037c8:	eeb0 0b47 	vmov.f64	d0, d7
 80037cc:	f010 f9b8 	bl	8013b40 <cos>
 80037d0:	eeb0 7b40 	vmov.f64	d7, d0
 80037d4:	ed1f 6bdc 	vldr	d6, [pc, #-880]	; 8003468 <IVK+0x2540>
 80037d8:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80037dc:	f107 030c 	add.w	r3, r7, #12
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3304      	adds	r3, #4
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3308      	adds	r3, #8
 80037f4:	edd3 7a00 	vldr	s15, [r3]
 80037f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003800:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	330c      	adds	r3, #12
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003814:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003818:	ed1f 6beb 	vldr	d6, [pc, #-940]	; 8003470 <IVK+0x2548>
 800381c:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8003820:	ed1f 6beb 	vldr	d6, [pc, #-940]	; 8003478 <IVK+0x2550>
 8003824:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003828:	ed1f 6be9 	vldr	d6, [pc, #-932]	; 8003488 <IVK+0x2560>
 800382c:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8003830:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 8003480 <IVK+0x2558>
 8003834:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003838:	eeb0 0b47 	vmov.f64	d0, d7
 800383c:	f010 f9d4 	bl	8013be8 <sin>
 8003840:	eeb0 7b40 	vmov.f64	d7, d0
 8003844:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8003848:	f107 030c 	add.w	r3, r7, #12
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3304      	adds	r3, #4
 8003850:	ed93 7a00 	vldr	s14, [r3]
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3308      	adds	r3, #8
 800385c:	edd3 7a00 	vldr	s15, [r3]
 8003860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003864:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003868:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8003c28 <IVK+0x2d00>
 800386c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003870:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8003c30 <IVK+0x2d08>
 8003874:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003878:	eeb0 0b47 	vmov.f64	d0, d7
 800387c:	f010 f960 	bl	8013b40 <cos>
 8003880:	eeb0 7b40 	vmov.f64	d7, d0
 8003884:	ee29 6b07 	vmul.f64	d6, d9, d7
							* f_J_inv_tmp_tmp)
 8003888:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800388c:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 78840.0
 8003890:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ 925786.58400000015
							* cos(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8003894:	f107 030c 	add.w	r3, r7, #12
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3304      	adds	r3, #4
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038b4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80038b8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80038bc:	f107 030c 	add.w	r3, r7, #12
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	330c      	adds	r3, #12
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80038d0:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8003c28 <IVK+0x2d00>
 80038d4:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 80038d8:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8003c30 <IVK+0x2d08>
 80038dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038e0:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8003c58 <IVK+0x2d30>
 80038e4:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 80038e8:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8003c50 <IVK+0x2d28>
 80038ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038f0:	eeb0 0b47 	vmov.f64	d0, d7
 80038f4:	f010 f924 	bl	8013b40 <cos>
 80038f8:	eeb0 7b40 	vmov.f64	d7, d0
 80038fc:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8003c38 <IVK+0x2d10>
 8003900:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3304      	adds	r3, #4
 800390c:	edd3 7a00 	vldr	s15, [r3]
 8003910:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003924:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003928:	ee36 6b07 	vadd.f64	d6, d6, d7
 800392c:	f107 030c 	add.w	r3, r7, #12
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800393c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003940:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8003c28 <IVK+0x2d00>
 8003944:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8003948:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8003c30 <IVK+0x2d08>
 800394c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003950:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8003c58 <IVK+0x2d30>
 8003954:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8003958:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8003c50 <IVK+0x2d28>
 800395c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003960:	eeb0 0b47 	vmov.f64	d0, d7
 8003964:	f010 f940 	bl	8013be8 <sin>
 8003968:	eeb0 7b40 	vmov.f64	d7, d0
 800396c:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[1] + 1.6845) * f_J_inv_tmp_tmp)
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3304      	adds	r3, #4
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003980:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8003c28 <IVK+0x2d00>
 8003984:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003988:	eeb0 0b47 	vmov.f64	d0, d7
 800398c:	f010 f8d8 	bl	8013b40 <cos>
 8003990:	eeb0 7b40 	vmov.f64	d7, d0
 8003994:	ee29 6b07 	vmul.f64	d6, d9, d7
 8003998:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800399c:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 925786.58400000015
 80039a0:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ 221663.52
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80039a4:	f107 030c 	add.w	r3, r7, #12
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3304      	adds	r3, #4
 80039ac:	edd3 7a00 	vldr	s15, [r3]
 80039b0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80039b4:	f107 030c 	add.w	r3, r7, #12
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3308      	adds	r3, #8
 80039bc:	edd3 7a00 	vldr	s15, [r3]
 80039c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80039c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80039cc:	f107 030c 	add.w	r3, r7, #12
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039e0:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8003c28 <IVK+0x2d00>
 80039e4:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 80039e8:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8003c30 <IVK+0x2d08>
 80039ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80039f0:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8003c58 <IVK+0x2d30>
 80039f4:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 80039f8:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8003c50 <IVK+0x2d28>
 80039fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a00:	eeb0 0b47 	vmov.f64	d0, d7
 8003a04:	f010 f8f0 	bl	8013be8 <sin>
 8003a08:	eeb0 7b40 	vmov.f64	d7, d0
 8003a0c:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8003c40 <IVK+0x2d18>
 8003a10:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	edd3 7a00 	vldr	s15, [r3]
 8003a20:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a24:	f107 030c 	add.w	r3, r7, #12
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	edd3 7a00 	vldr	s15, [r3]
 8003a30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a34:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003a38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a3c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8003c28 <IVK+0x2d00>
 8003a40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a44:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8003c30 <IVK+0x2d08>
 8003a48:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8003a4c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8003c58 <IVK+0x2d30>
 8003a50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a54:	eeb0 0b47 	vmov.f64	d0, d7
 8003a58:	f010 f872 	bl	8013b40 <cos>
 8003a5c:	eeb0 7b40 	vmov.f64	d7, d0
 8003a60:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665)
							* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	ed93 7a00 	vldr	s14, [r3]
 8003a70:	f107 030c 	add.w	r3, r7, #12
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3308      	adds	r3, #8
 8003a78:	edd3 7a00 	vldr	s15, [r3]
 8003a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a84:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8003c28 <IVK+0x2d00>
 8003a88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a8c:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8003c30 <IVK+0x2d08>
 8003a90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a94:	eeb0 0b47 	vmov.f64	d0, d7
 8003a98:	f010 f8a6 	bl	8013be8 <sin>
 8003a9c:	eeb0 7b40 	vmov.f64	d7, d0
 8003aa0:	ee29 6b07 	vmul.f64	d6, d9, d7
							* f_J_inv_tmp_tmp)
 8003aa4:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8003aa8:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 221663.52
 8003aac:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 221663.52
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	edd3 7a00 	vldr	s15, [r3]
 8003abc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ad0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003ad4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ad8:	f107 030c 	add.w	r3, r7, #12
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	edd3 7a00 	vldr	s15, [r3]
 8003ae4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ae8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003aec:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8003c28 <IVK+0x2d00>
 8003af0:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8003af4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8003c30 <IVK+0x2d08>
 8003af8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003afc:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8003c58 <IVK+0x2d30>
 8003b00:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8003b04:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8003c50 <IVK+0x2d28>
 8003b08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b0c:	eeb0 0b47 	vmov.f64	d0, d7
 8003b10:	f010 f86a 	bl	8013be8 <sin>
 8003b14:	eeb0 7b40 	vmov.f64	d7, d0
 8003b18:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8003c40 <IVK+0x2d18>
 8003b1c:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8003b20:	f107 030c 	add.w	r3, r7, #12
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3304      	adds	r3, #4
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b30:	f107 030c 	add.w	r3, r7, #12
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3308      	adds	r3, #8
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003b44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b48:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003c28 <IVK+0x2d00>
 8003b4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b50:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003c30 <IVK+0x2d08>
 8003b54:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8003b58:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8003c58 <IVK+0x2d30>
 8003b5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003b60:	eeb0 0b47 	vmov.f64	d0, d7
 8003b64:	f010 f840 	bl	8013be8 <sin>
 8003b68:	eeb0 7b40 	vmov.f64	d7, d0
 8003b6c:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665)
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8003b70:	f107 030c 	add.w	r3, r7, #12
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3304      	adds	r3, #4
 8003b78:	ed93 7a00 	vldr	s14, [r3]
 8003b7c:	f107 030c 	add.w	r3, r7, #12
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3308      	adds	r3, #8
 8003b84:	edd3 7a00 	vldr	s15, [r3]
 8003b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b90:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003c28 <IVK+0x2d00>
 8003b94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b98:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003c30 <IVK+0x2d08>
 8003b9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ba0:	eeb0 0b47 	vmov.f64	d0, d7
 8003ba4:	f00f ffcc 	bl	8013b40 <cos>
 8003ba8:	eeb0 7b40 	vmov.f64	d7, d0
 8003bac:	ee29 6b07 	vmul.f64	d6, d9, d7
							* f_J_inv_tmp_tmp)
 8003bb0:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8003bb4:	ee26 7b07 	vmul.f64	d7, d6, d7
					- 221663.52
 8003bb8:	ee38 8b47 	vsub.f64	d8, d8, d7
					+ 2.6029060499520004E+6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8003bbc:	f107 030c 	add.w	r3, r7, #12
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bdc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003be0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	edd3 7a00 	vldr	s15, [r3]
 8003bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bf4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003bf8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8003c28 <IVK+0x2d00>
 8003bfc:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8003c00:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8003c30 <IVK+0x2d08>
 8003c04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003c08:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003c58 <IVK+0x2d30>
 8003c0c:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8003c10:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003c50 <IVK+0x2d28>
 8003c14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c18:	eeb0 0b47 	vmov.f64	d0, d7
 8003c1c:	f00f ffe4 	bl	8013be8 <sin>
 8003c20:	eeb0 7b40 	vmov.f64	d7, d0
 8003c24:	e030      	b.n	8003c88 <IVK+0x2d60>
 8003c26:	bf00      	nop
 8003c28:	45a1cac1 	.word	0x45a1cac1
 8003c2c:	3ffaf3b6 	.word	0x3ffaf3b6
 8003c30:	39581062 	.word	0x39581062
 8003c34:	3fecc8b4 	.word	0x3fecc8b4
 8003c38:	2b020c4b 	.word	0x2b020c4b
 8003c3c:	412c40b5 	.word	0x412c40b5
 8003c40:	28f5c28f 	.word	0x28f5c28f
 8003c44:	410b0efc 	.word	0x410b0efc
 8003c48:	0664d3c0 	.word	0x0664d3c0
 8003c4c:	4143dbcd 	.word	0x4143dbcd
 8003c50:	19ce075f 	.word	0x19ce075f
 8003c54:	3ff85a51 	.word	0x3ff85a51
 8003c58:	05532618 	.word	0x05532618
 8003c5c:	3fe792a3 	.word	0x3fe792a3
 8003c60:	f5c28f5d 	.word	0xf5c28f5d
 8003c64:	410738b0 	.word	0x410738b0
 8003c68:	45a1cac1 	.word	0x45a1cac1
 8003c6c:	3ffaf3b6 	.word	0x3ffaf3b6
 8003c70:	39581062 	.word	0x39581062
 8003c74:	3fecc8b4 	.word	0x3fecc8b4
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	404e0000 	.word	0x404e0000
 8003c80:	b020c49c 	.word	0xb020c49c
 8003c84:	40860472 	.word	0x40860472
 8003c88:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8003c48 <IVK+0x2d20>
 8003c8c:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8003c90:	f107 030c 	add.w	r3, r7, #12
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3304      	adds	r3, #4
 8003c98:	edd3 7a00 	vldr	s15, [r3]
 8003c9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ca0:	f107 030c 	add.w	r3, r7, #12
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cb0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003cb4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003cb8:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 8003c68 <IVK+0x2d40>
 8003cbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003cc0:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 8003c70 <IVK+0x2d48>
 8003cc4:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8003cc8:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8003c58 <IVK+0x2d30>
 8003ccc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003cd0:	eeb0 0b47 	vmov.f64	d0, d7
 8003cd4:	f00f ff34 	bl	8013b40 <cos>
 8003cd8:	eeb0 7b40 	vmov.f64	d7, d0
 8003cdc:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665) * sin(q[1] + 1.6845)
 8003ce0:	f107 030c 	add.w	r3, r7, #12
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	edd3 7a00 	vldr	s15, [r3]
 8003cec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cf0:	ed1f 6b23 	vldr	d6, [pc, #-140]	; 8003c68 <IVK+0x2d40>
 8003cf4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003cf8:	eeb0 0b47 	vmov.f64	d0, d7
 8003cfc:	f00f ff74 	bl	8013be8 <sin>
 8003d00:	eeb0 7b40 	vmov.f64	d7, d0
 8003d04:	ee29 6b07 	vmul.f64	d6, d9, d7
							* f_J_inv_tmp_tmp)
 8003d08:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8003d0c:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 2.6029060499520004E+6
 8003d10:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 2.6029060499520004E+6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	edd3 7a00 	vldr	s15, [r3]
 8003d20:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d24:	f107 030c 	add.w	r3, r7, #12
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	edd3 7a00 	vldr	s15, [r3]
 8003d30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d34:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003d38:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003d3c:	f107 030c 	add.w	r3, r7, #12
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d50:	ed1f 6b3b 	vldr	d6, [pc, #-236]	; 8003c68 <IVK+0x2d40>
 8003d54:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8003d58:	ed1f 6b3b 	vldr	d6, [pc, #-236]	; 8003c70 <IVK+0x2d48>
 8003d5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d60:	ed1f 6b43 	vldr	d6, [pc, #-268]	; 8003c58 <IVK+0x2d30>
 8003d64:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8003d68:	ed1f 6b47 	vldr	d6, [pc, #-284]	; 8003c50 <IVK+0x2d28>
 8003d6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d70:	eeb0 0b47 	vmov.f64	d0, d7
 8003d74:	f00f ff38 	bl	8013be8 <sin>
 8003d78:	eeb0 7b40 	vmov.f64	d7, d0
 8003d7c:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 8003c48 <IVK+0x2d20>
 8003d80:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8003d84:	f107 030c 	add.w	r3, r7, #12
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	edd3 7a00 	vldr	s15, [r3]
 8003d90:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d94:	f107 030c 	add.w	r3, r7, #12
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003da4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003da8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003dac:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 8003c68 <IVK+0x2d40>
 8003db0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003db4:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 8003c70 <IVK+0x2d48>
 8003db8:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8003dbc:	ed1f 6b5a 	vldr	d6, [pc, #-360]	; 8003c58 <IVK+0x2d30>
 8003dc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003dc4:	eeb0 0b47 	vmov.f64	d0, d7
 8003dc8:	f00f ff0e 	bl	8013be8 <sin>
 8003dcc:	eeb0 7b40 	vmov.f64	d7, d0
 8003dd0:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665) * cos(q[1] + 1.6845)
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	edd3 7a00 	vldr	s15, [r3]
 8003de0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003de4:	ed1f 6b60 	vldr	d6, [pc, #-384]	; 8003c68 <IVK+0x2d40>
 8003de8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003dec:	eeb0 0b47 	vmov.f64	d0, d7
 8003df0:	f00f fea6 	bl	8013b40 <cos>
 8003df4:	eeb0 7b40 	vmov.f64	d7, d0
 8003df8:	ee29 6b07 	vmul.f64	d6, d9, d7
							* f_J_inv_tmp_tmp)
 8003dfc:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8003e00:	ee26 7b07 	vmul.f64	d7, d6, d7
					- 2.6029060499520004E+6
 8003e04:	ee38 8b47 	vsub.f64	d8, d8, d7
					+ 190230.12000000002
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e18:	f107 030c 	add.w	r3, r7, #12
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3308      	adds	r3, #8
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003e2c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003e30:	f107 030c 	add.w	r3, r7, #12
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	edd3 7a00 	vldr	s15, [r3]
 8003e3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e44:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8003c68 <IVK+0x2d40>
 8003e48:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8003e4c:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8003c70 <IVK+0x2d48>
 8003e50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e54:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8003c58 <IVK+0x2d30>
 8003e58:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8003e5c:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 8003c50 <IVK+0x2d28>
 8003e60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e64:	eeb0 0b47 	vmov.f64	d0, d7
 8003e68:	f00f febe 	bl	8013be8 <sin>
 8003e6c:	eeb0 7b40 	vmov.f64	d7, d0
 8003e70:	ed1f 6b85 	vldr	d6, [pc, #-532]	; 8003c60 <IVK+0x2d38>
 8003e74:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8003e78:	f107 030c 	add.w	r3, r7, #12
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	ed93 7a00 	vldr	s14, [r3]
 8003e84:	f107 030c 	add.w	r3, r7, #12
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	edd3 7a00 	vldr	s15, [r3]
 8003e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e98:	ed1f 6b8d 	vldr	d6, [pc, #-564]	; 8003c68 <IVK+0x2d40>
 8003e9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ea0:	ed1f 6b8d 	vldr	d6, [pc, #-564]	; 8003c70 <IVK+0x2d48>
 8003ea4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ea8:	eeb0 0b47 	vmov.f64	d0, d7
 8003eac:	f00f fe48 	bl	8013b40 <cos>
 8003eb0:	eeb0 7b40 	vmov.f64	d7, d0
 8003eb4:	ee29 9b07 	vmul.f64	d9, d9, d7
							* sin(q[1] + 1.6845) * f_J_inv_tmp_tmp)
 8003eb8:	f107 030c 	add.w	r3, r7, #12
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	edd3 7a00 	vldr	s15, [r3]
 8003ec4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ec8:	ed1f 6b99 	vldr	d6, [pc, #-612]	; 8003c68 <IVK+0x2d40>
 8003ecc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ed0:	eeb0 0b47 	vmov.f64	d0, d7
 8003ed4:	f00f fe88 	bl	8013be8 <sin>
 8003ed8:	eeb0 7b40 	vmov.f64	d7, d0
 8003edc:	ee29 6b07 	vmul.f64	d6, d9, d7
 8003ee0:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8003ee4:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ 190230.12000000002
 8003ee8:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 190230.12000000002
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8003eec:	f107 030c 	add.w	r3, r7, #12
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	edd3 7a00 	vldr	s15, [r3]
 8003ef8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3308      	adds	r3, #8
 8003f04:	edd3 7a00 	vldr	s15, [r3]
 8003f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f0c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003f10:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003f14:	f107 030c 	add.w	r3, r7, #12
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	edd3 7a00 	vldr	s15, [r3]
 8003f20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f28:	ed1f 6bb1 	vldr	d6, [pc, #-708]	; 8003c68 <IVK+0x2d40>
 8003f2c:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8003f30:	ed1f 6bb1 	vldr	d6, [pc, #-708]	; 8003c70 <IVK+0x2d48>
 8003f34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f38:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8003c58 <IVK+0x2d30>
 8003f3c:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8003f40:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 8003c50 <IVK+0x2d28>
 8003f44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f48:	eeb0 0b47 	vmov.f64	d0, d7
 8003f4c:	f00f fe4c 	bl	8013be8 <sin>
 8003f50:	eeb0 7b40 	vmov.f64	d7, d0
 8003f54:	ed1f 6bbe 	vldr	d6, [pc, #-760]	; 8003c60 <IVK+0x2d38>
 8003f58:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8003f5c:	f107 030c 	add.w	r3, r7, #12
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3304      	adds	r3, #4
 8003f64:	ed93 7a00 	vldr	s14, [r3]
 8003f68:	f107 030c 	add.w	r3, r7, #12
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	edd3 7a00 	vldr	s15, [r3]
 8003f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f7c:	ed1f 6bc6 	vldr	d6, [pc, #-792]	; 8003c68 <IVK+0x2d40>
 8003f80:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f84:	ed1f 6bc6 	vldr	d6, [pc, #-792]	; 8003c70 <IVK+0x2d48>
 8003f88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f8c:	eeb0 0b47 	vmov.f64	d0, d7
 8003f90:	f00f fe2a 	bl	8013be8 <sin>
 8003f94:	eeb0 7b40 	vmov.f64	d7, d0
 8003f98:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[1] + 1.6845) * f_J_inv_tmp_tmp)) / d;
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	edd3 7a00 	vldr	s15, [r3]
 8003fa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fac:	ed1f 6bd2 	vldr	d6, [pc, #-840]	; 8003c68 <IVK+0x2d40>
 8003fb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003fb4:	eeb0 0b47 	vmov.f64	d0, d7
 8003fb8:	f00f fdc2 	bl	8013b40 <cos>
 8003fbc:	eeb0 7b40 	vmov.f64	d7, d0
 8003fc0:	ee29 6b07 	vmul.f64	d6, d9, d7
 8003fc4:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8003fc8:	ee26 7b07 	vmul.f64	d7, d6, d7
					- 190230.12000000002
 8003fcc:	ee38 7b47 	vsub.f64	d7, d8, d7
			* (((((((((((((((123146.4
 8003fd0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8003fd4:	ee27 7b06 	vmul.f64	d7, d7, d6
	dv[8] = -(4.0
 8003fd8:	eeb1 5b47 	vneg.f64	d5, d7
							* cos(q[1] + 1.6845) * f_J_inv_tmp_tmp)) / d;
 8003fdc:	ed97 6b6a 	vldr	d6, [r7, #424]	; 0x1a8
 8003fe0:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[8] = -(4.0
 8003fe4:	f107 0310 	add.w	r3, r7, #16
 8003fe8:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	dv[13] = -(4.0 * f_J_inv_tmp_tmp
 8003fec:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8003ff0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8003ff4:	ee27 8b06 	vmul.f64	d8, d7, d6
			* (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8003ff8:	f107 030c 	add.w	r3, r7, #12
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3304      	adds	r3, #4
 8004000:	ed93 7a00 	vldr	s14, [r3]
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3308      	adds	r3, #8
 800400c:	edd3 7a00 	vldr	s15, [r3]
 8004010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004014:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004018:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 8003c68 <IVK+0x2d40>
 800401c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004020:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 8003c70 <IVK+0x2d48>
 8004024:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004028:	eeb0 0b47 	vmov.f64	d0, d7
 800402c:	f00f fd88 	bl	8013b40 <cos>
 8004030:	eeb0 7b40 	vmov.f64	d7, d0
 8004034:	ed1f 6bf0 	vldr	d6, [pc, #-960]	; 8003c78 <IVK+0x2d50>
 8004038:	ee27 6b06 	vmul.f64	d6, d7, d6
					+ 704.556 * b_J_inv_tmp_tmp)) / d3;
 800403c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004040:	ed1f 5bf1 	vldr	d5, [pc, #-964]	; 8003c80 <IVK+0x2d58>
 8004044:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004048:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 800404c:	ee28 7b07 	vmul.f64	d7, d8, d7
	dv[13] = -(4.0 * f_J_inv_tmp_tmp
 8004050:	eeb1 5b47 	vneg.f64	d5, d7
					+ 704.556 * b_J_inv_tmp_tmp)) / d3;
 8004054:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8004058:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[13] = -(4.0 * f_J_inv_tmp_tmp
 800405c:	f107 0310 	add.w	r3, r7, #16
 8004060:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	dv[18] = -(4.0
			* (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])
 8004064:	f107 030c 	add.w	r3, r7, #12
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3304      	adds	r3, #4
 800406c:	ed93 7a00 	vldr	s14, [r3]
 8004070:	f107 030c 	add.w	r3, r7, #12
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3308      	adds	r3, #8
 8004078:	edd3 7a00 	vldr	s15, [r3]
 800407c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004080:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004084:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004448 <IVK+0x3520>
 8004088:	ee37 7b06 	vadd.f64	d7, d7, d6
 800408c:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004450 <IVK+0x3528>
 8004090:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004094:	eeb0 0b47 	vmov.f64	d0, d7
 8004098:	f00f fd52 	bl	8013b40 <cos>
 800409c:	eeb0 7b40 	vmov.f64	d7, d0
 80040a0:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8004458 <IVK+0x3530>
 80040a4:	ee27 8b06 	vmul.f64	d8, d7, d6
 80040a8:	f107 030c 	add.w	r3, r7, #12
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	edd3 7a00 	vldr	s15, [r3]
 80040b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040b6:	eeb0 0b47 	vmov.f64	d0, d7
 80040ba:	f00f fd95 	bl	8013be8 <sin>
 80040be:	eeb0 7b40 	vmov.f64	d7, d0
 80040c2:	ee28 8b07 	vmul.f64	d8, d8, d7
					+ 704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) / d3;
 80040c6:	f107 030c 	add.w	r3, r7, #12
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3304      	adds	r3, #4
 80040ce:	edd3 7a00 	vldr	s15, [r3]
 80040d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040d6:	ed9f 6bdc 	vldr	d6, [pc, #880]	; 8004448 <IVK+0x3520>
 80040da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80040de:	eeb0 0b47 	vmov.f64	d0, d7
 80040e2:	f00f fd2d 	bl	8013b40 <cos>
 80040e6:	eeb0 7b40 	vmov.f64	d7, d0
 80040ea:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8004460 <IVK+0x3538>
 80040ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80040f2:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80040f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80040fa:	ee38 7b07 	vadd.f64	d7, d8, d7
			* (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])
 80040fe:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004102:	ee27 7b06 	vmul.f64	d7, d7, d6
	dv[18] = -(4.0
 8004106:	eeb1 5b47 	vneg.f64	d5, d7
					+ 704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) / d3;
 800410a:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 800410e:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[18] = -(4.0
 8004112:	f107 0310 	add.w	r3, r7, #16
 8004116:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	dv[23] = -(4.0
			* (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 800411a:	f107 030c 	add.w	r3, r7, #12
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3304      	adds	r3, #4
 8004122:	ed93 7a00 	vldr	s14, [r3]
 8004126:	f107 030c 	add.w	r3, r7, #12
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3308      	adds	r3, #8
 800412e:	edd3 7a00 	vldr	s15, [r3]
 8004132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004136:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800413a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8004448 <IVK+0x3520>
 800413e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004142:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8004450 <IVK+0x3528>
 8004146:	ee37 7b46 	vsub.f64	d7, d7, d6
 800414a:	eeb0 0b47 	vmov.f64	d0, d7
 800414e:	f00f fd4b 	bl	8013be8 <sin>
 8004152:	eeb0 7b40 	vmov.f64	d7, d0
 8004156:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8004458 <IVK+0x3530>
 800415a:	ee27 6b06 	vmul.f64	d6, d7, d6
					+ 704.556 * e_J_inv_tmp_tmp)) / d3;
 800415e:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8004162:	ed9f 5bbf 	vldr	d5, [pc, #764]	; 8004460 <IVK+0x3538>
 8004166:	ee27 7b05 	vmul.f64	d7, d7, d5
 800416a:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 800416e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004172:	ee27 7b06 	vmul.f64	d7, d7, d6
	dv[23] = -(4.0
 8004176:	eeb1 5b47 	vneg.f64	d5, d7
					+ 704.556 * e_J_inv_tmp_tmp)) / d3;
 800417a:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 800417e:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[23] = -(4.0
 8004182:	f107 0310 	add.w	r3, r7, #16
 8004186:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
	dv[4] = -(4.0
			* (((((((((((((((123146.4
					* sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665)
 800418a:	f107 030c 	add.w	r3, r7, #12
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3304      	adds	r3, #4
 8004192:	edd3 7a00 	vldr	s15, [r3]
 8004196:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800419a:	f107 030c 	add.w	r3, r7, #12
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3308      	adds	r3, #8
 80041a2:	edd3 7a00 	vldr	s15, [r3]
 80041a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80041ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041b2:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8004448 <IVK+0x3520>
 80041b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041ba:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8004450 <IVK+0x3528>
 80041be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041c2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80044a0 <IVK+0x3578>
 80041c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041ca:	eeb0 0b47 	vmov.f64	d0, d7
 80041ce:	f00f fd0b 	bl	8013be8 <sin>
 80041d2:	eeb0 7b40 	vmov.f64	d7, d0
 80041d6:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8004468 <IVK+0x3540>
 80041da:	ee27 8b06 	vmul.f64	d8, d7, d6
					* cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])
 80041de:	f107 030c 	add.w	r3, r7, #12
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3304      	adds	r3, #4
 80041e6:	ed93 7a00 	vldr	s14, [r3]
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	edd3 7a00 	vldr	s15, [r3]
 80041f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041fe:	ed9f 6b92 	vldr	d6, [pc, #584]	; 8004448 <IVK+0x3520>
 8004202:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004206:	ed9f 6b92 	vldr	d6, [pc, #584]	; 8004450 <IVK+0x3528>
 800420a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800420e:	eeb0 0b47 	vmov.f64	d0, d7
 8004212:	f00f fc95 	bl	8013b40 <cos>
 8004216:	eeb0 7b40 	vmov.f64	d7, d0
 800421a:	ee28 8b07 	vmul.f64	d8, d8, d7
 800421e:	f107 030c 	add.w	r3, r7, #12
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800422c:	eeb0 0b47 	vmov.f64	d0, d7
 8004230:	f00f fc86 	bl	8013b40 <cos>
 8004234:	eeb0 7b40 	vmov.f64	d7, d0
 8004238:	ee28 8b07 	vmul.f64	d8, d8, d7
					- 123146.4
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3304      	adds	r3, #4
 8004244:	edd3 7a00 	vldr	s15, [r3]
 8004248:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800424c:	f107 030c 	add.w	r3, r7, #12
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	edd3 7a00 	vldr	s15, [r3]
 8004258:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800425c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004260:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004264:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8004448 <IVK+0x3520>
 8004268:	ee37 7b06 	vadd.f64	d7, d7, d6
 800426c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8004450 <IVK+0x3528>
 8004270:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8004274:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 80044a0 <IVK+0x3578>
 8004278:	ee37 7b46 	vsub.f64	d7, d7, d6
 800427c:	eeb0 0b47 	vmov.f64	d0, d7
 8004280:	f00f fc5e 	bl	8013b40 <cos>
 8004284:	eeb0 7b40 	vmov.f64	d7, d0
 8004288:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8004468 <IVK+0x3540>
 800428c:	ee27 9b06 	vmul.f64	d9, d7, d6
											+ -0.73665)
							* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8004290:	f107 030c 	add.w	r3, r7, #12
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3304      	adds	r3, #4
 8004298:	ed93 7a00 	vldr	s14, [r3]
 800429c:	f107 030c 	add.w	r3, r7, #12
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3308      	adds	r3, #8
 80042a4:	edd3 7a00 	vldr	s15, [r3]
 80042a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80042b0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8004448 <IVK+0x3520>
 80042b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80042b8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8004450 <IVK+0x3528>
 80042bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80042c0:	eeb0 0b47 	vmov.f64	d0, d7
 80042c4:	f00f fc90 	bl	8013be8 <sin>
 80042c8:	eeb0 7b40 	vmov.f64	d7, d0
 80042cc:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[0]))
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	edd3 7a00 	vldr	s15, [r3]
 80042da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80042de:	eeb0 0b47 	vmov.f64	d0, d7
 80042e2:	f00f fc2d 	bl	8013b40 <cos>
 80042e6:	eeb0 7b40 	vmov.f64	d7, d0
 80042ea:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 123146.4
 80042ee:	ee38 8b47 	vsub.f64	d8, d8, d7
					- 1.4460589166400002E+6
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 80042f2:	f107 030c 	add.w	r3, r7, #12
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3304      	adds	r3, #4
 80042fa:	edd3 7a00 	vldr	s15, [r3]
 80042fe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004302:	f107 030c 	add.w	r3, r7, #12
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	edd3 7a00 	vldr	s15, [r3]
 800430e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004312:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004316:	ee36 7b07 	vadd.f64	d7, d6, d7
 800431a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8004448 <IVK+0x3520>
 800431e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004322:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8004450 <IVK+0x3528>
 8004326:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 800432a:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 80044a0 <IVK+0x3578>
 800432e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004332:	eeb0 0b47 	vmov.f64	d0, d7
 8004336:	f00f fc03 	bl	8013b40 <cos>
 800433a:	eeb0 7b40 	vmov.f64	d7, d0
 800433e:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8004470 <IVK+0x3548>
 8004342:	ee27 9b06 	vmul.f64	d9, d7, d6
											+ -0.73665) * sin(q[1] + 1.6845)
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3304      	adds	r3, #4
 800434e:	edd3 7a00 	vldr	s15, [r3]
 8004352:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004356:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8004448 <IVK+0x3520>
 800435a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800435e:	eeb0 0b47 	vmov.f64	d0, d7
 8004362:	f00f fc41 	bl	8013be8 <sin>
 8004366:	eeb0 7b40 	vmov.f64	d7, d0
 800436a:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[0]))
 800436e:	f107 030c 	add.w	r3, r7, #12
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	edd3 7a00 	vldr	s15, [r3]
 8004378:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800437c:	eeb0 0b47 	vmov.f64	d0, d7
 8004380:	f00f fbde 	bl	8013b40 <cos>
 8004384:	eeb0 7b40 	vmov.f64	d7, d0
 8004388:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 1.4460589166400002E+6
 800438c:	ee38 8b47 	vsub.f64	d8, d8, d7
					+ 1.4460589166400002E+6
							* sin(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8004390:	f107 030c 	add.w	r3, r7, #12
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3304      	adds	r3, #4
 8004398:	edd3 7a00 	vldr	s15, [r3]
 800439c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80043a0:	f107 030c 	add.w	r3, r7, #12
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3308      	adds	r3, #8
 80043a8:	edd3 7a00 	vldr	s15, [r3]
 80043ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80043b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043b8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8004448 <IVK+0x3520>
 80043bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80043c0:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8004450 <IVK+0x3528>
 80043c4:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 80043c8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80044a0 <IVK+0x3578>
 80043cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80043d0:	eeb0 0b47 	vmov.f64	d0, d7
 80043d4:	f00f fc08 	bl	8013be8 <sin>
 80043d8:	eeb0 7b40 	vmov.f64	d7, d0
 80043dc:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8004470 <IVK+0x3548>
 80043e0:	ee27 9b06 	vmul.f64	d9, d7, d6
											+ -0.73665) * cos(q[1] + 1.6845)
 80043e4:	f107 030c 	add.w	r3, r7, #12
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3304      	adds	r3, #4
 80043ec:	edd3 7a00 	vldr	s15, [r3]
 80043f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043f4:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8004448 <IVK+0x3520>
 80043f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80043fc:	eeb0 0b47 	vmov.f64	d0, d7
 8004400:	f00f fb9e 	bl	8013b40 <cos>
 8004404:	eeb0 7b40 	vmov.f64	d7, d0
 8004408:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[0]))
 800440c:	f107 030c 	add.w	r3, r7, #12
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	edd3 7a00 	vldr	s15, [r3]
 8004416:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800441a:	eeb0 0b47 	vmov.f64	d0, d7
 800441e:	f00f fb8f 	bl	8013b40 <cos>
 8004422:	eeb0 7b40 	vmov.f64	d7, d0
 8004426:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 1.4460589166400002E+6
 800442a:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 105683.40000000001
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 800442e:	f107 030c 	add.w	r3, r7, #12
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3304      	adds	r3, #4
 8004436:	ed93 7a00 	vldr	s14, [r3]
 800443a:	f107 030c 	add.w	r3, r7, #12
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	edd3 7a00 	vldr	s15, [r3]
 8004446:	e033      	b.n	80044b0 <IVK+0x3588>
 8004448:	45a1cac1 	.word	0x45a1cac1
 800444c:	3ffaf3b6 	.word	0x3ffaf3b6
 8004450:	39581062 	.word	0x39581062
 8004454:	3fecc8b4 	.word	0x3fecc8b4
 8004458:	00000000 	.word	0x00000000
 800445c:	404e0000 	.word	0x404e0000
 8004460:	b020c49c 	.word	0xb020c49c
 8004464:	40860472 	.word	0x40860472
 8004468:	66666666 	.word	0x66666666
 800446c:	40fe10a6 	.word	0x40fe10a6
 8004470:	eaa8eb47 	.word	0xeaa8eb47
 8004474:	413610aa 	.word	0x413610aa
 8004478:	66666667 	.word	0x66666667
 800447c:	40f9cd36 	.word	0x40f9cd36
 8004480:	00000000 	.word	0x00000000
 8004484:	40f33f80 	.word	0x40f33f80
 8004488:	2b020c4b 	.word	0x2b020c4b
 800448c:	412c40b5 	.word	0x412c40b5
 8004490:	39581062 	.word	0x39581062
 8004494:	3fecc8b4 	.word	0x3fecc8b4
 8004498:	19ce075f 	.word	0x19ce075f
 800449c:	3ff85a51 	.word	0x3ff85a51
 80044a0:	05532618 	.word	0x05532618
 80044a4:	3fe792a3 	.word	0x3fe792a3
 80044a8:	45a1cac1 	.word	0x45a1cac1
 80044ac:	3ffaf3b6 	.word	0x3ffaf3b6
 80044b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044b8:	ed1f 6b05 	vldr	d6, [pc, #-20]	; 80044a8 <IVK+0x3580>
 80044bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80044c0:	ed1f 6b0d 	vldr	d6, [pc, #-52]	; 8004490 <IVK+0x3568>
 80044c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80044c8:	eeb0 0b47 	vmov.f64	d0, d7
 80044cc:	f00f fb38 	bl	8013b40 <cos>
 80044d0:	eeb0 7b40 	vmov.f64	d7, d0
 80044d4:	ed1f 6b18 	vldr	d6, [pc, #-96]	; 8004478 <IVK+0x3550>
 80044d8:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(q[1] + 1.6845) * cos(q[0]))
 80044dc:	f107 030c 	add.w	r3, r7, #12
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3304      	adds	r3, #4
 80044e4:	edd3 7a00 	vldr	s15, [r3]
 80044e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044ec:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 80044a8 <IVK+0x3580>
 80044f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80044f4:	eeb0 0b47 	vmov.f64	d0, d7
 80044f8:	f00f fb76 	bl	8013be8 <sin>
 80044fc:	eeb0 7b40 	vmov.f64	d7, d0
 8004500:	ee29 9b07 	vmul.f64	d9, d9, d7
 8004504:	f107 030c 	add.w	r3, r7, #12
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	edd3 7a00 	vldr	s15, [r3]
 800450e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004512:	eeb0 0b47 	vmov.f64	d0, d7
 8004516:	f00f fb13 	bl	8013b40 <cos>
 800451a:	eeb0 7b40 	vmov.f64	d7, d0
 800451e:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 105683.40000000001
 8004522:	ee38 8b47 	vsub.f64	d8, d8, d7
					+ 105683.40000000001
							* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8004526:	f107 030c 	add.w	r3, r7, #12
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3304      	adds	r3, #4
 800452e:	ed93 7a00 	vldr	s14, [r3]
 8004532:	f107 030c 	add.w	r3, r7, #12
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3308      	adds	r3, #8
 800453a:	edd3 7a00 	vldr	s15, [r3]
 800453e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004542:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004546:	ed1f 6b28 	vldr	d6, [pc, #-160]	; 80044a8 <IVK+0x3580>
 800454a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800454e:	ed1f 6b30 	vldr	d6, [pc, #-192]	; 8004490 <IVK+0x3568>
 8004552:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004556:	eeb0 0b47 	vmov.f64	d0, d7
 800455a:	f00f fb45 	bl	8013be8 <sin>
 800455e:	eeb0 7b40 	vmov.f64	d7, d0
 8004562:	ed1f 6b3b 	vldr	d6, [pc, #-236]	; 8004478 <IVK+0x3550>
 8004566:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(q[1] + 1.6845) * cos(q[0])) + e_J_inv_tmp)
 800456a:	f107 030c 	add.w	r3, r7, #12
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3304      	adds	r3, #4
 8004572:	edd3 7a00 	vldr	s15, [r3]
 8004576:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800457a:	ed1f 6b35 	vldr	d6, [pc, #-212]	; 80044a8 <IVK+0x3580>
 800457e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004582:	eeb0 0b47 	vmov.f64	d0, d7
 8004586:	f00f fadb 	bl	8013b40 <cos>
 800458a:	eeb0 7b40 	vmov.f64	d7, d0
 800458e:	ee29 9b07 	vmul.f64	d9, d9, d7
 8004592:	f107 030c 	add.w	r3, r7, #12
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	edd3 7a00 	vldr	s15, [r3]
 800459c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045a0:	eeb0 0b47 	vmov.f64	d0, d7
 80045a4:	f00f facc 	bl	8013b40 <cos>
 80045a8:	eeb0 7b40 	vmov.f64	d7, d0
 80045ac:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 105683.40000000001
 80045b0:	ee38 6b07 	vadd.f64	d6, d8, d7
							* cos(q[1] + 1.6845) * cos(q[0])) + e_J_inv_tmp)
 80045b4:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80045b8:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ d11)
 80045bc:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 80045c0:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 78840.0
							* cos(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80045c4:	f107 030c 	add.w	r3, r7, #12
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3304      	adds	r3, #4
 80045cc:	edd3 7a00 	vldr	s15, [r3]
 80045d0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3308      	adds	r3, #8
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045e4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80045e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	330c      	adds	r3, #12
 80045f4:	edd3 7a00 	vldr	s15, [r3]
 80045f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004600:	ed1f 6b57 	vldr	d6, [pc, #-348]	; 80044a8 <IVK+0x3580>
 8004604:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8004608:	ed1f 6b5f 	vldr	d6, [pc, #-380]	; 8004490 <IVK+0x3568>
 800460c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004610:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 80044a0 <IVK+0x3578>
 8004614:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8004618:	ed1f 6b61 	vldr	d6, [pc, #-388]	; 8004498 <IVK+0x3570>
 800461c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004620:	eeb0 0b47 	vmov.f64	d0, d7
 8004624:	f00f fa8c 	bl	8013b40 <cos>
 8004628:	eeb0 7b40 	vmov.f64	d7, d0
 800462c:	ed1f 6b6c 	vldr	d6, [pc, #-432]	; 8004480 <IVK+0x3558>
 8004630:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8004634:	f107 030c 	add.w	r3, r7, #12
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3304      	adds	r3, #4
 800463c:	edd3 7a00 	vldr	s15, [r3]
 8004640:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004644:	f107 030c 	add.w	r3, r7, #12
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3308      	adds	r3, #8
 800464c:	edd3 7a00 	vldr	s15, [r3]
 8004650:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004654:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004658:	ee36 6b07 	vadd.f64	d6, d6, d7
 800465c:	f107 030c 	add.w	r3, r7, #12
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	edd3 7a00 	vldr	s15, [r3]
 8004668:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800466c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004670:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 80044a8 <IVK+0x3580>
 8004674:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8004678:	ed1f 6b7b 	vldr	d6, [pc, #-492]	; 8004490 <IVK+0x3568>
 800467c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004680:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 80044a0 <IVK+0x3578>
 8004684:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8004688:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 8004498 <IVK+0x3570>
 800468c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004690:	eeb0 0b47 	vmov.f64	d0, d7
 8004694:	f00f faa8 	bl	8013be8 <sin>
 8004698:	eeb0 7b40 	vmov.f64	d7, d0
 800469c:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3304      	adds	r3, #4
 80046a8:	ed93 7a00 	vldr	s14, [r3]
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3308      	adds	r3, #8
 80046b4:	edd3 7a00 	vldr	s15, [r3]
 80046b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046c0:	ed1f 6b87 	vldr	d6, [pc, #-540]	; 80044a8 <IVK+0x3580>
 80046c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046c8:	ed1f 6b8f 	vldr	d6, [pc, #-572]	; 8004490 <IVK+0x3568>
 80046cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046d0:	eeb0 0b47 	vmov.f64	d0, d7
 80046d4:	f00f fa34 	bl	8013b40 <cos>
 80046d8:	eeb0 7b40 	vmov.f64	d7, d0
 80046dc:	ee29 9b07 	vmul.f64	d9, d9, d7
							* sin(q[0]))
 80046e0:	f107 030c 	add.w	r3, r7, #12
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	edd3 7a00 	vldr	s15, [r3]
 80046ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046ee:	eeb0 0b47 	vmov.f64	d0, d7
 80046f2:	f00f fa79 	bl	8013be8 <sin>
 80046f6:	eeb0 7b40 	vmov.f64	d7, d0
 80046fa:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 78840.0
 80046fe:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ 925786.58400000015
							* cos(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8004702:	f107 030c 	add.w	r3, r7, #12
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3304      	adds	r3, #4
 800470a:	edd3 7a00 	vldr	s15, [r3]
 800470e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004712:	f107 030c 	add.w	r3, r7, #12
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	edd3 7a00 	vldr	s15, [r3]
 800471e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004722:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004726:	ee36 6b07 	vadd.f64	d6, d6, d7
 800472a:	f107 030c 	add.w	r3, r7, #12
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	edd3 7a00 	vldr	s15, [r3]
 8004736:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800473a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800473e:	ed1f 6ba6 	vldr	d6, [pc, #-664]	; 80044a8 <IVK+0x3580>
 8004742:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8004746:	ed1f 6bae 	vldr	d6, [pc, #-696]	; 8004490 <IVK+0x3568>
 800474a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800474e:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 80044a0 <IVK+0x3578>
 8004752:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8004756:	ed1f 6bb0 	vldr	d6, [pc, #-704]	; 8004498 <IVK+0x3570>
 800475a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800475e:	eeb0 0b47 	vmov.f64	d0, d7
 8004762:	f00f f9ed 	bl	8013b40 <cos>
 8004766:	eeb0 7b40 	vmov.f64	d7, d0
 800476a:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8004488 <IVK+0x3560>
 800476e:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8004772:	f107 030c 	add.w	r3, r7, #12
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3304      	adds	r3, #4
 800477a:	edd3 7a00 	vldr	s15, [r3]
 800477e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004782:	f107 030c 	add.w	r3, r7, #12
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3308      	adds	r3, #8
 800478a:	edd3 7a00 	vldr	s15, [r3]
 800478e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004792:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004796:	ee36 6b07 	vadd.f64	d6, d6, d7
 800479a:	f107 030c 	add.w	r3, r7, #12
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	edd3 7a00 	vldr	s15, [r3]
 80047a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047ae:	ed1f 6bc2 	vldr	d6, [pc, #-776]	; 80044a8 <IVK+0x3580>
 80047b2:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 80047b6:	ed1f 6bca 	vldr	d6, [pc, #-808]	; 8004490 <IVK+0x3568>
 80047ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80047be:	ed1f 6bc8 	vldr	d6, [pc, #-800]	; 80044a0 <IVK+0x3578>
 80047c2:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 80047c6:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8004498 <IVK+0x3570>
 80047ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047ce:	eeb0 0b47 	vmov.f64	d0, d7
 80047d2:	f00f fa09 	bl	8013be8 <sin>
 80047d6:	eeb0 7b40 	vmov.f64	d7, d0
 80047da:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[1] + 1.6845) * sin(q[0]))
 80047de:	f107 030c 	add.w	r3, r7, #12
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3304      	adds	r3, #4
 80047e6:	edd3 7a00 	vldr	s15, [r3]
 80047ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047ee:	ed1f 6bd2 	vldr	d6, [pc, #-840]	; 80044a8 <IVK+0x3580>
 80047f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047f6:	eeb0 0b47 	vmov.f64	d0, d7
 80047fa:	f00f f9a1 	bl	8013b40 <cos>
 80047fe:	eeb0 7b40 	vmov.f64	d7, d0
 8004802:	ee29 9b07 	vmul.f64	d9, d9, d7
 8004806:	f107 030c 	add.w	r3, r7, #12
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	edd3 7a00 	vldr	s15, [r3]
 8004810:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004814:	eeb0 0b47 	vmov.f64	d0, d7
 8004818:	f00f f9e6 	bl	8013be8 <sin>
 800481c:	eeb0 7b40 	vmov.f64	d7, d0
 8004820:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 925786.58400000015
 8004824:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ 221663.52
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3304      	adds	r3, #4
 8004830:	edd3 7a00 	vldr	s15, [r3]
 8004834:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004838:	f107 030c 	add.w	r3, r7, #12
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	edd3 7a00 	vldr	s15, [r3]
 8004844:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004848:	ee37 7b07 	vadd.f64	d7, d7, d7
 800484c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004850:	f107 030c 	add.w	r3, r7, #12
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	edd3 7a00 	vldr	s15, [r3]
 800485c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004860:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004864:	ed1f 6bf0 	vldr	d6, [pc, #-960]	; 80044a8 <IVK+0x3580>
 8004868:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 800486c:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004c30 <IVK+0x3d08>
 8004870:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004874:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004c38 <IVK+0x3d10>
 8004878:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 800487c:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004c40 <IVK+0x3d18>
 8004880:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004884:	eeb0 0b47 	vmov.f64	d0, d7
 8004888:	f00f f9ae 	bl	8013be8 <sin>
 800488c:	eeb0 7b40 	vmov.f64	d7, d0
 8004890:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8004c48 <IVK+0x3d20>
 8004894:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8004898:	f107 030c 	add.w	r3, r7, #12
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3304      	adds	r3, #4
 80048a0:	edd3 7a00 	vldr	s15, [r3]
 80048a4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80048a8:	f107 030c 	add.w	r3, r7, #12
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3308      	adds	r3, #8
 80048b0:	edd3 7a00 	vldr	s15, [r3]
 80048b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80048bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80048c0:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8004c78 <IVK+0x3d50>
 80048c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80048c8:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8004c30 <IVK+0x3d08>
 80048cc:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 80048d0:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8004c38 <IVK+0x3d10>
 80048d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048d8:	eeb0 0b47 	vmov.f64	d0, d7
 80048dc:	f00f f930 	bl	8013b40 <cos>
 80048e0:	eeb0 7b40 	vmov.f64	d7, d0
 80048e4:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665)
							* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3304      	adds	r3, #4
 80048f0:	ed93 7a00 	vldr	s14, [r3]
 80048f4:	f107 030c 	add.w	r3, r7, #12
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3308      	adds	r3, #8
 80048fc:	edd3 7a00 	vldr	s15, [r3]
 8004900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004904:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004908:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 8004c78 <IVK+0x3d50>
 800490c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004910:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8004c30 <IVK+0x3d08>
 8004914:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004918:	eeb0 0b47 	vmov.f64	d0, d7
 800491c:	f00f f964 	bl	8013be8 <sin>
 8004920:	eeb0 7b40 	vmov.f64	d7, d0
 8004924:	ee29 9b07 	vmul.f64	d9, d9, d7
							* sin(q[0]))
 8004928:	f107 030c 	add.w	r3, r7, #12
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	edd3 7a00 	vldr	s15, [r3]
 8004932:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004936:	eeb0 0b47 	vmov.f64	d0, d7
 800493a:	f00f f955 	bl	8013be8 <sin>
 800493e:	eeb0 7b40 	vmov.f64	d7, d0
 8004942:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 221663.52
 8004946:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 221663.52
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 800494a:	f107 030c 	add.w	r3, r7, #12
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3304      	adds	r3, #4
 8004952:	edd3 7a00 	vldr	s15, [r3]
 8004956:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800495a:	f107 030c 	add.w	r3, r7, #12
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	edd3 7a00 	vldr	s15, [r3]
 8004966:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800496a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800496e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004972:	f107 030c 	add.w	r3, r7, #12
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	edd3 7a00 	vldr	s15, [r3]
 800497e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004982:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004986:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8004c78 <IVK+0x3d50>
 800498a:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 800498e:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8004c30 <IVK+0x3d08>
 8004992:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004996:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8004c38 <IVK+0x3d10>
 800499a:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 800499e:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8004c40 <IVK+0x3d18>
 80049a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80049a6:	eeb0 0b47 	vmov.f64	d0, d7
 80049aa:	f00f f91d 	bl	8013be8 <sin>
 80049ae:	eeb0 7b40 	vmov.f64	d7, d0
 80049b2:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8004c48 <IVK+0x3d20>
 80049b6:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 80049ba:	f107 030c 	add.w	r3, r7, #12
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3304      	adds	r3, #4
 80049c2:	edd3 7a00 	vldr	s15, [r3]
 80049c6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80049ca:	f107 030c 	add.w	r3, r7, #12
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3308      	adds	r3, #8
 80049d2:	edd3 7a00 	vldr	s15, [r3]
 80049d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80049de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049e2:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8004c78 <IVK+0x3d50>
 80049e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80049ea:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8004c30 <IVK+0x3d08>
 80049ee:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 80049f2:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8004c38 <IVK+0x3d10>
 80049f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80049fa:	eeb0 0b47 	vmov.f64	d0, d7
 80049fe:	f00f f8f3 	bl	8013be8 <sin>
 8004a02:	eeb0 7b40 	vmov.f64	d7, d0
 8004a06:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665)
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8004a0a:	f107 030c 	add.w	r3, r7, #12
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3304      	adds	r3, #4
 8004a12:	ed93 7a00 	vldr	s14, [r3]
 8004a16:	f107 030c 	add.w	r3, r7, #12
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	edd3 7a00 	vldr	s15, [r3]
 8004a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a2a:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8004c78 <IVK+0x3d50>
 8004a2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a32:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8004c30 <IVK+0x3d08>
 8004a36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a3a:	eeb0 0b47 	vmov.f64	d0, d7
 8004a3e:	f00f f87f 	bl	8013b40 <cos>
 8004a42:	eeb0 7b40 	vmov.f64	d7, d0
 8004a46:	ee29 9b07 	vmul.f64	d9, d9, d7
							* sin(q[0]))
 8004a4a:	f107 030c 	add.w	r3, r7, #12
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	edd3 7a00 	vldr	s15, [r3]
 8004a54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a58:	eeb0 0b47 	vmov.f64	d0, d7
 8004a5c:	f00f f8c4 	bl	8013be8 <sin>
 8004a60:	eeb0 7b40 	vmov.f64	d7, d0
 8004a64:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 221663.52
 8004a68:	ee38 8b47 	vsub.f64	d8, d8, d7
					+ 2.6029060499520004E+6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8004a6c:	f107 030c 	add.w	r3, r7, #12
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3304      	adds	r3, #4
 8004a74:	edd3 7a00 	vldr	s15, [r3]
 8004a78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004a7c:	f107 030c 	add.w	r3, r7, #12
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3308      	adds	r3, #8
 8004a84:	edd3 7a00 	vldr	s15, [r3]
 8004a88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a8c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004a90:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004a94:	f107 030c 	add.w	r3, r7, #12
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	edd3 7a00 	vldr	s15, [r3]
 8004aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004aa4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004aa8:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8004c78 <IVK+0x3d50>
 8004aac:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8004ab0:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004c30 <IVK+0x3d08>
 8004ab4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ab8:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004c38 <IVK+0x3d10>
 8004abc:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8004ac0:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004c40 <IVK+0x3d18>
 8004ac4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ac8:	eeb0 0b47 	vmov.f64	d0, d7
 8004acc:	f00f f88c 	bl	8013be8 <sin>
 8004ad0:	eeb0 7b40 	vmov.f64	d7, d0
 8004ad4:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8004c50 <IVK+0x3d28>
 8004ad8:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8004adc:	f107 030c 	add.w	r3, r7, #12
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	edd3 7a00 	vldr	s15, [r3]
 8004ae8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004aec:	f107 030c 	add.w	r3, r7, #12
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3308      	adds	r3, #8
 8004af4:	edd3 7a00 	vldr	s15, [r3]
 8004af8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004afc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b00:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b04:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8004c78 <IVK+0x3d50>
 8004b08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b0c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8004c30 <IVK+0x3d08>
 8004b10:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8004b14:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8004c38 <IVK+0x3d10>
 8004b18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b1c:	eeb0 0b47 	vmov.f64	d0, d7
 8004b20:	f00f f80e 	bl	8013b40 <cos>
 8004b24:	eeb0 7b40 	vmov.f64	d7, d0
 8004b28:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665) * sin(q[1] + 1.6845)
 8004b2c:	f107 030c 	add.w	r3, r7, #12
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3304      	adds	r3, #4
 8004b34:	edd3 7a00 	vldr	s15, [r3]
 8004b38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b3c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8004c78 <IVK+0x3d50>
 8004b40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b44:	eeb0 0b47 	vmov.f64	d0, d7
 8004b48:	f00f f84e 	bl	8013be8 <sin>
 8004b4c:	eeb0 7b40 	vmov.f64	d7, d0
 8004b50:	ee29 9b07 	vmul.f64	d9, d9, d7
							* sin(q[0]))
 8004b54:	f107 030c 	add.w	r3, r7, #12
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	edd3 7a00 	vldr	s15, [r3]
 8004b5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b62:	eeb0 0b47 	vmov.f64	d0, d7
 8004b66:	f00f f83f 	bl	8013be8 <sin>
 8004b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8004b6e:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 2.6029060499520004E+6
 8004b72:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 2.6029060499520004E+6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8004b76:	f107 030c 	add.w	r3, r7, #12
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	edd3 7a00 	vldr	s15, [r3]
 8004b82:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004b86:	f107 030c 	add.w	r3, r7, #12
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	edd3 7a00 	vldr	s15, [r3]
 8004b92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b96:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b9a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004b9e:	f107 030c 	add.w	r3, r7, #12
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	330c      	adds	r3, #12
 8004ba6:	edd3 7a00 	vldr	s15, [r3]
 8004baa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004bb2:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8004c78 <IVK+0x3d50>
 8004bb6:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8004bba:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8004c30 <IVK+0x3d08>
 8004bbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004bc2:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8004c38 <IVK+0x3d10>
 8004bc6:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8004bca:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8004c40 <IVK+0x3d18>
 8004bce:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004bd2:	eeb0 0b47 	vmov.f64	d0, d7
 8004bd6:	f00f f807 	bl	8013be8 <sin>
 8004bda:	eeb0 7b40 	vmov.f64	d7, d0
 8004bde:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004c50 <IVK+0x3d28>
 8004be2:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8004be6:	f107 030c 	add.w	r3, r7, #12
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3304      	adds	r3, #4
 8004bee:	edd3 7a00 	vldr	s15, [r3]
 8004bf2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004bf6:	f107 030c 	add.w	r3, r7, #12
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	edd3 7a00 	vldr	s15, [r3]
 8004c02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c06:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c0e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8004c78 <IVK+0x3d50>
 8004c12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c16:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8004c30 <IVK+0x3d08>
 8004c1a:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8004c1e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8004c38 <IVK+0x3d10>
 8004c22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c26:	eeb0 0b47 	vmov.f64	d0, d7
 8004c2a:	f00e ffdd 	bl	8013be8 <sin>
 8004c2e:	e02b      	b.n	8004c88 <IVK+0x3d60>
 8004c30:	39581062 	.word	0x39581062
 8004c34:	3fecc8b4 	.word	0x3fecc8b4
 8004c38:	05532618 	.word	0x05532618
 8004c3c:	3fe792a3 	.word	0x3fe792a3
 8004c40:	19ce075f 	.word	0x19ce075f
 8004c44:	3ff85a51 	.word	0x3ff85a51
 8004c48:	28f5c28f 	.word	0x28f5c28f
 8004c4c:	410b0efc 	.word	0x410b0efc
 8004c50:	0664d3c0 	.word	0x0664d3c0
 8004c54:	4143dbcd 	.word	0x4143dbcd
 8004c58:	19ce075f 	.word	0x19ce075f
 8004c5c:	3ff85a51 	.word	0x3ff85a51
 8004c60:	f5c28f5d 	.word	0xf5c28f5d
 8004c64:	410738b0 	.word	0x410738b0
 8004c68:	05532618 	.word	0x05532618
 8004c6c:	3fe792a3 	.word	0x3fe792a3
 8004c70:	66666666 	.word	0x66666666
 8004c74:	40fe10a6 	.word	0x40fe10a6
 8004c78:	45a1cac1 	.word	0x45a1cac1
 8004c7c:	3ffaf3b6 	.word	0x3ffaf3b6
 8004c80:	39581062 	.word	0x39581062
 8004c84:	3fecc8b4 	.word	0x3fecc8b4
 8004c88:	eeb0 7b40 	vmov.f64	d7, d0
 8004c8c:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665) * cos(q[1] + 1.6845)
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3304      	adds	r3, #4
 8004c98:	edd3 7a00 	vldr	s15, [r3]
 8004c9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ca0:	ed1f 6b0b 	vldr	d6, [pc, #-44]	; 8004c78 <IVK+0x3d50>
 8004ca4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ca8:	eeb0 0b47 	vmov.f64	d0, d7
 8004cac:	f00e ff48 	bl	8013b40 <cos>
 8004cb0:	eeb0 7b40 	vmov.f64	d7, d0
 8004cb4:	ee29 9b07 	vmul.f64	d9, d9, d7
							* sin(q[0]))
 8004cb8:	f107 030c 	add.w	r3, r7, #12
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	edd3 7a00 	vldr	s15, [r3]
 8004cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cc6:	eeb0 0b47 	vmov.f64	d0, d7
 8004cca:	f00e ff8d 	bl	8013be8 <sin>
 8004cce:	eeb0 7b40 	vmov.f64	d7, d0
 8004cd2:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 2.6029060499520004E+6
 8004cd6:	ee38 8b47 	vsub.f64	d8, d8, d7
					+ 190230.12000000002
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8004cda:	f107 030c 	add.w	r3, r7, #12
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	edd3 7a00 	vldr	s15, [r3]
 8004ce6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004cea:	f107 030c 	add.w	r3, r7, #12
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	edd3 7a00 	vldr	s15, [r3]
 8004cf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cfa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004cfe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004d02:	f107 030c 	add.w	r3, r7, #12
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	edd3 7a00 	vldr	s15, [r3]
 8004d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d16:	ed1f 6b28 	vldr	d6, [pc, #-160]	; 8004c78 <IVK+0x3d50>
 8004d1a:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8004d1e:	ed1f 6b28 	vldr	d6, [pc, #-160]	; 8004c80 <IVK+0x3d58>
 8004d22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d26:	ed1f 6b30 	vldr	d6, [pc, #-192]	; 8004c68 <IVK+0x3d40>
 8004d2a:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8004d2e:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8004c58 <IVK+0x3d30>
 8004d32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d36:	eeb0 0b47 	vmov.f64	d0, d7
 8004d3a:	f00e ff55 	bl	8013be8 <sin>
 8004d3e:	eeb0 7b40 	vmov.f64	d7, d0
 8004d42:	ed1f 6b39 	vldr	d6, [pc, #-228]	; 8004c60 <IVK+0x3d38>
 8004d46:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8004d4a:	f107 030c 	add.w	r3, r7, #12
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3304      	adds	r3, #4
 8004d52:	ed93 7a00 	vldr	s14, [r3]
 8004d56:	f107 030c 	add.w	r3, r7, #12
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	edd3 7a00 	vldr	s15, [r3]
 8004d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d6a:	ed1f 6b3d 	vldr	d6, [pc, #-244]	; 8004c78 <IVK+0x3d50>
 8004d6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d72:	ed1f 6b3d 	vldr	d6, [pc, #-244]	; 8004c80 <IVK+0x3d58>
 8004d76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d7a:	eeb0 0b47 	vmov.f64	d0, d7
 8004d7e:	f00e fedf 	bl	8013b40 <cos>
 8004d82:	eeb0 7b40 	vmov.f64	d7, d0
 8004d86:	ee29 9b07 	vmul.f64	d9, d9, d7
							* sin(q[1] + 1.6845) * sin(q[0]))
 8004d8a:	f107 030c 	add.w	r3, r7, #12
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3304      	adds	r3, #4
 8004d92:	edd3 7a00 	vldr	s15, [r3]
 8004d96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d9a:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 8004c78 <IVK+0x3d50>
 8004d9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004da2:	eeb0 0b47 	vmov.f64	d0, d7
 8004da6:	f00e ff1f 	bl	8013be8 <sin>
 8004daa:	eeb0 7b40 	vmov.f64	d7, d0
 8004dae:	ee29 9b07 	vmul.f64	d9, d9, d7
 8004db2:	f107 030c 	add.w	r3, r7, #12
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	edd3 7a00 	vldr	s15, [r3]
 8004dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dc0:	eeb0 0b47 	vmov.f64	d0, d7
 8004dc4:	f00e ff10 	bl	8013be8 <sin>
 8004dc8:	eeb0 7b40 	vmov.f64	d7, d0
 8004dcc:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 190230.12000000002
 8004dd0:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 190230.12000000002
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8004dd4:	f107 030c 	add.w	r3, r7, #12
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	edd3 7a00 	vldr	s15, [r3]
 8004de0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004de4:	f107 030c 	add.w	r3, r7, #12
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3308      	adds	r3, #8
 8004dec:	edd3 7a00 	vldr	s15, [r3]
 8004df0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004df4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004df8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004dfc:	f107 030c 	add.w	r3, r7, #12
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	edd3 7a00 	vldr	s15, [r3]
 8004e08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e10:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8004c78 <IVK+0x3d50>
 8004e14:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8004e18:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8004c80 <IVK+0x3d58>
 8004e1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e20:	ed1f 6b6f 	vldr	d6, [pc, #-444]	; 8004c68 <IVK+0x3d40>
 8004e24:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8004e28:	ed1f 6b75 	vldr	d6, [pc, #-468]	; 8004c58 <IVK+0x3d30>
 8004e2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e30:	eeb0 0b47 	vmov.f64	d0, d7
 8004e34:	f00e fed8 	bl	8013be8 <sin>
 8004e38:	eeb0 7b40 	vmov.f64	d7, d0
 8004e3c:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8004c60 <IVK+0x3d38>
 8004e40:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8004e44:	f107 030c 	add.w	r3, r7, #12
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	ed93 7a00 	vldr	s14, [r3]
 8004e50:	f107 030c 	add.w	r3, r7, #12
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	edd3 7a00 	vldr	s15, [r3]
 8004e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e64:	ed1f 6b7c 	vldr	d6, [pc, #-496]	; 8004c78 <IVK+0x3d50>
 8004e68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e6c:	ed1f 6b7c 	vldr	d6, [pc, #-496]	; 8004c80 <IVK+0x3d58>
 8004e70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e74:	eeb0 0b47 	vmov.f64	d0, d7
 8004e78:	f00e feb6 	bl	8013be8 <sin>
 8004e7c:	eeb0 7b40 	vmov.f64	d7, d0
 8004e80:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[1] + 1.6845) * sin(q[0]))) / d;
 8004e84:	f107 030c 	add.w	r3, r7, #12
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	edd3 7a00 	vldr	s15, [r3]
 8004e90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e94:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 8004c78 <IVK+0x3d50>
 8004e98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e9c:	eeb0 0b47 	vmov.f64	d0, d7
 8004ea0:	f00e fe4e 	bl	8013b40 <cos>
 8004ea4:	eeb0 7b40 	vmov.f64	d7, d0
 8004ea8:	ee29 9b07 	vmul.f64	d9, d9, d7
 8004eac:	f107 030c 	add.w	r3, r7, #12
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	edd3 7a00 	vldr	s15, [r3]
 8004eb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004eba:	eeb0 0b47 	vmov.f64	d0, d7
 8004ebe:	f00e fe93 	bl	8013be8 <sin>
 8004ec2:	eeb0 7b40 	vmov.f64	d7, d0
 8004ec6:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 190230.12000000002
 8004eca:	ee38 7b47 	vsub.f64	d7, d8, d7
			* (((((((((((((((123146.4
 8004ece:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004ed2:	ee27 7b06 	vmul.f64	d7, d7, d6
	dv[4] = -(4.0
 8004ed6:	eeb1 5b47 	vneg.f64	d5, d7
							* cos(q[1] + 1.6845) * sin(q[0]))) / d;
 8004eda:	ed97 6b6a 	vldr	d6, [r7, #424]	; 0x1a8
 8004ede:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[4] = -(4.0
 8004ee2:	f107 0310 	add.w	r3, r7, #16
 8004ee6:	ed83 7b08 	vstr	d7, [r3, #32]
	dv[9] = 4.0
			* (((((((((((((((123146.4
					* cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665)
 8004eea:	f107 030c 	add.w	r3, r7, #12
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	edd3 7a00 	vldr	s15, [r3]
 8004ef6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004efa:	f107 030c 	add.w	r3, r7, #12
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3308      	adds	r3, #8
 8004f02:	edd3 7a00 	vldr	s15, [r3]
 8004f06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f0a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f12:	ed1f 6ba7 	vldr	d6, [pc, #-668]	; 8004c78 <IVK+0x3d50>
 8004f16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f1a:	ed1f 6ba7 	vldr	d6, [pc, #-668]	; 8004c80 <IVK+0x3d58>
 8004f1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f22:	ed1f 6baf 	vldr	d6, [pc, #-700]	; 8004c68 <IVK+0x3d40>
 8004f26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f2a:	eeb0 0b47 	vmov.f64	d0, d7
 8004f2e:	f00e fe07 	bl	8013b40 <cos>
 8004f32:	eeb0 7b40 	vmov.f64	d7, d0
 8004f36:	ed1f 6bb2 	vldr	d6, [pc, #-712]	; 8004c70 <IVK+0x3d48>
 8004f3a:	ee27 8b06 	vmul.f64	d8, d7, d6
					* sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])
 8004f3e:	f107 030c 	add.w	r3, r7, #12
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3304      	adds	r3, #4
 8004f46:	ed93 7a00 	vldr	s14, [r3]
 8004f4a:	f107 030c 	add.w	r3, r7, #12
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3308      	adds	r3, #8
 8004f52:	edd3 7a00 	vldr	s15, [r3]
 8004f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f5e:	ed1f 6bba 	vldr	d6, [pc, #-744]	; 8004c78 <IVK+0x3d50>
 8004f62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f66:	ed1f 6bba 	vldr	d6, [pc, #-744]	; 8004c80 <IVK+0x3d58>
 8004f6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f6e:	eeb0 0b47 	vmov.f64	d0, d7
 8004f72:	f00e fe39 	bl	8013be8 <sin>
 8004f76:	eeb0 7b40 	vmov.f64	d7, d0
 8004f7a:	ee28 8b07 	vmul.f64	d8, d8, d7
 8004f7e:	f107 030c 	add.w	r3, r7, #12
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	edd3 7a00 	vldr	s15, [r3]
 8004f88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f8c:	eeb0 0b47 	vmov.f64	d0, d7
 8004f90:	f00e fe2a 	bl	8013be8 <sin>
 8004f94:	eeb0 7b40 	vmov.f64	d7, d0
 8004f98:	ee28 8b07 	vmul.f64	d8, d8, d7
					- 123146.4
							* sin(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8004f9c:	f107 030c 	add.w	r3, r7, #12
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	edd3 7a00 	vldr	s15, [r3]
 8004fa8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004fac:	f107 030c 	add.w	r3, r7, #12
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	edd3 7a00 	vldr	s15, [r3]
 8004fb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fbc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004fc0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004fc4:	ed1f 6bd4 	vldr	d6, [pc, #-848]	; 8004c78 <IVK+0x3d50>
 8004fc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004fcc:	ed1f 6bd4 	vldr	d6, [pc, #-848]	; 8004c80 <IVK+0x3d58>
 8004fd0:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8004fd4:	ed1f 6bdc 	vldr	d6, [pc, #-880]	; 8004c68 <IVK+0x3d40>
 8004fd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004fdc:	eeb0 0b47 	vmov.f64	d0, d7
 8004fe0:	f00e fe02 	bl	8013be8 <sin>
 8004fe4:	eeb0 7b40 	vmov.f64	d7, d0
 8004fe8:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8004c70 <IVK+0x3d48>
 8004fec:	ee27 9b06 	vmul.f64	d9, d7, d6
											+ -0.73665)
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8004ff0:	f107 030c 	add.w	r3, r7, #12
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	ed93 7a00 	vldr	s14, [r3]
 8004ffc:	f107 030c 	add.w	r3, r7, #12
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3308      	adds	r3, #8
 8005004:	edd3 7a00 	vldr	s15, [r3]
 8005008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800500c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005010:	ed1f 6be7 	vldr	d6, [pc, #-924]	; 8004c78 <IVK+0x3d50>
 8005014:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005018:	ed1f 6be7 	vldr	d6, [pc, #-924]	; 8004c80 <IVK+0x3d58>
 800501c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005020:	eeb0 0b47 	vmov.f64	d0, d7
 8005024:	f00e fd8c 	bl	8013b40 <cos>
 8005028:	eeb0 7b40 	vmov.f64	d7, d0
 800502c:	ee29 9b07 	vmul.f64	d9, d9, d7
							* sin(q[0]))
 8005030:	f107 030c 	add.w	r3, r7, #12
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	edd3 7a00 	vldr	s15, [r3]
 800503a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800503e:	eeb0 0b47 	vmov.f64	d0, d7
 8005042:	f00e fdd1 	bl	8013be8 <sin>
 8005046:	eeb0 7b40 	vmov.f64	d7, d0
 800504a:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 123146.4
 800504e:	ee38 8b47 	vsub.f64	d8, d8, d7
					+ 1.4460589166400002E+6
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8005052:	f107 030c 	add.w	r3, r7, #12
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3304      	adds	r3, #4
 800505a:	edd3 7a00 	vldr	s15, [r3]
 800505e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005062:	f107 030c 	add.w	r3, r7, #12
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3308      	adds	r3, #8
 800506a:	edd3 7a00 	vldr	s15, [r3]
 800506e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005072:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005076:	ee36 7b07 	vadd.f64	d7, d6, d7
 800507a:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8005438 <IVK+0x4510>
 800507e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005082:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8005440 <IVK+0x4518>
 8005086:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 800508a:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8005448 <IVK+0x4520>
 800508e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005092:	eeb0 0b47 	vmov.f64	d0, d7
 8005096:	f00e fd53 	bl	8013b40 <cos>
 800509a:	eeb0 7b40 	vmov.f64	d7, d0
 800509e:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8005450 <IVK+0x4528>
 80050a2:	ee27 9b06 	vmul.f64	d9, d7, d6
											+ -0.73665) * sin(q[1] + 1.6845)
 80050a6:	f107 030c 	add.w	r3, r7, #12
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3304      	adds	r3, #4
 80050ae:	edd3 7a00 	vldr	s15, [r3]
 80050b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050b6:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8005438 <IVK+0x4510>
 80050ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80050be:	eeb0 0b47 	vmov.f64	d0, d7
 80050c2:	f00e fd91 	bl	8013be8 <sin>
 80050c6:	eeb0 7b40 	vmov.f64	d7, d0
 80050ca:	ee29 9b07 	vmul.f64	d9, d9, d7
							* sin(q[0]))
 80050ce:	f107 030c 	add.w	r3, r7, #12
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	edd3 7a00 	vldr	s15, [r3]
 80050d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050dc:	eeb0 0b47 	vmov.f64	d0, d7
 80050e0:	f00e fd82 	bl	8013be8 <sin>
 80050e4:	eeb0 7b40 	vmov.f64	d7, d0
 80050e8:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 1.4460589166400002E+6
 80050ec:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 1.4460589166400002E+6
							* sin(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 80050f0:	f107 030c 	add.w	r3, r7, #12
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3304      	adds	r3, #4
 80050f8:	edd3 7a00 	vldr	s15, [r3]
 80050fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005100:	f107 030c 	add.w	r3, r7, #12
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	edd3 7a00 	vldr	s15, [r3]
 800510c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005110:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005114:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005118:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8005438 <IVK+0x4510>
 800511c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005120:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8005440 <IVK+0x4518>
 8005124:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8005128:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8005448 <IVK+0x4520>
 800512c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005130:	eeb0 0b47 	vmov.f64	d0, d7
 8005134:	f00e fd58 	bl	8013be8 <sin>
 8005138:	eeb0 7b40 	vmov.f64	d7, d0
 800513c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005450 <IVK+0x4528>
 8005140:	ee27 9b06 	vmul.f64	d9, d7, d6
											+ -0.73665) * cos(q[1] + 1.6845)
 8005144:	f107 030c 	add.w	r3, r7, #12
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3304      	adds	r3, #4
 800514c:	edd3 7a00 	vldr	s15, [r3]
 8005150:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005154:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8005438 <IVK+0x4510>
 8005158:	ee37 7b06 	vadd.f64	d7, d7, d6
 800515c:	eeb0 0b47 	vmov.f64	d0, d7
 8005160:	f00e fcee 	bl	8013b40 <cos>
 8005164:	eeb0 7b40 	vmov.f64	d7, d0
 8005168:	ee29 9b07 	vmul.f64	d9, d9, d7
							* sin(q[0])) + d1)
 800516c:	f107 030c 	add.w	r3, r7, #12
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	edd3 7a00 	vldr	s15, [r3]
 8005176:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800517a:	eeb0 0b47 	vmov.f64	d0, d7
 800517e:	f00e fd33 	bl	8013be8 <sin>
 8005182:	eeb0 7b40 	vmov.f64	d7, d0
 8005186:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 1.4460589166400002E+6
 800518a:	ee38 6b47 	vsub.f64	d6, d8, d7
							* sin(q[0])) + d1)
 800518e:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005192:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 105683.40000000001
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8005196:	f107 030c 	add.w	r3, r7, #12
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3304      	adds	r3, #4
 800519e:	ed93 7a00 	vldr	s14, [r3]
 80051a2:	f107 030c 	add.w	r3, r7, #12
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	edd3 7a00 	vldr	s15, [r3]
 80051ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051b6:	ed9f 6ba0 	vldr	d6, [pc, #640]	; 8005438 <IVK+0x4510>
 80051ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051be:	ed9f 6ba0 	vldr	d6, [pc, #640]	; 8005440 <IVK+0x4518>
 80051c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051c6:	eeb0 0b47 	vmov.f64	d0, d7
 80051ca:	f00e fcb9 	bl	8013b40 <cos>
 80051ce:	eeb0 7b40 	vmov.f64	d7, d0
 80051d2:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8005458 <IVK+0x4530>
 80051d6:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(q[1] + 1.6845) * sin(q[0]))
 80051da:	f107 030c 	add.w	r3, r7, #12
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3304      	adds	r3, #4
 80051e2:	edd3 7a00 	vldr	s15, [r3]
 80051e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051ea:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8005438 <IVK+0x4510>
 80051ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051f2:	eeb0 0b47 	vmov.f64	d0, d7
 80051f6:	f00e fcf7 	bl	8013be8 <sin>
 80051fa:	eeb0 7b40 	vmov.f64	d7, d0
 80051fe:	ee29 9b07 	vmul.f64	d9, d9, d7
 8005202:	f107 030c 	add.w	r3, r7, #12
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	edd3 7a00 	vldr	s15, [r3]
 800520c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005210:	eeb0 0b47 	vmov.f64	d0, d7
 8005214:	f00e fce8 	bl	8013be8 <sin>
 8005218:	eeb0 7b40 	vmov.f64	d7, d0
 800521c:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 105683.40000000001
 8005220:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 105683.40000000001
							* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8005224:	f107 030c 	add.w	r3, r7, #12
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3304      	adds	r3, #4
 800522c:	ed93 7a00 	vldr	s14, [r3]
 8005230:	f107 030c 	add.w	r3, r7, #12
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3308      	adds	r3, #8
 8005238:	edd3 7a00 	vldr	s15, [r3]
 800523c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005244:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8005438 <IVK+0x4510>
 8005248:	ee37 7b06 	vadd.f64	d7, d7, d6
 800524c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8005440 <IVK+0x4518>
 8005250:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005254:	eeb0 0b47 	vmov.f64	d0, d7
 8005258:	f00e fcc6 	bl	8013be8 <sin>
 800525c:	eeb0 7b40 	vmov.f64	d7, d0
 8005260:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8005458 <IVK+0x4530>
 8005264:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(q[1] + 1.6845) * sin(q[0])) + d2)
 8005268:	f107 030c 	add.w	r3, r7, #12
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3304      	adds	r3, #4
 8005270:	edd3 7a00 	vldr	s15, [r3]
 8005274:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005278:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8005438 <IVK+0x4510>
 800527c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005280:	eeb0 0b47 	vmov.f64	d0, d7
 8005284:	f00e fc5c 	bl	8013b40 <cos>
 8005288:	eeb0 7b40 	vmov.f64	d7, d0
 800528c:	ee29 9b07 	vmul.f64	d9, d9, d7
 8005290:	f107 030c 	add.w	r3, r7, #12
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	edd3 7a00 	vldr	s15, [r3]
 800529a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800529e:	eeb0 0b47 	vmov.f64	d0, d7
 80052a2:	f00e fca1 	bl	8013be8 <sin>
 80052a6:	eeb0 7b40 	vmov.f64	d7, d0
 80052aa:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 105683.40000000001
 80052ae:	ee38 6b47 	vsub.f64	d6, d8, d7
							* cos(q[1] + 1.6845) * sin(q[0])) + d2)
 80052b2:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 80052b6:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 78840.0
							* cos(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80052ba:	f107 030c 	add.w	r3, r7, #12
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3304      	adds	r3, #4
 80052c2:	edd3 7a00 	vldr	s15, [r3]
 80052c6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80052ca:	f107 030c 	add.w	r3, r7, #12
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3308      	adds	r3, #8
 80052d2:	edd3 7a00 	vldr	s15, [r3]
 80052d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80052de:	ee36 6b07 	vadd.f64	d6, d6, d7
 80052e2:	f107 030c 	add.w	r3, r7, #12
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	330c      	adds	r3, #12
 80052ea:	edd3 7a00 	vldr	s15, [r3]
 80052ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80052f6:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8005438 <IVK+0x4510>
 80052fa:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 80052fe:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8005440 <IVK+0x4518>
 8005302:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005306:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8005448 <IVK+0x4520>
 800530a:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 800530e:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8005488 <IVK+0x4560>
 8005312:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005316:	eeb0 0b47 	vmov.f64	d0, d7
 800531a:	f00e fc11 	bl	8013b40 <cos>
 800531e:	eeb0 7b40 	vmov.f64	d7, d0
 8005322:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8005460 <IVK+0x4538>
 8005326:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 800532a:	f107 030c 	add.w	r3, r7, #12
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3304      	adds	r3, #4
 8005332:	edd3 7a00 	vldr	s15, [r3]
 8005336:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800533a:	f107 030c 	add.w	r3, r7, #12
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3308      	adds	r3, #8
 8005342:	edd3 7a00 	vldr	s15, [r3]
 8005346:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800534a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800534e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005352:	f107 030c 	add.w	r3, r7, #12
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	edd3 7a00 	vldr	s15, [r3]
 800535e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005362:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005366:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8005438 <IVK+0x4510>
 800536a:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 800536e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8005440 <IVK+0x4518>
 8005372:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005376:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8005448 <IVK+0x4520>
 800537a:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 800537e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8005488 <IVK+0x4560>
 8005382:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005386:	eeb0 0b47 	vmov.f64	d0, d7
 800538a:	f00e fc2d 	bl	8013be8 <sin>
 800538e:	eeb0 7b40 	vmov.f64	d7, d0
 8005392:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8005396:	f107 030c 	add.w	r3, r7, #12
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3304      	adds	r3, #4
 800539e:	ed93 7a00 	vldr	s14, [r3]
 80053a2:	f107 030c 	add.w	r3, r7, #12
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	edd3 7a00 	vldr	s15, [r3]
 80053ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053b6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8005438 <IVK+0x4510>
 80053ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8005440 <IVK+0x4518>
 80053c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80053c6:	eeb0 0b47 	vmov.f64	d0, d7
 80053ca:	f00e fbb9 	bl	8013b40 <cos>
 80053ce:	eeb0 7b40 	vmov.f64	d7, d0
 80053d2:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[0]))
 80053d6:	f107 030c 	add.w	r3, r7, #12
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	edd3 7a00 	vldr	s15, [r3]
 80053e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053e4:	eeb0 0b47 	vmov.f64	d0, d7
 80053e8:	f00e fbaa 	bl	8013b40 <cos>
 80053ec:	eeb0 7b40 	vmov.f64	d7, d0
 80053f0:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 78840.0
 80053f4:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ 925786.58400000015
							* cos(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80053f8:	f107 030c 	add.w	r3, r7, #12
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3304      	adds	r3, #4
 8005400:	edd3 7a00 	vldr	s15, [r3]
 8005404:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005408:	f107 030c 	add.w	r3, r7, #12
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3308      	adds	r3, #8
 8005410:	edd3 7a00 	vldr	s15, [r3]
 8005414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005418:	ee37 7b07 	vadd.f64	d7, d7, d7
 800541c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005420:	f107 030c 	add.w	r3, r7, #12
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	edd3 7a00 	vldr	s15, [r3]
 800542c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005430:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005434:	e034      	b.n	80054a0 <IVK+0x4578>
 8005436:	bf00      	nop
 8005438:	45a1cac1 	.word	0x45a1cac1
 800543c:	3ffaf3b6 	.word	0x3ffaf3b6
 8005440:	39581062 	.word	0x39581062
 8005444:	3fecc8b4 	.word	0x3fecc8b4
 8005448:	05532618 	.word	0x05532618
 800544c:	3fe792a3 	.word	0x3fe792a3
 8005450:	eaa8eb47 	.word	0xeaa8eb47
 8005454:	413610aa 	.word	0x413610aa
 8005458:	66666667 	.word	0x66666667
 800545c:	40f9cd36 	.word	0x40f9cd36
 8005460:	00000000 	.word	0x00000000
 8005464:	40f33f80 	.word	0x40f33f80
 8005468:	2b020c4b 	.word	0x2b020c4b
 800546c:	412c40b5 	.word	0x412c40b5
 8005470:	28f5c28f 	.word	0x28f5c28f
 8005474:	410b0efc 	.word	0x410b0efc
 8005478:	45a1cac1 	.word	0x45a1cac1
 800547c:	3ffaf3b6 	.word	0x3ffaf3b6
 8005480:	39581062 	.word	0x39581062
 8005484:	3fecc8b4 	.word	0x3fecc8b4
 8005488:	19ce075f 	.word	0x19ce075f
 800548c:	3ff85a51 	.word	0x3ff85a51
 8005490:	05532618 	.word	0x05532618
 8005494:	3fe792a3 	.word	0x3fe792a3
 8005498:	0664d3c0 	.word	0x0664d3c0
 800549c:	4143dbcd 	.word	0x4143dbcd
 80054a0:	ed1f 6b0b 	vldr	d6, [pc, #-44]	; 8005478 <IVK+0x4550>
 80054a4:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 80054a8:	ed1f 6b0b 	vldr	d6, [pc, #-44]	; 8005480 <IVK+0x4558>
 80054ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80054b0:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8005490 <IVK+0x4568>
 80054b4:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 80054b8:	ed1f 6b0d 	vldr	d6, [pc, #-52]	; 8005488 <IVK+0x4560>
 80054bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80054c0:	eeb0 0b47 	vmov.f64	d0, d7
 80054c4:	f00e fb3c 	bl	8013b40 <cos>
 80054c8:	eeb0 7b40 	vmov.f64	d7, d0
 80054cc:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8005468 <IVK+0x4540>
 80054d0:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80054d4:	f107 030c 	add.w	r3, r7, #12
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3304      	adds	r3, #4
 80054dc:	edd3 7a00 	vldr	s15, [r3]
 80054e0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80054e4:	f107 030c 	add.w	r3, r7, #12
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	edd3 7a00 	vldr	s15, [r3]
 80054f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80054f4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80054f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80054fc:	f107 030c 	add.w	r3, r7, #12
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	edd3 7a00 	vldr	s15, [r3]
 8005508:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800550c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005510:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 8005478 <IVK+0x4550>
 8005514:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8005518:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 8005480 <IVK+0x4558>
 800551c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005520:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 8005490 <IVK+0x4568>
 8005524:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8005528:	ed1f 6b29 	vldr	d6, [pc, #-164]	; 8005488 <IVK+0x4560>
 800552c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005530:	eeb0 0b47 	vmov.f64	d0, d7
 8005534:	f00e fb58 	bl	8013be8 <sin>
 8005538:	eeb0 7b40 	vmov.f64	d7, d0
 800553c:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[1] + 1.6845) * cos(q[0]))
 8005540:	f107 030c 	add.w	r3, r7, #12
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3304      	adds	r3, #4
 8005548:	edd3 7a00 	vldr	s15, [r3]
 800554c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005550:	ed1f 6b37 	vldr	d6, [pc, #-220]	; 8005478 <IVK+0x4550>
 8005554:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005558:	eeb0 0b47 	vmov.f64	d0, d7
 800555c:	f00e faf0 	bl	8013b40 <cos>
 8005560:	eeb0 7b40 	vmov.f64	d7, d0
 8005564:	ee29 9b07 	vmul.f64	d9, d9, d7
 8005568:	f107 030c 	add.w	r3, r7, #12
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	edd3 7a00 	vldr	s15, [r3]
 8005572:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005576:	eeb0 0b47 	vmov.f64	d0, d7
 800557a:	f00e fae1 	bl	8013b40 <cos>
 800557e:	eeb0 7b40 	vmov.f64	d7, d0
 8005582:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 925786.58400000015
 8005586:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ 221663.52
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 800558a:	f107 030c 	add.w	r3, r7, #12
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3304      	adds	r3, #4
 8005592:	edd3 7a00 	vldr	s15, [r3]
 8005596:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800559a:	f107 030c 	add.w	r3, r7, #12
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	edd3 7a00 	vldr	s15, [r3]
 80055a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80055ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80055b2:	f107 030c 	add.w	r3, r7, #12
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	edd3 7a00 	vldr	s15, [r3]
 80055be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055c6:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8005478 <IVK+0x4550>
 80055ca:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 80055ce:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8005480 <IVK+0x4558>
 80055d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055d6:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 8005490 <IVK+0x4568>
 80055da:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 80055de:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8005488 <IVK+0x4560>
 80055e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80055e6:	eeb0 0b47 	vmov.f64	d0, d7
 80055ea:	f00e fafd 	bl	8013be8 <sin>
 80055ee:	eeb0 7b40 	vmov.f64	d7, d0
 80055f2:	ed1f 6b61 	vldr	d6, [pc, #-388]	; 8005470 <IVK+0x4548>
 80055f6:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 80055fa:	f107 030c 	add.w	r3, r7, #12
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3304      	adds	r3, #4
 8005602:	edd3 7a00 	vldr	s15, [r3]
 8005606:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800560a:	f107 030c 	add.w	r3, r7, #12
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3308      	adds	r3, #8
 8005612:	edd3 7a00 	vldr	s15, [r3]
 8005616:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800561a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800561e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005622:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8005478 <IVK+0x4550>
 8005626:	ee37 7b06 	vadd.f64	d7, d7, d6
 800562a:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8005480 <IVK+0x4558>
 800562e:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8005632:	ed1f 6b69 	vldr	d6, [pc, #-420]	; 8005490 <IVK+0x4568>
 8005636:	ee37 7b46 	vsub.f64	d7, d7, d6
 800563a:	eeb0 0b47 	vmov.f64	d0, d7
 800563e:	f00e fa7f 	bl	8013b40 <cos>
 8005642:	eeb0 7b40 	vmov.f64	d7, d0
 8005646:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665)
							* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 800564a:	f107 030c 	add.w	r3, r7, #12
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3304      	adds	r3, #4
 8005652:	ed93 7a00 	vldr	s14, [r3]
 8005656:	f107 030c 	add.w	r3, r7, #12
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3308      	adds	r3, #8
 800565e:	edd3 7a00 	vldr	s15, [r3]
 8005662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005666:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800566a:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 8005478 <IVK+0x4550>
 800566e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005672:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 8005480 <IVK+0x4558>
 8005676:	ee37 7b46 	vsub.f64	d7, d7, d6
 800567a:	eeb0 0b47 	vmov.f64	d0, d7
 800567e:	f00e fab3 	bl	8013be8 <sin>
 8005682:	eeb0 7b40 	vmov.f64	d7, d0
 8005686:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[0]))
 800568a:	f107 030c 	add.w	r3, r7, #12
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	edd3 7a00 	vldr	s15, [r3]
 8005694:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005698:	eeb0 0b47 	vmov.f64	d0, d7
 800569c:	f00e fa50 	bl	8013b40 <cos>
 80056a0:	eeb0 7b40 	vmov.f64	d7, d0
 80056a4:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 221663.52
 80056a8:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 221663.52
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80056ac:	f107 030c 	add.w	r3, r7, #12
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3304      	adds	r3, #4
 80056b4:	edd3 7a00 	vldr	s15, [r3]
 80056b8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3308      	adds	r3, #8
 80056c4:	edd3 7a00 	vldr	s15, [r3]
 80056c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80056d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80056d4:	f107 030c 	add.w	r3, r7, #12
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	edd3 7a00 	vldr	s15, [r3]
 80056e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056e8:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 8005478 <IVK+0x4550>
 80056ec:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 80056f0:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 8005480 <IVK+0x4558>
 80056f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056f8:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8005490 <IVK+0x4568>
 80056fc:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8005700:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8005488 <IVK+0x4560>
 8005704:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005708:	eeb0 0b47 	vmov.f64	d0, d7
 800570c:	f00e fa6c 	bl	8013be8 <sin>
 8005710:	eeb0 7b40 	vmov.f64	d7, d0
 8005714:	ed1f 6baa 	vldr	d6, [pc, #-680]	; 8005470 <IVK+0x4548>
 8005718:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3304      	adds	r3, #4
 8005724:	edd3 7a00 	vldr	s15, [r3]
 8005728:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800572c:	f107 030c 	add.w	r3, r7, #12
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3308      	adds	r3, #8
 8005734:	edd3 7a00 	vldr	s15, [r3]
 8005738:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800573c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005740:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005744:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8005478 <IVK+0x4550>
 8005748:	ee37 7b06 	vadd.f64	d7, d7, d6
 800574c:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8005480 <IVK+0x4558>
 8005750:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8005754:	ed1f 6bb2 	vldr	d6, [pc, #-712]	; 8005490 <IVK+0x4568>
 8005758:	ee37 7b46 	vsub.f64	d7, d7, d6
 800575c:	eeb0 0b47 	vmov.f64	d0, d7
 8005760:	f00e fa42 	bl	8013be8 <sin>
 8005764:	eeb0 7b40 	vmov.f64	d7, d0
 8005768:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665)
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 800576c:	f107 030c 	add.w	r3, r7, #12
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3304      	adds	r3, #4
 8005774:	ed93 7a00 	vldr	s14, [r3]
 8005778:	f107 030c 	add.w	r3, r7, #12
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3308      	adds	r3, #8
 8005780:	edd3 7a00 	vldr	s15, [r3]
 8005784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005788:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800578c:	ed1f 6bc6 	vldr	d6, [pc, #-792]	; 8005478 <IVK+0x4550>
 8005790:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005794:	ed1f 6bc6 	vldr	d6, [pc, #-792]	; 8005480 <IVK+0x4558>
 8005798:	ee37 7b46 	vsub.f64	d7, d7, d6
 800579c:	eeb0 0b47 	vmov.f64	d0, d7
 80057a0:	f00e f9ce 	bl	8013b40 <cos>
 80057a4:	eeb0 7b40 	vmov.f64	d7, d0
 80057a8:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[0]))
 80057ac:	f107 030c 	add.w	r3, r7, #12
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	edd3 7a00 	vldr	s15, [r3]
 80057b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80057ba:	eeb0 0b47 	vmov.f64	d0, d7
 80057be:	f00e f9bf 	bl	8013b40 <cos>
 80057c2:	eeb0 7b40 	vmov.f64	d7, d0
 80057c6:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 221663.52
 80057ca:	ee38 8b47 	vsub.f64	d8, d8, d7
					+ 2.6029060499520004E+6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80057ce:	f107 030c 	add.w	r3, r7, #12
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3304      	adds	r3, #4
 80057d6:	edd3 7a00 	vldr	s15, [r3]
 80057da:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80057de:	f107 030c 	add.w	r3, r7, #12
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	edd3 7a00 	vldr	s15, [r3]
 80057ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80057ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80057f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80057f6:	f107 030c 	add.w	r3, r7, #12
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	edd3 7a00 	vldr	s15, [r3]
 8005802:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005806:	ee36 7b07 	vadd.f64	d7, d6, d7
 800580a:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 8005478 <IVK+0x4550>
 800580e:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8005812:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 8005480 <IVK+0x4558>
 8005816:	ee37 7b46 	vsub.f64	d7, d7, d6
 800581a:	ed1f 6be3 	vldr	d6, [pc, #-908]	; 8005490 <IVK+0x4568>
 800581e:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8005822:	ed1f 6be7 	vldr	d6, [pc, #-924]	; 8005488 <IVK+0x4560>
 8005826:	ee37 7b06 	vadd.f64	d7, d7, d6
 800582a:	eeb0 0b47 	vmov.f64	d0, d7
 800582e:	f00e f9db 	bl	8013be8 <sin>
 8005832:	eeb0 7b40 	vmov.f64	d7, d0
 8005836:	ed1f 6be8 	vldr	d6, [pc, #-928]	; 8005498 <IVK+0x4570>
 800583a:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 800583e:	f107 030c 	add.w	r3, r7, #12
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3304      	adds	r3, #4
 8005846:	edd3 7a00 	vldr	s15, [r3]
 800584a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800584e:	f107 030c 	add.w	r3, r7, #12
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3308      	adds	r3, #8
 8005856:	edd3 7a00 	vldr	s15, [r3]
 800585a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800585e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005862:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005866:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005c28 <IVK+0x4d00>
 800586a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800586e:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005c30 <IVK+0x4d08>
 8005872:	ee37 7b46 	vsub.f64	d7, d7, d6
							* cos(
 8005876:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005c38 <IVK+0x4d10>
 800587a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800587e:	eeb0 0b47 	vmov.f64	d0, d7
 8005882:	f00e f95d 	bl	8013b40 <cos>
 8005886:	eeb0 7b40 	vmov.f64	d7, d0
 800588a:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665) * sin(q[1] + 1.6845)
 800588e:	f107 030c 	add.w	r3, r7, #12
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3304      	adds	r3, #4
 8005896:	edd3 7a00 	vldr	s15, [r3]
 800589a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800589e:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8005c28 <IVK+0x4d00>
 80058a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80058a6:	eeb0 0b47 	vmov.f64	d0, d7
 80058aa:	f00e f99d 	bl	8013be8 <sin>
 80058ae:	eeb0 7b40 	vmov.f64	d7, d0
 80058b2:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[0]))
 80058b6:	f107 030c 	add.w	r3, r7, #12
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	edd3 7a00 	vldr	s15, [r3]
 80058c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80058c4:	eeb0 0b47 	vmov.f64	d0, d7
 80058c8:	f00e f93a 	bl	8013b40 <cos>
 80058cc:	eeb0 7b40 	vmov.f64	d7, d0
 80058d0:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 2.6029060499520004E+6
 80058d4:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 2.6029060499520004E+6
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80058d8:	f107 030c 	add.w	r3, r7, #12
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3304      	adds	r3, #4
 80058e0:	edd3 7a00 	vldr	s15, [r3]
 80058e4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80058e8:	f107 030c 	add.w	r3, r7, #12
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	edd3 7a00 	vldr	s15, [r3]
 80058f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80058f8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80058fc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005900:	f107 030c 	add.w	r3, r7, #12
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	edd3 7a00 	vldr	s15, [r3]
 800590c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005910:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005914:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005c28 <IVK+0x4d00>
 8005918:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 800591c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005c30 <IVK+0x4d08>
 8005920:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005924:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005c38 <IVK+0x4d10>
 8005928:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 800592c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005c40 <IVK+0x4d18>
 8005930:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005934:	eeb0 0b47 	vmov.f64	d0, d7
 8005938:	f00e f956 	bl	8013be8 <sin>
 800593c:	eeb0 7b40 	vmov.f64	d7, d0
 8005940:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8005c48 <IVK+0x4d20>
 8005944:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(
									(((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995)
 8005948:	f107 030c 	add.w	r3, r7, #12
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3304      	adds	r3, #4
 8005950:	edd3 7a00 	vldr	s15, [r3]
 8005954:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005958:	f107 030c 	add.w	r3, r7, #12
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3308      	adds	r3, #8
 8005960:	edd3 7a00 	vldr	s15, [r3]
 8005964:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005968:	ee37 7b07 	vadd.f64	d7, d7, d7
 800596c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005970:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005c28 <IVK+0x4d00>
 8005974:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005978:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005c30 <IVK+0x4d08>
 800597c:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8005980:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005c38 <IVK+0x4d10>
 8005984:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005988:	eeb0 0b47 	vmov.f64	d0, d7
 800598c:	f00e f92c 	bl	8013be8 <sin>
 8005990:	eeb0 7b40 	vmov.f64	d7, d0
 8005994:	ee29 9b07 	vmul.f64	d9, d9, d7
											+ -0.73665) * cos(q[1] + 1.6845)
 8005998:	f107 030c 	add.w	r3, r7, #12
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3304      	adds	r3, #4
 80059a0:	edd3 7a00 	vldr	s15, [r3]
 80059a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80059a8:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8005c28 <IVK+0x4d00>
 80059ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059b0:	eeb0 0b47 	vmov.f64	d0, d7
 80059b4:	f00e f8c4 	bl	8013b40 <cos>
 80059b8:	eeb0 7b40 	vmov.f64	d7, d0
 80059bc:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[0]))
 80059c0:	f107 030c 	add.w	r3, r7, #12
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	edd3 7a00 	vldr	s15, [r3]
 80059ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80059ce:	eeb0 0b47 	vmov.f64	d0, d7
 80059d2:	f00e f8b5 	bl	8013b40 <cos>
 80059d6:	eeb0 7b40 	vmov.f64	d7, d0
 80059da:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 2.6029060499520004E+6
 80059de:	ee38 8b47 	vsub.f64	d8, d8, d7
					+ 190230.12000000002
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 80059e2:	f107 030c 	add.w	r3, r7, #12
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3304      	adds	r3, #4
 80059ea:	edd3 7a00 	vldr	s15, [r3]
 80059ee:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80059f2:	f107 030c 	add.w	r3, r7, #12
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	edd3 7a00 	vldr	s15, [r3]
 80059fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a02:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a06:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a0a:	f107 030c 	add.w	r3, r7, #12
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	edd3 7a00 	vldr	s15, [r3]
 8005a16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a1e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005c28 <IVK+0x4d00>
 8005a22:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8005a26:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005c30 <IVK+0x4d08>
 8005a2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a2e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005c38 <IVK+0x4d10>
 8005a32:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8005a36:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005c40 <IVK+0x4d18>
 8005a3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a3e:	eeb0 0b47 	vmov.f64	d0, d7
 8005a42:	f00e f8d1 	bl	8013be8 <sin>
 8005a46:	eeb0 7b40 	vmov.f64	d7, d0
 8005a4a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8005c50 <IVK+0x4d28>
 8005a4e:	ee27 9b06 	vmul.f64	d9, d7, d6
							* cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8005a52:	f107 030c 	add.w	r3, r7, #12
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	ed93 7a00 	vldr	s14, [r3]
 8005a5e:	f107 030c 	add.w	r3, r7, #12
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	edd3 7a00 	vldr	s15, [r3]
 8005a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a72:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8005c28 <IVK+0x4d00>
 8005a76:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a7a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8005c30 <IVK+0x4d08>
 8005a7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a82:	eeb0 0b47 	vmov.f64	d0, d7
 8005a86:	f00e f85b 	bl	8013b40 <cos>
 8005a8a:	eeb0 7b40 	vmov.f64	d7, d0
 8005a8e:	ee29 9b07 	vmul.f64	d9, d9, d7
							* sin(q[1] + 1.6845) * cos(q[0]))
 8005a92:	f107 030c 	add.w	r3, r7, #12
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	edd3 7a00 	vldr	s15, [r3]
 8005a9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005aa2:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8005c28 <IVK+0x4d00>
 8005aa6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005aaa:	eeb0 0b47 	vmov.f64	d0, d7
 8005aae:	f00e f89b 	bl	8013be8 <sin>
 8005ab2:	eeb0 7b40 	vmov.f64	d7, d0
 8005ab6:	ee29 9b07 	vmul.f64	d9, d9, d7
 8005aba:	f107 030c 	add.w	r3, r7, #12
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	edd3 7a00 	vldr	s15, [r3]
 8005ac4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ac8:	eeb0 0b47 	vmov.f64	d0, d7
 8005acc:	f00e f838 	bl	8013b40 <cos>
 8005ad0:	eeb0 7b40 	vmov.f64	d7, d0
 8005ad4:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ 190230.12000000002
 8005ad8:	ee38 8b07 	vadd.f64	d8, d8, d7
					- 190230.12000000002
							* sin(
									(((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845)
 8005adc:	f107 030c 	add.w	r3, r7, #12
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	edd3 7a00 	vldr	s15, [r3]
 8005ae8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005aec:	f107 030c 	add.w	r3, r7, #12
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3308      	adds	r3, #8
 8005af4:	edd3 7a00 	vldr	s15, [r3]
 8005af8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005afc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b00:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005b04:	f107 030c 	add.w	r3, r7, #12
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	edd3 7a00 	vldr	s15, [r3]
 8005b10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b14:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b18:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005c28 <IVK+0x4d00>
 8005b1c:	ee37 7b06 	vadd.f64	d7, d7, d6
											+ -0.8995) + -0.73665) + 1.52205)
 8005b20:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005c30 <IVK+0x4d08>
 8005b24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b28:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005c38 <IVK+0x4d10>
 8005b2c:	ee37 7b46 	vsub.f64	d7, d7, d6
							* sin(
 8005b30:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005c40 <IVK+0x4d18>
 8005b34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b38:	eeb0 0b47 	vmov.f64	d0, d7
 8005b3c:	f00e f854 	bl	8013be8 <sin>
 8005b40:	eeb0 7b40 	vmov.f64	d7, d0
 8005b44:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8005c50 <IVK+0x4d28>
 8005b48:	ee27 9b06 	vmul.f64	d9, d7, d6
							* sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8005b4c:	f107 030c 	add.w	r3, r7, #12
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3304      	adds	r3, #4
 8005b54:	ed93 7a00 	vldr	s14, [r3]
 8005b58:	f107 030c 	add.w	r3, r7, #12
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	edd3 7a00 	vldr	s15, [r3]
 8005b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b6c:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8005c28 <IVK+0x4d00>
 8005b70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b74:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8005c30 <IVK+0x4d08>
 8005b78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b7c:	eeb0 0b47 	vmov.f64	d0, d7
 8005b80:	f00e f832 	bl	8013be8 <sin>
 8005b84:	eeb0 7b40 	vmov.f64	d7, d0
 8005b88:	ee29 9b07 	vmul.f64	d9, d9, d7
							* cos(q[1] + 1.6845) * cos(q[0])) / d;
 8005b8c:	f107 030c 	add.w	r3, r7, #12
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3304      	adds	r3, #4
 8005b94:	edd3 7a00 	vldr	s15, [r3]
 8005b98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b9c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8005c28 <IVK+0x4d00>
 8005ba0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ba4:	eeb0 0b47 	vmov.f64	d0, d7
 8005ba8:	f00d ffca 	bl	8013b40 <cos>
 8005bac:	eeb0 7b40 	vmov.f64	d7, d0
 8005bb0:	ee29 9b07 	vmul.f64	d9, d9, d7
 8005bb4:	f107 030c 	add.w	r3, r7, #12
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	edd3 7a00 	vldr	s15, [r3]
 8005bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005bc2:	eeb0 0b47 	vmov.f64	d0, d7
 8005bc6:	f00d ffbb 	bl	8013b40 <cos>
 8005bca:	eeb0 7b40 	vmov.f64	d7, d0
 8005bce:	ee29 7b07 	vmul.f64	d7, d9, d7
					- 190230.12000000002
 8005bd2:	ee38 7b47 	vsub.f64	d7, d8, d7
			* (((((((((((((((123146.4
 8005bd6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005bda:	ee27 5b06 	vmul.f64	d5, d7, d6
							* cos(q[1] + 1.6845) * cos(q[0])) / d;
 8005bde:	ed97 6b6a 	vldr	d6, [r7, #424]	; 0x1a8
 8005be2:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[9] = 4.0
 8005be6:	f107 0310 	add.w	r3, r7, #16
 8005bea:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	dv[14] = 4.0 * cos(q[0])
 8005bee:	f107 030c 	add.w	r3, r7, #12
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	edd3 7a00 	vldr	s15, [r3]
 8005bf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005bfc:	eeb0 0b47 	vmov.f64	d0, d7
 8005c00:	f00d ff9e 	bl	8013b40 <cos>
 8005c04:	eeb0 7b40 	vmov.f64	d7, d0
 8005c08:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005c0c:	ee27 8b06 	vmul.f64	d8, d7, d6
			* (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8005c10:	f107 030c 	add.w	r3, r7, #12
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3304      	adds	r3, #4
 8005c18:	ed93 7a00 	vldr	s14, [r3]
 8005c1c:	f107 030c 	add.w	r3, r7, #12
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	e028      	b.n	8005c78 <IVK+0x4d50>
 8005c26:	bf00      	nop
 8005c28:	45a1cac1 	.word	0x45a1cac1
 8005c2c:	3ffaf3b6 	.word	0x3ffaf3b6
 8005c30:	39581062 	.word	0x39581062
 8005c34:	3fecc8b4 	.word	0x3fecc8b4
 8005c38:	05532618 	.word	0x05532618
 8005c3c:	3fe792a3 	.word	0x3fe792a3
 8005c40:	19ce075f 	.word	0x19ce075f
 8005c44:	3ff85a51 	.word	0x3ff85a51
 8005c48:	0664d3c0 	.word	0x0664d3c0
 8005c4c:	4143dbcd 	.word	0x4143dbcd
 8005c50:	f5c28f5d 	.word	0xf5c28f5d
 8005c54:	410738b0 	.word	0x410738b0
 8005c58:	39581062 	.word	0x39581062
 8005c5c:	3fecc8b4 	.word	0x3fecc8b4
 8005c60:	00000000 	.word	0x00000000
 8005c64:	404e0000 	.word	0x404e0000
 8005c68:	45a1cac1 	.word	0x45a1cac1
 8005c6c:	3ffaf3b6 	.word	0x3ffaf3b6
 8005c70:	b020c49c 	.word	0xb020c49c
 8005c74:	40860472 	.word	0x40860472
 8005c78:	edd3 7a00 	vldr	s15, [r3]
 8005c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c84:	ed1f 6b08 	vldr	d6, [pc, #-32]	; 8005c68 <IVK+0x4d40>
 8005c88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c8c:	ed1f 6b0e 	vldr	d6, [pc, #-56]	; 8005c58 <IVK+0x4d30>
 8005c90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c94:	eeb0 0b47 	vmov.f64	d0, d7
 8005c98:	f00d ff52 	bl	8013b40 <cos>
 8005c9c:	eeb0 7b40 	vmov.f64	d7, d0
 8005ca0:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8005c60 <IVK+0x4d38>
 8005ca4:	ee27 9b06 	vmul.f64	d9, d7, d6
					+ 704.556 * cos(q[1] + 1.6845)) / d3;
 8005ca8:	f107 030c 	add.w	r3, r7, #12
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	edd3 7a00 	vldr	s15, [r3]
 8005cb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005cb8:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 8005c68 <IVK+0x4d40>
 8005cbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cc0:	eeb0 0b47 	vmov.f64	d0, d7
 8005cc4:	f00d ff3c 	bl	8013b40 <cos>
 8005cc8:	eeb0 7b40 	vmov.f64	d7, d0
 8005ccc:	ed1f 6b18 	vldr	d6, [pc, #-96]	; 8005c70 <IVK+0x4d48>
 8005cd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005cd4:	ee39 7b07 	vadd.f64	d7, d9, d7
			* (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995)
 8005cd8:	ee28 5b07 	vmul.f64	d5, d8, d7
					+ 704.556 * cos(q[1] + 1.6845)) / d3;
 8005cdc:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8005ce0:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[14] = 4.0 * cos(q[0])
 8005ce4:	f107 0310 	add.w	r3, r7, #16
 8005ce8:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
	dv[19] = 4.0
			* (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])
 8005cec:	f107 030c 	add.w	r3, r7, #12
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	ed93 7a00 	vldr	s14, [r3]
 8005cf8:	f107 030c 	add.w	r3, r7, #12
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	edd3 7a00 	vldr	s15, [r3]
 8005d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d0c:	ed1f 6b2a 	vldr	d6, [pc, #-168]	; 8005c68 <IVK+0x4d40>
 8005d10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d14:	ed1f 6b30 	vldr	d6, [pc, #-192]	; 8005c58 <IVK+0x4d30>
 8005d18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d1c:	eeb0 0b47 	vmov.f64	d0, d7
 8005d20:	f00d ff0e 	bl	8013b40 <cos>
 8005d24:	eeb0 7b40 	vmov.f64	d7, d0
 8005d28:	ed1f 6b33 	vldr	d6, [pc, #-204]	; 8005c60 <IVK+0x4d38>
 8005d2c:	ee27 8b06 	vmul.f64	d8, d7, d6
 8005d30:	f107 030c 	add.w	r3, r7, #12
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	edd3 7a00 	vldr	s15, [r3]
 8005d3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d3e:	eeb0 0b47 	vmov.f64	d0, d7
 8005d42:	f00d ff51 	bl	8013be8 <sin>
 8005d46:	eeb0 7b40 	vmov.f64	d7, d0
 8005d4a:	ee28 8b07 	vmul.f64	d8, d8, d7
					+ 704.556 * cos(q[1] + 1.6845) * sin(q[0])) / d3;
 8005d4e:	f107 030c 	add.w	r3, r7, #12
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3304      	adds	r3, #4
 8005d56:	edd3 7a00 	vldr	s15, [r3]
 8005d5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d5e:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8005c68 <IVK+0x4d40>
 8005d62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d66:	eeb0 0b47 	vmov.f64	d0, d7
 8005d6a:	f00d fee9 	bl	8013b40 <cos>
 8005d6e:	eeb0 7b40 	vmov.f64	d7, d0
 8005d72:	ed1f 6b41 	vldr	d6, [pc, #-260]	; 8005c70 <IVK+0x4d48>
 8005d76:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005d7a:	f107 030c 	add.w	r3, r7, #12
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	edd3 7a00 	vldr	s15, [r3]
 8005d84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d88:	eeb0 0b47 	vmov.f64	d0, d7
 8005d8c:	f00d ff2c 	bl	8013be8 <sin>
 8005d90:	eeb0 7b40 	vmov.f64	d7, d0
 8005d94:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005d98:	ee38 7b07 	vadd.f64	d7, d8, d7
			* (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])
 8005d9c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005da0:	ee27 5b06 	vmul.f64	d5, d7, d6
					+ 704.556 * cos(q[1] + 1.6845) * sin(q[0])) / d3;
 8005da4:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8005da8:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[19] = 4.0
 8005dac:	f107 0310 	add.w	r3, r7, #16
 8005db0:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	dv[24] = 4.0
			* (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8005db4:	f107 030c 	add.w	r3, r7, #12
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	ed93 7a00 	vldr	s14, [r3]
 8005dc0:	f107 030c 	add.w	r3, r7, #12
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	edd3 7a00 	vldr	s15, [r3]
 8005dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005dd4:	ed1f 6b5c 	vldr	d6, [pc, #-368]	; 8005c68 <IVK+0x4d40>
 8005dd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ddc:	ed1f 6b62 	vldr	d6, [pc, #-392]	; 8005c58 <IVK+0x4d30>
 8005de0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005de4:	eeb0 0b47 	vmov.f64	d0, d7
 8005de8:	f00d fefe 	bl	8013be8 <sin>
 8005dec:	eeb0 7b40 	vmov.f64	d7, d0
 8005df0:	ed1f 6b65 	vldr	d6, [pc, #-404]	; 8005c60 <IVK+0x4d38>
 8005df4:	ee27 8b06 	vmul.f64	d8, d7, d6
					+ 704.556 * sin(q[1] + 1.6845)) / d3;
 8005df8:	f107 030c 	add.w	r3, r7, #12
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	edd3 7a00 	vldr	s15, [r3]
 8005e04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e08:	ed1f 6b69 	vldr	d6, [pc, #-420]	; 8005c68 <IVK+0x4d40>
 8005e0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e10:	eeb0 0b47 	vmov.f64	d0, d7
 8005e14:	f00d fee8 	bl	8013be8 <sin>
 8005e18:	eeb0 7b40 	vmov.f64	d7, d0
 8005e1c:	ed1f 6b6c 	vldr	d6, [pc, #-432]	; 8005c70 <IVK+0x4d48>
 8005e20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e24:	ee38 7b07 	vadd.f64	d7, d8, d7
			* (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995)
 8005e28:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005e2c:	ee27 5b06 	vmul.f64	d5, d7, d6
					+ 704.556 * sin(q[1] + 1.6845)) / d3;
 8005e30:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8005e34:	ee85 7b06 	vdiv.f64	d7, d5, d6
	dv[24] = 4.0
 8005e38:	f107 0310 	add.w	r3, r7, #16
 8005e3c:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
	for (i = 0; i < 5; i++) {
 8005e40:	2300      	movs	r3, #0
 8005e42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005e46:	e045      	b.n	8005ed4 <IVK+0x4fac>
		d = 0.0;
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
		for (i1 = 0; i1 < 5; i1++) {
 8005e54:	2300      	movs	r3, #0
 8005e56:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005e5a:	e025      	b.n	8005ea8 <IVK+0x4f80>
			d += dv[i + 5 * i1] * x_dot[i1];
 8005e5c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	441a      	add	r2, r3
 8005e66:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f107 0210 	add.w	r2, r7, #16
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4413      	add	r3, r2
 8005e74:	ed93 6b00 	vldr	d6, [r3]
 8005e78:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	f107 0208 	add.w	r2, r7, #8
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	4413      	add	r3, r2
 8005e86:	edd3 7a00 	vldr	s15, [r3]
 8005e8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005e92:	ed97 6b6a 	vldr	d6, [r7, #424]	; 0x1a8
 8005e96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e9a:	ed87 7b6a 	vstr	d7, [r7, #424]	; 0x1a8
		for (i1 = 0; i1 < 5; i1++) {
 8005e9e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005ea8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	ddd5      	ble.n	8005e5c <IVK+0x4f34>
		}
		m_dot_temp[i] = d;
 8005eb0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8005eb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005eb8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3bd4      	subs	r3, #212	; 0xd4
 8005ec6:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 5; i++) {
 8005eca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ece:	3301      	adds	r3, #1
 8005ed0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005ed4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	ddb5      	ble.n	8005e48 <IVK+0x4f20>
	}
	memcpy(m_dot, m_dot_temp, 20);
 8005edc:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8005ee0:	1d3b      	adds	r3, r7, #4
 8005ee2:	2214      	movs	r2, #20
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	f00b f9e1 	bl	80112ac <memcpy>
}
 8005eea:	bf00      	nop
 8005eec:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	ecbd 8b04 	vpop	{d8-d9}
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b095      	sub	sp, #84	; 0x54
 8005efc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005efe:	f002 fa95 	bl	800842c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f02:	f000 fba7 	bl	8006654 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005f06:	f000 fc1f 	bl	8006748 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f0a:	f7fa ff31 	bl	8000d70 <MX_GPIO_Init>
  MX_ADC1_Init();
 8005f0e:	f7fa fd9d 	bl	8000a4c <MX_ADC1_Init>
  MX_ADC3_Init();
 8005f12:	f7fa fe13 	bl	8000b3c <MX_ADC3_Init>
  MX_SPI3_Init();
 8005f16:	f000 fd9d 	bl	8006a54 <MX_SPI3_Init>
  MX_TIM1_Init();
 8005f1a:	f000 fff5 	bl	8006f08 <MX_TIM1_Init>
  MX_TIM2_Init();
 8005f1e:	f001 f8a1 	bl	8007064 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005f22:	f001 f917 	bl	8007154 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005f26:	f001 f98d 	bl	8007244 <MX_TIM4_Init>
  MX_TIM12_Init();
 8005f2a:	f001 fa03 	bl	8007334 <MX_TIM12_Init>
  MX_TIM13_Init();
 8005f2e:	f001 fa65 	bl	80073fc <MX_TIM13_Init>
  MX_TIM14_Init();
 8005f32:	f001 fa87 	bl	8007444 <MX_TIM14_Init>
  MX_TIM15_Init();
 8005f36:	f001 fad3 	bl	80074e0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8005f3a:	f001 fb75 	bl	8007628 <MX_TIM16_Init>
  MX_TIM17_Init();
 8005f3e:	f001 fbed 	bl	800771c <MX_TIM17_Init>
  MX_UART4_Init();
 8005f42:	f001 ffc7 	bl	8007ed4 <MX_UART4_Init>
  MX_UART5_Init();
 8005f46:	f002 f811 	bl	8007f6c <MX_UART5_Init>
  MX_USART2_UART_Init();
 8005f4a:	f002 f85b 	bl	8008004 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005f4e:	f002 f8a5 	bl	800809c <MX_USART3_UART_Init>
  MX_TIM23_Init();
 8005f52:	f001 fc5f 	bl	8007814 <MX_TIM23_Init>
  MX_CRC_Init();
 8005f56:	f7fa febd 	bl	8000cd4 <MX_CRC_Init>
  MX_TIM24_Init();
 8005f5a:	f001 fcab 	bl	80078b4 <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
	uint32_t timestamp1 = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t timestamp2 = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t j_num = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

//	ARMsProtocol_FUNC_Init();
//	HAL_TIM_Base_Start_IT(&htim24);
	int32_t encoder_unwrap_value[5] = { 0 };
 8005f6c:	f107 0318 	add.w	r3, r7, #24
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	609a      	str	r2, [r3, #8]
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	611a      	str	r2, [r3, #16]
//	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 1);
//	servo_initialise(&servo_motor, &htim17, TIM_CHANNEL_1);
	/*
	 * Encoder Initialise
	 */
	AMT21_initialise(&encoders[0], &huart2, 0x2C, USART2_DE_GPIO_Port,
 8005f7c:	2310      	movs	r3, #16
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	4bb7      	ldr	r3, [pc, #732]	; (8006260 <main+0x368>)
 8005f82:	222c      	movs	r2, #44	; 0x2c
 8005f84:	49b7      	ldr	r1, [pc, #732]	; (8006264 <main+0x36c>)
 8005f86:	48b8      	ldr	r0, [pc, #736]	; (8006268 <main+0x370>)
 8005f88:	f7fa fb96 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[1], &huart2, 0x70, USART2_DE_GPIO_Port,
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	4bb3      	ldr	r3, [pc, #716]	; (8006260 <main+0x368>)
 8005f92:	2270      	movs	r2, #112	; 0x70
 8005f94:	49b3      	ldr	r1, [pc, #716]	; (8006264 <main+0x36c>)
 8005f96:	48b5      	ldr	r0, [pc, #724]	; (800626c <main+0x374>)
 8005f98:	f7fa fb8e 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[2], &huart2, 0x54, USART2_DE_GPIO_Port,
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	4baf      	ldr	r3, [pc, #700]	; (8006260 <main+0x368>)
 8005fa2:	2254      	movs	r2, #84	; 0x54
 8005fa4:	49af      	ldr	r1, [pc, #700]	; (8006264 <main+0x36c>)
 8005fa6:	48b2      	ldr	r0, [pc, #712]	; (8006270 <main+0x378>)
 8005fa8:	f7fa fb86 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[3], &huart2, 0xE8, USART2_DE_GPIO_Port,
 8005fac:	2310      	movs	r3, #16
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	4bab      	ldr	r3, [pc, #684]	; (8006260 <main+0x368>)
 8005fb2:	22e8      	movs	r2, #232	; 0xe8
 8005fb4:	49ab      	ldr	r1, [pc, #684]	; (8006264 <main+0x36c>)
 8005fb6:	48af      	ldr	r0, [pc, #700]	; (8006274 <main+0x37c>)
 8005fb8:	f7fa fb7e 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[4], &huart2, 0xB4, USART2_DE_GPIO_Port,
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	4ba7      	ldr	r3, [pc, #668]	; (8006260 <main+0x368>)
 8005fc2:	22b4      	movs	r2, #180	; 0xb4
 8005fc4:	49a7      	ldr	r1, [pc, #668]	; (8006264 <main+0x36c>)
 8005fc6:	48ac      	ldr	r0, [pc, #688]	; (8006278 <main+0x380>)
 8005fc8:	f7fa fb76 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	/*
	 * Stepper Initialise
	 */
	stepper_initialise(&steppers[0], &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port,
 8005fcc:	2301      	movs	r3, #1
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	4ba9      	ldr	r3, [pc, #676]	; (800627c <main+0x384>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	49a9      	ldr	r1, [pc, #676]	; (8006280 <main+0x388>)
 8005fda:	48aa      	ldr	r0, [pc, #680]	; (8006284 <main+0x38c>)
 8005fdc:	f000 fbfa 	bl	80067d4 <stepper_initialise>
	DIR1_Pin, 1);//swap 0 -> 1
	stepper_initialise(&steppers[1], &htim2, TIM_CHANNEL_1, DIR2_GPIO_Port,
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	9301      	str	r3, [sp, #4]
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	4ba4      	ldr	r3, [pc, #656]	; (800627c <main+0x384>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	49a6      	ldr	r1, [pc, #664]	; (8006288 <main+0x390>)
 8005fee:	48a7      	ldr	r0, [pc, #668]	; (800628c <main+0x394>)
 8005ff0:	f000 fbf0 	bl	80067d4 <stepper_initialise>
	DIR2_Pin, 1);
	stepper_initialise(&steppers[2], &htim3, TIM_CHANNEL_1, DIR3_GPIO_Port,
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	4ba4      	ldr	r3, [pc, #656]	; (8006290 <main+0x398>)
 8006000:	2200      	movs	r2, #0
 8006002:	49a4      	ldr	r1, [pc, #656]	; (8006294 <main+0x39c>)
 8006004:	48a4      	ldr	r0, [pc, #656]	; (8006298 <main+0x3a0>)
 8006006:	f000 fbe5 	bl	80067d4 <stepper_initialise>
	DIR3_Pin, 0);//swap 1 -> 0
	stepper_initialise(&steppers[3], &htim4, TIM_CHANNEL_1, DIR4_GPIO_Port,
 800600a:	2300      	movs	r3, #0
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	4b9e      	ldr	r3, [pc, #632]	; (8006290 <main+0x398>)
 8006016:	2200      	movs	r2, #0
 8006018:	49a0      	ldr	r1, [pc, #640]	; (800629c <main+0x3a4>)
 800601a:	48a1      	ldr	r0, [pc, #644]	; (80062a0 <main+0x3a8>)
 800601c:	f000 fbda 	bl	80067d4 <stepper_initialise>
	DIR4_Pin, 0);
	stepper_initialise(&steppers[4], &htim15, TIM_CHANNEL_1, DIR5_GPIO_Port,
 8006020:	2300      	movs	r3, #0
 8006022:	9301      	str	r3, [sp, #4]
 8006024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	4b99      	ldr	r3, [pc, #612]	; (8006290 <main+0x398>)
 800602c:	2200      	movs	r2, #0
 800602e:	499d      	ldr	r1, [pc, #628]	; (80062a4 <main+0x3ac>)
 8006030:	489d      	ldr	r0, [pc, #628]	; (80062a8 <main+0x3b0>)
 8006032:	f000 fbcf 	bl	80067d4 <stepper_initialise>
	DIR5_Pin, 0);
	/*
	 * Kalman Filter Initialise
	 */
	KalmanFilter_initialise(&kalman_filter[0], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 8006036:	eddf 3a9d 	vldr	s7, [pc, #628]	; 80062ac <main+0x3b4>
 800603a:	ed9f 3a9d 	vldr	s6, [pc, #628]	; 80062b0 <main+0x3b8>
 800603e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8006042:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 80062b4 <main+0x3bc>
 8006046:	eddf 1a9b 	vldr	s3, [pc, #620]	; 80062b4 <main+0x3bc>
 800604a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800604e:	eddf 0a99 	vldr	s1, [pc, #612]	; 80062b4 <main+0x3bc>
 8006052:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80062b4 <main+0x3bc>
 8006056:	4898      	ldr	r0, [pc, #608]	; (80062b8 <main+0x3c0>)
 8006058:	f7fa fc28 	bl	80008ac <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[1], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 800605c:	eddf 3a93 	vldr	s7, [pc, #588]	; 80062ac <main+0x3b4>
 8006060:	ed9f 3a93 	vldr	s6, [pc, #588]	; 80062b0 <main+0x3b8>
 8006064:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8006068:	ed9f 2a92 	vldr	s4, [pc, #584]	; 80062b4 <main+0x3bc>
 800606c:	eddf 1a91 	vldr	s3, [pc, #580]	; 80062b4 <main+0x3bc>
 8006070:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006074:	eddf 0a8f 	vldr	s1, [pc, #572]	; 80062b4 <main+0x3bc>
 8006078:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80062b4 <main+0x3bc>
 800607c:	488f      	ldr	r0, [pc, #572]	; (80062bc <main+0x3c4>)
 800607e:	f7fa fc15 	bl	80008ac <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[2], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 8006082:	eddf 3a8a 	vldr	s7, [pc, #552]	; 80062ac <main+0x3b4>
 8006086:	ed9f 3a8a 	vldr	s6, [pc, #552]	; 80062b0 <main+0x3b8>
 800608a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800608e:	ed9f 2a89 	vldr	s4, [pc, #548]	; 80062b4 <main+0x3bc>
 8006092:	eddf 1a88 	vldr	s3, [pc, #544]	; 80062b4 <main+0x3bc>
 8006096:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800609a:	eddf 0a86 	vldr	s1, [pc, #536]	; 80062b4 <main+0x3bc>
 800609e:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80062b4 <main+0x3bc>
 80060a2:	4887      	ldr	r0, [pc, #540]	; (80062c0 <main+0x3c8>)
 80060a4:	f7fa fc02 	bl	80008ac <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[3], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 80060a8:	eddf 3a80 	vldr	s7, [pc, #512]	; 80062ac <main+0x3b4>
 80060ac:	ed9f 3a80 	vldr	s6, [pc, #512]	; 80062b0 <main+0x3b8>
 80060b0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80060b4:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 80062b4 <main+0x3bc>
 80060b8:	eddf 1a7e 	vldr	s3, [pc, #504]	; 80062b4 <main+0x3bc>
 80060bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80060c0:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80062b4 <main+0x3bc>
 80060c4:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80062b4 <main+0x3bc>
 80060c8:	487e      	ldr	r0, [pc, #504]	; (80062c4 <main+0x3cc>)
 80060ca:	f7fa fbef 	bl	80008ac <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[4], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 80060ce:	eddf 3a77 	vldr	s7, [pc, #476]	; 80062ac <main+0x3b4>
 80060d2:	ed9f 3a77 	vldr	s6, [pc, #476]	; 80062b0 <main+0x3b8>
 80060d6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80060da:	ed9f 2a76 	vldr	s4, [pc, #472]	; 80062b4 <main+0x3bc>
 80060de:	eddf 1a75 	vldr	s3, [pc, #468]	; 80062b4 <main+0x3bc>
 80060e2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80060e6:	eddf 0a73 	vldr	s1, [pc, #460]	; 80062b4 <main+0x3bc>
 80060ea:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80062b4 <main+0x3bc>
 80060ee:	4876      	ldr	r0, [pc, #472]	; (80062c8 <main+0x3d0>)
 80060f0:	f7fa fbdc 	bl	80008ac <KalmanFilter_initialise>
	/*
	 * Position Pid Initialise
	 */
	PIDController_initialise(&position_pid_controller[0], 20000, 0, 0);
 80060f4:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 80062b4 <main+0x3bc>
 80060f8:	eddf 0a6e 	vldr	s1, [pc, #440]	; 80062b4 <main+0x3bc>
 80060fc:	ed9f 0a73 	vldr	s0, [pc, #460]	; 80062cc <main+0x3d4>
 8006100:	4873      	ldr	r0, [pc, #460]	; (80062d0 <main+0x3d8>)
 8006102:	f7fa fc05 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[1], 800000, 0, 0);
 8006106:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 80062b4 <main+0x3bc>
 800610a:	eddf 0a6a 	vldr	s1, [pc, #424]	; 80062b4 <main+0x3bc>
 800610e:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80062d4 <main+0x3dc>
 8006112:	4871      	ldr	r0, [pc, #452]	; (80062d8 <main+0x3e0>)
 8006114:	f7fa fbfc 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[2], 800000, 0, 0);
 8006118:	ed9f 1a66 	vldr	s2, [pc, #408]	; 80062b4 <main+0x3bc>
 800611c:	eddf 0a65 	vldr	s1, [pc, #404]	; 80062b4 <main+0x3bc>
 8006120:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 80062d4 <main+0x3dc>
 8006124:	486d      	ldr	r0, [pc, #436]	; (80062dc <main+0x3e4>)
 8006126:	f7fa fbf3 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[3], 20000, 0, 0);
 800612a:	ed9f 1a62 	vldr	s2, [pc, #392]	; 80062b4 <main+0x3bc>
 800612e:	eddf 0a61 	vldr	s1, [pc, #388]	; 80062b4 <main+0x3bc>
 8006132:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80062cc <main+0x3d4>
 8006136:	486a      	ldr	r0, [pc, #424]	; (80062e0 <main+0x3e8>)
 8006138:	f7fa fbea 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[4], 20000, 0, 0);
 800613c:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 80062b4 <main+0x3bc>
 8006140:	eddf 0a5c 	vldr	s1, [pc, #368]	; 80062b4 <main+0x3bc>
 8006144:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80062cc <main+0x3d4>
 8006148:	4866      	ldr	r0, [pc, #408]	; (80062e4 <main+0x3ec>)
 800614a:	f7fa fbe1 	bl	8000910 <PIDController_initialise>
	/*
	 * Velocity Pid Initialise
	 */
	PIDController_initialise(&velocity_pid_controller[0], 0, 0, 0);
 800614e:	ed9f 1a59 	vldr	s2, [pc, #356]	; 80062b4 <main+0x3bc>
 8006152:	eddf 0a58 	vldr	s1, [pc, #352]	; 80062b4 <main+0x3bc>
 8006156:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80062b4 <main+0x3bc>
 800615a:	4863      	ldr	r0, [pc, #396]	; (80062e8 <main+0x3f0>)
 800615c:	f7fa fbd8 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[1], 0, 0, 0);
 8006160:	ed9f 1a54 	vldr	s2, [pc, #336]	; 80062b4 <main+0x3bc>
 8006164:	eddf 0a53 	vldr	s1, [pc, #332]	; 80062b4 <main+0x3bc>
 8006168:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80062b4 <main+0x3bc>
 800616c:	485f      	ldr	r0, [pc, #380]	; (80062ec <main+0x3f4>)
 800616e:	f7fa fbcf 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[2], 0, 0, 0);
 8006172:	ed9f 1a50 	vldr	s2, [pc, #320]	; 80062b4 <main+0x3bc>
 8006176:	eddf 0a4f 	vldr	s1, [pc, #316]	; 80062b4 <main+0x3bc>
 800617a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80062b4 <main+0x3bc>
 800617e:	485c      	ldr	r0, [pc, #368]	; (80062f0 <main+0x3f8>)
 8006180:	f7fa fbc6 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[3], 0, 0, 0);
 8006184:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80062b4 <main+0x3bc>
 8006188:	eddf 0a4a 	vldr	s1, [pc, #296]	; 80062b4 <main+0x3bc>
 800618c:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80062b4 <main+0x3bc>
 8006190:	4858      	ldr	r0, [pc, #352]	; (80062f4 <main+0x3fc>)
 8006192:	f7fa fbbd 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[4], 0, 0, 0);
 8006196:	ed9f 1a47 	vldr	s2, [pc, #284]	; 80062b4 <main+0x3bc>
 800619a:	eddf 0a46 	vldr	s1, [pc, #280]	; 80062b4 <main+0x3bc>
 800619e:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80062b4 <main+0x3bc>
 80061a2:	4855      	ldr	r0, [pc, #340]	; (80062f8 <main+0x400>)
 80061a4:	f7fa fbb4 	bl	8000910 <PIDController_initialise>
	/*
	 * for Cartesian Jog
	 */
	float delta_q[5] = {0};
 80061a8:	1d3b      	adds	r3, r7, #4
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	605a      	str	r2, [r3, #4]
 80061b0:	609a      	str	r2, [r3, #8]
 80061b2:	60da      	str	r2, [r3, #12]
 80061b4:	611a      	str	r2, [r3, #16]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GetTick() - timestamp1 >= 500) {
 80061b6:	f002 f9bf 	bl	8008538 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80061c4:	f0c0 80c1 	bcc.w	800634a <main+0x452>
			if ((delta_khe[0] != 0)|
 80061c8:	4b4c      	ldr	r3, [pc, #304]	; (80062fc <main+0x404>)
 80061ca:	edd3 7a00 	vldr	s15, [r3]
 80061ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80061d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2da      	uxtb	r2, r3
			(delta_khe[1] != 0)|
 80061de:	4b47      	ldr	r3, [pc, #284]	; (80062fc <main+0x404>)
 80061e0:	edd3 7a01 	vldr	s15, [r3, #4]
			if ((delta_khe[0] != 0)|
 80061e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	bf14      	ite	ne
 80061ee:	2301      	movne	r3, #1
 80061f0:	2300      	moveq	r3, #0
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	4313      	orrs	r3, r2
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	461a      	mov	r2, r3
			(delta_khe[2] != 0)|
 80061fa:	4b40      	ldr	r3, [pc, #256]	; (80062fc <main+0x404>)
 80061fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8006200:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
			(delta_khe[1] != 0)|
 8006210:	4313      	orrs	r3, r2
			(delta_khe[3] != 0)|
 8006212:	4a3a      	ldr	r2, [pc, #232]	; (80062fc <main+0x404>)
 8006214:	edd2 7a03 	vldr	s15, [r2, #12]
 8006218:	eef5 7a40 	vcmp.f32	s15, #0.0
 800621c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006220:	bf14      	ite	ne
 8006222:	2201      	movne	r2, #1
 8006224:	2200      	moveq	r2, #0
 8006226:	b2d2      	uxtb	r2, r2
			(delta_khe[2] != 0)|
 8006228:	4313      	orrs	r3, r2
			(delta_khe[4] != 0)
 800622a:	4a34      	ldr	r2, [pc, #208]	; (80062fc <main+0x404>)
 800622c:	edd2 7a04 	vldr	s15, [r2, #16]
 8006230:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006238:	bf14      	ite	ne
 800623a:	2201      	movne	r2, #1
 800623c:	2200      	moveq	r2, #0
 800623e:	b2d2      	uxtb	r2, r2
			(delta_khe[3] != 0)|
 8006240:	4313      	orrs	r3, r2
			if ((delta_khe[0] != 0)|
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8081 	beq.w	800634a <main+0x452>
			) {
				timestamp1 = HAL_GetTick();
 8006248:	f002 f976 	bl	8008538 <HAL_GetTick>
 800624c:	6478      	str	r0, [r7, #68]	; 0x44
				IVK(motor_config, delta_khe, delta_q);
 800624e:	1d3b      	adds	r3, r7, #4
 8006250:	461a      	mov	r2, r3
 8006252:	492a      	ldr	r1, [pc, #168]	; (80062fc <main+0x404>)
 8006254:	482a      	ldr	r0, [pc, #168]	; (8006300 <main+0x408>)
 8006256:	f7fa fe67 	bl	8000f28 <IVK>
				for (int i = 0; i < 5; i++) {
 800625a:	2300      	movs	r3, #0
 800625c:	63bb      	str	r3, [r7, #56]	; 0x38
 800625e:	e071      	b.n	8006344 <main+0x44c>
 8006260:	58020c00 	.word	0x58020c00
 8006264:	24000db0 	.word	0x24000db0
 8006268:	240004dc 	.word	0x240004dc
 800626c:	240004f0 	.word	0x240004f0
 8006270:	24000504 	.word	0x24000504
 8006274:	24000518 	.word	0x24000518
 8006278:	2400052c 	.word	0x2400052c
 800627c:	58021000 	.word	0x58021000
 8006280:	24000a38 	.word	0x24000a38
 8006284:	24000458 	.word	0x24000458
 8006288:	24000a84 	.word	0x24000a84
 800628c:	24000470 	.word	0x24000470
 8006290:	58020800 	.word	0x58020800
 8006294:	240009a0 	.word	0x240009a0
 8006298:	24000488 	.word	0x24000488
 800629c:	240008bc 	.word	0x240008bc
 80062a0:	240004a0 	.word	0x240004a0
 80062a4:	24000908 	.word	0x24000908
 80062a8:	240004b8 	.word	0x240004b8
 80062ac:	3aa3d70a 	.word	0x3aa3d70a
 80062b0:	44fa0000 	.word	0x44fa0000
 80062b4:	00000000 	.word	0x00000000
 80062b8:	24000644 	.word	0x24000644
 80062bc:	24000664 	.word	0x24000664
 80062c0:	24000684 	.word	0x24000684
 80062c4:	240006a4 	.word	0x240006a4
 80062c8:	240006c4 	.word	0x240006c4
 80062cc:	469c4000 	.word	0x469c4000
 80062d0:	240006e4 	.word	0x240006e4
 80062d4:	49435000 	.word	0x49435000
 80062d8:	24000718 	.word	0x24000718
 80062dc:	2400074c 	.word	0x2400074c
 80062e0:	24000780 	.word	0x24000780
 80062e4:	240007b4 	.word	0x240007b4
 80062e8:	24000540 	.word	0x24000540
 80062ec:	24000574 	.word	0x24000574
 80062f0:	240005a8 	.word	0x240005a8
 80062f4:	240005dc 	.word	0x240005dc
 80062f8:	24000610 	.word	0x24000610
 80062fc:	24000238 	.word	0x24000238
 8006300:	24000224 	.word	0x24000224
					desired_position[i] += delta_q[i];
 8006304:	4acc      	ldr	r2, [pc, #816]	; (8006638 <main+0x740>)
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	ed93 7a00 	vldr	s14, [r3]
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006318:	4413      	add	r3, r2
 800631a:	3b44      	subs	r3, #68	; 0x44
 800631c:	edd3 7a00 	vldr	s15, [r3]
 8006320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006324:	4ac4      	ldr	r2, [pc, #784]	; (8006638 <main+0x740>)
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	edc3 7a00 	vstr	s15, [r3]
					delta_khe[i] = 0;
 8006330:	4ac2      	ldr	r2, [pc, #776]	; (800663c <main+0x744>)
 8006332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 5; i++) {
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	3301      	adds	r3, #1
 8006342:	63bb      	str	r3, [r7, #56]	; 0x38
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	2b04      	cmp	r3, #4
 8006348:	dddc      	ble.n	8006304 <main+0x40c>
				}
//			ARMsProtocol_FUNC_Interface();
			}
		}
		if (HAL_GetTick() - timestamp2 >= 1) {
 800634a:	f002 f8f5 	bl	8008538 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006352:	4293      	cmp	r3, r2
 8006354:	f43f af2f 	beq.w	80061b6 <main+0x2be>
			timestamp2 = HAL_GetTick();
 8006358:	f002 f8ee 	bl	8008538 <HAL_GetTick>
 800635c:	6438      	str	r0, [r7, #64]	; 0x40
			HAL_StatusTypeDef rep = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			encoder_unwrap_value[j_num] = 0;
 8006364:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800636e:	4413      	add	r3, r2
 8006370:	2200      	movs	r2, #0
 8006372:	f843 2c30 	str.w	r2, [r3, #-48]
			while (1) {
				AMT21_read_value(&(encoders[j_num]));
 8006376:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4aaf      	ldr	r2, [pc, #700]	; (8006640 <main+0x748>)
 8006384:	4413      	add	r3, r2
 8006386:	4618      	mov	r0, r3
 8006388:	f7fa f9bf 	bl	800070a <AMT21_read_value>
				rep = AMT21_check_value(&(encoders[j_num]));
 800638c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4aa9      	ldr	r2, [pc, #676]	; (8006640 <main+0x748>)
 800639a:	4413      	add	r3, r2
 800639c:	4618      	mov	r0, r3
 800639e:	f7fa f9f3 	bl	8000788 <AMT21_check_value>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				if (rep == HAL_OK) {
 80063a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e2      	bne.n	8006376 <main+0x47e>
					encoder_unwrap_value[j_num] = AMT21_unwrap(
							(int32_t) encoders[j_num].position,
 80063b0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80063b4:	49a2      	ldr	r1, [pc, #648]	; (8006640 <main+0x748>)
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	330e      	adds	r3, #14
 80063c2:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 80063c4:	4618      	mov	r0, r3
							(int32_t) encoders[j_num].prev_position);
 80063c6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80063ca:	499d      	ldr	r1, [pc, #628]	; (8006640 <main+0x748>)
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	3310      	adds	r3, #16
 80063d8:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 80063da:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 80063de:	4619      	mov	r1, r3
 80063e0:	f7fa fa34 	bl	800084c <AMT21_unwrap>
 80063e4:	4602      	mov	r2, r0
 80063e6:	00a3      	lsls	r3, r4, #2
 80063e8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80063ec:	440b      	add	r3, r1
 80063ee:	f843 2c30 	str.w	r2, [r3, #-48]
					encoders[j_num].prev_position = encoders[j_num].position;
 80063f2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80063f6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80063fa:	4891      	ldr	r0, [pc, #580]	; (8006640 <main+0x748>)
 80063fc:	460b      	mov	r3, r1
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4403      	add	r3, r0
 8006406:	330e      	adds	r3, #14
 8006408:	8818      	ldrh	r0, [r3, #0]
 800640a:	498d      	ldr	r1, [pc, #564]	; (8006640 <main+0x748>)
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	3310      	adds	r3, #16
 8006418:	4602      	mov	r2, r0
 800641a:	801a      	strh	r2, [r3, #0]
					break;
 800641c:	bf00      	nop
				}
			}
			if ((j_num == 0)|(j_num == 2)){
 800641e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006422:	2b00      	cmp	r3, #0
 8006424:	bf0c      	ite	eq
 8006426:	2301      	moveq	r3, #1
 8006428:	2300      	movne	r3, #0
 800642a:	b2da      	uxtb	r2, r3
 800642c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006430:	2b02      	cmp	r3, #2
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	4313      	orrs	r3, r2
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d010      	beq.n	8006464 <main+0x56c>
				encoder_unwrap_value[j_num] = encoder_unwrap_value[j_num] * -1;
 8006442:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800644c:	4413      	add	r3, r2
 800644e:	f853 2c30 	ldr.w	r2, [r3, #-48]
 8006452:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006456:	4252      	negs	r2, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800645e:	440b      	add	r3, r1
 8006460:	f843 2c30 	str.w	r2, [r3, #-48]
			}
			encoder_config[j_num] = encoder_config[j_num]
 8006464:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006468:	4a76      	ldr	r2, [pc, #472]	; (8006644 <main+0x74c>)
 800646a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
					+ encoder_unwrap_value[j_num];
 800646e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006478:	4413      	add	r3, r2
 800647a:	f853 2c30 	ldr.w	r2, [r3, #-48]
			encoder_config[j_num] = encoder_config[j_num]
 800647e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
					+ encoder_unwrap_value[j_num];
 8006482:	440a      	add	r2, r1
			encoder_config[j_num] = encoder_config[j_num]
 8006484:	496f      	ldr	r1, [pc, #444]	; (8006644 <main+0x74c>)
 8006486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//			KalmanFilter_Update(&kalman_filter[j_num], encoder_config[j_num]);
			float q4 = (2*M_PI * encoder_config[3])/16384.0f;
 800648a:	4b6e      	ldr	r3, [pc, #440]	; (8006644 <main+0x74c>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006496:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8006618 <main+0x720>
 800649a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800649e:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8006620 <main+0x728>
 80064a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80064a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80064aa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			float sigma = 2/(55.0 * cos(q4));
 80064ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80064b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80064b6:	eeb0 0b47 	vmov.f64	d0, d7
 80064ba:	f00d fb41 	bl	8013b40 <cos>
 80064be:	eeb0 7b40 	vmov.f64	d7, d0
 80064c2:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8006628 <main+0x730>
 80064c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80064ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80064ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80064d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80064d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			motor_config[0] = ((2*M_PI * encoder_config[0])/16384.0f) * (0.36f);
 80064da:	4b5a      	ldr	r3, [pc, #360]	; (8006644 <main+0x74c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064e6:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8006618 <main+0x720>
 80064ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80064ee:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8006620 <main+0x728>
 80064f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80064f6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8006630 <main+0x738>
 80064fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80064fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006502:	4b51      	ldr	r3, [pc, #324]	; (8006648 <main+0x750>)
 8006504:	edc3 7a00 	vstr	s15, [r3]
			motor_config[1] = ((2*M_PI * encoder_config[1])/16384.0f)/27.0;
 8006508:	4b4e      	ldr	r3, [pc, #312]	; (8006644 <main+0x74c>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006514:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8006618 <main+0x720>
 8006518:	ee27 7b06 	vmul.f64	d7, d7, d6
 800651c:	ed9f 5b40 	vldr	d5, [pc, #256]	; 8006620 <main+0x728>
 8006520:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8006524:	eeb3 5b0b 	vmov.f64	d5, #59	; 0x41d80000  27.0
 8006528:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800652c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006530:	4b45      	ldr	r3, [pc, #276]	; (8006648 <main+0x750>)
 8006532:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_config[2] = sigma * ((2*M_PI * encoder_config[2])/16384.0f);
 8006536:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800653a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800653e:	4b41      	ldr	r3, [pc, #260]	; (8006644 <main+0x74c>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800654a:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8006618 <main+0x720>
 800654e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006552:	ed9f 4b33 	vldr	d4, [pc, #204]	; 8006620 <main+0x728>
 8006556:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800655a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800655e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006562:	4b39      	ldr	r3, [pc, #228]	; (8006648 <main+0x750>)
 8006564:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_config[3] = q4;
 8006568:	4a37      	ldr	r2, [pc, #220]	; (8006648 <main+0x750>)
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	60d3      	str	r3, [r2, #12]
			motor_config[4] = (2*M_PI * encoder_config[4])/16384.0f;
 800656e:	4b35      	ldr	r3, [pc, #212]	; (8006644 <main+0x74c>)
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800657a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8006618 <main+0x720>
 800657e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006582:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8006620 <main+0x728>
 8006586:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800658a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800658e:	4b2e      	ldr	r3, [pc, #184]	; (8006648 <main+0x750>)
 8006590:	edc3 7a04 	vstr	s15, [r3, #16]
			/*
			 * Position Controller
			 */
			PIDController_update(&position_pid_controller[j_num],
 8006594:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006598:	2234      	movs	r2, #52	; 0x34
 800659a:	fb02 f303 	mul.w	r3, r2, r3
 800659e:	4a2b      	ldr	r2, [pc, #172]	; (800664c <main+0x754>)
 80065a0:	441a      	add	r2, r3
 80065a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065a6:	4924      	ldr	r1, [pc, #144]	; (8006638 <main+0x740>)
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	edd3 7a00 	vldr	s15, [r3]
 80065b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065b4:	4924      	ldr	r1, [pc, #144]	; (8006648 <main+0x750>)
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	440b      	add	r3, r1
 80065ba:	ed93 7a00 	vldr	s14, [r3]
 80065be:	eef0 0a47 	vmov.f32	s1, s14
 80065c2:	eeb0 0a67 	vmov.f32	s0, s15
 80065c6:	4610      	mov	r0, r2
 80065c8:	f7fa f9c0 	bl	800094c <PIDController_update>
					desired_position[j_num], motor_config[j_num]);
			stepper_set_speed(&steppers[j_num],
 80065cc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80065d0:	4613      	mov	r3, r2
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	4413      	add	r3, r2
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	4a1d      	ldr	r2, [pc, #116]	; (8006650 <main+0x758>)
 80065da:	441a      	add	r2, r3
 80065dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065e0:	491a      	ldr	r1, [pc, #104]	; (800664c <main+0x754>)
 80065e2:	2034      	movs	r0, #52	; 0x34
 80065e4:	fb00 f303 	mul.w	r3, r0, r3
 80065e8:	440b      	add	r3, r1
 80065ea:	3330      	adds	r3, #48	; 0x30
 80065ec:	edd3 7a00 	vldr	s15, [r3]
 80065f0:	eeb0 0a67 	vmov.f32	s0, s15
 80065f4:	4610      	mov	r0, r2
 80065f6:	f000 f9a5 	bl	8006944 <stepper_set_speed>
					position_pid_controller[j_num].out);
			j_num++;
 80065fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065fe:	3301      	adds	r3, #1
 8006600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (j_num == 5) {
 8006604:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006608:	2b05      	cmp	r3, #5
 800660a:	f47f add4 	bne.w	80061b6 <main+0x2be>
				j_num = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (HAL_GetTick() - timestamp1 >= 500) {
 8006614:	e5cf      	b.n	80061b6 <main+0x2be>
 8006616:	bf00      	nop
 8006618:	54442d18 	.word	0x54442d18
 800661c:	401921fb 	.word	0x401921fb
 8006620:	00000000 	.word	0x00000000
 8006624:	40d00000 	.word	0x40d00000
 8006628:	00000000 	.word	0x00000000
 800662c:	404b8000 	.word	0x404b8000
 8006630:	80000000 	.word	0x80000000
 8006634:	3fd70a3d 	.word	0x3fd70a3d
 8006638:	240001fc 	.word	0x240001fc
 800663c:	24000238 	.word	0x24000238
 8006640:	240004dc 	.word	0x240004dc
 8006644:	24000210 	.word	0x24000210
 8006648:	24000224 	.word	0x24000224
 800664c:	240006e4 	.word	0x240006e4
 8006650:	24000458 	.word	0x24000458

08006654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b09c      	sub	sp, #112	; 0x70
 8006658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800665a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800665e:	224c      	movs	r2, #76	; 0x4c
 8006660:	2100      	movs	r1, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f00a fe30 	bl	80112c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006668:	1d3b      	adds	r3, r7, #4
 800666a:	2220      	movs	r2, #32
 800666c:	2100      	movs	r1, #0
 800666e:	4618      	mov	r0, r3
 8006670:	f00a fe2a 	bl	80112c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006674:	2002      	movs	r0, #2
 8006676:	f004 fbf7 	bl	800ae68 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800667a:	2300      	movs	r3, #0
 800667c:	603b      	str	r3, [r7, #0]
 800667e:	4b30      	ldr	r3, [pc, #192]	; (8006740 <SystemClock_Config+0xec>)
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	4a2f      	ldr	r2, [pc, #188]	; (8006740 <SystemClock_Config+0xec>)
 8006684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006688:	6193      	str	r3, [r2, #24]
 800668a:	4b2d      	ldr	r3, [pc, #180]	; (8006740 <SystemClock_Config+0xec>)
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006696:	bf00      	nop
 8006698:	4b29      	ldr	r3, [pc, #164]	; (8006740 <SystemClock_Config+0xec>)
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a4:	d1f8      	bne.n	8006698 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80066a6:	4b27      	ldr	r3, [pc, #156]	; (8006744 <SystemClock_Config+0xf0>)
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	4a25      	ldr	r2, [pc, #148]	; (8006744 <SystemClock_Config+0xf0>)
 80066b0:	f043 0302 	orr.w	r3, r3, #2
 80066b4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80066b6:	2301      	movs	r3, #1
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80066ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066c0:	2302      	movs	r3, #2
 80066c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80066c4:	2302      	movs	r3, #2
 80066c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80066c8:	2302      	movs	r3, #2
 80066ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80066cc:	232c      	movs	r3, #44	; 0x2c
 80066ce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80066d0:	2301      	movs	r3, #1
 80066d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80066d4:	2303      	movs	r3, #3
 80066d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80066d8:	2302      	movs	r3, #2
 80066da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80066dc:	230c      	movs	r3, #12
 80066de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80066e0:	2300      	movs	r3, #0
 80066e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ec:	4618      	mov	r0, r3
 80066ee:	f004 fbf5 	bl	800aedc <HAL_RCC_OscConfig>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80066f8:	f000 f866 	bl	80067c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066fc:	233f      	movs	r3, #63	; 0x3f
 80066fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006700:	2303      	movs	r3, #3
 8006702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006708:	2308      	movs	r3, #8
 800670a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800670c:	2340      	movs	r3, #64	; 0x40
 800670e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006710:	2340      	movs	r3, #64	; 0x40
 8006712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006718:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800671a:	2340      	movs	r3, #64	; 0x40
 800671c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800671e:	1d3b      	adds	r3, r7, #4
 8006720:	2103      	movs	r1, #3
 8006722:	4618      	mov	r0, r3
 8006724:	f004 ff86 	bl	800b634 <HAL_RCC_ClockConfig>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800672e:	f000 f84b 	bl	80067c8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8006732:	f005 f935 	bl	800b9a0 <HAL_RCC_EnableCSS>
}
 8006736:	bf00      	nop
 8006738:	3770      	adds	r7, #112	; 0x70
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	58024800 	.word	0x58024800
 8006744:	58024400 	.word	0x58024400

08006748 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b0ae      	sub	sp, #184	; 0xb8
 800674c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800674e:	1d3b      	adds	r3, r7, #4
 8006750:	22b4      	movs	r2, #180	; 0xb4
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f00a fdb7 	bl	80112c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800675a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800675e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8006760:	2302      	movs	r3, #2
 8006762:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8006764:	230f      	movs	r3, #15
 8006766:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8006768:	2302      	movs	r3, #2
 800676a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800676c:	2302      	movs	r3, #2
 800676e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006770:	2302      	movs	r3, #2
 8006772:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8006774:	23c0      	movs	r3, #192	; 0xc0
 8006776:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006778:	2300      	movs	r3, #0
 800677a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 800677c:	f640 3386 	movw	r3, #2950	; 0xb86
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8006782:	2300      	movs	r3, #0
 8006784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006788:	1d3b      	adds	r3, r7, #4
 800678a:	4618      	mov	r0, r3
 800678c:	f005 fb0a 	bl	800bda4 <HAL_RCCEx_PeriphCLKConfig>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8006796:	f000 f817 	bl	80067c8 <Error_Handler>
  }
}
 800679a:	bf00      	nop
 800679c:	37b8      	adds	r7, #184	; 0xb8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 1);
 80067ac:	1d39      	adds	r1, r7, #4
 80067ae:	2301      	movs	r3, #1
 80067b0:	2201      	movs	r2, #1
 80067b2:	4804      	ldr	r0, [pc, #16]	; (80067c4 <__io_putchar+0x20>)
 80067b4:	f008 fe56 	bl	800f464 <HAL_UART_Transmit>

	return ch;
 80067b8:	687b      	ldr	r3, [r7, #4]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	24000c00 	.word	0x24000c00

080067c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80067cc:	b672      	cpsid	i
}
 80067ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80067d0:	e7fe      	b.n	80067d0 <Error_Handler+0x8>
	...

080067d4 <stepper_initialise>:
 */

#include "motor.h"

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		uint32_t tim_channel, GPIO_TypeDef *dir_port, uint16_t dir_pin, uint8_t dir_mode) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	605a      	str	r2, [r3, #4]
	dev->dir_port = dir_port;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	609a      	str	r2, [r3, #8]
	dev->dir_pin = dir_pin;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8b3a      	ldrh	r2, [r7, #24]
 80067f8:	819a      	strh	r2, [r3, #12]
	/*
	 * dir mode set direction of stepper
	 */
	dev->dir_mode = dir_mode;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	7f3a      	ldrb	r2, [r7, #28]
 80067fe:	755a      	strb	r2, [r3, #21]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6898      	ldr	r0, [r3, #8]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	899b      	ldrh	r3, [r3, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	4619      	mov	r1, r3
 800680c:	f004 fb12 	bl	800ae34 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	4619      	mov	r1, r3
 800681a:	4610      	mov	r0, r2
 800681c:	f007 fd2e 	bl	800e27c <HAL_TIM_PWM_Start>
	dev->freq = 1;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006826:	611a      	str	r2, [r3, #16]
	stepper_set_speed(dev, 0);
 8006828:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800683c <stepper_initialise+0x68>
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 f889 	bl	8006944 <stepper_set_speed>
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	00000000 	.word	0x00000000

08006840 <set_pwm>:
	dev->degree = 1;
	servo_set_degree(dev, 0);
}

void set_pwm(TIM_HandleTypeDef *tim_pwm, uint32_t tim_channel, float freq,
		float duty_cycle) {
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	ed87 0a01 	vstr	s0, [r7, #4]
 800684e:	edc7 0a00 	vstr	s1, [r7]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	if (freq < MIN_FREQUENCY){
 8006852:	edd7 7a01 	vldr	s15, [r7, #4]
 8006856:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800685a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800685e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006862:	d503      	bpl.n	800686c <set_pwm+0x2c>
		freq = MIN_FREQUENCY;
 8006864:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8006868:	607b      	str	r3, [r7, #4]
 800686a:	e00a      	b.n	8006882 <set_pwm+0x42>
	}
	else if (freq > MAX_FREQUENCY){
 800686c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006870:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800693c <set_pwm+0xfc>
 8006874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687c:	dd01      	ble.n	8006882 <set_pwm+0x42>
		freq = MAX_FREQUENCY;
 800687e:	4b30      	ldr	r3, [pc, #192]	; (8006940 <set_pwm+0x100>)
 8006880:	607b      	str	r3, [r7, #4]
	}
	uint16_t ARR_value = 500000 / freq; //500000 come from 275MHz/550
 8006882:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800693c <set_pwm+0xfc>
 8006886:	ed97 7a01 	vldr	s14, [r7, #4]
 800688a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800688e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006892:	ee17 3a90 	vmov	r3, s15
 8006896:	82bb      	strh	r3, [r7, #20]
	uint16_t CCRx_value = (ARR_value * duty_cycle);
 8006898:	8abb      	ldrh	r3, [r7, #20]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068a2:	edd7 7a00 	vldr	s15, [r7]
 80068a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ae:	ee17 3a90 	vmov	r3, s15
 80068b2:	82fb      	strh	r3, [r7, #22]
	if (duty_cycle == 1.0) {
 80068b4:	edd7 7a00 	vldr	s15, [r7]
 80068b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068bc:	eef4 7a47 	vcmp.f32	s15, s14
 80068c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c4:	d101      	bne.n	80068ca <set_pwm+0x8a>
		CCRx_value = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	82fb      	strh	r3, [r7, #22]
	}
	__HAL_TIM_SET_AUTORELOAD(tim_pwm, ARR_value);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	8aba      	ldrh	r2, [r7, #20]
 80068d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80068d2:	8aba      	ldrh	r2, [r7, #20]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d104      	bne.n	80068e8 <set_pwm+0xa8>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	8afa      	ldrh	r2, [r7, #22]
 80068e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80068e6:	e023      	b.n	8006930 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d104      	bne.n	80068f8 <set_pwm+0xb8>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	8afb      	ldrh	r3, [r7, #22]
 80068f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80068f6:	e01b      	b.n	8006930 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d104      	bne.n	8006908 <set_pwm+0xc8>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	8afb      	ldrh	r3, [r7, #22]
 8006904:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8006906:	e013      	b.n	8006930 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b0c      	cmp	r3, #12
 800690c:	d104      	bne.n	8006918 <set_pwm+0xd8>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	8afb      	ldrh	r3, [r7, #22]
 8006914:	6413      	str	r3, [r2, #64]	; 0x40
}
 8006916:	e00b      	b.n	8006930 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b10      	cmp	r3, #16
 800691c:	d104      	bne.n	8006928 <set_pwm+0xe8>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	8afb      	ldrh	r3, [r7, #22]
 8006924:	6593      	str	r3, [r2, #88]	; 0x58
}
 8006926:	e003      	b.n	8006930 <set_pwm+0xf0>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	8afb      	ldrh	r3, [r7, #22]
 800692e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8006930:	bf00      	nop
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	48f42400 	.word	0x48f42400
 8006940:	48f42400 	.word	0x48f42400

08006944 <stepper_set_speed>:
		set_pwm(dev->timHandle, dev->tim_channel, 50, cyc);
		dev->degree = degree;
	}
}

void stepper_set_speed(Stepper_Motor *dev, float freq) {
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	ed87 0a00 	vstr	s0, [r7]
	 stepper_set_speed does set your stepper to your given value.

	 :param freq can be -9999.9999 to 9999.9999. signed value use to set stepper direction.
	 :return: None
	 */
	if (freq != dev->freq) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	edd3 7a04 	vldr	s15, [r3, #16]
 8006956:	ed97 7a00 	vldr	s14, [r7]
 800695a:	eeb4 7a67 	vcmp.f32	s14, s15
 800695e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006962:	d070      	beq.n	8006a46 <stepper_set_speed+0x102>
		if (freq > MIN_FREQUENCY) {
 8006964:	edd7 7a00 	vldr	s15, [r7]
 8006968:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800696c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006974:	dd25      	ble.n	80069c2 <stepper_set_speed+0x7e>
			if (dev->dir_mode == 0){
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	7d5b      	ldrb	r3, [r3, #21]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d108      	bne.n	8006990 <stepper_set_speed+0x4c>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6898      	ldr	r0, [r3, #8]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	899b      	ldrh	r3, [r3, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	4619      	mov	r1, r3
 800698a:	f004 fa53 	bl	800ae34 <HAL_GPIO_WritePin>
 800698e:	e00b      	b.n	80069a8 <stepper_set_speed+0x64>
			}
			else if (dev->dir_mode == 1){
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	7d5b      	ldrb	r3, [r3, #21]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d107      	bne.n	80069a8 <stepper_set_speed+0x64>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6898      	ldr	r0, [r3, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	899b      	ldrh	r3, [r3, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	4619      	mov	r1, r3
 80069a4:	f004 fa46 	bl	800ae34 <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, freq, 0.50);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80069b4:	ed97 0a00 	vldr	s0, [r7]
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f7ff ff40 	bl	8006840 <set_pwm>
 80069c0:	e03e      	b.n	8006a40 <stepper_set_speed+0xfc>
		} else if (freq < (-1 * MIN_FREQUENCY)) {
 80069c2:	edd7 7a00 	vldr	s15, [r7]
 80069c6:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 80069ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d2:	d529      	bpl.n	8006a28 <stepper_set_speed+0xe4>
			if (dev->dir_mode == 0){
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7d5b      	ldrb	r3, [r3, #21]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d108      	bne.n	80069ee <stepper_set_speed+0xaa>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6898      	ldr	r0, [r3, #8]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	899b      	ldrh	r3, [r3, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	4619      	mov	r1, r3
 80069e8:	f004 fa24 	bl	800ae34 <HAL_GPIO_WritePin>
 80069ec:	e00b      	b.n	8006a06 <stepper_set_speed+0xc2>
			}
			else if (dev->dir_mode == 1){
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	7d5b      	ldrb	r3, [r3, #21]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d107      	bne.n	8006a06 <stepper_set_speed+0xc2>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6898      	ldr	r0, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	899b      	ldrh	r3, [r3, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	4619      	mov	r1, r3
 8006a02:	f004 fa17 	bl	800ae34 <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, (-1*freq), 0.50);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	edd7 7a00 	vldr	s15, [r7]
 8006a12:	eef1 7a67 	vneg.f32	s15, s15
 8006a16:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8006a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f7ff ff0d 	bl	8006840 <set_pwm>
 8006a26:	e00b      	b.n	8006a40 <stepper_set_speed+0xfc>
		} else {
			set_pwm(dev->timHandle, dev->tim_channel, 100, 1.0);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006a34:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8006a50 <stepper_set_speed+0x10c>
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f7ff ff00 	bl	8006840 <set_pwm>
		}
		dev->freq = freq;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	611a      	str	r2, [r3, #16]
	}
}
 8006a46:	bf00      	nop
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	42c80000 	.word	0x42c80000

08006a54 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8006a58:	4b27      	ldr	r3, [pc, #156]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006a5a:	4a28      	ldr	r2, [pc, #160]	; (8006afc <MX_SPI3_Init+0xa8>)
 8006a5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006a5e:	4b26      	ldr	r3, [pc, #152]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006a60:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006a64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006a66:	4b24      	ldr	r3, [pc, #144]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8006a6c:	4b22      	ldr	r3, [pc, #136]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006a6e:	2203      	movs	r2, #3
 8006a70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a72:	4b21      	ldr	r3, [pc, #132]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006a78:	4b1f      	ldr	r3, [pc, #124]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006a7e:	4b1e      	ldr	r3, [pc, #120]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006a80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006a84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a86:	4b1c      	ldr	r3, [pc, #112]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006a8c:	4b1a      	ldr	r3, [pc, #104]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006a92:	4b19      	ldr	r3, [pc, #100]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a98:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8006a9e:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006aa4:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006aaa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006aac:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006abe:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006ac4:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006aca:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006ad0:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006ad6:	4b08      	ldr	r3, [pc, #32]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006ae2:	4805      	ldr	r0, [pc, #20]	; (8006af8 <MX_SPI3_Init+0xa4>)
 8006ae4:	f007 f9f0 	bl	800dec8 <HAL_SPI_Init>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8006aee:	f7ff fe6b 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006af2:	bf00      	nop
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	240007e8 	.word	0x240007e8
 8006afc:	40003c00 	.word	0x40003c00

08006b00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b0b6      	sub	sp, #216	; 0xd8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	609a      	str	r2, [r3, #8]
 8006b14:	60da      	str	r2, [r3, #12]
 8006b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006b18:	f107 0310 	add.w	r3, r7, #16
 8006b1c:	22b4      	movs	r2, #180	; 0xb4
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4618      	mov	r0, r3
 8006b22:	f00a fbd1 	bl	80112c8 <memset>
  if(spiHandle->Instance==SPI3)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a25      	ldr	r2, [pc, #148]	; (8006bc0 <HAL_SPI_MspInit+0xc0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d142      	bne.n	8006bb6 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8006b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b3a:	f107 0310 	add.w	r3, r7, #16
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f005 f930 	bl	800bda4 <HAL_RCCEx_PeriphCLKConfig>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8006b4a:	f7ff fe3d 	bl	80067c8 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006b4e:	4b1d      	ldr	r3, [pc, #116]	; (8006bc4 <HAL_SPI_MspInit+0xc4>)
 8006b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b54:	4a1b      	ldr	r2, [pc, #108]	; (8006bc4 <HAL_SPI_MspInit+0xc4>)
 8006b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b5e:	4b19      	ldr	r3, [pc, #100]	; (8006bc4 <HAL_SPI_MspInit+0xc4>)
 8006b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b6c:	4b15      	ldr	r3, [pc, #84]	; (8006bc4 <HAL_SPI_MspInit+0xc4>)
 8006b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b72:	4a14      	ldr	r2, [pc, #80]	; (8006bc4 <HAL_SPI_MspInit+0xc4>)
 8006b74:	f043 0304 	orr.w	r3, r3, #4
 8006b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b7c:	4b11      	ldr	r3, [pc, #68]	; (8006bc4 <HAL_SPI_MspInit+0xc4>)
 8006b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	60bb      	str	r3, [r7, #8]
 8006b88:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006b8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006b8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b92:	2302      	movs	r3, #2
 8006b94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006ba4:	2306      	movs	r3, #6
 8006ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006baa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4805      	ldr	r0, [pc, #20]	; (8006bc8 <HAL_SPI_MspInit+0xc8>)
 8006bb2:	f003 ff97 	bl	800aae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006bb6:	bf00      	nop
 8006bb8:	37d8      	adds	r7, #216	; 0xd8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40003c00 	.word	0x40003c00
 8006bc4:	58024400 	.word	0x58024400
 8006bc8:	58020800 	.word	0x58020800

08006bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bd2:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <HAL_MspInit+0x30>)
 8006bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bd8:	4a08      	ldr	r2, [pc, #32]	; (8006bfc <HAL_MspInit+0x30>)
 8006bda:	f043 0302 	orr.w	r3, r3, #2
 8006bde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <HAL_MspInit+0x30>)
 8006be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	607b      	str	r3, [r7, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	58024400 	.word	0x58024400

08006c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006c04:	f005 f8b2 	bl	800bd6c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006c08:	e7fe      	b.n	8006c08 <NMI_Handler+0x8>

08006c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c0e:	e7fe      	b.n	8006c0e <HardFault_Handler+0x4>

08006c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c14:	e7fe      	b.n	8006c14 <MemManage_Handler+0x4>

08006c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c16:	b480      	push	{r7}
 8006c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c1a:	e7fe      	b.n	8006c1a <BusFault_Handler+0x4>

08006c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c20:	e7fe      	b.n	8006c20 <UsageFault_Handler+0x4>

08006c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c22:	b480      	push	{r7}
 8006c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006c26:	bf00      	nop
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c30:	b480      	push	{r7}
 8006c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006c42:	bf00      	nop
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c50:	f001 fc5e 	bl	8008510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006c54:	bf00      	nop
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006c5c:	4802      	ldr	r0, [pc, #8]	; (8006c68 <USART3_IRQHandler+0x10>)
 8006c5e:	f008 fd6b 	bl	800f738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006c62:	bf00      	nop
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	24000c00 	.word	0x24000c00

08006c6c <HAL_UART_TxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	__HAL_UART_FLUSH_DRREGISTER(huart);
	ARMsProtocol_FUNC_Rx_Callback(huart);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
	//__HAL_UART_FLUSH_DRREGISTER(huart);
	ARMsProtocol_Data.Tx_flag = 0;
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <HAL_UART_TxCpltCallback+0x1c>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	24000264 	.word	0x24000264

08006c8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
	return 1;
 8006c90:	2301      	movs	r3, #1
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <_kill>:

int _kill(int pid, int sig)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006ca6:	f00a fad7 	bl	8011258 <__errno>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2216      	movs	r2, #22
 8006cae:	601a      	str	r2, [r3, #0]
	return -1;
 8006cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <_exit>:

void _exit (int status)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff ffe7 	bl	8006c9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8006cce:	e7fe      	b.n	8006cce <_exit+0x12>

08006cd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	e00a      	b.n	8006cf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006ce2:	f3af 8000 	nop.w
 8006ce6:	4601      	mov	r1, r0
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	60ba      	str	r2, [r7, #8]
 8006cee:	b2ca      	uxtb	r2, r1
 8006cf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	dbf0      	blt.n	8006ce2 <_read+0x12>
	}

return len;
 8006d00:	687b      	ldr	r3, [r7, #4]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b086      	sub	sp, #24
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	e009      	b.n	8006d30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	60ba      	str	r2, [r7, #8]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fd3d 	bl	80067a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	dbf1      	blt.n	8006d1c <_write+0x12>
	}
	return len;
 8006d38:	687b      	ldr	r3, [r7, #4]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <_close>:

int _close(int file)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
	return -1;
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d6a:	605a      	str	r2, [r3, #4]
	return 0;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <_isatty>:

int _isatty(int file)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
	return 1;
 8006d82:	2301      	movs	r3, #1
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
	return 0;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006db4:	4a14      	ldr	r2, [pc, #80]	; (8006e08 <_sbrk+0x5c>)
 8006db6:	4b15      	ldr	r3, [pc, #84]	; (8006e0c <_sbrk+0x60>)
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006dc0:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <_sbrk+0x64>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006dc8:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <_sbrk+0x64>)
 8006dca:	4a12      	ldr	r2, [pc, #72]	; (8006e14 <_sbrk+0x68>)
 8006dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006dce:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <_sbrk+0x64>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d207      	bcs.n	8006dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006ddc:	f00a fa3c 	bl	8011258 <__errno>
 8006de0:	4603      	mov	r3, r0
 8006de2:	220c      	movs	r2, #12
 8006de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006de6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dea:	e009      	b.n	8006e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006dec:	4b08      	ldr	r3, [pc, #32]	; (8006e10 <_sbrk+0x64>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006df2:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <_sbrk+0x64>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4413      	add	r3, r2
 8006dfa:	4a05      	ldr	r2, [pc, #20]	; (8006e10 <_sbrk+0x64>)
 8006dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	24050000 	.word	0x24050000
 8006e0c:	00000400 	.word	0x00000400
 8006e10:	2400024c 	.word	0x2400024c
 8006e14:	24000e58 	.word	0x24000e58

08006e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006e1c:	4b32      	ldr	r3, [pc, #200]	; (8006ee8 <SystemInit+0xd0>)
 8006e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e22:	4a31      	ldr	r2, [pc, #196]	; (8006ee8 <SystemInit+0xd0>)
 8006e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006e2c:	4b2f      	ldr	r3, [pc, #188]	; (8006eec <SystemInit+0xd4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	2b06      	cmp	r3, #6
 8006e36:	d807      	bhi.n	8006e48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006e38:	4b2c      	ldr	r3, [pc, #176]	; (8006eec <SystemInit+0xd4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f023 030f 	bic.w	r3, r3, #15
 8006e40:	4a2a      	ldr	r2, [pc, #168]	; (8006eec <SystemInit+0xd4>)
 8006e42:	f043 0307 	orr.w	r3, r3, #7
 8006e46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006e48:	4b29      	ldr	r3, [pc, #164]	; (8006ef0 <SystemInit+0xd8>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a28      	ldr	r2, [pc, #160]	; (8006ef0 <SystemInit+0xd8>)
 8006e4e:	f043 0301 	orr.w	r3, r3, #1
 8006e52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006e54:	4b26      	ldr	r3, [pc, #152]	; (8006ef0 <SystemInit+0xd8>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006e5a:	4b25      	ldr	r3, [pc, #148]	; (8006ef0 <SystemInit+0xd8>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	4924      	ldr	r1, [pc, #144]	; (8006ef0 <SystemInit+0xd8>)
 8006e60:	4b24      	ldr	r3, [pc, #144]	; (8006ef4 <SystemInit+0xdc>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006e66:	4b21      	ldr	r3, [pc, #132]	; (8006eec <SystemInit+0xd4>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d007      	beq.n	8006e82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006e72:	4b1e      	ldr	r3, [pc, #120]	; (8006eec <SystemInit+0xd4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f023 030f 	bic.w	r3, r3, #15
 8006e7a:	4a1c      	ldr	r2, [pc, #112]	; (8006eec <SystemInit+0xd4>)
 8006e7c:	f043 0307 	orr.w	r3, r3, #7
 8006e80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006e82:	4b1b      	ldr	r3, [pc, #108]	; (8006ef0 <SystemInit+0xd8>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006e88:	4b19      	ldr	r3, [pc, #100]	; (8006ef0 <SystemInit+0xd8>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006e8e:	4b18      	ldr	r3, [pc, #96]	; (8006ef0 <SystemInit+0xd8>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006e94:	4b16      	ldr	r3, [pc, #88]	; (8006ef0 <SystemInit+0xd8>)
 8006e96:	4a18      	ldr	r2, [pc, #96]	; (8006ef8 <SystemInit+0xe0>)
 8006e98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006e9a:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <SystemInit+0xd8>)
 8006e9c:	4a17      	ldr	r2, [pc, #92]	; (8006efc <SystemInit+0xe4>)
 8006e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006ea0:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <SystemInit+0xd8>)
 8006ea2:	4a17      	ldr	r2, [pc, #92]	; (8006f00 <SystemInit+0xe8>)
 8006ea4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006ea6:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <SystemInit+0xd8>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006eac:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <SystemInit+0xd8>)
 8006eae:	4a14      	ldr	r2, [pc, #80]	; (8006f00 <SystemInit+0xe8>)
 8006eb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006eb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ef0 <SystemInit+0xd8>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <SystemInit+0xd8>)
 8006eba:	4a11      	ldr	r2, [pc, #68]	; (8006f00 <SystemInit+0xe8>)
 8006ebc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006ebe:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <SystemInit+0xd8>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <SystemInit+0xd8>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <SystemInit+0xd8>)
 8006eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ece:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006ed0:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <SystemInit+0xd8>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006ed6:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <SystemInit+0xec>)
 8006ed8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006edc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8006ede:	bf00      	nop
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	e000ed00 	.word	0xe000ed00
 8006eec:	52002000 	.word	0x52002000
 8006ef0:	58024400 	.word	0x58024400
 8006ef4:	eaf6ed7f 	.word	0xeaf6ed7f
 8006ef8:	02020200 	.word	0x02020200
 8006efc:	01ff0000 	.word	0x01ff0000
 8006f00:	01010280 	.word	0x01010280
 8006f04:	52004000 	.word	0x52004000

08006f08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b09c      	sub	sp, #112	; 0x70
 8006f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006f0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	605a      	str	r2, [r3, #4]
 8006f18:	609a      	str	r2, [r3, #8]
 8006f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006f28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	609a      	str	r2, [r3, #8]
 8006f34:	60da      	str	r2, [r3, #12]
 8006f36:	611a      	str	r2, [r3, #16]
 8006f38:	615a      	str	r2, [r3, #20]
 8006f3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006f3c:	1d3b      	adds	r3, r7, #4
 8006f3e:	2234      	movs	r2, #52	; 0x34
 8006f40:	2100      	movs	r1, #0
 8006f42:	4618      	mov	r0, r3
 8006f44:	f00a f9c0 	bl	80112c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006f48:	4b44      	ldr	r3, [pc, #272]	; (800705c <MX_TIM1_Init+0x154>)
 8006f4a:	4a45      	ldr	r2, [pc, #276]	; (8007060 <MX_TIM1_Init+0x158>)
 8006f4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 550-1;
 8006f4e:	4b43      	ldr	r3, [pc, #268]	; (800705c <MX_TIM1_Init+0x154>)
 8006f50:	f240 2225 	movw	r2, #549	; 0x225
 8006f54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f56:	4b41      	ldr	r3, [pc, #260]	; (800705c <MX_TIM1_Init+0x154>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8006f5c:	4b3f      	ldr	r3, [pc, #252]	; (800705c <MX_TIM1_Init+0x154>)
 8006f5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f64:	4b3d      	ldr	r3, [pc, #244]	; (800705c <MX_TIM1_Init+0x154>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006f6a:	4b3c      	ldr	r3, [pc, #240]	; (800705c <MX_TIM1_Init+0x154>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006f70:	4b3a      	ldr	r3, [pc, #232]	; (800705c <MX_TIM1_Init+0x154>)
 8006f72:	2280      	movs	r2, #128	; 0x80
 8006f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006f76:	4839      	ldr	r0, [pc, #228]	; (800705c <MX_TIM1_Init+0x154>)
 8006f78:	f007 f8c7 	bl	800e10a <HAL_TIM_Base_Init>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8006f82:	f7ff fc21 	bl	80067c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f8a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006f8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f90:	4619      	mov	r1, r3
 8006f92:	4832      	ldr	r0, [pc, #200]	; (800705c <MX_TIM1_Init+0x154>)
 8006f94:	f007 fba2 	bl	800e6dc <HAL_TIM_ConfigClockSource>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8006f9e:	f7ff fc13 	bl	80067c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006fa2:	482e      	ldr	r0, [pc, #184]	; (800705c <MX_TIM1_Init+0x154>)
 8006fa4:	f007 f908 	bl	800e1b8 <HAL_TIM_PWM_Init>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8006fae:	f7ff fc0b 	bl	80067c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006fbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4825      	ldr	r0, [pc, #148]	; (800705c <MX_TIM1_Init+0x154>)
 8006fc6:	f008 f8c1 	bl	800f14c <HAL_TIMEx_MasterConfigSynchronization>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8006fd0:	f7ff fbfa 	bl	80067c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006fd4:	2360      	movs	r3, #96	; 0x60
 8006fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006fec:	2300      	movs	r3, #0
 8006fee:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006ff0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4818      	ldr	r0, [pc, #96]	; (800705c <MX_TIM1_Init+0x154>)
 8006ffa:	f007 fa5b 	bl	800e4b4 <HAL_TIM_PWM_ConfigChannel>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8007004:	f7ff fbe0 	bl	80067c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007008:	2300      	movs	r3, #0
 800700a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800700c:	2300      	movs	r3, #0
 800700e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800701c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007020:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007026:	2300      	movs	r3, #0
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800702a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007034:	2300      	movs	r3, #0
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007038:	1d3b      	adds	r3, r7, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4807      	ldr	r0, [pc, #28]	; (800705c <MX_TIM1_Init+0x154>)
 800703e:	f008 f921 	bl	800f284 <HAL_TIMEx_ConfigBreakDeadTime>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8007048:	f7ff fbbe 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800704c:	4803      	ldr	r0, [pc, #12]	; (800705c <MX_TIM1_Init+0x154>)
 800704e:	f000 fdc3 	bl	8007bd8 <HAL_TIM_MspPostInit>

}
 8007052:	bf00      	nop
 8007054:	3770      	adds	r7, #112	; 0x70
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	24000a38 	.word	0x24000a38
 8007060:	40010000 	.word	0x40010000

08007064 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08e      	sub	sp, #56	; 0x38
 8007068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800706a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	605a      	str	r2, [r3, #4]
 8007074:	609a      	str	r2, [r3, #8]
 8007076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007078:	f107 031c 	add.w	r3, r7, #28
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	605a      	str	r2, [r3, #4]
 8007082:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007084:	463b      	mov	r3, r7
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	605a      	str	r2, [r3, #4]
 800708c:	609a      	str	r2, [r3, #8]
 800708e:	60da      	str	r2, [r3, #12]
 8007090:	611a      	str	r2, [r3, #16]
 8007092:	615a      	str	r2, [r3, #20]
 8007094:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007096:	4b2e      	ldr	r3, [pc, #184]	; (8007150 <MX_TIM2_Init+0xec>)
 8007098:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800709c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550 - 1;
 800709e:	4b2c      	ldr	r3, [pc, #176]	; (8007150 <MX_TIM2_Init+0xec>)
 80070a0:	f240 2225 	movw	r2, #549	; 0x225
 80070a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070a6:	4b2a      	ldr	r3, [pc, #168]	; (8007150 <MX_TIM2_Init+0xec>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80070ac:	4b28      	ldr	r3, [pc, #160]	; (8007150 <MX_TIM2_Init+0xec>)
 80070ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80070b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070b4:	4b26      	ldr	r3, [pc, #152]	; (8007150 <MX_TIM2_Init+0xec>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80070ba:	4b25      	ldr	r3, [pc, #148]	; (8007150 <MX_TIM2_Init+0xec>)
 80070bc:	2280      	movs	r2, #128	; 0x80
 80070be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80070c0:	4823      	ldr	r0, [pc, #140]	; (8007150 <MX_TIM2_Init+0xec>)
 80070c2:	f007 f822 	bl	800e10a <HAL_TIM_Base_Init>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80070cc:	f7ff fb7c 	bl	80067c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80070d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80070d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070da:	4619      	mov	r1, r3
 80070dc:	481c      	ldr	r0, [pc, #112]	; (8007150 <MX_TIM2_Init+0xec>)
 80070de:	f007 fafd 	bl	800e6dc <HAL_TIM_ConfigClockSource>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80070e8:	f7ff fb6e 	bl	80067c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80070ec:	4818      	ldr	r0, [pc, #96]	; (8007150 <MX_TIM2_Init+0xec>)
 80070ee:	f007 f863 	bl	800e1b8 <HAL_TIM_PWM_Init>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80070f8:	f7ff fb66 	bl	80067c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070fc:	2300      	movs	r3, #0
 80070fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007100:	2300      	movs	r3, #0
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007104:	f107 031c 	add.w	r3, r7, #28
 8007108:	4619      	mov	r1, r3
 800710a:	4811      	ldr	r0, [pc, #68]	; (8007150 <MX_TIM2_Init+0xec>)
 800710c:	f008 f81e 	bl	800f14c <HAL_TIMEx_MasterConfigSynchronization>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8007116:	f7ff fb57 	bl	80067c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800711a:	2360      	movs	r3, #96	; 0x60
 800711c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007122:	2300      	movs	r3, #0
 8007124:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800712a:	463b      	mov	r3, r7
 800712c:	2200      	movs	r2, #0
 800712e:	4619      	mov	r1, r3
 8007130:	4807      	ldr	r0, [pc, #28]	; (8007150 <MX_TIM2_Init+0xec>)
 8007132:	f007 f9bf 	bl	800e4b4 <HAL_TIM_PWM_ConfigChannel>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800713c:	f7ff fb44 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007140:	4803      	ldr	r0, [pc, #12]	; (8007150 <MX_TIM2_Init+0xec>)
 8007142:	f000 fd49 	bl	8007bd8 <HAL_TIM_MspPostInit>

}
 8007146:	bf00      	nop
 8007148:	3738      	adds	r7, #56	; 0x38
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	24000a84 	.word	0x24000a84

08007154 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08e      	sub	sp, #56	; 0x38
 8007158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800715a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	605a      	str	r2, [r3, #4]
 8007164:	609a      	str	r2, [r3, #8]
 8007166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007168:	f107 031c 	add.w	r3, r7, #28
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	605a      	str	r2, [r3, #4]
 8007172:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007174:	463b      	mov	r3, r7
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	605a      	str	r2, [r3, #4]
 800717c:	609a      	str	r2, [r3, #8]
 800717e:	60da      	str	r2, [r3, #12]
 8007180:	611a      	str	r2, [r3, #16]
 8007182:	615a      	str	r2, [r3, #20]
 8007184:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007186:	4b2d      	ldr	r3, [pc, #180]	; (800723c <MX_TIM3_Init+0xe8>)
 8007188:	4a2d      	ldr	r2, [pc, #180]	; (8007240 <MX_TIM3_Init+0xec>)
 800718a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550 - 1;
 800718c:	4b2b      	ldr	r3, [pc, #172]	; (800723c <MX_TIM3_Init+0xe8>)
 800718e:	f240 2225 	movw	r2, #549	; 0x225
 8007192:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007194:	4b29      	ldr	r3, [pc, #164]	; (800723c <MX_TIM3_Init+0xe8>)
 8007196:	2200      	movs	r2, #0
 8007198:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800719a:	4b28      	ldr	r3, [pc, #160]	; (800723c <MX_TIM3_Init+0xe8>)
 800719c:	f242 7210 	movw	r2, #10000	; 0x2710
 80071a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071a2:	4b26      	ldr	r3, [pc, #152]	; (800723c <MX_TIM3_Init+0xe8>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80071a8:	4b24      	ldr	r3, [pc, #144]	; (800723c <MX_TIM3_Init+0xe8>)
 80071aa:	2280      	movs	r2, #128	; 0x80
 80071ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80071ae:	4823      	ldr	r0, [pc, #140]	; (800723c <MX_TIM3_Init+0xe8>)
 80071b0:	f006 ffab 	bl	800e10a <HAL_TIM_Base_Init>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80071ba:	f7ff fb05 	bl	80067c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80071be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80071c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071c8:	4619      	mov	r1, r3
 80071ca:	481c      	ldr	r0, [pc, #112]	; (800723c <MX_TIM3_Init+0xe8>)
 80071cc:	f007 fa86 	bl	800e6dc <HAL_TIM_ConfigClockSource>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80071d6:	f7ff faf7 	bl	80067c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80071da:	4818      	ldr	r0, [pc, #96]	; (800723c <MX_TIM3_Init+0xe8>)
 80071dc:	f006 ffec 	bl	800e1b8 <HAL_TIM_PWM_Init>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80071e6:	f7ff faef 	bl	80067c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071ee:	2300      	movs	r3, #0
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80071f2:	f107 031c 	add.w	r3, r7, #28
 80071f6:	4619      	mov	r1, r3
 80071f8:	4810      	ldr	r0, [pc, #64]	; (800723c <MX_TIM3_Init+0xe8>)
 80071fa:	f007 ffa7 	bl	800f14c <HAL_TIMEx_MasterConfigSynchronization>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8007204:	f7ff fae0 	bl	80067c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007208:	2360      	movs	r3, #96	; 0x60
 800720a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007210:	2300      	movs	r3, #0
 8007212:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007218:	463b      	mov	r3, r7
 800721a:	2200      	movs	r2, #0
 800721c:	4619      	mov	r1, r3
 800721e:	4807      	ldr	r0, [pc, #28]	; (800723c <MX_TIM3_Init+0xe8>)
 8007220:	f007 f948 	bl	800e4b4 <HAL_TIM_PWM_ConfigChannel>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800722a:	f7ff facd 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800722e:	4803      	ldr	r0, [pc, #12]	; (800723c <MX_TIM3_Init+0xe8>)
 8007230:	f000 fcd2 	bl	8007bd8 <HAL_TIM_MspPostInit>

}
 8007234:	bf00      	nop
 8007236:	3738      	adds	r7, #56	; 0x38
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	240009a0 	.word	0x240009a0
 8007240:	40000400 	.word	0x40000400

08007244 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08e      	sub	sp, #56	; 0x38
 8007248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800724a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	605a      	str	r2, [r3, #4]
 8007254:	609a      	str	r2, [r3, #8]
 8007256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007258:	f107 031c 	add.w	r3, r7, #28
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	605a      	str	r2, [r3, #4]
 8007262:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007264:	463b      	mov	r3, r7
 8007266:	2200      	movs	r2, #0
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	605a      	str	r2, [r3, #4]
 800726c:	609a      	str	r2, [r3, #8]
 800726e:	60da      	str	r2, [r3, #12]
 8007270:	611a      	str	r2, [r3, #16]
 8007272:	615a      	str	r2, [r3, #20]
 8007274:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007276:	4b2d      	ldr	r3, [pc, #180]	; (800732c <MX_TIM4_Init+0xe8>)
 8007278:	4a2d      	ldr	r2, [pc, #180]	; (8007330 <MX_TIM4_Init+0xec>)
 800727a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 550-1;
 800727c:	4b2b      	ldr	r3, [pc, #172]	; (800732c <MX_TIM4_Init+0xe8>)
 800727e:	f240 2225 	movw	r2, #549	; 0x225
 8007282:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007284:	4b29      	ldr	r3, [pc, #164]	; (800732c <MX_TIM4_Init+0xe8>)
 8007286:	2200      	movs	r2, #0
 8007288:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800728a:	4b28      	ldr	r3, [pc, #160]	; (800732c <MX_TIM4_Init+0xe8>)
 800728c:	f242 7210 	movw	r2, #10000	; 0x2710
 8007290:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007292:	4b26      	ldr	r3, [pc, #152]	; (800732c <MX_TIM4_Init+0xe8>)
 8007294:	2200      	movs	r2, #0
 8007296:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007298:	4b24      	ldr	r3, [pc, #144]	; (800732c <MX_TIM4_Init+0xe8>)
 800729a:	2280      	movs	r2, #128	; 0x80
 800729c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800729e:	4823      	ldr	r0, [pc, #140]	; (800732c <MX_TIM4_Init+0xe8>)
 80072a0:	f006 ff33 	bl	800e10a <HAL_TIM_Base_Init>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80072aa:	f7ff fa8d 	bl	80067c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80072ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80072b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072b8:	4619      	mov	r1, r3
 80072ba:	481c      	ldr	r0, [pc, #112]	; (800732c <MX_TIM4_Init+0xe8>)
 80072bc:	f007 fa0e 	bl	800e6dc <HAL_TIM_ConfigClockSource>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80072c6:	f7ff fa7f 	bl	80067c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80072ca:	4818      	ldr	r0, [pc, #96]	; (800732c <MX_TIM4_Init+0xe8>)
 80072cc:	f006 ff74 	bl	800e1b8 <HAL_TIM_PWM_Init>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80072d6:	f7ff fa77 	bl	80067c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072da:	2300      	movs	r3, #0
 80072dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072de:	2300      	movs	r3, #0
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80072e2:	f107 031c 	add.w	r3, r7, #28
 80072e6:	4619      	mov	r1, r3
 80072e8:	4810      	ldr	r0, [pc, #64]	; (800732c <MX_TIM4_Init+0xe8>)
 80072ea:	f007 ff2f 	bl	800f14c <HAL_TIMEx_MasterConfigSynchronization>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80072f4:	f7ff fa68 	bl	80067c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80072f8:	2360      	movs	r3, #96	; 0x60
 80072fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007300:	2300      	movs	r3, #0
 8007302:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007304:	2300      	movs	r3, #0
 8007306:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007308:	463b      	mov	r3, r7
 800730a:	2200      	movs	r2, #0
 800730c:	4619      	mov	r1, r3
 800730e:	4807      	ldr	r0, [pc, #28]	; (800732c <MX_TIM4_Init+0xe8>)
 8007310:	f007 f8d0 	bl	800e4b4 <HAL_TIM_PWM_ConfigChannel>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800731a:	f7ff fa55 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800731e:	4803      	ldr	r0, [pc, #12]	; (800732c <MX_TIM4_Init+0xe8>)
 8007320:	f000 fc5a 	bl	8007bd8 <HAL_TIM_MspPostInit>

}
 8007324:	bf00      	nop
 8007326:	3738      	adds	r7, #56	; 0x38
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	240008bc 	.word	0x240008bc
 8007330:	40000800 	.word	0x40000800

08007334 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08c      	sub	sp, #48	; 0x30
 8007338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800733a:	f107 0320 	add.w	r3, r7, #32
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	605a      	str	r2, [r3, #4]
 8007344:	609a      	str	r2, [r3, #8]
 8007346:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007348:	1d3b      	adds	r3, r7, #4
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	605a      	str	r2, [r3, #4]
 8007350:	609a      	str	r2, [r3, #8]
 8007352:	60da      	str	r2, [r3, #12]
 8007354:	611a      	str	r2, [r3, #16]
 8007356:	615a      	str	r2, [r3, #20]
 8007358:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800735a:	4b26      	ldr	r3, [pc, #152]	; (80073f4 <MX_TIM12_Init+0xc0>)
 800735c:	4a26      	ldr	r2, [pc, #152]	; (80073f8 <MX_TIM12_Init+0xc4>)
 800735e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 550 - 1;
 8007360:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <MX_TIM12_Init+0xc0>)
 8007362:	f240 2225 	movw	r2, #549	; 0x225
 8007366:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007368:	4b22      	ldr	r3, [pc, #136]	; (80073f4 <MX_TIM12_Init+0xc0>)
 800736a:	2200      	movs	r2, #0
 800736c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1 - 1;
 800736e:	4b21      	ldr	r3, [pc, #132]	; (80073f4 <MX_TIM12_Init+0xc0>)
 8007370:	2200      	movs	r2, #0
 8007372:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007374:	4b1f      	ldr	r3, [pc, #124]	; (80073f4 <MX_TIM12_Init+0xc0>)
 8007376:	2200      	movs	r2, #0
 8007378:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800737a:	4b1e      	ldr	r3, [pc, #120]	; (80073f4 <MX_TIM12_Init+0xc0>)
 800737c:	2280      	movs	r2, #128	; 0x80
 800737e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8007380:	481c      	ldr	r0, [pc, #112]	; (80073f4 <MX_TIM12_Init+0xc0>)
 8007382:	f006 fec2 	bl	800e10a <HAL_TIM_Base_Init>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800738c:	f7ff fa1c 	bl	80067c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007394:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8007396:	f107 0320 	add.w	r3, r7, #32
 800739a:	4619      	mov	r1, r3
 800739c:	4815      	ldr	r0, [pc, #84]	; (80073f4 <MX_TIM12_Init+0xc0>)
 800739e:	f007 f99d 	bl	800e6dc <HAL_TIM_ConfigClockSource>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80073a8:	f7ff fa0e 	bl	80067c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80073ac:	4811      	ldr	r0, [pc, #68]	; (80073f4 <MX_TIM12_Init+0xc0>)
 80073ae:	f006 ff03 	bl	800e1b8 <HAL_TIM_PWM_Init>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80073b8:	f7ff fa06 	bl	80067c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80073bc:	2360      	movs	r3, #96	; 0x60
 80073be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 80073c0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80073c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80073ce:	1d3b      	adds	r3, r7, #4
 80073d0:	2200      	movs	r2, #0
 80073d2:	4619      	mov	r1, r3
 80073d4:	4807      	ldr	r0, [pc, #28]	; (80073f4 <MX_TIM12_Init+0xc0>)
 80073d6:	f007 f86d 	bl	800e4b4 <HAL_TIM_PWM_ConfigChannel>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80073e0:	f7ff f9f2 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80073e4:	4803      	ldr	r0, [pc, #12]	; (80073f4 <MX_TIM12_Init+0xc0>)
 80073e6:	f000 fbf7 	bl	8007bd8 <HAL_TIM_MspPostInit>

}
 80073ea:	bf00      	nop
 80073ec:	3730      	adds	r7, #48	; 0x30
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	24000b68 	.word	0x24000b68
 80073f8:	40001800 	.word	0x40001800

080073fc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8007400:	4b0e      	ldr	r3, [pc, #56]	; (800743c <MX_TIM13_Init+0x40>)
 8007402:	4a0f      	ldr	r2, [pc, #60]	; (8007440 <MX_TIM13_Init+0x44>)
 8007404:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550 - 1;
 8007406:	4b0d      	ldr	r3, [pc, #52]	; (800743c <MX_TIM13_Init+0x40>)
 8007408:	f240 2225 	movw	r2, #549	; 0x225
 800740c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800740e:	4b0b      	ldr	r3, [pc, #44]	; (800743c <MX_TIM13_Init+0x40>)
 8007410:	2200      	movs	r2, #0
 8007412:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1-1;
 8007414:	4b09      	ldr	r3, [pc, #36]	; (800743c <MX_TIM13_Init+0x40>)
 8007416:	2200      	movs	r2, #0
 8007418:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800741a:	4b08      	ldr	r3, [pc, #32]	; (800743c <MX_TIM13_Init+0x40>)
 800741c:	2200      	movs	r2, #0
 800741e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007420:	4b06      	ldr	r3, [pc, #24]	; (800743c <MX_TIM13_Init+0x40>)
 8007422:	2280      	movs	r2, #128	; 0x80
 8007424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007426:	4805      	ldr	r0, [pc, #20]	; (800743c <MX_TIM13_Init+0x40>)
 8007428:	f006 fe6f 	bl	800e10a <HAL_TIM_Base_Init>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8007432:	f7ff f9c9 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8007436:	bf00      	nop
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	240009ec 	.word	0x240009ec
 8007440:	40001c00 	.word	0x40001c00

08007444 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	605a      	str	r2, [r3, #4]
 8007452:	609a      	str	r2, [r3, #8]
 8007454:	60da      	str	r2, [r3, #12]
 8007456:	611a      	str	r2, [r3, #16]
 8007458:	615a      	str	r2, [r3, #20]
 800745a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800745c:	4b1e      	ldr	r3, [pc, #120]	; (80074d8 <MX_TIM14_Init+0x94>)
 800745e:	4a1f      	ldr	r2, [pc, #124]	; (80074dc <MX_TIM14_Init+0x98>)
 8007460:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 8007462:	4b1d      	ldr	r3, [pc, #116]	; (80074d8 <MX_TIM14_Init+0x94>)
 8007464:	f240 2225 	movw	r2, #549	; 0x225
 8007468:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800746a:	4b1b      	ldr	r3, [pc, #108]	; (80074d8 <MX_TIM14_Init+0x94>)
 800746c:	2200      	movs	r2, #0
 800746e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1-1;
 8007470:	4b19      	ldr	r3, [pc, #100]	; (80074d8 <MX_TIM14_Init+0x94>)
 8007472:	2200      	movs	r2, #0
 8007474:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007476:	4b18      	ldr	r3, [pc, #96]	; (80074d8 <MX_TIM14_Init+0x94>)
 8007478:	2200      	movs	r2, #0
 800747a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800747c:	4b16      	ldr	r3, [pc, #88]	; (80074d8 <MX_TIM14_Init+0x94>)
 800747e:	2280      	movs	r2, #128	; 0x80
 8007480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8007482:	4815      	ldr	r0, [pc, #84]	; (80074d8 <MX_TIM14_Init+0x94>)
 8007484:	f006 fe41 	bl	800e10a <HAL_TIM_Base_Init>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800748e:	f7ff f99b 	bl	80067c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8007492:	4811      	ldr	r0, [pc, #68]	; (80074d8 <MX_TIM14_Init+0x94>)
 8007494:	f006 fe90 	bl	800e1b8 <HAL_TIM_PWM_Init>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800749e:	f7ff f993 	bl	80067c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80074a2:	2360      	movs	r3, #96	; 0x60
 80074a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80074a6:	f240 13f3 	movw	r3, #499	; 0x1f3
 80074aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074b4:	1d3b      	adds	r3, r7, #4
 80074b6:	2200      	movs	r2, #0
 80074b8:	4619      	mov	r1, r3
 80074ba:	4807      	ldr	r0, [pc, #28]	; (80074d8 <MX_TIM14_Init+0x94>)
 80074bc:	f006 fffa 	bl	800e4b4 <HAL_TIM_PWM_ConfigChannel>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80074c6:	f7ff f97f 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80074ca:	4803      	ldr	r0, [pc, #12]	; (80074d8 <MX_TIM14_Init+0x94>)
 80074cc:	f000 fb84 	bl	8007bd8 <HAL_TIM_MspPostInit>

}
 80074d0:	bf00      	nop
 80074d2:	3720      	adds	r7, #32
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	24000b1c 	.word	0x24000b1c
 80074dc:	40002000 	.word	0x40002000

080074e0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b09c      	sub	sp, #112	; 0x70
 80074e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80074e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	605a      	str	r2, [r3, #4]
 80074f0:	609a      	str	r2, [r3, #8]
 80074f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80074f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	605a      	str	r2, [r3, #4]
 80074fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007500:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	609a      	str	r2, [r3, #8]
 800750c:	60da      	str	r2, [r3, #12]
 800750e:	611a      	str	r2, [r3, #16]
 8007510:	615a      	str	r2, [r3, #20]
 8007512:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007514:	1d3b      	adds	r3, r7, #4
 8007516:	2234      	movs	r2, #52	; 0x34
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f009 fed4 	bl	80112c8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8007520:	4b3f      	ldr	r3, [pc, #252]	; (8007620 <MX_TIM15_Init+0x140>)
 8007522:	4a40      	ldr	r2, [pc, #256]	; (8007624 <MX_TIM15_Init+0x144>)
 8007524:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550 - 1;
 8007526:	4b3e      	ldr	r3, [pc, #248]	; (8007620 <MX_TIM15_Init+0x140>)
 8007528:	f240 2225 	movw	r2, #549	; 0x225
 800752c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800752e:	4b3c      	ldr	r3, [pc, #240]	; (8007620 <MX_TIM15_Init+0x140>)
 8007530:	2200      	movs	r2, #0
 8007532:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 8007534:	4b3a      	ldr	r3, [pc, #232]	; (8007620 <MX_TIM15_Init+0x140>)
 8007536:	f242 7210 	movw	r2, #10000	; 0x2710
 800753a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800753c:	4b38      	ldr	r3, [pc, #224]	; (8007620 <MX_TIM15_Init+0x140>)
 800753e:	2200      	movs	r2, #0
 8007540:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007542:	4b37      	ldr	r3, [pc, #220]	; (8007620 <MX_TIM15_Init+0x140>)
 8007544:	2200      	movs	r2, #0
 8007546:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007548:	4b35      	ldr	r3, [pc, #212]	; (8007620 <MX_TIM15_Init+0x140>)
 800754a:	2280      	movs	r2, #128	; 0x80
 800754c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800754e:	4834      	ldr	r0, [pc, #208]	; (8007620 <MX_TIM15_Init+0x140>)
 8007550:	f006 fddb 	bl	800e10a <HAL_TIM_Base_Init>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800755a:	f7ff f935 	bl	80067c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800755e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007562:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007564:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007568:	4619      	mov	r1, r3
 800756a:	482d      	ldr	r0, [pc, #180]	; (8007620 <MX_TIM15_Init+0x140>)
 800756c:	f007 f8b6 	bl	800e6dc <HAL_TIM_ConfigClockSource>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8007576:	f7ff f927 	bl	80067c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800757a:	4829      	ldr	r0, [pc, #164]	; (8007620 <MX_TIM15_Init+0x140>)
 800757c:	f006 fe1c 	bl	800e1b8 <HAL_TIM_PWM_Init>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8007586:	f7ff f91f 	bl	80067c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800758a:	2300      	movs	r3, #0
 800758c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800758e:	2300      	movs	r3, #0
 8007590:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007592:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007596:	4619      	mov	r1, r3
 8007598:	4821      	ldr	r0, [pc, #132]	; (8007620 <MX_TIM15_Init+0x140>)
 800759a:	f007 fdd7 	bl	800f14c <HAL_TIMEx_MasterConfigSynchronization>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 80075a4:	f7ff f910 	bl	80067c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80075a8:	2360      	movs	r3, #96	; 0x60
 80075aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80075b0:	2300      	movs	r3, #0
 80075b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80075b4:	2300      	movs	r3, #0
 80075b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80075bc:	2300      	movs	r3, #0
 80075be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80075c0:	2300      	movs	r3, #0
 80075c2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80075c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075c8:	2200      	movs	r2, #0
 80075ca:	4619      	mov	r1, r3
 80075cc:	4814      	ldr	r0, [pc, #80]	; (8007620 <MX_TIM15_Init+0x140>)
 80075ce:	f006 ff71 	bl	800e4b4 <HAL_TIM_PWM_ConfigChannel>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80075d8:	f7ff f8f6 	bl	80067c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80075dc:	2300      	movs	r3, #0
 80075de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80075e0:	2300      	movs	r3, #0
 80075e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80075f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80075fe:	1d3b      	adds	r3, r7, #4
 8007600:	4619      	mov	r1, r3
 8007602:	4807      	ldr	r0, [pc, #28]	; (8007620 <MX_TIM15_Init+0x140>)
 8007604:	f007 fe3e 	bl	800f284 <HAL_TIMEx_ConfigBreakDeadTime>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800760e:	f7ff f8db 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8007612:	4803      	ldr	r0, [pc, #12]	; (8007620 <MX_TIM15_Init+0x140>)
 8007614:	f000 fae0 	bl	8007bd8 <HAL_TIM_MspPostInit>

}
 8007618:	bf00      	nop
 800761a:	3770      	adds	r7, #112	; 0x70
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	24000908 	.word	0x24000908
 8007624:	40014000 	.word	0x40014000

08007628 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b094      	sub	sp, #80	; 0x50
 800762c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800762e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	605a      	str	r2, [r3, #4]
 8007638:	609a      	str	r2, [r3, #8]
 800763a:	60da      	str	r2, [r3, #12]
 800763c:	611a      	str	r2, [r3, #16]
 800763e:	615a      	str	r2, [r3, #20]
 8007640:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007642:	463b      	mov	r3, r7
 8007644:	2234      	movs	r2, #52	; 0x34
 8007646:	2100      	movs	r1, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f009 fe3d 	bl	80112c8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800764e:	4b31      	ldr	r3, [pc, #196]	; (8007714 <MX_TIM16_Init+0xec>)
 8007650:	4a31      	ldr	r2, [pc, #196]	; (8007718 <MX_TIM16_Init+0xf0>)
 8007652:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8007654:	4b2f      	ldr	r3, [pc, #188]	; (8007714 <MX_TIM16_Init+0xec>)
 8007656:	f240 2225 	movw	r2, #549	; 0x225
 800765a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800765c:	4b2d      	ldr	r3, [pc, #180]	; (8007714 <MX_TIM16_Init+0xec>)
 800765e:	2200      	movs	r2, #0
 8007660:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1-1;
 8007662:	4b2c      	ldr	r3, [pc, #176]	; (8007714 <MX_TIM16_Init+0xec>)
 8007664:	2200      	movs	r2, #0
 8007666:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007668:	4b2a      	ldr	r3, [pc, #168]	; (8007714 <MX_TIM16_Init+0xec>)
 800766a:	2200      	movs	r2, #0
 800766c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800766e:	4b29      	ldr	r3, [pc, #164]	; (8007714 <MX_TIM16_Init+0xec>)
 8007670:	2200      	movs	r2, #0
 8007672:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007674:	4b27      	ldr	r3, [pc, #156]	; (8007714 <MX_TIM16_Init+0xec>)
 8007676:	2280      	movs	r2, #128	; 0x80
 8007678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800767a:	4826      	ldr	r0, [pc, #152]	; (8007714 <MX_TIM16_Init+0xec>)
 800767c:	f006 fd45 	bl	800e10a <HAL_TIM_Base_Init>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8007686:	f7ff f89f 	bl	80067c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800768a:	4822      	ldr	r0, [pc, #136]	; (8007714 <MX_TIM16_Init+0xec>)
 800768c:	f006 fd94 	bl	800e1b8 <HAL_TIM_PWM_Init>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8007696:	f7ff f897 	bl	80067c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800769a:	2360      	movs	r3, #96	; 0x60
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 800769e:	f240 13f3 	movw	r3, #499	; 0x1f3
 80076a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80076a4:	2300      	movs	r3, #0
 80076a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80076a8:	2300      	movs	r3, #0
 80076aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80076ac:	2300      	movs	r3, #0
 80076ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80076b0:	2300      	movs	r3, #0
 80076b2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80076b4:	2300      	movs	r3, #0
 80076b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80076b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80076bc:	2200      	movs	r2, #0
 80076be:	4619      	mov	r1, r3
 80076c0:	4814      	ldr	r0, [pc, #80]	; (8007714 <MX_TIM16_Init+0xec>)
 80076c2:	f006 fef7 	bl	800e4b4 <HAL_TIM_PWM_ConfigChannel>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80076cc:	f7ff f87c 	bl	80067c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80076d4:	2300      	movs	r3, #0
 80076d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80076d8:	2300      	movs	r3, #0
 80076da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80076e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80076f2:	463b      	mov	r3, r7
 80076f4:	4619      	mov	r1, r3
 80076f6:	4807      	ldr	r0, [pc, #28]	; (8007714 <MX_TIM16_Init+0xec>)
 80076f8:	f007 fdc4 	bl	800f284 <HAL_TIMEx_ConfigBreakDeadTime>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8007702:	f7ff f861 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8007706:	4803      	ldr	r0, [pc, #12]	; (8007714 <MX_TIM16_Init+0xec>)
 8007708:	f000 fa66 	bl	8007bd8 <HAL_TIM_MspPostInit>

}
 800770c:	bf00      	nop
 800770e:	3750      	adds	r7, #80	; 0x50
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	24000bb4 	.word	0x24000bb4
 8007718:	40014400 	.word	0x40014400

0800771c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b094      	sub	sp, #80	; 0x50
 8007720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007722:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	605a      	str	r2, [r3, #4]
 800772c:	609a      	str	r2, [r3, #8]
 800772e:	60da      	str	r2, [r3, #12]
 8007730:	611a      	str	r2, [r3, #16]
 8007732:	615a      	str	r2, [r3, #20]
 8007734:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007736:	463b      	mov	r3, r7
 8007738:	2234      	movs	r2, #52	; 0x34
 800773a:	2100      	movs	r1, #0
 800773c:	4618      	mov	r0, r3
 800773e:	f009 fdc3 	bl	80112c8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8007742:	4b32      	ldr	r3, [pc, #200]	; (800780c <MX_TIM17_Init+0xf0>)
 8007744:	4a32      	ldr	r2, [pc, #200]	; (8007810 <MX_TIM17_Init+0xf4>)
 8007746:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8007748:	4b30      	ldr	r3, [pc, #192]	; (800780c <MX_TIM17_Init+0xf0>)
 800774a:	f240 2225 	movw	r2, #549	; 0x225
 800774e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007750:	4b2e      	ldr	r3, [pc, #184]	; (800780c <MX_TIM17_Init+0xf0>)
 8007752:	2200      	movs	r2, #0
 8007754:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8007756:	4b2d      	ldr	r3, [pc, #180]	; (800780c <MX_TIM17_Init+0xf0>)
 8007758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800775c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800775e:	4b2b      	ldr	r3, [pc, #172]	; (800780c <MX_TIM17_Init+0xf0>)
 8007760:	2200      	movs	r2, #0
 8007762:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8007764:	4b29      	ldr	r3, [pc, #164]	; (800780c <MX_TIM17_Init+0xf0>)
 8007766:	2200      	movs	r2, #0
 8007768:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800776a:	4b28      	ldr	r3, [pc, #160]	; (800780c <MX_TIM17_Init+0xf0>)
 800776c:	2280      	movs	r2, #128	; 0x80
 800776e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8007770:	4826      	ldr	r0, [pc, #152]	; (800780c <MX_TIM17_Init+0xf0>)
 8007772:	f006 fcca 	bl	800e10a <HAL_TIM_Base_Init>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 800777c:	f7ff f824 	bl	80067c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8007780:	4822      	ldr	r0, [pc, #136]	; (800780c <MX_TIM17_Init+0xf0>)
 8007782:	f006 fd19 	bl	800e1b8 <HAL_TIM_PWM_Init>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 800778c:	f7ff f81c 	bl	80067c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007790:	2360      	movs	r3, #96	; 0x60
 8007792:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8007794:	f240 13f3 	movw	r3, #499	; 0x1f3
 8007798:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800779a:	2300      	movs	r3, #0
 800779c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800779e:	2300      	movs	r3, #0
 80077a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80077a6:	2300      	movs	r3, #0
 80077a8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80077aa:	2300      	movs	r3, #0
 80077ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80077ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80077b2:	2200      	movs	r2, #0
 80077b4:	4619      	mov	r1, r3
 80077b6:	4815      	ldr	r0, [pc, #84]	; (800780c <MX_TIM17_Init+0xf0>)
 80077b8:	f006 fe7c 	bl	800e4b4 <HAL_TIM_PWM_ConfigChannel>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 80077c2:	f7ff f801 	bl	80067c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80077ca:	2300      	movs	r3, #0
 80077cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80077da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80077e8:	463b      	mov	r3, r7
 80077ea:	4619      	mov	r1, r3
 80077ec:	4807      	ldr	r0, [pc, #28]	; (800780c <MX_TIM17_Init+0xf0>)
 80077ee:	f007 fd49 	bl	800f284 <HAL_TIMEx_ConfigBreakDeadTime>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 80077f8:	f7fe ffe6 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80077fc:	4803      	ldr	r0, [pc, #12]	; (800780c <MX_TIM17_Init+0xf0>)
 80077fe:	f000 f9eb 	bl	8007bd8 <HAL_TIM_MspPostInit>

}
 8007802:	bf00      	nop
 8007804:	3750      	adds	r7, #80	; 0x50
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	24000954 	.word	0x24000954
 8007810:	40014800 	.word	0x40014800

08007814 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800781a:	f107 0310 	add.w	r3, r7, #16
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	605a      	str	r2, [r3, #4]
 8007824:	609a      	str	r2, [r3, #8]
 8007826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007828:	1d3b      	adds	r3, r7, #4
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	605a      	str	r2, [r3, #4]
 8007830:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8007832:	4b1e      	ldr	r3, [pc, #120]	; (80078ac <MX_TIM23_Init+0x98>)
 8007834:	4a1e      	ldr	r2, [pc, #120]	; (80078b0 <MX_TIM23_Init+0x9c>)
 8007836:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8007838:	4b1c      	ldr	r3, [pc, #112]	; (80078ac <MX_TIM23_Init+0x98>)
 800783a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800783e:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007840:	4b1a      	ldr	r3, [pc, #104]	; (80078ac <MX_TIM23_Init+0x98>)
 8007842:	2200      	movs	r2, #0
 8007844:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8007846:	4b19      	ldr	r3, [pc, #100]	; (80078ac <MX_TIM23_Init+0x98>)
 8007848:	f04f 32ff 	mov.w	r2, #4294967295
 800784c:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800784e:	4b17      	ldr	r3, [pc, #92]	; (80078ac <MX_TIM23_Init+0x98>)
 8007850:	2200      	movs	r2, #0
 8007852:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007854:	4b15      	ldr	r3, [pc, #84]	; (80078ac <MX_TIM23_Init+0x98>)
 8007856:	2200      	movs	r2, #0
 8007858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800785a:	4814      	ldr	r0, [pc, #80]	; (80078ac <MX_TIM23_Init+0x98>)
 800785c:	f006 fc55 	bl	800e10a <HAL_TIM_Base_Init>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8007866:	f7fe ffaf 	bl	80067c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800786a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800786e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8007870:	f107 0310 	add.w	r3, r7, #16
 8007874:	4619      	mov	r1, r3
 8007876:	480d      	ldr	r0, [pc, #52]	; (80078ac <MX_TIM23_Init+0x98>)
 8007878:	f006 ff30 	bl	800e6dc <HAL_TIM_ConfigClockSource>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8007882:	f7fe ffa1 	bl	80067c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007886:	2300      	movs	r3, #0
 8007888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800788e:	1d3b      	adds	r3, r7, #4
 8007890:	4619      	mov	r1, r3
 8007892:	4806      	ldr	r0, [pc, #24]	; (80078ac <MX_TIM23_Init+0x98>)
 8007894:	f007 fc5a 	bl	800f14c <HAL_TIMEx_MasterConfigSynchronization>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 800789e:	f7fe ff93 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80078a2:	bf00      	nop
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	24000ad0 	.word	0x24000ad0
 80078b0:	4000e000 	.word	0x4000e000

080078b4 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80078ba:	f107 0310 	add.w	r3, r7, #16
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	605a      	str	r2, [r3, #4]
 80078c4:	609a      	str	r2, [r3, #8]
 80078c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078c8:	1d3b      	adds	r3, r7, #4
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	605a      	str	r2, [r3, #4]
 80078d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80078d2:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <MX_TIM24_Init+0x94>)
 80078d4:	4a1d      	ldr	r2, [pc, #116]	; (800794c <MX_TIM24_Init+0x98>)
 80078d6:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80078d8:	4b1b      	ldr	r3, [pc, #108]	; (8007948 <MX_TIM24_Init+0x94>)
 80078da:	2200      	movs	r2, #0
 80078dc:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078de:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <MX_TIM24_Init+0x94>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80078e4:	4b18      	ldr	r3, [pc, #96]	; (8007948 <MX_TIM24_Init+0x94>)
 80078e6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ea:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078ec:	4b16      	ldr	r3, [pc, #88]	; (8007948 <MX_TIM24_Init+0x94>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078f2:	4b15      	ldr	r3, [pc, #84]	; (8007948 <MX_TIM24_Init+0x94>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80078f8:	4813      	ldr	r0, [pc, #76]	; (8007948 <MX_TIM24_Init+0x94>)
 80078fa:	f006 fc06 	bl	800e10a <HAL_TIM_Base_Init>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 8007904:	f7fe ff60 	bl	80067c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800790c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800790e:	f107 0310 	add.w	r3, r7, #16
 8007912:	4619      	mov	r1, r3
 8007914:	480c      	ldr	r0, [pc, #48]	; (8007948 <MX_TIM24_Init+0x94>)
 8007916:	f006 fee1 	bl	800e6dc <HAL_TIM_ConfigClockSource>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 8007920:	f7fe ff52 	bl	80067c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007924:	2300      	movs	r3, #0
 8007926:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800792c:	1d3b      	adds	r3, r7, #4
 800792e:	4619      	mov	r1, r3
 8007930:	4805      	ldr	r0, [pc, #20]	; (8007948 <MX_TIM24_Init+0x94>)
 8007932:	f007 fc0b 	bl	800f14c <HAL_TIMEx_MasterConfigSynchronization>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 800793c:	f7fe ff44 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8007940:	bf00      	nop
 8007942:	3720      	adds	r7, #32
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	24000870 	.word	0x24000870
 800794c:	4000e400 	.word	0x4000e400

08007950 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b094      	sub	sp, #80	; 0x50
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007958:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800795c:	2200      	movs	r2, #0
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	605a      	str	r2, [r3, #4]
 8007962:	609a      	str	r2, [r3, #8]
 8007964:	60da      	str	r2, [r3, #12]
 8007966:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a8d      	ldr	r2, [pc, #564]	; (8007ba4 <HAL_TIM_Base_MspInit+0x254>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d10f      	bne.n	8007992 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007972:	4b8d      	ldr	r3, [pc, #564]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007978:	4a8b      	ldr	r2, [pc, #556]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007982:	4b89      	ldr	r3, [pc, #548]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	63bb      	str	r3, [r7, #56]	; 0x38
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8007990:	e104      	b.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM2)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799a:	d10f      	bne.n	80079bc <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800799c:	4b82      	ldr	r3, [pc, #520]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 800799e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079a2:	4a81      	ldr	r2, [pc, #516]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80079ac:	4b7e      	ldr	r3, [pc, #504]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 80079ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	637b      	str	r3, [r7, #52]	; 0x34
 80079b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80079ba:	e0ef      	b.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM3)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a7a      	ldr	r2, [pc, #488]	; (8007bac <HAL_TIM_Base_MspInit+0x25c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d10f      	bne.n	80079e6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80079c6:	4b78      	ldr	r3, [pc, #480]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 80079c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079cc:	4a76      	ldr	r2, [pc, #472]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 80079ce:	f043 0302 	orr.w	r3, r3, #2
 80079d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80079d6:	4b74      	ldr	r3, [pc, #464]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 80079d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	633b      	str	r3, [r7, #48]	; 0x30
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80079e4:	e0da      	b.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM4)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a71      	ldr	r2, [pc, #452]	; (8007bb0 <HAL_TIM_Base_MspInit+0x260>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d10f      	bne.n	8007a10 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80079f0:	4b6d      	ldr	r3, [pc, #436]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 80079f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079f6:	4a6c      	ldr	r2, [pc, #432]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 80079f8:	f043 0304 	orr.w	r3, r3, #4
 80079fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007a00:	4b69      	ldr	r3, [pc, #420]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007a02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007a0e:	e0c5      	b.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM12)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a67      	ldr	r2, [pc, #412]	; (8007bb4 <HAL_TIM_Base_MspInit+0x264>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d10f      	bne.n	8007a3a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8007a1a:	4b63      	ldr	r3, [pc, #396]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a20:	4a61      	ldr	r2, [pc, #388]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007a2a:	4b5f      	ldr	r3, [pc, #380]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007a38:	e0b0      	b.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM13)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a5e      	ldr	r2, [pc, #376]	; (8007bb8 <HAL_TIM_Base_MspInit+0x268>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d10f      	bne.n	8007a64 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007a44:	4b58      	ldr	r3, [pc, #352]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a4a:	4a57      	ldr	r2, [pc, #348]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007a54:	4b54      	ldr	r3, [pc, #336]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a62:	e09b      	b.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM14)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a54      	ldr	r2, [pc, #336]	; (8007bbc <HAL_TIM_Base_MspInit+0x26c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d10f      	bne.n	8007a8e <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8007a6e:	4b4e      	ldr	r3, [pc, #312]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a74:	4a4c      	ldr	r2, [pc, #304]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007a7e:	4b4a      	ldr	r3, [pc, #296]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a88:	623b      	str	r3, [r7, #32]
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
}
 8007a8c:	e086      	b.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM15)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a4b      	ldr	r2, [pc, #300]	; (8007bc0 <HAL_TIM_Base_MspInit+0x270>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d12e      	bne.n	8007af6 <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007a98:	4b43      	ldr	r3, [pc, #268]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a9e:	4a42      	ldr	r2, [pc, #264]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007aa8:	4b3f      	ldr	r3, [pc, #252]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ab2:	61fb      	str	r3, [r7, #28]
 8007ab4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ab6:	4b3c      	ldr	r3, [pc, #240]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007abc:	4a3a      	ldr	r2, [pc, #232]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007abe:	f043 0301 	orr.w	r3, r3, #1
 8007ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ac6:	4b38      	ldr	r3, [pc, #224]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	61bb      	str	r3, [r7, #24]
 8007ad2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007ad4:	2308      	movs	r3, #8
 8007ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ad8:	2302      	movs	r3, #2
 8007ada:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007adc:	2300      	movs	r3, #0
 8007ade:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ae8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007aec:	4619      	mov	r1, r3
 8007aee:	4835      	ldr	r0, [pc, #212]	; (8007bc4 <HAL_TIM_Base_MspInit+0x274>)
 8007af0:	f002 fff8 	bl	800aae4 <HAL_GPIO_Init>
}
 8007af4:	e052      	b.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM16)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a33      	ldr	r2, [pc, #204]	; (8007bc8 <HAL_TIM_Base_MspInit+0x278>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d10f      	bne.n	8007b20 <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007b00:	4b29      	ldr	r3, [pc, #164]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b06:	4a28      	ldr	r2, [pc, #160]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007b10:	4b25      	ldr	r3, [pc, #148]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	697b      	ldr	r3, [r7, #20]
}
 8007b1e:	e03d      	b.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM17)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a29      	ldr	r2, [pc, #164]	; (8007bcc <HAL_TIM_Base_MspInit+0x27c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d10f      	bne.n	8007b4a <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007b2a:	4b1f      	ldr	r3, [pc, #124]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b30:	4a1d      	ldr	r2, [pc, #116]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007b3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b44:	613b      	str	r3, [r7, #16]
 8007b46:	693b      	ldr	r3, [r7, #16]
}
 8007b48:	e028      	b.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM23)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a20      	ldr	r2, [pc, #128]	; (8007bd0 <HAL_TIM_Base_MspInit+0x280>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d10f      	bne.n	8007b74 <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8007b54:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007b5a:	4a13      	ldr	r2, [pc, #76]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b60:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8007b64:	4b10      	ldr	r3, [pc, #64]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
}
 8007b72:	e013      	b.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM24)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a16      	ldr	r2, [pc, #88]	; (8007bd4 <HAL_TIM_Base_MspInit+0x284>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d10e      	bne.n	8007b9c <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8007b7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b80:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007b84:	4a08      	ldr	r2, [pc, #32]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8007b8e:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <HAL_TIM_Base_MspInit+0x258>)
 8007b90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b98:	60bb      	str	r3, [r7, #8]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
}
 8007b9c:	bf00      	nop
 8007b9e:	3750      	adds	r7, #80	; 0x50
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	40010000 	.word	0x40010000
 8007ba8:	58024400 	.word	0x58024400
 8007bac:	40000400 	.word	0x40000400
 8007bb0:	40000800 	.word	0x40000800
 8007bb4:	40001800 	.word	0x40001800
 8007bb8:	40001c00 	.word	0x40001c00
 8007bbc:	40002000 	.word	0x40002000
 8007bc0:	40014000 	.word	0x40014000
 8007bc4:	58020000 	.word	0x58020000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800
 8007bd0:	4000e000 	.word	0x4000e000
 8007bd4:	4000e400 	.word	0x4000e400

08007bd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b090      	sub	sp, #64	; 0x40
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	605a      	str	r2, [r3, #4]
 8007bea:	609a      	str	r2, [r3, #8]
 8007bec:	60da      	str	r2, [r3, #12]
 8007bee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4aa9      	ldr	r2, [pc, #676]	; (8007e9c <HAL_TIM_MspPostInit+0x2c4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d120      	bne.n	8007c3c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bfa:	4ba9      	ldr	r3, [pc, #676]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c00:	4aa7      	ldr	r2, [pc, #668]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007c02:	f043 0310 	orr.w	r3, r3, #16
 8007c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c0a:	4ba5      	ldr	r3, [pc, #660]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c10:	f003 0310 	and.w	r3, r3, #16
 8007c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c26:	2300      	movs	r3, #0
 8007c28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c32:	4619      	mov	r1, r3
 8007c34:	489b      	ldr	r0, [pc, #620]	; (8007ea4 <HAL_TIM_MspPostInit+0x2cc>)
 8007c36:	f002 ff55 	bl	800aae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8007c3a:	e12a      	b.n	8007e92 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM2)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c44:	d11f      	bne.n	8007c86 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c46:	4b96      	ldr	r3, [pc, #600]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c4c:	4a94      	ldr	r2, [pc, #592]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007c4e:	f043 0301 	orr.w	r3, r3, #1
 8007c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c56:	4b92      	ldr	r3, [pc, #584]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007c64:	2301      	movs	r3, #1
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c68:	2302      	movs	r3, #2
 8007c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c70:	2300      	movs	r3, #0
 8007c72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007c74:	2301      	movs	r3, #1
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	488a      	ldr	r0, [pc, #552]	; (8007ea8 <HAL_TIM_MspPostInit+0x2d0>)
 8007c80:	f002 ff30 	bl	800aae4 <HAL_GPIO_Init>
}
 8007c84:	e105      	b.n	8007e92 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM3)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a88      	ldr	r2, [pc, #544]	; (8007eac <HAL_TIM_MspPostInit+0x2d4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d11f      	bne.n	8007cd0 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c90:	4b83      	ldr	r3, [pc, #524]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c96:	4a82      	ldr	r2, [pc, #520]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007c98:	f043 0304 	orr.w	r3, r3, #4
 8007c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ca0:	4b7f      	ldr	r3, [pc, #508]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	623b      	str	r3, [r7, #32]
 8007cac:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007cae:	2340      	movs	r3, #64	; 0x40
 8007cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4879      	ldr	r0, [pc, #484]	; (8007eb0 <HAL_TIM_MspPostInit+0x2d8>)
 8007cca:	f002 ff0b 	bl	800aae4 <HAL_GPIO_Init>
}
 8007cce:	e0e0      	b.n	8007e92 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM4)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a77      	ldr	r2, [pc, #476]	; (8007eb4 <HAL_TIM_MspPostInit+0x2dc>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d120      	bne.n	8007d1c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cda:	4b71      	ldr	r3, [pc, #452]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ce0:	4a6f      	ldr	r2, [pc, #444]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007ce2:	f043 0308 	orr.w	r3, r3, #8
 8007ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007cea:	4b6d      	ldr	r3, [pc, #436]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d02:	2300      	movs	r3, #0
 8007d04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d06:	2300      	movs	r3, #0
 8007d08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d12:	4619      	mov	r1, r3
 8007d14:	4868      	ldr	r0, [pc, #416]	; (8007eb8 <HAL_TIM_MspPostInit+0x2e0>)
 8007d16:	f002 fee5 	bl	800aae4 <HAL_GPIO_Init>
}
 8007d1a:	e0ba      	b.n	8007e92 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM12)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a66      	ldr	r2, [pc, #408]	; (8007ebc <HAL_TIM_MspPostInit+0x2e4>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d120      	bne.n	8007d68 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d26:	4b5e      	ldr	r3, [pc, #376]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d2c:	4a5c      	ldr	r2, [pc, #368]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007d2e:	f043 0302 	orr.w	r3, r3, #2
 8007d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d36:	4b5a      	ldr	r3, [pc, #360]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	61bb      	str	r3, [r7, #24]
 8007d42:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007d44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d52:	2300      	movs	r3, #0
 8007d54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8007d56:	2302      	movs	r3, #2
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4857      	ldr	r0, [pc, #348]	; (8007ec0 <HAL_TIM_MspPostInit+0x2e8>)
 8007d62:	f002 febf 	bl	800aae4 <HAL_GPIO_Init>
}
 8007d66:	e094      	b.n	8007e92 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM14)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a55      	ldr	r2, [pc, #340]	; (8007ec4 <HAL_TIM_MspPostInit+0x2ec>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d11f      	bne.n	8007db2 <HAL_TIM_MspPostInit+0x1da>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d72:	4b4b      	ldr	r3, [pc, #300]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d78:	4a49      	ldr	r2, [pc, #292]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007d7a:	f043 0301 	orr.w	r3, r3, #1
 8007d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d82:	4b47      	ldr	r3, [pc, #284]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007d90:	2380      	movs	r3, #128	; 0x80
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d94:	2302      	movs	r3, #2
 8007d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8007da0:	2309      	movs	r3, #9
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007da8:	4619      	mov	r1, r3
 8007daa:	483f      	ldr	r0, [pc, #252]	; (8007ea8 <HAL_TIM_MspPostInit+0x2d0>)
 8007dac:	f002 fe9a 	bl	800aae4 <HAL_GPIO_Init>
}
 8007db0:	e06f      	b.n	8007e92 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM15)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a44      	ldr	r2, [pc, #272]	; (8007ec8 <HAL_TIM_MspPostInit+0x2f0>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d11f      	bne.n	8007dfc <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007dbc:	4b38      	ldr	r3, [pc, #224]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dc2:	4a37      	ldr	r2, [pc, #220]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007dc4:	f043 0310 	orr.w	r3, r3, #16
 8007dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007dcc:	4b34      	ldr	r3, [pc, #208]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007dda:	2320      	movs	r3, #32
 8007ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dde:	2302      	movs	r3, #2
 8007de0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007de6:	2300      	movs	r3, #0
 8007de8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8007dea:	2304      	movs	r3, #4
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007df2:	4619      	mov	r1, r3
 8007df4:	482b      	ldr	r0, [pc, #172]	; (8007ea4 <HAL_TIM_MspPostInit+0x2cc>)
 8007df6:	f002 fe75 	bl	800aae4 <HAL_GPIO_Init>
}
 8007dfa:	e04a      	b.n	8007e92 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM16)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a32      	ldr	r2, [pc, #200]	; (8007ecc <HAL_TIM_MspPostInit+0x2f4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d120      	bne.n	8007e48 <HAL_TIM_MspPostInit+0x270>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e06:	4b26      	ldr	r3, [pc, #152]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e0c:	4a24      	ldr	r2, [pc, #144]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007e0e:	f043 0302 	orr.w	r3, r3, #2
 8007e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007e16:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e32:	2300      	movs	r3, #0
 8007e34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8007e36:	2301      	movs	r3, #1
 8007e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e3e:	4619      	mov	r1, r3
 8007e40:	481f      	ldr	r0, [pc, #124]	; (8007ec0 <HAL_TIM_MspPostInit+0x2e8>)
 8007e42:	f002 fe4f 	bl	800aae4 <HAL_GPIO_Init>
}
 8007e46:	e024      	b.n	8007e92 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM17)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a20      	ldr	r2, [pc, #128]	; (8007ed0 <HAL_TIM_MspPostInit+0x2f8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d11f      	bne.n	8007e92 <HAL_TIM_MspPostInit+0x2ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e52:	4b13      	ldr	r3, [pc, #76]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e58:	4a11      	ldr	r2, [pc, #68]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007e5a:	f043 0302 	orr.w	r3, r3, #2
 8007e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007e62:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <HAL_TIM_MspPostInit+0x2c8>)
 8007e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	60bb      	str	r3, [r7, #8]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e76:	2302      	movs	r3, #2
 8007e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8007e82:	2301      	movs	r3, #1
 8007e84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	480c      	ldr	r0, [pc, #48]	; (8007ec0 <HAL_TIM_MspPostInit+0x2e8>)
 8007e8e:	f002 fe29 	bl	800aae4 <HAL_GPIO_Init>
}
 8007e92:	bf00      	nop
 8007e94:	3740      	adds	r7, #64	; 0x40
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	58024400 	.word	0x58024400
 8007ea4:	58021000 	.word	0x58021000
 8007ea8:	58020000 	.word	0x58020000
 8007eac:	40000400 	.word	0x40000400
 8007eb0:	58020800 	.word	0x58020800
 8007eb4:	40000800 	.word	0x40000800
 8007eb8:	58020c00 	.word	0x58020c00
 8007ebc:	40001800 	.word	0x40001800
 8007ec0:	58020400 	.word	0x58020400
 8007ec4:	40002000 	.word	0x40002000
 8007ec8:	40014000 	.word	0x40014000
 8007ecc:	40014400 	.word	0x40014400
 8007ed0:	40014800 	.word	0x40014800

08007ed4 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8007ed8:	4b22      	ldr	r3, [pc, #136]	; (8007f64 <MX_UART4_Init+0x90>)
 8007eda:	4a23      	ldr	r2, [pc, #140]	; (8007f68 <MX_UART4_Init+0x94>)
 8007edc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007ede:	4b21      	ldr	r3, [pc, #132]	; (8007f64 <MX_UART4_Init+0x90>)
 8007ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ee4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007ee6:	4b1f      	ldr	r3, [pc, #124]	; (8007f64 <MX_UART4_Init+0x90>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007eec:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <MX_UART4_Init+0x90>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007ef2:	4b1c      	ldr	r3, [pc, #112]	; (8007f64 <MX_UART4_Init+0x90>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007ef8:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <MX_UART4_Init+0x90>)
 8007efa:	220c      	movs	r2, #12
 8007efc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007efe:	4b19      	ldr	r3, [pc, #100]	; (8007f64 <MX_UART4_Init+0x90>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f04:	4b17      	ldr	r3, [pc, #92]	; (8007f64 <MX_UART4_Init+0x90>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f0a:	4b16      	ldr	r3, [pc, #88]	; (8007f64 <MX_UART4_Init+0x90>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007f10:	4b14      	ldr	r3, [pc, #80]	; (8007f64 <MX_UART4_Init+0x90>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f16:	4b13      	ldr	r3, [pc, #76]	; (8007f64 <MX_UART4_Init+0x90>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007f1c:	4811      	ldr	r0, [pc, #68]	; (8007f64 <MX_UART4_Init+0x90>)
 8007f1e:	f007 fa51 	bl	800f3c4 <HAL_UART_Init>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8007f28:	f7fe fc4e 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	480d      	ldr	r0, [pc, #52]	; (8007f64 <MX_UART4_Init+0x90>)
 8007f30:	f009 f8c8 	bl	80110c4 <HAL_UARTEx_SetTxFifoThreshold>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8007f3a:	f7fe fc45 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f3e:	2100      	movs	r1, #0
 8007f40:	4808      	ldr	r0, [pc, #32]	; (8007f64 <MX_UART4_Init+0x90>)
 8007f42:	f009 f8fd 	bl	8011140 <HAL_UARTEx_SetRxFifoThreshold>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8007f4c:	f7fe fc3c 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8007f50:	4804      	ldr	r0, [pc, #16]	; (8007f64 <MX_UART4_Init+0x90>)
 8007f52:	f009 f87e 	bl	8011052 <HAL_UARTEx_DisableFifoMode>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8007f5c:	f7fe fc34 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8007f60:	bf00      	nop
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	24000d20 	.word	0x24000d20
 8007f68:	40004c00 	.word	0x40004c00

08007f6c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8007f70:	4b22      	ldr	r3, [pc, #136]	; (8007ffc <MX_UART5_Init+0x90>)
 8007f72:	4a23      	ldr	r2, [pc, #140]	; (8008000 <MX_UART5_Init+0x94>)
 8007f74:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8007f76:	4b21      	ldr	r3, [pc, #132]	; (8007ffc <MX_UART5_Init+0x90>)
 8007f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007f7c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007f7e:	4b1f      	ldr	r3, [pc, #124]	; (8007ffc <MX_UART5_Init+0x90>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8007f84:	4b1d      	ldr	r3, [pc, #116]	; (8007ffc <MX_UART5_Init+0x90>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8007f8a:	4b1c      	ldr	r3, [pc, #112]	; (8007ffc <MX_UART5_Init+0x90>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8007f90:	4b1a      	ldr	r3, [pc, #104]	; (8007ffc <MX_UART5_Init+0x90>)
 8007f92:	220c      	movs	r2, #12
 8007f94:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f96:	4b19      	ldr	r3, [pc, #100]	; (8007ffc <MX_UART5_Init+0x90>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f9c:	4b17      	ldr	r3, [pc, #92]	; (8007ffc <MX_UART5_Init+0x90>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007fa2:	4b16      	ldr	r3, [pc, #88]	; (8007ffc <MX_UART5_Init+0x90>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007fa8:	4b14      	ldr	r3, [pc, #80]	; (8007ffc <MX_UART5_Init+0x90>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007fae:	4b13      	ldr	r3, [pc, #76]	; (8007ffc <MX_UART5_Init+0x90>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8007fb4:	4811      	ldr	r0, [pc, #68]	; (8007ffc <MX_UART5_Init+0x90>)
 8007fb6:	f007 fa05 	bl	800f3c4 <HAL_UART_Init>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8007fc0:	f7fe fc02 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	480d      	ldr	r0, [pc, #52]	; (8007ffc <MX_UART5_Init+0x90>)
 8007fc8:	f009 f87c 	bl	80110c4 <HAL_UARTEx_SetTxFifoThreshold>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8007fd2:	f7fe fbf9 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4808      	ldr	r0, [pc, #32]	; (8007ffc <MX_UART5_Init+0x90>)
 8007fda:	f009 f8b1 	bl	8011140 <HAL_UARTEx_SetRxFifoThreshold>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8007fe4:	f7fe fbf0 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8007fe8:	4804      	ldr	r0, [pc, #16]	; (8007ffc <MX_UART5_Init+0x90>)
 8007fea:	f009 f832 	bl	8011052 <HAL_UARTEx_DisableFifoMode>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8007ff4:	f7fe fbe8 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8007ff8:	bf00      	nop
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	24000c90 	.word	0x24000c90
 8008000:	40005000 	.word	0x40005000

08008004 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008008:	4b22      	ldr	r3, [pc, #136]	; (8008094 <MX_USART2_UART_Init+0x90>)
 800800a:	4a23      	ldr	r2, [pc, #140]	; (8008098 <MX_USART2_UART_Init+0x94>)
 800800c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800800e:	4b21      	ldr	r3, [pc, #132]	; (8008094 <MX_USART2_UART_Init+0x90>)
 8008010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008014:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008016:	4b1f      	ldr	r3, [pc, #124]	; (8008094 <MX_USART2_UART_Init+0x90>)
 8008018:	2200      	movs	r2, #0
 800801a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800801c:	4b1d      	ldr	r3, [pc, #116]	; (8008094 <MX_USART2_UART_Init+0x90>)
 800801e:	2200      	movs	r2, #0
 8008020:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008022:	4b1c      	ldr	r3, [pc, #112]	; (8008094 <MX_USART2_UART_Init+0x90>)
 8008024:	2200      	movs	r2, #0
 8008026:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008028:	4b1a      	ldr	r3, [pc, #104]	; (8008094 <MX_USART2_UART_Init+0x90>)
 800802a:	220c      	movs	r2, #12
 800802c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800802e:	4b19      	ldr	r3, [pc, #100]	; (8008094 <MX_USART2_UART_Init+0x90>)
 8008030:	2200      	movs	r2, #0
 8008032:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008034:	4b17      	ldr	r3, [pc, #92]	; (8008094 <MX_USART2_UART_Init+0x90>)
 8008036:	2200      	movs	r2, #0
 8008038:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800803a:	4b16      	ldr	r3, [pc, #88]	; (8008094 <MX_USART2_UART_Init+0x90>)
 800803c:	2200      	movs	r2, #0
 800803e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008040:	4b14      	ldr	r3, [pc, #80]	; (8008094 <MX_USART2_UART_Init+0x90>)
 8008042:	2200      	movs	r2, #0
 8008044:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008046:	4b13      	ldr	r3, [pc, #76]	; (8008094 <MX_USART2_UART_Init+0x90>)
 8008048:	2200      	movs	r2, #0
 800804a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800804c:	4811      	ldr	r0, [pc, #68]	; (8008094 <MX_USART2_UART_Init+0x90>)
 800804e:	f007 f9b9 	bl	800f3c4 <HAL_UART_Init>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008058:	f7fe fbb6 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800805c:	2100      	movs	r1, #0
 800805e:	480d      	ldr	r0, [pc, #52]	; (8008094 <MX_USART2_UART_Init+0x90>)
 8008060:	f009 f830 	bl	80110c4 <HAL_UARTEx_SetTxFifoThreshold>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800806a:	f7fe fbad 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800806e:	2100      	movs	r1, #0
 8008070:	4808      	ldr	r0, [pc, #32]	; (8008094 <MX_USART2_UART_Init+0x90>)
 8008072:	f009 f865 	bl	8011140 <HAL_UARTEx_SetRxFifoThreshold>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800807c:	f7fe fba4 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008080:	4804      	ldr	r0, [pc, #16]	; (8008094 <MX_USART2_UART_Init+0x90>)
 8008082:	f008 ffe6 	bl	8011052 <HAL_UARTEx_DisableFifoMode>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800808c:	f7fe fb9c 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008090:	bf00      	nop
 8008092:	bd80      	pop	{r7, pc}
 8008094:	24000db0 	.word	0x24000db0
 8008098:	40004400 	.word	0x40004400

0800809c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80080a0:	4b22      	ldr	r3, [pc, #136]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080a2:	4a23      	ldr	r2, [pc, #140]	; (8008130 <MX_USART3_UART_Init+0x94>)
 80080a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80080a6:	4b21      	ldr	r3, [pc, #132]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80080ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80080ae:	4b1f      	ldr	r3, [pc, #124]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80080b4:	4b1d      	ldr	r3, [pc, #116]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80080ba:	4b1c      	ldr	r3, [pc, #112]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080bc:	2200      	movs	r2, #0
 80080be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80080c0:	4b1a      	ldr	r3, [pc, #104]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080c2:	220c      	movs	r2, #12
 80080c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80080c6:	4b19      	ldr	r3, [pc, #100]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80080cc:	4b17      	ldr	r3, [pc, #92]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80080d2:	4b16      	ldr	r3, [pc, #88]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80080d8:	4b14      	ldr	r3, [pc, #80]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080da:	2200      	movs	r2, #0
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80080de:	4b13      	ldr	r3, [pc, #76]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80080e4:	4811      	ldr	r0, [pc, #68]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080e6:	f007 f96d 	bl	800f3c4 <HAL_UART_Init>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80080f0:	f7fe fb6a 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80080f4:	2100      	movs	r1, #0
 80080f6:	480d      	ldr	r0, [pc, #52]	; (800812c <MX_USART3_UART_Init+0x90>)
 80080f8:	f008 ffe4 	bl	80110c4 <HAL_UARTEx_SetTxFifoThreshold>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8008102:	f7fe fb61 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008106:	2100      	movs	r1, #0
 8008108:	4808      	ldr	r0, [pc, #32]	; (800812c <MX_USART3_UART_Init+0x90>)
 800810a:	f009 f819 	bl	8011140 <HAL_UARTEx_SetRxFifoThreshold>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8008114:	f7fe fb58 	bl	80067c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <MX_USART3_UART_Init+0x90>)
 800811a:	f008 ff9a 	bl	8011052 <HAL_UARTEx_DisableFifoMode>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8008124:	f7fe fb50 	bl	80067c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008128:	bf00      	nop
 800812a:	bd80      	pop	{r7, pc}
 800812c:	24000c00 	.word	0x24000c00
 8008130:	40004800 	.word	0x40004800

08008134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b0bc      	sub	sp, #240	; 0xf0
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800813c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	605a      	str	r2, [r3, #4]
 8008146:	609a      	str	r2, [r3, #8]
 8008148:	60da      	str	r2, [r3, #12]
 800814a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800814c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008150:	22b4      	movs	r2, #180	; 0xb4
 8008152:	2100      	movs	r1, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f009 f8b7 	bl	80112c8 <memset>
  if(uartHandle->Instance==UART4)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a96      	ldr	r2, [pc, #600]	; (80083b8 <HAL_UART_MspInit+0x284>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d143      	bne.n	80081ec <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8008164:	2302      	movs	r3, #2
 8008166:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008168:	2300      	movs	r3, #0
 800816a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800816e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008172:	4618      	mov	r0, r3
 8008174:	f003 fe16 	bl	800bda4 <HAL_RCCEx_PeriphCLKConfig>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800817e:	f7fe fb23 	bl	80067c8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008182:	4b8e      	ldr	r3, [pc, #568]	; (80083bc <HAL_UART_MspInit+0x288>)
 8008184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008188:	4a8c      	ldr	r2, [pc, #560]	; (80083bc <HAL_UART_MspInit+0x288>)
 800818a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800818e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008192:	4b8a      	ldr	r3, [pc, #552]	; (80083bc <HAL_UART_MspInit+0x288>)
 8008194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081a0:	4b86      	ldr	r3, [pc, #536]	; (80083bc <HAL_UART_MspInit+0x288>)
 80081a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081a6:	4a85      	ldr	r2, [pc, #532]	; (80083bc <HAL_UART_MspInit+0x288>)
 80081a8:	f043 0301 	orr.w	r3, r3, #1
 80081ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80081b0:	4b82      	ldr	r3, [pc, #520]	; (80083bc <HAL_UART_MspInit+0x288>)
 80081b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	623b      	str	r3, [r7, #32]
 80081bc:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80081be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80081c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081c6:	2302      	movs	r3, #2
 80081c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081d2:	2300      	movs	r3, #0
 80081d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80081d8:	2306      	movs	r3, #6
 80081da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80081e2:	4619      	mov	r1, r3
 80081e4:	4876      	ldr	r0, [pc, #472]	; (80083c0 <HAL_UART_MspInit+0x28c>)
 80081e6:	f002 fc7d 	bl	800aae4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80081ea:	e0e0      	b.n	80083ae <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==UART5)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a74      	ldr	r2, [pc, #464]	; (80083c4 <HAL_UART_MspInit+0x290>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d143      	bne.n	800827e <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80081f6:	2302      	movs	r3, #2
 80081f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80081fa:	2300      	movs	r3, #0
 80081fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008204:	4618      	mov	r0, r3
 8008206:	f003 fdcd 	bl	800bda4 <HAL_RCCEx_PeriphCLKConfig>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8008210:	f7fe fada 	bl	80067c8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8008214:	4b69      	ldr	r3, [pc, #420]	; (80083bc <HAL_UART_MspInit+0x288>)
 8008216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800821a:	4a68      	ldr	r2, [pc, #416]	; (80083bc <HAL_UART_MspInit+0x288>)
 800821c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008220:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008224:	4b65      	ldr	r3, [pc, #404]	; (80083bc <HAL_UART_MspInit+0x288>)
 8008226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800822a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800822e:	61fb      	str	r3, [r7, #28]
 8008230:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008232:	4b62      	ldr	r3, [pc, #392]	; (80083bc <HAL_UART_MspInit+0x288>)
 8008234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008238:	4a60      	ldr	r2, [pc, #384]	; (80083bc <HAL_UART_MspInit+0x288>)
 800823a:	f043 0302 	orr.w	r3, r3, #2
 800823e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008242:	4b5e      	ldr	r3, [pc, #376]	; (80083bc <HAL_UART_MspInit+0x288>)
 8008244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	61bb      	str	r3, [r7, #24]
 800824e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8008250:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008254:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008258:	2302      	movs	r3, #2
 800825a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800825e:	2300      	movs	r3, #0
 8008260:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008264:	2300      	movs	r3, #0
 8008266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800826a:	230e      	movs	r3, #14
 800826c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008270:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008274:	4619      	mov	r1, r3
 8008276:	4854      	ldr	r0, [pc, #336]	; (80083c8 <HAL_UART_MspInit+0x294>)
 8008278:	f002 fc34 	bl	800aae4 <HAL_GPIO_Init>
}
 800827c:	e097      	b.n	80083ae <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART2)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a52      	ldr	r2, [pc, #328]	; (80083cc <HAL_UART_MspInit+0x298>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d142      	bne.n	800830e <HAL_UART_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008288:	2302      	movs	r3, #2
 800828a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800828c:	2300      	movs	r3, #0
 800828e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008296:	4618      	mov	r0, r3
 8008298:	f003 fd84 	bl	800bda4 <HAL_RCCEx_PeriphCLKConfig>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <HAL_UART_MspInit+0x172>
      Error_Handler();
 80082a2:	f7fe fa91 	bl	80067c8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80082a6:	4b45      	ldr	r3, [pc, #276]	; (80083bc <HAL_UART_MspInit+0x288>)
 80082a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082ac:	4a43      	ldr	r2, [pc, #268]	; (80083bc <HAL_UART_MspInit+0x288>)
 80082ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80082b6:	4b41      	ldr	r3, [pc, #260]	; (80083bc <HAL_UART_MspInit+0x288>)
 80082b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c0:	617b      	str	r3, [r7, #20]
 80082c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80082c4:	4b3d      	ldr	r3, [pc, #244]	; (80083bc <HAL_UART_MspInit+0x288>)
 80082c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082ca:	4a3c      	ldr	r2, [pc, #240]	; (80083bc <HAL_UART_MspInit+0x288>)
 80082cc:	f043 0308 	orr.w	r3, r3, #8
 80082d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082d4:	4b39      	ldr	r3, [pc, #228]	; (80083bc <HAL_UART_MspInit+0x288>)
 80082d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082da:	f003 0308 	and.w	r3, r3, #8
 80082de:	613b      	str	r3, [r7, #16]
 80082e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80082e2:	2360      	movs	r3, #96	; 0x60
 80082e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e8:	2302      	movs	r3, #2
 80082ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082f4:	2300      	movs	r3, #0
 80082f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80082fa:	2307      	movs	r3, #7
 80082fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008300:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008304:	4619      	mov	r1, r3
 8008306:	4832      	ldr	r0, [pc, #200]	; (80083d0 <HAL_UART_MspInit+0x29c>)
 8008308:	f002 fbec 	bl	800aae4 <HAL_GPIO_Init>
}
 800830c:	e04f      	b.n	80083ae <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART3)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a30      	ldr	r2, [pc, #192]	; (80083d4 <HAL_UART_MspInit+0x2a0>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d14a      	bne.n	80083ae <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008318:	2302      	movs	r3, #2
 800831a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800831c:	2300      	movs	r3, #0
 800831e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008326:	4618      	mov	r0, r3
 8008328:	f003 fd3c 	bl	800bda4 <HAL_RCCEx_PeriphCLKConfig>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8008332:	f7fe fa49 	bl	80067c8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008336:	4b21      	ldr	r3, [pc, #132]	; (80083bc <HAL_UART_MspInit+0x288>)
 8008338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800833c:	4a1f      	ldr	r2, [pc, #124]	; (80083bc <HAL_UART_MspInit+0x288>)
 800833e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008342:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008346:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <HAL_UART_MspInit+0x288>)
 8008348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800834c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008354:	4b19      	ldr	r3, [pc, #100]	; (80083bc <HAL_UART_MspInit+0x288>)
 8008356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800835a:	4a18      	ldr	r2, [pc, #96]	; (80083bc <HAL_UART_MspInit+0x288>)
 800835c:	f043 0302 	orr.w	r3, r3, #2
 8008360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008364:	4b15      	ldr	r3, [pc, #84]	; (80083bc <HAL_UART_MspInit+0x288>)
 8008366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	60bb      	str	r3, [r7, #8]
 8008370:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008372:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800837a:	2302      	movs	r3, #2
 800837c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008380:	2300      	movs	r3, #0
 8008382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008386:	2300      	movs	r3, #0
 8008388:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800838c:	2307      	movs	r3, #7
 800838e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008392:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008396:	4619      	mov	r1, r3
 8008398:	480b      	ldr	r0, [pc, #44]	; (80083c8 <HAL_UART_MspInit+0x294>)
 800839a:	f002 fba3 	bl	800aae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800839e:	2200      	movs	r2, #0
 80083a0:	2100      	movs	r1, #0
 80083a2:	2027      	movs	r0, #39	; 0x27
 80083a4:	f001 fd1d 	bl	8009de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80083a8:	2027      	movs	r0, #39	; 0x27
 80083aa:	f001 fd34 	bl	8009e16 <HAL_NVIC_EnableIRQ>
}
 80083ae:	bf00      	nop
 80083b0:	37f0      	adds	r7, #240	; 0xf0
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40004c00 	.word	0x40004c00
 80083bc:	58024400 	.word	0x58024400
 80083c0:	58020000 	.word	0x58020000
 80083c4:	40005000 	.word	0x40005000
 80083c8:	58020400 	.word	0x58020400
 80083cc:	40004400 	.word	0x40004400
 80083d0:	58020c00 	.word	0x58020c00
 80083d4:	40004800 	.word	0x40004800

080083d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80083d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008410 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80083dc:	f7fe fd1c 	bl	8006e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80083e0:	480c      	ldr	r0, [pc, #48]	; (8008414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80083e2:	490d      	ldr	r1, [pc, #52]	; (8008418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80083e4:	4a0d      	ldr	r2, [pc, #52]	; (800841c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80083e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80083e8:	e002      	b.n	80083f0 <LoopCopyDataInit>

080083ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80083ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80083ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80083ee:	3304      	adds	r3, #4

080083f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80083f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80083f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80083f4:	d3f9      	bcc.n	80083ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80083f6:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80083f8:	4c0a      	ldr	r4, [pc, #40]	; (8008424 <LoopFillZerobss+0x22>)
  movs r3, #0
 80083fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80083fc:	e001      	b.n	8008402 <LoopFillZerobss>

080083fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80083fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008400:	3204      	adds	r2, #4

08008402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008404:	d3fb      	bcc.n	80083fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008406:	f008 ff2d 	bl	8011264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800840a:	f7fd fd75 	bl	8005ef8 <main>
  bx  lr
 800840e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008410:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008414:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008418:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 800841c:	08014db0 	.word	0x08014db0
  ldr r2, =_sbss
 8008420:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8008424:	24000e54 	.word	0x24000e54

08008428 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008428:	e7fe      	b.n	8008428 <ADC3_IRQHandler>
	...

0800842c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008432:	2003      	movs	r0, #3
 8008434:	f001 fcca 	bl	8009dcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008438:	f003 fac2 	bl	800b9c0 <HAL_RCC_GetSysClockFreq>
 800843c:	4602      	mov	r2, r0
 800843e:	4b15      	ldr	r3, [pc, #84]	; (8008494 <HAL_Init+0x68>)
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	0a1b      	lsrs	r3, r3, #8
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	4913      	ldr	r1, [pc, #76]	; (8008498 <HAL_Init+0x6c>)
 800844a:	5ccb      	ldrb	r3, [r1, r3]
 800844c:	f003 031f 	and.w	r3, r3, #31
 8008450:	fa22 f303 	lsr.w	r3, r2, r3
 8008454:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008456:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <HAL_Init+0x68>)
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	4a0e      	ldr	r2, [pc, #56]	; (8008498 <HAL_Init+0x6c>)
 8008460:	5cd3      	ldrb	r3, [r2, r3]
 8008462:	f003 031f 	and.w	r3, r3, #31
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	fa22 f303 	lsr.w	r3, r2, r3
 800846c:	4a0b      	ldr	r2, [pc, #44]	; (800849c <HAL_Init+0x70>)
 800846e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008470:	4a0b      	ldr	r2, [pc, #44]	; (80084a0 <HAL_Init+0x74>)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008476:	2000      	movs	r0, #0
 8008478:	f000 f814 	bl	80084a4 <HAL_InitTick>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e002      	b.n	800848c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008486:	f7fe fba1 	bl	8006bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	58024400 	.word	0x58024400
 8008498:	080147a8 	.word	0x080147a8
 800849c:	24000004 	.word	0x24000004
 80084a0:	24000000 	.word	0x24000000

080084a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80084ac:	4b15      	ldr	r3, [pc, #84]	; (8008504 <HAL_InitTick+0x60>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e021      	b.n	80084fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80084b8:	4b13      	ldr	r3, [pc, #76]	; (8008508 <HAL_InitTick+0x64>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	4b11      	ldr	r3, [pc, #68]	; (8008504 <HAL_InitTick+0x60>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	4619      	mov	r1, r3
 80084c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80084ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 fcaf 	bl	8009e32 <HAL_SYSTICK_Config>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e00e      	b.n	80084fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b0f      	cmp	r3, #15
 80084e2:	d80a      	bhi.n	80084fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084e4:	2200      	movs	r2, #0
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	f001 fc79 	bl	8009de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084f0:	4a06      	ldr	r2, [pc, #24]	; (800850c <HAL_InitTick+0x68>)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	e000      	b.n	80084fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	2400000c 	.word	0x2400000c
 8008508:	24000000 	.word	0x24000000
 800850c:	24000008 	.word	0x24000008

08008510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008514:	4b06      	ldr	r3, [pc, #24]	; (8008530 <HAL_IncTick+0x20>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	4b06      	ldr	r3, [pc, #24]	; (8008534 <HAL_IncTick+0x24>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4413      	add	r3, r2
 8008520:	4a04      	ldr	r2, [pc, #16]	; (8008534 <HAL_IncTick+0x24>)
 8008522:	6013      	str	r3, [r2, #0]
}
 8008524:	bf00      	nop
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	2400000c 	.word	0x2400000c
 8008534:	24000e40 	.word	0x24000e40

08008538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
  return uwTick;
 800853c:	4b03      	ldr	r3, [pc, #12]	; (800854c <HAL_GetTick+0x14>)
 800853e:	681b      	ldr	r3, [r3, #0]
}
 8008540:	4618      	mov	r0, r3
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	24000e40 	.word	0x24000e40

08008550 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	431a      	orrs	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	609a      	str	r2, [r3, #8]
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	609a      	str	r2, [r3, #8]
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3360      	adds	r3, #96	; 0x60
 80085ca:	461a      	mov	r2, r3
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4a10      	ldr	r2, [pc, #64]	; (8008618 <LL_ADC_SetOffset+0x60>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d10b      	bne.n	80085f4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80085f2:	e00b      	b.n	800860c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	430b      	orrs	r3, r1
 8008606:	431a      	orrs	r2, r3
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	601a      	str	r2, [r3, #0]
}
 800860c:	bf00      	nop
 800860e:	371c      	adds	r7, #28
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	58026000 	.word	0x58026000

0800861c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3360      	adds	r3, #96	; 0x60
 800862a:	461a      	mov	r2, r3
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800863c:	4618      	mov	r0, r3
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 031f 	and.w	r3, r3, #31
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	fa01 f303 	lsl.w	r3, r1, r3
 8008668:	431a      	orrs	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	611a      	str	r2, [r3, #16]
}
 800866e:	bf00      	nop
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
	...

0800867c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4a0c      	ldr	r2, [pc, #48]	; (80086bc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00e      	beq.n	80086ae <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3360      	adds	r3, #96	; 0x60
 8008694:	461a      	mov	r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	431a      	orrs	r2, r3
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	601a      	str	r2, [r3, #0]
  }
}
 80086ae:	bf00      	nop
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	58026000 	.word	0x58026000

080086c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4a0c      	ldr	r2, [pc, #48]	; (8008700 <LL_ADC_SetOffsetSaturation+0x40>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d10e      	bne.n	80086f2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3360      	adds	r3, #96	; 0x60
 80086d8:	461a      	mov	r2, r3
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	431a      	orrs	r2, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	58026000 	.word	0x58026000

08008704 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4a0c      	ldr	r2, [pc, #48]	; (8008744 <LL_ADC_SetOffsetSign+0x40>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d10e      	bne.n	8008736 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3360      	adds	r3, #96	; 0x60
 800871c:	461a      	mov	r2, r3
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	431a      	orrs	r2, r3
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8008736:	bf00      	nop
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	58026000 	.word	0x58026000

08008748 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3360      	adds	r3, #96	; 0x60
 8008758:	461a      	mov	r2, r3
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	4a0c      	ldr	r2, [pc, #48]	; (8008798 <LL_ADC_SetOffsetState+0x50>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d108      	bne.n	800877c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	431a      	orrs	r2, r3
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800877a:	e007      	b.n	800878c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	431a      	orrs	r2, r3
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	601a      	str	r2, [r3, #0]
}
 800878c:	bf00      	nop
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	58026000 	.word	0x58026000

0800879c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3330      	adds	r3, #48	; 0x30
 80087ac:	461a      	mov	r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	0a1b      	lsrs	r3, r3, #8
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	f003 030c 	and.w	r3, r3, #12
 80087b8:	4413      	add	r3, r2
 80087ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f003 031f 	and.w	r3, r3, #31
 80087c6:	211f      	movs	r1, #31
 80087c8:	fa01 f303 	lsl.w	r3, r1, r3
 80087cc:	43db      	mvns	r3, r3
 80087ce:	401a      	ands	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	0e9b      	lsrs	r3, r3, #26
 80087d4:	f003 011f 	and.w	r1, r3, #31
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	f003 031f 	and.w	r3, r3, #31
 80087de:	fa01 f303 	lsl.w	r3, r1, r3
 80087e2:	431a      	orrs	r2, r3
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80087e8:	bf00      	nop
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b087      	sub	sp, #28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3314      	adds	r3, #20
 8008804:	461a      	mov	r2, r3
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	0e5b      	lsrs	r3, r3, #25
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	4413      	add	r3, r2
 8008812:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	0d1b      	lsrs	r3, r3, #20
 800881c:	f003 031f 	and.w	r3, r3, #31
 8008820:	2107      	movs	r1, #7
 8008822:	fa01 f303 	lsl.w	r3, r1, r3
 8008826:	43db      	mvns	r3, r3
 8008828:	401a      	ands	r2, r3
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	0d1b      	lsrs	r3, r3, #20
 800882e:	f003 031f 	and.w	r3, r3, #31
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	fa01 f303 	lsl.w	r3, r1, r3
 8008838:	431a      	orrs	r2, r3
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4a1a      	ldr	r2, [pc, #104]	; (80088c4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d115      	bne.n	800888c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800886c:	43db      	mvns	r3, r3
 800886e:	401a      	ands	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f003 0318 	and.w	r3, r3, #24
 8008876:	4914      	ldr	r1, [pc, #80]	; (80088c8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008878:	40d9      	lsrs	r1, r3
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	400b      	ands	r3, r1
 800887e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008882:	431a      	orrs	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800888a:	e014      	b.n	80088b6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008898:	43db      	mvns	r3, r3
 800889a:	401a      	ands	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f003 0318 	and.w	r3, r3, #24
 80088a2:	4909      	ldr	r1, [pc, #36]	; (80088c8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80088a4:	40d9      	lsrs	r1, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	400b      	ands	r3, r1
 80088aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088ae:	431a      	orrs	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	58026000 	.word	0x58026000
 80088c8:	000fffff 	.word	0x000fffff

080088cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	4b04      	ldr	r3, [pc, #16]	; (80088ec <LL_ADC_DisableDeepPowerDown+0x20>)
 80088da:	4013      	ands	r3, r2
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	6093      	str	r3, [r2, #8]
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	5fffffc0 	.word	0x5fffffc0

080088f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008904:	d101      	bne.n	800890a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008906:	2301      	movs	r3, #1
 8008908:	e000      	b.n	800890c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <LL_ADC_EnableInternalRegulator+0x24>)
 8008926:	4013      	ands	r3, r2
 8008928:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	6fffffc0 	.word	0x6fffffc0

08008940 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008954:	d101      	bne.n	800895a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008956:	2301      	movs	r3, #1
 8008958:	e000      	b.n	800895c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b01      	cmp	r3, #1
 800897a:	d101      	bne.n	8008980 <LL_ADC_IsEnabled+0x18>
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <LL_ADC_IsEnabled+0x1a>
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f003 0304 	and.w	r3, r3, #4
 800899e:	2b04      	cmp	r3, #4
 80089a0:	d101      	bne.n	80089a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f003 0308 	and.w	r3, r3, #8
 80089c4:	2b08      	cmp	r3, #8
 80089c6:	d101      	bne.n	80089cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
	...

080089dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80089dc:	b590      	push	{r4, r7, lr}
 80089de:	b089      	sub	sp, #36	; 0x24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80089e8:	2300      	movs	r3, #0
 80089ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e1ee      	b.n	8008dd4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d109      	bne.n	8008a18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7f8 f909 	bl	8000c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff ff67 	bl	80088f0 <LL_ADC_IsDeepPowerDownEnabled>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7ff ff4d 	bl	80088cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff ff82 	bl	8008940 <LL_ADC_IsInternalRegulatorEnabled>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d114      	bne.n	8008a6c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff ff66 	bl	8008918 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008a4c:	4b8e      	ldr	r3, [pc, #568]	; (8008c88 <HAL_ADC_Init+0x2ac>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	099b      	lsrs	r3, r3, #6
 8008a52:	4a8e      	ldr	r2, [pc, #568]	; (8008c8c <HAL_ADC_Init+0x2b0>)
 8008a54:	fba2 2303 	umull	r2, r3, r2, r3
 8008a58:	099b      	lsrs	r3, r3, #6
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008a5e:	e002      	b.n	8008a66 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1f9      	bne.n	8008a60 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff ff65 	bl	8008940 <LL_ADC_IsInternalRegulatorEnabled>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10d      	bne.n	8008a98 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a80:	f043 0210 	orr.w	r2, r3, #16
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a8c:	f043 0201 	orr.w	r2, r3, #1
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7ff ff76 	bl	800898e <LL_ADC_REG_IsConversionOngoing>
 8008aa2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f040 8188 	bne.w	8008dc2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f040 8184 	bne.w	8008dc2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008abe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008ac2:	f043 0202 	orr.w	r2, r3, #2
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff ff4a 	bl	8008968 <LL_ADC_IsEnabled>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d136      	bne.n	8008b48 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a6c      	ldr	r2, [pc, #432]	; (8008c90 <HAL_ADC_Init+0x2b4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d004      	beq.n	8008aee <HAL_ADC_Init+0x112>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a6a      	ldr	r2, [pc, #424]	; (8008c94 <HAL_ADC_Init+0x2b8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d10e      	bne.n	8008b0c <HAL_ADC_Init+0x130>
 8008aee:	4868      	ldr	r0, [pc, #416]	; (8008c90 <HAL_ADC_Init+0x2b4>)
 8008af0:	f7ff ff3a 	bl	8008968 <LL_ADC_IsEnabled>
 8008af4:	4604      	mov	r4, r0
 8008af6:	4867      	ldr	r0, [pc, #412]	; (8008c94 <HAL_ADC_Init+0x2b8>)
 8008af8:	f7ff ff36 	bl	8008968 <LL_ADC_IsEnabled>
 8008afc:	4603      	mov	r3, r0
 8008afe:	4323      	orrs	r3, r4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bf0c      	ite	eq
 8008b04:	2301      	moveq	r3, #1
 8008b06:	2300      	movne	r3, #0
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	e008      	b.n	8008b1e <HAL_ADC_Init+0x142>
 8008b0c:	4862      	ldr	r0, [pc, #392]	; (8008c98 <HAL_ADC_Init+0x2bc>)
 8008b0e:	f7ff ff2b 	bl	8008968 <LL_ADC_IsEnabled>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	bf0c      	ite	eq
 8008b18:	2301      	moveq	r3, #1
 8008b1a:	2300      	movne	r3, #0
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d012      	beq.n	8008b48 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a5a      	ldr	r2, [pc, #360]	; (8008c90 <HAL_ADC_Init+0x2b4>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d004      	beq.n	8008b36 <HAL_ADC_Init+0x15a>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a58      	ldr	r2, [pc, #352]	; (8008c94 <HAL_ADC_Init+0x2b8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d101      	bne.n	8008b3a <HAL_ADC_Init+0x15e>
 8008b36:	4a59      	ldr	r2, [pc, #356]	; (8008c9c <HAL_ADC_Init+0x2c0>)
 8008b38:	e000      	b.n	8008b3c <HAL_ADC_Init+0x160>
 8008b3a:	4a59      	ldr	r2, [pc, #356]	; (8008ca0 <HAL_ADC_Init+0x2c4>)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	4619      	mov	r1, r3
 8008b42:	4610      	mov	r0, r2
 8008b44:	f7ff fd04 	bl	8008550 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a52      	ldr	r2, [pc, #328]	; (8008c98 <HAL_ADC_Init+0x2bc>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d129      	bne.n	8008ba6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	7e5b      	ldrb	r3, [r3, #25]
 8008b56:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008b5c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8008b62:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d013      	beq.n	8008b94 <HAL_ADC_Init+0x1b8>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	2b0c      	cmp	r3, #12
 8008b72:	d00d      	beq.n	8008b90 <HAL_ADC_Init+0x1b4>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	2b1c      	cmp	r3, #28
 8008b7a:	d007      	beq.n	8008b8c <HAL_ADC_Init+0x1b0>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	2b18      	cmp	r3, #24
 8008b82:	d101      	bne.n	8008b88 <HAL_ADC_Init+0x1ac>
 8008b84:	2318      	movs	r3, #24
 8008b86:	e006      	b.n	8008b96 <HAL_ADC_Init+0x1ba>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e004      	b.n	8008b96 <HAL_ADC_Init+0x1ba>
 8008b8c:	2310      	movs	r3, #16
 8008b8e:	e002      	b.n	8008b96 <HAL_ADC_Init+0x1ba>
 8008b90:	2308      	movs	r3, #8
 8008b92:	e000      	b.n	8008b96 <HAL_ADC_Init+0x1ba>
 8008b94:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8008b96:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b9e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	61bb      	str	r3, [r7, #24]
 8008ba4:	e00e      	b.n	8008bc4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	7e5b      	ldrb	r3, [r3, #25]
 8008baa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8008bb0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8008bb6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bbe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d106      	bne.n	8008bdc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	045b      	lsls	r3, r3, #17
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d009      	beq.n	8008bf8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a26      	ldr	r2, [pc, #152]	; (8008c98 <HAL_ADC_Init+0x2bc>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d115      	bne.n	8008c2e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	4b26      	ldr	r3, [pc, #152]	; (8008ca4 <HAL_ADC_Init+0x2c8>)
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	6812      	ldr	r2, [r2, #0]
 8008c10:	69b9      	ldr	r1, [r7, #24]
 8008c12:	430b      	orrs	r3, r1
 8008c14:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	611a      	str	r2, [r3, #16]
 8008c2c:	e009      	b.n	8008c42 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	4b1c      	ldr	r3, [pc, #112]	; (8008ca8 <HAL_ADC_Init+0x2cc>)
 8008c36:	4013      	ands	r3, r2
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	6812      	ldr	r2, [r2, #0]
 8008c3c:	69b9      	ldr	r1, [r7, #24]
 8008c3e:	430b      	orrs	r3, r1
 8008c40:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff fea1 	bl	800898e <LL_ADC_REG_IsConversionOngoing>
 8008c4c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff feae 	bl	80089b4 <LL_ADC_INJ_IsConversionOngoing>
 8008c58:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f040 808e 	bne.w	8008d7e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f040 808a 	bne.w	8008d7e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a0a      	ldr	r2, [pc, #40]	; (8008c98 <HAL_ADC_Init+0x2bc>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d11b      	bne.n	8008cac <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	7e1b      	ldrb	r3, [r3, #24]
 8008c78:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c80:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8008c82:	4313      	orrs	r3, r2
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	e018      	b.n	8008cba <HAL_ADC_Init+0x2de>
 8008c88:	24000000 	.word	0x24000000
 8008c8c:	053e2d63 	.word	0x053e2d63
 8008c90:	40022000 	.word	0x40022000
 8008c94:	40022100 	.word	0x40022100
 8008c98:	58026000 	.word	0x58026000
 8008c9c:	40022300 	.word	0x40022300
 8008ca0:	58026300 	.word	0x58026300
 8008ca4:	fff04007 	.word	0xfff04007
 8008ca8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	7e1b      	ldrb	r3, [r3, #24]
 8008cb0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	4b46      	ldr	r3, [pc, #280]	; (8008ddc <HAL_ADC_Init+0x400>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6812      	ldr	r2, [r2, #0]
 8008cc8:	69b9      	ldr	r1, [r7, #24]
 8008cca:	430b      	orrs	r3, r1
 8008ccc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d137      	bne.n	8008d48 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a3f      	ldr	r2, [pc, #252]	; (8008de0 <HAL_ADC_Init+0x404>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d116      	bne.n	8008d16 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691a      	ldr	r2, [r3, #16]
 8008cee:	4b3d      	ldr	r3, [pc, #244]	; (8008de4 <HAL_ADC_Init+0x408>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008cfa:	4311      	orrs	r1, r2
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d00:	4311      	orrs	r1, r2
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008d06:	430a      	orrs	r2, r1
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0201 	orr.w	r2, r2, #1
 8008d12:	611a      	str	r2, [r3, #16]
 8008d14:	e020      	b.n	8008d58 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	691a      	ldr	r2, [r3, #16]
 8008d1c:	4b32      	ldr	r3, [pc, #200]	; (8008de8 <HAL_ADC_Init+0x40c>)
 8008d1e:	4013      	ands	r3, r2
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d24:	3a01      	subs	r2, #1
 8008d26:	0411      	lsls	r1, r2, #16
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008d2c:	4311      	orrs	r1, r2
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d32:	4311      	orrs	r1, r2
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f042 0201 	orr.w	r2, r2, #1
 8008d44:	611a      	str	r2, [r3, #16]
 8008d46:	e007      	b.n	8008d58 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691a      	ldr	r2, [r3, #16]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 0201 	bic.w	r2, r2, #1
 8008d56:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a1b      	ldr	r2, [pc, #108]	; (8008de0 <HAL_ADC_Init+0x404>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d002      	beq.n	8008d7e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fd63 	bl	8009844 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d10c      	bne.n	8008da0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	f023 010f 	bic.w	r1, r3, #15
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	1e5a      	subs	r2, r3, #1
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8008d9e:	e007      	b.n	8008db0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 020f 	bic.w	r2, r2, #15
 8008dae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008db4:	f023 0303 	bic.w	r3, r3, #3
 8008db8:	f043 0201 	orr.w	r2, r3, #1
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	661a      	str	r2, [r3, #96]	; 0x60
 8008dc0:	e007      	b.n	8008dd2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc6:	f043 0210 	orr.w	r2, r3, #16
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008dd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3724      	adds	r7, #36	; 0x24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd90      	pop	{r4, r7, pc}
 8008ddc:	ffffbffc 	.word	0xffffbffc
 8008de0:	58026000 	.word	0x58026000
 8008de4:	fc00f81f 	.word	0xfc00f81f
 8008de8:	fc00f81e 	.word	0xfc00f81e

08008dec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b0b9      	sub	sp, #228	; 0xe4
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e06:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	4ab3      	ldr	r2, [pc, #716]	; (80090dc <HAL_ADC_ConfigChannel+0x2f0>)
 8008e0e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d102      	bne.n	8008e20 <HAL_ADC_ConfigChannel+0x34>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	f000 bcfa 	b.w	8009814 <HAL_ADC_ConfigChannel+0xa28>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff fdae 	bl	800898e <LL_ADC_REG_IsConversionOngoing>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f040 84de 	bne.w	80097f6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4aa8      	ldr	r2, [pc, #672]	; (80090e0 <HAL_ADC_ConfigChannel+0x2f4>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d033      	beq.n	8008eac <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d108      	bne.n	8008e62 <HAL_ADC_ConfigChannel+0x76>
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	0e9b      	lsrs	r3, r3, #26
 8008e56:	f003 031f 	and.w	r3, r3, #31
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e60:	e01d      	b.n	8008e9e <HAL_ADC_ConfigChannel+0xb2>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e6e:	fa93 f3a3 	rbit	r3, r3
 8008e72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008e76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8008e86:	2320      	movs	r3, #32
 8008e88:	e004      	b.n	8008e94 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8008e8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e8e:	fab3 f383 	clz	r3, r3
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	f003 031f 	and.w	r3, r3, #31
 8008e98:	2201      	movs	r2, #1
 8008e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	6812      	ldr	r2, [r2, #0]
 8008ea2:	69d1      	ldr	r1, [r2, #28]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	6812      	ldr	r2, [r2, #0]
 8008ea8:	430b      	orrs	r3, r1
 8008eaa:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	6859      	ldr	r1, [r3, #4]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f7ff fc6f 	bl	800879c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff fd63 	bl	800898e <LL_ADC_REG_IsConversionOngoing>
 8008ec8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7ff fd6f 	bl	80089b4 <LL_ADC_INJ_IsConversionOngoing>
 8008ed6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f040 8270 	bne.w	80093c4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008ee4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f040 826b 	bne.w	80093c4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	6819      	ldr	r1, [r3, #0]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	461a      	mov	r2, r3
 8008efc:	f7ff fc7a 	bl	80087f4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a76      	ldr	r2, [pc, #472]	; (80090e0 <HAL_ADC_ConfigChannel+0x2f4>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d10d      	bne.n	8008f26 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	695a      	ldr	r2, [r3, #20]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	08db      	lsrs	r3, r3, #3
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f24:	e032      	b.n	8008f8c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008f26:	4b6f      	ldr	r3, [pc, #444]	; (80090e4 <HAL_ADC_ConfigChannel+0x2f8>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f32:	d10b      	bne.n	8008f4c <HAL_ADC_ConfigChannel+0x160>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	695a      	ldr	r2, [r3, #20]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	089b      	lsrs	r3, r3, #2
 8008f40:	f003 0307 	and.w	r3, r3, #7
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4a:	e01d      	b.n	8008f88 <HAL_ADC_ConfigChannel+0x19c>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f003 0310 	and.w	r3, r3, #16
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10b      	bne.n	8008f72 <HAL_ADC_ConfigChannel+0x186>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	695a      	ldr	r2, [r3, #20]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	089b      	lsrs	r3, r3, #2
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f70:	e00a      	b.n	8008f88 <HAL_ADC_ConfigChannel+0x19c>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	695a      	ldr	r2, [r3, #20]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	089b      	lsrs	r3, r3, #2
 8008f7e:	f003 0304 	and.w	r3, r3, #4
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	fa02 f303 	lsl.w	r3, r2, r3
 8008f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d048      	beq.n	8009026 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6818      	ldr	r0, [r3, #0]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	6919      	ldr	r1, [r3, #16]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fa4:	f7ff fb08 	bl	80085b8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a4c      	ldr	r2, [pc, #304]	; (80090e0 <HAL_ADC_ConfigChannel+0x2f4>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d119      	bne.n	8008fe6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6818      	ldr	r0, [r3, #0]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	6919      	ldr	r1, [r3, #16]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	f7ff fba0 	bl	8008704 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6818      	ldr	r0, [r3, #0]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	6919      	ldr	r1, [r3, #16]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d102      	bne.n	8008fdc <HAL_ADC_ConfigChannel+0x1f0>
 8008fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fda:	e000      	b.n	8008fde <HAL_ADC_ConfigChannel+0x1f2>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f7ff fb6e 	bl	80086c0 <LL_ADC_SetOffsetSaturation>
 8008fe4:	e1ee      	b.n	80093c4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	6919      	ldr	r1, [r3, #16]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d102      	bne.n	8008ffe <HAL_ADC_ConfigChannel+0x212>
 8008ff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ffc:	e000      	b.n	8009000 <HAL_ADC_ConfigChannel+0x214>
 8008ffe:	2300      	movs	r3, #0
 8009000:	461a      	mov	r2, r3
 8009002:	f7ff fb3b 	bl	800867c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	6919      	ldr	r1, [r3, #16]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	7e1b      	ldrb	r3, [r3, #24]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d102      	bne.n	800901c <HAL_ADC_ConfigChannel+0x230>
 8009016:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800901a:	e000      	b.n	800901e <HAL_ADC_ConfigChannel+0x232>
 800901c:	2300      	movs	r3, #0
 800901e:	461a      	mov	r2, r3
 8009020:	f7ff fb12 	bl	8008648 <LL_ADC_SetDataRightShift>
 8009024:	e1ce      	b.n	80093c4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a2d      	ldr	r2, [pc, #180]	; (80090e0 <HAL_ADC_ConfigChannel+0x2f4>)
 800902c:	4293      	cmp	r3, r2
 800902e:	f040 8181 	bne.w	8009334 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2100      	movs	r1, #0
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff faef 	bl	800861c <LL_ADC_GetOffsetChannel>
 800903e:	4603      	mov	r3, r0
 8009040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <HAL_ADC_ConfigChannel+0x272>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2100      	movs	r1, #0
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff fae4 	bl	800861c <LL_ADC_GetOffsetChannel>
 8009054:	4603      	mov	r3, r0
 8009056:	0e9b      	lsrs	r3, r3, #26
 8009058:	f003 021f 	and.w	r2, r3, #31
 800905c:	e01e      	b.n	800909c <HAL_ADC_ConfigChannel+0x2b0>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2100      	movs	r1, #0
 8009064:	4618      	mov	r0, r3
 8009066:	f7ff fad9 	bl	800861c <LL_ADC_GetOffsetChannel>
 800906a:	4603      	mov	r3, r0
 800906c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009070:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009074:	fa93 f3a3 	rbit	r3, r3
 8009078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800907c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009080:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8009084:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800908c:	2320      	movs	r3, #32
 800908e:	e004      	b.n	800909a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8009090:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009094:	fab3 f383 	clz	r3, r3
 8009098:	b2db      	uxtb	r3, r3
 800909a:	461a      	mov	r2, r3
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d105      	bne.n	80090b4 <HAL_ADC_ConfigChannel+0x2c8>
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	0e9b      	lsrs	r3, r3, #26
 80090ae:	f003 031f 	and.w	r3, r3, #31
 80090b2:	e01e      	b.n	80090f2 <HAL_ADC_ConfigChannel+0x306>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090c0:	fa93 f3a3 	rbit	r3, r3
 80090c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80090c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80090d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d107      	bne.n	80090e8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80090d8:	2320      	movs	r3, #32
 80090da:	e00a      	b.n	80090f2 <HAL_ADC_ConfigChannel+0x306>
 80090dc:	47ff0000 	.word	0x47ff0000
 80090e0:	58026000 	.word	0x58026000
 80090e4:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 80090e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80090ec:	fab3 f383 	clz	r3, r3
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d106      	bne.n	8009104 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2200      	movs	r2, #0
 80090fc:	2100      	movs	r1, #0
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff fb22 	bl	8008748 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2101      	movs	r1, #1
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff fa86 	bl	800861c <LL_ADC_GetOffsetChannel>
 8009110:	4603      	mov	r3, r0
 8009112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10a      	bne.n	8009130 <HAL_ADC_ConfigChannel+0x344>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2101      	movs	r1, #1
 8009120:	4618      	mov	r0, r3
 8009122:	f7ff fa7b 	bl	800861c <LL_ADC_GetOffsetChannel>
 8009126:	4603      	mov	r3, r0
 8009128:	0e9b      	lsrs	r3, r3, #26
 800912a:	f003 021f 	and.w	r2, r3, #31
 800912e:	e01e      	b.n	800916e <HAL_ADC_ConfigChannel+0x382>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2101      	movs	r1, #1
 8009136:	4618      	mov	r0, r3
 8009138:	f7ff fa70 	bl	800861c <LL_ADC_GetOffsetChannel>
 800913c:	4603      	mov	r3, r0
 800913e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009146:	fa93 f3a3 	rbit	r3, r3
 800914a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800914e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8009156:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800915e:	2320      	movs	r3, #32
 8009160:	e004      	b.n	800916c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8009162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009166:	fab3 f383 	clz	r3, r3
 800916a:	b2db      	uxtb	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009176:	2b00      	cmp	r3, #0
 8009178:	d105      	bne.n	8009186 <HAL_ADC_ConfigChannel+0x39a>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	0e9b      	lsrs	r3, r3, #26
 8009180:	f003 031f 	and.w	r3, r3, #31
 8009184:	e018      	b.n	80091b8 <HAL_ADC_ConfigChannel+0x3cc>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800918e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009192:	fa93 f3a3 	rbit	r3, r3
 8009196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800919a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800919e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80091a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80091aa:	2320      	movs	r3, #32
 80091ac:	e004      	b.n	80091b8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80091ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091b2:	fab3 f383 	clz	r3, r3
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d106      	bne.n	80091ca <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2200      	movs	r2, #0
 80091c2:	2101      	movs	r1, #1
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7ff fabf 	bl	8008748 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2102      	movs	r1, #2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff fa23 	bl	800861c <LL_ADC_GetOffsetChannel>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10a      	bne.n	80091f6 <HAL_ADC_ConfigChannel+0x40a>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2102      	movs	r1, #2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff fa18 	bl	800861c <LL_ADC_GetOffsetChannel>
 80091ec:	4603      	mov	r3, r0
 80091ee:	0e9b      	lsrs	r3, r3, #26
 80091f0:	f003 021f 	and.w	r2, r3, #31
 80091f4:	e01e      	b.n	8009234 <HAL_ADC_ConfigChannel+0x448>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2102      	movs	r1, #2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff fa0d 	bl	800861c <LL_ADC_GetOffsetChannel>
 8009202:	4603      	mov	r3, r0
 8009204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009208:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800920c:	fa93 f3a3 	rbit	r3, r3
 8009210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8009214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009218:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800921c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8009224:	2320      	movs	r3, #32
 8009226:	e004      	b.n	8009232 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8009228:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800922c:	fab3 f383 	clz	r3, r3
 8009230:	b2db      	uxtb	r3, r3
 8009232:	461a      	mov	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800923c:	2b00      	cmp	r3, #0
 800923e:	d105      	bne.n	800924c <HAL_ADC_ConfigChannel+0x460>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	0e9b      	lsrs	r3, r3, #26
 8009246:	f003 031f 	and.w	r3, r3, #31
 800924a:	e014      	b.n	8009276 <HAL_ADC_ConfigChannel+0x48a>
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009254:	fa93 f3a3 	rbit	r3, r3
 8009258:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800925a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800925c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8009260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8009268:	2320      	movs	r3, #32
 800926a:	e004      	b.n	8009276 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800926c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009270:	fab3 f383 	clz	r3, r3
 8009274:	b2db      	uxtb	r3, r3
 8009276:	429a      	cmp	r2, r3
 8009278:	d106      	bne.n	8009288 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2200      	movs	r2, #0
 8009280:	2102      	movs	r1, #2
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff fa60 	bl	8008748 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2103      	movs	r1, #3
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff f9c4 	bl	800861c <LL_ADC_GetOffsetChannel>
 8009294:	4603      	mov	r3, r0
 8009296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10a      	bne.n	80092b4 <HAL_ADC_ConfigChannel+0x4c8>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2103      	movs	r1, #3
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff f9b9 	bl	800861c <LL_ADC_GetOffsetChannel>
 80092aa:	4603      	mov	r3, r0
 80092ac:	0e9b      	lsrs	r3, r3, #26
 80092ae:	f003 021f 	and.w	r2, r3, #31
 80092b2:	e017      	b.n	80092e4 <HAL_ADC_ConfigChannel+0x4f8>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2103      	movs	r1, #3
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff f9ae 	bl	800861c <LL_ADC_GetOffsetChannel>
 80092c0:	4603      	mov	r3, r0
 80092c2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092c6:	fa93 f3a3 	rbit	r3, r3
 80092ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80092cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ce:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80092d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80092d6:	2320      	movs	r3, #32
 80092d8:	e003      	b.n	80092e2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80092da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092dc:	fab3 f383 	clz	r3, r3
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	461a      	mov	r2, r3
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d105      	bne.n	80092fc <HAL_ADC_ConfigChannel+0x510>
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	0e9b      	lsrs	r3, r3, #26
 80092f6:	f003 031f 	and.w	r3, r3, #31
 80092fa:	e011      	b.n	8009320 <HAL_ADC_ConfigChannel+0x534>
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009304:	fa93 f3a3 	rbit	r3, r3
 8009308:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800930a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800930c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800930e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8009314:	2320      	movs	r3, #32
 8009316:	e003      	b.n	8009320 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8009318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800931a:	fab3 f383 	clz	r3, r3
 800931e:	b2db      	uxtb	r3, r3
 8009320:	429a      	cmp	r2, r3
 8009322:	d14f      	bne.n	80093c4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2200      	movs	r2, #0
 800932a:	2103      	movs	r1, #3
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff fa0b 	bl	8008748 <LL_ADC_SetOffsetState>
 8009332:	e047      	b.n	80093c4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800933a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	069b      	lsls	r3, r3, #26
 8009344:	429a      	cmp	r2, r3
 8009346:	d107      	bne.n	8009358 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009356:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800935e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	069b      	lsls	r3, r3, #26
 8009368:	429a      	cmp	r2, r3
 800936a:	d107      	bne.n	800937c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800937a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009382:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	069b      	lsls	r3, r3, #26
 800938c:	429a      	cmp	r2, r3
 800938e:	d107      	bne.n	80093a0 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800939e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	069b      	lsls	r3, r3, #26
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d107      	bne.n	80093c4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80093c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff facd 	bl	8008968 <LL_ADC_IsEnabled>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f040 8219 	bne.w	8009808 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6818      	ldr	r0, [r3, #0]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	6819      	ldr	r1, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	461a      	mov	r2, r3
 80093e4:	f7ff fa32 	bl	800884c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	4aa1      	ldr	r2, [pc, #644]	; (8009674 <HAL_ADC_ConfigChannel+0x888>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	f040 812e 	bne.w	8009650 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10b      	bne.n	800941c <HAL_ADC_ConfigChannel+0x630>
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	0e9b      	lsrs	r3, r3, #26
 800940a:	3301      	adds	r3, #1
 800940c:	f003 031f 	and.w	r3, r3, #31
 8009410:	2b09      	cmp	r3, #9
 8009412:	bf94      	ite	ls
 8009414:	2301      	movls	r3, #1
 8009416:	2300      	movhi	r3, #0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	e019      	b.n	8009450 <HAL_ADC_ConfigChannel+0x664>
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009424:	fa93 f3a3 	rbit	r3, r3
 8009428:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800942a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800942c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800942e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8009434:	2320      	movs	r3, #32
 8009436:	e003      	b.n	8009440 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8009438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800943a:	fab3 f383 	clz	r3, r3
 800943e:	b2db      	uxtb	r3, r3
 8009440:	3301      	adds	r3, #1
 8009442:	f003 031f 	and.w	r3, r3, #31
 8009446:	2b09      	cmp	r3, #9
 8009448:	bf94      	ite	ls
 800944a:	2301      	movls	r3, #1
 800944c:	2300      	movhi	r3, #0
 800944e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009450:	2b00      	cmp	r3, #0
 8009452:	d079      	beq.n	8009548 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800945c:	2b00      	cmp	r3, #0
 800945e:	d107      	bne.n	8009470 <HAL_ADC_ConfigChannel+0x684>
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	0e9b      	lsrs	r3, r3, #26
 8009466:	3301      	adds	r3, #1
 8009468:	069b      	lsls	r3, r3, #26
 800946a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800946e:	e015      	b.n	800949c <HAL_ADC_ConfigChannel+0x6b0>
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009478:	fa93 f3a3 	rbit	r3, r3
 800947c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800947e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009480:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8009482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8009488:	2320      	movs	r3, #32
 800948a:	e003      	b.n	8009494 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800948c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800948e:	fab3 f383 	clz	r3, r3
 8009492:	b2db      	uxtb	r3, r3
 8009494:	3301      	adds	r3, #1
 8009496:	069b      	lsls	r3, r3, #26
 8009498:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d109      	bne.n	80094bc <HAL_ADC_ConfigChannel+0x6d0>
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	0e9b      	lsrs	r3, r3, #26
 80094ae:	3301      	adds	r3, #1
 80094b0:	f003 031f 	and.w	r3, r3, #31
 80094b4:	2101      	movs	r1, #1
 80094b6:	fa01 f303 	lsl.w	r3, r1, r3
 80094ba:	e017      	b.n	80094ec <HAL_ADC_ConfigChannel+0x700>
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c4:	fa93 f3a3 	rbit	r3, r3
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80094ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80094ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80094d4:	2320      	movs	r3, #32
 80094d6:	e003      	b.n	80094e0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80094d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094da:	fab3 f383 	clz	r3, r3
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	3301      	adds	r3, #1
 80094e2:	f003 031f 	and.w	r3, r3, #31
 80094e6:	2101      	movs	r1, #1
 80094e8:	fa01 f303 	lsl.w	r3, r1, r3
 80094ec:	ea42 0103 	orr.w	r1, r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <HAL_ADC_ConfigChannel+0x726>
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	0e9b      	lsrs	r3, r3, #26
 8009502:	3301      	adds	r3, #1
 8009504:	f003 021f 	and.w	r2, r3, #31
 8009508:	4613      	mov	r3, r2
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	4413      	add	r3, r2
 800950e:	051b      	lsls	r3, r3, #20
 8009510:	e018      	b.n	8009544 <HAL_ADC_ConfigChannel+0x758>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951a:	fa93 f3a3 	rbit	r3, r3
 800951e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8009520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009522:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800952a:	2320      	movs	r3, #32
 800952c:	e003      	b.n	8009536 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	fab3 f383 	clz	r3, r3
 8009534:	b2db      	uxtb	r3, r3
 8009536:	3301      	adds	r3, #1
 8009538:	f003 021f 	and.w	r2, r3, #31
 800953c:	4613      	mov	r3, r2
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	4413      	add	r3, r2
 8009542:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009544:	430b      	orrs	r3, r1
 8009546:	e07e      	b.n	8009646 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009550:	2b00      	cmp	r3, #0
 8009552:	d107      	bne.n	8009564 <HAL_ADC_ConfigChannel+0x778>
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	0e9b      	lsrs	r3, r3, #26
 800955a:	3301      	adds	r3, #1
 800955c:	069b      	lsls	r3, r3, #26
 800955e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009562:	e015      	b.n	8009590 <HAL_ADC_ConfigChannel+0x7a4>
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	fa93 f3a3 	rbit	r3, r3
 8009570:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8009576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800957c:	2320      	movs	r3, #32
 800957e:	e003      	b.n	8009588 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	fab3 f383 	clz	r3, r3
 8009586:	b2db      	uxtb	r3, r3
 8009588:	3301      	adds	r3, #1
 800958a:	069b      	lsls	r3, r3, #26
 800958c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009598:	2b00      	cmp	r3, #0
 800959a:	d109      	bne.n	80095b0 <HAL_ADC_ConfigChannel+0x7c4>
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	0e9b      	lsrs	r3, r3, #26
 80095a2:	3301      	adds	r3, #1
 80095a4:	f003 031f 	and.w	r3, r3, #31
 80095a8:	2101      	movs	r1, #1
 80095aa:	fa01 f303 	lsl.w	r3, r1, r3
 80095ae:	e017      	b.n	80095e0 <HAL_ADC_ConfigChannel+0x7f4>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	fa93 f3a3 	rbit	r3, r3
 80095bc:	61bb      	str	r3, [r7, #24]
  return result;
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80095c8:	2320      	movs	r3, #32
 80095ca:	e003      	b.n	80095d4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	fab3 f383 	clz	r3, r3
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	3301      	adds	r3, #1
 80095d6:	f003 031f 	and.w	r3, r3, #31
 80095da:	2101      	movs	r1, #1
 80095dc:	fa01 f303 	lsl.w	r3, r1, r3
 80095e0:	ea42 0103 	orr.w	r1, r2, r3
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10d      	bne.n	800960c <HAL_ADC_ConfigChannel+0x820>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	0e9b      	lsrs	r3, r3, #26
 80095f6:	3301      	adds	r3, #1
 80095f8:	f003 021f 	and.w	r2, r3, #31
 80095fc:	4613      	mov	r3, r2
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	4413      	add	r3, r2
 8009602:	3b1e      	subs	r3, #30
 8009604:	051b      	lsls	r3, r3, #20
 8009606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800960a:	e01b      	b.n	8009644 <HAL_ADC_ConfigChannel+0x858>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	fa93 f3a3 	rbit	r3, r3
 8009618:	60fb      	str	r3, [r7, #12]
  return result;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8009624:	2320      	movs	r3, #32
 8009626:	e003      	b.n	8009630 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	fab3 f383 	clz	r3, r3
 800962e:	b2db      	uxtb	r3, r3
 8009630:	3301      	adds	r3, #1
 8009632:	f003 021f 	and.w	r2, r3, #31
 8009636:	4613      	mov	r3, r2
 8009638:	005b      	lsls	r3, r3, #1
 800963a:	4413      	add	r3, r2
 800963c:	3b1e      	subs	r3, #30
 800963e:	051b      	lsls	r3, r3, #20
 8009640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009644:	430b      	orrs	r3, r1
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	6892      	ldr	r2, [r2, #8]
 800964a:	4619      	mov	r1, r3
 800964c:	f7ff f8d2 	bl	80087f4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f280 80d7 	bge.w	8009808 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a06      	ldr	r2, [pc, #24]	; (8009678 <HAL_ADC_ConfigChannel+0x88c>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d004      	beq.n	800966e <HAL_ADC_ConfigChannel+0x882>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a04      	ldr	r2, [pc, #16]	; (800967c <HAL_ADC_ConfigChannel+0x890>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d10a      	bne.n	8009684 <HAL_ADC_ConfigChannel+0x898>
 800966e:	4b04      	ldr	r3, [pc, #16]	; (8009680 <HAL_ADC_ConfigChannel+0x894>)
 8009670:	e009      	b.n	8009686 <HAL_ADC_ConfigChannel+0x89a>
 8009672:	bf00      	nop
 8009674:	47ff0000 	.word	0x47ff0000
 8009678:	40022000 	.word	0x40022000
 800967c:	40022100 	.word	0x40022100
 8009680:	40022300 	.word	0x40022300
 8009684:	4b65      	ldr	r3, [pc, #404]	; (800981c <HAL_ADC_ConfigChannel+0xa30>)
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe ff88 	bl	800859c <LL_ADC_GetCommonPathInternalCh>
 800968c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a62      	ldr	r2, [pc, #392]	; (8009820 <HAL_ADC_ConfigChannel+0xa34>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d004      	beq.n	80096a4 <HAL_ADC_ConfigChannel+0x8b8>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a61      	ldr	r2, [pc, #388]	; (8009824 <HAL_ADC_ConfigChannel+0xa38>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d10e      	bne.n	80096c2 <HAL_ADC_ConfigChannel+0x8d6>
 80096a4:	485e      	ldr	r0, [pc, #376]	; (8009820 <HAL_ADC_ConfigChannel+0xa34>)
 80096a6:	f7ff f95f 	bl	8008968 <LL_ADC_IsEnabled>
 80096aa:	4604      	mov	r4, r0
 80096ac:	485d      	ldr	r0, [pc, #372]	; (8009824 <HAL_ADC_ConfigChannel+0xa38>)
 80096ae:	f7ff f95b 	bl	8008968 <LL_ADC_IsEnabled>
 80096b2:	4603      	mov	r3, r0
 80096b4:	4323      	orrs	r3, r4
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	bf0c      	ite	eq
 80096ba:	2301      	moveq	r3, #1
 80096bc:	2300      	movne	r3, #0
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	e008      	b.n	80096d4 <HAL_ADC_ConfigChannel+0x8e8>
 80096c2:	4859      	ldr	r0, [pc, #356]	; (8009828 <HAL_ADC_ConfigChannel+0xa3c>)
 80096c4:	f7ff f950 	bl	8008968 <LL_ADC_IsEnabled>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	bf0c      	ite	eq
 80096ce:	2301      	moveq	r3, #1
 80096d0:	2300      	movne	r3, #0
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 8084 	beq.w	80097e2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a53      	ldr	r2, [pc, #332]	; (800982c <HAL_ADC_ConfigChannel+0xa40>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d132      	bne.n	800974a <HAL_ADC_ConfigChannel+0x95e>
 80096e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80096e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d12c      	bne.n	800974a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a4c      	ldr	r2, [pc, #304]	; (8009828 <HAL_ADC_ConfigChannel+0xa3c>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	f040 8086 	bne.w	8009808 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a47      	ldr	r2, [pc, #284]	; (8009820 <HAL_ADC_ConfigChannel+0xa34>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d004      	beq.n	8009710 <HAL_ADC_ConfigChannel+0x924>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a46      	ldr	r2, [pc, #280]	; (8009824 <HAL_ADC_ConfigChannel+0xa38>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d101      	bne.n	8009714 <HAL_ADC_ConfigChannel+0x928>
 8009710:	4a47      	ldr	r2, [pc, #284]	; (8009830 <HAL_ADC_ConfigChannel+0xa44>)
 8009712:	e000      	b.n	8009716 <HAL_ADC_ConfigChannel+0x92a>
 8009714:	4a41      	ldr	r2, [pc, #260]	; (800981c <HAL_ADC_ConfigChannel+0xa30>)
 8009716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800971a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f7fe ff28 	bl	8008576 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009726:	4b43      	ldr	r3, [pc, #268]	; (8009834 <HAL_ADC_ConfigChannel+0xa48>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	099b      	lsrs	r3, r3, #6
 800972c:	4a42      	ldr	r2, [pc, #264]	; (8009838 <HAL_ADC_ConfigChannel+0xa4c>)
 800972e:	fba2 2303 	umull	r2, r3, r2, r3
 8009732:	099b      	lsrs	r3, r3, #6
 8009734:	3301      	adds	r3, #1
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800973a:	e002      	b.n	8009742 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	3b01      	subs	r3, #1
 8009740:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1f9      	bne.n	800973c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009748:	e05e      	b.n	8009808 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a3b      	ldr	r2, [pc, #236]	; (800983c <HAL_ADC_ConfigChannel+0xa50>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d120      	bne.n	8009796 <HAL_ADC_ConfigChannel+0x9aa>
 8009754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d11a      	bne.n	8009796 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a30      	ldr	r2, [pc, #192]	; (8009828 <HAL_ADC_ConfigChannel+0xa3c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d14e      	bne.n	8009808 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a2c      	ldr	r2, [pc, #176]	; (8009820 <HAL_ADC_ConfigChannel+0xa34>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d004      	beq.n	800977e <HAL_ADC_ConfigChannel+0x992>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a2a      	ldr	r2, [pc, #168]	; (8009824 <HAL_ADC_ConfigChannel+0xa38>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d101      	bne.n	8009782 <HAL_ADC_ConfigChannel+0x996>
 800977e:	4a2c      	ldr	r2, [pc, #176]	; (8009830 <HAL_ADC_ConfigChannel+0xa44>)
 8009780:	e000      	b.n	8009784 <HAL_ADC_ConfigChannel+0x998>
 8009782:	4a26      	ldr	r2, [pc, #152]	; (800981c <HAL_ADC_ConfigChannel+0xa30>)
 8009784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800978c:	4619      	mov	r1, r3
 800978e:	4610      	mov	r0, r2
 8009790:	f7fe fef1 	bl	8008576 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009794:	e038      	b.n	8009808 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a29      	ldr	r2, [pc, #164]	; (8009840 <HAL_ADC_ConfigChannel+0xa54>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d133      	bne.n	8009808 <HAL_ADC_ConfigChannel+0xa1c>
 80097a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d12d      	bne.n	8009808 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a1d      	ldr	r2, [pc, #116]	; (8009828 <HAL_ADC_ConfigChannel+0xa3c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d128      	bne.n	8009808 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a19      	ldr	r2, [pc, #100]	; (8009820 <HAL_ADC_ConfigChannel+0xa34>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d004      	beq.n	80097ca <HAL_ADC_ConfigChannel+0x9de>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a17      	ldr	r2, [pc, #92]	; (8009824 <HAL_ADC_ConfigChannel+0xa38>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d101      	bne.n	80097ce <HAL_ADC_ConfigChannel+0x9e2>
 80097ca:	4a19      	ldr	r2, [pc, #100]	; (8009830 <HAL_ADC_ConfigChannel+0xa44>)
 80097cc:	e000      	b.n	80097d0 <HAL_ADC_ConfigChannel+0x9e4>
 80097ce:	4a13      	ldr	r2, [pc, #76]	; (800981c <HAL_ADC_ConfigChannel+0xa30>)
 80097d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80097d8:	4619      	mov	r1, r3
 80097da:	4610      	mov	r0, r2
 80097dc:	f7fe fecb 	bl	8008576 <LL_ADC_SetCommonPathInternalCh>
 80097e0:	e012      	b.n	8009808 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097e6:	f043 0220 	orr.w	r2, r3, #32
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80097f4:	e008      	b.n	8009808 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097fa:	f043 0220 	orr.w	r2, r3, #32
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8009810:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8009814:	4618      	mov	r0, r3
 8009816:	37e4      	adds	r7, #228	; 0xe4
 8009818:	46bd      	mov	sp, r7
 800981a:	bd90      	pop	{r4, r7, pc}
 800981c:	58026300 	.word	0x58026300
 8009820:	40022000 	.word	0x40022000
 8009824:	40022100 	.word	0x40022100
 8009828:	58026000 	.word	0x58026000
 800982c:	c7520000 	.word	0xc7520000
 8009830:	40022300 	.word	0x40022300
 8009834:	24000000 	.word	0x24000000
 8009838:	053e2d63 	.word	0x053e2d63
 800983c:	c3210000 	.word	0xc3210000
 8009840:	cb840000 	.word	0xcb840000

08009844 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a6b      	ldr	r2, [pc, #428]	; (8009a00 <ADC_ConfigureBoostMode+0x1bc>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d004      	beq.n	8009860 <ADC_ConfigureBoostMode+0x1c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a6a      	ldr	r2, [pc, #424]	; (8009a04 <ADC_ConfigureBoostMode+0x1c0>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d109      	bne.n	8009874 <ADC_ConfigureBoostMode+0x30>
 8009860:	4b69      	ldr	r3, [pc, #420]	; (8009a08 <ADC_ConfigureBoostMode+0x1c4>)
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009868:	2b00      	cmp	r3, #0
 800986a:	bf14      	ite	ne
 800986c:	2301      	movne	r3, #1
 800986e:	2300      	moveq	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	e008      	b.n	8009886 <ADC_ConfigureBoostMode+0x42>
 8009874:	4b65      	ldr	r3, [pc, #404]	; (8009a0c <ADC_ConfigureBoostMode+0x1c8>)
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800987c:	2b00      	cmp	r3, #0
 800987e:	bf14      	ite	ne
 8009880:	2301      	movne	r3, #1
 8009882:	2300      	moveq	r3, #0
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d01c      	beq.n	80098c4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800988a:	f002 fa13 	bl	800bcb4 <HAL_RCC_GetHCLKFreq>
 800988e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009898:	d010      	beq.n	80098bc <ADC_ConfigureBoostMode+0x78>
 800989a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800989e:	d871      	bhi.n	8009984 <ADC_ConfigureBoostMode+0x140>
 80098a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098a4:	d002      	beq.n	80098ac <ADC_ConfigureBoostMode+0x68>
 80098a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098aa:	d16b      	bne.n	8009984 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	0c1b      	lsrs	r3, r3, #16
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b8:	60fb      	str	r3, [r7, #12]
        break;
 80098ba:	e066      	b.n	800998a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	089b      	lsrs	r3, r3, #2
 80098c0:	60fb      	str	r3, [r7, #12]
        break;
 80098c2:	e062      	b.n	800998a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80098c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80098c8:	f003 f966 	bl	800cb98 <HAL_RCCEx_GetPeriphCLKFreq>
 80098cc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80098d6:	d051      	beq.n	800997c <ADC_ConfigureBoostMode+0x138>
 80098d8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80098dc:	d854      	bhi.n	8009988 <ADC_ConfigureBoostMode+0x144>
 80098de:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80098e2:	d047      	beq.n	8009974 <ADC_ConfigureBoostMode+0x130>
 80098e4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80098e8:	d84e      	bhi.n	8009988 <ADC_ConfigureBoostMode+0x144>
 80098ea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80098ee:	d03d      	beq.n	800996c <ADC_ConfigureBoostMode+0x128>
 80098f0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80098f4:	d848      	bhi.n	8009988 <ADC_ConfigureBoostMode+0x144>
 80098f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098fa:	d033      	beq.n	8009964 <ADC_ConfigureBoostMode+0x120>
 80098fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009900:	d842      	bhi.n	8009988 <ADC_ConfigureBoostMode+0x144>
 8009902:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009906:	d029      	beq.n	800995c <ADC_ConfigureBoostMode+0x118>
 8009908:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800990c:	d83c      	bhi.n	8009988 <ADC_ConfigureBoostMode+0x144>
 800990e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009912:	d01a      	beq.n	800994a <ADC_ConfigureBoostMode+0x106>
 8009914:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009918:	d836      	bhi.n	8009988 <ADC_ConfigureBoostMode+0x144>
 800991a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800991e:	d014      	beq.n	800994a <ADC_ConfigureBoostMode+0x106>
 8009920:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009924:	d830      	bhi.n	8009988 <ADC_ConfigureBoostMode+0x144>
 8009926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800992a:	d00e      	beq.n	800994a <ADC_ConfigureBoostMode+0x106>
 800992c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009930:	d82a      	bhi.n	8009988 <ADC_ConfigureBoostMode+0x144>
 8009932:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009936:	d008      	beq.n	800994a <ADC_ConfigureBoostMode+0x106>
 8009938:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800993c:	d824      	bhi.n	8009988 <ADC_ConfigureBoostMode+0x144>
 800993e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009942:	d002      	beq.n	800994a <ADC_ConfigureBoostMode+0x106>
 8009944:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009948:	d11e      	bne.n	8009988 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	0c9b      	lsrs	r3, r3, #18
 8009950:	005b      	lsls	r3, r3, #1
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	fbb2 f3f3 	udiv	r3, r2, r3
 8009958:	60fb      	str	r3, [r7, #12]
        break;
 800995a:	e016      	b.n	800998a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	091b      	lsrs	r3, r3, #4
 8009960:	60fb      	str	r3, [r7, #12]
        break;
 8009962:	e012      	b.n	800998a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	095b      	lsrs	r3, r3, #5
 8009968:	60fb      	str	r3, [r7, #12]
        break;
 800996a:	e00e      	b.n	800998a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	099b      	lsrs	r3, r3, #6
 8009970:	60fb      	str	r3, [r7, #12]
        break;
 8009972:	e00a      	b.n	800998a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	09db      	lsrs	r3, r3, #7
 8009978:	60fb      	str	r3, [r7, #12]
        break;
 800997a:	e006      	b.n	800998a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	0a1b      	lsrs	r3, r3, #8
 8009980:	60fb      	str	r3, [r7, #12]
        break;
 8009982:	e002      	b.n	800998a <ADC_ConfigureBoostMode+0x146>
        break;
 8009984:	bf00      	nop
 8009986:	e000      	b.n	800998a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8009988:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	085b      	lsrs	r3, r3, #1
 800998e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4a1f      	ldr	r2, [pc, #124]	; (8009a10 <ADC_ConfigureBoostMode+0x1cc>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d808      	bhi.n	80099aa <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689a      	ldr	r2, [r3, #8]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80099a6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80099a8:	e025      	b.n	80099f6 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4a19      	ldr	r2, [pc, #100]	; (8009a14 <ADC_ConfigureBoostMode+0x1d0>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d80a      	bhi.n	80099c8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099c4:	609a      	str	r2, [r3, #8]
}
 80099c6:	e016      	b.n	80099f6 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4a13      	ldr	r2, [pc, #76]	; (8009a18 <ADC_ConfigureBoostMode+0x1d4>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d80a      	bhi.n	80099e6 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099e2:	609a      	str	r2, [r3, #8]
}
 80099e4:	e007      	b.n	80099f6 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689a      	ldr	r2, [r3, #8]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80099f4:	609a      	str	r2, [r3, #8]
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	40022000 	.word	0x40022000
 8009a04:	40022100 	.word	0x40022100
 8009a08:	40022300 	.word	0x40022300
 8009a0c:	58026300 	.word	0x58026300
 8009a10:	005f5e10 	.word	0x005f5e10
 8009a14:	00bebc20 	.word	0x00bebc20
 8009a18:	017d7840 	.word	0x017d7840

08009a1c <LL_ADC_IsEnabled>:
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d101      	bne.n	8009a34 <LL_ADC_IsEnabled+0x18>
 8009a30:	2301      	movs	r3, #1
 8009a32:	e000      	b.n	8009a36 <LL_ADC_IsEnabled+0x1a>
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <LL_ADC_REG_IsConversionOngoing>:
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	f003 0304 	and.w	r3, r3, #4
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	d101      	bne.n	8009a5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8009a56:	2301      	movs	r3, #1
 8009a58:	e000      	b.n	8009a5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009a68:	b590      	push	{r4, r7, lr}
 8009a6a:	b0a3      	sub	sp, #140	; 0x8c
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d101      	bne.n	8009a86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009a82:	2302      	movs	r3, #2
 8009a84:	e0c1      	b.n	8009c0a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8009a92:	2300      	movs	r3, #0
 8009a94:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a5e      	ldr	r2, [pc, #376]	; (8009c14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d102      	bne.n	8009aa6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009aa0:	4b5d      	ldr	r3, [pc, #372]	; (8009c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009aa2:	60fb      	str	r3, [r7, #12]
 8009aa4:	e001      	b.n	8009aaa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10b      	bne.n	8009ac8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab4:	f043 0220 	orr.w	r2, r3, #32
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e0a0      	b.n	8009c0a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7ff ffb9 	bl	8009a42 <LL_ADC_REG_IsConversionOngoing>
 8009ad0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7ff ffb2 	bl	8009a42 <LL_ADC_REG_IsConversionOngoing>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f040 8081 	bne.w	8009be8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009ae6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d17c      	bne.n	8009be8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a48      	ldr	r2, [pc, #288]	; (8009c14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d004      	beq.n	8009b02 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a46      	ldr	r2, [pc, #280]	; (8009c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d101      	bne.n	8009b06 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8009b02:	4b46      	ldr	r3, [pc, #280]	; (8009c1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8009b04:	e000      	b.n	8009b08 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009b06:	4b46      	ldr	r3, [pc, #280]	; (8009c20 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8009b08:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d039      	beq.n	8009b86 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8009b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a3a      	ldr	r2, [pc, #232]	; (8009c14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d004      	beq.n	8009b38 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a39      	ldr	r2, [pc, #228]	; (8009c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d10e      	bne.n	8009b56 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8009b38:	4836      	ldr	r0, [pc, #216]	; (8009c14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009b3a:	f7ff ff6f 	bl	8009a1c <LL_ADC_IsEnabled>
 8009b3e:	4604      	mov	r4, r0
 8009b40:	4835      	ldr	r0, [pc, #212]	; (8009c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009b42:	f7ff ff6b 	bl	8009a1c <LL_ADC_IsEnabled>
 8009b46:	4603      	mov	r3, r0
 8009b48:	4323      	orrs	r3, r4
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	bf0c      	ite	eq
 8009b4e:	2301      	moveq	r3, #1
 8009b50:	2300      	movne	r3, #0
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	e008      	b.n	8009b68 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009b56:	4833      	ldr	r0, [pc, #204]	; (8009c24 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8009b58:	f7ff ff60 	bl	8009a1c <LL_ADC_IsEnabled>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	bf0c      	ite	eq
 8009b62:	2301      	moveq	r3, #1
 8009b64:	2300      	movne	r3, #0
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d047      	beq.n	8009bfc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009b6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	4b2d      	ldr	r3, [pc, #180]	; (8009c28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009b72:	4013      	ands	r3, r2
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	6811      	ldr	r1, [r2, #0]
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	6892      	ldr	r2, [r2, #8]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b82:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009b84:	e03a      	b.n	8009bfc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8009b86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009b8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b90:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a1f      	ldr	r2, [pc, #124]	; (8009c14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d004      	beq.n	8009ba6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a1d      	ldr	r2, [pc, #116]	; (8009c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d10e      	bne.n	8009bc4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8009ba6:	481b      	ldr	r0, [pc, #108]	; (8009c14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009ba8:	f7ff ff38 	bl	8009a1c <LL_ADC_IsEnabled>
 8009bac:	4604      	mov	r4, r0
 8009bae:	481a      	ldr	r0, [pc, #104]	; (8009c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009bb0:	f7ff ff34 	bl	8009a1c <LL_ADC_IsEnabled>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	4323      	orrs	r3, r4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	bf0c      	ite	eq
 8009bbc:	2301      	moveq	r3, #1
 8009bbe:	2300      	movne	r3, #0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	e008      	b.n	8009bd6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8009bc4:	4817      	ldr	r0, [pc, #92]	; (8009c24 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8009bc6:	f7ff ff29 	bl	8009a1c <LL_ADC_IsEnabled>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	bf0c      	ite	eq
 8009bd0:	2301      	moveq	r3, #1
 8009bd2:	2300      	movne	r3, #0
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d010      	beq.n	8009bfc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009bda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bdc:	689a      	ldr	r2, [r3, #8]
 8009bde:	4b12      	ldr	r3, [pc, #72]	; (8009c28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009be4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009be6:	e009      	b.n	8009bfc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bec:	f043 0220 	orr.w	r2, r3, #32
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8009bfa:	e000      	b.n	8009bfe <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009bfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8009c06:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	378c      	adds	r7, #140	; 0x8c
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd90      	pop	{r4, r7, pc}
 8009c12:	bf00      	nop
 8009c14:	40022000 	.word	0x40022000
 8009c18:	40022100 	.word	0x40022100
 8009c1c:	40022300 	.word	0x40022300
 8009c20:	58026300 	.word	0x58026300
 8009c24:	58026000 	.word	0x58026000
 8009c28:	fffff0e0 	.word	0xfffff0e0

08009c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f003 0307 	and.w	r3, r3, #7
 8009c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c3c:	4b0b      	ldr	r3, [pc, #44]	; (8009c6c <__NVIC_SetPriorityGrouping+0x40>)
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009c48:	4013      	ands	r3, r2
 8009c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009c54:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <__NVIC_SetPriorityGrouping+0x44>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009c5a:	4a04      	ldr	r2, [pc, #16]	; (8009c6c <__NVIC_SetPriorityGrouping+0x40>)
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	60d3      	str	r3, [r2, #12]
}
 8009c60:	bf00      	nop
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	e000ed00 	.word	0xe000ed00
 8009c70:	05fa0000 	.word	0x05fa0000

08009c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009c74:	b480      	push	{r7}
 8009c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c78:	4b04      	ldr	r3, [pc, #16]	; (8009c8c <__NVIC_GetPriorityGrouping+0x18>)
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	0a1b      	lsrs	r3, r3, #8
 8009c7e:	f003 0307 	and.w	r3, r3, #7
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	e000ed00 	.word	0xe000ed00

08009c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	db0b      	blt.n	8009cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ca2:	88fb      	ldrh	r3, [r7, #6]
 8009ca4:	f003 021f 	and.w	r2, r3, #31
 8009ca8:	4907      	ldr	r1, [pc, #28]	; (8009cc8 <__NVIC_EnableIRQ+0x38>)
 8009caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cae:	095b      	lsrs	r3, r3, #5
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8009cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009cba:	bf00      	nop
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	e000e100 	.word	0xe000e100

08009ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	6039      	str	r1, [r7, #0]
 8009cd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	db0a      	blt.n	8009cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	490c      	ldr	r1, [pc, #48]	; (8009d18 <__NVIC_SetPriority+0x4c>)
 8009ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cea:	0112      	lsls	r2, r2, #4
 8009cec:	b2d2      	uxtb	r2, r2
 8009cee:	440b      	add	r3, r1
 8009cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009cf4:	e00a      	b.n	8009d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	4908      	ldr	r1, [pc, #32]	; (8009d1c <__NVIC_SetPriority+0x50>)
 8009cfc:	88fb      	ldrh	r3, [r7, #6]
 8009cfe:	f003 030f 	and.w	r3, r3, #15
 8009d02:	3b04      	subs	r3, #4
 8009d04:	0112      	lsls	r2, r2, #4
 8009d06:	b2d2      	uxtb	r2, r2
 8009d08:	440b      	add	r3, r1
 8009d0a:	761a      	strb	r2, [r3, #24]
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	e000e100 	.word	0xe000e100
 8009d1c:	e000ed00 	.word	0xe000ed00

08009d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b089      	sub	sp, #36	; 0x24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f003 0307 	and.w	r3, r3, #7
 8009d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	f1c3 0307 	rsb	r3, r3, #7
 8009d3a:	2b04      	cmp	r3, #4
 8009d3c:	bf28      	it	cs
 8009d3e:	2304      	movcs	r3, #4
 8009d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	3304      	adds	r3, #4
 8009d46:	2b06      	cmp	r3, #6
 8009d48:	d902      	bls.n	8009d50 <NVIC_EncodePriority+0x30>
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	3b03      	subs	r3, #3
 8009d4e:	e000      	b.n	8009d52 <NVIC_EncodePriority+0x32>
 8009d50:	2300      	movs	r3, #0
 8009d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d54:	f04f 32ff 	mov.w	r2, #4294967295
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5e:	43da      	mvns	r2, r3
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	401a      	ands	r2, r3
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009d68:	f04f 31ff 	mov.w	r1, #4294967295
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d72:	43d9      	mvns	r1, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d78:	4313      	orrs	r3, r2
         );
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3724      	adds	r7, #36	; 0x24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
	...

08009d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d98:	d301      	bcc.n	8009d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e00f      	b.n	8009dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009d9e:	4a0a      	ldr	r2, [pc, #40]	; (8009dc8 <SysTick_Config+0x40>)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009da6:	210f      	movs	r1, #15
 8009da8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dac:	f7ff ff8e 	bl	8009ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009db0:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <SysTick_Config+0x40>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009db6:	4b04      	ldr	r3, [pc, #16]	; (8009dc8 <SysTick_Config+0x40>)
 8009db8:	2207      	movs	r2, #7
 8009dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	e000e010 	.word	0xe000e010

08009dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff ff29 	bl	8009c2c <__NVIC_SetPriorityGrouping>
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b086      	sub	sp, #24
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	4603      	mov	r3, r0
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	607a      	str	r2, [r7, #4]
 8009dee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009df0:	f7ff ff40 	bl	8009c74 <__NVIC_GetPriorityGrouping>
 8009df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	68b9      	ldr	r1, [r7, #8]
 8009dfa:	6978      	ldr	r0, [r7, #20]
 8009dfc:	f7ff ff90 	bl	8009d20 <NVIC_EncodePriority>
 8009e00:	4602      	mov	r2, r0
 8009e02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009e06:	4611      	mov	r1, r2
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7ff ff5f 	bl	8009ccc <__NVIC_SetPriority>
}
 8009e0e:	bf00      	nop
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b082      	sub	sp, #8
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7ff ff33 	bl	8009c90 <__NVIC_EnableIRQ>
}
 8009e2a:	bf00      	nop
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7ff ffa4 	bl	8009d88 <SysTick_Config>
 8009e40:	4603      	mov	r3, r0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e054      	b.n	8009f08 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	7f5b      	ldrb	r3, [r3, #29]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d105      	bne.n	8009e74 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7f6 ff5c 	bl	8000d2c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	791b      	ldrb	r3, [r3, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10c      	bne.n	8009e9c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a22      	ldr	r2, [pc, #136]	; (8009f10 <HAL_CRC_Init+0xc4>)
 8009e88:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689a      	ldr	r2, [r3, #8]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f022 0218 	bic.w	r2, r2, #24
 8009e98:	609a      	str	r2, [r3, #8]
 8009e9a:	e00c      	b.n	8009eb6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6899      	ldr	r1, [r3, #8]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f834 	bl	8009f14 <HAL_CRCEx_Polynomial_Set>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e028      	b.n	8009f08 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	795b      	ldrb	r3, [r3, #5]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d105      	bne.n	8009eca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec6:	611a      	str	r2, [r3, #16]
 8009ec8:	e004      	b.n	8009ed4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	6912      	ldr	r2, [r2, #16]
 8009ed2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	695a      	ldr	r2, [r3, #20]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	699a      	ldr	r2, [r3, #24]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	430a      	orrs	r2, r1
 8009efe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	04c11db7 	.word	0x04c11db7

08009f14 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b087      	sub	sp, #28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009f24:	231f      	movs	r3, #31
 8009f26:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009f28:	bf00      	nop
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	1e5a      	subs	r2, r3, #1
 8009f2e:	613a      	str	r2, [r7, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d009      	beq.n	8009f48 <HAL_CRCEx_Polynomial_Set+0x34>
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f003 031f 	and.w	r3, r3, #31
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d0f0      	beq.n	8009f2a <HAL_CRCEx_Polynomial_Set+0x16>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b18      	cmp	r3, #24
 8009f4c:	d846      	bhi.n	8009fdc <HAL_CRCEx_Polynomial_Set+0xc8>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <HAL_CRCEx_Polynomial_Set+0x40>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009fe3 	.word	0x08009fe3
 8009f58:	08009fdd 	.word	0x08009fdd
 8009f5c:	08009fdd 	.word	0x08009fdd
 8009f60:	08009fdd 	.word	0x08009fdd
 8009f64:	08009fdd 	.word	0x08009fdd
 8009f68:	08009fdd 	.word	0x08009fdd
 8009f6c:	08009fdd 	.word	0x08009fdd
 8009f70:	08009fdd 	.word	0x08009fdd
 8009f74:	08009fd1 	.word	0x08009fd1
 8009f78:	08009fdd 	.word	0x08009fdd
 8009f7c:	08009fdd 	.word	0x08009fdd
 8009f80:	08009fdd 	.word	0x08009fdd
 8009f84:	08009fdd 	.word	0x08009fdd
 8009f88:	08009fdd 	.word	0x08009fdd
 8009f8c:	08009fdd 	.word	0x08009fdd
 8009f90:	08009fdd 	.word	0x08009fdd
 8009f94:	08009fc5 	.word	0x08009fc5
 8009f98:	08009fdd 	.word	0x08009fdd
 8009f9c:	08009fdd 	.word	0x08009fdd
 8009fa0:	08009fdd 	.word	0x08009fdd
 8009fa4:	08009fdd 	.word	0x08009fdd
 8009fa8:	08009fdd 	.word	0x08009fdd
 8009fac:	08009fdd 	.word	0x08009fdd
 8009fb0:	08009fdd 	.word	0x08009fdd
 8009fb4:	08009fb9 	.word	0x08009fb9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	2b06      	cmp	r3, #6
 8009fbc:	d913      	bls.n	8009fe6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009fc2:	e010      	b.n	8009fe6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	2b07      	cmp	r3, #7
 8009fc8:	d90f      	bls.n	8009fea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009fce:	e00c      	b.n	8009fea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	2b0f      	cmp	r3, #15
 8009fd4:	d90b      	bls.n	8009fee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009fda:	e008      	b.n	8009fee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe0:	e006      	b.n	8009ff0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009fe2:	bf00      	nop
 8009fe4:	e004      	b.n	8009ff0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009fe6:	bf00      	nop
 8009fe8:	e002      	b.n	8009ff0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009fea:	bf00      	nop
 8009fec:	e000      	b.n	8009ff0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009fee:	bf00      	nop
  }
  if (status == HAL_OK)
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10d      	bne.n	800a012 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f023 0118 	bic.w	r1, r3, #24
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	430a      	orrs	r2, r1
 800a010:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a012:	7dfb      	ldrb	r3, [r7, #23]
}
 800a014:	4618      	mov	r0, r3
 800a016:	371c      	adds	r7, #28
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800a028:	f7fe fa86 	bl	8008538 <HAL_GetTick>
 800a02c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e2dc      	b.n	800a5f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b02      	cmp	r3, #2
 800a042:	d008      	beq.n	800a056 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2280      	movs	r2, #128	; 0x80
 800a048:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e2cd      	b.n	800a5f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a76      	ldr	r2, [pc, #472]	; (800a234 <HAL_DMA_Abort+0x214>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d04a      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a74      	ldr	r2, [pc, #464]	; (800a238 <HAL_DMA_Abort+0x218>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d045      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a73      	ldr	r2, [pc, #460]	; (800a23c <HAL_DMA_Abort+0x21c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d040      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a71      	ldr	r2, [pc, #452]	; (800a240 <HAL_DMA_Abort+0x220>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d03b      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a70      	ldr	r2, [pc, #448]	; (800a244 <HAL_DMA_Abort+0x224>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d036      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a6e      	ldr	r2, [pc, #440]	; (800a248 <HAL_DMA_Abort+0x228>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d031      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a6d      	ldr	r2, [pc, #436]	; (800a24c <HAL_DMA_Abort+0x22c>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d02c      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a6b      	ldr	r2, [pc, #428]	; (800a250 <HAL_DMA_Abort+0x230>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d027      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a6a      	ldr	r2, [pc, #424]	; (800a254 <HAL_DMA_Abort+0x234>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d022      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a68      	ldr	r2, [pc, #416]	; (800a258 <HAL_DMA_Abort+0x238>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d01d      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a67      	ldr	r2, [pc, #412]	; (800a25c <HAL_DMA_Abort+0x23c>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d018      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a65      	ldr	r2, [pc, #404]	; (800a260 <HAL_DMA_Abort+0x240>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d013      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a64      	ldr	r2, [pc, #400]	; (800a264 <HAL_DMA_Abort+0x244>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d00e      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a62      	ldr	r2, [pc, #392]	; (800a268 <HAL_DMA_Abort+0x248>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d009      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a61      	ldr	r2, [pc, #388]	; (800a26c <HAL_DMA_Abort+0x24c>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d004      	beq.n	800a0f6 <HAL_DMA_Abort+0xd6>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a5f      	ldr	r2, [pc, #380]	; (800a270 <HAL_DMA_Abort+0x250>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d101      	bne.n	800a0fa <HAL_DMA_Abort+0xda>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e000      	b.n	800a0fc <HAL_DMA_Abort+0xdc>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d013      	beq.n	800a128 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f022 021e 	bic.w	r2, r2, #30
 800a10e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	695a      	ldr	r2, [r3, #20]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a11e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	617b      	str	r3, [r7, #20]
 800a126:	e00a      	b.n	800a13e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 020e 	bic.w	r2, r2, #14
 800a136:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a3c      	ldr	r2, [pc, #240]	; (800a234 <HAL_DMA_Abort+0x214>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d072      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a3a      	ldr	r2, [pc, #232]	; (800a238 <HAL_DMA_Abort+0x218>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d06d      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a39      	ldr	r2, [pc, #228]	; (800a23c <HAL_DMA_Abort+0x21c>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d068      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a37      	ldr	r2, [pc, #220]	; (800a240 <HAL_DMA_Abort+0x220>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d063      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a36      	ldr	r2, [pc, #216]	; (800a244 <HAL_DMA_Abort+0x224>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d05e      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a34      	ldr	r2, [pc, #208]	; (800a248 <HAL_DMA_Abort+0x228>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d059      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a33      	ldr	r2, [pc, #204]	; (800a24c <HAL_DMA_Abort+0x22c>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d054      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a31      	ldr	r2, [pc, #196]	; (800a250 <HAL_DMA_Abort+0x230>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d04f      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a30      	ldr	r2, [pc, #192]	; (800a254 <HAL_DMA_Abort+0x234>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d04a      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a2e      	ldr	r2, [pc, #184]	; (800a258 <HAL_DMA_Abort+0x238>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d045      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a2d      	ldr	r2, [pc, #180]	; (800a25c <HAL_DMA_Abort+0x23c>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d040      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a2b      	ldr	r2, [pc, #172]	; (800a260 <HAL_DMA_Abort+0x240>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d03b      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a2a      	ldr	r2, [pc, #168]	; (800a264 <HAL_DMA_Abort+0x244>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d036      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a28      	ldr	r2, [pc, #160]	; (800a268 <HAL_DMA_Abort+0x248>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d031      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a27      	ldr	r2, [pc, #156]	; (800a26c <HAL_DMA_Abort+0x24c>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d02c      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a25      	ldr	r2, [pc, #148]	; (800a270 <HAL_DMA_Abort+0x250>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d027      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a24      	ldr	r2, [pc, #144]	; (800a274 <HAL_DMA_Abort+0x254>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d022      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a22      	ldr	r2, [pc, #136]	; (800a278 <HAL_DMA_Abort+0x258>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d01d      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a21      	ldr	r2, [pc, #132]	; (800a27c <HAL_DMA_Abort+0x25c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d018      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a1f      	ldr	r2, [pc, #124]	; (800a280 <HAL_DMA_Abort+0x260>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d013      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a1e      	ldr	r2, [pc, #120]	; (800a284 <HAL_DMA_Abort+0x264>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d00e      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a1c      	ldr	r2, [pc, #112]	; (800a288 <HAL_DMA_Abort+0x268>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d009      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a1b      	ldr	r2, [pc, #108]	; (800a28c <HAL_DMA_Abort+0x26c>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d004      	beq.n	800a22e <HAL_DMA_Abort+0x20e>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a19      	ldr	r2, [pc, #100]	; (800a290 <HAL_DMA_Abort+0x270>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d132      	bne.n	800a294 <HAL_DMA_Abort+0x274>
 800a22e:	2301      	movs	r3, #1
 800a230:	e031      	b.n	800a296 <HAL_DMA_Abort+0x276>
 800a232:	bf00      	nop
 800a234:	40020010 	.word	0x40020010
 800a238:	40020028 	.word	0x40020028
 800a23c:	40020040 	.word	0x40020040
 800a240:	40020058 	.word	0x40020058
 800a244:	40020070 	.word	0x40020070
 800a248:	40020088 	.word	0x40020088
 800a24c:	400200a0 	.word	0x400200a0
 800a250:	400200b8 	.word	0x400200b8
 800a254:	40020410 	.word	0x40020410
 800a258:	40020428 	.word	0x40020428
 800a25c:	40020440 	.word	0x40020440
 800a260:	40020458 	.word	0x40020458
 800a264:	40020470 	.word	0x40020470
 800a268:	40020488 	.word	0x40020488
 800a26c:	400204a0 	.word	0x400204a0
 800a270:	400204b8 	.word	0x400204b8
 800a274:	58025408 	.word	0x58025408
 800a278:	5802541c 	.word	0x5802541c
 800a27c:	58025430 	.word	0x58025430
 800a280:	58025444 	.word	0x58025444
 800a284:	58025458 	.word	0x58025458
 800a288:	5802546c 	.word	0x5802546c
 800a28c:	58025480 	.word	0x58025480
 800a290:	58025494 	.word	0x58025494
 800a294:	2300      	movs	r3, #0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d007      	beq.n	800a2aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a6d      	ldr	r2, [pc, #436]	; (800a464 <HAL_DMA_Abort+0x444>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d04a      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a6b      	ldr	r2, [pc, #428]	; (800a468 <HAL_DMA_Abort+0x448>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d045      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a6a      	ldr	r2, [pc, #424]	; (800a46c <HAL_DMA_Abort+0x44c>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d040      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a68      	ldr	r2, [pc, #416]	; (800a470 <HAL_DMA_Abort+0x450>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d03b      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a67      	ldr	r2, [pc, #412]	; (800a474 <HAL_DMA_Abort+0x454>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d036      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a65      	ldr	r2, [pc, #404]	; (800a478 <HAL_DMA_Abort+0x458>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d031      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a64      	ldr	r2, [pc, #400]	; (800a47c <HAL_DMA_Abort+0x45c>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d02c      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a62      	ldr	r2, [pc, #392]	; (800a480 <HAL_DMA_Abort+0x460>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d027      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a61      	ldr	r2, [pc, #388]	; (800a484 <HAL_DMA_Abort+0x464>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d022      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a5f      	ldr	r2, [pc, #380]	; (800a488 <HAL_DMA_Abort+0x468>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d01d      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a5e      	ldr	r2, [pc, #376]	; (800a48c <HAL_DMA_Abort+0x46c>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d018      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a5c      	ldr	r2, [pc, #368]	; (800a490 <HAL_DMA_Abort+0x470>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d013      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a5b      	ldr	r2, [pc, #364]	; (800a494 <HAL_DMA_Abort+0x474>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d00e      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a59      	ldr	r2, [pc, #356]	; (800a498 <HAL_DMA_Abort+0x478>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d009      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a58      	ldr	r2, [pc, #352]	; (800a49c <HAL_DMA_Abort+0x47c>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d004      	beq.n	800a34a <HAL_DMA_Abort+0x32a>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a56      	ldr	r2, [pc, #344]	; (800a4a0 <HAL_DMA_Abort+0x480>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d108      	bne.n	800a35c <HAL_DMA_Abort+0x33c>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f022 0201 	bic.w	r2, r2, #1
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	e007      	b.n	800a36c <HAL_DMA_Abort+0x34c>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0201 	bic.w	r2, r2, #1
 800a36a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a36c:	e013      	b.n	800a396 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a36e:	f7fe f8e3 	bl	8008538 <HAL_GetTick>
 800a372:	4602      	mov	r2, r0
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	2b05      	cmp	r3, #5
 800a37a:	d90c      	bls.n	800a396 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2220      	movs	r2, #32
 800a380:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2203      	movs	r2, #3
 800a386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e12d      	b.n	800a5f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1e5      	bne.n	800a36e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a2f      	ldr	r2, [pc, #188]	; (800a464 <HAL_DMA_Abort+0x444>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d04a      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a2d      	ldr	r2, [pc, #180]	; (800a468 <HAL_DMA_Abort+0x448>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d045      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a2c      	ldr	r2, [pc, #176]	; (800a46c <HAL_DMA_Abort+0x44c>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d040      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a2a      	ldr	r2, [pc, #168]	; (800a470 <HAL_DMA_Abort+0x450>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d03b      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a29      	ldr	r2, [pc, #164]	; (800a474 <HAL_DMA_Abort+0x454>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d036      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a27      	ldr	r2, [pc, #156]	; (800a478 <HAL_DMA_Abort+0x458>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d031      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a26      	ldr	r2, [pc, #152]	; (800a47c <HAL_DMA_Abort+0x45c>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d02c      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a24      	ldr	r2, [pc, #144]	; (800a480 <HAL_DMA_Abort+0x460>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d027      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a23      	ldr	r2, [pc, #140]	; (800a484 <HAL_DMA_Abort+0x464>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d022      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a21      	ldr	r2, [pc, #132]	; (800a488 <HAL_DMA_Abort+0x468>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d01d      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a20      	ldr	r2, [pc, #128]	; (800a48c <HAL_DMA_Abort+0x46c>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d018      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a1e      	ldr	r2, [pc, #120]	; (800a490 <HAL_DMA_Abort+0x470>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d013      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a1d      	ldr	r2, [pc, #116]	; (800a494 <HAL_DMA_Abort+0x474>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d00e      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a1b      	ldr	r2, [pc, #108]	; (800a498 <HAL_DMA_Abort+0x478>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d009      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a1a      	ldr	r2, [pc, #104]	; (800a49c <HAL_DMA_Abort+0x47c>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d004      	beq.n	800a442 <HAL_DMA_Abort+0x422>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a18      	ldr	r2, [pc, #96]	; (800a4a0 <HAL_DMA_Abort+0x480>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d101      	bne.n	800a446 <HAL_DMA_Abort+0x426>
 800a442:	2301      	movs	r3, #1
 800a444:	e000      	b.n	800a448 <HAL_DMA_Abort+0x428>
 800a446:	2300      	movs	r3, #0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d02b      	beq.n	800a4a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a450:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a456:	f003 031f 	and.w	r3, r3, #31
 800a45a:	223f      	movs	r2, #63	; 0x3f
 800a45c:	409a      	lsls	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	609a      	str	r2, [r3, #8]
 800a462:	e02a      	b.n	800a4ba <HAL_DMA_Abort+0x49a>
 800a464:	40020010 	.word	0x40020010
 800a468:	40020028 	.word	0x40020028
 800a46c:	40020040 	.word	0x40020040
 800a470:	40020058 	.word	0x40020058
 800a474:	40020070 	.word	0x40020070
 800a478:	40020088 	.word	0x40020088
 800a47c:	400200a0 	.word	0x400200a0
 800a480:	400200b8 	.word	0x400200b8
 800a484:	40020410 	.word	0x40020410
 800a488:	40020428 	.word	0x40020428
 800a48c:	40020440 	.word	0x40020440
 800a490:	40020458 	.word	0x40020458
 800a494:	40020470 	.word	0x40020470
 800a498:	40020488 	.word	0x40020488
 800a49c:	400204a0 	.word	0x400204a0
 800a4a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ae:	f003 031f 	and.w	r3, r3, #31
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	409a      	lsls	r2, r3
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a4f      	ldr	r2, [pc, #316]	; (800a5fc <HAL_DMA_Abort+0x5dc>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d072      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a4d      	ldr	r2, [pc, #308]	; (800a600 <HAL_DMA_Abort+0x5e0>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d06d      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a4c      	ldr	r2, [pc, #304]	; (800a604 <HAL_DMA_Abort+0x5e4>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d068      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a4a      	ldr	r2, [pc, #296]	; (800a608 <HAL_DMA_Abort+0x5e8>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d063      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a49      	ldr	r2, [pc, #292]	; (800a60c <HAL_DMA_Abort+0x5ec>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d05e      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a47      	ldr	r2, [pc, #284]	; (800a610 <HAL_DMA_Abort+0x5f0>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d059      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a46      	ldr	r2, [pc, #280]	; (800a614 <HAL_DMA_Abort+0x5f4>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d054      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a44      	ldr	r2, [pc, #272]	; (800a618 <HAL_DMA_Abort+0x5f8>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d04f      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a43      	ldr	r2, [pc, #268]	; (800a61c <HAL_DMA_Abort+0x5fc>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d04a      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a41      	ldr	r2, [pc, #260]	; (800a620 <HAL_DMA_Abort+0x600>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d045      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a40      	ldr	r2, [pc, #256]	; (800a624 <HAL_DMA_Abort+0x604>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d040      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a3e      	ldr	r2, [pc, #248]	; (800a628 <HAL_DMA_Abort+0x608>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d03b      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a3d      	ldr	r2, [pc, #244]	; (800a62c <HAL_DMA_Abort+0x60c>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d036      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a3b      	ldr	r2, [pc, #236]	; (800a630 <HAL_DMA_Abort+0x610>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d031      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a3a      	ldr	r2, [pc, #232]	; (800a634 <HAL_DMA_Abort+0x614>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d02c      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a38      	ldr	r2, [pc, #224]	; (800a638 <HAL_DMA_Abort+0x618>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d027      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a37      	ldr	r2, [pc, #220]	; (800a63c <HAL_DMA_Abort+0x61c>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d022      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a35      	ldr	r2, [pc, #212]	; (800a640 <HAL_DMA_Abort+0x620>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d01d      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a34      	ldr	r2, [pc, #208]	; (800a644 <HAL_DMA_Abort+0x624>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d018      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a32      	ldr	r2, [pc, #200]	; (800a648 <HAL_DMA_Abort+0x628>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d013      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a31      	ldr	r2, [pc, #196]	; (800a64c <HAL_DMA_Abort+0x62c>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d00e      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a2f      	ldr	r2, [pc, #188]	; (800a650 <HAL_DMA_Abort+0x630>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d009      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a2e      	ldr	r2, [pc, #184]	; (800a654 <HAL_DMA_Abort+0x634>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d004      	beq.n	800a5aa <HAL_DMA_Abort+0x58a>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a2c      	ldr	r2, [pc, #176]	; (800a658 <HAL_DMA_Abort+0x638>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d101      	bne.n	800a5ae <HAL_DMA_Abort+0x58e>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e000      	b.n	800a5b0 <HAL_DMA_Abort+0x590>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d015      	beq.n	800a5e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a5bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00c      	beq.n	800a5e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a5de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3718      	adds	r7, #24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	40020010 	.word	0x40020010
 800a600:	40020028 	.word	0x40020028
 800a604:	40020040 	.word	0x40020040
 800a608:	40020058 	.word	0x40020058
 800a60c:	40020070 	.word	0x40020070
 800a610:	40020088 	.word	0x40020088
 800a614:	400200a0 	.word	0x400200a0
 800a618:	400200b8 	.word	0x400200b8
 800a61c:	40020410 	.word	0x40020410
 800a620:	40020428 	.word	0x40020428
 800a624:	40020440 	.word	0x40020440
 800a628:	40020458 	.word	0x40020458
 800a62c:	40020470 	.word	0x40020470
 800a630:	40020488 	.word	0x40020488
 800a634:	400204a0 	.word	0x400204a0
 800a638:	400204b8 	.word	0x400204b8
 800a63c:	58025408 	.word	0x58025408
 800a640:	5802541c 	.word	0x5802541c
 800a644:	58025430 	.word	0x58025430
 800a648:	58025444 	.word	0x58025444
 800a64c:	58025458 	.word	0x58025458
 800a650:	5802546c 	.word	0x5802546c
 800a654:	58025480 	.word	0x58025480
 800a658:	58025494 	.word	0x58025494

0800a65c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e205      	b.n	800aa7a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a674:	b2db      	uxtb	r3, r3
 800a676:	2b02      	cmp	r3, #2
 800a678:	d004      	beq.n	800a684 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2280      	movs	r2, #128	; 0x80
 800a67e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e1fa      	b.n	800aa7a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a8c      	ldr	r2, [pc, #560]	; (800a8bc <HAL_DMA_Abort_IT+0x260>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d04a      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a8b      	ldr	r2, [pc, #556]	; (800a8c0 <HAL_DMA_Abort_IT+0x264>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d045      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a89      	ldr	r2, [pc, #548]	; (800a8c4 <HAL_DMA_Abort_IT+0x268>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d040      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a88      	ldr	r2, [pc, #544]	; (800a8c8 <HAL_DMA_Abort_IT+0x26c>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d03b      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a86      	ldr	r2, [pc, #536]	; (800a8cc <HAL_DMA_Abort_IT+0x270>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d036      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a85      	ldr	r2, [pc, #532]	; (800a8d0 <HAL_DMA_Abort_IT+0x274>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d031      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a83      	ldr	r2, [pc, #524]	; (800a8d4 <HAL_DMA_Abort_IT+0x278>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d02c      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a82      	ldr	r2, [pc, #520]	; (800a8d8 <HAL_DMA_Abort_IT+0x27c>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d027      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a80      	ldr	r2, [pc, #512]	; (800a8dc <HAL_DMA_Abort_IT+0x280>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d022      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a7f      	ldr	r2, [pc, #508]	; (800a8e0 <HAL_DMA_Abort_IT+0x284>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d01d      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a7d      	ldr	r2, [pc, #500]	; (800a8e4 <HAL_DMA_Abort_IT+0x288>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d018      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a7c      	ldr	r2, [pc, #496]	; (800a8e8 <HAL_DMA_Abort_IT+0x28c>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d013      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a7a      	ldr	r2, [pc, #488]	; (800a8ec <HAL_DMA_Abort_IT+0x290>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d00e      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a79      	ldr	r2, [pc, #484]	; (800a8f0 <HAL_DMA_Abort_IT+0x294>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d009      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a77      	ldr	r2, [pc, #476]	; (800a8f4 <HAL_DMA_Abort_IT+0x298>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d004      	beq.n	800a724 <HAL_DMA_Abort_IT+0xc8>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a76      	ldr	r2, [pc, #472]	; (800a8f8 <HAL_DMA_Abort_IT+0x29c>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d101      	bne.n	800a728 <HAL_DMA_Abort_IT+0xcc>
 800a724:	2301      	movs	r3, #1
 800a726:	e000      	b.n	800a72a <HAL_DMA_Abort_IT+0xce>
 800a728:	2300      	movs	r3, #0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d065      	beq.n	800a7fa <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2204      	movs	r2, #4
 800a732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a60      	ldr	r2, [pc, #384]	; (800a8bc <HAL_DMA_Abort_IT+0x260>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d04a      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a5e      	ldr	r2, [pc, #376]	; (800a8c0 <HAL_DMA_Abort_IT+0x264>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d045      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a5d      	ldr	r2, [pc, #372]	; (800a8c4 <HAL_DMA_Abort_IT+0x268>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d040      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a5b      	ldr	r2, [pc, #364]	; (800a8c8 <HAL_DMA_Abort_IT+0x26c>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d03b      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a5a      	ldr	r2, [pc, #360]	; (800a8cc <HAL_DMA_Abort_IT+0x270>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d036      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a58      	ldr	r2, [pc, #352]	; (800a8d0 <HAL_DMA_Abort_IT+0x274>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d031      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a57      	ldr	r2, [pc, #348]	; (800a8d4 <HAL_DMA_Abort_IT+0x278>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d02c      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a55      	ldr	r2, [pc, #340]	; (800a8d8 <HAL_DMA_Abort_IT+0x27c>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d027      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a54      	ldr	r2, [pc, #336]	; (800a8dc <HAL_DMA_Abort_IT+0x280>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d022      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a52      	ldr	r2, [pc, #328]	; (800a8e0 <HAL_DMA_Abort_IT+0x284>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d01d      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a51      	ldr	r2, [pc, #324]	; (800a8e4 <HAL_DMA_Abort_IT+0x288>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d018      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a4f      	ldr	r2, [pc, #316]	; (800a8e8 <HAL_DMA_Abort_IT+0x28c>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d013      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a4e      	ldr	r2, [pc, #312]	; (800a8ec <HAL_DMA_Abort_IT+0x290>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d00e      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a4c      	ldr	r2, [pc, #304]	; (800a8f0 <HAL_DMA_Abort_IT+0x294>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d009      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a4b      	ldr	r2, [pc, #300]	; (800a8f4 <HAL_DMA_Abort_IT+0x298>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d004      	beq.n	800a7d6 <HAL_DMA_Abort_IT+0x17a>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a49      	ldr	r2, [pc, #292]	; (800a8f8 <HAL_DMA_Abort_IT+0x29c>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d108      	bne.n	800a7e8 <HAL_DMA_Abort_IT+0x18c>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f022 0201 	bic.w	r2, r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	e147      	b.n	800aa78 <HAL_DMA_Abort_IT+0x41c>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f022 0201 	bic.w	r2, r2, #1
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	e13e      	b.n	800aa78 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 020e 	bic.w	r2, r2, #14
 800a808:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a2b      	ldr	r2, [pc, #172]	; (800a8bc <HAL_DMA_Abort_IT+0x260>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d04a      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a29      	ldr	r2, [pc, #164]	; (800a8c0 <HAL_DMA_Abort_IT+0x264>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d045      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a28      	ldr	r2, [pc, #160]	; (800a8c4 <HAL_DMA_Abort_IT+0x268>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d040      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a26      	ldr	r2, [pc, #152]	; (800a8c8 <HAL_DMA_Abort_IT+0x26c>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d03b      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a25      	ldr	r2, [pc, #148]	; (800a8cc <HAL_DMA_Abort_IT+0x270>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d036      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a23      	ldr	r2, [pc, #140]	; (800a8d0 <HAL_DMA_Abort_IT+0x274>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d031      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a22      	ldr	r2, [pc, #136]	; (800a8d4 <HAL_DMA_Abort_IT+0x278>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d02c      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a20      	ldr	r2, [pc, #128]	; (800a8d8 <HAL_DMA_Abort_IT+0x27c>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d027      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a1f      	ldr	r2, [pc, #124]	; (800a8dc <HAL_DMA_Abort_IT+0x280>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d022      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a1d      	ldr	r2, [pc, #116]	; (800a8e0 <HAL_DMA_Abort_IT+0x284>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d01d      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a1c      	ldr	r2, [pc, #112]	; (800a8e4 <HAL_DMA_Abort_IT+0x288>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d018      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a1a      	ldr	r2, [pc, #104]	; (800a8e8 <HAL_DMA_Abort_IT+0x28c>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d013      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a19      	ldr	r2, [pc, #100]	; (800a8ec <HAL_DMA_Abort_IT+0x290>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d00e      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a17      	ldr	r2, [pc, #92]	; (800a8f0 <HAL_DMA_Abort_IT+0x294>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d009      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a16      	ldr	r2, [pc, #88]	; (800a8f4 <HAL_DMA_Abort_IT+0x298>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d004      	beq.n	800a8aa <HAL_DMA_Abort_IT+0x24e>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a14      	ldr	r2, [pc, #80]	; (800a8f8 <HAL_DMA_Abort_IT+0x29c>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d128      	bne.n	800a8fc <HAL_DMA_Abort_IT+0x2a0>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f022 0201 	bic.w	r2, r2, #1
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	e027      	b.n	800a90c <HAL_DMA_Abort_IT+0x2b0>
 800a8bc:	40020010 	.word	0x40020010
 800a8c0:	40020028 	.word	0x40020028
 800a8c4:	40020040 	.word	0x40020040
 800a8c8:	40020058 	.word	0x40020058
 800a8cc:	40020070 	.word	0x40020070
 800a8d0:	40020088 	.word	0x40020088
 800a8d4:	400200a0 	.word	0x400200a0
 800a8d8:	400200b8 	.word	0x400200b8
 800a8dc:	40020410 	.word	0x40020410
 800a8e0:	40020428 	.word	0x40020428
 800a8e4:	40020440 	.word	0x40020440
 800a8e8:	40020458 	.word	0x40020458
 800a8ec:	40020470 	.word	0x40020470
 800a8f0:	40020488 	.word	0x40020488
 800a8f4:	400204a0 	.word	0x400204a0
 800a8f8:	400204b8 	.word	0x400204b8
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f022 0201 	bic.w	r2, r2, #1
 800a90a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a5c      	ldr	r2, [pc, #368]	; (800aa84 <HAL_DMA_Abort_IT+0x428>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d072      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a5b      	ldr	r2, [pc, #364]	; (800aa88 <HAL_DMA_Abort_IT+0x42c>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d06d      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a59      	ldr	r2, [pc, #356]	; (800aa8c <HAL_DMA_Abort_IT+0x430>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d068      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a58      	ldr	r2, [pc, #352]	; (800aa90 <HAL_DMA_Abort_IT+0x434>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d063      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a56      	ldr	r2, [pc, #344]	; (800aa94 <HAL_DMA_Abort_IT+0x438>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d05e      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a55      	ldr	r2, [pc, #340]	; (800aa98 <HAL_DMA_Abort_IT+0x43c>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d059      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a53      	ldr	r2, [pc, #332]	; (800aa9c <HAL_DMA_Abort_IT+0x440>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d054      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a52      	ldr	r2, [pc, #328]	; (800aaa0 <HAL_DMA_Abort_IT+0x444>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d04f      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a50      	ldr	r2, [pc, #320]	; (800aaa4 <HAL_DMA_Abort_IT+0x448>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d04a      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a4f      	ldr	r2, [pc, #316]	; (800aaa8 <HAL_DMA_Abort_IT+0x44c>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d045      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a4d      	ldr	r2, [pc, #308]	; (800aaac <HAL_DMA_Abort_IT+0x450>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d040      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a4c      	ldr	r2, [pc, #304]	; (800aab0 <HAL_DMA_Abort_IT+0x454>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d03b      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a4a      	ldr	r2, [pc, #296]	; (800aab4 <HAL_DMA_Abort_IT+0x458>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d036      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a49      	ldr	r2, [pc, #292]	; (800aab8 <HAL_DMA_Abort_IT+0x45c>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d031      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a47      	ldr	r2, [pc, #284]	; (800aabc <HAL_DMA_Abort_IT+0x460>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d02c      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a46      	ldr	r2, [pc, #280]	; (800aac0 <HAL_DMA_Abort_IT+0x464>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d027      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a44      	ldr	r2, [pc, #272]	; (800aac4 <HAL_DMA_Abort_IT+0x468>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d022      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a43      	ldr	r2, [pc, #268]	; (800aac8 <HAL_DMA_Abort_IT+0x46c>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d01d      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a41      	ldr	r2, [pc, #260]	; (800aacc <HAL_DMA_Abort_IT+0x470>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d018      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a40      	ldr	r2, [pc, #256]	; (800aad0 <HAL_DMA_Abort_IT+0x474>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d013      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a3e      	ldr	r2, [pc, #248]	; (800aad4 <HAL_DMA_Abort_IT+0x478>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d00e      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a3d      	ldr	r2, [pc, #244]	; (800aad8 <HAL_DMA_Abort_IT+0x47c>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d009      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a3b      	ldr	r2, [pc, #236]	; (800aadc <HAL_DMA_Abort_IT+0x480>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d004      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x3a0>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a3a      	ldr	r2, [pc, #232]	; (800aae0 <HAL_DMA_Abort_IT+0x484>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d101      	bne.n	800aa00 <HAL_DMA_Abort_IT+0x3a4>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e000      	b.n	800aa02 <HAL_DMA_Abort_IT+0x3a6>
 800aa00:	2300      	movs	r3, #0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d028      	beq.n	800aa58 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa20:	f003 031f 	and.w	r3, r3, #31
 800aa24:	2201      	movs	r2, #1
 800aa26:	409a      	lsls	r2, r3
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800aa34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00c      	beq.n	800aa58 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800aa56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d003      	beq.n	800aa78 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	40020010 	.word	0x40020010
 800aa88:	40020028 	.word	0x40020028
 800aa8c:	40020040 	.word	0x40020040
 800aa90:	40020058 	.word	0x40020058
 800aa94:	40020070 	.word	0x40020070
 800aa98:	40020088 	.word	0x40020088
 800aa9c:	400200a0 	.word	0x400200a0
 800aaa0:	400200b8 	.word	0x400200b8
 800aaa4:	40020410 	.word	0x40020410
 800aaa8:	40020428 	.word	0x40020428
 800aaac:	40020440 	.word	0x40020440
 800aab0:	40020458 	.word	0x40020458
 800aab4:	40020470 	.word	0x40020470
 800aab8:	40020488 	.word	0x40020488
 800aabc:	400204a0 	.word	0x400204a0
 800aac0:	400204b8 	.word	0x400204b8
 800aac4:	58025408 	.word	0x58025408
 800aac8:	5802541c 	.word	0x5802541c
 800aacc:	58025430 	.word	0x58025430
 800aad0:	58025444 	.word	0x58025444
 800aad4:	58025458 	.word	0x58025458
 800aad8:	5802546c 	.word	0x5802546c
 800aadc:	58025480 	.word	0x58025480
 800aae0:	58025494 	.word	0x58025494

0800aae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b089      	sub	sp, #36	; 0x24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800aaf2:	4b86      	ldr	r3, [pc, #536]	; (800ad0c <HAL_GPIO_Init+0x228>)
 800aaf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aaf6:	e18c      	b.n	800ae12 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	2101      	movs	r1, #1
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	fa01 f303 	lsl.w	r3, r1, r3
 800ab04:	4013      	ands	r3, r2
 800ab06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 817e 	beq.w	800ae0c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f003 0303 	and.w	r3, r3, #3
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d005      	beq.n	800ab28 <HAL_GPIO_Init+0x44>
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	f003 0303 	and.w	r3, r3, #3
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d130      	bne.n	800ab8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	005b      	lsls	r3, r3, #1
 800ab32:	2203      	movs	r2, #3
 800ab34:	fa02 f303 	lsl.w	r3, r2, r3
 800ab38:	43db      	mvns	r3, r3
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	68da      	ldr	r2, [r3, #12]
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	fa02 f303 	lsl.w	r3, r2, r3
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	69ba      	ldr	r2, [r7, #24]
 800ab56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ab5e:	2201      	movs	r2, #1
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	fa02 f303 	lsl.w	r3, r2, r3
 800ab66:	43db      	mvns	r3, r3
 800ab68:	69ba      	ldr	r2, [r7, #24]
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	091b      	lsrs	r3, r3, #4
 800ab74:	f003 0201 	and.w	r2, r3, #1
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab7e:	69ba      	ldr	r2, [r7, #24]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	f003 0303 	and.w	r3, r3, #3
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d017      	beq.n	800abc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	005b      	lsls	r3, r3, #1
 800aba0:	2203      	movs	r2, #3
 800aba2:	fa02 f303 	lsl.w	r3, r2, r3
 800aba6:	43db      	mvns	r3, r3
 800aba8:	69ba      	ldr	r2, [r7, #24]
 800abaa:	4013      	ands	r3, r2
 800abac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	689a      	ldr	r2, [r3, #8]
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	fa02 f303 	lsl.w	r3, r2, r3
 800abba:	69ba      	ldr	r2, [r7, #24]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	69ba      	ldr	r2, [r7, #24]
 800abc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f003 0303 	and.w	r3, r3, #3
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d123      	bne.n	800ac1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	08da      	lsrs	r2, r3, #3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	3208      	adds	r2, #8
 800abda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	f003 0307 	and.w	r3, r3, #7
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	220f      	movs	r2, #15
 800abea:	fa02 f303 	lsl.w	r3, r2, r3
 800abee:	43db      	mvns	r3, r3
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	4013      	ands	r3, r2
 800abf4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	691a      	ldr	r2, [r3, #16]
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	f003 0307 	and.w	r3, r3, #7
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	fa02 f303 	lsl.w	r3, r2, r3
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	08da      	lsrs	r2, r3, #3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3208      	adds	r2, #8
 800ac14:	69b9      	ldr	r1, [r7, #24]
 800ac16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	005b      	lsls	r3, r3, #1
 800ac24:	2203      	movs	r2, #3
 800ac26:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2a:	43db      	mvns	r3, r3
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	4013      	ands	r3, r2
 800ac30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f003 0203 	and.w	r2, r3, #3
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac42:	69ba      	ldr	r2, [r7, #24]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	69ba      	ldr	r2, [r7, #24]
 800ac4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 80d8 	beq.w	800ae0c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac5c:	4b2c      	ldr	r3, [pc, #176]	; (800ad10 <HAL_GPIO_Init+0x22c>)
 800ac5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac62:	4a2b      	ldr	r2, [pc, #172]	; (800ad10 <HAL_GPIO_Init+0x22c>)
 800ac64:	f043 0302 	orr.w	r3, r3, #2
 800ac68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ac6c:	4b28      	ldr	r3, [pc, #160]	; (800ad10 <HAL_GPIO_Init+0x22c>)
 800ac6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac72:	f003 0302 	and.w	r3, r3, #2
 800ac76:	60fb      	str	r3, [r7, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ac7a:	4a26      	ldr	r2, [pc, #152]	; (800ad14 <HAL_GPIO_Init+0x230>)
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	089b      	lsrs	r3, r3, #2
 800ac80:	3302      	adds	r3, #2
 800ac82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	220f      	movs	r2, #15
 800ac92:	fa02 f303 	lsl.w	r3, r2, r3
 800ac96:	43db      	mvns	r3, r3
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a1d      	ldr	r2, [pc, #116]	; (800ad18 <HAL_GPIO_Init+0x234>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d04a      	beq.n	800ad3c <HAL_GPIO_Init+0x258>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a1c      	ldr	r2, [pc, #112]	; (800ad1c <HAL_GPIO_Init+0x238>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d02b      	beq.n	800ad06 <HAL_GPIO_Init+0x222>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a1b      	ldr	r2, [pc, #108]	; (800ad20 <HAL_GPIO_Init+0x23c>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d025      	beq.n	800ad02 <HAL_GPIO_Init+0x21e>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a1a      	ldr	r2, [pc, #104]	; (800ad24 <HAL_GPIO_Init+0x240>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d01f      	beq.n	800acfe <HAL_GPIO_Init+0x21a>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a19      	ldr	r2, [pc, #100]	; (800ad28 <HAL_GPIO_Init+0x244>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d019      	beq.n	800acfa <HAL_GPIO_Init+0x216>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a18      	ldr	r2, [pc, #96]	; (800ad2c <HAL_GPIO_Init+0x248>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d013      	beq.n	800acf6 <HAL_GPIO_Init+0x212>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a17      	ldr	r2, [pc, #92]	; (800ad30 <HAL_GPIO_Init+0x24c>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d00d      	beq.n	800acf2 <HAL_GPIO_Init+0x20e>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a16      	ldr	r2, [pc, #88]	; (800ad34 <HAL_GPIO_Init+0x250>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d007      	beq.n	800acee <HAL_GPIO_Init+0x20a>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a15      	ldr	r2, [pc, #84]	; (800ad38 <HAL_GPIO_Init+0x254>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d101      	bne.n	800acea <HAL_GPIO_Init+0x206>
 800ace6:	2309      	movs	r3, #9
 800ace8:	e029      	b.n	800ad3e <HAL_GPIO_Init+0x25a>
 800acea:	230a      	movs	r3, #10
 800acec:	e027      	b.n	800ad3e <HAL_GPIO_Init+0x25a>
 800acee:	2307      	movs	r3, #7
 800acf0:	e025      	b.n	800ad3e <HAL_GPIO_Init+0x25a>
 800acf2:	2306      	movs	r3, #6
 800acf4:	e023      	b.n	800ad3e <HAL_GPIO_Init+0x25a>
 800acf6:	2305      	movs	r3, #5
 800acf8:	e021      	b.n	800ad3e <HAL_GPIO_Init+0x25a>
 800acfa:	2304      	movs	r3, #4
 800acfc:	e01f      	b.n	800ad3e <HAL_GPIO_Init+0x25a>
 800acfe:	2303      	movs	r3, #3
 800ad00:	e01d      	b.n	800ad3e <HAL_GPIO_Init+0x25a>
 800ad02:	2302      	movs	r3, #2
 800ad04:	e01b      	b.n	800ad3e <HAL_GPIO_Init+0x25a>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e019      	b.n	800ad3e <HAL_GPIO_Init+0x25a>
 800ad0a:	bf00      	nop
 800ad0c:	58000080 	.word	0x58000080
 800ad10:	58024400 	.word	0x58024400
 800ad14:	58000400 	.word	0x58000400
 800ad18:	58020000 	.word	0x58020000
 800ad1c:	58020400 	.word	0x58020400
 800ad20:	58020800 	.word	0x58020800
 800ad24:	58020c00 	.word	0x58020c00
 800ad28:	58021000 	.word	0x58021000
 800ad2c:	58021400 	.word	0x58021400
 800ad30:	58021800 	.word	0x58021800
 800ad34:	58021c00 	.word	0x58021c00
 800ad38:	58022400 	.word	0x58022400
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	69fa      	ldr	r2, [r7, #28]
 800ad40:	f002 0203 	and.w	r2, r2, #3
 800ad44:	0092      	lsls	r2, r2, #2
 800ad46:	4093      	lsls	r3, r2
 800ad48:	69ba      	ldr	r2, [r7, #24]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad4e:	4938      	ldr	r1, [pc, #224]	; (800ae30 <HAL_GPIO_Init+0x34c>)
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	089b      	lsrs	r3, r3, #2
 800ad54:	3302      	adds	r3, #2
 800ad56:	69ba      	ldr	r2, [r7, #24]
 800ad58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ad5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	43db      	mvns	r3, r3
 800ad68:	69ba      	ldr	r2, [r7, #24]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800ad7a:	69ba      	ldr	r2, [r7, #24]
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ad82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ad8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	43db      	mvns	r3, r3
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	4013      	ands	r3, r2
 800ad9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800ada8:	69ba      	ldr	r2, [r7, #24]
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	4313      	orrs	r3, r2
 800adae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800adb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	43db      	mvns	r3, r3
 800adc2:	69ba      	ldr	r2, [r7, #24]
 800adc4:	4013      	ands	r3, r2
 800adc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800add4:	69ba      	ldr	r2, [r7, #24]
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	4313      	orrs	r3, r2
 800adda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	69ba      	ldr	r2, [r7, #24]
 800ade0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	43db      	mvns	r3, r3
 800adec:	69ba      	ldr	r2, [r7, #24]
 800adee:	4013      	ands	r3, r2
 800adf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	69ba      	ldr	r2, [r7, #24]
 800ae0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	fa22 f303 	lsr.w	r3, r2, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f47f ae6b 	bne.w	800aaf8 <HAL_GPIO_Init+0x14>
  }
}
 800ae22:	bf00      	nop
 800ae24:	bf00      	nop
 800ae26:	3724      	adds	r7, #36	; 0x24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr
 800ae30:	58000400 	.word	0x58000400

0800ae34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	807b      	strh	r3, [r7, #2]
 800ae40:	4613      	mov	r3, r2
 800ae42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ae44:	787b      	ldrb	r3, [r7, #1]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ae4a:	887a      	ldrh	r2, [r7, #2]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ae50:	e003      	b.n	800ae5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ae52:	887b      	ldrh	r3, [r7, #2]
 800ae54:	041a      	lsls	r2, r3, #16
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	619a      	str	r2, [r3, #24]
}
 800ae5a:	bf00      	nop
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
	...

0800ae68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ae70:	4b19      	ldr	r3, [pc, #100]	; (800aed8 <HAL_PWREx_ConfigSupply+0x70>)
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b04      	cmp	r3, #4
 800ae7a:	d00a      	beq.n	800ae92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ae7c:	4b16      	ldr	r3, [pc, #88]	; (800aed8 <HAL_PWREx_ConfigSupply+0x70>)
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	f003 0307 	and.w	r3, r3, #7
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d001      	beq.n	800ae8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e01f      	b.n	800aece <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e01d      	b.n	800aece <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ae92:	4b11      	ldr	r3, [pc, #68]	; (800aed8 <HAL_PWREx_ConfigSupply+0x70>)
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f023 0207 	bic.w	r2, r3, #7
 800ae9a:	490f      	ldr	r1, [pc, #60]	; (800aed8 <HAL_PWREx_ConfigSupply+0x70>)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800aea2:	f7fd fb49 	bl	8008538 <HAL_GetTick>
 800aea6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aea8:	e009      	b.n	800aebe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aeaa:	f7fd fb45 	bl	8008538 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aeb8:	d901      	bls.n	800aebe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e007      	b.n	800aece <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aebe:	4b06      	ldr	r3, [pc, #24]	; (800aed8 <HAL_PWREx_ConfigSupply+0x70>)
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeca:	d1ee      	bne.n	800aeaa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	58024800 	.word	0x58024800

0800aedc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08c      	sub	sp, #48	; 0x30
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e397      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 0301 	and.w	r3, r3, #1
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 8087 	beq.w	800b00a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aefc:	4b9e      	ldr	r3, [pc, #632]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af04:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800af06:	4b9c      	ldr	r3, [pc, #624]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800af0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0e:	2b10      	cmp	r3, #16
 800af10:	d007      	beq.n	800af22 <HAL_RCC_OscConfig+0x46>
 800af12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af14:	2b18      	cmp	r3, #24
 800af16:	d110      	bne.n	800af3a <HAL_RCC_OscConfig+0x5e>
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	f003 0303 	and.w	r3, r3, #3
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d10b      	bne.n	800af3a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af22:	4b95      	ldr	r3, [pc, #596]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d06c      	beq.n	800b008 <HAL_RCC_OscConfig+0x12c>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d168      	bne.n	800b008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e371      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af42:	d106      	bne.n	800af52 <HAL_RCC_OscConfig+0x76>
 800af44:	4b8c      	ldr	r3, [pc, #560]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a8b      	ldr	r2, [pc, #556]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af4e:	6013      	str	r3, [r2, #0]
 800af50:	e02e      	b.n	800afb0 <HAL_RCC_OscConfig+0xd4>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10c      	bne.n	800af74 <HAL_RCC_OscConfig+0x98>
 800af5a:	4b87      	ldr	r3, [pc, #540]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a86      	ldr	r2, [pc, #536]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	4b84      	ldr	r3, [pc, #528]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a83      	ldr	r2, [pc, #524]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af70:	6013      	str	r3, [r2, #0]
 800af72:	e01d      	b.n	800afb0 <HAL_RCC_OscConfig+0xd4>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af7c:	d10c      	bne.n	800af98 <HAL_RCC_OscConfig+0xbc>
 800af7e:	4b7e      	ldr	r3, [pc, #504]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a7d      	ldr	r2, [pc, #500]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af88:	6013      	str	r3, [r2, #0]
 800af8a:	4b7b      	ldr	r3, [pc, #492]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a7a      	ldr	r2, [pc, #488]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af94:	6013      	str	r3, [r2, #0]
 800af96:	e00b      	b.n	800afb0 <HAL_RCC_OscConfig+0xd4>
 800af98:	4b77      	ldr	r3, [pc, #476]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a76      	ldr	r2, [pc, #472]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800af9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afa2:	6013      	str	r3, [r2, #0]
 800afa4:	4b74      	ldr	r3, [pc, #464]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a73      	ldr	r2, [pc, #460]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800afaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d013      	beq.n	800afe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb8:	f7fd fabe 	bl	8008538 <HAL_GetTick>
 800afbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afbe:	e008      	b.n	800afd2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800afc0:	f7fd faba 	bl	8008538 <HAL_GetTick>
 800afc4:	4602      	mov	r2, r0
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	2b64      	cmp	r3, #100	; 0x64
 800afcc:	d901      	bls.n	800afd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800afce:	2303      	movs	r3, #3
 800afd0:	e325      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afd2:	4b69      	ldr	r3, [pc, #420]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d0f0      	beq.n	800afc0 <HAL_RCC_OscConfig+0xe4>
 800afde:	e014      	b.n	800b00a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe0:	f7fd faaa 	bl	8008538 <HAL_GetTick>
 800afe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800afe6:	e008      	b.n	800affa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800afe8:	f7fd faa6 	bl	8008538 <HAL_GetTick>
 800afec:	4602      	mov	r2, r0
 800afee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	2b64      	cmp	r3, #100	; 0x64
 800aff4:	d901      	bls.n	800affa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e311      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800affa:	4b5f      	ldr	r3, [pc, #380]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1f0      	bne.n	800afe8 <HAL_RCC_OscConfig+0x10c>
 800b006:	e000      	b.n	800b00a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0302 	and.w	r3, r3, #2
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 808a 	beq.w	800b12c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b018:	4b57      	ldr	r3, [pc, #348]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b020:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b022:	4b55      	ldr	r3, [pc, #340]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b026:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d007      	beq.n	800b03e <HAL_RCC_OscConfig+0x162>
 800b02e:	6a3b      	ldr	r3, [r7, #32]
 800b030:	2b18      	cmp	r3, #24
 800b032:	d137      	bne.n	800b0a4 <HAL_RCC_OscConfig+0x1c8>
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	f003 0303 	and.w	r3, r3, #3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d132      	bne.n	800b0a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b03e:	4b4e      	ldr	r3, [pc, #312]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0304 	and.w	r3, r3, #4
 800b046:	2b00      	cmp	r3, #0
 800b048:	d005      	beq.n	800b056 <HAL_RCC_OscConfig+0x17a>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e2e3      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b056:	4b48      	ldr	r3, [pc, #288]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f023 0219 	bic.w	r2, r3, #25
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	4945      	ldr	r1, [pc, #276]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b064:	4313      	orrs	r3, r2
 800b066:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b068:	f7fd fa66 	bl	8008538 <HAL_GetTick>
 800b06c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b06e:	e008      	b.n	800b082 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b070:	f7fd fa62 	bl	8008538 <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d901      	bls.n	800b082 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800b07e:	2303      	movs	r3, #3
 800b080:	e2cd      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b082:	4b3d      	ldr	r3, [pc, #244]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 0304 	and.w	r3, r3, #4
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0f0      	beq.n	800b070 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b08e:	4b3a      	ldr	r3, [pc, #232]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	061b      	lsls	r3, r3, #24
 800b09c:	4936      	ldr	r1, [pc, #216]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0a2:	e043      	b.n	800b12c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d026      	beq.n	800b0fa <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b0ac:	4b32      	ldr	r3, [pc, #200]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f023 0219 	bic.w	r2, r3, #25
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	492f      	ldr	r1, [pc, #188]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0be:	f7fd fa3b 	bl	8008538 <HAL_GetTick>
 800b0c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0c4:	e008      	b.n	800b0d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0c6:	f7fd fa37 	bl	8008538 <HAL_GetTick>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d901      	bls.n	800b0d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e2a2      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0d8:	4b27      	ldr	r3, [pc, #156]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 0304 	and.w	r3, r3, #4
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d0f0      	beq.n	800b0c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0e4:	4b24      	ldr	r3, [pc, #144]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	061b      	lsls	r3, r3, #24
 800b0f2:	4921      	ldr	r1, [pc, #132]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	604b      	str	r3, [r1, #4]
 800b0f8:	e018      	b.n	800b12c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0fa:	4b1f      	ldr	r3, [pc, #124]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a1e      	ldr	r2, [pc, #120]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b100:	f023 0301 	bic.w	r3, r3, #1
 800b104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b106:	f7fd fa17 	bl	8008538 <HAL_GetTick>
 800b10a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b10c:	e008      	b.n	800b120 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b10e:	f7fd fa13 	bl	8008538 <HAL_GetTick>
 800b112:	4602      	mov	r2, r0
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d901      	bls.n	800b120 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e27e      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b120:	4b15      	ldr	r3, [pc, #84]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 0304 	and.w	r3, r3, #4
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1f0      	bne.n	800b10e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0310 	and.w	r3, r3, #16
 800b134:	2b00      	cmp	r3, #0
 800b136:	d06d      	beq.n	800b214 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b138:	4b0f      	ldr	r3, [pc, #60]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b140:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b142:	4b0d      	ldr	r3, [pc, #52]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b146:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	2b08      	cmp	r3, #8
 800b14c:	d007      	beq.n	800b15e <HAL_RCC_OscConfig+0x282>
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	2b18      	cmp	r3, #24
 800b152:	d11e      	bne.n	800b192 <HAL_RCC_OscConfig+0x2b6>
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f003 0303 	and.w	r3, r3, #3
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d119      	bne.n	800b192 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b15e:	4b06      	ldr	r3, [pc, #24]	; (800b178 <HAL_RCC_OscConfig+0x29c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b166:	2b00      	cmp	r3, #0
 800b168:	d008      	beq.n	800b17c <HAL_RCC_OscConfig+0x2a0>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	2b80      	cmp	r3, #128	; 0x80
 800b170:	d004      	beq.n	800b17c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e253      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
 800b176:	bf00      	nop
 800b178:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b17c:	4ba3      	ldr	r3, [pc, #652]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a1b      	ldr	r3, [r3, #32]
 800b188:	061b      	lsls	r3, r3, #24
 800b18a:	49a0      	ldr	r1, [pc, #640]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b18c:	4313      	orrs	r3, r2
 800b18e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b190:	e040      	b.n	800b214 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d023      	beq.n	800b1e2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b19a:	4b9c      	ldr	r3, [pc, #624]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a9b      	ldr	r2, [pc, #620]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1a6:	f7fd f9c7 	bl	8008538 <HAL_GetTick>
 800b1aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b1ac:	e008      	b.n	800b1c0 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b1ae:	f7fd f9c3 	bl	8008538 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d901      	bls.n	800b1c0 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	e22e      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b1c0:	4b92      	ldr	r3, [pc, #584]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0f0      	beq.n	800b1ae <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b1cc:	4b8f      	ldr	r3, [pc, #572]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	061b      	lsls	r3, r3, #24
 800b1da:	498c      	ldr	r1, [pc, #560]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	60cb      	str	r3, [r1, #12]
 800b1e0:	e018      	b.n	800b214 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b1e2:	4b8a      	ldr	r3, [pc, #552]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a89      	ldr	r2, [pc, #548]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b1e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1ee:	f7fd f9a3 	bl	8008538 <HAL_GetTick>
 800b1f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b1f4:	e008      	b.n	800b208 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b1f6:	f7fd f99f 	bl	8008538 <HAL_GetTick>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	2b02      	cmp	r3, #2
 800b202:	d901      	bls.n	800b208 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b204:	2303      	movs	r3, #3
 800b206:	e20a      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b208:	4b80      	ldr	r3, [pc, #512]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1f0      	bne.n	800b1f6 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 0308 	and.w	r3, r3, #8
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d036      	beq.n	800b28e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d019      	beq.n	800b25c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b228:	4b78      	ldr	r3, [pc, #480]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b22a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b22c:	4a77      	ldr	r2, [pc, #476]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b22e:	f043 0301 	orr.w	r3, r3, #1
 800b232:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b234:	f7fd f980 	bl	8008538 <HAL_GetTick>
 800b238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b23a:	e008      	b.n	800b24e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b23c:	f7fd f97c 	bl	8008538 <HAL_GetTick>
 800b240:	4602      	mov	r2, r0
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	2b02      	cmp	r3, #2
 800b248:	d901      	bls.n	800b24e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800b24a:	2303      	movs	r3, #3
 800b24c:	e1e7      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b24e:	4b6f      	ldr	r3, [pc, #444]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b252:	f003 0302 	and.w	r3, r3, #2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0f0      	beq.n	800b23c <HAL_RCC_OscConfig+0x360>
 800b25a:	e018      	b.n	800b28e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b25c:	4b6b      	ldr	r3, [pc, #428]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b260:	4a6a      	ldr	r2, [pc, #424]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b262:	f023 0301 	bic.w	r3, r3, #1
 800b266:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b268:	f7fd f966 	bl	8008538 <HAL_GetTick>
 800b26c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b26e:	e008      	b.n	800b282 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b270:	f7fd f962 	bl	8008538 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d901      	bls.n	800b282 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	e1cd      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b282:	4b62      	ldr	r3, [pc, #392]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b286:	f003 0302 	and.w	r3, r3, #2
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1f0      	bne.n	800b270 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0320 	and.w	r3, r3, #32
 800b296:	2b00      	cmp	r3, #0
 800b298:	d036      	beq.n	800b308 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d019      	beq.n	800b2d6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b2a2:	4b5a      	ldr	r3, [pc, #360]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a59      	ldr	r2, [pc, #356]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b2a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b2ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b2ae:	f7fd f943 	bl	8008538 <HAL_GetTick>
 800b2b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b2b4:	e008      	b.n	800b2c8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b2b6:	f7fd f93f 	bl	8008538 <HAL_GetTick>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d901      	bls.n	800b2c8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e1aa      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b2c8:	4b50      	ldr	r3, [pc, #320]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0f0      	beq.n	800b2b6 <HAL_RCC_OscConfig+0x3da>
 800b2d4:	e018      	b.n	800b308 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b2d6:	4b4d      	ldr	r3, [pc, #308]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a4c      	ldr	r2, [pc, #304]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b2dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b2e2:	f7fd f929 	bl	8008538 <HAL_GetTick>
 800b2e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b2e8:	e008      	b.n	800b2fc <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b2ea:	f7fd f925 	bl	8008538 <HAL_GetTick>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d901      	bls.n	800b2fc <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e190      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b2fc:	4b43      	ldr	r3, [pc, #268]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1f0      	bne.n	800b2ea <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0304 	and.w	r3, r3, #4
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 8085 	beq.w	800b420 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b316:	4b3e      	ldr	r3, [pc, #248]	; (800b410 <HAL_RCC_OscConfig+0x534>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a3d      	ldr	r2, [pc, #244]	; (800b410 <HAL_RCC_OscConfig+0x534>)
 800b31c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b320:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b322:	f7fd f909 	bl	8008538 <HAL_GetTick>
 800b326:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b328:	e008      	b.n	800b33c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b32a:	f7fd f905 	bl	8008538 <HAL_GetTick>
 800b32e:	4602      	mov	r2, r0
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	1ad3      	subs	r3, r2, r3
 800b334:	2b64      	cmp	r3, #100	; 0x64
 800b336:	d901      	bls.n	800b33c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800b338:	2303      	movs	r3, #3
 800b33a:	e170      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b33c:	4b34      	ldr	r3, [pc, #208]	; (800b410 <HAL_RCC_OscConfig+0x534>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b344:	2b00      	cmp	r3, #0
 800b346:	d0f0      	beq.n	800b32a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d106      	bne.n	800b35e <HAL_RCC_OscConfig+0x482>
 800b350:	4b2e      	ldr	r3, [pc, #184]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b354:	4a2d      	ldr	r2, [pc, #180]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b356:	f043 0301 	orr.w	r3, r3, #1
 800b35a:	6713      	str	r3, [r2, #112]	; 0x70
 800b35c:	e02d      	b.n	800b3ba <HAL_RCC_OscConfig+0x4de>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10c      	bne.n	800b380 <HAL_RCC_OscConfig+0x4a4>
 800b366:	4b29      	ldr	r3, [pc, #164]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b36a:	4a28      	ldr	r2, [pc, #160]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b36c:	f023 0301 	bic.w	r3, r3, #1
 800b370:	6713      	str	r3, [r2, #112]	; 0x70
 800b372:	4b26      	ldr	r3, [pc, #152]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b376:	4a25      	ldr	r2, [pc, #148]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b378:	f023 0304 	bic.w	r3, r3, #4
 800b37c:	6713      	str	r3, [r2, #112]	; 0x70
 800b37e:	e01c      	b.n	800b3ba <HAL_RCC_OscConfig+0x4de>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	2b05      	cmp	r3, #5
 800b386:	d10c      	bne.n	800b3a2 <HAL_RCC_OscConfig+0x4c6>
 800b388:	4b20      	ldr	r3, [pc, #128]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b38c:	4a1f      	ldr	r2, [pc, #124]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b38e:	f043 0304 	orr.w	r3, r3, #4
 800b392:	6713      	str	r3, [r2, #112]	; 0x70
 800b394:	4b1d      	ldr	r3, [pc, #116]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b398:	4a1c      	ldr	r2, [pc, #112]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b39a:	f043 0301 	orr.w	r3, r3, #1
 800b39e:	6713      	str	r3, [r2, #112]	; 0x70
 800b3a0:	e00b      	b.n	800b3ba <HAL_RCC_OscConfig+0x4de>
 800b3a2:	4b1a      	ldr	r3, [pc, #104]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b3a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a6:	4a19      	ldr	r2, [pc, #100]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b3a8:	f023 0301 	bic.w	r3, r3, #1
 800b3ac:	6713      	str	r3, [r2, #112]	; 0x70
 800b3ae:	4b17      	ldr	r3, [pc, #92]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b2:	4a16      	ldr	r2, [pc, #88]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b3b4:	f023 0304 	bic.w	r3, r3, #4
 800b3b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d015      	beq.n	800b3ee <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3c2:	f7fd f8b9 	bl	8008538 <HAL_GetTick>
 800b3c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b3c8:	e00a      	b.n	800b3e0 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b3ca:	f7fd f8b5 	bl	8008538 <HAL_GetTick>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d901      	bls.n	800b3e0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e11e      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b3e0:	4b0a      	ldr	r3, [pc, #40]	; (800b40c <HAL_RCC_OscConfig+0x530>)
 800b3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e4:	f003 0302 	and.w	r3, r3, #2
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d0ee      	beq.n	800b3ca <HAL_RCC_OscConfig+0x4ee>
 800b3ec:	e018      	b.n	800b420 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3ee:	f7fd f8a3 	bl	8008538 <HAL_GetTick>
 800b3f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b3f4:	e00e      	b.n	800b414 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b3f6:	f7fd f89f 	bl	8008538 <HAL_GetTick>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fe:	1ad3      	subs	r3, r2, r3
 800b400:	f241 3288 	movw	r2, #5000	; 0x1388
 800b404:	4293      	cmp	r3, r2
 800b406:	d905      	bls.n	800b414 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b408:	2303      	movs	r3, #3
 800b40a:	e108      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
 800b40c:	58024400 	.word	0x58024400
 800b410:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b414:	4b84      	ldr	r3, [pc, #528]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b418:	f003 0302 	and.w	r3, r3, #2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1ea      	bne.n	800b3f6 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 80f9 	beq.w	800b61c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b42a:	4b7f      	ldr	r3, [pc, #508]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b432:	2b18      	cmp	r3, #24
 800b434:	f000 80b4 	beq.w	800b5a0 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	f040 8095 	bne.w	800b56c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b442:	4b79      	ldr	r3, [pc, #484]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a78      	ldr	r2, [pc, #480]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b44c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b44e:	f7fd f873 	bl	8008538 <HAL_GetTick>
 800b452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b454:	e008      	b.n	800b468 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b456:	f7fd f86f 	bl	8008538 <HAL_GetTick>
 800b45a:	4602      	mov	r2, r0
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	2b02      	cmp	r3, #2
 800b462:	d901      	bls.n	800b468 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b464:	2303      	movs	r3, #3
 800b466:	e0da      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b468:	4b6f      	ldr	r3, [pc, #444]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1f0      	bne.n	800b456 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b474:	4b6c      	ldr	r3, [pc, #432]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b478:	4b6c      	ldr	r3, [pc, #432]	; (800b62c <HAL_RCC_OscConfig+0x750>)
 800b47a:	4013      	ands	r3, r2
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b484:	0112      	lsls	r2, r2, #4
 800b486:	430a      	orrs	r2, r1
 800b488:	4967      	ldr	r1, [pc, #412]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b48a:	4313      	orrs	r3, r2
 800b48c:	628b      	str	r3, [r1, #40]	; 0x28
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b492:	3b01      	subs	r3, #1
 800b494:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b49c:	3b01      	subs	r3, #1
 800b49e:	025b      	lsls	r3, r3, #9
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	041b      	lsls	r3, r3, #16
 800b4ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b4b0:	431a      	orrs	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	061b      	lsls	r3, r3, #24
 800b4ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b4be:	495a      	ldr	r1, [pc, #360]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b4c4:	4b58      	ldr	r3, [pc, #352]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c8:	4a57      	ldr	r2, [pc, #348]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b4ca:	f023 0301 	bic.w	r3, r3, #1
 800b4ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b4d0:	4b55      	ldr	r3, [pc, #340]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b4d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4d4:	4b56      	ldr	r3, [pc, #344]	; (800b630 <HAL_RCC_OscConfig+0x754>)
 800b4d6:	4013      	ands	r3, r2
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b4dc:	00d2      	lsls	r2, r2, #3
 800b4de:	4952      	ldr	r1, [pc, #328]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b4e4:	4b50      	ldr	r3, [pc, #320]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e8:	f023 020c 	bic.w	r2, r3, #12
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f0:	494d      	ldr	r1, [pc, #308]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b4f6:	4b4c      	ldr	r3, [pc, #304]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4fa:	f023 0202 	bic.w	r2, r3, #2
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b502:	4949      	ldr	r1, [pc, #292]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b504:	4313      	orrs	r3, r2
 800b506:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b508:	4b47      	ldr	r3, [pc, #284]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50c:	4a46      	ldr	r2, [pc, #280]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b50e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b514:	4b44      	ldr	r3, [pc, #272]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	4a43      	ldr	r2, [pc, #268]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b51a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b51e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b520:	4b41      	ldr	r3, [pc, #260]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b524:	4a40      	ldr	r2, [pc, #256]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b52a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b52c:	4b3e      	ldr	r3, [pc, #248]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b530:	4a3d      	ldr	r2, [pc, #244]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b532:	f043 0301 	orr.w	r3, r3, #1
 800b536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b538:	4b3b      	ldr	r3, [pc, #236]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a3a      	ldr	r2, [pc, #232]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b53e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b544:	f7fc fff8 	bl	8008538 <HAL_GetTick>
 800b548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b54a:	e008      	b.n	800b55e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b54c:	f7fc fff4 	bl	8008538 <HAL_GetTick>
 800b550:	4602      	mov	r2, r0
 800b552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	2b02      	cmp	r3, #2
 800b558:	d901      	bls.n	800b55e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b55a:	2303      	movs	r3, #3
 800b55c:	e05f      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b55e:	4b32      	ldr	r3, [pc, #200]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d0f0      	beq.n	800b54c <HAL_RCC_OscConfig+0x670>
 800b56a:	e057      	b.n	800b61c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b56c:	4b2e      	ldr	r3, [pc, #184]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a2d      	ldr	r2, [pc, #180]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b578:	f7fc ffde 	bl	8008538 <HAL_GetTick>
 800b57c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b57e:	e008      	b.n	800b592 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b580:	f7fc ffda 	bl	8008538 <HAL_GetTick>
 800b584:	4602      	mov	r2, r0
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d901      	bls.n	800b592 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b58e:	2303      	movs	r3, #3
 800b590:	e045      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b592:	4b25      	ldr	r3, [pc, #148]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1f0      	bne.n	800b580 <HAL_RCC_OscConfig+0x6a4>
 800b59e:	e03d      	b.n	800b61c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b5a0:	4b21      	ldr	r3, [pc, #132]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b5a6:	4b20      	ldr	r3, [pc, #128]	; (800b628 <HAL_RCC_OscConfig+0x74c>)
 800b5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d031      	beq.n	800b618 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	f003 0203 	and.w	r2, r3, #3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d12a      	bne.n	800b618 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	091b      	lsrs	r3, r3, #4
 800b5c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d122      	bne.n	800b618 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d11a      	bne.n	800b618 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	0a5b      	lsrs	r3, r3, #9
 800b5e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d111      	bne.n	800b618 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	0c1b      	lsrs	r3, r3, #16
 800b5f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b600:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b602:	429a      	cmp	r2, r3
 800b604:	d108      	bne.n	800b618 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	0e1b      	lsrs	r3, r3, #24
 800b60a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b612:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b614:	429a      	cmp	r2, r3
 800b616:	d001      	beq.n	800b61c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e000      	b.n	800b61e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3730      	adds	r7, #48	; 0x30
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	58024400 	.word	0x58024400
 800b62c:	fffffc0c 	.word	0xfffffc0c
 800b630:	ffff0007 	.word	0xffff0007

0800b634 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d101      	bne.n	800b648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e19c      	b.n	800b982 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b648:	4b8a      	ldr	r3, [pc, #552]	; (800b874 <HAL_RCC_ClockConfig+0x240>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 030f 	and.w	r3, r3, #15
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	429a      	cmp	r2, r3
 800b654:	d910      	bls.n	800b678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b656:	4b87      	ldr	r3, [pc, #540]	; (800b874 <HAL_RCC_ClockConfig+0x240>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f023 020f 	bic.w	r2, r3, #15
 800b65e:	4985      	ldr	r1, [pc, #532]	; (800b874 <HAL_RCC_ClockConfig+0x240>)
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	4313      	orrs	r3, r2
 800b664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b666:	4b83      	ldr	r3, [pc, #524]	; (800b874 <HAL_RCC_ClockConfig+0x240>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 030f 	and.w	r3, r3, #15
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	429a      	cmp	r2, r3
 800b672:	d001      	beq.n	800b678 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	e184      	b.n	800b982 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 0304 	and.w	r3, r3, #4
 800b680:	2b00      	cmp	r3, #0
 800b682:	d010      	beq.n	800b6a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	691a      	ldr	r2, [r3, #16]
 800b688:	4b7b      	ldr	r3, [pc, #492]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b690:	429a      	cmp	r2, r3
 800b692:	d908      	bls.n	800b6a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b694:	4b78      	ldr	r3, [pc, #480]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b696:	699b      	ldr	r3, [r3, #24]
 800b698:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	4975      	ldr	r1, [pc, #468]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f003 0308 	and.w	r3, r3, #8
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d010      	beq.n	800b6d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	695a      	ldr	r2, [r3, #20]
 800b6b6:	4b70      	ldr	r3, [pc, #448]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d908      	bls.n	800b6d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b6c2:	4b6d      	ldr	r3, [pc, #436]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b6c4:	69db      	ldr	r3, [r3, #28]
 800b6c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	496a      	ldr	r1, [pc, #424]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f003 0310 	and.w	r3, r3, #16
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d010      	beq.n	800b702 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	699a      	ldr	r2, [r3, #24]
 800b6e4:	4b64      	ldr	r3, [pc, #400]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b6e6:	69db      	ldr	r3, [r3, #28]
 800b6e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d908      	bls.n	800b702 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b6f0:	4b61      	ldr	r3, [pc, #388]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b6f2:	69db      	ldr	r3, [r3, #28]
 800b6f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	495e      	ldr	r1, [pc, #376]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b6fe:	4313      	orrs	r3, r2
 800b700:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f003 0320 	and.w	r3, r3, #32
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d010      	beq.n	800b730 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	69da      	ldr	r2, [r3, #28]
 800b712:	4b59      	ldr	r3, [pc, #356]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b714:	6a1b      	ldr	r3, [r3, #32]
 800b716:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d908      	bls.n	800b730 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b71e:	4b56      	ldr	r3, [pc, #344]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	69db      	ldr	r3, [r3, #28]
 800b72a:	4953      	ldr	r1, [pc, #332]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b72c:	4313      	orrs	r3, r2
 800b72e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 0302 	and.w	r3, r3, #2
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d010      	beq.n	800b75e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68da      	ldr	r2, [r3, #12]
 800b740:	4b4d      	ldr	r3, [pc, #308]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	f003 030f 	and.w	r3, r3, #15
 800b748:	429a      	cmp	r2, r3
 800b74a:	d908      	bls.n	800b75e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b74c:	4b4a      	ldr	r3, [pc, #296]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	f023 020f 	bic.w	r2, r3, #15
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	4947      	ldr	r1, [pc, #284]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b75a:	4313      	orrs	r3, r2
 800b75c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b00      	cmp	r3, #0
 800b768:	d055      	beq.n	800b816 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b76a:	4b43      	ldr	r3, [pc, #268]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b76c:	699b      	ldr	r3, [r3, #24]
 800b76e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	4940      	ldr	r1, [pc, #256]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b778:	4313      	orrs	r3, r2
 800b77a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	2b02      	cmp	r3, #2
 800b782:	d107      	bne.n	800b794 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b784:	4b3c      	ldr	r3, [pc, #240]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d121      	bne.n	800b7d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	e0f6      	b.n	800b982 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	2b03      	cmp	r3, #3
 800b79a:	d107      	bne.n	800b7ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b79c:	4b36      	ldr	r3, [pc, #216]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d115      	bne.n	800b7d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e0ea      	b.n	800b982 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d107      	bne.n	800b7c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b7b4:	4b30      	ldr	r3, [pc, #192]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d109      	bne.n	800b7d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e0de      	b.n	800b982 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b7c4:	4b2c      	ldr	r3, [pc, #176]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f003 0304 	and.w	r3, r3, #4
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e0d6      	b.n	800b982 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b7d4:	4b28      	ldr	r3, [pc, #160]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	f023 0207 	bic.w	r2, r3, #7
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	4925      	ldr	r1, [pc, #148]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7e6:	f7fc fea7 	bl	8008538 <HAL_GetTick>
 800b7ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7ec:	e00a      	b.n	800b804 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7ee:	f7fc fea3 	bl	8008538 <HAL_GetTick>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d901      	bls.n	800b804 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b800:	2303      	movs	r3, #3
 800b802:	e0be      	b.n	800b982 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b804:	4b1c      	ldr	r3, [pc, #112]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	00db      	lsls	r3, r3, #3
 800b812:	429a      	cmp	r2, r3
 800b814:	d1eb      	bne.n	800b7ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 0302 	and.w	r3, r3, #2
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d010      	beq.n	800b844 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	68da      	ldr	r2, [r3, #12]
 800b826:	4b14      	ldr	r3, [pc, #80]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	f003 030f 	and.w	r3, r3, #15
 800b82e:	429a      	cmp	r2, r3
 800b830:	d208      	bcs.n	800b844 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b832:	4b11      	ldr	r3, [pc, #68]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b834:	699b      	ldr	r3, [r3, #24]
 800b836:	f023 020f 	bic.w	r2, r3, #15
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	490e      	ldr	r1, [pc, #56]	; (800b878 <HAL_RCC_ClockConfig+0x244>)
 800b840:	4313      	orrs	r3, r2
 800b842:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b844:	4b0b      	ldr	r3, [pc, #44]	; (800b874 <HAL_RCC_ClockConfig+0x240>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 030f 	and.w	r3, r3, #15
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d214      	bcs.n	800b87c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b852:	4b08      	ldr	r3, [pc, #32]	; (800b874 <HAL_RCC_ClockConfig+0x240>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f023 020f 	bic.w	r2, r3, #15
 800b85a:	4906      	ldr	r1, [pc, #24]	; (800b874 <HAL_RCC_ClockConfig+0x240>)
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	4313      	orrs	r3, r2
 800b860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b862:	4b04      	ldr	r3, [pc, #16]	; (800b874 <HAL_RCC_ClockConfig+0x240>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 030f 	and.w	r3, r3, #15
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d005      	beq.n	800b87c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e086      	b.n	800b982 <HAL_RCC_ClockConfig+0x34e>
 800b874:	52002000 	.word	0x52002000
 800b878:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0304 	and.w	r3, r3, #4
 800b884:	2b00      	cmp	r3, #0
 800b886:	d010      	beq.n	800b8aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	691a      	ldr	r2, [r3, #16]
 800b88c:	4b3f      	ldr	r3, [pc, #252]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b894:	429a      	cmp	r2, r3
 800b896:	d208      	bcs.n	800b8aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b898:	4b3c      	ldr	r3, [pc, #240]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	4939      	ldr	r1, [pc, #228]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 0308 	and.w	r3, r3, #8
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d010      	beq.n	800b8d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	695a      	ldr	r2, [r3, #20]
 800b8ba:	4b34      	ldr	r3, [pc, #208]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b8bc:	69db      	ldr	r3, [r3, #28]
 800b8be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d208      	bcs.n	800b8d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b8c6:	4b31      	ldr	r3, [pc, #196]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b8c8:	69db      	ldr	r3, [r3, #28]
 800b8ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	492e      	ldr	r1, [pc, #184]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f003 0310 	and.w	r3, r3, #16
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d010      	beq.n	800b906 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	699a      	ldr	r2, [r3, #24]
 800b8e8:	4b28      	ldr	r3, [pc, #160]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d208      	bcs.n	800b906 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b8f4:	4b25      	ldr	r3, [pc, #148]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	4922      	ldr	r1, [pc, #136]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b902:	4313      	orrs	r3, r2
 800b904:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f003 0320 	and.w	r3, r3, #32
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d010      	beq.n	800b934 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	69da      	ldr	r2, [r3, #28]
 800b916:	4b1d      	ldr	r3, [pc, #116]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b91e:	429a      	cmp	r2, r3
 800b920:	d208      	bcs.n	800b934 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b922:	4b1a      	ldr	r3, [pc, #104]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b924:	6a1b      	ldr	r3, [r3, #32]
 800b926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	4917      	ldr	r1, [pc, #92]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b930:	4313      	orrs	r3, r2
 800b932:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b934:	f000 f844 	bl	800b9c0 <HAL_RCC_GetSysClockFreq>
 800b938:	4602      	mov	r2, r0
 800b93a:	4b14      	ldr	r3, [pc, #80]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	0a1b      	lsrs	r3, r3, #8
 800b940:	f003 030f 	and.w	r3, r3, #15
 800b944:	4912      	ldr	r1, [pc, #72]	; (800b990 <HAL_RCC_ClockConfig+0x35c>)
 800b946:	5ccb      	ldrb	r3, [r1, r3]
 800b948:	f003 031f 	and.w	r3, r3, #31
 800b94c:	fa22 f303 	lsr.w	r3, r2, r3
 800b950:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b952:	4b0e      	ldr	r3, [pc, #56]	; (800b98c <HAL_RCC_ClockConfig+0x358>)
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	f003 030f 	and.w	r3, r3, #15
 800b95a:	4a0d      	ldr	r2, [pc, #52]	; (800b990 <HAL_RCC_ClockConfig+0x35c>)
 800b95c:	5cd3      	ldrb	r3, [r2, r3]
 800b95e:	f003 031f 	and.w	r3, r3, #31
 800b962:	693a      	ldr	r2, [r7, #16]
 800b964:	fa22 f303 	lsr.w	r3, r2, r3
 800b968:	4a0a      	ldr	r2, [pc, #40]	; (800b994 <HAL_RCC_ClockConfig+0x360>)
 800b96a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b96c:	4a0a      	ldr	r2, [pc, #40]	; (800b998 <HAL_RCC_ClockConfig+0x364>)
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b972:	4b0a      	ldr	r3, [pc, #40]	; (800b99c <HAL_RCC_ClockConfig+0x368>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4618      	mov	r0, r3
 800b978:	f7fc fd94 	bl	80084a4 <HAL_InitTick>
 800b97c:	4603      	mov	r3, r0
 800b97e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b980:	7bfb      	ldrb	r3, [r7, #15]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	58024400 	.word	0x58024400
 800b990:	080147a8 	.word	0x080147a8
 800b994:	24000004 	.word	0x24000004
 800b998:	24000000 	.word	0x24000000
 800b99c:	24000008 	.word	0x24000008

0800b9a0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800b9a4:	4b05      	ldr	r3, [pc, #20]	; (800b9bc <HAL_RCC_EnableCSS+0x1c>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a04      	ldr	r2, [pc, #16]	; (800b9bc <HAL_RCC_EnableCSS+0x1c>)
 800b9aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9ae:	6013      	str	r3, [r2, #0]
}
 800b9b0:	bf00      	nop
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	58024400 	.word	0x58024400

0800b9c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b089      	sub	sp, #36	; 0x24
 800b9c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b9c6:	4bb3      	ldr	r3, [pc, #716]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9ce:	2b18      	cmp	r3, #24
 800b9d0:	f200 8155 	bhi.w	800bc7e <HAL_RCC_GetSysClockFreq+0x2be>
 800b9d4:	a201      	add	r2, pc, #4	; (adr r2, 800b9dc <HAL_RCC_GetSysClockFreq+0x1c>)
 800b9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9da:	bf00      	nop
 800b9dc:	0800ba41 	.word	0x0800ba41
 800b9e0:	0800bc7f 	.word	0x0800bc7f
 800b9e4:	0800bc7f 	.word	0x0800bc7f
 800b9e8:	0800bc7f 	.word	0x0800bc7f
 800b9ec:	0800bc7f 	.word	0x0800bc7f
 800b9f0:	0800bc7f 	.word	0x0800bc7f
 800b9f4:	0800bc7f 	.word	0x0800bc7f
 800b9f8:	0800bc7f 	.word	0x0800bc7f
 800b9fc:	0800ba67 	.word	0x0800ba67
 800ba00:	0800bc7f 	.word	0x0800bc7f
 800ba04:	0800bc7f 	.word	0x0800bc7f
 800ba08:	0800bc7f 	.word	0x0800bc7f
 800ba0c:	0800bc7f 	.word	0x0800bc7f
 800ba10:	0800bc7f 	.word	0x0800bc7f
 800ba14:	0800bc7f 	.word	0x0800bc7f
 800ba18:	0800bc7f 	.word	0x0800bc7f
 800ba1c:	0800ba6d 	.word	0x0800ba6d
 800ba20:	0800bc7f 	.word	0x0800bc7f
 800ba24:	0800bc7f 	.word	0x0800bc7f
 800ba28:	0800bc7f 	.word	0x0800bc7f
 800ba2c:	0800bc7f 	.word	0x0800bc7f
 800ba30:	0800bc7f 	.word	0x0800bc7f
 800ba34:	0800bc7f 	.word	0x0800bc7f
 800ba38:	0800bc7f 	.word	0x0800bc7f
 800ba3c:	0800ba73 	.word	0x0800ba73
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba40:	4b94      	ldr	r3, [pc, #592]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0320 	and.w	r3, r3, #32
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d009      	beq.n	800ba60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba4c:	4b91      	ldr	r3, [pc, #580]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	08db      	lsrs	r3, r3, #3
 800ba52:	f003 0303 	and.w	r3, r3, #3
 800ba56:	4a90      	ldr	r2, [pc, #576]	; (800bc98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ba58:	fa22 f303 	lsr.w	r3, r2, r3
 800ba5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ba5e:	e111      	b.n	800bc84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ba60:	4b8d      	ldr	r3, [pc, #564]	; (800bc98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ba62:	61bb      	str	r3, [r7, #24]
    break;
 800ba64:	e10e      	b.n	800bc84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ba66:	4b8d      	ldr	r3, [pc, #564]	; (800bc9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ba68:	61bb      	str	r3, [r7, #24]
    break;
 800ba6a:	e10b      	b.n	800bc84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ba6c:	4b8c      	ldr	r3, [pc, #560]	; (800bca0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ba6e:	61bb      	str	r3, [r7, #24]
    break;
 800ba70:	e108      	b.n	800bc84 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba72:	4b88      	ldr	r3, [pc, #544]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba76:	f003 0303 	and.w	r3, r3, #3
 800ba7a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ba7c:	4b85      	ldr	r3, [pc, #532]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba80:	091b      	lsrs	r3, r3, #4
 800ba82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba86:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ba88:	4b82      	ldr	r3, [pc, #520]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8c:	f003 0301 	and.w	r3, r3, #1
 800ba90:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ba92:	4b80      	ldr	r3, [pc, #512]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba96:	08db      	lsrs	r3, r3, #3
 800ba98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	fb02 f303 	mul.w	r3, r2, r3
 800baa2:	ee07 3a90 	vmov	s15, r3
 800baa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baaa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 80e1 	beq.w	800bc78 <HAL_RCC_GetSysClockFreq+0x2b8>
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	2b02      	cmp	r3, #2
 800baba:	f000 8083 	beq.w	800bbc4 <HAL_RCC_GetSysClockFreq+0x204>
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	2b02      	cmp	r3, #2
 800bac2:	f200 80a1 	bhi.w	800bc08 <HAL_RCC_GetSysClockFreq+0x248>
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <HAL_RCC_GetSysClockFreq+0x114>
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d056      	beq.n	800bb80 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bad2:	e099      	b.n	800bc08 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bad4:	4b6f      	ldr	r3, [pc, #444]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0320 	and.w	r3, r3, #32
 800badc:	2b00      	cmp	r3, #0
 800bade:	d02d      	beq.n	800bb3c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bae0:	4b6c      	ldr	r3, [pc, #432]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	08db      	lsrs	r3, r3, #3
 800bae6:	f003 0303 	and.w	r3, r3, #3
 800baea:	4a6b      	ldr	r2, [pc, #428]	; (800bc98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800baec:	fa22 f303 	lsr.w	r3, r2, r3
 800baf0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	ee07 3a90 	vmov	s15, r3
 800baf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	ee07 3a90 	vmov	s15, r3
 800bb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb0a:	4b62      	ldr	r3, [pc, #392]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb12:	ee07 3a90 	vmov	s15, r3
 800bb16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800bca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800bb3a:	e087      	b.n	800bc4c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	ee07 3a90 	vmov	s15, r3
 800bb42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb46:	eddf 6a58 	vldr	s13, [pc, #352]	; 800bca8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800bb4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb4e:	4b51      	ldr	r3, [pc, #324]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb56:	ee07 3a90 	vmov	s15, r3
 800bb5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb62:	eddf 5a50 	vldr	s11, [pc, #320]	; 800bca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb7e:	e065      	b.n	800bc4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	ee07 3a90 	vmov	s15, r3
 800bb86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800bcac <HAL_RCC_GetSysClockFreq+0x2ec>
 800bb8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb92:	4b40      	ldr	r3, [pc, #256]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb9a:	ee07 3a90 	vmov	s15, r3
 800bb9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bba2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bba6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bbaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbc2:	e043      	b.n	800bc4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	ee07 3a90 	vmov	s15, r3
 800bbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbce:	eddf 6a38 	vldr	s13, [pc, #224]	; 800bcb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800bbd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbd6:	4b2f      	ldr	r3, [pc, #188]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbde:	ee07 3a90 	vmov	s15, r3
 800bbe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbe6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bbea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800bca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bbee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc06:	e021      	b.n	800bc4c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	ee07 3a90 	vmov	s15, r3
 800bc0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc12:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bcac <HAL_RCC_GetSysClockFreq+0x2ec>
 800bc16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc1a:	4b1e      	ldr	r3, [pc, #120]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc22:	ee07 3a90 	vmov	s15, r3
 800bc26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc2a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc4a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800bc4c:	4b11      	ldr	r3, [pc, #68]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc50:	0a5b      	lsrs	r3, r3, #9
 800bc52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc56:	3301      	adds	r3, #1
 800bc58:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	ee07 3a90 	vmov	s15, r3
 800bc60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc64:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc70:	ee17 3a90 	vmov	r3, s15
 800bc74:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800bc76:	e005      	b.n	800bc84 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	61bb      	str	r3, [r7, #24]
    break;
 800bc7c:	e002      	b.n	800bc84 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800bc7e:	4b07      	ldr	r3, [pc, #28]	; (800bc9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bc80:	61bb      	str	r3, [r7, #24]
    break;
 800bc82:	bf00      	nop
  }

  return sysclockfreq;
 800bc84:	69bb      	ldr	r3, [r7, #24]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3724      	adds	r7, #36	; 0x24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	58024400 	.word	0x58024400
 800bc98:	03d09000 	.word	0x03d09000
 800bc9c:	003d0900 	.word	0x003d0900
 800bca0:	017d7840 	.word	0x017d7840
 800bca4:	46000000 	.word	0x46000000
 800bca8:	4c742400 	.word	0x4c742400
 800bcac:	4a742400 	.word	0x4a742400
 800bcb0:	4bbebc20 	.word	0x4bbebc20

0800bcb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bcba:	f7ff fe81 	bl	800b9c0 <HAL_RCC_GetSysClockFreq>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	4b10      	ldr	r3, [pc, #64]	; (800bd04 <HAL_RCC_GetHCLKFreq+0x50>)
 800bcc2:	699b      	ldr	r3, [r3, #24]
 800bcc4:	0a1b      	lsrs	r3, r3, #8
 800bcc6:	f003 030f 	and.w	r3, r3, #15
 800bcca:	490f      	ldr	r1, [pc, #60]	; (800bd08 <HAL_RCC_GetHCLKFreq+0x54>)
 800bccc:	5ccb      	ldrb	r3, [r1, r3]
 800bcce:	f003 031f 	and.w	r3, r3, #31
 800bcd2:	fa22 f303 	lsr.w	r3, r2, r3
 800bcd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bcd8:	4b0a      	ldr	r3, [pc, #40]	; (800bd04 <HAL_RCC_GetHCLKFreq+0x50>)
 800bcda:	699b      	ldr	r3, [r3, #24]
 800bcdc:	f003 030f 	and.w	r3, r3, #15
 800bce0:	4a09      	ldr	r2, [pc, #36]	; (800bd08 <HAL_RCC_GetHCLKFreq+0x54>)
 800bce2:	5cd3      	ldrb	r3, [r2, r3]
 800bce4:	f003 031f 	and.w	r3, r3, #31
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	fa22 f303 	lsr.w	r3, r2, r3
 800bcee:	4a07      	ldr	r2, [pc, #28]	; (800bd0c <HAL_RCC_GetHCLKFreq+0x58>)
 800bcf0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bcf2:	4a07      	ldr	r2, [pc, #28]	; (800bd10 <HAL_RCC_GetHCLKFreq+0x5c>)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800bcf8:	4b04      	ldr	r3, [pc, #16]	; (800bd0c <HAL_RCC_GetHCLKFreq+0x58>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	58024400 	.word	0x58024400
 800bd08:	080147a8 	.word	0x080147a8
 800bd0c:	24000004 	.word	0x24000004
 800bd10:	24000000 	.word	0x24000000

0800bd14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800bd18:	f7ff ffcc 	bl	800bcb4 <HAL_RCC_GetHCLKFreq>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	4b06      	ldr	r3, [pc, #24]	; (800bd38 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bd20:	69db      	ldr	r3, [r3, #28]
 800bd22:	091b      	lsrs	r3, r3, #4
 800bd24:	f003 0307 	and.w	r3, r3, #7
 800bd28:	4904      	ldr	r1, [pc, #16]	; (800bd3c <HAL_RCC_GetPCLK1Freq+0x28>)
 800bd2a:	5ccb      	ldrb	r3, [r1, r3]
 800bd2c:	f003 031f 	and.w	r3, r3, #31
 800bd30:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	58024400 	.word	0x58024400
 800bd3c:	080147a8 	.word	0x080147a8

0800bd40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bd44:	f7ff ffb6 	bl	800bcb4 <HAL_RCC_GetHCLKFreq>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	4b06      	ldr	r3, [pc, #24]	; (800bd64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	0a1b      	lsrs	r3, r3, #8
 800bd50:	f003 0307 	and.w	r3, r3, #7
 800bd54:	4904      	ldr	r1, [pc, #16]	; (800bd68 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bd56:	5ccb      	ldrb	r3, [r1, r3]
 800bd58:	f003 031f 	and.w	r3, r3, #31
 800bd5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	58024400 	.word	0x58024400
 800bd68:	080147a8 	.word	0x080147a8

0800bd6c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800bd70:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <HAL_RCC_NMI_IRQHandler+0x24>)
 800bd72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd7c:	d105      	bne.n	800bd8a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800bd7e:	f000 f809 	bl	800bd94 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800bd82:	4b03      	ldr	r3, [pc, #12]	; (800bd90 <HAL_RCC_NMI_IRQHandler+0x24>)
 800bd84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bd88:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800bd8a:	bf00      	nop
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	58024400 	.word	0x58024400

0800bd94 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800bd94:	b480      	push	{r7}
 800bd96:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800bd98:	bf00      	nop
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
	...

0800bda4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bdac:	2300      	movs	r3, #0
 800bdae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d03f      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdc8:	d02a      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800bdca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdce:	d824      	bhi.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bdd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdd4:	d018      	beq.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bdd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdda:	d81e      	bhi.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d003      	beq.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bde0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bde4:	d007      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800bde6:	e018      	b.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bde8:	4bab      	ldr	r3, [pc, #684]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdec:	4aaa      	ldr	r2, [pc, #680]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bdee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bdf4:	e015      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	2102      	movs	r1, #2
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f001 feff 	bl	800dc00 <RCCEx_PLL2_Config>
 800be02:	4603      	mov	r3, r0
 800be04:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800be06:	e00c      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	3324      	adds	r3, #36	; 0x24
 800be0c:	2102      	movs	r1, #2
 800be0e:	4618      	mov	r0, r3
 800be10:	f001 ffa8 	bl	800dd64 <RCCEx_PLL3_Config>
 800be14:	4603      	mov	r3, r0
 800be16:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800be18:	e003      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	75fb      	strb	r3, [r7, #23]
      break;
 800be1e:	e000      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800be20:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be22:	7dfb      	ldrb	r3, [r7, #23]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d109      	bne.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800be28:	4b9b      	ldr	r3, [pc, #620]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be34:	4998      	ldr	r1, [pc, #608]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be36:	4313      	orrs	r3, r2
 800be38:	650b      	str	r3, [r1, #80]	; 0x50
 800be3a:	e001      	b.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d03d      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be50:	2b04      	cmp	r3, #4
 800be52:	d826      	bhi.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800be54:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800be56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5a:	bf00      	nop
 800be5c:	0800be71 	.word	0x0800be71
 800be60:	0800be7f 	.word	0x0800be7f
 800be64:	0800be91 	.word	0x0800be91
 800be68:	0800bea9 	.word	0x0800bea9
 800be6c:	0800bea9 	.word	0x0800bea9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be70:	4b89      	ldr	r3, [pc, #548]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be74:	4a88      	ldr	r2, [pc, #544]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800be7c:	e015      	b.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	3304      	adds	r3, #4
 800be82:	2100      	movs	r1, #0
 800be84:	4618      	mov	r0, r3
 800be86:	f001 febb 	bl	800dc00 <RCCEx_PLL2_Config>
 800be8a:	4603      	mov	r3, r0
 800be8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800be8e:	e00c      	b.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	3324      	adds	r3, #36	; 0x24
 800be94:	2100      	movs	r1, #0
 800be96:	4618      	mov	r0, r3
 800be98:	f001 ff64 	bl	800dd64 <RCCEx_PLL3_Config>
 800be9c:	4603      	mov	r3, r0
 800be9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bea0:	e003      	b.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	75fb      	strb	r3, [r7, #23]
      break;
 800bea6:	e000      	b.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800bea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800beaa:	7dfb      	ldrb	r3, [r7, #23]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d109      	bne.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800beb0:	4b79      	ldr	r3, [pc, #484]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800beb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb4:	f023 0207 	bic.w	r2, r3, #7
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bebc:	4976      	ldr	r1, [pc, #472]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bebe:	4313      	orrs	r3, r2
 800bec0:	650b      	str	r3, [r1, #80]	; 0x50
 800bec2:	e001      	b.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
 800bec6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d051      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800beda:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800bede:	d036      	beq.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bee0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800bee4:	d830      	bhi.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800bee6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800beea:	d032      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800beec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bef0:	d82a      	bhi.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800bef2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bef6:	d02e      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800bef8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800befc:	d824      	bhi.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800befe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf02:	d018      	beq.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800bf04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf08:	d81e      	bhi.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d003      	beq.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800bf0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf12:	d007      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800bf14:	e018      	b.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf16:	4b60      	ldr	r3, [pc, #384]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1a:	4a5f      	ldr	r2, [pc, #380]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bf22:	e019      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	3304      	adds	r3, #4
 800bf28:	2100      	movs	r1, #0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f001 fe68 	bl	800dc00 <RCCEx_PLL2_Config>
 800bf30:	4603      	mov	r3, r0
 800bf32:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bf34:	e010      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	3324      	adds	r3, #36	; 0x24
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f001 ff11 	bl	800dd64 <RCCEx_PLL3_Config>
 800bf42:	4603      	mov	r3, r0
 800bf44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bf46:	e007      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf4c:	e004      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800bf4e:	bf00      	nop
 800bf50:	e002      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800bf52:	bf00      	nop
 800bf54:	e000      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800bf56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf58:	7dfb      	ldrb	r3, [r7, #23]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10a      	bne.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bf5e:	4b4e      	ldr	r3, [pc, #312]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf62:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf6c:	494a      	ldr	r1, [pc, #296]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	658b      	str	r3, [r1, #88]	; 0x58
 800bf72:	e001      	b.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d051      	beq.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf8a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bf8e:	d036      	beq.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800bf90:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bf94:	d830      	bhi.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800bf96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf9a:	d032      	beq.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800bf9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bfa0:	d82a      	bhi.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800bfa2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bfa6:	d02e      	beq.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800bfa8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bfac:	d824      	bhi.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800bfae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfb2:	d018      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800bfb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfb8:	d81e      	bhi.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d003      	beq.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800bfbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bfc2:	d007      	beq.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800bfc4:	e018      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfc6:	4b34      	ldr	r3, [pc, #208]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfca:	4a33      	ldr	r2, [pc, #204]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bfcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bfd2:	e019      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	2100      	movs	r1, #0
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f001 fe10 	bl	800dc00 <RCCEx_PLL2_Config>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bfe4:	e010      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	3324      	adds	r3, #36	; 0x24
 800bfea:	2100      	movs	r1, #0
 800bfec:	4618      	mov	r0, r3
 800bfee:	f001 feb9 	bl	800dd64 <RCCEx_PLL3_Config>
 800bff2:	4603      	mov	r3, r0
 800bff4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bff6:	e007      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	75fb      	strb	r3, [r7, #23]
      break;
 800bffc:	e004      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800bffe:	bf00      	nop
 800c000:	e002      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c002:	bf00      	nop
 800c004:	e000      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c006:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c008:	7dfb      	ldrb	r3, [r7, #23]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10a      	bne.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c00e:	4b22      	ldr	r3, [pc, #136]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c012:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c01c:	491e      	ldr	r1, [pc, #120]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c01e:	4313      	orrs	r3, r2
 800c020:	658b      	str	r3, [r1, #88]	; 0x58
 800c022:	e001      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c024:	7dfb      	ldrb	r3, [r7, #23]
 800c026:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c030:	2b00      	cmp	r3, #0
 800c032:	d035      	beq.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c038:	2b30      	cmp	r3, #48	; 0x30
 800c03a:	d01c      	beq.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c03c:	2b30      	cmp	r3, #48	; 0x30
 800c03e:	d817      	bhi.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800c040:	2b20      	cmp	r3, #32
 800c042:	d00c      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800c044:	2b20      	cmp	r3, #32
 800c046:	d813      	bhi.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d016      	beq.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800c04c:	2b10      	cmp	r3, #16
 800c04e:	d10f      	bne.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c050:	4b11      	ldr	r3, [pc, #68]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c054:	4a10      	ldr	r2, [pc, #64]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c05a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800c05c:	e00e      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3304      	adds	r3, #4
 800c062:	2102      	movs	r1, #2
 800c064:	4618      	mov	r0, r3
 800c066:	f001 fdcb 	bl	800dc00 <RCCEx_PLL2_Config>
 800c06a:	4603      	mov	r3, r0
 800c06c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800c06e:	e005      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	75fb      	strb	r3, [r7, #23]
      break;
 800c074:	e002      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800c076:	bf00      	nop
 800c078:	e000      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800c07a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c07c:	7dfb      	ldrb	r3, [r7, #23]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10c      	bne.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c082:	4b05      	ldr	r3, [pc, #20]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c086:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c08e:	4902      	ldr	r1, [pc, #8]	; (800c098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c090:	4313      	orrs	r3, r2
 800c092:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c094:	e004      	b.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800c096:	bf00      	nop
 800c098:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d047      	beq.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0b4:	d030      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800c0b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0ba:	d82a      	bhi.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c0bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0c0:	d02c      	beq.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0x378>
 800c0c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0c6:	d824      	bhi.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c0c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0cc:	d018      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c0ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0d2:	d81e      	bhi.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c0d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0dc:	d007      	beq.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c0de:	e018      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0e0:	4bac      	ldr	r3, [pc, #688]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e4:	4aab      	ldr	r2, [pc, #684]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c0e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c0ec:	e017      	b.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f001 fd83 	bl	800dc00 <RCCEx_PLL2_Config>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c0fe:	e00e      	b.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	3324      	adds	r3, #36	; 0x24
 800c104:	2100      	movs	r1, #0
 800c106:	4618      	mov	r0, r3
 800c108:	f001 fe2c 	bl	800dd64 <RCCEx_PLL3_Config>
 800c10c:	4603      	mov	r3, r0
 800c10e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c110:	e005      	b.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	75fb      	strb	r3, [r7, #23]
      break;
 800c116:	e002      	b.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800c118:	bf00      	nop
 800c11a:	e000      	b.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800c11c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c11e:	7dfb      	ldrb	r3, [r7, #23]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d109      	bne.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c124:	4b9b      	ldr	r3, [pc, #620]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c128:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c130:	4998      	ldr	r1, [pc, #608]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c132:	4313      	orrs	r3, r2
 800c134:	650b      	str	r3, [r1, #80]	; 0x50
 800c136:	e001      	b.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c138:	7dfb      	ldrb	r3, [r7, #23]
 800c13a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d049      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c14c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c150:	d02e      	beq.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800c152:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c156:	d828      	bhi.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c158:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c15c:	d02a      	beq.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800c15e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c162:	d822      	bhi.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c164:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c168:	d026      	beq.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800c16a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c16e:	d81c      	bhi.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c174:	d010      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800c176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c17a:	d816      	bhi.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d01d      	beq.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800c180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c184:	d111      	bne.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	3304      	adds	r3, #4
 800c18a:	2101      	movs	r1, #1
 800c18c:	4618      	mov	r0, r3
 800c18e:	f001 fd37 	bl	800dc00 <RCCEx_PLL2_Config>
 800c192:	4603      	mov	r3, r0
 800c194:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c196:	e012      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3324      	adds	r3, #36	; 0x24
 800c19c:	2101      	movs	r1, #1
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f001 fde0 	bl	800dd64 <RCCEx_PLL3_Config>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c1a8:	e009      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	75fb      	strb	r3, [r7, #23]
      break;
 800c1ae:	e006      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c1b0:	bf00      	nop
 800c1b2:	e004      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c1b4:	bf00      	nop
 800c1b6:	e002      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c1b8:	bf00      	nop
 800c1ba:	e000      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c1bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d109      	bne.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c1c4:	4b73      	ldr	r3, [pc, #460]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c1c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1c8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1d0:	4970      	ldr	r1, [pc, #448]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	650b      	str	r3, [r1, #80]	; 0x50
 800c1d6:	e001      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
 800c1da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d04b      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c1ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1f2:	d02e      	beq.n	800c252 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800c1f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1f8:	d828      	bhi.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1fe:	d02a      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800c200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c204:	d822      	bhi.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c206:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c20a:	d026      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800c20c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c210:	d81c      	bhi.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c216:	d010      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x496>
 800c218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c21c:	d816      	bhi.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d01d      	beq.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800c222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c226:	d111      	bne.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	3304      	adds	r3, #4
 800c22c:	2101      	movs	r1, #1
 800c22e:	4618      	mov	r0, r3
 800c230:	f001 fce6 	bl	800dc00 <RCCEx_PLL2_Config>
 800c234:	4603      	mov	r3, r0
 800c236:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c238:	e012      	b.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	3324      	adds	r3, #36	; 0x24
 800c23e:	2101      	movs	r1, #1
 800c240:	4618      	mov	r0, r3
 800c242:	f001 fd8f 	bl	800dd64 <RCCEx_PLL3_Config>
 800c246:	4603      	mov	r3, r0
 800c248:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c24a:	e009      	b.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	75fb      	strb	r3, [r7, #23]
      break;
 800c250:	e006      	b.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c252:	bf00      	nop
 800c254:	e004      	b.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c256:	bf00      	nop
 800c258:	e002      	b.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c25a:	bf00      	nop
 800c25c:	e000      	b.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c25e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c260:	7dfb      	ldrb	r3, [r7, #23]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d10a      	bne.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c266:	4b4b      	ldr	r3, [pc, #300]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c26a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c274:	4947      	ldr	r1, [pc, #284]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c276:	4313      	orrs	r3, r2
 800c278:	658b      	str	r3, [r1, #88]	; 0x58
 800c27a:	e001      	b.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c27c:	7dfb      	ldrb	r3, [r7, #23]
 800c27e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d02f      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c294:	d00e      	beq.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800c296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c29a:	d814      	bhi.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d015      	beq.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800c2a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2a4:	d10f      	bne.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2a6:	4b3b      	ldr	r3, [pc, #236]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2aa:	4a3a      	ldr	r2, [pc, #232]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c2ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c2b2:	e00c      	b.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	3304      	adds	r3, #4
 800c2b8:	2101      	movs	r1, #1
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f001 fca0 	bl	800dc00 <RCCEx_PLL2_Config>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c2c4:	e003      	b.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	75fb      	strb	r3, [r7, #23]
      break;
 800c2ca:	e000      	b.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800c2cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2ce:	7dfb      	ldrb	r3, [r7, #23]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d109      	bne.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c2d4:	4b2f      	ldr	r3, [pc, #188]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c2d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2e0:	492c      	ldr	r1, [pc, #176]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	650b      	str	r3, [r1, #80]	; 0x50
 800c2e6:	e001      	b.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d032      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2fc:	2b03      	cmp	r3, #3
 800c2fe:	d81b      	bhi.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800c300:	a201      	add	r2, pc, #4	; (adr r2, 800c308 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800c302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c306:	bf00      	nop
 800c308:	0800c33f 	.word	0x0800c33f
 800c30c:	0800c319 	.word	0x0800c319
 800c310:	0800c327 	.word	0x0800c327
 800c314:	0800c33f 	.word	0x0800c33f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c318:	4b1e      	ldr	r3, [pc, #120]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31c:	4a1d      	ldr	r2, [pc, #116]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c31e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c322:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c324:	e00c      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	3304      	adds	r3, #4
 800c32a:	2102      	movs	r1, #2
 800c32c:	4618      	mov	r0, r3
 800c32e:	f001 fc67 	bl	800dc00 <RCCEx_PLL2_Config>
 800c332:	4603      	mov	r3, r0
 800c334:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c336:	e003      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c338:	2301      	movs	r3, #1
 800c33a:	75fb      	strb	r3, [r7, #23]
      break;
 800c33c:	e000      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800c33e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c340:	7dfb      	ldrb	r3, [r7, #23]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d109      	bne.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c346:	4b13      	ldr	r3, [pc, #76]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c34a:	f023 0203 	bic.w	r2, r3, #3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c352:	4910      	ldr	r1, [pc, #64]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c354:	4313      	orrs	r3, r2
 800c356:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c358:	e001      	b.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
 800c35c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c366:	2b00      	cmp	r3, #0
 800c368:	f000 808a 	beq.w	800c480 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c36c:	4b0a      	ldr	r3, [pc, #40]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a09      	ldr	r2, [pc, #36]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c376:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c378:	f7fc f8de 	bl	8008538 <HAL_GetTick>
 800c37c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c37e:	e00d      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c380:	f7fc f8da 	bl	8008538 <HAL_GetTick>
 800c384:	4602      	mov	r2, r0
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	2b64      	cmp	r3, #100	; 0x64
 800c38c:	d906      	bls.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800c38e:	2303      	movs	r3, #3
 800c390:	75fb      	strb	r3, [r7, #23]
        break;
 800c392:	e009      	b.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c394:	58024400 	.word	0x58024400
 800c398:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c39c:	4bb9      	ldr	r3, [pc, #740]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d0eb      	beq.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d166      	bne.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c3ae:	4bb6      	ldr	r3, [pc, #728]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c3b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c3b8:	4053      	eors	r3, r2
 800c3ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d013      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c3c2:	4bb1      	ldr	r3, [pc, #708]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c3cc:	4bae      	ldr	r3, [pc, #696]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3d0:	4aad      	ldr	r2, [pc, #692]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c3d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c3d8:	4bab      	ldr	r3, [pc, #684]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3dc:	4aaa      	ldr	r2, [pc, #680]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c3de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c3e4:	4aa8      	ldr	r2, [pc, #672]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c3f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3f4:	d115      	bne.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3f6:	f7fc f89f 	bl	8008538 <HAL_GetTick>
 800c3fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c3fc:	e00b      	b.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3fe:	f7fc f89b 	bl	8008538 <HAL_GetTick>
 800c402:	4602      	mov	r2, r0
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	f241 3288 	movw	r2, #5000	; 0x1388
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d902      	bls.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800c410:	2303      	movs	r3, #3
 800c412:	75fb      	strb	r3, [r7, #23]
            break;
 800c414:	e005      	b.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c416:	4b9c      	ldr	r3, [pc, #624]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c41a:	f003 0302 	and.w	r3, r3, #2
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d0ed      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800c422:	7dfb      	ldrb	r3, [r7, #23]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d126      	bne.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c42e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c436:	d10d      	bne.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800c438:	4b93      	ldr	r3, [pc, #588]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c446:	0919      	lsrs	r1, r3, #4
 800c448:	4b90      	ldr	r3, [pc, #576]	; (800c68c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800c44a:	400b      	ands	r3, r1
 800c44c:	498e      	ldr	r1, [pc, #568]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c44e:	4313      	orrs	r3, r2
 800c450:	610b      	str	r3, [r1, #16]
 800c452:	e005      	b.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800c454:	4b8c      	ldr	r3, [pc, #560]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	4a8b      	ldr	r2, [pc, #556]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c45a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c45e:	6113      	str	r3, [r2, #16]
 800c460:	4b89      	ldr	r3, [pc, #548]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c46a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c46e:	4986      	ldr	r1, [pc, #536]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c470:	4313      	orrs	r3, r2
 800c472:	670b      	str	r3, [r1, #112]	; 0x70
 800c474:	e004      	b.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c476:	7dfb      	ldrb	r3, [r7, #23]
 800c478:	75bb      	strb	r3, [r7, #22]
 800c47a:	e001      	b.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c47c:	7dfb      	ldrb	r3, [r7, #23]
 800c47e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 0301 	and.w	r3, r3, #1
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d07e      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c490:	2b28      	cmp	r3, #40	; 0x28
 800c492:	d867      	bhi.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800c494:	a201      	add	r2, pc, #4	; (adr r2, 800c49c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800c496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49a:	bf00      	nop
 800c49c:	0800c56b 	.word	0x0800c56b
 800c4a0:	0800c565 	.word	0x0800c565
 800c4a4:	0800c565 	.word	0x0800c565
 800c4a8:	0800c565 	.word	0x0800c565
 800c4ac:	0800c565 	.word	0x0800c565
 800c4b0:	0800c565 	.word	0x0800c565
 800c4b4:	0800c565 	.word	0x0800c565
 800c4b8:	0800c565 	.word	0x0800c565
 800c4bc:	0800c541 	.word	0x0800c541
 800c4c0:	0800c565 	.word	0x0800c565
 800c4c4:	0800c565 	.word	0x0800c565
 800c4c8:	0800c565 	.word	0x0800c565
 800c4cc:	0800c565 	.word	0x0800c565
 800c4d0:	0800c565 	.word	0x0800c565
 800c4d4:	0800c565 	.word	0x0800c565
 800c4d8:	0800c565 	.word	0x0800c565
 800c4dc:	0800c553 	.word	0x0800c553
 800c4e0:	0800c565 	.word	0x0800c565
 800c4e4:	0800c565 	.word	0x0800c565
 800c4e8:	0800c565 	.word	0x0800c565
 800c4ec:	0800c565 	.word	0x0800c565
 800c4f0:	0800c565 	.word	0x0800c565
 800c4f4:	0800c565 	.word	0x0800c565
 800c4f8:	0800c565 	.word	0x0800c565
 800c4fc:	0800c56b 	.word	0x0800c56b
 800c500:	0800c565 	.word	0x0800c565
 800c504:	0800c565 	.word	0x0800c565
 800c508:	0800c565 	.word	0x0800c565
 800c50c:	0800c565 	.word	0x0800c565
 800c510:	0800c565 	.word	0x0800c565
 800c514:	0800c565 	.word	0x0800c565
 800c518:	0800c565 	.word	0x0800c565
 800c51c:	0800c56b 	.word	0x0800c56b
 800c520:	0800c565 	.word	0x0800c565
 800c524:	0800c565 	.word	0x0800c565
 800c528:	0800c565 	.word	0x0800c565
 800c52c:	0800c565 	.word	0x0800c565
 800c530:	0800c565 	.word	0x0800c565
 800c534:	0800c565 	.word	0x0800c565
 800c538:	0800c565 	.word	0x0800c565
 800c53c:	0800c56b 	.word	0x0800c56b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	3304      	adds	r3, #4
 800c544:	2101      	movs	r1, #1
 800c546:	4618      	mov	r0, r3
 800c548:	f001 fb5a 	bl	800dc00 <RCCEx_PLL2_Config>
 800c54c:	4603      	mov	r3, r0
 800c54e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c550:	e00c      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3324      	adds	r3, #36	; 0x24
 800c556:	2101      	movs	r1, #1
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 fc03 	bl	800dd64 <RCCEx_PLL3_Config>
 800c55e:	4603      	mov	r3, r0
 800c560:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c562:	e003      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	75fb      	strb	r3, [r7, #23]
      break;
 800c568:	e000      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800c56a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d109      	bne.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c572:	4b45      	ldr	r3, [pc, #276]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c576:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c57e:	4942      	ldr	r1, [pc, #264]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c580:	4313      	orrs	r3, r2
 800c582:	654b      	str	r3, [r1, #84]	; 0x54
 800c584:	e001      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 0302 	and.w	r3, r3, #2
 800c592:	2b00      	cmp	r3, #0
 800c594:	d037      	beq.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c59a:	2b05      	cmp	r3, #5
 800c59c:	d820      	bhi.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800c59e:	a201      	add	r2, pc, #4	; (adr r2, 800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800c5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a4:	0800c5e7 	.word	0x0800c5e7
 800c5a8:	0800c5bd 	.word	0x0800c5bd
 800c5ac:	0800c5cf 	.word	0x0800c5cf
 800c5b0:	0800c5e7 	.word	0x0800c5e7
 800c5b4:	0800c5e7 	.word	0x0800c5e7
 800c5b8:	0800c5e7 	.word	0x0800c5e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	3304      	adds	r3, #4
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f001 fb1c 	bl	800dc00 <RCCEx_PLL2_Config>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c5cc:	e00c      	b.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	3324      	adds	r3, #36	; 0x24
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f001 fbc5 	bl	800dd64 <RCCEx_PLL3_Config>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c5de:	e003      	b.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	75fb      	strb	r3, [r7, #23]
      break;
 800c5e4:	e000      	b.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800c5e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5e8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d109      	bne.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c5ee:	4b26      	ldr	r3, [pc, #152]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5f2:	f023 0207 	bic.w	r2, r3, #7
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5fa:	4923      	ldr	r1, [pc, #140]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	654b      	str	r3, [r1, #84]	; 0x54
 800c600:	e001      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c602:	7dfb      	ldrb	r3, [r7, #23]
 800c604:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 0304 	and.w	r3, r3, #4
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d040      	beq.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c618:	2b05      	cmp	r3, #5
 800c61a:	d821      	bhi.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800c61c:	a201      	add	r2, pc, #4	; (adr r2, 800c624 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800c61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c622:	bf00      	nop
 800c624:	0800c667 	.word	0x0800c667
 800c628:	0800c63d 	.word	0x0800c63d
 800c62c:	0800c64f 	.word	0x0800c64f
 800c630:	0800c667 	.word	0x0800c667
 800c634:	0800c667 	.word	0x0800c667
 800c638:	0800c667 	.word	0x0800c667
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	3304      	adds	r3, #4
 800c640:	2101      	movs	r1, #1
 800c642:	4618      	mov	r0, r3
 800c644:	f001 fadc 	bl	800dc00 <RCCEx_PLL2_Config>
 800c648:	4603      	mov	r3, r0
 800c64a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c64c:	e00c      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	3324      	adds	r3, #36	; 0x24
 800c652:	2101      	movs	r1, #1
 800c654:	4618      	mov	r0, r3
 800c656:	f001 fb85 	bl	800dd64 <RCCEx_PLL3_Config>
 800c65a:	4603      	mov	r3, r0
 800c65c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c65e:	e003      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	75fb      	strb	r3, [r7, #23]
      break;
 800c664:	e000      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800c666:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c668:	7dfb      	ldrb	r3, [r7, #23]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d110      	bne.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c66e:	4b06      	ldr	r3, [pc, #24]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c672:	f023 0207 	bic.w	r2, r3, #7
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c67c:	4902      	ldr	r1, [pc, #8]	; (800c688 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c67e:	4313      	orrs	r3, r2
 800c680:	658b      	str	r3, [r1, #88]	; 0x58
 800c682:	e007      	b.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800c684:	58024800 	.word	0x58024800
 800c688:	58024400 	.word	0x58024400
 800c68c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c690:	7dfb      	ldrb	r3, [r7, #23]
 800c692:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f003 0320 	and.w	r3, r3, #32
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d04b      	beq.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6aa:	d02e      	beq.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800c6ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6b0:	d828      	bhi.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800c6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6b6:	d02a      	beq.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800c6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6bc:	d822      	bhi.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800c6be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6c2:	d026      	beq.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800c6c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6c8:	d81c      	bhi.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800c6ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ce:	d010      	beq.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800c6d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6d4:	d816      	bhi.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d01d      	beq.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800c6da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6de:	d111      	bne.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	3304      	adds	r3, #4
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f001 fa8a 	bl	800dc00 <RCCEx_PLL2_Config>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c6f0:	e012      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3324      	adds	r3, #36	; 0x24
 800c6f6:	2102      	movs	r1, #2
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f001 fb33 	bl	800dd64 <RCCEx_PLL3_Config>
 800c6fe:	4603      	mov	r3, r0
 800c700:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c702:	e009      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	75fb      	strb	r3, [r7, #23]
      break;
 800c708:	e006      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800c70a:	bf00      	nop
 800c70c:	e004      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800c70e:	bf00      	nop
 800c710:	e002      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800c712:	bf00      	nop
 800c714:	e000      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800c716:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c718:	7dfb      	ldrb	r3, [r7, #23]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10a      	bne.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c71e:	4bb2      	ldr	r3, [pc, #712]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c722:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c72c:	49ae      	ldr	r1, [pc, #696]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c72e:	4313      	orrs	r3, r2
 800c730:	654b      	str	r3, [r1, #84]	; 0x54
 800c732:	e001      	b.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c734:	7dfb      	ldrb	r3, [r7, #23]
 800c736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c740:	2b00      	cmp	r3, #0
 800c742:	d04b      	beq.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c74a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c74e:	d02e      	beq.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800c750:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c754:	d828      	bhi.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800c756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c75a:	d02a      	beq.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800c75c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c760:	d822      	bhi.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800c762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c766:	d026      	beq.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800c768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c76c:	d81c      	bhi.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800c76e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c772:	d010      	beq.n	800c796 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800c774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c778:	d816      	bhi.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d01d      	beq.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800c77e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c782:	d111      	bne.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3304      	adds	r3, #4
 800c788:	2100      	movs	r1, #0
 800c78a:	4618      	mov	r0, r3
 800c78c:	f001 fa38 	bl	800dc00 <RCCEx_PLL2_Config>
 800c790:	4603      	mov	r3, r0
 800c792:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c794:	e012      	b.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3324      	adds	r3, #36	; 0x24
 800c79a:	2102      	movs	r1, #2
 800c79c:	4618      	mov	r0, r3
 800c79e:	f001 fae1 	bl	800dd64 <RCCEx_PLL3_Config>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c7a6:	e009      	b.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c7ac:	e006      	b.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800c7ae:	bf00      	nop
 800c7b0:	e004      	b.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800c7b2:	bf00      	nop
 800c7b4:	e002      	b.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800c7b6:	bf00      	nop
 800c7b8:	e000      	b.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800c7ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7bc:	7dfb      	ldrb	r3, [r7, #23]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10a      	bne.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c7c2:	4b89      	ldr	r3, [pc, #548]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7d0:	4985      	ldr	r1, [pc, #532]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	658b      	str	r3, [r1, #88]	; 0x58
 800c7d6:	e001      	b.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
 800c7da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d04b      	beq.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c7f2:	d02e      	beq.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800c7f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c7f8:	d828      	bhi.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800c7fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7fe:	d02a      	beq.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800c800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c804:	d822      	bhi.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800c806:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c80a:	d026      	beq.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800c80c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c810:	d81c      	bhi.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800c812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c816:	d010      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800c818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c81c:	d816      	bhi.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d01d      	beq.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800c822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c826:	d111      	bne.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3304      	adds	r3, #4
 800c82c:	2100      	movs	r1, #0
 800c82e:	4618      	mov	r0, r3
 800c830:	f001 f9e6 	bl	800dc00 <RCCEx_PLL2_Config>
 800c834:	4603      	mov	r3, r0
 800c836:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c838:	e012      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	3324      	adds	r3, #36	; 0x24
 800c83e:	2102      	movs	r1, #2
 800c840:	4618      	mov	r0, r3
 800c842:	f001 fa8f 	bl	800dd64 <RCCEx_PLL3_Config>
 800c846:	4603      	mov	r3, r0
 800c848:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c84a:	e009      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	75fb      	strb	r3, [r7, #23]
      break;
 800c850:	e006      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800c852:	bf00      	nop
 800c854:	e004      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800c856:	bf00      	nop
 800c858:	e002      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800c85a:	bf00      	nop
 800c85c:	e000      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800c85e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c860:	7dfb      	ldrb	r3, [r7, #23]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10a      	bne.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c866:	4b60      	ldr	r3, [pc, #384]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c86a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c874:	495c      	ldr	r1, [pc, #368]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c876:	4313      	orrs	r3, r2
 800c878:	658b      	str	r3, [r1, #88]	; 0x58
 800c87a:	e001      	b.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c87c:	7dfb      	ldrb	r3, [r7, #23]
 800c87e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 0308 	and.w	r3, r3, #8
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d018      	beq.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c894:	d10a      	bne.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3324      	adds	r3, #36	; 0x24
 800c89a:	2102      	movs	r1, #2
 800c89c:	4618      	mov	r0, r3
 800c89e:	f001 fa61 	bl	800dd64 <RCCEx_PLL3_Config>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d001      	beq.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c8ac:	4b4e      	ldr	r3, [pc, #312]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c8ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8b8:	494b      	ldr	r1, [pc, #300]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f003 0310 	and.w	r3, r3, #16
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d01a      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8d4:	d10a      	bne.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	3324      	adds	r3, #36	; 0x24
 800c8da:	2102      	movs	r1, #2
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f001 fa41 	bl	800dd64 <RCCEx_PLL3_Config>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d001      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c8ec:	4b3e      	ldr	r3, [pc, #248]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c8ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8fa:	493b      	ldr	r1, [pc, #236]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d034      	beq.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c916:	d01d      	beq.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c91c:	d817      	bhi.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d003      	beq.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c926:	d009      	beq.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c928:	e011      	b.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	3304      	adds	r3, #4
 800c92e:	2100      	movs	r1, #0
 800c930:	4618      	mov	r0, r3
 800c932:	f001 f965 	bl	800dc00 <RCCEx_PLL2_Config>
 800c936:	4603      	mov	r3, r0
 800c938:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c93a:	e00c      	b.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	3324      	adds	r3, #36	; 0x24
 800c940:	2102      	movs	r1, #2
 800c942:	4618      	mov	r0, r3
 800c944:	f001 fa0e 	bl	800dd64 <RCCEx_PLL3_Config>
 800c948:	4603      	mov	r3, r0
 800c94a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c94c:	e003      	b.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	75fb      	strb	r3, [r7, #23]
      break;
 800c952:	e000      	b.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800c954:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c956:	7dfb      	ldrb	r3, [r7, #23]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10a      	bne.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c95c:	4b22      	ldr	r3, [pc, #136]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c95e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c96a:	491f      	ldr	r1, [pc, #124]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c96c:	4313      	orrs	r3, r2
 800c96e:	658b      	str	r3, [r1, #88]	; 0x58
 800c970:	e001      	b.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c972:	7dfb      	ldrb	r3, [r7, #23]
 800c974:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d036      	beq.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c988:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c98c:	d01c      	beq.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800c98e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c992:	d816      	bhi.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c998:	d003      	beq.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c99a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c99e:	d007      	beq.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800c9a0:	e00f      	b.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9a2:	4b11      	ldr	r3, [pc, #68]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a6:	4a10      	ldr	r2, [pc, #64]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c9a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c9ae:	e00c      	b.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	3324      	adds	r3, #36	; 0x24
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f001 f9d4 	bl	800dd64 <RCCEx_PLL3_Config>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c9c0:	e003      	b.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	75fb      	strb	r3, [r7, #23]
      break;
 800c9c6:	e000      	b.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800c9c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d10d      	bne.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c9d0:	4b05      	ldr	r3, [pc, #20]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c9d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9de:	4902      	ldr	r1, [pc, #8]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	654b      	str	r3, [r1, #84]	; 0x54
 800c9e4:	e004      	b.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800c9e6:	bf00      	nop
 800c9e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9ec:	7dfb      	ldrb	r3, [r7, #23]
 800c9ee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d029      	beq.n	800ca50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d003      	beq.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ca04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca08:	d007      	beq.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800ca0a:	e00f      	b.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca0c:	4b61      	ldr	r3, [pc, #388]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ca0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca10:	4a60      	ldr	r2, [pc, #384]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ca12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ca18:	e00b      	b.n	800ca32 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	2102      	movs	r1, #2
 800ca20:	4618      	mov	r0, r3
 800ca22:	f001 f8ed 	bl	800dc00 <RCCEx_PLL2_Config>
 800ca26:	4603      	mov	r3, r0
 800ca28:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ca2a:	e002      	b.n	800ca32 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	75fb      	strb	r3, [r7, #23]
      break;
 800ca30:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d109      	bne.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ca38:	4b56      	ldr	r3, [pc, #344]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ca3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca44:	4953      	ldr	r1, [pc, #332]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ca46:	4313      	orrs	r3, r2
 800ca48:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ca4a:	e001      	b.n	800ca50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca4c:	7dfb      	ldrb	r3, [r7, #23]
 800ca4e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00a      	beq.n	800ca72 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	3324      	adds	r3, #36	; 0x24
 800ca60:	2102      	movs	r1, #2
 800ca62:	4618      	mov	r0, r3
 800ca64:	f001 f97e 	bl	800dd64 <RCCEx_PLL3_Config>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d030      	beq.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca86:	d017      	beq.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ca88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca8c:	d811      	bhi.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ca8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca92:	d013      	beq.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800ca94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca98:	d80b      	bhi.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d010      	beq.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800ca9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caa2:	d106      	bne.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800caa4:	4b3b      	ldr	r3, [pc, #236]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800caa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa8:	4a3a      	ldr	r2, [pc, #232]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800caaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800caae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800cab0:	e007      	b.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	75fb      	strb	r3, [r7, #23]
      break;
 800cab6:	e004      	b.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cab8:	bf00      	nop
 800caba:	e002      	b.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cabc:	bf00      	nop
 800cabe:	e000      	b.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d109      	bne.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cac8:	4b32      	ldr	r3, [pc, #200]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800caca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cacc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cad4:	492f      	ldr	r1, [pc, #188]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cad6:	4313      	orrs	r3, r2
 800cad8:	654b      	str	r3, [r1, #84]	; 0x54
 800cada:	e001      	b.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cadc:	7dfb      	ldrb	r3, [r7, #23]
 800cade:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d008      	beq.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800caec:	4b29      	ldr	r3, [pc, #164]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800caee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caf8:	4926      	ldr	r1, [pc, #152]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cafa:	4313      	orrs	r3, r2
 800cafc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d008      	beq.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cb0a:	4b22      	ldr	r3, [pc, #136]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cb0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb16:	491f      	ldr	r1, [pc, #124]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00d      	beq.n	800cb44 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cb28:	4b1a      	ldr	r3, [pc, #104]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	4a19      	ldr	r2, [pc, #100]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cb2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb32:	6113      	str	r3, [r2, #16]
 800cb34:	4b17      	ldr	r3, [pc, #92]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cb36:	691a      	ldr	r2, [r3, #16]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cb3e:	4915      	ldr	r1, [pc, #84]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cb40:	4313      	orrs	r3, r2
 800cb42:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	da08      	bge.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cb4c:	4b11      	ldr	r3, [pc, #68]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cb4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb58:	490e      	ldr	r1, [pc, #56]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d009      	beq.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cb6a:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb78:	4906      	ldr	r1, [pc, #24]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800cb7e:	7dbb      	ldrb	r3, [r7, #22]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	e000      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3718      	adds	r7, #24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	58024400 	.word	0x58024400

0800cb98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b090      	sub	sp, #64	; 0x40
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cba6:	f040 8089 	bne.w	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800cbaa:	4b95      	ldr	r3, [pc, #596]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cbac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbae:	f003 0307 	and.w	r3, r3, #7
 800cbb2:	633b      	str	r3, [r7, #48]	; 0x30
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb6:	2b04      	cmp	r3, #4
 800cbb8:	d87d      	bhi.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800cbba:	a201      	add	r2, pc, #4	; (adr r2, 800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800cbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc0:	0800cbd5 	.word	0x0800cbd5
 800cbc4:	0800cbf9 	.word	0x0800cbf9
 800cbc8:	0800cc1d 	.word	0x0800cc1d
 800cbcc:	0800ccb1 	.word	0x0800ccb1
 800cbd0:	0800cc41 	.word	0x0800cc41

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbd4:	4b8a      	ldr	r3, [pc, #552]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbe0:	d107      	bne.n	800cbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 feb8 	bl	800d95c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cbf0:	e3ed      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbf6:	e3ea      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbf8:	4b81      	ldr	r3, [pc, #516]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc04:	d107      	bne.n	800cc16 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc06:	f107 0318 	add.w	r3, r7, #24
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 fbfe 	bl	800d40c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cc14:	e3db      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800cc16:	2300      	movs	r3, #0
 800cc18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc1a:	e3d8      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc1c:	4b78      	ldr	r3, [pc, #480]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc28:	d107      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc2a:	f107 030c 	add.w	r3, r7, #12
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 fd40 	bl	800d6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cc38:	e3c9      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc3e:	e3c6      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cc40:	4b6f      	ldr	r3, [pc, #444]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cc42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc48:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc4a:	4b6d      	ldr	r3, [pc, #436]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0304 	and.w	r3, r3, #4
 800cc52:	2b04      	cmp	r3, #4
 800cc54:	d10c      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800cc56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d109      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cc5c:	4b68      	ldr	r3, [pc, #416]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	08db      	lsrs	r3, r3, #3
 800cc62:	f003 0303 	and.w	r3, r3, #3
 800cc66:	4a67      	ldr	r2, [pc, #412]	; (800ce04 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800cc68:	fa22 f303 	lsr.w	r3, r2, r3
 800cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc6e:	e01e      	b.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc70:	4b63      	ldr	r3, [pc, #396]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc7c:	d106      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800cc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc84:	d102      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cc86:	4b60      	ldr	r3, [pc, #384]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800cc88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc8a:	e010      	b.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc8c:	4b5c      	ldr	r3, [pc, #368]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc98:	d106      	bne.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cca0:	d102      	bne.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800cca2:	4b5a      	ldr	r3, [pc, #360]	; (800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800cca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cca6:	e002      	b.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ccac:	e38f      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ccae:	e38e      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ccb0:	4b57      	ldr	r3, [pc, #348]	; (800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ccb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ccb4:	e38b      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ccba:	e388      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccc2:	f040 80a7 	bne.w	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800ccc6:	4b4e      	ldr	r3, [pc, #312]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ccc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ccce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ccd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ccd6:	d054      	beq.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ccd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ccde:	f200 808b 	bhi.w	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800cce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cce8:	f000 8083 	beq.w	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ccf2:	f200 8081 	bhi.w	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccfc:	d02f      	beq.n	800cd5e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd04:	d878      	bhi.n	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800cd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d004      	beq.n	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800cd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd12:	d012      	beq.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800cd14:	e070      	b.n	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd16:	4b3a      	ldr	r3, [pc, #232]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd22:	d107      	bne.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f000 fe17 	bl	800d95c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cd32:	e34c      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800cd34:	2300      	movs	r3, #0
 800cd36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd38:	e349      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd3a:	4b31      	ldr	r3, [pc, #196]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd46:	d107      	bne.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd48:	f107 0318 	add.w	r3, r7, #24
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 fb5d 	bl	800d40c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cd56:	e33a      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd5c:	e337      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd5e:	4b28      	ldr	r3, [pc, #160]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd6a:	d107      	bne.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd6c:	f107 030c 	add.w	r3, r7, #12
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 fc9f 	bl	800d6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cd7a:	e328      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd80:	e325      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cd82:	4b1f      	ldr	r3, [pc, #124]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cd84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd8a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd8c:	4b1c      	ldr	r3, [pc, #112]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f003 0304 	and.w	r3, r3, #4
 800cd94:	2b04      	cmp	r3, #4
 800cd96:	d10c      	bne.n	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800cd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d109      	bne.n	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cd9e:	4b18      	ldr	r3, [pc, #96]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	08db      	lsrs	r3, r3, #3
 800cda4:	f003 0303 	and.w	r3, r3, #3
 800cda8:	4a16      	ldr	r2, [pc, #88]	; (800ce04 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800cdaa:	fa22 f303 	lsr.w	r3, r2, r3
 800cdae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdb0:	e01e      	b.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cdb2:	4b13      	ldr	r3, [pc, #76]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdbe:	d106      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800cdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdc6:	d102      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cdc8:	4b0f      	ldr	r3, [pc, #60]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdcc:	e010      	b.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdce:	4b0c      	ldr	r3, [pc, #48]	; (800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdda:	d106      	bne.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800cddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cde2:	d102      	bne.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800cde4:	4b09      	ldr	r3, [pc, #36]	; (800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800cde6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cde8:	e002      	b.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800cdee:	e2ee      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800cdf0:	e2ed      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cdf2:	4b07      	ldr	r3, [pc, #28]	; (800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cdf6:	e2ea      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cdfc:	e2e7      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800cdfe:	bf00      	nop
 800ce00:	58024400 	.word	0x58024400
 800ce04:	03d09000 	.word	0x03d09000
 800ce08:	003d0900 	.word	0x003d0900
 800ce0c:	017d7840 	.word	0x017d7840
 800ce10:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce1a:	f040 809c 	bne.w	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ce1e:	4b9e      	ldr	r3, [pc, #632]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ce20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce22:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ce26:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce2e:	d054      	beq.n	800ceda <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce36:	f200 808b 	bhi.w	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ce40:	f000 8083 	beq.w	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ce44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ce4a:	f200 8081 	bhi.w	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce54:	d02f      	beq.n	800ceb6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ce56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce5c:	d878      	bhi.n	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d004      	beq.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ce64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ce6a:	d012      	beq.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ce6c:	e070      	b.n	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce6e:	4b8a      	ldr	r3, [pc, #552]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce7a:	d107      	bne.n	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 fd6b 	bl	800d95c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ce8a:	e2a0      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ce90:	e29d      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce92:	4b81      	ldr	r3, [pc, #516]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce9e:	d107      	bne.n	800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cea0:	f107 0318 	add.w	r3, r7, #24
 800cea4:	4618      	mov	r0, r3
 800cea6:	f000 fab1 	bl	800d40c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800ceae:	e28e      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ceb4:	e28b      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ceb6:	4b78      	ldr	r3, [pc, #480]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cec2:	d107      	bne.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cec4:	f107 030c 	add.w	r3, r7, #12
 800cec8:	4618      	mov	r0, r3
 800ceca:	f000 fbf3 	bl	800d6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ced2:	e27c      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ced8:	e279      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ceda:	4b6f      	ldr	r3, [pc, #444]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800cedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cede:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cee2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cee4:	4b6c      	ldr	r3, [pc, #432]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f003 0304 	and.w	r3, r3, #4
 800ceec:	2b04      	cmp	r3, #4
 800ceee:	d10c      	bne.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800cef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d109      	bne.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cef6:	4b68      	ldr	r3, [pc, #416]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	08db      	lsrs	r3, r3, #3
 800cefc:	f003 0303 	and.w	r3, r3, #3
 800cf00:	4a66      	ldr	r2, [pc, #408]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800cf02:	fa22 f303 	lsr.w	r3, r2, r3
 800cf06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf08:	e01e      	b.n	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf0a:	4b63      	ldr	r3, [pc, #396]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf16:	d106      	bne.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800cf18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf1e:	d102      	bne.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cf20:	4b5f      	ldr	r3, [pc, #380]	; (800d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800cf22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf24:	e010      	b.n	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf26:	4b5c      	ldr	r3, [pc, #368]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf32:	d106      	bne.n	800cf42 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800cf34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf3a:	d102      	bne.n	800cf42 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800cf3c:	4b59      	ldr	r3, [pc, #356]	; (800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800cf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf40:	e002      	b.n	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800cf46:	e242      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800cf48:	e241      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cf4a:	4b57      	ldr	r3, [pc, #348]	; (800d0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800cf4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf4e:	e23e      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf54:	e23b      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf5c:	f040 80a6 	bne.w	800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800cf60:	4b4d      	ldr	r3, [pc, #308]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800cf62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf64:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cf68:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf70:	d054      	beq.n	800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800cf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf78:	f200 808b 	bhi.w	800d092 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cf82:	f000 8083 	beq.w	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800cf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cf8c:	f200 8081 	bhi.w	800d092 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf96:	d02f      	beq.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf9e:	d878      	bhi.n	800d092 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d004      	beq.n	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800cfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfac:	d012      	beq.n	800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800cfae:	e070      	b.n	800d092 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cfb0:	4b39      	ldr	r3, [pc, #228]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfbc:	d107      	bne.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f000 fcca 	bl	800d95c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cfcc:	e1ff      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cfd2:	e1fc      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfd4:	4b30      	ldr	r3, [pc, #192]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfe0:	d107      	bne.n	800cff2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfe2:	f107 0318 	add.w	r3, r7, #24
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 fa10 	bl	800d40c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cff0:	e1ed      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cff6:	e1ea      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cff8:	4b27      	ldr	r3, [pc, #156]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d004:	d107      	bne.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d006:	f107 030c 	add.w	r3, r7, #12
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 fb52 	bl	800d6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d014:	e1db      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d01a:	e1d8      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d01c:	4b1e      	ldr	r3, [pc, #120]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d01e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d020:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d024:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d026:	4b1c      	ldr	r3, [pc, #112]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 0304 	and.w	r3, r3, #4
 800d02e:	2b04      	cmp	r3, #4
 800d030:	d10c      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800d032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d034:	2b00      	cmp	r3, #0
 800d036:	d109      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d038:	4b17      	ldr	r3, [pc, #92]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	08db      	lsrs	r3, r3, #3
 800d03e:	f003 0303 	and.w	r3, r3, #3
 800d042:	4a16      	ldr	r2, [pc, #88]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d044:	fa22 f303 	lsr.w	r3, r2, r3
 800d048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d04a:	e01e      	b.n	800d08a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d04c:	4b12      	ldr	r3, [pc, #72]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d058:	d106      	bne.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800d05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d060:	d102      	bne.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d062:	4b0f      	ldr	r3, [pc, #60]	; (800d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800d064:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d066:	e010      	b.n	800d08a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d068:	4b0b      	ldr	r3, [pc, #44]	; (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d074:	d106      	bne.n	800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800d076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d07c:	d102      	bne.n	800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d07e:	4b09      	ldr	r3, [pc, #36]	; (800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800d080:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d082:	e002      	b.n	800d08a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d084:	2300      	movs	r3, #0
 800d086:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d088:	e1a1      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d08a:	e1a0      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d08c:	4b06      	ldr	r3, [pc, #24]	; (800d0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800d08e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d090:	e19d      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800d092:	2300      	movs	r3, #0
 800d094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d096:	e19a      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d098:	58024400 	.word	0x58024400
 800d09c:	03d09000 	.word	0x03d09000
 800d0a0:	003d0900 	.word	0x003d0900
 800d0a4:	017d7840 	.word	0x017d7840
 800d0a8:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d0b2:	d173      	bne.n	800d19c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800d0b4:	4b9a      	ldr	r3, [pc, #616]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d0b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d0bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0c4:	d02f      	beq.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0cc:	d863      	bhi.n	800d196 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0da:	d012      	beq.n	800d102 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800d0dc:	e05b      	b.n	800d196 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0de:	4b90      	ldr	r3, [pc, #576]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0ea:	d107      	bne.n	800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0ec:	f107 0318 	add.w	r3, r7, #24
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f000 f98b 	bl	800d40c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d0fa:	e168      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d100:	e165      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d102:	4b87      	ldr	r3, [pc, #540]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d10a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d10e:	d107      	bne.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d110:	f107 030c 	add.w	r3, r7, #12
 800d114:	4618      	mov	r0, r3
 800d116:	f000 facd 	bl	800d6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d11e:	e156      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d120:	2300      	movs	r3, #0
 800d122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d124:	e153      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d126:	4b7e      	ldr	r3, [pc, #504]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d12a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d12e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d130:	4b7b      	ldr	r3, [pc, #492]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f003 0304 	and.w	r3, r3, #4
 800d138:	2b04      	cmp	r3, #4
 800d13a:	d10c      	bne.n	800d156 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800d13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d109      	bne.n	800d156 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d142:	4b77      	ldr	r3, [pc, #476]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	08db      	lsrs	r3, r3, #3
 800d148:	f003 0303 	and.w	r3, r3, #3
 800d14c:	4a75      	ldr	r2, [pc, #468]	; (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d14e:	fa22 f303 	lsr.w	r3, r2, r3
 800d152:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d154:	e01e      	b.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d156:	4b72      	ldr	r3, [pc, #456]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d15e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d162:	d106      	bne.n	800d172 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800d164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d16a:	d102      	bne.n	800d172 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d16c:	4b6e      	ldr	r3, [pc, #440]	; (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800d16e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d170:	e010      	b.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d172:	4b6b      	ldr	r3, [pc, #428]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d17a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d17e:	d106      	bne.n	800d18e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d186:	d102      	bne.n	800d18e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d188:	4b68      	ldr	r3, [pc, #416]	; (800d32c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800d18a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d18c:	e002      	b.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d192:	e11c      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d194:	e11b      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d196:	2300      	movs	r3, #0
 800d198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d19a:	e118      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1a2:	d133      	bne.n	800d20c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800d1a4:	4b5e      	ldr	r3, [pc, #376]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d1a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d004      	beq.n	800d1be <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800d1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1ba:	d012      	beq.n	800d1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800d1bc:	e023      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d1be:	4b58      	ldr	r3, [pc, #352]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1ca:	d107      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f000 fbc3 	bl	800d95c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d1da:	e0f8      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d1e0:	e0f5      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1e2:	4b4f      	ldr	r3, [pc, #316]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1ee:	d107      	bne.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1f0:	f107 0318 	add.w	r3, r7, #24
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 f909 	bl	800d40c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d1fe:	e0e6      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d204:	e0e3      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d206:	2300      	movs	r3, #0
 800d208:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d20a:	e0e0      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d212:	f040 808d 	bne.w	800d330 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800d216:	4b42      	ldr	r3, [pc, #264]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d21a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d21e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d226:	d06b      	beq.n	800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800d228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d22e:	d874      	bhi.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d236:	d056      	beq.n	800d2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800d238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d23e:	d86c      	bhi.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d246:	d03b      	beq.n	800d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800d248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d24e:	d864      	bhi.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d256:	d021      	beq.n	800d29c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d25e:	d85c      	bhi.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d262:	2b00      	cmp	r3, #0
 800d264:	d004      	beq.n	800d270 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800d266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d26c:	d004      	beq.n	800d278 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800d26e:	e054      	b.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d270:	f000 f8b6 	bl	800d3e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d274:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800d276:	e0aa      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d278:	4b29      	ldr	r3, [pc, #164]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d284:	d107      	bne.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d286:	f107 0318 	add.w	r3, r7, #24
 800d28a:	4618      	mov	r0, r3
 800d28c:	f000 f8be 	bl	800d40c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d294:	e09b      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d29a:	e098      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d29c:	4b20      	ldr	r3, [pc, #128]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2a8:	d107      	bne.n	800d2ba <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2aa:	f107 030c 	add.w	r3, r7, #12
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f000 fa00 	bl	800d6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d2b8:	e089      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d2be:	e086      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d2c0:	4b17      	ldr	r3, [pc, #92]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f003 0304 	and.w	r3, r3, #4
 800d2c8:	2b04      	cmp	r3, #4
 800d2ca:	d109      	bne.n	800d2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d2cc:	4b14      	ldr	r3, [pc, #80]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	08db      	lsrs	r3, r3, #3
 800d2d2:	f003 0303 	and.w	r3, r3, #3
 800d2d6:	4a13      	ldr	r2, [pc, #76]	; (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d2d8:	fa22 f303 	lsr.w	r3, r2, r3
 800d2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d2de:	e076      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d2e4:	e073      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d2e6:	4b0e      	ldr	r3, [pc, #56]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2f2:	d102      	bne.n	800d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800d2f4:	4b0c      	ldr	r3, [pc, #48]	; (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800d2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d2f8:	e069      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d2fe:	e066      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d300:	4b07      	ldr	r3, [pc, #28]	; (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d30c:	d102      	bne.n	800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800d30e:	4b07      	ldr	r3, [pc, #28]	; (800d32c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800d310:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d312:	e05c      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d314:	2300      	movs	r3, #0
 800d316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d318:	e059      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800d31a:	2300      	movs	r3, #0
 800d31c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d31e:	e056      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d320:	58024400 	.word	0x58024400
 800d324:	03d09000 	.word	0x03d09000
 800d328:	003d0900 	.word	0x003d0900
 800d32c:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d336:	d148      	bne.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800d338:	4b27      	ldr	r3, [pc, #156]	; (800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d33a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d33c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d340:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d348:	d02a      	beq.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800d34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d350:	d838      	bhi.n	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800d352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d354:	2b00      	cmp	r3, #0
 800d356:	d004      	beq.n	800d362 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d35e:	d00d      	beq.n	800d37c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800d360:	e030      	b.n	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d362:	4b1d      	ldr	r3, [pc, #116]	; (800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d36a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d36e:	d102      	bne.n	800d376 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800d370:	4b1a      	ldr	r3, [pc, #104]	; (800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d372:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d374:	e02b      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d37a:	e028      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d37c:	4b16      	ldr	r3, [pc, #88]	; (800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d388:	d107      	bne.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d38a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 fae4 	bl	800d95c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d396:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d398:	e019      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d39a:	2300      	movs	r3, #0
 800d39c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d39e:	e016      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3a0:	4b0d      	ldr	r3, [pc, #52]	; (800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d3ac:	d107      	bne.n	800d3be <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3ae:	f107 0318 	add.w	r3, r7, #24
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 f82a 	bl	800d40c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d3bc:	e007      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d3c2:	e004      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d3c8:	e001      	b.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800d3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3740      	adds	r7, #64	; 0x40
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	58024400 	.word	0x58024400
 800d3dc:	017d7840 	.word	0x017d7840

0800d3e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d3e4:	f7fe fc66 	bl	800bcb4 <HAL_RCC_GetHCLKFreq>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	4b06      	ldr	r3, [pc, #24]	; (800d404 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d3ec:	6a1b      	ldr	r3, [r3, #32]
 800d3ee:	091b      	lsrs	r3, r3, #4
 800d3f0:	f003 0307 	and.w	r3, r3, #7
 800d3f4:	4904      	ldr	r1, [pc, #16]	; (800d408 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d3f6:	5ccb      	ldrb	r3, [r1, r3]
 800d3f8:	f003 031f 	and.w	r3, r3, #31
 800d3fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d400:	4618      	mov	r0, r3
 800d402:	bd80      	pop	{r7, pc}
 800d404:	58024400 	.word	0x58024400
 800d408:	080147a8 	.word	0x080147a8

0800d40c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b089      	sub	sp, #36	; 0x24
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d414:	4ba1      	ldr	r3, [pc, #644]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d418:	f003 0303 	and.w	r3, r3, #3
 800d41c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d41e:	4b9f      	ldr	r3, [pc, #636]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d422:	0b1b      	lsrs	r3, r3, #12
 800d424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d428:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d42a:	4b9c      	ldr	r3, [pc, #624]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42e:	091b      	lsrs	r3, r3, #4
 800d430:	f003 0301 	and.w	r3, r3, #1
 800d434:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d436:	4b99      	ldr	r3, [pc, #612]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d43a:	08db      	lsrs	r3, r3, #3
 800d43c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	fb02 f303 	mul.w	r3, r2, r3
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d44e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2b00      	cmp	r3, #0
 800d456:	f000 8111 	beq.w	800d67c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	f000 8083 	beq.w	800d568 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	2b02      	cmp	r3, #2
 800d466:	f200 80a1 	bhi.w	800d5ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d003      	beq.n	800d478 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d056      	beq.n	800d524 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d476:	e099      	b.n	800d5ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d478:	4b88      	ldr	r3, [pc, #544]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f003 0320 	and.w	r3, r3, #32
 800d480:	2b00      	cmp	r3, #0
 800d482:	d02d      	beq.n	800d4e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d484:	4b85      	ldr	r3, [pc, #532]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	08db      	lsrs	r3, r3, #3
 800d48a:	f003 0303 	and.w	r3, r3, #3
 800d48e:	4a84      	ldr	r2, [pc, #528]	; (800d6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d490:	fa22 f303 	lsr.w	r3, r2, r3
 800d494:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	ee07 3a90 	vmov	s15, r3
 800d49c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	ee07 3a90 	vmov	s15, r3
 800d4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4ae:	4b7b      	ldr	r3, [pc, #492]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4b6:	ee07 3a90 	vmov	s15, r3
 800d4ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d4de:	e087      	b.n	800d5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	ee07 3a90 	vmov	s15, r3
 800d4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d4ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4f2:	4b6a      	ldr	r3, [pc, #424]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4fa:	ee07 3a90 	vmov	s15, r3
 800d4fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d502:	ed97 6a03 	vldr	s12, [r7, #12]
 800d506:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d50a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d50e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d51a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d51e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d522:	e065      	b.n	800d5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	ee07 3a90 	vmov	s15, r3
 800d52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d52e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d6ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d536:	4b59      	ldr	r3, [pc, #356]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d53e:	ee07 3a90 	vmov	s15, r3
 800d542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d546:	ed97 6a03 	vldr	s12, [r7, #12]
 800d54a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d54e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d562:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d566:	e043      	b.n	800d5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	ee07 3a90 	vmov	s15, r3
 800d56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d572:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d6b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d57a:	4b48      	ldr	r3, [pc, #288]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d582:	ee07 3a90 	vmov	s15, r3
 800d586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d58a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d58e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d59a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d59e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d5aa:	e021      	b.n	800d5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	ee07 3a90 	vmov	s15, r3
 800d5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d6ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5be:	4b37      	ldr	r3, [pc, #220]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5c6:	ee07 3a90 	vmov	s15, r3
 800d5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d5ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d5f0:	4b2a      	ldr	r3, [pc, #168]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f4:	0a5b      	lsrs	r3, r3, #9
 800d5f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5fa:	ee07 3a90 	vmov	s15, r3
 800d5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d60a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d60e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d616:	ee17 2a90 	vmov	r2, s15
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d61e:	4b1f      	ldr	r3, [pc, #124]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d622:	0c1b      	lsrs	r3, r3, #16
 800d624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d628:	ee07 3a90 	vmov	s15, r3
 800d62c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d634:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d638:	edd7 6a07 	vldr	s13, [r7, #28]
 800d63c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d644:	ee17 2a90 	vmov	r2, s15
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d64c:	4b13      	ldr	r3, [pc, #76]	; (800d69c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d650:	0e1b      	lsrs	r3, r3, #24
 800d652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d656:	ee07 3a90 	vmov	s15, r3
 800d65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d65e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d662:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d666:	edd7 6a07 	vldr	s13, [r7, #28]
 800d66a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d66e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d672:	ee17 2a90 	vmov	r2, s15
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d67a:	e008      	b.n	800d68e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	609a      	str	r2, [r3, #8]
}
 800d68e:	bf00      	nop
 800d690:	3724      	adds	r7, #36	; 0x24
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	58024400 	.word	0x58024400
 800d6a0:	03d09000 	.word	0x03d09000
 800d6a4:	46000000 	.word	0x46000000
 800d6a8:	4c742400 	.word	0x4c742400
 800d6ac:	4a742400 	.word	0x4a742400
 800d6b0:	4bbebc20 	.word	0x4bbebc20

0800d6b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b089      	sub	sp, #36	; 0x24
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6bc:	4ba1      	ldr	r3, [pc, #644]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c0:	f003 0303 	and.w	r3, r3, #3
 800d6c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d6c6:	4b9f      	ldr	r3, [pc, #636]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ca:	0d1b      	lsrs	r3, r3, #20
 800d6cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d6d2:	4b9c      	ldr	r3, [pc, #624]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d6:	0a1b      	lsrs	r3, r3, #8
 800d6d8:	f003 0301 	and.w	r3, r3, #1
 800d6dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d6de:	4b99      	ldr	r3, [pc, #612]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6e2:	08db      	lsrs	r3, r3, #3
 800d6e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6e8:	693a      	ldr	r2, [r7, #16]
 800d6ea:	fb02 f303 	mul.w	r3, r2, r3
 800d6ee:	ee07 3a90 	vmov	s15, r3
 800d6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	f000 8111 	beq.w	800d924 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	2b02      	cmp	r3, #2
 800d706:	f000 8083 	beq.w	800d810 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	f200 80a1 	bhi.w	800d854 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d712:	69bb      	ldr	r3, [r7, #24]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d003      	beq.n	800d720 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d056      	beq.n	800d7cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d71e:	e099      	b.n	800d854 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d720:	4b88      	ldr	r3, [pc, #544]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f003 0320 	and.w	r3, r3, #32
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d02d      	beq.n	800d788 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d72c:	4b85      	ldr	r3, [pc, #532]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	08db      	lsrs	r3, r3, #3
 800d732:	f003 0303 	and.w	r3, r3, #3
 800d736:	4a84      	ldr	r2, [pc, #528]	; (800d948 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d738:	fa22 f303 	lsr.w	r3, r2, r3
 800d73c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	ee07 3a90 	vmov	s15, r3
 800d744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	ee07 3a90 	vmov	s15, r3
 800d74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d756:	4b7b      	ldr	r3, [pc, #492]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d75e:	ee07 3a90 	vmov	s15, r3
 800d762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d766:	ed97 6a03 	vldr	s12, [r7, #12]
 800d76a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d94c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d76e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d77a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d782:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d786:	e087      	b.n	800d898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	ee07 3a90 	vmov	s15, r3
 800d78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d792:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d950 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d79a:	4b6a      	ldr	r3, [pc, #424]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7a2:	ee07 3a90 	vmov	s15, r3
 800d7a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d94c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d7ca:	e065      	b.n	800d898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	ee07 3a90 	vmov	s15, r3
 800d7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7de:	4b59      	ldr	r3, [pc, #356]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7e6:	ee07 3a90 	vmov	s15, r3
 800d7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d94c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d80a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d80e:	e043      	b.n	800d898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	ee07 3a90 	vmov	s15, r3
 800d816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d81a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d822:	4b48      	ldr	r3, [pc, #288]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d82a:	ee07 3a90 	vmov	s15, r3
 800d82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d832:	ed97 6a03 	vldr	s12, [r7, #12]
 800d836:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d94c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d84e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d852:	e021      	b.n	800d898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	ee07 3a90 	vmov	s15, r3
 800d85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d85e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d866:	4b37      	ldr	r3, [pc, #220]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d86e:	ee07 3a90 	vmov	s15, r3
 800d872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d876:	ed97 6a03 	vldr	s12, [r7, #12]
 800d87a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d94c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d892:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d896:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d898:	4b2a      	ldr	r3, [pc, #168]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89c:	0a5b      	lsrs	r3, r3, #9
 800d89e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8a2:	ee07 3a90 	vmov	s15, r3
 800d8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8be:	ee17 2a90 	vmov	r2, s15
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d8c6:	4b1f      	ldr	r3, [pc, #124]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ca:	0c1b      	lsrs	r3, r3, #16
 800d8cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8d0:	ee07 3a90 	vmov	s15, r3
 800d8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8ec:	ee17 2a90 	vmov	r2, s15
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d8f4:	4b13      	ldr	r3, [pc, #76]	; (800d944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8f8:	0e1b      	lsrs	r3, r3, #24
 800d8fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8fe:	ee07 3a90 	vmov	s15, r3
 800d902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d90a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d90e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d91a:	ee17 2a90 	vmov	r2, s15
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d922:	e008      	b.n	800d936 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	609a      	str	r2, [r3, #8]
}
 800d936:	bf00      	nop
 800d938:	3724      	adds	r7, #36	; 0x24
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop
 800d944:	58024400 	.word	0x58024400
 800d948:	03d09000 	.word	0x03d09000
 800d94c:	46000000 	.word	0x46000000
 800d950:	4c742400 	.word	0x4c742400
 800d954:	4a742400 	.word	0x4a742400
 800d958:	4bbebc20 	.word	0x4bbebc20

0800d95c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b089      	sub	sp, #36	; 0x24
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d964:	4ba0      	ldr	r3, [pc, #640]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d968:	f003 0303 	and.w	r3, r3, #3
 800d96c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800d96e:	4b9e      	ldr	r3, [pc, #632]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d972:	091b      	lsrs	r3, r3, #4
 800d974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d978:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d97a:	4b9b      	ldr	r3, [pc, #620]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97e:	f003 0301 	and.w	r3, r3, #1
 800d982:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d984:	4b98      	ldr	r3, [pc, #608]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d988:	08db      	lsrs	r3, r3, #3
 800d98a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	fb02 f303 	mul.w	r3, r2, r3
 800d994:	ee07 3a90 	vmov	s15, r3
 800d998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d99c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 8111 	beq.w	800dbca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	2b02      	cmp	r3, #2
 800d9ac:	f000 8083 	beq.w	800dab6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	2b02      	cmp	r3, #2
 800d9b4:	f200 80a1 	bhi.w	800dafa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d003      	beq.n	800d9c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d056      	beq.n	800da72 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d9c4:	e099      	b.n	800dafa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9c6:	4b88      	ldr	r3, [pc, #544]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f003 0320 	and.w	r3, r3, #32
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d02d      	beq.n	800da2e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d9d2:	4b85      	ldr	r3, [pc, #532]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	08db      	lsrs	r3, r3, #3
 800d9d8:	f003 0303 	and.w	r3, r3, #3
 800d9dc:	4a83      	ldr	r2, [pc, #524]	; (800dbec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d9de:	fa22 f303 	lsr.w	r3, r2, r3
 800d9e2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	ee07 3a90 	vmov	s15, r3
 800d9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	ee07 3a90 	vmov	s15, r3
 800d9f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9fc:	4b7a      	ldr	r3, [pc, #488]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da04:	ee07 3a90 	vmov	s15, r3
 800da08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800da10:	eddf 5a77 	vldr	s11, [pc, #476]	; 800dbf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da28:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800da2c:	e087      	b.n	800db3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	ee07 3a90 	vmov	s15, r3
 800da34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da38:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800dbf4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800da3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da40:	4b69      	ldr	r3, [pc, #420]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da48:	ee07 3a90 	vmov	s15, r3
 800da4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da50:	ed97 6a03 	vldr	s12, [r7, #12]
 800da54:	eddf 5a66 	vldr	s11, [pc, #408]	; 800dbf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da70:	e065      	b.n	800db3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	ee07 3a90 	vmov	s15, r3
 800da78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da7c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800dbf8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800da80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da84:	4b58      	ldr	r3, [pc, #352]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da8c:	ee07 3a90 	vmov	s15, r3
 800da90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da94:	ed97 6a03 	vldr	s12, [r7, #12]
 800da98:	eddf 5a55 	vldr	s11, [pc, #340]	; 800dbf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800daa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dab0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dab4:	e043      	b.n	800db3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	ee07 3a90 	vmov	s15, r3
 800dabc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dac0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800dbfc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dac8:	4b47      	ldr	r3, [pc, #284]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800daca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dad0:	ee07 3a90 	vmov	s15, r3
 800dad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dad8:	ed97 6a03 	vldr	s12, [r7, #12]
 800dadc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800dbf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800daec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800daf8:	e021      	b.n	800db3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	ee07 3a90 	vmov	s15, r3
 800db00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db04:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800dbf4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800db08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db0c:	4b36      	ldr	r3, [pc, #216]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db14:	ee07 3a90 	vmov	s15, r3
 800db18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800db20:	eddf 5a33 	vldr	s11, [pc, #204]	; 800dbf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800db3c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800db3e:	4b2a      	ldr	r3, [pc, #168]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db42:	0a5b      	lsrs	r3, r3, #9
 800db44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db48:	ee07 3a90 	vmov	s15, r3
 800db4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db58:	edd7 6a07 	vldr	s13, [r7, #28]
 800db5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db64:	ee17 2a90 	vmov	r2, s15
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800db6c:	4b1e      	ldr	r3, [pc, #120]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db70:	0c1b      	lsrs	r3, r3, #16
 800db72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db76:	ee07 3a90 	vmov	s15, r3
 800db7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db86:	edd7 6a07 	vldr	s13, [r7, #28]
 800db8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db92:	ee17 2a90 	vmov	r2, s15
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800db9a:	4b13      	ldr	r3, [pc, #76]	; (800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db9e:	0e1b      	lsrs	r3, r3, #24
 800dba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dba4:	ee07 3a90 	vmov	s15, r3
 800dba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dbb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbc0:	ee17 2a90 	vmov	r2, s15
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dbc8:	e008      	b.n	800dbdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	609a      	str	r2, [r3, #8]
}
 800dbdc:	bf00      	nop
 800dbde:	3724      	adds	r7, #36	; 0x24
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr
 800dbe8:	58024400 	.word	0x58024400
 800dbec:	03d09000 	.word	0x03d09000
 800dbf0:	46000000 	.word	0x46000000
 800dbf4:	4c742400 	.word	0x4c742400
 800dbf8:	4a742400 	.word	0x4a742400
 800dbfc:	4bbebc20 	.word	0x4bbebc20

0800dc00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc0e:	4b53      	ldr	r3, [pc, #332]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc12:	f003 0303 	and.w	r3, r3, #3
 800dc16:	2b03      	cmp	r3, #3
 800dc18:	d101      	bne.n	800dc1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e099      	b.n	800dd52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dc1e:	4b4f      	ldr	r3, [pc, #316]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	4a4e      	ldr	r2, [pc, #312]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dc24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dc28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc2a:	f7fa fc85 	bl	8008538 <HAL_GetTick>
 800dc2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc30:	e008      	b.n	800dc44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800dc32:	f7fa fc81 	bl	8008538 <HAL_GetTick>
 800dc36:	4602      	mov	r2, r0
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	1ad3      	subs	r3, r2, r3
 800dc3c:	2b02      	cmp	r3, #2
 800dc3e:	d901      	bls.n	800dc44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dc40:	2303      	movs	r3, #3
 800dc42:	e086      	b.n	800dd52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc44:	4b45      	ldr	r3, [pc, #276]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d1f0      	bne.n	800dc32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dc50:	4b42      	ldr	r3, [pc, #264]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	031b      	lsls	r3, r3, #12
 800dc5e:	493f      	ldr	r1, [pc, #252]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dc60:	4313      	orrs	r3, r2
 800dc62:	628b      	str	r3, [r1, #40]	; 0x28
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	689b      	ldr	r3, [r3, #8]
 800dc72:	3b01      	subs	r3, #1
 800dc74:	025b      	lsls	r3, r3, #9
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	431a      	orrs	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	041b      	lsls	r3, r3, #16
 800dc82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dc86:	431a      	orrs	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	691b      	ldr	r3, [r3, #16]
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	061b      	lsls	r3, r3, #24
 800dc90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dc94:	4931      	ldr	r1, [pc, #196]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dc96:	4313      	orrs	r3, r2
 800dc98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dc9a:	4b30      	ldr	r3, [pc, #192]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	695b      	ldr	r3, [r3, #20]
 800dca6:	492d      	ldr	r1, [pc, #180]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dcac:	4b2b      	ldr	r3, [pc, #172]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb0:	f023 0220 	bic.w	r2, r3, #32
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	699b      	ldr	r3, [r3, #24]
 800dcb8:	4928      	ldr	r1, [pc, #160]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dcbe:	4b27      	ldr	r3, [pc, #156]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dcc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc2:	4a26      	ldr	r2, [pc, #152]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dcc4:	f023 0310 	bic.w	r3, r3, #16
 800dcc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dcca:	4b24      	ldr	r3, [pc, #144]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcce:	4b24      	ldr	r3, [pc, #144]	; (800dd60 <RCCEx_PLL2_Config+0x160>)
 800dcd0:	4013      	ands	r3, r2
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	69d2      	ldr	r2, [r2, #28]
 800dcd6:	00d2      	lsls	r2, r2, #3
 800dcd8:	4920      	ldr	r1, [pc, #128]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dcde:	4b1f      	ldr	r3, [pc, #124]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce2:	4a1e      	ldr	r2, [pc, #120]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dce4:	f043 0310 	orr.w	r3, r3, #16
 800dce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d106      	bne.n	800dcfe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dcf0:	4b1a      	ldr	r3, [pc, #104]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dcf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf4:	4a19      	ldr	r2, [pc, #100]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dcf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dcfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dcfc:	e00f      	b.n	800dd1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d106      	bne.n	800dd12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dd04:	4b15      	ldr	r3, [pc, #84]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd08:	4a14      	ldr	r2, [pc, #80]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dd0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd10:	e005      	b.n	800dd1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dd12:	4b12      	ldr	r3, [pc, #72]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd16:	4a11      	ldr	r2, [pc, #68]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dd18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dd1e:	4b0f      	ldr	r3, [pc, #60]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a0e      	ldr	r2, [pc, #56]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dd24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd2a:	f7fa fc05 	bl	8008538 <HAL_GetTick>
 800dd2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd30:	e008      	b.n	800dd44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800dd32:	f7fa fc01 	bl	8008538 <HAL_GetTick>
 800dd36:	4602      	mov	r2, r0
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	1ad3      	subs	r3, r2, r3
 800dd3c:	2b02      	cmp	r3, #2
 800dd3e:	d901      	bls.n	800dd44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dd40:	2303      	movs	r3, #3
 800dd42:	e006      	b.n	800dd52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd44:	4b05      	ldr	r3, [pc, #20]	; (800dd5c <RCCEx_PLL2_Config+0x15c>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0f0      	beq.n	800dd32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	58024400 	.word	0x58024400
 800dd60:	ffff0007 	.word	0xffff0007

0800dd64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dd72:	4b53      	ldr	r3, [pc, #332]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800dd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd76:	f003 0303 	and.w	r3, r3, #3
 800dd7a:	2b03      	cmp	r3, #3
 800dd7c:	d101      	bne.n	800dd82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e099      	b.n	800deb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dd82:	4b4f      	ldr	r3, [pc, #316]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a4e      	ldr	r2, [pc, #312]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800dd88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd8e:	f7fa fbd3 	bl	8008538 <HAL_GetTick>
 800dd92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd94:	e008      	b.n	800dda8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800dd96:	f7fa fbcf 	bl	8008538 <HAL_GetTick>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	d901      	bls.n	800dda8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dda4:	2303      	movs	r3, #3
 800dda6:	e086      	b.n	800deb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dda8:	4b45      	ldr	r3, [pc, #276]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1f0      	bne.n	800dd96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ddb4:	4b42      	ldr	r3, [pc, #264]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800ddb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	051b      	lsls	r3, r3, #20
 800ddc2:	493f      	ldr	r1, [pc, #252]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	628b      	str	r3, [r1, #40]	; 0x28
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	3b01      	subs	r3, #1
 800ddd8:	025b      	lsls	r3, r3, #9
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	431a      	orrs	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	3b01      	subs	r3, #1
 800dde4:	041b      	lsls	r3, r3, #16
 800dde6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ddea:	431a      	orrs	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	691b      	ldr	r3, [r3, #16]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	061b      	lsls	r3, r3, #24
 800ddf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ddf8:	4931      	ldr	r1, [pc, #196]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ddfe:	4b30      	ldr	r3, [pc, #192]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	695b      	ldr	r3, [r3, #20]
 800de0a:	492d      	ldr	r1, [pc, #180]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de0c:	4313      	orrs	r3, r2
 800de0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800de10:	4b2b      	ldr	r3, [pc, #172]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	699b      	ldr	r3, [r3, #24]
 800de1c:	4928      	ldr	r1, [pc, #160]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de1e:	4313      	orrs	r3, r2
 800de20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800de22:	4b27      	ldr	r3, [pc, #156]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de26:	4a26      	ldr	r2, [pc, #152]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800de2e:	4b24      	ldr	r3, [pc, #144]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de32:	4b24      	ldr	r3, [pc, #144]	; (800dec4 <RCCEx_PLL3_Config+0x160>)
 800de34:	4013      	ands	r3, r2
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	69d2      	ldr	r2, [r2, #28]
 800de3a:	00d2      	lsls	r2, r2, #3
 800de3c:	4920      	ldr	r1, [pc, #128]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de3e:	4313      	orrs	r3, r2
 800de40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800de42:	4b1f      	ldr	r3, [pc, #124]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de46:	4a1e      	ldr	r2, [pc, #120]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d106      	bne.n	800de62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800de54:	4b1a      	ldr	r3, [pc, #104]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de58:	4a19      	ldr	r2, [pc, #100]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800de5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800de60:	e00f      	b.n	800de82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d106      	bne.n	800de76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800de68:	4b15      	ldr	r3, [pc, #84]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6c:	4a14      	ldr	r2, [pc, #80]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800de72:	62d3      	str	r3, [r2, #44]	; 0x2c
 800de74:	e005      	b.n	800de82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800de76:	4b12      	ldr	r3, [pc, #72]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de7a:	4a11      	ldr	r2, [pc, #68]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800de80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800de82:	4b0f      	ldr	r3, [pc, #60]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	4a0e      	ldr	r2, [pc, #56]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800de88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de8e:	f7fa fb53 	bl	8008538 <HAL_GetTick>
 800de92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de94:	e008      	b.n	800dea8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800de96:	f7fa fb4f 	bl	8008538 <HAL_GetTick>
 800de9a:	4602      	mov	r2, r0
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	1ad3      	subs	r3, r2, r3
 800dea0:	2b02      	cmp	r3, #2
 800dea2:	d901      	bls.n	800dea8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dea4:	2303      	movs	r3, #3
 800dea6:	e006      	b.n	800deb6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dea8:	4b05      	ldr	r3, [pc, #20]	; (800dec0 <RCCEx_PLL3_Config+0x15c>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d0f0      	beq.n	800de96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800deb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	58024400 	.word	0x58024400
 800dec4:	ffff0007 	.word	0xffff0007

0800dec8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d101      	bne.n	800deda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ded6:	2301      	movs	r3, #1
 800ded8:	e0f1      	b.n	800e0be <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2200      	movs	r2, #0
 800dede:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a78      	ldr	r2, [pc, #480]	; (800e0c8 <HAL_SPI_Init+0x200>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d00f      	beq.n	800df0a <HAL_SPI_Init+0x42>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a77      	ldr	r2, [pc, #476]	; (800e0cc <HAL_SPI_Init+0x204>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d00a      	beq.n	800df0a <HAL_SPI_Init+0x42>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a75      	ldr	r2, [pc, #468]	; (800e0d0 <HAL_SPI_Init+0x208>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d005      	beq.n	800df0a <HAL_SPI_Init+0x42>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	2b0f      	cmp	r3, #15
 800df04:	d901      	bls.n	800df0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800df06:	2301      	movs	r3, #1
 800df08:	e0d9      	b.n	800e0be <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f8e2 	bl	800e0d4 <SPI_GetPacketSize>
 800df10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a6c      	ldr	r2, [pc, #432]	; (800e0c8 <HAL_SPI_Init+0x200>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d00c      	beq.n	800df36 <HAL_SPI_Init+0x6e>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a6a      	ldr	r2, [pc, #424]	; (800e0cc <HAL_SPI_Init+0x204>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d007      	beq.n	800df36 <HAL_SPI_Init+0x6e>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4a69      	ldr	r2, [pc, #420]	; (800e0d0 <HAL_SPI_Init+0x208>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d002      	beq.n	800df36 <HAL_SPI_Init+0x6e>
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2b08      	cmp	r3, #8
 800df34:	d811      	bhi.n	800df5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df3a:	4a63      	ldr	r2, [pc, #396]	; (800e0c8 <HAL_SPI_Init+0x200>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d009      	beq.n	800df54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a61      	ldr	r2, [pc, #388]	; (800e0cc <HAL_SPI_Init+0x204>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d004      	beq.n	800df54 <HAL_SPI_Init+0x8c>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4a60      	ldr	r2, [pc, #384]	; (800e0d0 <HAL_SPI_Init+0x208>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d104      	bne.n	800df5e <HAL_SPI_Init+0x96>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2b10      	cmp	r3, #16
 800df58:	d901      	bls.n	800df5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800df5a:	2301      	movs	r3, #1
 800df5c:	e0af      	b.n	800e0be <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b00      	cmp	r3, #0
 800df68:	d106      	bne.n	800df78 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f7f8 fdc4 	bl	8006b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2202      	movs	r2, #2
 800df7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f022 0201 	bic.w	r2, r2, #1
 800df8e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800df9a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	699b      	ldr	r3, [r3, #24]
 800dfa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dfa4:	d119      	bne.n	800dfda <HAL_SPI_Init+0x112>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dfae:	d103      	bne.n	800dfb8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d008      	beq.n	800dfca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10c      	bne.n	800dfda <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dfc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dfc8:	d107      	bne.n	800dfda <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dfd8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	69da      	ldr	r2, [r3, #28]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe2:	431a      	orrs	r2, r3
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	431a      	orrs	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfec:	ea42 0103 	orr.w	r1, r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68da      	ldr	r2, [r3, #12]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	430a      	orrs	r2, r1
 800dffa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e004:	431a      	orrs	r2, r3
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00a:	431a      	orrs	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	431a      	orrs	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	431a      	orrs	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	695b      	ldr	r3, [r3, #20]
 800e01c:	431a      	orrs	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6a1b      	ldr	r3, [r3, #32]
 800e022:	431a      	orrs	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	431a      	orrs	r2, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e02e:	431a      	orrs	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	431a      	orrs	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e03a:	ea42 0103 	orr.w	r1, r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	430a      	orrs	r2, r1
 800e048:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d113      	bne.n	800e07a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e064:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	689b      	ldr	r3, [r3, #8]
 800e06c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e078:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f022 0201 	bic.w	r2, r2, #1
 800e088:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00a      	beq.n	800e0ac <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	430a      	orrs	r2, r1
 800e0aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e0bc:	2300      	movs	r3, #0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3710      	adds	r7, #16
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	40013000 	.word	0x40013000
 800e0cc:	40003800 	.word	0x40003800
 800e0d0:	40003c00 	.word	0x40003c00

0800e0d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b085      	sub	sp, #20
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0e0:	095b      	lsrs	r3, r3, #5
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	3307      	adds	r3, #7
 800e0f2:	08db      	lsrs	r3, r3, #3
 800e0f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	fb02 f303 	mul.w	r3, r2, r3
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3714      	adds	r7, #20
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr

0800e10a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b082      	sub	sp, #8
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d101      	bne.n	800e11c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	e049      	b.n	800e1b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e122:	b2db      	uxtb	r3, r3
 800e124:	2b00      	cmp	r3, #0
 800e126:	d106      	bne.n	800e136 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7f9 fc0d 	bl	8007950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2202      	movs	r2, #2
 800e13a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	3304      	adds	r3, #4
 800e146:	4619      	mov	r1, r3
 800e148:	4610      	mov	r0, r2
 800e14a:	f000 fbbf 	bl	800e8cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2201      	movs	r2, #1
 800e152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2201      	movs	r2, #1
 800e162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2201      	movs	r2, #1
 800e16a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2201      	movs	r2, #1
 800e172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2201      	movs	r2, #1
 800e182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2201      	movs	r2, #1
 800e18a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2201      	movs	r2, #1
 800e192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2201      	movs	r2, #1
 800e19a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3708      	adds	r7, #8
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d101      	bne.n	800e1ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	e049      	b.n	800e25e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d106      	bne.n	800e1e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 f841 	bl	800e266 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2202      	movs	r2, #2
 800e1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	3304      	adds	r3, #4
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	4610      	mov	r0, r2
 800e1f8:	f000 fb68 	bl	800e8cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2201      	movs	r2, #1
 800e200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2201      	movs	r2, #1
 800e208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2201      	movs	r2, #1
 800e210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2201      	movs	r2, #1
 800e218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2201      	movs	r2, #1
 800e220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2201      	movs	r2, #1
 800e228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2201      	movs	r2, #1
 800e238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2201      	movs	r2, #1
 800e240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2201      	movs	r2, #1
 800e248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e266:	b480      	push	{r7}
 800e268:	b083      	sub	sp, #12
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e26e:	bf00      	nop
 800e270:	370c      	adds	r7, #12
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
	...

0800e27c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d109      	bne.n	800e2a0 <HAL_TIM_PWM_Start+0x24>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e292:	b2db      	uxtb	r3, r3
 800e294:	2b01      	cmp	r3, #1
 800e296:	bf14      	ite	ne
 800e298:	2301      	movne	r3, #1
 800e29a:	2300      	moveq	r3, #0
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	e03c      	b.n	800e31a <HAL_TIM_PWM_Start+0x9e>
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	2b04      	cmp	r3, #4
 800e2a4:	d109      	bne.n	800e2ba <HAL_TIM_PWM_Start+0x3e>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	bf14      	ite	ne
 800e2b2:	2301      	movne	r3, #1
 800e2b4:	2300      	moveq	r3, #0
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	e02f      	b.n	800e31a <HAL_TIM_PWM_Start+0x9e>
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	2b08      	cmp	r3, #8
 800e2be:	d109      	bne.n	800e2d4 <HAL_TIM_PWM_Start+0x58>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	bf14      	ite	ne
 800e2cc:	2301      	movne	r3, #1
 800e2ce:	2300      	moveq	r3, #0
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	e022      	b.n	800e31a <HAL_TIM_PWM_Start+0x9e>
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	2b0c      	cmp	r3, #12
 800e2d8:	d109      	bne.n	800e2ee <HAL_TIM_PWM_Start+0x72>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	bf14      	ite	ne
 800e2e6:	2301      	movne	r3, #1
 800e2e8:	2300      	moveq	r3, #0
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	e015      	b.n	800e31a <HAL_TIM_PWM_Start+0x9e>
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	2b10      	cmp	r3, #16
 800e2f2:	d109      	bne.n	800e308 <HAL_TIM_PWM_Start+0x8c>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	bf14      	ite	ne
 800e300:	2301      	movne	r3, #1
 800e302:	2300      	moveq	r3, #0
 800e304:	b2db      	uxtb	r3, r3
 800e306:	e008      	b.n	800e31a <HAL_TIM_PWM_Start+0x9e>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	2b01      	cmp	r3, #1
 800e312:	bf14      	ite	ne
 800e314:	2301      	movne	r3, #1
 800e316:	2300      	moveq	r3, #0
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d001      	beq.n	800e322 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	e0ab      	b.n	800e47a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d104      	bne.n	800e332 <HAL_TIM_PWM_Start+0xb6>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2202      	movs	r2, #2
 800e32c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e330:	e023      	b.n	800e37a <HAL_TIM_PWM_Start+0xfe>
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	2b04      	cmp	r3, #4
 800e336:	d104      	bne.n	800e342 <HAL_TIM_PWM_Start+0xc6>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2202      	movs	r2, #2
 800e33c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e340:	e01b      	b.n	800e37a <HAL_TIM_PWM_Start+0xfe>
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	2b08      	cmp	r3, #8
 800e346:	d104      	bne.n	800e352 <HAL_TIM_PWM_Start+0xd6>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2202      	movs	r2, #2
 800e34c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e350:	e013      	b.n	800e37a <HAL_TIM_PWM_Start+0xfe>
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	2b0c      	cmp	r3, #12
 800e356:	d104      	bne.n	800e362 <HAL_TIM_PWM_Start+0xe6>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2202      	movs	r2, #2
 800e35c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e360:	e00b      	b.n	800e37a <HAL_TIM_PWM_Start+0xfe>
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	2b10      	cmp	r3, #16
 800e366:	d104      	bne.n	800e372 <HAL_TIM_PWM_Start+0xf6>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2202      	movs	r2, #2
 800e36c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e370:	e003      	b.n	800e37a <HAL_TIM_PWM_Start+0xfe>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2202      	movs	r2, #2
 800e376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2201      	movs	r2, #1
 800e380:	6839      	ldr	r1, [r7, #0]
 800e382:	4618      	mov	r0, r3
 800e384:	f000 febc 	bl	800f100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a3d      	ldr	r2, [pc, #244]	; (800e484 <HAL_TIM_PWM_Start+0x208>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d013      	beq.n	800e3ba <HAL_TIM_PWM_Start+0x13e>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a3c      	ldr	r2, [pc, #240]	; (800e488 <HAL_TIM_PWM_Start+0x20c>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d00e      	beq.n	800e3ba <HAL_TIM_PWM_Start+0x13e>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a3a      	ldr	r2, [pc, #232]	; (800e48c <HAL_TIM_PWM_Start+0x210>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d009      	beq.n	800e3ba <HAL_TIM_PWM_Start+0x13e>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a39      	ldr	r2, [pc, #228]	; (800e490 <HAL_TIM_PWM_Start+0x214>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d004      	beq.n	800e3ba <HAL_TIM_PWM_Start+0x13e>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a37      	ldr	r2, [pc, #220]	; (800e494 <HAL_TIM_PWM_Start+0x218>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d101      	bne.n	800e3be <HAL_TIM_PWM_Start+0x142>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e000      	b.n	800e3c0 <HAL_TIM_PWM_Start+0x144>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d007      	beq.n	800e3d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e3d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4a2a      	ldr	r2, [pc, #168]	; (800e484 <HAL_TIM_PWM_Start+0x208>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d02c      	beq.n	800e438 <HAL_TIM_PWM_Start+0x1bc>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3e6:	d027      	beq.n	800e438 <HAL_TIM_PWM_Start+0x1bc>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a2a      	ldr	r2, [pc, #168]	; (800e498 <HAL_TIM_PWM_Start+0x21c>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d022      	beq.n	800e438 <HAL_TIM_PWM_Start+0x1bc>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a29      	ldr	r2, [pc, #164]	; (800e49c <HAL_TIM_PWM_Start+0x220>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d01d      	beq.n	800e438 <HAL_TIM_PWM_Start+0x1bc>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a27      	ldr	r2, [pc, #156]	; (800e4a0 <HAL_TIM_PWM_Start+0x224>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d018      	beq.n	800e438 <HAL_TIM_PWM_Start+0x1bc>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a1f      	ldr	r2, [pc, #124]	; (800e488 <HAL_TIM_PWM_Start+0x20c>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d013      	beq.n	800e438 <HAL_TIM_PWM_Start+0x1bc>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a23      	ldr	r2, [pc, #140]	; (800e4a4 <HAL_TIM_PWM_Start+0x228>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d00e      	beq.n	800e438 <HAL_TIM_PWM_Start+0x1bc>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4a1b      	ldr	r2, [pc, #108]	; (800e48c <HAL_TIM_PWM_Start+0x210>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d009      	beq.n	800e438 <HAL_TIM_PWM_Start+0x1bc>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a1f      	ldr	r2, [pc, #124]	; (800e4a8 <HAL_TIM_PWM_Start+0x22c>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d004      	beq.n	800e438 <HAL_TIM_PWM_Start+0x1bc>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4a1e      	ldr	r2, [pc, #120]	; (800e4ac <HAL_TIM_PWM_Start+0x230>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d115      	bne.n	800e464 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	689a      	ldr	r2, [r3, #8]
 800e43e:	4b1c      	ldr	r3, [pc, #112]	; (800e4b0 <HAL_TIM_PWM_Start+0x234>)
 800e440:	4013      	ands	r3, r2
 800e442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2b06      	cmp	r3, #6
 800e448:	d015      	beq.n	800e476 <HAL_TIM_PWM_Start+0x1fa>
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e450:	d011      	beq.n	800e476 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f042 0201 	orr.w	r2, r2, #1
 800e460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e462:	e008      	b.n	800e476 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f042 0201 	orr.w	r2, r2, #1
 800e472:	601a      	str	r2, [r3, #0]
 800e474:	e000      	b.n	800e478 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e476:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e478:	2300      	movs	r3, #0
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3710      	adds	r7, #16
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	40010000 	.word	0x40010000
 800e488:	40010400 	.word	0x40010400
 800e48c:	40014000 	.word	0x40014000
 800e490:	40014400 	.word	0x40014400
 800e494:	40014800 	.word	0x40014800
 800e498:	40000400 	.word	0x40000400
 800e49c:	40000800 	.word	0x40000800
 800e4a0:	40000c00 	.word	0x40000c00
 800e4a4:	40001800 	.word	0x40001800
 800e4a8:	4000e000 	.word	0x4000e000
 800e4ac:	4000e400 	.word	0x4000e400
 800e4b0:	00010007 	.word	0x00010007

0800e4b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d101      	bne.n	800e4d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e4ce:	2302      	movs	r3, #2
 800e4d0:	e0ff      	b.n	800e6d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2b14      	cmp	r3, #20
 800e4de:	f200 80f0 	bhi.w	800e6c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e4e2:	a201      	add	r2, pc, #4	; (adr r2, 800e4e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e8:	0800e53d 	.word	0x0800e53d
 800e4ec:	0800e6c3 	.word	0x0800e6c3
 800e4f0:	0800e6c3 	.word	0x0800e6c3
 800e4f4:	0800e6c3 	.word	0x0800e6c3
 800e4f8:	0800e57d 	.word	0x0800e57d
 800e4fc:	0800e6c3 	.word	0x0800e6c3
 800e500:	0800e6c3 	.word	0x0800e6c3
 800e504:	0800e6c3 	.word	0x0800e6c3
 800e508:	0800e5bf 	.word	0x0800e5bf
 800e50c:	0800e6c3 	.word	0x0800e6c3
 800e510:	0800e6c3 	.word	0x0800e6c3
 800e514:	0800e6c3 	.word	0x0800e6c3
 800e518:	0800e5ff 	.word	0x0800e5ff
 800e51c:	0800e6c3 	.word	0x0800e6c3
 800e520:	0800e6c3 	.word	0x0800e6c3
 800e524:	0800e6c3 	.word	0x0800e6c3
 800e528:	0800e641 	.word	0x0800e641
 800e52c:	0800e6c3 	.word	0x0800e6c3
 800e530:	0800e6c3 	.word	0x0800e6c3
 800e534:	0800e6c3 	.word	0x0800e6c3
 800e538:	0800e681 	.word	0x0800e681
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	68b9      	ldr	r1, [r7, #8]
 800e542:	4618      	mov	r0, r3
 800e544:	f000 fa68 	bl	800ea18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	699a      	ldr	r2, [r3, #24]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f042 0208 	orr.w	r2, r2, #8
 800e556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	699a      	ldr	r2, [r3, #24]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f022 0204 	bic.w	r2, r2, #4
 800e566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	6999      	ldr	r1, [r3, #24]
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	691a      	ldr	r2, [r3, #16]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	430a      	orrs	r2, r1
 800e578:	619a      	str	r2, [r3, #24]
      break;
 800e57a:	e0a5      	b.n	800e6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	68b9      	ldr	r1, [r7, #8]
 800e582:	4618      	mov	r0, r3
 800e584:	f000 fad8 	bl	800eb38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	699a      	ldr	r2, [r3, #24]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	699a      	ldr	r2, [r3, #24]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	6999      	ldr	r1, [r3, #24]
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	691b      	ldr	r3, [r3, #16]
 800e5b2:	021a      	lsls	r2, r3, #8
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	430a      	orrs	r2, r1
 800e5ba:	619a      	str	r2, [r3, #24]
      break;
 800e5bc:	e084      	b.n	800e6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	68b9      	ldr	r1, [r7, #8]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f000 fb41 	bl	800ec4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	69da      	ldr	r2, [r3, #28]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f042 0208 	orr.w	r2, r2, #8
 800e5d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	69da      	ldr	r2, [r3, #28]
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f022 0204 	bic.w	r2, r2, #4
 800e5e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	69d9      	ldr	r1, [r3, #28]
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	691a      	ldr	r2, [r3, #16]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	430a      	orrs	r2, r1
 800e5fa:	61da      	str	r2, [r3, #28]
      break;
 800e5fc:	e064      	b.n	800e6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	68b9      	ldr	r1, [r7, #8]
 800e604:	4618      	mov	r0, r3
 800e606:	f000 fba9 	bl	800ed5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	69da      	ldr	r2, [r3, #28]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	69da      	ldr	r2, [r3, #28]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	69d9      	ldr	r1, [r3, #28]
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	691b      	ldr	r3, [r3, #16]
 800e634:	021a      	lsls	r2, r3, #8
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	430a      	orrs	r2, r1
 800e63c:	61da      	str	r2, [r3, #28]
      break;
 800e63e:	e043      	b.n	800e6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	68b9      	ldr	r1, [r7, #8]
 800e646:	4618      	mov	r0, r3
 800e648:	f000 fbf2 	bl	800ee30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f042 0208 	orr.w	r2, r2, #8
 800e65a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f022 0204 	bic.w	r2, r2, #4
 800e66a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	691a      	ldr	r2, [r3, #16]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	430a      	orrs	r2, r1
 800e67c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e67e:	e023      	b.n	800e6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	68b9      	ldr	r1, [r7, #8]
 800e686:	4618      	mov	r0, r3
 800e688:	f000 fc36 	bl	800eef8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e69a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	691b      	ldr	r3, [r3, #16]
 800e6b6:	021a      	lsls	r2, r3, #8
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	430a      	orrs	r2, r1
 800e6be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e6c0:	e002      	b.n	800e6c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	75fb      	strb	r3, [r7, #23]
      break;
 800e6c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3718      	adds	r7, #24
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop

0800e6dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d101      	bne.n	800e6f8 <HAL_TIM_ConfigClockSource+0x1c>
 800e6f4:	2302      	movs	r3, #2
 800e6f6:	e0dc      	b.n	800e8b2 <HAL_TIM_ConfigClockSource+0x1d6>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2202      	movs	r2, #2
 800e704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e710:	68ba      	ldr	r2, [r7, #8]
 800e712:	4b6a      	ldr	r3, [pc, #424]	; (800e8bc <HAL_TIM_ConfigClockSource+0x1e0>)
 800e714:	4013      	ands	r3, r2
 800e716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e71e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4a64      	ldr	r2, [pc, #400]	; (800e8c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	f000 80a9 	beq.w	800e886 <HAL_TIM_ConfigClockSource+0x1aa>
 800e734:	4a62      	ldr	r2, [pc, #392]	; (800e8c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e736:	4293      	cmp	r3, r2
 800e738:	f200 80ae 	bhi.w	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e73c:	4a61      	ldr	r2, [pc, #388]	; (800e8c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	f000 80a1 	beq.w	800e886 <HAL_TIM_ConfigClockSource+0x1aa>
 800e744:	4a5f      	ldr	r2, [pc, #380]	; (800e8c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e746:	4293      	cmp	r3, r2
 800e748:	f200 80a6 	bhi.w	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e74c:	4a5e      	ldr	r2, [pc, #376]	; (800e8c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	f000 8099 	beq.w	800e886 <HAL_TIM_ConfigClockSource+0x1aa>
 800e754:	4a5c      	ldr	r2, [pc, #368]	; (800e8c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e756:	4293      	cmp	r3, r2
 800e758:	f200 809e 	bhi.w	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e75c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e760:	f000 8091 	beq.w	800e886 <HAL_TIM_ConfigClockSource+0x1aa>
 800e764:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e768:	f200 8096 	bhi.w	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e76c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e770:	f000 8089 	beq.w	800e886 <HAL_TIM_ConfigClockSource+0x1aa>
 800e774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e778:	f200 808e 	bhi.w	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e77c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e780:	d03e      	beq.n	800e800 <HAL_TIM_ConfigClockSource+0x124>
 800e782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e786:	f200 8087 	bhi.w	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e78a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e78e:	f000 8086 	beq.w	800e89e <HAL_TIM_ConfigClockSource+0x1c2>
 800e792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e796:	d87f      	bhi.n	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e798:	2b70      	cmp	r3, #112	; 0x70
 800e79a:	d01a      	beq.n	800e7d2 <HAL_TIM_ConfigClockSource+0xf6>
 800e79c:	2b70      	cmp	r3, #112	; 0x70
 800e79e:	d87b      	bhi.n	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e7a0:	2b60      	cmp	r3, #96	; 0x60
 800e7a2:	d050      	beq.n	800e846 <HAL_TIM_ConfigClockSource+0x16a>
 800e7a4:	2b60      	cmp	r3, #96	; 0x60
 800e7a6:	d877      	bhi.n	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e7a8:	2b50      	cmp	r3, #80	; 0x50
 800e7aa:	d03c      	beq.n	800e826 <HAL_TIM_ConfigClockSource+0x14a>
 800e7ac:	2b50      	cmp	r3, #80	; 0x50
 800e7ae:	d873      	bhi.n	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e7b0:	2b40      	cmp	r3, #64	; 0x40
 800e7b2:	d058      	beq.n	800e866 <HAL_TIM_ConfigClockSource+0x18a>
 800e7b4:	2b40      	cmp	r3, #64	; 0x40
 800e7b6:	d86f      	bhi.n	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e7b8:	2b30      	cmp	r3, #48	; 0x30
 800e7ba:	d064      	beq.n	800e886 <HAL_TIM_ConfigClockSource+0x1aa>
 800e7bc:	2b30      	cmp	r3, #48	; 0x30
 800e7be:	d86b      	bhi.n	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e7c0:	2b20      	cmp	r3, #32
 800e7c2:	d060      	beq.n	800e886 <HAL_TIM_ConfigClockSource+0x1aa>
 800e7c4:	2b20      	cmp	r3, #32
 800e7c6:	d867      	bhi.n	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d05c      	beq.n	800e886 <HAL_TIM_ConfigClockSource+0x1aa>
 800e7cc:	2b10      	cmp	r3, #16
 800e7ce:	d05a      	beq.n	800e886 <HAL_TIM_ConfigClockSource+0x1aa>
 800e7d0:	e062      	b.n	800e898 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6818      	ldr	r0, [r3, #0]
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	6899      	ldr	r1, [r3, #8]
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	f000 fc6d 	bl	800f0c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e7f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	609a      	str	r2, [r3, #8]
      break;
 800e7fe:	e04f      	b.n	800e8a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6818      	ldr	r0, [r3, #0]
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	6899      	ldr	r1, [r3, #8]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	685a      	ldr	r2, [r3, #4]
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	f000 fc56 	bl	800f0c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	689a      	ldr	r2, [r3, #8]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e822:	609a      	str	r2, [r3, #8]
      break;
 800e824:	e03c      	b.n	800e8a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6818      	ldr	r0, [r3, #0]
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	6859      	ldr	r1, [r3, #4]
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	461a      	mov	r2, r3
 800e834:	f000 fbc6 	bl	800efc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2150      	movs	r1, #80	; 0x50
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 fc20 	bl	800f084 <TIM_ITRx_SetConfig>
      break;
 800e844:	e02c      	b.n	800e8a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6818      	ldr	r0, [r3, #0]
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	6859      	ldr	r1, [r3, #4]
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	461a      	mov	r2, r3
 800e854:	f000 fbe5 	bl	800f022 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2160      	movs	r1, #96	; 0x60
 800e85e:	4618      	mov	r0, r3
 800e860:	f000 fc10 	bl	800f084 <TIM_ITRx_SetConfig>
      break;
 800e864:	e01c      	b.n	800e8a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6818      	ldr	r0, [r3, #0]
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	6859      	ldr	r1, [r3, #4]
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	461a      	mov	r2, r3
 800e874:	f000 fba6 	bl	800efc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2140      	movs	r1, #64	; 0x40
 800e87e:	4618      	mov	r0, r3
 800e880:	f000 fc00 	bl	800f084 <TIM_ITRx_SetConfig>
      break;
 800e884:	e00c      	b.n	800e8a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4619      	mov	r1, r3
 800e890:	4610      	mov	r0, r2
 800e892:	f000 fbf7 	bl	800f084 <TIM_ITRx_SetConfig>
      break;
 800e896:	e003      	b.n	800e8a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e898:	2301      	movs	r3, #1
 800e89a:	73fb      	strb	r3, [r7, #15]
      break;
 800e89c:	e000      	b.n	800e8a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e89e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	ffceff88 	.word	0xffceff88
 800e8c0:	00100040 	.word	0x00100040
 800e8c4:	00100030 	.word	0x00100030
 800e8c8:	00100020 	.word	0x00100020

0800e8cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b085      	sub	sp, #20
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4a44      	ldr	r2, [pc, #272]	; (800e9f0 <TIM_Base_SetConfig+0x124>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d013      	beq.n	800e90c <TIM_Base_SetConfig+0x40>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8ea:	d00f      	beq.n	800e90c <TIM_Base_SetConfig+0x40>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4a41      	ldr	r2, [pc, #260]	; (800e9f4 <TIM_Base_SetConfig+0x128>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d00b      	beq.n	800e90c <TIM_Base_SetConfig+0x40>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	4a40      	ldr	r2, [pc, #256]	; (800e9f8 <TIM_Base_SetConfig+0x12c>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d007      	beq.n	800e90c <TIM_Base_SetConfig+0x40>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	4a3f      	ldr	r2, [pc, #252]	; (800e9fc <TIM_Base_SetConfig+0x130>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d003      	beq.n	800e90c <TIM_Base_SetConfig+0x40>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4a3e      	ldr	r2, [pc, #248]	; (800ea00 <TIM_Base_SetConfig+0x134>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d108      	bne.n	800e91e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	4313      	orrs	r3, r2
 800e91c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	4a33      	ldr	r2, [pc, #204]	; (800e9f0 <TIM_Base_SetConfig+0x124>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d027      	beq.n	800e976 <TIM_Base_SetConfig+0xaa>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e92c:	d023      	beq.n	800e976 <TIM_Base_SetConfig+0xaa>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4a30      	ldr	r2, [pc, #192]	; (800e9f4 <TIM_Base_SetConfig+0x128>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d01f      	beq.n	800e976 <TIM_Base_SetConfig+0xaa>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4a2f      	ldr	r2, [pc, #188]	; (800e9f8 <TIM_Base_SetConfig+0x12c>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d01b      	beq.n	800e976 <TIM_Base_SetConfig+0xaa>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4a2e      	ldr	r2, [pc, #184]	; (800e9fc <TIM_Base_SetConfig+0x130>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d017      	beq.n	800e976 <TIM_Base_SetConfig+0xaa>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a2d      	ldr	r2, [pc, #180]	; (800ea00 <TIM_Base_SetConfig+0x134>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d013      	beq.n	800e976 <TIM_Base_SetConfig+0xaa>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4a2c      	ldr	r2, [pc, #176]	; (800ea04 <TIM_Base_SetConfig+0x138>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d00f      	beq.n	800e976 <TIM_Base_SetConfig+0xaa>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4a2b      	ldr	r2, [pc, #172]	; (800ea08 <TIM_Base_SetConfig+0x13c>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d00b      	beq.n	800e976 <TIM_Base_SetConfig+0xaa>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a2a      	ldr	r2, [pc, #168]	; (800ea0c <TIM_Base_SetConfig+0x140>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d007      	beq.n	800e976 <TIM_Base_SetConfig+0xaa>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a29      	ldr	r2, [pc, #164]	; (800ea10 <TIM_Base_SetConfig+0x144>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d003      	beq.n	800e976 <TIM_Base_SetConfig+0xaa>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a28      	ldr	r2, [pc, #160]	; (800ea14 <TIM_Base_SetConfig+0x148>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d108      	bne.n	800e988 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e97c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	4313      	orrs	r3, r2
 800e986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	695b      	ldr	r3, [r3, #20]
 800e992:	4313      	orrs	r3, r2
 800e994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	689a      	ldr	r2, [r3, #8]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4a10      	ldr	r2, [pc, #64]	; (800e9f0 <TIM_Base_SetConfig+0x124>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d00f      	beq.n	800e9d4 <TIM_Base_SetConfig+0x108>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	4a12      	ldr	r2, [pc, #72]	; (800ea00 <TIM_Base_SetConfig+0x134>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d00b      	beq.n	800e9d4 <TIM_Base_SetConfig+0x108>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	4a11      	ldr	r2, [pc, #68]	; (800ea04 <TIM_Base_SetConfig+0x138>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d007      	beq.n	800e9d4 <TIM_Base_SetConfig+0x108>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4a10      	ldr	r2, [pc, #64]	; (800ea08 <TIM_Base_SetConfig+0x13c>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d003      	beq.n	800e9d4 <TIM_Base_SetConfig+0x108>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4a0f      	ldr	r2, [pc, #60]	; (800ea0c <TIM_Base_SetConfig+0x140>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d103      	bne.n	800e9dc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	691a      	ldr	r2, [r3, #16]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	615a      	str	r2, [r3, #20]
}
 800e9e2:	bf00      	nop
 800e9e4:	3714      	adds	r7, #20
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	40010000 	.word	0x40010000
 800e9f4:	40000400 	.word	0x40000400
 800e9f8:	40000800 	.word	0x40000800
 800e9fc:	40000c00 	.word	0x40000c00
 800ea00:	40010400 	.word	0x40010400
 800ea04:	40014000 	.word	0x40014000
 800ea08:	40014400 	.word	0x40014400
 800ea0c:	40014800 	.word	0x40014800
 800ea10:	4000e000 	.word	0x4000e000
 800ea14:	4000e400 	.word	0x4000e400

0800ea18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b087      	sub	sp, #28
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6a1b      	ldr	r3, [r3, #32]
 800ea26:	f023 0201 	bic.w	r2, r3, #1
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a1b      	ldr	r3, [r3, #32]
 800ea32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	699b      	ldr	r3, [r3, #24]
 800ea3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	4b37      	ldr	r3, [pc, #220]	; (800eb20 <TIM_OC1_SetConfig+0x108>)
 800ea44:	4013      	ands	r3, r2
 800ea46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f023 0303 	bic.w	r3, r3, #3
 800ea4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	4313      	orrs	r3, r2
 800ea58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	f023 0302 	bic.w	r3, r3, #2
 800ea60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	697a      	ldr	r2, [r7, #20]
 800ea68:	4313      	orrs	r3, r2
 800ea6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a2d      	ldr	r2, [pc, #180]	; (800eb24 <TIM_OC1_SetConfig+0x10c>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d00f      	beq.n	800ea94 <TIM_OC1_SetConfig+0x7c>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4a2c      	ldr	r2, [pc, #176]	; (800eb28 <TIM_OC1_SetConfig+0x110>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d00b      	beq.n	800ea94 <TIM_OC1_SetConfig+0x7c>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a2b      	ldr	r2, [pc, #172]	; (800eb2c <TIM_OC1_SetConfig+0x114>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d007      	beq.n	800ea94 <TIM_OC1_SetConfig+0x7c>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4a2a      	ldr	r2, [pc, #168]	; (800eb30 <TIM_OC1_SetConfig+0x118>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d003      	beq.n	800ea94 <TIM_OC1_SetConfig+0x7c>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4a29      	ldr	r2, [pc, #164]	; (800eb34 <TIM_OC1_SetConfig+0x11c>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d10c      	bne.n	800eaae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	f023 0308 	bic.w	r3, r3, #8
 800ea9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	697a      	ldr	r2, [r7, #20]
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	f023 0304 	bic.w	r3, r3, #4
 800eaac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a1c      	ldr	r2, [pc, #112]	; (800eb24 <TIM_OC1_SetConfig+0x10c>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d00f      	beq.n	800ead6 <TIM_OC1_SetConfig+0xbe>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4a1b      	ldr	r2, [pc, #108]	; (800eb28 <TIM_OC1_SetConfig+0x110>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d00b      	beq.n	800ead6 <TIM_OC1_SetConfig+0xbe>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a1a      	ldr	r2, [pc, #104]	; (800eb2c <TIM_OC1_SetConfig+0x114>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d007      	beq.n	800ead6 <TIM_OC1_SetConfig+0xbe>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a19      	ldr	r2, [pc, #100]	; (800eb30 <TIM_OC1_SetConfig+0x118>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d003      	beq.n	800ead6 <TIM_OC1_SetConfig+0xbe>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a18      	ldr	r2, [pc, #96]	; (800eb34 <TIM_OC1_SetConfig+0x11c>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d111      	bne.n	800eafa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eadc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	693a      	ldr	r2, [r7, #16]
 800eaec:	4313      	orrs	r3, r2
 800eaee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	699b      	ldr	r3, [r3, #24]
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	693a      	ldr	r2, [r7, #16]
 800eafe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	685a      	ldr	r2, [r3, #4]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	697a      	ldr	r2, [r7, #20]
 800eb12:	621a      	str	r2, [r3, #32]
}
 800eb14:	bf00      	nop
 800eb16:	371c      	adds	r7, #28
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr
 800eb20:	fffeff8f 	.word	0xfffeff8f
 800eb24:	40010000 	.word	0x40010000
 800eb28:	40010400 	.word	0x40010400
 800eb2c:	40014000 	.word	0x40014000
 800eb30:	40014400 	.word	0x40014400
 800eb34:	40014800 	.word	0x40014800

0800eb38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6a1b      	ldr	r3, [r3, #32]
 800eb46:	f023 0210 	bic.w	r2, r3, #16
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6a1b      	ldr	r3, [r3, #32]
 800eb52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	699b      	ldr	r3, [r3, #24]
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	4b34      	ldr	r3, [pc, #208]	; (800ec34 <TIM_OC2_SetConfig+0xfc>)
 800eb64:	4013      	ands	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	021b      	lsls	r3, r3, #8
 800eb76:	68fa      	ldr	r2, [r7, #12]
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	f023 0320 	bic.w	r3, r3, #32
 800eb82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	011b      	lsls	r3, r3, #4
 800eb8a:	697a      	ldr	r2, [r7, #20]
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4a29      	ldr	r2, [pc, #164]	; (800ec38 <TIM_OC2_SetConfig+0x100>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d003      	beq.n	800eba0 <TIM_OC2_SetConfig+0x68>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	4a28      	ldr	r2, [pc, #160]	; (800ec3c <TIM_OC2_SetConfig+0x104>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d10d      	bne.n	800ebbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	011b      	lsls	r3, r3, #4
 800ebae:	697a      	ldr	r2, [r7, #20]
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	4a1e      	ldr	r2, [pc, #120]	; (800ec38 <TIM_OC2_SetConfig+0x100>)
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d00f      	beq.n	800ebe4 <TIM_OC2_SetConfig+0xac>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	4a1d      	ldr	r2, [pc, #116]	; (800ec3c <TIM_OC2_SetConfig+0x104>)
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d00b      	beq.n	800ebe4 <TIM_OC2_SetConfig+0xac>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	4a1c      	ldr	r2, [pc, #112]	; (800ec40 <TIM_OC2_SetConfig+0x108>)
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d007      	beq.n	800ebe4 <TIM_OC2_SetConfig+0xac>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	4a1b      	ldr	r2, [pc, #108]	; (800ec44 <TIM_OC2_SetConfig+0x10c>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d003      	beq.n	800ebe4 <TIM_OC2_SetConfig+0xac>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	4a1a      	ldr	r2, [pc, #104]	; (800ec48 <TIM_OC2_SetConfig+0x110>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d113      	bne.n	800ec0c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ebea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	695b      	ldr	r3, [r3, #20]
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	4313      	orrs	r3, r2
 800ebfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	699b      	ldr	r3, [r3, #24]
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	693a      	ldr	r2, [r7, #16]
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	693a      	ldr	r2, [r7, #16]
 800ec10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	685a      	ldr	r2, [r3, #4]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	697a      	ldr	r2, [r7, #20]
 800ec24:	621a      	str	r2, [r3, #32]
}
 800ec26:	bf00      	nop
 800ec28:	371c      	adds	r7, #28
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	feff8fff 	.word	0xfeff8fff
 800ec38:	40010000 	.word	0x40010000
 800ec3c:	40010400 	.word	0x40010400
 800ec40:	40014000 	.word	0x40014000
 800ec44:	40014400 	.word	0x40014400
 800ec48:	40014800 	.word	0x40014800

0800ec4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b087      	sub	sp, #28
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6a1b      	ldr	r3, [r3, #32]
 800ec5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a1b      	ldr	r3, [r3, #32]
 800ec66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	69db      	ldr	r3, [r3, #28]
 800ec72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	4b33      	ldr	r3, [pc, #204]	; (800ed44 <TIM_OC3_SetConfig+0xf8>)
 800ec78:	4013      	ands	r3, r2
 800ec7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f023 0303 	bic.w	r3, r3, #3
 800ec82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	021b      	lsls	r3, r3, #8
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4a28      	ldr	r2, [pc, #160]	; (800ed48 <TIM_OC3_SetConfig+0xfc>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d003      	beq.n	800ecb2 <TIM_OC3_SetConfig+0x66>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4a27      	ldr	r2, [pc, #156]	; (800ed4c <TIM_OC3_SetConfig+0x100>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d10d      	bne.n	800ecce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ecb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	021b      	lsls	r3, r3, #8
 800ecc0:	697a      	ldr	r2, [r7, #20]
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4a1d      	ldr	r2, [pc, #116]	; (800ed48 <TIM_OC3_SetConfig+0xfc>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d00f      	beq.n	800ecf6 <TIM_OC3_SetConfig+0xaa>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	4a1c      	ldr	r2, [pc, #112]	; (800ed4c <TIM_OC3_SetConfig+0x100>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d00b      	beq.n	800ecf6 <TIM_OC3_SetConfig+0xaa>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4a1b      	ldr	r2, [pc, #108]	; (800ed50 <TIM_OC3_SetConfig+0x104>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d007      	beq.n	800ecf6 <TIM_OC3_SetConfig+0xaa>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	4a1a      	ldr	r2, [pc, #104]	; (800ed54 <TIM_OC3_SetConfig+0x108>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d003      	beq.n	800ecf6 <TIM_OC3_SetConfig+0xaa>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	4a19      	ldr	r2, [pc, #100]	; (800ed58 <TIM_OC3_SetConfig+0x10c>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d113      	bne.n	800ed1e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ecfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ed04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	011b      	lsls	r3, r3, #4
 800ed0c:	693a      	ldr	r2, [r7, #16]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	699b      	ldr	r3, [r3, #24]
 800ed16:	011b      	lsls	r3, r3, #4
 800ed18:	693a      	ldr	r2, [r7, #16]
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	693a      	ldr	r2, [r7, #16]
 800ed22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	68fa      	ldr	r2, [r7, #12]
 800ed28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	685a      	ldr	r2, [r3, #4]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	697a      	ldr	r2, [r7, #20]
 800ed36:	621a      	str	r2, [r3, #32]
}
 800ed38:	bf00      	nop
 800ed3a:	371c      	adds	r7, #28
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr
 800ed44:	fffeff8f 	.word	0xfffeff8f
 800ed48:	40010000 	.word	0x40010000
 800ed4c:	40010400 	.word	0x40010400
 800ed50:	40014000 	.word	0x40014000
 800ed54:	40014400 	.word	0x40014400
 800ed58:	40014800 	.word	0x40014800

0800ed5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b087      	sub	sp, #28
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6a1b      	ldr	r3, [r3, #32]
 800ed6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6a1b      	ldr	r3, [r3, #32]
 800ed76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	69db      	ldr	r3, [r3, #28]
 800ed82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	4b24      	ldr	r3, [pc, #144]	; (800ee18 <TIM_OC4_SetConfig+0xbc>)
 800ed88:	4013      	ands	r3, r2
 800ed8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	021b      	lsls	r3, r3, #8
 800ed9a:	68fa      	ldr	r2, [r7, #12]
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eda6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	031b      	lsls	r3, r3, #12
 800edae:	693a      	ldr	r2, [r7, #16]
 800edb0:	4313      	orrs	r3, r2
 800edb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4a19      	ldr	r2, [pc, #100]	; (800ee1c <TIM_OC4_SetConfig+0xc0>)
 800edb8:	4293      	cmp	r3, r2
 800edba:	d00f      	beq.n	800eddc <TIM_OC4_SetConfig+0x80>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	4a18      	ldr	r2, [pc, #96]	; (800ee20 <TIM_OC4_SetConfig+0xc4>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d00b      	beq.n	800eddc <TIM_OC4_SetConfig+0x80>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4a17      	ldr	r2, [pc, #92]	; (800ee24 <TIM_OC4_SetConfig+0xc8>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d007      	beq.n	800eddc <TIM_OC4_SetConfig+0x80>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4a16      	ldr	r2, [pc, #88]	; (800ee28 <TIM_OC4_SetConfig+0xcc>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d003      	beq.n	800eddc <TIM_OC4_SetConfig+0x80>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4a15      	ldr	r2, [pc, #84]	; (800ee2c <TIM_OC4_SetConfig+0xd0>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d109      	bne.n	800edf0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ede2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	695b      	ldr	r3, [r3, #20]
 800ede8:	019b      	lsls	r3, r3, #6
 800edea:	697a      	ldr	r2, [r7, #20]
 800edec:	4313      	orrs	r3, r2
 800edee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	697a      	ldr	r2, [r7, #20]
 800edf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	685a      	ldr	r2, [r3, #4]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	693a      	ldr	r2, [r7, #16]
 800ee08:	621a      	str	r2, [r3, #32]
}
 800ee0a:	bf00      	nop
 800ee0c:	371c      	adds	r7, #28
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr
 800ee16:	bf00      	nop
 800ee18:	feff8fff 	.word	0xfeff8fff
 800ee1c:	40010000 	.word	0x40010000
 800ee20:	40010400 	.word	0x40010400
 800ee24:	40014000 	.word	0x40014000
 800ee28:	40014400 	.word	0x40014400
 800ee2c:	40014800 	.word	0x40014800

0800ee30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b087      	sub	sp, #28
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6a1b      	ldr	r3, [r3, #32]
 800ee3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6a1b      	ldr	r3, [r3, #32]
 800ee4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	4b21      	ldr	r3, [pc, #132]	; (800eee0 <TIM_OC5_SetConfig+0xb0>)
 800ee5c:	4013      	ands	r3, r2
 800ee5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	68fa      	ldr	r2, [r7, #12]
 800ee66:	4313      	orrs	r3, r2
 800ee68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ee70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	689b      	ldr	r3, [r3, #8]
 800ee76:	041b      	lsls	r3, r3, #16
 800ee78:	693a      	ldr	r2, [r7, #16]
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4a18      	ldr	r2, [pc, #96]	; (800eee4 <TIM_OC5_SetConfig+0xb4>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d00f      	beq.n	800eea6 <TIM_OC5_SetConfig+0x76>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	4a17      	ldr	r2, [pc, #92]	; (800eee8 <TIM_OC5_SetConfig+0xb8>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d00b      	beq.n	800eea6 <TIM_OC5_SetConfig+0x76>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	4a16      	ldr	r2, [pc, #88]	; (800eeec <TIM_OC5_SetConfig+0xbc>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d007      	beq.n	800eea6 <TIM_OC5_SetConfig+0x76>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	4a15      	ldr	r2, [pc, #84]	; (800eef0 <TIM_OC5_SetConfig+0xc0>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d003      	beq.n	800eea6 <TIM_OC5_SetConfig+0x76>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	4a14      	ldr	r2, [pc, #80]	; (800eef4 <TIM_OC5_SetConfig+0xc4>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d109      	bne.n	800eeba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eeac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	695b      	ldr	r3, [r3, #20]
 800eeb2:	021b      	lsls	r3, r3, #8
 800eeb4:	697a      	ldr	r2, [r7, #20]
 800eeb6:	4313      	orrs	r3, r2
 800eeb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	697a      	ldr	r2, [r7, #20]
 800eebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	68fa      	ldr	r2, [r7, #12]
 800eec4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	685a      	ldr	r2, [r3, #4]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	693a      	ldr	r2, [r7, #16]
 800eed2:	621a      	str	r2, [r3, #32]
}
 800eed4:	bf00      	nop
 800eed6:	371c      	adds	r7, #28
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	fffeff8f 	.word	0xfffeff8f
 800eee4:	40010000 	.word	0x40010000
 800eee8:	40010400 	.word	0x40010400
 800eeec:	40014000 	.word	0x40014000
 800eef0:	40014400 	.word	0x40014400
 800eef4:	40014800 	.word	0x40014800

0800eef8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b087      	sub	sp, #28
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6a1b      	ldr	r3, [r3, #32]
 800ef06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6a1b      	ldr	r3, [r3, #32]
 800ef12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	4b22      	ldr	r3, [pc, #136]	; (800efac <TIM_OC6_SetConfig+0xb4>)
 800ef24:	4013      	ands	r3, r2
 800ef26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	021b      	lsls	r3, r3, #8
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ef3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	051b      	lsls	r3, r3, #20
 800ef42:	693a      	ldr	r2, [r7, #16]
 800ef44:	4313      	orrs	r3, r2
 800ef46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a19      	ldr	r2, [pc, #100]	; (800efb0 <TIM_OC6_SetConfig+0xb8>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d00f      	beq.n	800ef70 <TIM_OC6_SetConfig+0x78>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	4a18      	ldr	r2, [pc, #96]	; (800efb4 <TIM_OC6_SetConfig+0xbc>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d00b      	beq.n	800ef70 <TIM_OC6_SetConfig+0x78>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a17      	ldr	r2, [pc, #92]	; (800efb8 <TIM_OC6_SetConfig+0xc0>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d007      	beq.n	800ef70 <TIM_OC6_SetConfig+0x78>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4a16      	ldr	r2, [pc, #88]	; (800efbc <TIM_OC6_SetConfig+0xc4>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d003      	beq.n	800ef70 <TIM_OC6_SetConfig+0x78>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a15      	ldr	r2, [pc, #84]	; (800efc0 <TIM_OC6_SetConfig+0xc8>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d109      	bne.n	800ef84 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ef76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	695b      	ldr	r3, [r3, #20]
 800ef7c:	029b      	lsls	r3, r3, #10
 800ef7e:	697a      	ldr	r2, [r7, #20]
 800ef80:	4313      	orrs	r3, r2
 800ef82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	697a      	ldr	r2, [r7, #20]
 800ef88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	685a      	ldr	r2, [r3, #4]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	693a      	ldr	r2, [r7, #16]
 800ef9c:	621a      	str	r2, [r3, #32]
}
 800ef9e:	bf00      	nop
 800efa0:	371c      	adds	r7, #28
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	feff8fff 	.word	0xfeff8fff
 800efb0:	40010000 	.word	0x40010000
 800efb4:	40010400 	.word	0x40010400
 800efb8:	40014000 	.word	0x40014000
 800efbc:	40014400 	.word	0x40014400
 800efc0:	40014800 	.word	0x40014800

0800efc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b087      	sub	sp, #28
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	6a1b      	ldr	r3, [r3, #32]
 800efd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6a1b      	ldr	r3, [r3, #32]
 800efda:	f023 0201 	bic.w	r2, r3, #1
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	699b      	ldr	r3, [r3, #24]
 800efe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800efee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	011b      	lsls	r3, r3, #4
 800eff4:	693a      	ldr	r2, [r7, #16]
 800eff6:	4313      	orrs	r3, r2
 800eff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	f023 030a 	bic.w	r3, r3, #10
 800f000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f002:	697a      	ldr	r2, [r7, #20]
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	4313      	orrs	r3, r2
 800f008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	693a      	ldr	r2, [r7, #16]
 800f00e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	697a      	ldr	r2, [r7, #20]
 800f014:	621a      	str	r2, [r3, #32]
}
 800f016:	bf00      	nop
 800f018:	371c      	adds	r7, #28
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr

0800f022 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f022:	b480      	push	{r7}
 800f024:	b087      	sub	sp, #28
 800f026:	af00      	add	r7, sp, #0
 800f028:	60f8      	str	r0, [r7, #12]
 800f02a:	60b9      	str	r1, [r7, #8]
 800f02c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	6a1b      	ldr	r3, [r3, #32]
 800f032:	f023 0210 	bic.w	r2, r3, #16
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	699b      	ldr	r3, [r3, #24]
 800f03e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	6a1b      	ldr	r3, [r3, #32]
 800f044:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f04c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	031b      	lsls	r3, r3, #12
 800f052:	697a      	ldr	r2, [r7, #20]
 800f054:	4313      	orrs	r3, r2
 800f056:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f05e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	011b      	lsls	r3, r3, #4
 800f064:	693a      	ldr	r2, [r7, #16]
 800f066:	4313      	orrs	r3, r2
 800f068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	697a      	ldr	r2, [r7, #20]
 800f06e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	693a      	ldr	r2, [r7, #16]
 800f074:	621a      	str	r2, [r3, #32]
}
 800f076:	bf00      	nop
 800f078:	371c      	adds	r7, #28
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr
	...

0800f084 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f084:	b480      	push	{r7}
 800f086:	b085      	sub	sp, #20
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	689b      	ldr	r3, [r3, #8]
 800f092:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f094:	68fa      	ldr	r2, [r7, #12]
 800f096:	4b09      	ldr	r3, [pc, #36]	; (800f0bc <TIM_ITRx_SetConfig+0x38>)
 800f098:	4013      	ands	r3, r2
 800f09a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f09c:	683a      	ldr	r2, [r7, #0]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	f043 0307 	orr.w	r3, r3, #7
 800f0a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	68fa      	ldr	r2, [r7, #12]
 800f0ac:	609a      	str	r2, [r3, #8]
}
 800f0ae:	bf00      	nop
 800f0b0:	3714      	adds	r7, #20
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	ffcfff8f 	.word	0xffcfff8f

0800f0c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b087      	sub	sp, #28
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
 800f0cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f0da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	021a      	lsls	r2, r3, #8
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	431a      	orrs	r2, r3
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	697a      	ldr	r2, [r7, #20]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	697a      	ldr	r2, [r7, #20]
 800f0f2:	609a      	str	r2, [r3, #8]
}
 800f0f4:	bf00      	nop
 800f0f6:	371c      	adds	r7, #28
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f100:	b480      	push	{r7}
 800f102:	b087      	sub	sp, #28
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	f003 031f 	and.w	r3, r3, #31
 800f112:	2201      	movs	r2, #1
 800f114:	fa02 f303 	lsl.w	r3, r2, r3
 800f118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	6a1a      	ldr	r2, [r3, #32]
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	43db      	mvns	r3, r3
 800f122:	401a      	ands	r2, r3
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6a1a      	ldr	r2, [r3, #32]
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	f003 031f 	and.w	r3, r3, #31
 800f132:	6879      	ldr	r1, [r7, #4]
 800f134:	fa01 f303 	lsl.w	r3, r1, r3
 800f138:	431a      	orrs	r2, r3
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	621a      	str	r2, [r3, #32]
}
 800f13e:	bf00      	nop
 800f140:	371c      	adds	r7, #28
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr
	...

0800f14c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b085      	sub	sp, #20
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d101      	bne.n	800f164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f160:	2302      	movs	r3, #2
 800f162:	e077      	b.n	800f254 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2201      	movs	r2, #1
 800f168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2202      	movs	r2, #2
 800f170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a35      	ldr	r2, [pc, #212]	; (800f260 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d004      	beq.n	800f198 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4a34      	ldr	r2, [pc, #208]	; (800f264 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d108      	bne.n	800f1aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f19e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	68fa      	ldr	r2, [r7, #12]
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	68fa      	ldr	r2, [r7, #12]
 800f1b8:	4313      	orrs	r3, r2
 800f1ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4a25      	ldr	r2, [pc, #148]	; (800f260 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d02c      	beq.n	800f228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1d6:	d027      	beq.n	800f228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4a22      	ldr	r2, [pc, #136]	; (800f268 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d022      	beq.n	800f228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4a21      	ldr	r2, [pc, #132]	; (800f26c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d01d      	beq.n	800f228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4a1f      	ldr	r2, [pc, #124]	; (800f270 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d018      	beq.n	800f228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4a1a      	ldr	r2, [pc, #104]	; (800f264 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d013      	beq.n	800f228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a1b      	ldr	r2, [pc, #108]	; (800f274 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d00e      	beq.n	800f228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	4a1a      	ldr	r2, [pc, #104]	; (800f278 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d009      	beq.n	800f228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4a18      	ldr	r2, [pc, #96]	; (800f27c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d004      	beq.n	800f228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4a17      	ldr	r2, [pc, #92]	; (800f280 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d10c      	bne.n	800f242 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f22e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	4313      	orrs	r3, r2
 800f238:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	68ba      	ldr	r2, [r7, #8]
 800f240:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2201      	movs	r2, #1
 800f246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f252:	2300      	movs	r3, #0
}
 800f254:	4618      	mov	r0, r3
 800f256:	3714      	adds	r7, #20
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	40010000 	.word	0x40010000
 800f264:	40010400 	.word	0x40010400
 800f268:	40000400 	.word	0x40000400
 800f26c:	40000800 	.word	0x40000800
 800f270:	40000c00 	.word	0x40000c00
 800f274:	40001800 	.word	0x40001800
 800f278:	40014000 	.word	0x40014000
 800f27c:	4000e000 	.word	0x4000e000
 800f280:	4000e400 	.word	0x4000e400

0800f284 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f284:	b480      	push	{r7}
 800f286:	b085      	sub	sp, #20
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f28e:	2300      	movs	r3, #0
 800f290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d101      	bne.n	800f2a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f29c:	2302      	movs	r3, #2
 800f29e:	e087      	b.n	800f3b0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	689b      	ldr	r3, [r3, #8]
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	691b      	ldr	r3, [r3, #16]
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	695b      	ldr	r3, [r3, #20]
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f306:	4313      	orrs	r3, r2
 800f308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	699b      	ldr	r3, [r3, #24]
 800f314:	041b      	lsls	r3, r3, #16
 800f316:	4313      	orrs	r3, r2
 800f318:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4a27      	ldr	r2, [pc, #156]	; (800f3bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d004      	beq.n	800f32e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a25      	ldr	r2, [pc, #148]	; (800f3c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d106      	bne.n	800f33c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	69db      	ldr	r3, [r3, #28]
 800f338:	4313      	orrs	r3, r2
 800f33a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4a1e      	ldr	r2, [pc, #120]	; (800f3bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d004      	beq.n	800f350 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a1d      	ldr	r2, [pc, #116]	; (800f3c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d126      	bne.n	800f39e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f35a:	051b      	lsls	r3, r3, #20
 800f35c:	4313      	orrs	r3, r2
 800f35e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	6a1b      	ldr	r3, [r3, #32]
 800f36a:	4313      	orrs	r3, r2
 800f36c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f378:	4313      	orrs	r3, r2
 800f37a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a0e      	ldr	r2, [pc, #56]	; (800f3bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d004      	beq.n	800f390 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4a0d      	ldr	r2, [pc, #52]	; (800f3c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d106      	bne.n	800f39e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f39a:	4313      	orrs	r3, r2
 800f39c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	68fa      	ldr	r2, [r7, #12]
 800f3a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f3ae:	2300      	movs	r3, #0
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3714      	adds	r7, #20
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr
 800f3bc:	40010000 	.word	0x40010000
 800f3c0:	40010400 	.word	0x40010400

0800f3c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d101      	bne.n	800f3d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	e042      	b.n	800f45c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d106      	bne.n	800f3ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7f8 fea3 	bl	8008134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2224      	movs	r2, #36	; 0x24
 800f3f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f022 0201 	bic.w	r2, r2, #1
 800f404:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 fd4a 	bl	800fea0 <UART_SetConfig>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d101      	bne.n	800f416 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f412:	2301      	movs	r3, #1
 800f414:	e022      	b.n	800f45c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d002      	beq.n	800f424 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f001 fb9c 	bl	8010b5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	685a      	ldr	r2, [r3, #4]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	689a      	ldr	r2, [r3, #8]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f042 0201 	orr.w	r2, r2, #1
 800f452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f001 fc23 	bl	8010ca0 <UART_CheckIdleState>
 800f45a:	4603      	mov	r3, r0
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3708      	adds	r7, #8
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b08a      	sub	sp, #40	; 0x28
 800f468:	af02      	add	r7, sp, #8
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	603b      	str	r3, [r7, #0]
 800f470:	4613      	mov	r3, r2
 800f472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f47a:	2b20      	cmp	r3, #32
 800f47c:	f040 8083 	bne.w	800f586 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d002      	beq.n	800f48c <HAL_UART_Transmit+0x28>
 800f486:	88fb      	ldrh	r3, [r7, #6]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d101      	bne.n	800f490 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f48c:	2301      	movs	r3, #1
 800f48e:	e07b      	b.n	800f588 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f496:	2b01      	cmp	r3, #1
 800f498:	d101      	bne.n	800f49e <HAL_UART_Transmit+0x3a>
 800f49a:	2302      	movs	r3, #2
 800f49c:	e074      	b.n	800f588 <HAL_UART_Transmit+0x124>
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2221      	movs	r2, #33	; 0x21
 800f4b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f4b6:	f7f9 f83f 	bl	8008538 <HAL_GetTick>
 800f4ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	88fa      	ldrh	r2, [r7, #6]
 800f4c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	88fa      	ldrh	r2, [r7, #6]
 800f4c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4d4:	d108      	bne.n	800f4e8 <HAL_UART_Transmit+0x84>
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	691b      	ldr	r3, [r3, #16]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d104      	bne.n	800f4e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	61bb      	str	r3, [r7, #24]
 800f4e6:	e003      	b.n	800f4f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f4f8:	e02c      	b.n	800f554 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	2200      	movs	r2, #0
 800f502:	2180      	movs	r1, #128	; 0x80
 800f504:	68f8      	ldr	r0, [r7, #12]
 800f506:	f001 fc16 	bl	8010d36 <UART_WaitOnFlagUntilTimeout>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d001      	beq.n	800f514 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f510:	2303      	movs	r3, #3
 800f512:	e039      	b.n	800f588 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d10b      	bne.n	800f532 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f51a:	69bb      	ldr	r3, [r7, #24]
 800f51c:	881b      	ldrh	r3, [r3, #0]
 800f51e:	461a      	mov	r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f528:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	3302      	adds	r3, #2
 800f52e:	61bb      	str	r3, [r7, #24]
 800f530:	e007      	b.n	800f542 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	781a      	ldrb	r2, [r3, #0]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	3301      	adds	r3, #1
 800f540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f548:	b29b      	uxth	r3, r3
 800f54a:	3b01      	subs	r3, #1
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1cc      	bne.n	800f4fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	2200      	movs	r2, #0
 800f568:	2140      	movs	r1, #64	; 0x40
 800f56a:	68f8      	ldr	r0, [r7, #12]
 800f56c:	f001 fbe3 	bl	8010d36 <UART_WaitOnFlagUntilTimeout>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f576:	2303      	movs	r3, #3
 800f578:	e006      	b.n	800f588 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2220      	movs	r2, #32
 800f57e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f582:	2300      	movs	r3, #0
 800f584:	e000      	b.n	800f588 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f586:	2302      	movs	r3, #2
  }
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3720      	adds	r7, #32
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b08a      	sub	sp, #40	; 0x28
 800f594:	af02      	add	r7, sp, #8
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	603b      	str	r3, [r7, #0]
 800f59c:	4613      	mov	r3, r2
 800f59e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5a6:	2b20      	cmp	r3, #32
 800f5a8:	f040 80c0 	bne.w	800f72c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d002      	beq.n	800f5b8 <HAL_UART_Receive+0x28>
 800f5b2:	88fb      	ldrh	r3, [r7, #6]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d101      	bne.n	800f5bc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	e0b8      	b.n	800f72e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f5c2:	2b01      	cmp	r3, #1
 800f5c4:	d101      	bne.n	800f5ca <HAL_UART_Receive+0x3a>
 800f5c6:	2302      	movs	r3, #2
 800f5c8:	e0b1      	b.n	800f72e <HAL_UART_Receive+0x19e>
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2222      	movs	r2, #34	; 0x22
 800f5de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f5e8:	f7f8 ffa6 	bl	8008538 <HAL_GetTick>
 800f5ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	88fa      	ldrh	r2, [r7, #6]
 800f5f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	88fa      	ldrh	r2, [r7, #6]
 800f5fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	689b      	ldr	r3, [r3, #8]
 800f602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f606:	d10e      	bne.n	800f626 <HAL_UART_Receive+0x96>
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d105      	bne.n	800f61c <HAL_UART_Receive+0x8c>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f616:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f61a:	e02d      	b.n	800f678 <HAL_UART_Receive+0xe8>
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	22ff      	movs	r2, #255	; 0xff
 800f620:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f624:	e028      	b.n	800f678 <HAL_UART_Receive+0xe8>
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	689b      	ldr	r3, [r3, #8]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d10d      	bne.n	800f64a <HAL_UART_Receive+0xba>
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	691b      	ldr	r3, [r3, #16]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d104      	bne.n	800f640 <HAL_UART_Receive+0xb0>
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	22ff      	movs	r2, #255	; 0xff
 800f63a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f63e:	e01b      	b.n	800f678 <HAL_UART_Receive+0xe8>
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	227f      	movs	r2, #127	; 0x7f
 800f644:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f648:	e016      	b.n	800f678 <HAL_UART_Receive+0xe8>
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f652:	d10d      	bne.n	800f670 <HAL_UART_Receive+0xe0>
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	691b      	ldr	r3, [r3, #16]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d104      	bne.n	800f666 <HAL_UART_Receive+0xd6>
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	227f      	movs	r2, #127	; 0x7f
 800f660:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f664:	e008      	b.n	800f678 <HAL_UART_Receive+0xe8>
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	223f      	movs	r2, #63	; 0x3f
 800f66a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f66e:	e003      	b.n	800f678 <HAL_UART_Receive+0xe8>
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2200      	movs	r2, #0
 800f674:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f67e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f688:	d108      	bne.n	800f69c <HAL_UART_Receive+0x10c>
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	691b      	ldr	r3, [r3, #16]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d104      	bne.n	800f69c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800f692:	2300      	movs	r3, #0
 800f694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	61bb      	str	r3, [r7, #24]
 800f69a:	e003      	b.n	800f6a4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f6ac:	e032      	b.n	800f714 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	9300      	str	r3, [sp, #0]
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	2120      	movs	r1, #32
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f001 fb3c 	bl	8010d36 <UART_WaitOnFlagUntilTimeout>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d001      	beq.n	800f6c8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800f6c4:	2303      	movs	r3, #3
 800f6c6:	e032      	b.n	800f72e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800f6c8:	69fb      	ldr	r3, [r7, #28]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d10c      	bne.n	800f6e8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d4:	b29a      	uxth	r2, r3
 800f6d6:	8a7b      	ldrh	r3, [r7, #18]
 800f6d8:	4013      	ands	r3, r2
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	3302      	adds	r3, #2
 800f6e4:	61bb      	str	r3, [r7, #24]
 800f6e6:	e00c      	b.n	800f702 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ee:	b2da      	uxtb	r2, r3
 800f6f0:	8a7b      	ldrh	r3, [r7, #18]
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	4013      	ands	r3, r2
 800f6f6:	b2da      	uxtb	r2, r3
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	3301      	adds	r3, #1
 800f700:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f708:	b29b      	uxth	r3, r3
 800f70a:	3b01      	subs	r3, #1
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d1c6      	bne.n	800f6ae <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2220      	movs	r2, #32
 800f724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f728:	2300      	movs	r3, #0
 800f72a:	e000      	b.n	800f72e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800f72c:	2302      	movs	r3, #2
  }
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3720      	adds	r7, #32
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
	...

0800f738 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b0ba      	sub	sp, #232	; 0xe8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	69db      	ldr	r3, [r3, #28]
 800f746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	689b      	ldr	r3, [r3, #8]
 800f75a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f75e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f762:	f640 030f 	movw	r3, #2063	; 0x80f
 800f766:	4013      	ands	r3, r2
 800f768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f76c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f770:	2b00      	cmp	r3, #0
 800f772:	d11b      	bne.n	800f7ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f778:	f003 0320 	and.w	r3, r3, #32
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d015      	beq.n	800f7ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f784:	f003 0320 	and.w	r3, r3, #32
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d105      	bne.n	800f798 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f78c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f794:	2b00      	cmp	r3, #0
 800f796:	d009      	beq.n	800f7ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	f000 835a 	beq.w	800fe56 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	4798      	blx	r3
      }
      return;
 800f7aa:	e354      	b.n	800fe56 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f7ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f000 811f 	beq.w	800f9f4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f7b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f7ba:	4b8b      	ldr	r3, [pc, #556]	; (800f9e8 <HAL_UART_IRQHandler+0x2b0>)
 800f7bc:	4013      	ands	r3, r2
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d106      	bne.n	800f7d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f7c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f7c6:	4b89      	ldr	r3, [pc, #548]	; (800f9ec <HAL_UART_IRQHandler+0x2b4>)
 800f7c8:	4013      	ands	r3, r2
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	f000 8112 	beq.w	800f9f4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f7d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7d4:	f003 0301 	and.w	r3, r3, #1
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d011      	beq.n	800f800 <HAL_UART_IRQHandler+0xc8>
 800f7dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00b      	beq.n	800f800 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7f6:	f043 0201 	orr.w	r2, r3, #1
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f804:	f003 0302 	and.w	r3, r3, #2
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d011      	beq.n	800f830 <HAL_UART_IRQHandler+0xf8>
 800f80c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f810:	f003 0301 	and.w	r3, r3, #1
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00b      	beq.n	800f830 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2202      	movs	r2, #2
 800f81e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f826:	f043 0204 	orr.w	r2, r3, #4
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f834:	f003 0304 	and.w	r3, r3, #4
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d011      	beq.n	800f860 <HAL_UART_IRQHandler+0x128>
 800f83c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f840:	f003 0301 	and.w	r3, r3, #1
 800f844:	2b00      	cmp	r3, #0
 800f846:	d00b      	beq.n	800f860 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2204      	movs	r2, #4
 800f84e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f856:	f043 0202 	orr.w	r2, r3, #2
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f864:	f003 0308 	and.w	r3, r3, #8
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d017      	beq.n	800f89c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f86c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f870:	f003 0320 	and.w	r3, r3, #32
 800f874:	2b00      	cmp	r3, #0
 800f876:	d105      	bne.n	800f884 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f878:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f87c:	4b5a      	ldr	r3, [pc, #360]	; (800f9e8 <HAL_UART_IRQHandler+0x2b0>)
 800f87e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00b      	beq.n	800f89c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2208      	movs	r2, #8
 800f88a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f892:	f043 0208 	orr.w	r2, r3, #8
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d012      	beq.n	800f8ce <HAL_UART_IRQHandler+0x196>
 800f8a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d00c      	beq.n	800f8ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8c4:	f043 0220 	orr.w	r2, r3, #32
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f000 82c0 	beq.w	800fe5a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f8da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8de:	f003 0320 	and.w	r3, r3, #32
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d013      	beq.n	800f90e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f8e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8ea:	f003 0320 	and.w	r3, r3, #32
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d105      	bne.n	800f8fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f8f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f8f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d007      	beq.n	800f90e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f902:	2b00      	cmp	r3, #0
 800f904:	d003      	beq.n	800f90e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f914:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	689b      	ldr	r3, [r3, #8]
 800f91e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f922:	2b40      	cmp	r3, #64	; 0x40
 800f924:	d005      	beq.n	800f932 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f92a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d04f      	beq.n	800f9d2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f001 fac8 	bl	8010ec8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f942:	2b40      	cmp	r3, #64	; 0x40
 800f944:	d141      	bne.n	800f9ca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	3308      	adds	r3, #8
 800f94c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f954:	e853 3f00 	ldrex	r3, [r3]
 800f958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f95c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	3308      	adds	r3, #8
 800f96e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f972:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f97a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f97e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f982:	e841 2300 	strex	r3, r2, [r1]
 800f986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f98a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d1d9      	bne.n	800f946 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f996:	2b00      	cmp	r3, #0
 800f998:	d013      	beq.n	800f9c2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f99e:	4a14      	ldr	r2, [pc, #80]	; (800f9f0 <HAL_UART_IRQHandler+0x2b8>)
 800f9a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fa fe58 	bl	800a65c <HAL_DMA_Abort_IT>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d017      	beq.n	800f9e2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9b8:	687a      	ldr	r2, [r7, #4]
 800f9ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f9bc:	4610      	mov	r0, r2
 800f9be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9c0:	e00f      	b.n	800f9e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 fa56 	bl	800fe74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9c8:	e00b      	b.n	800f9e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f000 fa52 	bl	800fe74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9d0:	e007      	b.n	800f9e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 fa4e 	bl	800fe74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f9e0:	e23b      	b.n	800fe5a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9e2:	bf00      	nop
    return;
 800f9e4:	e239      	b.n	800fe5a <HAL_UART_IRQHandler+0x722>
 800f9e6:	bf00      	nop
 800f9e8:	10000001 	.word	0x10000001
 800f9ec:	04000120 	.word	0x04000120
 800f9f0:	08010f95 	.word	0x08010f95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	f040 81ce 	bne.w	800fd9a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa02:	f003 0310 	and.w	r3, r3, #16
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	f000 81c7 	beq.w	800fd9a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fa0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa10:	f003 0310 	and.w	r3, r3, #16
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	f000 81c0 	beq.w	800fd9a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2210      	movs	r2, #16
 800fa20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa2c:	2b40      	cmp	r3, #64	; 0x40
 800fa2e:	f040 813b 	bne.w	800fca8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4a8b      	ldr	r2, [pc, #556]	; (800fc68 <HAL_UART_IRQHandler+0x530>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d059      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a89      	ldr	r2, [pc, #548]	; (800fc6c <HAL_UART_IRQHandler+0x534>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d053      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a87      	ldr	r2, [pc, #540]	; (800fc70 <HAL_UART_IRQHandler+0x538>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d04d      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a85      	ldr	r2, [pc, #532]	; (800fc74 <HAL_UART_IRQHandler+0x53c>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d047      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a83      	ldr	r2, [pc, #524]	; (800fc78 <HAL_UART_IRQHandler+0x540>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d041      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a81      	ldr	r2, [pc, #516]	; (800fc7c <HAL_UART_IRQHandler+0x544>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d03b      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a7f      	ldr	r2, [pc, #508]	; (800fc80 <HAL_UART_IRQHandler+0x548>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d035      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a7d      	ldr	r2, [pc, #500]	; (800fc84 <HAL_UART_IRQHandler+0x54c>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d02f      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a7b      	ldr	r2, [pc, #492]	; (800fc88 <HAL_UART_IRQHandler+0x550>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d029      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a79      	ldr	r2, [pc, #484]	; (800fc8c <HAL_UART_IRQHandler+0x554>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d023      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4a77      	ldr	r2, [pc, #476]	; (800fc90 <HAL_UART_IRQHandler+0x558>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d01d      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a75      	ldr	r2, [pc, #468]	; (800fc94 <HAL_UART_IRQHandler+0x55c>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d017      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4a73      	ldr	r2, [pc, #460]	; (800fc98 <HAL_UART_IRQHandler+0x560>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d011      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a71      	ldr	r2, [pc, #452]	; (800fc9c <HAL_UART_IRQHandler+0x564>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d00b      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a6f      	ldr	r2, [pc, #444]	; (800fca0 <HAL_UART_IRQHandler+0x568>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d005      	beq.n	800faf2 <HAL_UART_IRQHandler+0x3ba>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4a6d      	ldr	r2, [pc, #436]	; (800fca4 <HAL_UART_IRQHandler+0x56c>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d105      	bne.n	800fafe <HAL_UART_IRQHandler+0x3c6>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	e004      	b.n	800fb08 <HAL_UART_IRQHandler+0x3d0>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fb0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f000 81a4 	beq.w	800fe5e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fb20:	429a      	cmp	r2, r3
 800fb22:	f080 819c 	bcs.w	800fe5e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fb2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb34:	69db      	ldr	r3, [r3, #28]
 800fb36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb3a:	f000 8086 	beq.w	800fc4a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fb4a:	e853 3f00 	ldrex	r3, [r3]
 800fb4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fb52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fb56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	461a      	mov	r2, r3
 800fb64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fb68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fb6c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fb74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fb78:	e841 2300 	strex	r3, r2, [r1]
 800fb7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fb80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d1da      	bne.n	800fb3e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	3308      	adds	r3, #8
 800fb8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb92:	e853 3f00 	ldrex	r3, [r3]
 800fb96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fb98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb9a:	f023 0301 	bic.w	r3, r3, #1
 800fb9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	3308      	adds	r3, #8
 800fba8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fbac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fbb0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fbb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fbb8:	e841 2300 	strex	r3, r2, [r1]
 800fbbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fbbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d1e1      	bne.n	800fb88 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	3308      	adds	r3, #8
 800fbca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbce:	e853 3f00 	ldrex	r3, [r3]
 800fbd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fbd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	3308      	adds	r3, #8
 800fbe4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fbe8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fbea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fbee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fbf0:	e841 2300 	strex	r3, r2, [r1]
 800fbf4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fbf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d1e3      	bne.n	800fbc4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2220      	movs	r2, #32
 800fc00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc12:	e853 3f00 	ldrex	r3, [r3]
 800fc16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fc18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc1a:	f023 0310 	bic.w	r3, r3, #16
 800fc1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	461a      	mov	r2, r3
 800fc28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc2c:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc34:	e841 2300 	strex	r3, r2, [r1]
 800fc38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fc3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d1e4      	bne.n	800fc0a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7fa f9eb 	bl	800a020 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	1ad3      	subs	r3, r2, r3
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 f912 	bl	800fe88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fc64:	e0fb      	b.n	800fe5e <HAL_UART_IRQHandler+0x726>
 800fc66:	bf00      	nop
 800fc68:	40020010 	.word	0x40020010
 800fc6c:	40020028 	.word	0x40020028
 800fc70:	40020040 	.word	0x40020040
 800fc74:	40020058 	.word	0x40020058
 800fc78:	40020070 	.word	0x40020070
 800fc7c:	40020088 	.word	0x40020088
 800fc80:	400200a0 	.word	0x400200a0
 800fc84:	400200b8 	.word	0x400200b8
 800fc88:	40020410 	.word	0x40020410
 800fc8c:	40020428 	.word	0x40020428
 800fc90:	40020440 	.word	0x40020440
 800fc94:	40020458 	.word	0x40020458
 800fc98:	40020470 	.word	0x40020470
 800fc9c:	40020488 	.word	0x40020488
 800fca0:	400204a0 	.word	0x400204a0
 800fca4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	1ad3      	subs	r3, r2, r3
 800fcb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f000 80cc 	beq.w	800fe62 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800fcca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f000 80c7 	beq.w	800fe62 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcdc:	e853 3f00 	ldrex	r3, [r3]
 800fce0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fce8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fcf6:	647b      	str	r3, [r7, #68]	; 0x44
 800fcf8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fcfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcfe:	e841 2300 	strex	r3, r2, [r1]
 800fd02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d1e4      	bne.n	800fcd4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3308      	adds	r3, #8
 800fd10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd14:	e853 3f00 	ldrex	r3, [r3]
 800fd18:	623b      	str	r3, [r7, #32]
   return(result);
 800fd1a:	6a3a      	ldr	r2, [r7, #32]
 800fd1c:	4b54      	ldr	r3, [pc, #336]	; (800fe70 <HAL_UART_IRQHandler+0x738>)
 800fd1e:	4013      	ands	r3, r2
 800fd20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	3308      	adds	r3, #8
 800fd2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fd2e:	633a      	str	r2, [r7, #48]	; 0x30
 800fd30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd36:	e841 2300 	strex	r3, r2, [r1]
 800fd3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d1e3      	bne.n	800fd0a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2220      	movs	r2, #32
 800fd46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2200      	movs	r2, #0
 800fd54:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	e853 3f00 	ldrex	r3, [r3]
 800fd62:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f023 0310 	bic.w	r3, r3, #16
 800fd6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	461a      	mov	r2, r3
 800fd74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fd78:	61fb      	str	r3, [r7, #28]
 800fd7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd7c:	69b9      	ldr	r1, [r7, #24]
 800fd7e:	69fa      	ldr	r2, [r7, #28]
 800fd80:	e841 2300 	strex	r3, r2, [r1]
 800fd84:	617b      	str	r3, [r7, #20]
   return(result);
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d1e4      	bne.n	800fd56 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fd8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fd90:	4619      	mov	r1, r3
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 f878 	bl	800fe88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd98:	e063      	b.n	800fe62 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fd9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d00e      	beq.n	800fdc4 <HAL_UART_IRQHandler+0x68c>
 800fda6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fdaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d008      	beq.n	800fdc4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fdba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f001 f92a 	bl	8011016 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fdc2:	e051      	b.n	800fe68 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fdc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d014      	beq.n	800fdfa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fdd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fdd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d105      	bne.n	800fde8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fde0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d008      	beq.n	800fdfa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d03a      	beq.n	800fe66 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	4798      	blx	r3
    }
    return;
 800fdf8:	e035      	b.n	800fe66 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fdfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d009      	beq.n	800fe1a <HAL_UART_IRQHandler+0x6e2>
 800fe06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d003      	beq.n	800fe1a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f001 f8d4 	bl	8010fc0 <UART_EndTransmit_IT>
    return;
 800fe18:	e026      	b.n	800fe68 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fe1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d009      	beq.n	800fe3a <HAL_UART_IRQHandler+0x702>
 800fe26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d003      	beq.n	800fe3a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f001 f903 	bl	801103e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe38:	e016      	b.n	800fe68 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fe3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d010      	beq.n	800fe68 <HAL_UART_IRQHandler+0x730>
 800fe46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	da0c      	bge.n	800fe68 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f001 f8eb 	bl	801102a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe54:	e008      	b.n	800fe68 <HAL_UART_IRQHandler+0x730>
      return;
 800fe56:	bf00      	nop
 800fe58:	e006      	b.n	800fe68 <HAL_UART_IRQHandler+0x730>
    return;
 800fe5a:	bf00      	nop
 800fe5c:	e004      	b.n	800fe68 <HAL_UART_IRQHandler+0x730>
      return;
 800fe5e:	bf00      	nop
 800fe60:	e002      	b.n	800fe68 <HAL_UART_IRQHandler+0x730>
      return;
 800fe62:	bf00      	nop
 800fe64:	e000      	b.n	800fe68 <HAL_UART_IRQHandler+0x730>
    return;
 800fe66:	bf00      	nop
  }
}
 800fe68:	37e8      	adds	r7, #232	; 0xe8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	effffffe 	.word	0xeffffffe

0800fe74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fe7c:	bf00      	nop
 800fe7e:	370c      	adds	r7, #12
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr

0800fe88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b083      	sub	sp, #12
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fe94:	bf00      	nop
 800fe96:	370c      	adds	r7, #12
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr

0800fea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fea0:	b5b0      	push	{r4, r5, r7, lr}
 800fea2:	b08e      	sub	sp, #56	; 0x38
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fea8:	2300      	movs	r3, #0
 800feaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	689a      	ldr	r2, [r3, #8]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	691b      	ldr	r3, [r3, #16]
 800feb6:	431a      	orrs	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	695b      	ldr	r3, [r3, #20]
 800febc:	431a      	orrs	r2, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	69db      	ldr	r3, [r3, #28]
 800fec2:	4313      	orrs	r3, r2
 800fec4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	4bbf      	ldr	r3, [pc, #764]	; (80101cc <UART_SetConfig+0x32c>)
 800fece:	4013      	ands	r3, r2
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	6812      	ldr	r2, [r2, #0]
 800fed4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fed6:	430b      	orrs	r3, r1
 800fed8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	68da      	ldr	r2, [r3, #12]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	430a      	orrs	r2, r1
 800feee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	699b      	ldr	r3, [r3, #24]
 800fef4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	4ab5      	ldr	r2, [pc, #724]	; (80101d0 <UART_SetConfig+0x330>)
 800fefc:	4293      	cmp	r3, r2
 800fefe:	d004      	beq.n	800ff0a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6a1b      	ldr	r3, [r3, #32]
 800ff04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff06:	4313      	orrs	r3, r2
 800ff08:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	689a      	ldr	r2, [r3, #8]
 800ff10:	4bb0      	ldr	r3, [pc, #704]	; (80101d4 <UART_SetConfig+0x334>)
 800ff12:	4013      	ands	r3, r2
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	6812      	ldr	r2, [r2, #0]
 800ff18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff1a:	430b      	orrs	r3, r1
 800ff1c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff24:	f023 010f 	bic.w	r1, r3, #15
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	430a      	orrs	r2, r1
 800ff32:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	4aa7      	ldr	r2, [pc, #668]	; (80101d8 <UART_SetConfig+0x338>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d176      	bne.n	801002c <UART_SetConfig+0x18c>
 800ff3e:	4ba7      	ldr	r3, [pc, #668]	; (80101dc <UART_SetConfig+0x33c>)
 800ff40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff46:	2b28      	cmp	r3, #40	; 0x28
 800ff48:	d86c      	bhi.n	8010024 <UART_SetConfig+0x184>
 800ff4a:	a201      	add	r2, pc, #4	; (adr r2, 800ff50 <UART_SetConfig+0xb0>)
 800ff4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff50:	0800fff5 	.word	0x0800fff5
 800ff54:	08010025 	.word	0x08010025
 800ff58:	08010025 	.word	0x08010025
 800ff5c:	08010025 	.word	0x08010025
 800ff60:	08010025 	.word	0x08010025
 800ff64:	08010025 	.word	0x08010025
 800ff68:	08010025 	.word	0x08010025
 800ff6c:	08010025 	.word	0x08010025
 800ff70:	0800fffd 	.word	0x0800fffd
 800ff74:	08010025 	.word	0x08010025
 800ff78:	08010025 	.word	0x08010025
 800ff7c:	08010025 	.word	0x08010025
 800ff80:	08010025 	.word	0x08010025
 800ff84:	08010025 	.word	0x08010025
 800ff88:	08010025 	.word	0x08010025
 800ff8c:	08010025 	.word	0x08010025
 800ff90:	08010005 	.word	0x08010005
 800ff94:	08010025 	.word	0x08010025
 800ff98:	08010025 	.word	0x08010025
 800ff9c:	08010025 	.word	0x08010025
 800ffa0:	08010025 	.word	0x08010025
 800ffa4:	08010025 	.word	0x08010025
 800ffa8:	08010025 	.word	0x08010025
 800ffac:	08010025 	.word	0x08010025
 800ffb0:	0801000d 	.word	0x0801000d
 800ffb4:	08010025 	.word	0x08010025
 800ffb8:	08010025 	.word	0x08010025
 800ffbc:	08010025 	.word	0x08010025
 800ffc0:	08010025 	.word	0x08010025
 800ffc4:	08010025 	.word	0x08010025
 800ffc8:	08010025 	.word	0x08010025
 800ffcc:	08010025 	.word	0x08010025
 800ffd0:	08010015 	.word	0x08010015
 800ffd4:	08010025 	.word	0x08010025
 800ffd8:	08010025 	.word	0x08010025
 800ffdc:	08010025 	.word	0x08010025
 800ffe0:	08010025 	.word	0x08010025
 800ffe4:	08010025 	.word	0x08010025
 800ffe8:	08010025 	.word	0x08010025
 800ffec:	08010025 	.word	0x08010025
 800fff0:	0801001d 	.word	0x0801001d
 800fff4:	2301      	movs	r3, #1
 800fff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fffa:	e326      	b.n	801064a <UART_SetConfig+0x7aa>
 800fffc:	2304      	movs	r3, #4
 800fffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010002:	e322      	b.n	801064a <UART_SetConfig+0x7aa>
 8010004:	2308      	movs	r3, #8
 8010006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801000a:	e31e      	b.n	801064a <UART_SetConfig+0x7aa>
 801000c:	2310      	movs	r3, #16
 801000e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010012:	e31a      	b.n	801064a <UART_SetConfig+0x7aa>
 8010014:	2320      	movs	r3, #32
 8010016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801001a:	e316      	b.n	801064a <UART_SetConfig+0x7aa>
 801001c:	2340      	movs	r3, #64	; 0x40
 801001e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010022:	e312      	b.n	801064a <UART_SetConfig+0x7aa>
 8010024:	2380      	movs	r3, #128	; 0x80
 8010026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801002a:	e30e      	b.n	801064a <UART_SetConfig+0x7aa>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4a6b      	ldr	r2, [pc, #428]	; (80101e0 <UART_SetConfig+0x340>)
 8010032:	4293      	cmp	r3, r2
 8010034:	d130      	bne.n	8010098 <UART_SetConfig+0x1f8>
 8010036:	4b69      	ldr	r3, [pc, #420]	; (80101dc <UART_SetConfig+0x33c>)
 8010038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801003a:	f003 0307 	and.w	r3, r3, #7
 801003e:	2b05      	cmp	r3, #5
 8010040:	d826      	bhi.n	8010090 <UART_SetConfig+0x1f0>
 8010042:	a201      	add	r2, pc, #4	; (adr r2, 8010048 <UART_SetConfig+0x1a8>)
 8010044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010048:	08010061 	.word	0x08010061
 801004c:	08010069 	.word	0x08010069
 8010050:	08010071 	.word	0x08010071
 8010054:	08010079 	.word	0x08010079
 8010058:	08010081 	.word	0x08010081
 801005c:	08010089 	.word	0x08010089
 8010060:	2300      	movs	r3, #0
 8010062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010066:	e2f0      	b.n	801064a <UART_SetConfig+0x7aa>
 8010068:	2304      	movs	r3, #4
 801006a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801006e:	e2ec      	b.n	801064a <UART_SetConfig+0x7aa>
 8010070:	2308      	movs	r3, #8
 8010072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010076:	e2e8      	b.n	801064a <UART_SetConfig+0x7aa>
 8010078:	2310      	movs	r3, #16
 801007a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801007e:	e2e4      	b.n	801064a <UART_SetConfig+0x7aa>
 8010080:	2320      	movs	r3, #32
 8010082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010086:	e2e0      	b.n	801064a <UART_SetConfig+0x7aa>
 8010088:	2340      	movs	r3, #64	; 0x40
 801008a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801008e:	e2dc      	b.n	801064a <UART_SetConfig+0x7aa>
 8010090:	2380      	movs	r3, #128	; 0x80
 8010092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010096:	e2d8      	b.n	801064a <UART_SetConfig+0x7aa>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4a51      	ldr	r2, [pc, #324]	; (80101e4 <UART_SetConfig+0x344>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d130      	bne.n	8010104 <UART_SetConfig+0x264>
 80100a2:	4b4e      	ldr	r3, [pc, #312]	; (80101dc <UART_SetConfig+0x33c>)
 80100a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100a6:	f003 0307 	and.w	r3, r3, #7
 80100aa:	2b05      	cmp	r3, #5
 80100ac:	d826      	bhi.n	80100fc <UART_SetConfig+0x25c>
 80100ae:	a201      	add	r2, pc, #4	; (adr r2, 80100b4 <UART_SetConfig+0x214>)
 80100b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b4:	080100cd 	.word	0x080100cd
 80100b8:	080100d5 	.word	0x080100d5
 80100bc:	080100dd 	.word	0x080100dd
 80100c0:	080100e5 	.word	0x080100e5
 80100c4:	080100ed 	.word	0x080100ed
 80100c8:	080100f5 	.word	0x080100f5
 80100cc:	2300      	movs	r3, #0
 80100ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100d2:	e2ba      	b.n	801064a <UART_SetConfig+0x7aa>
 80100d4:	2304      	movs	r3, #4
 80100d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100da:	e2b6      	b.n	801064a <UART_SetConfig+0x7aa>
 80100dc:	2308      	movs	r3, #8
 80100de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100e2:	e2b2      	b.n	801064a <UART_SetConfig+0x7aa>
 80100e4:	2310      	movs	r3, #16
 80100e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ea:	e2ae      	b.n	801064a <UART_SetConfig+0x7aa>
 80100ec:	2320      	movs	r3, #32
 80100ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100f2:	e2aa      	b.n	801064a <UART_SetConfig+0x7aa>
 80100f4:	2340      	movs	r3, #64	; 0x40
 80100f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100fa:	e2a6      	b.n	801064a <UART_SetConfig+0x7aa>
 80100fc:	2380      	movs	r3, #128	; 0x80
 80100fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010102:	e2a2      	b.n	801064a <UART_SetConfig+0x7aa>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a37      	ldr	r2, [pc, #220]	; (80101e8 <UART_SetConfig+0x348>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d130      	bne.n	8010170 <UART_SetConfig+0x2d0>
 801010e:	4b33      	ldr	r3, [pc, #204]	; (80101dc <UART_SetConfig+0x33c>)
 8010110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010112:	f003 0307 	and.w	r3, r3, #7
 8010116:	2b05      	cmp	r3, #5
 8010118:	d826      	bhi.n	8010168 <UART_SetConfig+0x2c8>
 801011a:	a201      	add	r2, pc, #4	; (adr r2, 8010120 <UART_SetConfig+0x280>)
 801011c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010120:	08010139 	.word	0x08010139
 8010124:	08010141 	.word	0x08010141
 8010128:	08010149 	.word	0x08010149
 801012c:	08010151 	.word	0x08010151
 8010130:	08010159 	.word	0x08010159
 8010134:	08010161 	.word	0x08010161
 8010138:	2300      	movs	r3, #0
 801013a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801013e:	e284      	b.n	801064a <UART_SetConfig+0x7aa>
 8010140:	2304      	movs	r3, #4
 8010142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010146:	e280      	b.n	801064a <UART_SetConfig+0x7aa>
 8010148:	2308      	movs	r3, #8
 801014a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801014e:	e27c      	b.n	801064a <UART_SetConfig+0x7aa>
 8010150:	2310      	movs	r3, #16
 8010152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010156:	e278      	b.n	801064a <UART_SetConfig+0x7aa>
 8010158:	2320      	movs	r3, #32
 801015a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801015e:	e274      	b.n	801064a <UART_SetConfig+0x7aa>
 8010160:	2340      	movs	r3, #64	; 0x40
 8010162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010166:	e270      	b.n	801064a <UART_SetConfig+0x7aa>
 8010168:	2380      	movs	r3, #128	; 0x80
 801016a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801016e:	e26c      	b.n	801064a <UART_SetConfig+0x7aa>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4a1d      	ldr	r2, [pc, #116]	; (80101ec <UART_SetConfig+0x34c>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d142      	bne.n	8010200 <UART_SetConfig+0x360>
 801017a:	4b18      	ldr	r3, [pc, #96]	; (80101dc <UART_SetConfig+0x33c>)
 801017c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801017e:	f003 0307 	and.w	r3, r3, #7
 8010182:	2b05      	cmp	r3, #5
 8010184:	d838      	bhi.n	80101f8 <UART_SetConfig+0x358>
 8010186:	a201      	add	r2, pc, #4	; (adr r2, 801018c <UART_SetConfig+0x2ec>)
 8010188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801018c:	080101a5 	.word	0x080101a5
 8010190:	080101ad 	.word	0x080101ad
 8010194:	080101b5 	.word	0x080101b5
 8010198:	080101bd 	.word	0x080101bd
 801019c:	080101c5 	.word	0x080101c5
 80101a0:	080101f1 	.word	0x080101f1
 80101a4:	2300      	movs	r3, #0
 80101a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101aa:	e24e      	b.n	801064a <UART_SetConfig+0x7aa>
 80101ac:	2304      	movs	r3, #4
 80101ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101b2:	e24a      	b.n	801064a <UART_SetConfig+0x7aa>
 80101b4:	2308      	movs	r3, #8
 80101b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ba:	e246      	b.n	801064a <UART_SetConfig+0x7aa>
 80101bc:	2310      	movs	r3, #16
 80101be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101c2:	e242      	b.n	801064a <UART_SetConfig+0x7aa>
 80101c4:	2320      	movs	r3, #32
 80101c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ca:	e23e      	b.n	801064a <UART_SetConfig+0x7aa>
 80101cc:	cfff69f3 	.word	0xcfff69f3
 80101d0:	58000c00 	.word	0x58000c00
 80101d4:	11fff4ff 	.word	0x11fff4ff
 80101d8:	40011000 	.word	0x40011000
 80101dc:	58024400 	.word	0x58024400
 80101e0:	40004400 	.word	0x40004400
 80101e4:	40004800 	.word	0x40004800
 80101e8:	40004c00 	.word	0x40004c00
 80101ec:	40005000 	.word	0x40005000
 80101f0:	2340      	movs	r3, #64	; 0x40
 80101f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101f6:	e228      	b.n	801064a <UART_SetConfig+0x7aa>
 80101f8:	2380      	movs	r3, #128	; 0x80
 80101fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101fe:	e224      	b.n	801064a <UART_SetConfig+0x7aa>
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4ab1      	ldr	r2, [pc, #708]	; (80104cc <UART_SetConfig+0x62c>)
 8010206:	4293      	cmp	r3, r2
 8010208:	d176      	bne.n	80102f8 <UART_SetConfig+0x458>
 801020a:	4bb1      	ldr	r3, [pc, #708]	; (80104d0 <UART_SetConfig+0x630>)
 801020c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801020e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010212:	2b28      	cmp	r3, #40	; 0x28
 8010214:	d86c      	bhi.n	80102f0 <UART_SetConfig+0x450>
 8010216:	a201      	add	r2, pc, #4	; (adr r2, 801021c <UART_SetConfig+0x37c>)
 8010218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801021c:	080102c1 	.word	0x080102c1
 8010220:	080102f1 	.word	0x080102f1
 8010224:	080102f1 	.word	0x080102f1
 8010228:	080102f1 	.word	0x080102f1
 801022c:	080102f1 	.word	0x080102f1
 8010230:	080102f1 	.word	0x080102f1
 8010234:	080102f1 	.word	0x080102f1
 8010238:	080102f1 	.word	0x080102f1
 801023c:	080102c9 	.word	0x080102c9
 8010240:	080102f1 	.word	0x080102f1
 8010244:	080102f1 	.word	0x080102f1
 8010248:	080102f1 	.word	0x080102f1
 801024c:	080102f1 	.word	0x080102f1
 8010250:	080102f1 	.word	0x080102f1
 8010254:	080102f1 	.word	0x080102f1
 8010258:	080102f1 	.word	0x080102f1
 801025c:	080102d1 	.word	0x080102d1
 8010260:	080102f1 	.word	0x080102f1
 8010264:	080102f1 	.word	0x080102f1
 8010268:	080102f1 	.word	0x080102f1
 801026c:	080102f1 	.word	0x080102f1
 8010270:	080102f1 	.word	0x080102f1
 8010274:	080102f1 	.word	0x080102f1
 8010278:	080102f1 	.word	0x080102f1
 801027c:	080102d9 	.word	0x080102d9
 8010280:	080102f1 	.word	0x080102f1
 8010284:	080102f1 	.word	0x080102f1
 8010288:	080102f1 	.word	0x080102f1
 801028c:	080102f1 	.word	0x080102f1
 8010290:	080102f1 	.word	0x080102f1
 8010294:	080102f1 	.word	0x080102f1
 8010298:	080102f1 	.word	0x080102f1
 801029c:	080102e1 	.word	0x080102e1
 80102a0:	080102f1 	.word	0x080102f1
 80102a4:	080102f1 	.word	0x080102f1
 80102a8:	080102f1 	.word	0x080102f1
 80102ac:	080102f1 	.word	0x080102f1
 80102b0:	080102f1 	.word	0x080102f1
 80102b4:	080102f1 	.word	0x080102f1
 80102b8:	080102f1 	.word	0x080102f1
 80102bc:	080102e9 	.word	0x080102e9
 80102c0:	2301      	movs	r3, #1
 80102c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102c6:	e1c0      	b.n	801064a <UART_SetConfig+0x7aa>
 80102c8:	2304      	movs	r3, #4
 80102ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ce:	e1bc      	b.n	801064a <UART_SetConfig+0x7aa>
 80102d0:	2308      	movs	r3, #8
 80102d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102d6:	e1b8      	b.n	801064a <UART_SetConfig+0x7aa>
 80102d8:	2310      	movs	r3, #16
 80102da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102de:	e1b4      	b.n	801064a <UART_SetConfig+0x7aa>
 80102e0:	2320      	movs	r3, #32
 80102e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102e6:	e1b0      	b.n	801064a <UART_SetConfig+0x7aa>
 80102e8:	2340      	movs	r3, #64	; 0x40
 80102ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ee:	e1ac      	b.n	801064a <UART_SetConfig+0x7aa>
 80102f0:	2380      	movs	r3, #128	; 0x80
 80102f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102f6:	e1a8      	b.n	801064a <UART_SetConfig+0x7aa>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	4a75      	ldr	r2, [pc, #468]	; (80104d4 <UART_SetConfig+0x634>)
 80102fe:	4293      	cmp	r3, r2
 8010300:	d130      	bne.n	8010364 <UART_SetConfig+0x4c4>
 8010302:	4b73      	ldr	r3, [pc, #460]	; (80104d0 <UART_SetConfig+0x630>)
 8010304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010306:	f003 0307 	and.w	r3, r3, #7
 801030a:	2b05      	cmp	r3, #5
 801030c:	d826      	bhi.n	801035c <UART_SetConfig+0x4bc>
 801030e:	a201      	add	r2, pc, #4	; (adr r2, 8010314 <UART_SetConfig+0x474>)
 8010310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010314:	0801032d 	.word	0x0801032d
 8010318:	08010335 	.word	0x08010335
 801031c:	0801033d 	.word	0x0801033d
 8010320:	08010345 	.word	0x08010345
 8010324:	0801034d 	.word	0x0801034d
 8010328:	08010355 	.word	0x08010355
 801032c:	2300      	movs	r3, #0
 801032e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010332:	e18a      	b.n	801064a <UART_SetConfig+0x7aa>
 8010334:	2304      	movs	r3, #4
 8010336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801033a:	e186      	b.n	801064a <UART_SetConfig+0x7aa>
 801033c:	2308      	movs	r3, #8
 801033e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010342:	e182      	b.n	801064a <UART_SetConfig+0x7aa>
 8010344:	2310      	movs	r3, #16
 8010346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801034a:	e17e      	b.n	801064a <UART_SetConfig+0x7aa>
 801034c:	2320      	movs	r3, #32
 801034e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010352:	e17a      	b.n	801064a <UART_SetConfig+0x7aa>
 8010354:	2340      	movs	r3, #64	; 0x40
 8010356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801035a:	e176      	b.n	801064a <UART_SetConfig+0x7aa>
 801035c:	2380      	movs	r3, #128	; 0x80
 801035e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010362:	e172      	b.n	801064a <UART_SetConfig+0x7aa>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	4a5b      	ldr	r2, [pc, #364]	; (80104d8 <UART_SetConfig+0x638>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d130      	bne.n	80103d0 <UART_SetConfig+0x530>
 801036e:	4b58      	ldr	r3, [pc, #352]	; (80104d0 <UART_SetConfig+0x630>)
 8010370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010372:	f003 0307 	and.w	r3, r3, #7
 8010376:	2b05      	cmp	r3, #5
 8010378:	d826      	bhi.n	80103c8 <UART_SetConfig+0x528>
 801037a:	a201      	add	r2, pc, #4	; (adr r2, 8010380 <UART_SetConfig+0x4e0>)
 801037c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010380:	08010399 	.word	0x08010399
 8010384:	080103a1 	.word	0x080103a1
 8010388:	080103a9 	.word	0x080103a9
 801038c:	080103b1 	.word	0x080103b1
 8010390:	080103b9 	.word	0x080103b9
 8010394:	080103c1 	.word	0x080103c1
 8010398:	2300      	movs	r3, #0
 801039a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801039e:	e154      	b.n	801064a <UART_SetConfig+0x7aa>
 80103a0:	2304      	movs	r3, #4
 80103a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103a6:	e150      	b.n	801064a <UART_SetConfig+0x7aa>
 80103a8:	2308      	movs	r3, #8
 80103aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ae:	e14c      	b.n	801064a <UART_SetConfig+0x7aa>
 80103b0:	2310      	movs	r3, #16
 80103b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103b6:	e148      	b.n	801064a <UART_SetConfig+0x7aa>
 80103b8:	2320      	movs	r3, #32
 80103ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103be:	e144      	b.n	801064a <UART_SetConfig+0x7aa>
 80103c0:	2340      	movs	r3, #64	; 0x40
 80103c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103c6:	e140      	b.n	801064a <UART_SetConfig+0x7aa>
 80103c8:	2380      	movs	r3, #128	; 0x80
 80103ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ce:	e13c      	b.n	801064a <UART_SetConfig+0x7aa>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a41      	ldr	r2, [pc, #260]	; (80104dc <UART_SetConfig+0x63c>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	f040 8082 	bne.w	80104e0 <UART_SetConfig+0x640>
 80103dc:	4b3c      	ldr	r3, [pc, #240]	; (80104d0 <UART_SetConfig+0x630>)
 80103de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80103e4:	2b28      	cmp	r3, #40	; 0x28
 80103e6:	d86d      	bhi.n	80104c4 <UART_SetConfig+0x624>
 80103e8:	a201      	add	r2, pc, #4	; (adr r2, 80103f0 <UART_SetConfig+0x550>)
 80103ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ee:	bf00      	nop
 80103f0:	08010495 	.word	0x08010495
 80103f4:	080104c5 	.word	0x080104c5
 80103f8:	080104c5 	.word	0x080104c5
 80103fc:	080104c5 	.word	0x080104c5
 8010400:	080104c5 	.word	0x080104c5
 8010404:	080104c5 	.word	0x080104c5
 8010408:	080104c5 	.word	0x080104c5
 801040c:	080104c5 	.word	0x080104c5
 8010410:	0801049d 	.word	0x0801049d
 8010414:	080104c5 	.word	0x080104c5
 8010418:	080104c5 	.word	0x080104c5
 801041c:	080104c5 	.word	0x080104c5
 8010420:	080104c5 	.word	0x080104c5
 8010424:	080104c5 	.word	0x080104c5
 8010428:	080104c5 	.word	0x080104c5
 801042c:	080104c5 	.word	0x080104c5
 8010430:	080104a5 	.word	0x080104a5
 8010434:	080104c5 	.word	0x080104c5
 8010438:	080104c5 	.word	0x080104c5
 801043c:	080104c5 	.word	0x080104c5
 8010440:	080104c5 	.word	0x080104c5
 8010444:	080104c5 	.word	0x080104c5
 8010448:	080104c5 	.word	0x080104c5
 801044c:	080104c5 	.word	0x080104c5
 8010450:	080104ad 	.word	0x080104ad
 8010454:	080104c5 	.word	0x080104c5
 8010458:	080104c5 	.word	0x080104c5
 801045c:	080104c5 	.word	0x080104c5
 8010460:	080104c5 	.word	0x080104c5
 8010464:	080104c5 	.word	0x080104c5
 8010468:	080104c5 	.word	0x080104c5
 801046c:	080104c5 	.word	0x080104c5
 8010470:	080104b5 	.word	0x080104b5
 8010474:	080104c5 	.word	0x080104c5
 8010478:	080104c5 	.word	0x080104c5
 801047c:	080104c5 	.word	0x080104c5
 8010480:	080104c5 	.word	0x080104c5
 8010484:	080104c5 	.word	0x080104c5
 8010488:	080104c5 	.word	0x080104c5
 801048c:	080104c5 	.word	0x080104c5
 8010490:	080104bd 	.word	0x080104bd
 8010494:	2301      	movs	r3, #1
 8010496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801049a:	e0d6      	b.n	801064a <UART_SetConfig+0x7aa>
 801049c:	2304      	movs	r3, #4
 801049e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104a2:	e0d2      	b.n	801064a <UART_SetConfig+0x7aa>
 80104a4:	2308      	movs	r3, #8
 80104a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104aa:	e0ce      	b.n	801064a <UART_SetConfig+0x7aa>
 80104ac:	2310      	movs	r3, #16
 80104ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104b2:	e0ca      	b.n	801064a <UART_SetConfig+0x7aa>
 80104b4:	2320      	movs	r3, #32
 80104b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104ba:	e0c6      	b.n	801064a <UART_SetConfig+0x7aa>
 80104bc:	2340      	movs	r3, #64	; 0x40
 80104be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104c2:	e0c2      	b.n	801064a <UART_SetConfig+0x7aa>
 80104c4:	2380      	movs	r3, #128	; 0x80
 80104c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104ca:	e0be      	b.n	801064a <UART_SetConfig+0x7aa>
 80104cc:	40011400 	.word	0x40011400
 80104d0:	58024400 	.word	0x58024400
 80104d4:	40007800 	.word	0x40007800
 80104d8:	40007c00 	.word	0x40007c00
 80104dc:	40011800 	.word	0x40011800
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4aad      	ldr	r2, [pc, #692]	; (801079c <UART_SetConfig+0x8fc>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d176      	bne.n	80105d8 <UART_SetConfig+0x738>
 80104ea:	4bad      	ldr	r3, [pc, #692]	; (80107a0 <UART_SetConfig+0x900>)
 80104ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80104f2:	2b28      	cmp	r3, #40	; 0x28
 80104f4:	d86c      	bhi.n	80105d0 <UART_SetConfig+0x730>
 80104f6:	a201      	add	r2, pc, #4	; (adr r2, 80104fc <UART_SetConfig+0x65c>)
 80104f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104fc:	080105a1 	.word	0x080105a1
 8010500:	080105d1 	.word	0x080105d1
 8010504:	080105d1 	.word	0x080105d1
 8010508:	080105d1 	.word	0x080105d1
 801050c:	080105d1 	.word	0x080105d1
 8010510:	080105d1 	.word	0x080105d1
 8010514:	080105d1 	.word	0x080105d1
 8010518:	080105d1 	.word	0x080105d1
 801051c:	080105a9 	.word	0x080105a9
 8010520:	080105d1 	.word	0x080105d1
 8010524:	080105d1 	.word	0x080105d1
 8010528:	080105d1 	.word	0x080105d1
 801052c:	080105d1 	.word	0x080105d1
 8010530:	080105d1 	.word	0x080105d1
 8010534:	080105d1 	.word	0x080105d1
 8010538:	080105d1 	.word	0x080105d1
 801053c:	080105b1 	.word	0x080105b1
 8010540:	080105d1 	.word	0x080105d1
 8010544:	080105d1 	.word	0x080105d1
 8010548:	080105d1 	.word	0x080105d1
 801054c:	080105d1 	.word	0x080105d1
 8010550:	080105d1 	.word	0x080105d1
 8010554:	080105d1 	.word	0x080105d1
 8010558:	080105d1 	.word	0x080105d1
 801055c:	080105b9 	.word	0x080105b9
 8010560:	080105d1 	.word	0x080105d1
 8010564:	080105d1 	.word	0x080105d1
 8010568:	080105d1 	.word	0x080105d1
 801056c:	080105d1 	.word	0x080105d1
 8010570:	080105d1 	.word	0x080105d1
 8010574:	080105d1 	.word	0x080105d1
 8010578:	080105d1 	.word	0x080105d1
 801057c:	080105c1 	.word	0x080105c1
 8010580:	080105d1 	.word	0x080105d1
 8010584:	080105d1 	.word	0x080105d1
 8010588:	080105d1 	.word	0x080105d1
 801058c:	080105d1 	.word	0x080105d1
 8010590:	080105d1 	.word	0x080105d1
 8010594:	080105d1 	.word	0x080105d1
 8010598:	080105d1 	.word	0x080105d1
 801059c:	080105c9 	.word	0x080105c9
 80105a0:	2301      	movs	r3, #1
 80105a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105a6:	e050      	b.n	801064a <UART_SetConfig+0x7aa>
 80105a8:	2304      	movs	r3, #4
 80105aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105ae:	e04c      	b.n	801064a <UART_SetConfig+0x7aa>
 80105b0:	2308      	movs	r3, #8
 80105b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105b6:	e048      	b.n	801064a <UART_SetConfig+0x7aa>
 80105b8:	2310      	movs	r3, #16
 80105ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105be:	e044      	b.n	801064a <UART_SetConfig+0x7aa>
 80105c0:	2320      	movs	r3, #32
 80105c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105c6:	e040      	b.n	801064a <UART_SetConfig+0x7aa>
 80105c8:	2340      	movs	r3, #64	; 0x40
 80105ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105ce:	e03c      	b.n	801064a <UART_SetConfig+0x7aa>
 80105d0:	2380      	movs	r3, #128	; 0x80
 80105d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105d6:	e038      	b.n	801064a <UART_SetConfig+0x7aa>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	4a71      	ldr	r2, [pc, #452]	; (80107a4 <UART_SetConfig+0x904>)
 80105de:	4293      	cmp	r3, r2
 80105e0:	d130      	bne.n	8010644 <UART_SetConfig+0x7a4>
 80105e2:	4b6f      	ldr	r3, [pc, #444]	; (80107a0 <UART_SetConfig+0x900>)
 80105e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105e6:	f003 0307 	and.w	r3, r3, #7
 80105ea:	2b05      	cmp	r3, #5
 80105ec:	d826      	bhi.n	801063c <UART_SetConfig+0x79c>
 80105ee:	a201      	add	r2, pc, #4	; (adr r2, 80105f4 <UART_SetConfig+0x754>)
 80105f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105f4:	0801060d 	.word	0x0801060d
 80105f8:	08010615 	.word	0x08010615
 80105fc:	0801061d 	.word	0x0801061d
 8010600:	08010625 	.word	0x08010625
 8010604:	0801062d 	.word	0x0801062d
 8010608:	08010635 	.word	0x08010635
 801060c:	2302      	movs	r3, #2
 801060e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010612:	e01a      	b.n	801064a <UART_SetConfig+0x7aa>
 8010614:	2304      	movs	r3, #4
 8010616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801061a:	e016      	b.n	801064a <UART_SetConfig+0x7aa>
 801061c:	2308      	movs	r3, #8
 801061e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010622:	e012      	b.n	801064a <UART_SetConfig+0x7aa>
 8010624:	2310      	movs	r3, #16
 8010626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801062a:	e00e      	b.n	801064a <UART_SetConfig+0x7aa>
 801062c:	2320      	movs	r3, #32
 801062e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010632:	e00a      	b.n	801064a <UART_SetConfig+0x7aa>
 8010634:	2340      	movs	r3, #64	; 0x40
 8010636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801063a:	e006      	b.n	801064a <UART_SetConfig+0x7aa>
 801063c:	2380      	movs	r3, #128	; 0x80
 801063e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010642:	e002      	b.n	801064a <UART_SetConfig+0x7aa>
 8010644:	2380      	movs	r3, #128	; 0x80
 8010646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4a55      	ldr	r2, [pc, #340]	; (80107a4 <UART_SetConfig+0x904>)
 8010650:	4293      	cmp	r3, r2
 8010652:	f040 80f0 	bne.w	8010836 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010656:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801065a:	2b20      	cmp	r3, #32
 801065c:	dc46      	bgt.n	80106ec <UART_SetConfig+0x84c>
 801065e:	2b02      	cmp	r3, #2
 8010660:	db75      	blt.n	801074e <UART_SetConfig+0x8ae>
 8010662:	3b02      	subs	r3, #2
 8010664:	2b1e      	cmp	r3, #30
 8010666:	d872      	bhi.n	801074e <UART_SetConfig+0x8ae>
 8010668:	a201      	add	r2, pc, #4	; (adr r2, 8010670 <UART_SetConfig+0x7d0>)
 801066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801066e:	bf00      	nop
 8010670:	080106f3 	.word	0x080106f3
 8010674:	0801074f 	.word	0x0801074f
 8010678:	080106fb 	.word	0x080106fb
 801067c:	0801074f 	.word	0x0801074f
 8010680:	0801074f 	.word	0x0801074f
 8010684:	0801074f 	.word	0x0801074f
 8010688:	0801070b 	.word	0x0801070b
 801068c:	0801074f 	.word	0x0801074f
 8010690:	0801074f 	.word	0x0801074f
 8010694:	0801074f 	.word	0x0801074f
 8010698:	0801074f 	.word	0x0801074f
 801069c:	0801074f 	.word	0x0801074f
 80106a0:	0801074f 	.word	0x0801074f
 80106a4:	0801074f 	.word	0x0801074f
 80106a8:	0801071b 	.word	0x0801071b
 80106ac:	0801074f 	.word	0x0801074f
 80106b0:	0801074f 	.word	0x0801074f
 80106b4:	0801074f 	.word	0x0801074f
 80106b8:	0801074f 	.word	0x0801074f
 80106bc:	0801074f 	.word	0x0801074f
 80106c0:	0801074f 	.word	0x0801074f
 80106c4:	0801074f 	.word	0x0801074f
 80106c8:	0801074f 	.word	0x0801074f
 80106cc:	0801074f 	.word	0x0801074f
 80106d0:	0801074f 	.word	0x0801074f
 80106d4:	0801074f 	.word	0x0801074f
 80106d8:	0801074f 	.word	0x0801074f
 80106dc:	0801074f 	.word	0x0801074f
 80106e0:	0801074f 	.word	0x0801074f
 80106e4:	0801074f 	.word	0x0801074f
 80106e8:	08010741 	.word	0x08010741
 80106ec:	2b40      	cmp	r3, #64	; 0x40
 80106ee:	d02a      	beq.n	8010746 <UART_SetConfig+0x8a6>
 80106f0:	e02d      	b.n	801074e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80106f2:	f7fc fe75 	bl	800d3e0 <HAL_RCCEx_GetD3PCLK1Freq>
 80106f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80106f8:	e02f      	b.n	801075a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106fa:	f107 0314 	add.w	r3, r7, #20
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fc fe84 	bl	800d40c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010708:	e027      	b.n	801075a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801070a:	f107 0308 	add.w	r3, r7, #8
 801070e:	4618      	mov	r0, r3
 8010710:	f7fc ffd0 	bl	800d6b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010718:	e01f      	b.n	801075a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801071a:	4b21      	ldr	r3, [pc, #132]	; (80107a0 <UART_SetConfig+0x900>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f003 0320 	and.w	r3, r3, #32
 8010722:	2b00      	cmp	r3, #0
 8010724:	d009      	beq.n	801073a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010726:	4b1e      	ldr	r3, [pc, #120]	; (80107a0 <UART_SetConfig+0x900>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	08db      	lsrs	r3, r3, #3
 801072c:	f003 0303 	and.w	r3, r3, #3
 8010730:	4a1d      	ldr	r2, [pc, #116]	; (80107a8 <UART_SetConfig+0x908>)
 8010732:	fa22 f303 	lsr.w	r3, r2, r3
 8010736:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010738:	e00f      	b.n	801075a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 801073a:	4b1b      	ldr	r3, [pc, #108]	; (80107a8 <UART_SetConfig+0x908>)
 801073c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801073e:	e00c      	b.n	801075a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010740:	4b1a      	ldr	r3, [pc, #104]	; (80107ac <UART_SetConfig+0x90c>)
 8010742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010744:	e009      	b.n	801075a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801074a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801074c:	e005      	b.n	801075a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 801074e:	2300      	movs	r3, #0
 8010750:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010752:	2301      	movs	r3, #1
 8010754:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010758:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075c:	2b00      	cmp	r3, #0
 801075e:	f000 81e6 	beq.w	8010b2e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010766:	4a12      	ldr	r2, [pc, #72]	; (80107b0 <UART_SetConfig+0x910>)
 8010768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801076c:	461a      	mov	r2, r3
 801076e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010770:	fbb3 f3f2 	udiv	r3, r3, r2
 8010774:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	685a      	ldr	r2, [r3, #4]
 801077a:	4613      	mov	r3, r2
 801077c:	005b      	lsls	r3, r3, #1
 801077e:	4413      	add	r3, r2
 8010780:	6a3a      	ldr	r2, [r7, #32]
 8010782:	429a      	cmp	r2, r3
 8010784:	d305      	bcc.n	8010792 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801078c:	6a3a      	ldr	r2, [r7, #32]
 801078e:	429a      	cmp	r2, r3
 8010790:	d910      	bls.n	80107b4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8010792:	2301      	movs	r3, #1
 8010794:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010798:	e1c9      	b.n	8010b2e <UART_SetConfig+0xc8e>
 801079a:	bf00      	nop
 801079c:	40011c00 	.word	0x40011c00
 80107a0:	58024400 	.word	0x58024400
 80107a4:	58000c00 	.word	0x58000c00
 80107a8:	03d09000 	.word	0x03d09000
 80107ac:	003d0900 	.word	0x003d0900
 80107b0:	080147b8 	.word	0x080147b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80107b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b6:	4618      	mov	r0, r3
 80107b8:	f04f 0100 	mov.w	r1, #0
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c0:	4ac1      	ldr	r2, [pc, #772]	; (8010ac8 <UART_SetConfig+0xc28>)
 80107c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	f04f 0300 	mov.w	r3, #0
 80107cc:	f7ef fdf8 	bl	80003c0 <__aeabi_uldivmod>
 80107d0:	4602      	mov	r2, r0
 80107d2:	460b      	mov	r3, r1
 80107d4:	4610      	mov	r0, r2
 80107d6:	4619      	mov	r1, r3
 80107d8:	f04f 0200 	mov.w	r2, #0
 80107dc:	f04f 0300 	mov.w	r3, #0
 80107e0:	020b      	lsls	r3, r1, #8
 80107e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80107e6:	0202      	lsls	r2, r0, #8
 80107e8:	6879      	ldr	r1, [r7, #4]
 80107ea:	6849      	ldr	r1, [r1, #4]
 80107ec:	0849      	lsrs	r1, r1, #1
 80107ee:	4608      	mov	r0, r1
 80107f0:	f04f 0100 	mov.w	r1, #0
 80107f4:	1814      	adds	r4, r2, r0
 80107f6:	eb43 0501 	adc.w	r5, r3, r1
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	461a      	mov	r2, r3
 8010800:	f04f 0300 	mov.w	r3, #0
 8010804:	4620      	mov	r0, r4
 8010806:	4629      	mov	r1, r5
 8010808:	f7ef fdda 	bl	80003c0 <__aeabi_uldivmod>
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	4613      	mov	r3, r2
 8010812:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801081a:	d308      	bcc.n	801082e <UART_SetConfig+0x98e>
 801081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010822:	d204      	bcs.n	801082e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801082a:	60da      	str	r2, [r3, #12]
 801082c:	e17f      	b.n	8010b2e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 801082e:	2301      	movs	r3, #1
 8010830:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010834:	e17b      	b.n	8010b2e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	69db      	ldr	r3, [r3, #28]
 801083a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801083e:	f040 80bd 	bne.w	80109bc <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8010842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010846:	2b20      	cmp	r3, #32
 8010848:	dc48      	bgt.n	80108dc <UART_SetConfig+0xa3c>
 801084a:	2b00      	cmp	r3, #0
 801084c:	db7b      	blt.n	8010946 <UART_SetConfig+0xaa6>
 801084e:	2b20      	cmp	r3, #32
 8010850:	d879      	bhi.n	8010946 <UART_SetConfig+0xaa6>
 8010852:	a201      	add	r2, pc, #4	; (adr r2, 8010858 <UART_SetConfig+0x9b8>)
 8010854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010858:	080108e3 	.word	0x080108e3
 801085c:	080108eb 	.word	0x080108eb
 8010860:	08010947 	.word	0x08010947
 8010864:	08010947 	.word	0x08010947
 8010868:	080108f3 	.word	0x080108f3
 801086c:	08010947 	.word	0x08010947
 8010870:	08010947 	.word	0x08010947
 8010874:	08010947 	.word	0x08010947
 8010878:	08010903 	.word	0x08010903
 801087c:	08010947 	.word	0x08010947
 8010880:	08010947 	.word	0x08010947
 8010884:	08010947 	.word	0x08010947
 8010888:	08010947 	.word	0x08010947
 801088c:	08010947 	.word	0x08010947
 8010890:	08010947 	.word	0x08010947
 8010894:	08010947 	.word	0x08010947
 8010898:	08010913 	.word	0x08010913
 801089c:	08010947 	.word	0x08010947
 80108a0:	08010947 	.word	0x08010947
 80108a4:	08010947 	.word	0x08010947
 80108a8:	08010947 	.word	0x08010947
 80108ac:	08010947 	.word	0x08010947
 80108b0:	08010947 	.word	0x08010947
 80108b4:	08010947 	.word	0x08010947
 80108b8:	08010947 	.word	0x08010947
 80108bc:	08010947 	.word	0x08010947
 80108c0:	08010947 	.word	0x08010947
 80108c4:	08010947 	.word	0x08010947
 80108c8:	08010947 	.word	0x08010947
 80108cc:	08010947 	.word	0x08010947
 80108d0:	08010947 	.word	0x08010947
 80108d4:	08010947 	.word	0x08010947
 80108d8:	08010939 	.word	0x08010939
 80108dc:	2b40      	cmp	r3, #64	; 0x40
 80108de:	d02e      	beq.n	801093e <UART_SetConfig+0xa9e>
 80108e0:	e031      	b.n	8010946 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80108e2:	f7fb fa17 	bl	800bd14 <HAL_RCC_GetPCLK1Freq>
 80108e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80108e8:	e033      	b.n	8010952 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80108ea:	f7fb fa29 	bl	800bd40 <HAL_RCC_GetPCLK2Freq>
 80108ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80108f0:	e02f      	b.n	8010952 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80108f2:	f107 0314 	add.w	r3, r7, #20
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fc fd88 	bl	800d40c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80108fc:	69bb      	ldr	r3, [r7, #24]
 80108fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010900:	e027      	b.n	8010952 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010902:	f107 0308 	add.w	r3, r7, #8
 8010906:	4618      	mov	r0, r3
 8010908:	f7fc fed4 	bl	800d6b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010910:	e01f      	b.n	8010952 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010912:	4b6e      	ldr	r3, [pc, #440]	; (8010acc <UART_SetConfig+0xc2c>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f003 0320 	and.w	r3, r3, #32
 801091a:	2b00      	cmp	r3, #0
 801091c:	d009      	beq.n	8010932 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801091e:	4b6b      	ldr	r3, [pc, #428]	; (8010acc <UART_SetConfig+0xc2c>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	08db      	lsrs	r3, r3, #3
 8010924:	f003 0303 	and.w	r3, r3, #3
 8010928:	4a69      	ldr	r2, [pc, #420]	; (8010ad0 <UART_SetConfig+0xc30>)
 801092a:	fa22 f303 	lsr.w	r3, r2, r3
 801092e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010930:	e00f      	b.n	8010952 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8010932:	4b67      	ldr	r3, [pc, #412]	; (8010ad0 <UART_SetConfig+0xc30>)
 8010934:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010936:	e00c      	b.n	8010952 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010938:	4b66      	ldr	r3, [pc, #408]	; (8010ad4 <UART_SetConfig+0xc34>)
 801093a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801093c:	e009      	b.n	8010952 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801093e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010942:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010944:	e005      	b.n	8010952 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8010946:	2300      	movs	r3, #0
 8010948:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801094a:	2301      	movs	r3, #1
 801094c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010954:	2b00      	cmp	r3, #0
 8010956:	f000 80ea 	beq.w	8010b2e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801095e:	4a5a      	ldr	r2, [pc, #360]	; (8010ac8 <UART_SetConfig+0xc28>)
 8010960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010964:	461a      	mov	r2, r3
 8010966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010968:	fbb3 f3f2 	udiv	r3, r3, r2
 801096c:	005a      	lsls	r2, r3, #1
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	085b      	lsrs	r3, r3, #1
 8010974:	441a      	add	r2, r3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	fbb2 f3f3 	udiv	r3, r2, r3
 801097e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010982:	2b0f      	cmp	r3, #15
 8010984:	d916      	bls.n	80109b4 <UART_SetConfig+0xb14>
 8010986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801098c:	d212      	bcs.n	80109b4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010990:	b29b      	uxth	r3, r3
 8010992:	f023 030f 	bic.w	r3, r3, #15
 8010996:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099a:	085b      	lsrs	r3, r3, #1
 801099c:	b29b      	uxth	r3, r3
 801099e:	f003 0307 	and.w	r3, r3, #7
 80109a2:	b29a      	uxth	r2, r3
 80109a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80109a6:	4313      	orrs	r3, r2
 80109a8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80109b0:	60da      	str	r2, [r3, #12]
 80109b2:	e0bc      	b.n	8010b2e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80109b4:	2301      	movs	r3, #1
 80109b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80109ba:	e0b8      	b.n	8010b2e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80109bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80109c0:	2b20      	cmp	r3, #32
 80109c2:	dc4b      	bgt.n	8010a5c <UART_SetConfig+0xbbc>
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f2c0 8087 	blt.w	8010ad8 <UART_SetConfig+0xc38>
 80109ca:	2b20      	cmp	r3, #32
 80109cc:	f200 8084 	bhi.w	8010ad8 <UART_SetConfig+0xc38>
 80109d0:	a201      	add	r2, pc, #4	; (adr r2, 80109d8 <UART_SetConfig+0xb38>)
 80109d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109d6:	bf00      	nop
 80109d8:	08010a63 	.word	0x08010a63
 80109dc:	08010a6b 	.word	0x08010a6b
 80109e0:	08010ad9 	.word	0x08010ad9
 80109e4:	08010ad9 	.word	0x08010ad9
 80109e8:	08010a73 	.word	0x08010a73
 80109ec:	08010ad9 	.word	0x08010ad9
 80109f0:	08010ad9 	.word	0x08010ad9
 80109f4:	08010ad9 	.word	0x08010ad9
 80109f8:	08010a83 	.word	0x08010a83
 80109fc:	08010ad9 	.word	0x08010ad9
 8010a00:	08010ad9 	.word	0x08010ad9
 8010a04:	08010ad9 	.word	0x08010ad9
 8010a08:	08010ad9 	.word	0x08010ad9
 8010a0c:	08010ad9 	.word	0x08010ad9
 8010a10:	08010ad9 	.word	0x08010ad9
 8010a14:	08010ad9 	.word	0x08010ad9
 8010a18:	08010a93 	.word	0x08010a93
 8010a1c:	08010ad9 	.word	0x08010ad9
 8010a20:	08010ad9 	.word	0x08010ad9
 8010a24:	08010ad9 	.word	0x08010ad9
 8010a28:	08010ad9 	.word	0x08010ad9
 8010a2c:	08010ad9 	.word	0x08010ad9
 8010a30:	08010ad9 	.word	0x08010ad9
 8010a34:	08010ad9 	.word	0x08010ad9
 8010a38:	08010ad9 	.word	0x08010ad9
 8010a3c:	08010ad9 	.word	0x08010ad9
 8010a40:	08010ad9 	.word	0x08010ad9
 8010a44:	08010ad9 	.word	0x08010ad9
 8010a48:	08010ad9 	.word	0x08010ad9
 8010a4c:	08010ad9 	.word	0x08010ad9
 8010a50:	08010ad9 	.word	0x08010ad9
 8010a54:	08010ad9 	.word	0x08010ad9
 8010a58:	08010ab9 	.word	0x08010ab9
 8010a5c:	2b40      	cmp	r3, #64	; 0x40
 8010a5e:	d02e      	beq.n	8010abe <UART_SetConfig+0xc1e>
 8010a60:	e03a      	b.n	8010ad8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010a62:	f7fb f957 	bl	800bd14 <HAL_RCC_GetPCLK1Freq>
 8010a66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010a68:	e03c      	b.n	8010ae4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010a6a:	f7fb f969 	bl	800bd40 <HAL_RCC_GetPCLK2Freq>
 8010a6e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010a70:	e038      	b.n	8010ae4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a72:	f107 0314 	add.w	r3, r7, #20
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fc fcc8 	bl	800d40c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010a7c:	69bb      	ldr	r3, [r7, #24]
 8010a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010a80:	e030      	b.n	8010ae4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a82:	f107 0308 	add.w	r3, r7, #8
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fc fe14 	bl	800d6b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010a90:	e028      	b.n	8010ae4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a92:	4b0e      	ldr	r3, [pc, #56]	; (8010acc <UART_SetConfig+0xc2c>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f003 0320 	and.w	r3, r3, #32
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d009      	beq.n	8010ab2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010a9e:	4b0b      	ldr	r3, [pc, #44]	; (8010acc <UART_SetConfig+0xc2c>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	08db      	lsrs	r3, r3, #3
 8010aa4:	f003 0303 	and.w	r3, r3, #3
 8010aa8:	4a09      	ldr	r2, [pc, #36]	; (8010ad0 <UART_SetConfig+0xc30>)
 8010aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8010aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ab0:	e018      	b.n	8010ae4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8010ab2:	4b07      	ldr	r3, [pc, #28]	; (8010ad0 <UART_SetConfig+0xc30>)
 8010ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ab6:	e015      	b.n	8010ae4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010ab8:	4b06      	ldr	r3, [pc, #24]	; (8010ad4 <UART_SetConfig+0xc34>)
 8010aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010abc:	e012      	b.n	8010ae4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ac4:	e00e      	b.n	8010ae4 <UART_SetConfig+0xc44>
 8010ac6:	bf00      	nop
 8010ac8:	080147b8 	.word	0x080147b8
 8010acc:	58024400 	.word	0x58024400
 8010ad0:	03d09000 	.word	0x03d09000
 8010ad4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010adc:	2301      	movs	r3, #1
 8010ade:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010ae2:	bf00      	nop
    }

    if (pclk != 0U)
 8010ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d021      	beq.n	8010b2e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aee:	4a1a      	ldr	r2, [pc, #104]	; (8010b58 <UART_SetConfig+0xcb8>)
 8010af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010af4:	461a      	mov	r2, r3
 8010af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af8:	fbb3 f2f2 	udiv	r2, r3, r2
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	085b      	lsrs	r3, r3, #1
 8010b02:	441a      	add	r2, r3
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	685b      	ldr	r3, [r3, #4]
 8010b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b10:	2b0f      	cmp	r3, #15
 8010b12:	d909      	bls.n	8010b28 <UART_SetConfig+0xc88>
 8010b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b1a:	d205      	bcs.n	8010b28 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b1e:	b29a      	uxth	r2, r3
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	60da      	str	r2, [r3, #12]
 8010b26:	e002      	b.n	8010b2e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2201      	movs	r2, #1
 8010b32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2201      	movs	r2, #1
 8010b3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2200      	movs	r2, #0
 8010b42:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2200      	movs	r2, #0
 8010b48:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010b4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3738      	adds	r7, #56	; 0x38
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bdb0      	pop	{r4, r5, r7, pc}
 8010b56:	bf00      	nop
 8010b58:	080147b8 	.word	0x080147b8

08010b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b083      	sub	sp, #12
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b68:	f003 0301 	and.w	r3, r3, #1
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d00a      	beq.n	8010b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	430a      	orrs	r2, r1
 8010b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b8a:	f003 0302 	and.w	r3, r3, #2
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d00a      	beq.n	8010ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	430a      	orrs	r2, r1
 8010ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bac:	f003 0304 	and.w	r3, r3, #4
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d00a      	beq.n	8010bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	430a      	orrs	r2, r1
 8010bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bce:	f003 0308 	and.w	r3, r3, #8
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d00a      	beq.n	8010bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	430a      	orrs	r2, r1
 8010bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bf0:	f003 0310 	and.w	r3, r3, #16
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00a      	beq.n	8010c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	689b      	ldr	r3, [r3, #8]
 8010bfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	430a      	orrs	r2, r1
 8010c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c12:	f003 0320 	and.w	r3, r3, #32
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00a      	beq.n	8010c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	689b      	ldr	r3, [r3, #8]
 8010c20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	430a      	orrs	r2, r1
 8010c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d01a      	beq.n	8010c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	430a      	orrs	r2, r1
 8010c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c5a:	d10a      	bne.n	8010c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	430a      	orrs	r2, r1
 8010c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d00a      	beq.n	8010c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	430a      	orrs	r2, r1
 8010c92:	605a      	str	r2, [r3, #4]
  }
}
 8010c94:	bf00      	nop
 8010c96:	370c      	adds	r7, #12
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b086      	sub	sp, #24
 8010ca4:	af02      	add	r7, sp, #8
 8010ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2200      	movs	r2, #0
 8010cac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010cb0:	f7f7 fc42 	bl	8008538 <HAL_GetTick>
 8010cb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f003 0308 	and.w	r3, r3, #8
 8010cc0:	2b08      	cmp	r3, #8
 8010cc2:	d10e      	bne.n	8010ce2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010cc8:	9300      	str	r3, [sp, #0]
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 f82f 	bl	8010d36 <UART_WaitOnFlagUntilTimeout>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d001      	beq.n	8010ce2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010cde:	2303      	movs	r3, #3
 8010ce0:	e025      	b.n	8010d2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	f003 0304 	and.w	r3, r3, #4
 8010cec:	2b04      	cmp	r3, #4
 8010cee:	d10e      	bne.n	8010d0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010cf4:	9300      	str	r3, [sp, #0]
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 f819 	bl	8010d36 <UART_WaitOnFlagUntilTimeout>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d001      	beq.n	8010d0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010d0a:	2303      	movs	r3, #3
 8010d0c:	e00f      	b.n	8010d2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2220      	movs	r2, #32
 8010d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2220      	movs	r2, #32
 8010d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2200      	movs	r2, #0
 8010d22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2200      	movs	r2, #0
 8010d28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b09c      	sub	sp, #112	; 0x70
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	60f8      	str	r0, [r7, #12]
 8010d3e:	60b9      	str	r1, [r7, #8]
 8010d40:	603b      	str	r3, [r7, #0]
 8010d42:	4613      	mov	r3, r2
 8010d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010d46:	e0a9      	b.n	8010e9c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d4e:	f000 80a5 	beq.w	8010e9c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010d52:	f7f7 fbf1 	bl	8008538 <HAL_GetTick>
 8010d56:	4602      	mov	r2, r0
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	1ad3      	subs	r3, r2, r3
 8010d5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d302      	bcc.n	8010d68 <UART_WaitOnFlagUntilTimeout+0x32>
 8010d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d140      	bne.n	8010dea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d70:	e853 3f00 	ldrex	r3, [r3]
 8010d74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010d7c:	667b      	str	r3, [r7, #100]	; 0x64
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	461a      	mov	r2, r3
 8010d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010d88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010d8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010d8e:	e841 2300 	strex	r3, r2, [r1]
 8010d92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d1e6      	bne.n	8010d68 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	3308      	adds	r3, #8
 8010da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010da4:	e853 3f00 	ldrex	r3, [r3]
 8010da8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dac:	f023 0301 	bic.w	r3, r3, #1
 8010db0:	663b      	str	r3, [r7, #96]	; 0x60
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	3308      	adds	r3, #8
 8010db8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010dba:	64ba      	str	r2, [r7, #72]	; 0x48
 8010dbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010dc2:	e841 2300 	strex	r3, r2, [r1]
 8010dc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d1e5      	bne.n	8010d9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	2220      	movs	r2, #32
 8010dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	2220      	movs	r2, #32
 8010dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2200      	movs	r2, #0
 8010de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010de6:	2303      	movs	r3, #3
 8010de8:	e069      	b.n	8010ebe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f003 0304 	and.w	r3, r3, #4
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d051      	beq.n	8010e9c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	69db      	ldr	r3, [r3, #28]
 8010dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e06:	d149      	bne.n	8010e9c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1a:	e853 3f00 	ldrex	r3, [r3]
 8010e1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010e26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e30:	637b      	str	r3, [r7, #52]	; 0x34
 8010e32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e38:	e841 2300 	strex	r3, r2, [r1]
 8010e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d1e6      	bne.n	8010e12 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	3308      	adds	r3, #8
 8010e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	e853 3f00 	ldrex	r3, [r3]
 8010e52:	613b      	str	r3, [r7, #16]
   return(result);
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	f023 0301 	bic.w	r3, r3, #1
 8010e5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	3308      	adds	r3, #8
 8010e62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010e64:	623a      	str	r2, [r7, #32]
 8010e66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e68:	69f9      	ldr	r1, [r7, #28]
 8010e6a:	6a3a      	ldr	r2, [r7, #32]
 8010e6c:	e841 2300 	strex	r3, r2, [r1]
 8010e70:	61bb      	str	r3, [r7, #24]
   return(result);
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1e5      	bne.n	8010e44 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2220      	movs	r2, #32
 8010e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	2220      	movs	r2, #32
 8010e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	2220      	movs	r2, #32
 8010e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2200      	movs	r2, #0
 8010e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010e98:	2303      	movs	r3, #3
 8010e9a:	e010      	b.n	8010ebe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	69da      	ldr	r2, [r3, #28]
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	4013      	ands	r3, r2
 8010ea6:	68ba      	ldr	r2, [r7, #8]
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	bf0c      	ite	eq
 8010eac:	2301      	moveq	r3, #1
 8010eae:	2300      	movne	r3, #0
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	79fb      	ldrb	r3, [r7, #7]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	f43f af46 	beq.w	8010d48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010ebc:	2300      	movs	r3, #0
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3770      	adds	r7, #112	; 0x70
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}
	...

08010ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010ec8:	b480      	push	{r7}
 8010eca:	b095      	sub	sp, #84	; 0x54
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ed8:	e853 3f00 	ldrex	r3, [r3]
 8010edc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	461a      	mov	r2, r3
 8010eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eee:	643b      	str	r3, [r7, #64]	; 0x40
 8010ef0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ef4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010ef6:	e841 2300 	strex	r3, r2, [r1]
 8010efa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1e6      	bne.n	8010ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	3308      	adds	r3, #8
 8010f08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f0a:	6a3b      	ldr	r3, [r7, #32]
 8010f0c:	e853 3f00 	ldrex	r3, [r3]
 8010f10:	61fb      	str	r3, [r7, #28]
   return(result);
 8010f12:	69fa      	ldr	r2, [r7, #28]
 8010f14:	4b1e      	ldr	r3, [pc, #120]	; (8010f90 <UART_EndRxTransfer+0xc8>)
 8010f16:	4013      	ands	r3, r2
 8010f18:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	3308      	adds	r3, #8
 8010f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010f24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f2a:	e841 2300 	strex	r3, r2, [r1]
 8010f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d1e5      	bne.n	8010f02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d118      	bne.n	8010f70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	e853 3f00 	ldrex	r3, [r3]
 8010f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	f023 0310 	bic.w	r3, r3, #16
 8010f52:	647b      	str	r3, [r7, #68]	; 0x44
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	461a      	mov	r2, r3
 8010f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f5c:	61bb      	str	r3, [r7, #24]
 8010f5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f60:	6979      	ldr	r1, [r7, #20]
 8010f62:	69ba      	ldr	r2, [r7, #24]
 8010f64:	e841 2300 	strex	r3, r2, [r1]
 8010f68:	613b      	str	r3, [r7, #16]
   return(result);
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d1e6      	bne.n	8010f3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2220      	movs	r2, #32
 8010f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2200      	movs	r2, #0
 8010f82:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010f84:	bf00      	nop
 8010f86:	3754      	adds	r7, #84	; 0x54
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8e:	4770      	bx	lr
 8010f90:	effffffe 	.word	0xeffffffe

08010f94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2200      	movs	r2, #0
 8010fae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010fb2:	68f8      	ldr	r0, [r7, #12]
 8010fb4:	f7fe ff5e 	bl	800fe74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fb8:	bf00      	nop
 8010fba:	3710      	adds	r7, #16
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b088      	sub	sp, #32
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	e853 3f00 	ldrex	r3, [r3]
 8010fd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010fdc:	61fb      	str	r3, [r7, #28]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	461a      	mov	r2, r3
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	61bb      	str	r3, [r7, #24]
 8010fe8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fea:	6979      	ldr	r1, [r7, #20]
 8010fec:	69ba      	ldr	r2, [r7, #24]
 8010fee:	e841 2300 	strex	r3, r2, [r1]
 8010ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8010ff4:	693b      	ldr	r3, [r7, #16]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d1e6      	bne.n	8010fc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2220      	movs	r2, #32
 8010ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2200      	movs	r2, #0
 8011006:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f7f5 fe2f 	bl	8006c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801100e:	bf00      	nop
 8011010:	3720      	adds	r7, #32
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}

08011016 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011016:	b480      	push	{r7}
 8011018:	b083      	sub	sp, #12
 801101a:	af00      	add	r7, sp, #0
 801101c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801101e:	bf00      	nop
 8011020:	370c      	adds	r7, #12
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr

0801102a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801102a:	b480      	push	{r7}
 801102c:	b083      	sub	sp, #12
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011032:	bf00      	nop
 8011034:	370c      	adds	r7, #12
 8011036:	46bd      	mov	sp, r7
 8011038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103c:	4770      	bx	lr

0801103e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801103e:	b480      	push	{r7}
 8011040:	b083      	sub	sp, #12
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011046:	bf00      	nop
 8011048:	370c      	adds	r7, #12
 801104a:	46bd      	mov	sp, r7
 801104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011050:	4770      	bx	lr

08011052 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011052:	b480      	push	{r7}
 8011054:	b085      	sub	sp, #20
 8011056:	af00      	add	r7, sp, #0
 8011058:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011060:	2b01      	cmp	r3, #1
 8011062:	d101      	bne.n	8011068 <HAL_UARTEx_DisableFifoMode+0x16>
 8011064:	2302      	movs	r3, #2
 8011066:	e027      	b.n	80110b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2201      	movs	r2, #1
 801106c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2224      	movs	r2, #36	; 0x24
 8011074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	681a      	ldr	r2, [r3, #0]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f022 0201 	bic.w	r2, r2, #1
 801108e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011096:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2200      	movs	r2, #0
 801109c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	68fa      	ldr	r2, [r7, #12]
 80110a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2220      	movs	r2, #32
 80110aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2200      	movs	r2, #0
 80110b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80110b6:	2300      	movs	r3, #0
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3714      	adds	r7, #20
 80110bc:	46bd      	mov	sp, r7
 80110be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c2:	4770      	bx	lr

080110c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d101      	bne.n	80110dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80110d8:	2302      	movs	r3, #2
 80110da:	e02d      	b.n	8011138 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2201      	movs	r2, #1
 80110e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2224      	movs	r2, #36	; 0x24
 80110e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	f022 0201 	bic.w	r2, r2, #1
 8011102:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	689b      	ldr	r3, [r3, #8]
 801110a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	683a      	ldr	r2, [r7, #0]
 8011114:	430a      	orrs	r2, r1
 8011116:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f000 f84f 	bl	80111bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	68fa      	ldr	r2, [r7, #12]
 8011124:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2220      	movs	r2, #32
 801112a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2200      	movs	r2, #0
 8011132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011136:	2300      	movs	r3, #0
}
 8011138:	4618      	mov	r0, r3
 801113a:	3710      	adds	r7, #16
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011150:	2b01      	cmp	r3, #1
 8011152:	d101      	bne.n	8011158 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011154:	2302      	movs	r3, #2
 8011156:	e02d      	b.n	80111b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2201      	movs	r2, #1
 801115c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2224      	movs	r2, #36	; 0x24
 8011164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	681a      	ldr	r2, [r3, #0]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f022 0201 	bic.w	r2, r2, #1
 801117e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	689b      	ldr	r3, [r3, #8]
 8011186:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	683a      	ldr	r2, [r7, #0]
 8011190:	430a      	orrs	r2, r1
 8011192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f000 f811 	bl	80111bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	68fa      	ldr	r2, [r7, #12]
 80111a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2220      	movs	r2, #32
 80111a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2200      	movs	r2, #0
 80111ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80111b2:	2300      	movs	r3, #0
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	3710      	adds	r7, #16
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}

080111bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80111bc:	b480      	push	{r7}
 80111be:	b085      	sub	sp, #20
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d108      	bne.n	80111de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2201      	movs	r2, #1
 80111d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2201      	movs	r2, #1
 80111d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80111dc:	e031      	b.n	8011242 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80111de:	2310      	movs	r3, #16
 80111e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80111e2:	2310      	movs	r3, #16
 80111e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	689b      	ldr	r3, [r3, #8]
 80111ec:	0e5b      	lsrs	r3, r3, #25
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	f003 0307 	and.w	r3, r3, #7
 80111f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	689b      	ldr	r3, [r3, #8]
 80111fc:	0f5b      	lsrs	r3, r3, #29
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	f003 0307 	and.w	r3, r3, #7
 8011204:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011206:	7bbb      	ldrb	r3, [r7, #14]
 8011208:	7b3a      	ldrb	r2, [r7, #12]
 801120a:	4911      	ldr	r1, [pc, #68]	; (8011250 <UARTEx_SetNbDataToProcess+0x94>)
 801120c:	5c8a      	ldrb	r2, [r1, r2]
 801120e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011212:	7b3a      	ldrb	r2, [r7, #12]
 8011214:	490f      	ldr	r1, [pc, #60]	; (8011254 <UARTEx_SetNbDataToProcess+0x98>)
 8011216:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011218:	fb93 f3f2 	sdiv	r3, r3, r2
 801121c:	b29a      	uxth	r2, r3
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011224:	7bfb      	ldrb	r3, [r7, #15]
 8011226:	7b7a      	ldrb	r2, [r7, #13]
 8011228:	4909      	ldr	r1, [pc, #36]	; (8011250 <UARTEx_SetNbDataToProcess+0x94>)
 801122a:	5c8a      	ldrb	r2, [r1, r2]
 801122c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011230:	7b7a      	ldrb	r2, [r7, #13]
 8011232:	4908      	ldr	r1, [pc, #32]	; (8011254 <UARTEx_SetNbDataToProcess+0x98>)
 8011234:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011236:	fb93 f3f2 	sdiv	r3, r3, r2
 801123a:	b29a      	uxth	r2, r3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011242:	bf00      	nop
 8011244:	3714      	adds	r7, #20
 8011246:	46bd      	mov	sp, r7
 8011248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124c:	4770      	bx	lr
 801124e:	bf00      	nop
 8011250:	080147d0 	.word	0x080147d0
 8011254:	080147d8 	.word	0x080147d8

08011258 <__errno>:
 8011258:	4b01      	ldr	r3, [pc, #4]	; (8011260 <__errno+0x8>)
 801125a:	6818      	ldr	r0, [r3, #0]
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	24000010 	.word	0x24000010

08011264 <__libc_init_array>:
 8011264:	b570      	push	{r4, r5, r6, lr}
 8011266:	4d0d      	ldr	r5, [pc, #52]	; (801129c <__libc_init_array+0x38>)
 8011268:	4c0d      	ldr	r4, [pc, #52]	; (80112a0 <__libc_init_array+0x3c>)
 801126a:	1b64      	subs	r4, r4, r5
 801126c:	10a4      	asrs	r4, r4, #2
 801126e:	2600      	movs	r6, #0
 8011270:	42a6      	cmp	r6, r4
 8011272:	d109      	bne.n	8011288 <__libc_init_array+0x24>
 8011274:	4d0b      	ldr	r5, [pc, #44]	; (80112a4 <__libc_init_array+0x40>)
 8011276:	4c0c      	ldr	r4, [pc, #48]	; (80112a8 <__libc_init_array+0x44>)
 8011278:	f003 fa88 	bl	801478c <_init>
 801127c:	1b64      	subs	r4, r4, r5
 801127e:	10a4      	asrs	r4, r4, #2
 8011280:	2600      	movs	r6, #0
 8011282:	42a6      	cmp	r6, r4
 8011284:	d105      	bne.n	8011292 <__libc_init_array+0x2e>
 8011286:	bd70      	pop	{r4, r5, r6, pc}
 8011288:	f855 3b04 	ldr.w	r3, [r5], #4
 801128c:	4798      	blx	r3
 801128e:	3601      	adds	r6, #1
 8011290:	e7ee      	b.n	8011270 <__libc_init_array+0xc>
 8011292:	f855 3b04 	ldr.w	r3, [r5], #4
 8011296:	4798      	blx	r3
 8011298:	3601      	adds	r6, #1
 801129a:	e7f2      	b.n	8011282 <__libc_init_array+0x1e>
 801129c:	08014da8 	.word	0x08014da8
 80112a0:	08014da8 	.word	0x08014da8
 80112a4:	08014da8 	.word	0x08014da8
 80112a8:	08014dac 	.word	0x08014dac

080112ac <memcpy>:
 80112ac:	440a      	add	r2, r1
 80112ae:	4291      	cmp	r1, r2
 80112b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80112b4:	d100      	bne.n	80112b8 <memcpy+0xc>
 80112b6:	4770      	bx	lr
 80112b8:	b510      	push	{r4, lr}
 80112ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112c2:	4291      	cmp	r1, r2
 80112c4:	d1f9      	bne.n	80112ba <memcpy+0xe>
 80112c6:	bd10      	pop	{r4, pc}

080112c8 <memset>:
 80112c8:	4402      	add	r2, r0
 80112ca:	4603      	mov	r3, r0
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d100      	bne.n	80112d2 <memset+0xa>
 80112d0:	4770      	bx	lr
 80112d2:	f803 1b01 	strb.w	r1, [r3], #1
 80112d6:	e7f9      	b.n	80112cc <memset+0x4>

080112d8 <__cvt>:
 80112d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112da:	ed2d 8b02 	vpush	{d8}
 80112de:	eeb0 8b40 	vmov.f64	d8, d0
 80112e2:	b085      	sub	sp, #20
 80112e4:	4617      	mov	r7, r2
 80112e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80112e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80112ea:	ee18 2a90 	vmov	r2, s17
 80112ee:	f025 0520 	bic.w	r5, r5, #32
 80112f2:	2a00      	cmp	r2, #0
 80112f4:	bfb6      	itet	lt
 80112f6:	222d      	movlt	r2, #45	; 0x2d
 80112f8:	2200      	movge	r2, #0
 80112fa:	eeb1 8b40 	vneglt.f64	d8, d0
 80112fe:	2d46      	cmp	r5, #70	; 0x46
 8011300:	460c      	mov	r4, r1
 8011302:	701a      	strb	r2, [r3, #0]
 8011304:	d004      	beq.n	8011310 <__cvt+0x38>
 8011306:	2d45      	cmp	r5, #69	; 0x45
 8011308:	d100      	bne.n	801130c <__cvt+0x34>
 801130a:	3401      	adds	r4, #1
 801130c:	2102      	movs	r1, #2
 801130e:	e000      	b.n	8011312 <__cvt+0x3a>
 8011310:	2103      	movs	r1, #3
 8011312:	ab03      	add	r3, sp, #12
 8011314:	9301      	str	r3, [sp, #4]
 8011316:	ab02      	add	r3, sp, #8
 8011318:	9300      	str	r3, [sp, #0]
 801131a:	4622      	mov	r2, r4
 801131c:	4633      	mov	r3, r6
 801131e:	eeb0 0b48 	vmov.f64	d0, d8
 8011322:	f000 fca9 	bl	8011c78 <_dtoa_r>
 8011326:	2d47      	cmp	r5, #71	; 0x47
 8011328:	d109      	bne.n	801133e <__cvt+0x66>
 801132a:	07fb      	lsls	r3, r7, #31
 801132c:	d407      	bmi.n	801133e <__cvt+0x66>
 801132e:	9b03      	ldr	r3, [sp, #12]
 8011330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011332:	1a1b      	subs	r3, r3, r0
 8011334:	6013      	str	r3, [r2, #0]
 8011336:	b005      	add	sp, #20
 8011338:	ecbd 8b02 	vpop	{d8}
 801133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801133e:	2d46      	cmp	r5, #70	; 0x46
 8011340:	eb00 0204 	add.w	r2, r0, r4
 8011344:	d10c      	bne.n	8011360 <__cvt+0x88>
 8011346:	7803      	ldrb	r3, [r0, #0]
 8011348:	2b30      	cmp	r3, #48	; 0x30
 801134a:	d107      	bne.n	801135c <__cvt+0x84>
 801134c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011354:	bf1c      	itt	ne
 8011356:	f1c4 0401 	rsbne	r4, r4, #1
 801135a:	6034      	strne	r4, [r6, #0]
 801135c:	6833      	ldr	r3, [r6, #0]
 801135e:	441a      	add	r2, r3
 8011360:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011368:	bf08      	it	eq
 801136a:	9203      	streq	r2, [sp, #12]
 801136c:	2130      	movs	r1, #48	; 0x30
 801136e:	9b03      	ldr	r3, [sp, #12]
 8011370:	4293      	cmp	r3, r2
 8011372:	d2dc      	bcs.n	801132e <__cvt+0x56>
 8011374:	1c5c      	adds	r4, r3, #1
 8011376:	9403      	str	r4, [sp, #12]
 8011378:	7019      	strb	r1, [r3, #0]
 801137a:	e7f8      	b.n	801136e <__cvt+0x96>

0801137c <__exponent>:
 801137c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801137e:	4603      	mov	r3, r0
 8011380:	2900      	cmp	r1, #0
 8011382:	bfb8      	it	lt
 8011384:	4249      	neglt	r1, r1
 8011386:	f803 2b02 	strb.w	r2, [r3], #2
 801138a:	bfb4      	ite	lt
 801138c:	222d      	movlt	r2, #45	; 0x2d
 801138e:	222b      	movge	r2, #43	; 0x2b
 8011390:	2909      	cmp	r1, #9
 8011392:	7042      	strb	r2, [r0, #1]
 8011394:	dd2a      	ble.n	80113ec <__exponent+0x70>
 8011396:	f10d 0407 	add.w	r4, sp, #7
 801139a:	46a4      	mov	ip, r4
 801139c:	270a      	movs	r7, #10
 801139e:	46a6      	mov	lr, r4
 80113a0:	460a      	mov	r2, r1
 80113a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80113a6:	fb07 1516 	mls	r5, r7, r6, r1
 80113aa:	3530      	adds	r5, #48	; 0x30
 80113ac:	2a63      	cmp	r2, #99	; 0x63
 80113ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80113b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80113b6:	4631      	mov	r1, r6
 80113b8:	dcf1      	bgt.n	801139e <__exponent+0x22>
 80113ba:	3130      	adds	r1, #48	; 0x30
 80113bc:	f1ae 0502 	sub.w	r5, lr, #2
 80113c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80113c4:	1c44      	adds	r4, r0, #1
 80113c6:	4629      	mov	r1, r5
 80113c8:	4561      	cmp	r1, ip
 80113ca:	d30a      	bcc.n	80113e2 <__exponent+0x66>
 80113cc:	f10d 0209 	add.w	r2, sp, #9
 80113d0:	eba2 020e 	sub.w	r2, r2, lr
 80113d4:	4565      	cmp	r5, ip
 80113d6:	bf88      	it	hi
 80113d8:	2200      	movhi	r2, #0
 80113da:	4413      	add	r3, r2
 80113dc:	1a18      	subs	r0, r3, r0
 80113de:	b003      	add	sp, #12
 80113e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80113ea:	e7ed      	b.n	80113c8 <__exponent+0x4c>
 80113ec:	2330      	movs	r3, #48	; 0x30
 80113ee:	3130      	adds	r1, #48	; 0x30
 80113f0:	7083      	strb	r3, [r0, #2]
 80113f2:	70c1      	strb	r1, [r0, #3]
 80113f4:	1d03      	adds	r3, r0, #4
 80113f6:	e7f1      	b.n	80113dc <__exponent+0x60>

080113f8 <_printf_float>:
 80113f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113fc:	b08b      	sub	sp, #44	; 0x2c
 80113fe:	460c      	mov	r4, r1
 8011400:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011404:	4616      	mov	r6, r2
 8011406:	461f      	mov	r7, r3
 8011408:	4605      	mov	r5, r0
 801140a:	f001 f9b7 	bl	801277c <_localeconv_r>
 801140e:	f8d0 b000 	ldr.w	fp, [r0]
 8011412:	4658      	mov	r0, fp
 8011414:	f7ee ff7c 	bl	8000310 <strlen>
 8011418:	2300      	movs	r3, #0
 801141a:	9308      	str	r3, [sp, #32]
 801141c:	f8d8 3000 	ldr.w	r3, [r8]
 8011420:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011424:	6822      	ldr	r2, [r4, #0]
 8011426:	3307      	adds	r3, #7
 8011428:	f023 0307 	bic.w	r3, r3, #7
 801142c:	f103 0108 	add.w	r1, r3, #8
 8011430:	f8c8 1000 	str.w	r1, [r8]
 8011434:	4682      	mov	sl, r0
 8011436:	e9d3 0100 	ldrd	r0, r1, [r3]
 801143a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801143e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80116a0 <_printf_float+0x2a8>
 8011442:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011446:	eeb0 6bc0 	vabs.f64	d6, d0
 801144a:	eeb4 6b47 	vcmp.f64	d6, d7
 801144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011452:	dd24      	ble.n	801149e <_printf_float+0xa6>
 8011454:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801145c:	d502      	bpl.n	8011464 <_printf_float+0x6c>
 801145e:	232d      	movs	r3, #45	; 0x2d
 8011460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011464:	4b90      	ldr	r3, [pc, #576]	; (80116a8 <_printf_float+0x2b0>)
 8011466:	4891      	ldr	r0, [pc, #580]	; (80116ac <_printf_float+0x2b4>)
 8011468:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801146c:	bf94      	ite	ls
 801146e:	4698      	movls	r8, r3
 8011470:	4680      	movhi	r8, r0
 8011472:	2303      	movs	r3, #3
 8011474:	6123      	str	r3, [r4, #16]
 8011476:	f022 0204 	bic.w	r2, r2, #4
 801147a:	2300      	movs	r3, #0
 801147c:	6022      	str	r2, [r4, #0]
 801147e:	9304      	str	r3, [sp, #16]
 8011480:	9700      	str	r7, [sp, #0]
 8011482:	4633      	mov	r3, r6
 8011484:	aa09      	add	r2, sp, #36	; 0x24
 8011486:	4621      	mov	r1, r4
 8011488:	4628      	mov	r0, r5
 801148a:	f000 f9d3 	bl	8011834 <_printf_common>
 801148e:	3001      	adds	r0, #1
 8011490:	f040 808a 	bne.w	80115a8 <_printf_float+0x1b0>
 8011494:	f04f 30ff 	mov.w	r0, #4294967295
 8011498:	b00b      	add	sp, #44	; 0x2c
 801149a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801149e:	eeb4 0b40 	vcmp.f64	d0, d0
 80114a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a6:	d709      	bvc.n	80114bc <_printf_float+0xc4>
 80114a8:	ee10 3a90 	vmov	r3, s1
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	bfbc      	itt	lt
 80114b0:	232d      	movlt	r3, #45	; 0x2d
 80114b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80114b6:	487e      	ldr	r0, [pc, #504]	; (80116b0 <_printf_float+0x2b8>)
 80114b8:	4b7e      	ldr	r3, [pc, #504]	; (80116b4 <_printf_float+0x2bc>)
 80114ba:	e7d5      	b.n	8011468 <_printf_float+0x70>
 80114bc:	6863      	ldr	r3, [r4, #4]
 80114be:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80114c2:	9104      	str	r1, [sp, #16]
 80114c4:	1c59      	adds	r1, r3, #1
 80114c6:	d13c      	bne.n	8011542 <_printf_float+0x14a>
 80114c8:	2306      	movs	r3, #6
 80114ca:	6063      	str	r3, [r4, #4]
 80114cc:	2300      	movs	r3, #0
 80114ce:	9303      	str	r3, [sp, #12]
 80114d0:	ab08      	add	r3, sp, #32
 80114d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80114d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80114da:	ab07      	add	r3, sp, #28
 80114dc:	6861      	ldr	r1, [r4, #4]
 80114de:	9300      	str	r3, [sp, #0]
 80114e0:	6022      	str	r2, [r4, #0]
 80114e2:	f10d 031b 	add.w	r3, sp, #27
 80114e6:	4628      	mov	r0, r5
 80114e8:	f7ff fef6 	bl	80112d8 <__cvt>
 80114ec:	9b04      	ldr	r3, [sp, #16]
 80114ee:	9907      	ldr	r1, [sp, #28]
 80114f0:	2b47      	cmp	r3, #71	; 0x47
 80114f2:	4680      	mov	r8, r0
 80114f4:	d108      	bne.n	8011508 <_printf_float+0x110>
 80114f6:	1cc8      	adds	r0, r1, #3
 80114f8:	db02      	blt.n	8011500 <_printf_float+0x108>
 80114fa:	6863      	ldr	r3, [r4, #4]
 80114fc:	4299      	cmp	r1, r3
 80114fe:	dd41      	ble.n	8011584 <_printf_float+0x18c>
 8011500:	f1a9 0902 	sub.w	r9, r9, #2
 8011504:	fa5f f989 	uxtb.w	r9, r9
 8011508:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801150c:	d820      	bhi.n	8011550 <_printf_float+0x158>
 801150e:	3901      	subs	r1, #1
 8011510:	464a      	mov	r2, r9
 8011512:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011516:	9107      	str	r1, [sp, #28]
 8011518:	f7ff ff30 	bl	801137c <__exponent>
 801151c:	9a08      	ldr	r2, [sp, #32]
 801151e:	9004      	str	r0, [sp, #16]
 8011520:	1813      	adds	r3, r2, r0
 8011522:	2a01      	cmp	r2, #1
 8011524:	6123      	str	r3, [r4, #16]
 8011526:	dc02      	bgt.n	801152e <_printf_float+0x136>
 8011528:	6822      	ldr	r2, [r4, #0]
 801152a:	07d2      	lsls	r2, r2, #31
 801152c:	d501      	bpl.n	8011532 <_printf_float+0x13a>
 801152e:	3301      	adds	r3, #1
 8011530:	6123      	str	r3, [r4, #16]
 8011532:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d0a2      	beq.n	8011480 <_printf_float+0x88>
 801153a:	232d      	movs	r3, #45	; 0x2d
 801153c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011540:	e79e      	b.n	8011480 <_printf_float+0x88>
 8011542:	9904      	ldr	r1, [sp, #16]
 8011544:	2947      	cmp	r1, #71	; 0x47
 8011546:	d1c1      	bne.n	80114cc <_printf_float+0xd4>
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1bf      	bne.n	80114cc <_printf_float+0xd4>
 801154c:	2301      	movs	r3, #1
 801154e:	e7bc      	b.n	80114ca <_printf_float+0xd2>
 8011550:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011554:	d118      	bne.n	8011588 <_printf_float+0x190>
 8011556:	2900      	cmp	r1, #0
 8011558:	6863      	ldr	r3, [r4, #4]
 801155a:	dd0b      	ble.n	8011574 <_printf_float+0x17c>
 801155c:	6121      	str	r1, [r4, #16]
 801155e:	b913      	cbnz	r3, 8011566 <_printf_float+0x16e>
 8011560:	6822      	ldr	r2, [r4, #0]
 8011562:	07d0      	lsls	r0, r2, #31
 8011564:	d502      	bpl.n	801156c <_printf_float+0x174>
 8011566:	3301      	adds	r3, #1
 8011568:	440b      	add	r3, r1
 801156a:	6123      	str	r3, [r4, #16]
 801156c:	2300      	movs	r3, #0
 801156e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011570:	9304      	str	r3, [sp, #16]
 8011572:	e7de      	b.n	8011532 <_printf_float+0x13a>
 8011574:	b913      	cbnz	r3, 801157c <_printf_float+0x184>
 8011576:	6822      	ldr	r2, [r4, #0]
 8011578:	07d2      	lsls	r2, r2, #31
 801157a:	d501      	bpl.n	8011580 <_printf_float+0x188>
 801157c:	3302      	adds	r3, #2
 801157e:	e7f4      	b.n	801156a <_printf_float+0x172>
 8011580:	2301      	movs	r3, #1
 8011582:	e7f2      	b.n	801156a <_printf_float+0x172>
 8011584:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011588:	9b08      	ldr	r3, [sp, #32]
 801158a:	4299      	cmp	r1, r3
 801158c:	db05      	blt.n	801159a <_printf_float+0x1a2>
 801158e:	6823      	ldr	r3, [r4, #0]
 8011590:	6121      	str	r1, [r4, #16]
 8011592:	07d8      	lsls	r0, r3, #31
 8011594:	d5ea      	bpl.n	801156c <_printf_float+0x174>
 8011596:	1c4b      	adds	r3, r1, #1
 8011598:	e7e7      	b.n	801156a <_printf_float+0x172>
 801159a:	2900      	cmp	r1, #0
 801159c:	bfd4      	ite	le
 801159e:	f1c1 0202 	rsble	r2, r1, #2
 80115a2:	2201      	movgt	r2, #1
 80115a4:	4413      	add	r3, r2
 80115a6:	e7e0      	b.n	801156a <_printf_float+0x172>
 80115a8:	6823      	ldr	r3, [r4, #0]
 80115aa:	055a      	lsls	r2, r3, #21
 80115ac:	d407      	bmi.n	80115be <_printf_float+0x1c6>
 80115ae:	6923      	ldr	r3, [r4, #16]
 80115b0:	4642      	mov	r2, r8
 80115b2:	4631      	mov	r1, r6
 80115b4:	4628      	mov	r0, r5
 80115b6:	47b8      	blx	r7
 80115b8:	3001      	adds	r0, #1
 80115ba:	d12a      	bne.n	8011612 <_printf_float+0x21a>
 80115bc:	e76a      	b.n	8011494 <_printf_float+0x9c>
 80115be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80115c2:	f240 80e2 	bls.w	801178a <_printf_float+0x392>
 80115c6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80115ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80115ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d2:	d133      	bne.n	801163c <_printf_float+0x244>
 80115d4:	4a38      	ldr	r2, [pc, #224]	; (80116b8 <_printf_float+0x2c0>)
 80115d6:	2301      	movs	r3, #1
 80115d8:	4631      	mov	r1, r6
 80115da:	4628      	mov	r0, r5
 80115dc:	47b8      	blx	r7
 80115de:	3001      	adds	r0, #1
 80115e0:	f43f af58 	beq.w	8011494 <_printf_float+0x9c>
 80115e4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	db02      	blt.n	80115f2 <_printf_float+0x1fa>
 80115ec:	6823      	ldr	r3, [r4, #0]
 80115ee:	07d8      	lsls	r0, r3, #31
 80115f0:	d50f      	bpl.n	8011612 <_printf_float+0x21a>
 80115f2:	4653      	mov	r3, sl
 80115f4:	465a      	mov	r2, fp
 80115f6:	4631      	mov	r1, r6
 80115f8:	4628      	mov	r0, r5
 80115fa:	47b8      	blx	r7
 80115fc:	3001      	adds	r0, #1
 80115fe:	f43f af49 	beq.w	8011494 <_printf_float+0x9c>
 8011602:	f04f 0800 	mov.w	r8, #0
 8011606:	f104 091a 	add.w	r9, r4, #26
 801160a:	9b08      	ldr	r3, [sp, #32]
 801160c:	3b01      	subs	r3, #1
 801160e:	4543      	cmp	r3, r8
 8011610:	dc09      	bgt.n	8011626 <_printf_float+0x22e>
 8011612:	6823      	ldr	r3, [r4, #0]
 8011614:	079b      	lsls	r3, r3, #30
 8011616:	f100 8108 	bmi.w	801182a <_printf_float+0x432>
 801161a:	68e0      	ldr	r0, [r4, #12]
 801161c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801161e:	4298      	cmp	r0, r3
 8011620:	bfb8      	it	lt
 8011622:	4618      	movlt	r0, r3
 8011624:	e738      	b.n	8011498 <_printf_float+0xa0>
 8011626:	2301      	movs	r3, #1
 8011628:	464a      	mov	r2, r9
 801162a:	4631      	mov	r1, r6
 801162c:	4628      	mov	r0, r5
 801162e:	47b8      	blx	r7
 8011630:	3001      	adds	r0, #1
 8011632:	f43f af2f 	beq.w	8011494 <_printf_float+0x9c>
 8011636:	f108 0801 	add.w	r8, r8, #1
 801163a:	e7e6      	b.n	801160a <_printf_float+0x212>
 801163c:	9b07      	ldr	r3, [sp, #28]
 801163e:	2b00      	cmp	r3, #0
 8011640:	dc3c      	bgt.n	80116bc <_printf_float+0x2c4>
 8011642:	4a1d      	ldr	r2, [pc, #116]	; (80116b8 <_printf_float+0x2c0>)
 8011644:	2301      	movs	r3, #1
 8011646:	4631      	mov	r1, r6
 8011648:	4628      	mov	r0, r5
 801164a:	47b8      	blx	r7
 801164c:	3001      	adds	r0, #1
 801164e:	f43f af21 	beq.w	8011494 <_printf_float+0x9c>
 8011652:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011656:	4313      	orrs	r3, r2
 8011658:	d102      	bne.n	8011660 <_printf_float+0x268>
 801165a:	6823      	ldr	r3, [r4, #0]
 801165c:	07d9      	lsls	r1, r3, #31
 801165e:	d5d8      	bpl.n	8011612 <_printf_float+0x21a>
 8011660:	4653      	mov	r3, sl
 8011662:	465a      	mov	r2, fp
 8011664:	4631      	mov	r1, r6
 8011666:	4628      	mov	r0, r5
 8011668:	47b8      	blx	r7
 801166a:	3001      	adds	r0, #1
 801166c:	f43f af12 	beq.w	8011494 <_printf_float+0x9c>
 8011670:	f04f 0900 	mov.w	r9, #0
 8011674:	f104 0a1a 	add.w	sl, r4, #26
 8011678:	9b07      	ldr	r3, [sp, #28]
 801167a:	425b      	negs	r3, r3
 801167c:	454b      	cmp	r3, r9
 801167e:	dc01      	bgt.n	8011684 <_printf_float+0x28c>
 8011680:	9b08      	ldr	r3, [sp, #32]
 8011682:	e795      	b.n	80115b0 <_printf_float+0x1b8>
 8011684:	2301      	movs	r3, #1
 8011686:	4652      	mov	r2, sl
 8011688:	4631      	mov	r1, r6
 801168a:	4628      	mov	r0, r5
 801168c:	47b8      	blx	r7
 801168e:	3001      	adds	r0, #1
 8011690:	f43f af00 	beq.w	8011494 <_printf_float+0x9c>
 8011694:	f109 0901 	add.w	r9, r9, #1
 8011698:	e7ee      	b.n	8011678 <_printf_float+0x280>
 801169a:	bf00      	nop
 801169c:	f3af 8000 	nop.w
 80116a0:	ffffffff 	.word	0xffffffff
 80116a4:	7fefffff 	.word	0x7fefffff
 80116a8:	080147e4 	.word	0x080147e4
 80116ac:	080147e8 	.word	0x080147e8
 80116b0:	080147f0 	.word	0x080147f0
 80116b4:	080147ec 	.word	0x080147ec
 80116b8:	080147f4 	.word	0x080147f4
 80116bc:	9a08      	ldr	r2, [sp, #32]
 80116be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80116c0:	429a      	cmp	r2, r3
 80116c2:	bfa8      	it	ge
 80116c4:	461a      	movge	r2, r3
 80116c6:	2a00      	cmp	r2, #0
 80116c8:	4691      	mov	r9, r2
 80116ca:	dc38      	bgt.n	801173e <_printf_float+0x346>
 80116cc:	2300      	movs	r3, #0
 80116ce:	9305      	str	r3, [sp, #20]
 80116d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80116d4:	f104 021a 	add.w	r2, r4, #26
 80116d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80116da:	9905      	ldr	r1, [sp, #20]
 80116dc:	9304      	str	r3, [sp, #16]
 80116de:	eba3 0309 	sub.w	r3, r3, r9
 80116e2:	428b      	cmp	r3, r1
 80116e4:	dc33      	bgt.n	801174e <_printf_float+0x356>
 80116e6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	db3c      	blt.n	8011768 <_printf_float+0x370>
 80116ee:	6823      	ldr	r3, [r4, #0]
 80116f0:	07da      	lsls	r2, r3, #31
 80116f2:	d439      	bmi.n	8011768 <_printf_float+0x370>
 80116f4:	9a08      	ldr	r2, [sp, #32]
 80116f6:	9b04      	ldr	r3, [sp, #16]
 80116f8:	9907      	ldr	r1, [sp, #28]
 80116fa:	1ad3      	subs	r3, r2, r3
 80116fc:	eba2 0901 	sub.w	r9, r2, r1
 8011700:	4599      	cmp	r9, r3
 8011702:	bfa8      	it	ge
 8011704:	4699      	movge	r9, r3
 8011706:	f1b9 0f00 	cmp.w	r9, #0
 801170a:	dc35      	bgt.n	8011778 <_printf_float+0x380>
 801170c:	f04f 0800 	mov.w	r8, #0
 8011710:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011714:	f104 0a1a 	add.w	sl, r4, #26
 8011718:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801171c:	1a9b      	subs	r3, r3, r2
 801171e:	eba3 0309 	sub.w	r3, r3, r9
 8011722:	4543      	cmp	r3, r8
 8011724:	f77f af75 	ble.w	8011612 <_printf_float+0x21a>
 8011728:	2301      	movs	r3, #1
 801172a:	4652      	mov	r2, sl
 801172c:	4631      	mov	r1, r6
 801172e:	4628      	mov	r0, r5
 8011730:	47b8      	blx	r7
 8011732:	3001      	adds	r0, #1
 8011734:	f43f aeae 	beq.w	8011494 <_printf_float+0x9c>
 8011738:	f108 0801 	add.w	r8, r8, #1
 801173c:	e7ec      	b.n	8011718 <_printf_float+0x320>
 801173e:	4613      	mov	r3, r2
 8011740:	4631      	mov	r1, r6
 8011742:	4642      	mov	r2, r8
 8011744:	4628      	mov	r0, r5
 8011746:	47b8      	blx	r7
 8011748:	3001      	adds	r0, #1
 801174a:	d1bf      	bne.n	80116cc <_printf_float+0x2d4>
 801174c:	e6a2      	b.n	8011494 <_printf_float+0x9c>
 801174e:	2301      	movs	r3, #1
 8011750:	4631      	mov	r1, r6
 8011752:	4628      	mov	r0, r5
 8011754:	9204      	str	r2, [sp, #16]
 8011756:	47b8      	blx	r7
 8011758:	3001      	adds	r0, #1
 801175a:	f43f ae9b 	beq.w	8011494 <_printf_float+0x9c>
 801175e:	9b05      	ldr	r3, [sp, #20]
 8011760:	9a04      	ldr	r2, [sp, #16]
 8011762:	3301      	adds	r3, #1
 8011764:	9305      	str	r3, [sp, #20]
 8011766:	e7b7      	b.n	80116d8 <_printf_float+0x2e0>
 8011768:	4653      	mov	r3, sl
 801176a:	465a      	mov	r2, fp
 801176c:	4631      	mov	r1, r6
 801176e:	4628      	mov	r0, r5
 8011770:	47b8      	blx	r7
 8011772:	3001      	adds	r0, #1
 8011774:	d1be      	bne.n	80116f4 <_printf_float+0x2fc>
 8011776:	e68d      	b.n	8011494 <_printf_float+0x9c>
 8011778:	9a04      	ldr	r2, [sp, #16]
 801177a:	464b      	mov	r3, r9
 801177c:	4442      	add	r2, r8
 801177e:	4631      	mov	r1, r6
 8011780:	4628      	mov	r0, r5
 8011782:	47b8      	blx	r7
 8011784:	3001      	adds	r0, #1
 8011786:	d1c1      	bne.n	801170c <_printf_float+0x314>
 8011788:	e684      	b.n	8011494 <_printf_float+0x9c>
 801178a:	9a08      	ldr	r2, [sp, #32]
 801178c:	2a01      	cmp	r2, #1
 801178e:	dc01      	bgt.n	8011794 <_printf_float+0x39c>
 8011790:	07db      	lsls	r3, r3, #31
 8011792:	d537      	bpl.n	8011804 <_printf_float+0x40c>
 8011794:	2301      	movs	r3, #1
 8011796:	4642      	mov	r2, r8
 8011798:	4631      	mov	r1, r6
 801179a:	4628      	mov	r0, r5
 801179c:	47b8      	blx	r7
 801179e:	3001      	adds	r0, #1
 80117a0:	f43f ae78 	beq.w	8011494 <_printf_float+0x9c>
 80117a4:	4653      	mov	r3, sl
 80117a6:	465a      	mov	r2, fp
 80117a8:	4631      	mov	r1, r6
 80117aa:	4628      	mov	r0, r5
 80117ac:	47b8      	blx	r7
 80117ae:	3001      	adds	r0, #1
 80117b0:	f43f ae70 	beq.w	8011494 <_printf_float+0x9c>
 80117b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80117b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80117bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c0:	d01b      	beq.n	80117fa <_printf_float+0x402>
 80117c2:	9b08      	ldr	r3, [sp, #32]
 80117c4:	f108 0201 	add.w	r2, r8, #1
 80117c8:	3b01      	subs	r3, #1
 80117ca:	4631      	mov	r1, r6
 80117cc:	4628      	mov	r0, r5
 80117ce:	47b8      	blx	r7
 80117d0:	3001      	adds	r0, #1
 80117d2:	d10e      	bne.n	80117f2 <_printf_float+0x3fa>
 80117d4:	e65e      	b.n	8011494 <_printf_float+0x9c>
 80117d6:	2301      	movs	r3, #1
 80117d8:	464a      	mov	r2, r9
 80117da:	4631      	mov	r1, r6
 80117dc:	4628      	mov	r0, r5
 80117de:	47b8      	blx	r7
 80117e0:	3001      	adds	r0, #1
 80117e2:	f43f ae57 	beq.w	8011494 <_printf_float+0x9c>
 80117e6:	f108 0801 	add.w	r8, r8, #1
 80117ea:	9b08      	ldr	r3, [sp, #32]
 80117ec:	3b01      	subs	r3, #1
 80117ee:	4543      	cmp	r3, r8
 80117f0:	dcf1      	bgt.n	80117d6 <_printf_float+0x3de>
 80117f2:	9b04      	ldr	r3, [sp, #16]
 80117f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80117f8:	e6db      	b.n	80115b2 <_printf_float+0x1ba>
 80117fa:	f04f 0800 	mov.w	r8, #0
 80117fe:	f104 091a 	add.w	r9, r4, #26
 8011802:	e7f2      	b.n	80117ea <_printf_float+0x3f2>
 8011804:	2301      	movs	r3, #1
 8011806:	4642      	mov	r2, r8
 8011808:	e7df      	b.n	80117ca <_printf_float+0x3d2>
 801180a:	2301      	movs	r3, #1
 801180c:	464a      	mov	r2, r9
 801180e:	4631      	mov	r1, r6
 8011810:	4628      	mov	r0, r5
 8011812:	47b8      	blx	r7
 8011814:	3001      	adds	r0, #1
 8011816:	f43f ae3d 	beq.w	8011494 <_printf_float+0x9c>
 801181a:	f108 0801 	add.w	r8, r8, #1
 801181e:	68e3      	ldr	r3, [r4, #12]
 8011820:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011822:	1a5b      	subs	r3, r3, r1
 8011824:	4543      	cmp	r3, r8
 8011826:	dcf0      	bgt.n	801180a <_printf_float+0x412>
 8011828:	e6f7      	b.n	801161a <_printf_float+0x222>
 801182a:	f04f 0800 	mov.w	r8, #0
 801182e:	f104 0919 	add.w	r9, r4, #25
 8011832:	e7f4      	b.n	801181e <_printf_float+0x426>

08011834 <_printf_common>:
 8011834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011838:	4616      	mov	r6, r2
 801183a:	4699      	mov	r9, r3
 801183c:	688a      	ldr	r2, [r1, #8]
 801183e:	690b      	ldr	r3, [r1, #16]
 8011840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011844:	4293      	cmp	r3, r2
 8011846:	bfb8      	it	lt
 8011848:	4613      	movlt	r3, r2
 801184a:	6033      	str	r3, [r6, #0]
 801184c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011850:	4607      	mov	r7, r0
 8011852:	460c      	mov	r4, r1
 8011854:	b10a      	cbz	r2, 801185a <_printf_common+0x26>
 8011856:	3301      	adds	r3, #1
 8011858:	6033      	str	r3, [r6, #0]
 801185a:	6823      	ldr	r3, [r4, #0]
 801185c:	0699      	lsls	r1, r3, #26
 801185e:	bf42      	ittt	mi
 8011860:	6833      	ldrmi	r3, [r6, #0]
 8011862:	3302      	addmi	r3, #2
 8011864:	6033      	strmi	r3, [r6, #0]
 8011866:	6825      	ldr	r5, [r4, #0]
 8011868:	f015 0506 	ands.w	r5, r5, #6
 801186c:	d106      	bne.n	801187c <_printf_common+0x48>
 801186e:	f104 0a19 	add.w	sl, r4, #25
 8011872:	68e3      	ldr	r3, [r4, #12]
 8011874:	6832      	ldr	r2, [r6, #0]
 8011876:	1a9b      	subs	r3, r3, r2
 8011878:	42ab      	cmp	r3, r5
 801187a:	dc26      	bgt.n	80118ca <_printf_common+0x96>
 801187c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011880:	1e13      	subs	r3, r2, #0
 8011882:	6822      	ldr	r2, [r4, #0]
 8011884:	bf18      	it	ne
 8011886:	2301      	movne	r3, #1
 8011888:	0692      	lsls	r2, r2, #26
 801188a:	d42b      	bmi.n	80118e4 <_printf_common+0xb0>
 801188c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011890:	4649      	mov	r1, r9
 8011892:	4638      	mov	r0, r7
 8011894:	47c0      	blx	r8
 8011896:	3001      	adds	r0, #1
 8011898:	d01e      	beq.n	80118d8 <_printf_common+0xa4>
 801189a:	6823      	ldr	r3, [r4, #0]
 801189c:	68e5      	ldr	r5, [r4, #12]
 801189e:	6832      	ldr	r2, [r6, #0]
 80118a0:	f003 0306 	and.w	r3, r3, #6
 80118a4:	2b04      	cmp	r3, #4
 80118a6:	bf08      	it	eq
 80118a8:	1aad      	subeq	r5, r5, r2
 80118aa:	68a3      	ldr	r3, [r4, #8]
 80118ac:	6922      	ldr	r2, [r4, #16]
 80118ae:	bf0c      	ite	eq
 80118b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118b4:	2500      	movne	r5, #0
 80118b6:	4293      	cmp	r3, r2
 80118b8:	bfc4      	itt	gt
 80118ba:	1a9b      	subgt	r3, r3, r2
 80118bc:	18ed      	addgt	r5, r5, r3
 80118be:	2600      	movs	r6, #0
 80118c0:	341a      	adds	r4, #26
 80118c2:	42b5      	cmp	r5, r6
 80118c4:	d11a      	bne.n	80118fc <_printf_common+0xc8>
 80118c6:	2000      	movs	r0, #0
 80118c8:	e008      	b.n	80118dc <_printf_common+0xa8>
 80118ca:	2301      	movs	r3, #1
 80118cc:	4652      	mov	r2, sl
 80118ce:	4649      	mov	r1, r9
 80118d0:	4638      	mov	r0, r7
 80118d2:	47c0      	blx	r8
 80118d4:	3001      	adds	r0, #1
 80118d6:	d103      	bne.n	80118e0 <_printf_common+0xac>
 80118d8:	f04f 30ff 	mov.w	r0, #4294967295
 80118dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118e0:	3501      	adds	r5, #1
 80118e2:	e7c6      	b.n	8011872 <_printf_common+0x3e>
 80118e4:	18e1      	adds	r1, r4, r3
 80118e6:	1c5a      	adds	r2, r3, #1
 80118e8:	2030      	movs	r0, #48	; 0x30
 80118ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80118ee:	4422      	add	r2, r4
 80118f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80118f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80118f8:	3302      	adds	r3, #2
 80118fa:	e7c7      	b.n	801188c <_printf_common+0x58>
 80118fc:	2301      	movs	r3, #1
 80118fe:	4622      	mov	r2, r4
 8011900:	4649      	mov	r1, r9
 8011902:	4638      	mov	r0, r7
 8011904:	47c0      	blx	r8
 8011906:	3001      	adds	r0, #1
 8011908:	d0e6      	beq.n	80118d8 <_printf_common+0xa4>
 801190a:	3601      	adds	r6, #1
 801190c:	e7d9      	b.n	80118c2 <_printf_common+0x8e>
	...

08011910 <_printf_i>:
 8011910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011914:	460c      	mov	r4, r1
 8011916:	4691      	mov	r9, r2
 8011918:	7e27      	ldrb	r7, [r4, #24]
 801191a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801191c:	2f78      	cmp	r7, #120	; 0x78
 801191e:	4680      	mov	r8, r0
 8011920:	469a      	mov	sl, r3
 8011922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011926:	d807      	bhi.n	8011938 <_printf_i+0x28>
 8011928:	2f62      	cmp	r7, #98	; 0x62
 801192a:	d80a      	bhi.n	8011942 <_printf_i+0x32>
 801192c:	2f00      	cmp	r7, #0
 801192e:	f000 80d8 	beq.w	8011ae2 <_printf_i+0x1d2>
 8011932:	2f58      	cmp	r7, #88	; 0x58
 8011934:	f000 80a3 	beq.w	8011a7e <_printf_i+0x16e>
 8011938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801193c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011940:	e03a      	b.n	80119b8 <_printf_i+0xa8>
 8011942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011946:	2b15      	cmp	r3, #21
 8011948:	d8f6      	bhi.n	8011938 <_printf_i+0x28>
 801194a:	a001      	add	r0, pc, #4	; (adr r0, 8011950 <_printf_i+0x40>)
 801194c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011950:	080119a9 	.word	0x080119a9
 8011954:	080119bd 	.word	0x080119bd
 8011958:	08011939 	.word	0x08011939
 801195c:	08011939 	.word	0x08011939
 8011960:	08011939 	.word	0x08011939
 8011964:	08011939 	.word	0x08011939
 8011968:	080119bd 	.word	0x080119bd
 801196c:	08011939 	.word	0x08011939
 8011970:	08011939 	.word	0x08011939
 8011974:	08011939 	.word	0x08011939
 8011978:	08011939 	.word	0x08011939
 801197c:	08011ac9 	.word	0x08011ac9
 8011980:	080119ed 	.word	0x080119ed
 8011984:	08011aab 	.word	0x08011aab
 8011988:	08011939 	.word	0x08011939
 801198c:	08011939 	.word	0x08011939
 8011990:	08011aeb 	.word	0x08011aeb
 8011994:	08011939 	.word	0x08011939
 8011998:	080119ed 	.word	0x080119ed
 801199c:	08011939 	.word	0x08011939
 80119a0:	08011939 	.word	0x08011939
 80119a4:	08011ab3 	.word	0x08011ab3
 80119a8:	680b      	ldr	r3, [r1, #0]
 80119aa:	1d1a      	adds	r2, r3, #4
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	600a      	str	r2, [r1, #0]
 80119b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80119b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119b8:	2301      	movs	r3, #1
 80119ba:	e0a3      	b.n	8011b04 <_printf_i+0x1f4>
 80119bc:	6825      	ldr	r5, [r4, #0]
 80119be:	6808      	ldr	r0, [r1, #0]
 80119c0:	062e      	lsls	r6, r5, #24
 80119c2:	f100 0304 	add.w	r3, r0, #4
 80119c6:	d50a      	bpl.n	80119de <_printf_i+0xce>
 80119c8:	6805      	ldr	r5, [r0, #0]
 80119ca:	600b      	str	r3, [r1, #0]
 80119cc:	2d00      	cmp	r5, #0
 80119ce:	da03      	bge.n	80119d8 <_printf_i+0xc8>
 80119d0:	232d      	movs	r3, #45	; 0x2d
 80119d2:	426d      	negs	r5, r5
 80119d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119d8:	485e      	ldr	r0, [pc, #376]	; (8011b54 <_printf_i+0x244>)
 80119da:	230a      	movs	r3, #10
 80119dc:	e019      	b.n	8011a12 <_printf_i+0x102>
 80119de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80119e2:	6805      	ldr	r5, [r0, #0]
 80119e4:	600b      	str	r3, [r1, #0]
 80119e6:	bf18      	it	ne
 80119e8:	b22d      	sxthne	r5, r5
 80119ea:	e7ef      	b.n	80119cc <_printf_i+0xbc>
 80119ec:	680b      	ldr	r3, [r1, #0]
 80119ee:	6825      	ldr	r5, [r4, #0]
 80119f0:	1d18      	adds	r0, r3, #4
 80119f2:	6008      	str	r0, [r1, #0]
 80119f4:	0628      	lsls	r0, r5, #24
 80119f6:	d501      	bpl.n	80119fc <_printf_i+0xec>
 80119f8:	681d      	ldr	r5, [r3, #0]
 80119fa:	e002      	b.n	8011a02 <_printf_i+0xf2>
 80119fc:	0669      	lsls	r1, r5, #25
 80119fe:	d5fb      	bpl.n	80119f8 <_printf_i+0xe8>
 8011a00:	881d      	ldrh	r5, [r3, #0]
 8011a02:	4854      	ldr	r0, [pc, #336]	; (8011b54 <_printf_i+0x244>)
 8011a04:	2f6f      	cmp	r7, #111	; 0x6f
 8011a06:	bf0c      	ite	eq
 8011a08:	2308      	moveq	r3, #8
 8011a0a:	230a      	movne	r3, #10
 8011a0c:	2100      	movs	r1, #0
 8011a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a12:	6866      	ldr	r6, [r4, #4]
 8011a14:	60a6      	str	r6, [r4, #8]
 8011a16:	2e00      	cmp	r6, #0
 8011a18:	bfa2      	ittt	ge
 8011a1a:	6821      	ldrge	r1, [r4, #0]
 8011a1c:	f021 0104 	bicge.w	r1, r1, #4
 8011a20:	6021      	strge	r1, [r4, #0]
 8011a22:	b90d      	cbnz	r5, 8011a28 <_printf_i+0x118>
 8011a24:	2e00      	cmp	r6, #0
 8011a26:	d04d      	beq.n	8011ac4 <_printf_i+0x1b4>
 8011a28:	4616      	mov	r6, r2
 8011a2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011a2e:	fb03 5711 	mls	r7, r3, r1, r5
 8011a32:	5dc7      	ldrb	r7, [r0, r7]
 8011a34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011a38:	462f      	mov	r7, r5
 8011a3a:	42bb      	cmp	r3, r7
 8011a3c:	460d      	mov	r5, r1
 8011a3e:	d9f4      	bls.n	8011a2a <_printf_i+0x11a>
 8011a40:	2b08      	cmp	r3, #8
 8011a42:	d10b      	bne.n	8011a5c <_printf_i+0x14c>
 8011a44:	6823      	ldr	r3, [r4, #0]
 8011a46:	07df      	lsls	r7, r3, #31
 8011a48:	d508      	bpl.n	8011a5c <_printf_i+0x14c>
 8011a4a:	6923      	ldr	r3, [r4, #16]
 8011a4c:	6861      	ldr	r1, [r4, #4]
 8011a4e:	4299      	cmp	r1, r3
 8011a50:	bfde      	ittt	le
 8011a52:	2330      	movle	r3, #48	; 0x30
 8011a54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011a58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011a5c:	1b92      	subs	r2, r2, r6
 8011a5e:	6122      	str	r2, [r4, #16]
 8011a60:	f8cd a000 	str.w	sl, [sp]
 8011a64:	464b      	mov	r3, r9
 8011a66:	aa03      	add	r2, sp, #12
 8011a68:	4621      	mov	r1, r4
 8011a6a:	4640      	mov	r0, r8
 8011a6c:	f7ff fee2 	bl	8011834 <_printf_common>
 8011a70:	3001      	adds	r0, #1
 8011a72:	d14c      	bne.n	8011b0e <_printf_i+0x1fe>
 8011a74:	f04f 30ff 	mov.w	r0, #4294967295
 8011a78:	b004      	add	sp, #16
 8011a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a7e:	4835      	ldr	r0, [pc, #212]	; (8011b54 <_printf_i+0x244>)
 8011a80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011a84:	6823      	ldr	r3, [r4, #0]
 8011a86:	680e      	ldr	r6, [r1, #0]
 8011a88:	061f      	lsls	r7, r3, #24
 8011a8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8011a8e:	600e      	str	r6, [r1, #0]
 8011a90:	d514      	bpl.n	8011abc <_printf_i+0x1ac>
 8011a92:	07d9      	lsls	r1, r3, #31
 8011a94:	bf44      	itt	mi
 8011a96:	f043 0320 	orrmi.w	r3, r3, #32
 8011a9a:	6023      	strmi	r3, [r4, #0]
 8011a9c:	b91d      	cbnz	r5, 8011aa6 <_printf_i+0x196>
 8011a9e:	6823      	ldr	r3, [r4, #0]
 8011aa0:	f023 0320 	bic.w	r3, r3, #32
 8011aa4:	6023      	str	r3, [r4, #0]
 8011aa6:	2310      	movs	r3, #16
 8011aa8:	e7b0      	b.n	8011a0c <_printf_i+0xfc>
 8011aaa:	6823      	ldr	r3, [r4, #0]
 8011aac:	f043 0320 	orr.w	r3, r3, #32
 8011ab0:	6023      	str	r3, [r4, #0]
 8011ab2:	2378      	movs	r3, #120	; 0x78
 8011ab4:	4828      	ldr	r0, [pc, #160]	; (8011b58 <_printf_i+0x248>)
 8011ab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011aba:	e7e3      	b.n	8011a84 <_printf_i+0x174>
 8011abc:	065e      	lsls	r6, r3, #25
 8011abe:	bf48      	it	mi
 8011ac0:	b2ad      	uxthmi	r5, r5
 8011ac2:	e7e6      	b.n	8011a92 <_printf_i+0x182>
 8011ac4:	4616      	mov	r6, r2
 8011ac6:	e7bb      	b.n	8011a40 <_printf_i+0x130>
 8011ac8:	680b      	ldr	r3, [r1, #0]
 8011aca:	6826      	ldr	r6, [r4, #0]
 8011acc:	6960      	ldr	r0, [r4, #20]
 8011ace:	1d1d      	adds	r5, r3, #4
 8011ad0:	600d      	str	r5, [r1, #0]
 8011ad2:	0635      	lsls	r5, r6, #24
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	d501      	bpl.n	8011adc <_printf_i+0x1cc>
 8011ad8:	6018      	str	r0, [r3, #0]
 8011ada:	e002      	b.n	8011ae2 <_printf_i+0x1d2>
 8011adc:	0671      	lsls	r1, r6, #25
 8011ade:	d5fb      	bpl.n	8011ad8 <_printf_i+0x1c8>
 8011ae0:	8018      	strh	r0, [r3, #0]
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	6123      	str	r3, [r4, #16]
 8011ae6:	4616      	mov	r6, r2
 8011ae8:	e7ba      	b.n	8011a60 <_printf_i+0x150>
 8011aea:	680b      	ldr	r3, [r1, #0]
 8011aec:	1d1a      	adds	r2, r3, #4
 8011aee:	600a      	str	r2, [r1, #0]
 8011af0:	681e      	ldr	r6, [r3, #0]
 8011af2:	6862      	ldr	r2, [r4, #4]
 8011af4:	2100      	movs	r1, #0
 8011af6:	4630      	mov	r0, r6
 8011af8:	f7ee fc12 	bl	8000320 <memchr>
 8011afc:	b108      	cbz	r0, 8011b02 <_printf_i+0x1f2>
 8011afe:	1b80      	subs	r0, r0, r6
 8011b00:	6060      	str	r0, [r4, #4]
 8011b02:	6863      	ldr	r3, [r4, #4]
 8011b04:	6123      	str	r3, [r4, #16]
 8011b06:	2300      	movs	r3, #0
 8011b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b0c:	e7a8      	b.n	8011a60 <_printf_i+0x150>
 8011b0e:	6923      	ldr	r3, [r4, #16]
 8011b10:	4632      	mov	r2, r6
 8011b12:	4649      	mov	r1, r9
 8011b14:	4640      	mov	r0, r8
 8011b16:	47d0      	blx	sl
 8011b18:	3001      	adds	r0, #1
 8011b1a:	d0ab      	beq.n	8011a74 <_printf_i+0x164>
 8011b1c:	6823      	ldr	r3, [r4, #0]
 8011b1e:	079b      	lsls	r3, r3, #30
 8011b20:	d413      	bmi.n	8011b4a <_printf_i+0x23a>
 8011b22:	68e0      	ldr	r0, [r4, #12]
 8011b24:	9b03      	ldr	r3, [sp, #12]
 8011b26:	4298      	cmp	r0, r3
 8011b28:	bfb8      	it	lt
 8011b2a:	4618      	movlt	r0, r3
 8011b2c:	e7a4      	b.n	8011a78 <_printf_i+0x168>
 8011b2e:	2301      	movs	r3, #1
 8011b30:	4632      	mov	r2, r6
 8011b32:	4649      	mov	r1, r9
 8011b34:	4640      	mov	r0, r8
 8011b36:	47d0      	blx	sl
 8011b38:	3001      	adds	r0, #1
 8011b3a:	d09b      	beq.n	8011a74 <_printf_i+0x164>
 8011b3c:	3501      	adds	r5, #1
 8011b3e:	68e3      	ldr	r3, [r4, #12]
 8011b40:	9903      	ldr	r1, [sp, #12]
 8011b42:	1a5b      	subs	r3, r3, r1
 8011b44:	42ab      	cmp	r3, r5
 8011b46:	dcf2      	bgt.n	8011b2e <_printf_i+0x21e>
 8011b48:	e7eb      	b.n	8011b22 <_printf_i+0x212>
 8011b4a:	2500      	movs	r5, #0
 8011b4c:	f104 0619 	add.w	r6, r4, #25
 8011b50:	e7f5      	b.n	8011b3e <_printf_i+0x22e>
 8011b52:	bf00      	nop
 8011b54:	080147f6 	.word	0x080147f6
 8011b58:	08014807 	.word	0x08014807

08011b5c <quorem>:
 8011b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b60:	6903      	ldr	r3, [r0, #16]
 8011b62:	690c      	ldr	r4, [r1, #16]
 8011b64:	42a3      	cmp	r3, r4
 8011b66:	4607      	mov	r7, r0
 8011b68:	f2c0 8081 	blt.w	8011c6e <quorem+0x112>
 8011b6c:	3c01      	subs	r4, #1
 8011b6e:	f101 0814 	add.w	r8, r1, #20
 8011b72:	f100 0514 	add.w	r5, r0, #20
 8011b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b7a:	9301      	str	r3, [sp, #4]
 8011b7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011b80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b84:	3301      	adds	r3, #1
 8011b86:	429a      	cmp	r2, r3
 8011b88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011b8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011b90:	fbb2 f6f3 	udiv	r6, r2, r3
 8011b94:	d331      	bcc.n	8011bfa <quorem+0x9e>
 8011b96:	f04f 0e00 	mov.w	lr, #0
 8011b9a:	4640      	mov	r0, r8
 8011b9c:	46ac      	mov	ip, r5
 8011b9e:	46f2      	mov	sl, lr
 8011ba0:	f850 2b04 	ldr.w	r2, [r0], #4
 8011ba4:	b293      	uxth	r3, r2
 8011ba6:	fb06 e303 	mla	r3, r6, r3, lr
 8011baa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	ebaa 0303 	sub.w	r3, sl, r3
 8011bb4:	0c12      	lsrs	r2, r2, #16
 8011bb6:	f8dc a000 	ldr.w	sl, [ip]
 8011bba:	fb06 e202 	mla	r2, r6, r2, lr
 8011bbe:	fa13 f38a 	uxtah	r3, r3, sl
 8011bc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011bc6:	fa1f fa82 	uxth.w	sl, r2
 8011bca:	f8dc 2000 	ldr.w	r2, [ip]
 8011bce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011bd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011bdc:	4581      	cmp	r9, r0
 8011bde:	f84c 3b04 	str.w	r3, [ip], #4
 8011be2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011be6:	d2db      	bcs.n	8011ba0 <quorem+0x44>
 8011be8:	f855 300b 	ldr.w	r3, [r5, fp]
 8011bec:	b92b      	cbnz	r3, 8011bfa <quorem+0x9e>
 8011bee:	9b01      	ldr	r3, [sp, #4]
 8011bf0:	3b04      	subs	r3, #4
 8011bf2:	429d      	cmp	r5, r3
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	d32e      	bcc.n	8011c56 <quorem+0xfa>
 8011bf8:	613c      	str	r4, [r7, #16]
 8011bfa:	4638      	mov	r0, r7
 8011bfc:	f001 f848 	bl	8012c90 <__mcmp>
 8011c00:	2800      	cmp	r0, #0
 8011c02:	db24      	blt.n	8011c4e <quorem+0xf2>
 8011c04:	3601      	adds	r6, #1
 8011c06:	4628      	mov	r0, r5
 8011c08:	f04f 0c00 	mov.w	ip, #0
 8011c0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011c10:	f8d0 e000 	ldr.w	lr, [r0]
 8011c14:	b293      	uxth	r3, r2
 8011c16:	ebac 0303 	sub.w	r3, ip, r3
 8011c1a:	0c12      	lsrs	r2, r2, #16
 8011c1c:	fa13 f38e 	uxtah	r3, r3, lr
 8011c20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011c2e:	45c1      	cmp	r9, r8
 8011c30:	f840 3b04 	str.w	r3, [r0], #4
 8011c34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011c38:	d2e8      	bcs.n	8011c0c <quorem+0xb0>
 8011c3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011c3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011c42:	b922      	cbnz	r2, 8011c4e <quorem+0xf2>
 8011c44:	3b04      	subs	r3, #4
 8011c46:	429d      	cmp	r5, r3
 8011c48:	461a      	mov	r2, r3
 8011c4a:	d30a      	bcc.n	8011c62 <quorem+0x106>
 8011c4c:	613c      	str	r4, [r7, #16]
 8011c4e:	4630      	mov	r0, r6
 8011c50:	b003      	add	sp, #12
 8011c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c56:	6812      	ldr	r2, [r2, #0]
 8011c58:	3b04      	subs	r3, #4
 8011c5a:	2a00      	cmp	r2, #0
 8011c5c:	d1cc      	bne.n	8011bf8 <quorem+0x9c>
 8011c5e:	3c01      	subs	r4, #1
 8011c60:	e7c7      	b.n	8011bf2 <quorem+0x96>
 8011c62:	6812      	ldr	r2, [r2, #0]
 8011c64:	3b04      	subs	r3, #4
 8011c66:	2a00      	cmp	r2, #0
 8011c68:	d1f0      	bne.n	8011c4c <quorem+0xf0>
 8011c6a:	3c01      	subs	r4, #1
 8011c6c:	e7eb      	b.n	8011c46 <quorem+0xea>
 8011c6e:	2000      	movs	r0, #0
 8011c70:	e7ee      	b.n	8011c50 <quorem+0xf4>
 8011c72:	0000      	movs	r0, r0
 8011c74:	0000      	movs	r0, r0
	...

08011c78 <_dtoa_r>:
 8011c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c7c:	ec59 8b10 	vmov	r8, r9, d0
 8011c80:	b095      	sub	sp, #84	; 0x54
 8011c82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011c84:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8011c86:	9107      	str	r1, [sp, #28]
 8011c88:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8011c8c:	4606      	mov	r6, r0
 8011c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8011c90:	9310      	str	r3, [sp, #64]	; 0x40
 8011c92:	b975      	cbnz	r5, 8011cb2 <_dtoa_r+0x3a>
 8011c94:	2010      	movs	r0, #16
 8011c96:	f000 fd75 	bl	8012784 <malloc>
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	6270      	str	r0, [r6, #36]	; 0x24
 8011c9e:	b920      	cbnz	r0, 8011caa <_dtoa_r+0x32>
 8011ca0:	4bab      	ldr	r3, [pc, #684]	; (8011f50 <_dtoa_r+0x2d8>)
 8011ca2:	21ea      	movs	r1, #234	; 0xea
 8011ca4:	48ab      	ldr	r0, [pc, #684]	; (8011f54 <_dtoa_r+0x2dc>)
 8011ca6:	f001 f9bd 	bl	8013024 <__assert_func>
 8011caa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011cae:	6005      	str	r5, [r0, #0]
 8011cb0:	60c5      	str	r5, [r0, #12]
 8011cb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011cb4:	6819      	ldr	r1, [r3, #0]
 8011cb6:	b151      	cbz	r1, 8011cce <_dtoa_r+0x56>
 8011cb8:	685a      	ldr	r2, [r3, #4]
 8011cba:	604a      	str	r2, [r1, #4]
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	4093      	lsls	r3, r2
 8011cc0:	608b      	str	r3, [r1, #8]
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	f000 fda6 	bl	8012814 <_Bfree>
 8011cc8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011cca:	2200      	movs	r2, #0
 8011ccc:	601a      	str	r2, [r3, #0]
 8011cce:	f1b9 0300 	subs.w	r3, r9, #0
 8011cd2:	bfbb      	ittet	lt
 8011cd4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011cd8:	9303      	strlt	r3, [sp, #12]
 8011cda:	2300      	movge	r3, #0
 8011cdc:	2201      	movlt	r2, #1
 8011cde:	bfac      	ite	ge
 8011ce0:	6023      	strge	r3, [r4, #0]
 8011ce2:	6022      	strlt	r2, [r4, #0]
 8011ce4:	4b9c      	ldr	r3, [pc, #624]	; (8011f58 <_dtoa_r+0x2e0>)
 8011ce6:	9c03      	ldr	r4, [sp, #12]
 8011ce8:	43a3      	bics	r3, r4
 8011cea:	d11a      	bne.n	8011d22 <_dtoa_r+0xaa>
 8011cec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011cee:	f242 730f 	movw	r3, #9999	; 0x270f
 8011cf2:	6013      	str	r3, [r2, #0]
 8011cf4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011cf8:	ea53 0308 	orrs.w	r3, r3, r8
 8011cfc:	f000 8512 	beq.w	8012724 <_dtoa_r+0xaac>
 8011d00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011d02:	b953      	cbnz	r3, 8011d1a <_dtoa_r+0xa2>
 8011d04:	4b95      	ldr	r3, [pc, #596]	; (8011f5c <_dtoa_r+0x2e4>)
 8011d06:	e01f      	b.n	8011d48 <_dtoa_r+0xd0>
 8011d08:	4b95      	ldr	r3, [pc, #596]	; (8011f60 <_dtoa_r+0x2e8>)
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	3308      	adds	r3, #8
 8011d0e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011d10:	6013      	str	r3, [r2, #0]
 8011d12:	9800      	ldr	r0, [sp, #0]
 8011d14:	b015      	add	sp, #84	; 0x54
 8011d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1a:	4b90      	ldr	r3, [pc, #576]	; (8011f5c <_dtoa_r+0x2e4>)
 8011d1c:	9300      	str	r3, [sp, #0]
 8011d1e:	3303      	adds	r3, #3
 8011d20:	e7f5      	b.n	8011d0e <_dtoa_r+0x96>
 8011d22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011d32:	d10b      	bne.n	8011d4c <_dtoa_r+0xd4>
 8011d34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011d36:	2301      	movs	r3, #1
 8011d38:	6013      	str	r3, [r2, #0]
 8011d3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	f000 84ee 	beq.w	801271e <_dtoa_r+0xaa6>
 8011d42:	4888      	ldr	r0, [pc, #544]	; (8011f64 <_dtoa_r+0x2ec>)
 8011d44:	6018      	str	r0, [r3, #0]
 8011d46:	1e43      	subs	r3, r0, #1
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	e7e2      	b.n	8011d12 <_dtoa_r+0x9a>
 8011d4c:	a913      	add	r1, sp, #76	; 0x4c
 8011d4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011d52:	aa12      	add	r2, sp, #72	; 0x48
 8011d54:	4630      	mov	r0, r6
 8011d56:	f001 f83f 	bl	8012dd8 <__d2b>
 8011d5a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011d5e:	4605      	mov	r5, r0
 8011d60:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011d62:	2900      	cmp	r1, #0
 8011d64:	d047      	beq.n	8011df6 <_dtoa_r+0x17e>
 8011d66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011d68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011d6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011d70:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011d74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011d78:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011d7c:	2400      	movs	r4, #0
 8011d7e:	ec43 2b16 	vmov	d6, r2, r3
 8011d82:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011d86:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8011f38 <_dtoa_r+0x2c0>
 8011d8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011d8e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8011f40 <_dtoa_r+0x2c8>
 8011d92:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011d96:	eeb0 7b46 	vmov.f64	d7, d6
 8011d9a:	ee06 1a90 	vmov	s13, r1
 8011d9e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8011da2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011f48 <_dtoa_r+0x2d0>
 8011da6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011daa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011dae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db6:	ee16 ba90 	vmov	fp, s13
 8011dba:	9411      	str	r4, [sp, #68]	; 0x44
 8011dbc:	d508      	bpl.n	8011dd0 <_dtoa_r+0x158>
 8011dbe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011dc2:	eeb4 6b47 	vcmp.f64	d6, d7
 8011dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dca:	bf18      	it	ne
 8011dcc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011dd0:	f1bb 0f16 	cmp.w	fp, #22
 8011dd4:	d832      	bhi.n	8011e3c <_dtoa_r+0x1c4>
 8011dd6:	4b64      	ldr	r3, [pc, #400]	; (8011f68 <_dtoa_r+0x2f0>)
 8011dd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011ddc:	ed93 7b00 	vldr	d7, [r3]
 8011de0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8011de4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dec:	d501      	bpl.n	8011df2 <_dtoa_r+0x17a>
 8011dee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011df2:	2300      	movs	r3, #0
 8011df4:	e023      	b.n	8011e3e <_dtoa_r+0x1c6>
 8011df6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011df8:	4401      	add	r1, r0
 8011dfa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011dfe:	2b20      	cmp	r3, #32
 8011e00:	bfc3      	ittte	gt
 8011e02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011e06:	fa04 f303 	lslgt.w	r3, r4, r3
 8011e0a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011e0e:	f1c3 0320 	rsble	r3, r3, #32
 8011e12:	bfc6      	itte	gt
 8011e14:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011e18:	ea43 0308 	orrgt.w	r3, r3, r8
 8011e1c:	fa08 f303 	lslle.w	r3, r8, r3
 8011e20:	ee07 3a90 	vmov	s15, r3
 8011e24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011e28:	3901      	subs	r1, #1
 8011e2a:	ed8d 7b00 	vstr	d7, [sp]
 8011e2e:	9c01      	ldr	r4, [sp, #4]
 8011e30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e34:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011e38:	2401      	movs	r4, #1
 8011e3a:	e7a0      	b.n	8011d7e <_dtoa_r+0x106>
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e40:	1a43      	subs	r3, r0, r1
 8011e42:	1e5a      	subs	r2, r3, #1
 8011e44:	bf45      	ittet	mi
 8011e46:	f1c3 0301 	rsbmi	r3, r3, #1
 8011e4a:	9305      	strmi	r3, [sp, #20]
 8011e4c:	2300      	movpl	r3, #0
 8011e4e:	2300      	movmi	r3, #0
 8011e50:	9206      	str	r2, [sp, #24]
 8011e52:	bf54      	ite	pl
 8011e54:	9305      	strpl	r3, [sp, #20]
 8011e56:	9306      	strmi	r3, [sp, #24]
 8011e58:	f1bb 0f00 	cmp.w	fp, #0
 8011e5c:	db18      	blt.n	8011e90 <_dtoa_r+0x218>
 8011e5e:	9b06      	ldr	r3, [sp, #24]
 8011e60:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8011e64:	445b      	add	r3, fp
 8011e66:	9306      	str	r3, [sp, #24]
 8011e68:	2300      	movs	r3, #0
 8011e6a:	9a07      	ldr	r2, [sp, #28]
 8011e6c:	2a09      	cmp	r2, #9
 8011e6e:	d849      	bhi.n	8011f04 <_dtoa_r+0x28c>
 8011e70:	2a05      	cmp	r2, #5
 8011e72:	bfc4      	itt	gt
 8011e74:	3a04      	subgt	r2, #4
 8011e76:	9207      	strgt	r2, [sp, #28]
 8011e78:	9a07      	ldr	r2, [sp, #28]
 8011e7a:	f1a2 0202 	sub.w	r2, r2, #2
 8011e7e:	bfcc      	ite	gt
 8011e80:	2400      	movgt	r4, #0
 8011e82:	2401      	movle	r4, #1
 8011e84:	2a03      	cmp	r2, #3
 8011e86:	d848      	bhi.n	8011f1a <_dtoa_r+0x2a2>
 8011e88:	e8df f002 	tbb	[pc, r2]
 8011e8c:	3a2c2e0b 	.word	0x3a2c2e0b
 8011e90:	9b05      	ldr	r3, [sp, #20]
 8011e92:	2200      	movs	r2, #0
 8011e94:	eba3 030b 	sub.w	r3, r3, fp
 8011e98:	9305      	str	r3, [sp, #20]
 8011e9a:	920e      	str	r2, [sp, #56]	; 0x38
 8011e9c:	f1cb 0300 	rsb	r3, fp, #0
 8011ea0:	e7e3      	b.n	8011e6a <_dtoa_r+0x1f2>
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	9208      	str	r2, [sp, #32]
 8011ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ea8:	2a00      	cmp	r2, #0
 8011eaa:	dc39      	bgt.n	8011f20 <_dtoa_r+0x2a8>
 8011eac:	f04f 0a01 	mov.w	sl, #1
 8011eb0:	46d1      	mov	r9, sl
 8011eb2:	4652      	mov	r2, sl
 8011eb4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011eb8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011eba:	2100      	movs	r1, #0
 8011ebc:	6079      	str	r1, [r7, #4]
 8011ebe:	2004      	movs	r0, #4
 8011ec0:	f100 0c14 	add.w	ip, r0, #20
 8011ec4:	4594      	cmp	ip, r2
 8011ec6:	6879      	ldr	r1, [r7, #4]
 8011ec8:	d92f      	bls.n	8011f2a <_dtoa_r+0x2b2>
 8011eca:	4630      	mov	r0, r6
 8011ecc:	930c      	str	r3, [sp, #48]	; 0x30
 8011ece:	f000 fc61 	bl	8012794 <_Balloc>
 8011ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ed4:	9000      	str	r0, [sp, #0]
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d149      	bne.n	8011f70 <_dtoa_r+0x2f8>
 8011edc:	4b23      	ldr	r3, [pc, #140]	; (8011f6c <_dtoa_r+0x2f4>)
 8011ede:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011ee2:	e6df      	b.n	8011ca4 <_dtoa_r+0x2c>
 8011ee4:	2201      	movs	r2, #1
 8011ee6:	e7dd      	b.n	8011ea4 <_dtoa_r+0x22c>
 8011ee8:	2200      	movs	r2, #0
 8011eea:	9208      	str	r2, [sp, #32]
 8011eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011eee:	eb0b 0a02 	add.w	sl, fp, r2
 8011ef2:	f10a 0901 	add.w	r9, sl, #1
 8011ef6:	464a      	mov	r2, r9
 8011ef8:	2a01      	cmp	r2, #1
 8011efa:	bfb8      	it	lt
 8011efc:	2201      	movlt	r2, #1
 8011efe:	e7db      	b.n	8011eb8 <_dtoa_r+0x240>
 8011f00:	2201      	movs	r2, #1
 8011f02:	e7f2      	b.n	8011eea <_dtoa_r+0x272>
 8011f04:	2401      	movs	r4, #1
 8011f06:	2200      	movs	r2, #0
 8011f08:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011f0c:	f04f 3aff 	mov.w	sl, #4294967295
 8011f10:	2100      	movs	r1, #0
 8011f12:	46d1      	mov	r9, sl
 8011f14:	2212      	movs	r2, #18
 8011f16:	9109      	str	r1, [sp, #36]	; 0x24
 8011f18:	e7ce      	b.n	8011eb8 <_dtoa_r+0x240>
 8011f1a:	2201      	movs	r2, #1
 8011f1c:	9208      	str	r2, [sp, #32]
 8011f1e:	e7f5      	b.n	8011f0c <_dtoa_r+0x294>
 8011f20:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8011f24:	46d1      	mov	r9, sl
 8011f26:	4652      	mov	r2, sl
 8011f28:	e7c6      	b.n	8011eb8 <_dtoa_r+0x240>
 8011f2a:	3101      	adds	r1, #1
 8011f2c:	6079      	str	r1, [r7, #4]
 8011f2e:	0040      	lsls	r0, r0, #1
 8011f30:	e7c6      	b.n	8011ec0 <_dtoa_r+0x248>
 8011f32:	bf00      	nop
 8011f34:	f3af 8000 	nop.w
 8011f38:	636f4361 	.word	0x636f4361
 8011f3c:	3fd287a7 	.word	0x3fd287a7
 8011f40:	8b60c8b3 	.word	0x8b60c8b3
 8011f44:	3fc68a28 	.word	0x3fc68a28
 8011f48:	509f79fb 	.word	0x509f79fb
 8011f4c:	3fd34413 	.word	0x3fd34413
 8011f50:	08014825 	.word	0x08014825
 8011f54:	0801483c 	.word	0x0801483c
 8011f58:	7ff00000 	.word	0x7ff00000
 8011f5c:	08014821 	.word	0x08014821
 8011f60:	08014818 	.word	0x08014818
 8011f64:	080147f5 	.word	0x080147f5
 8011f68:	08014938 	.word	0x08014938
 8011f6c:	0801489b 	.word	0x0801489b
 8011f70:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011f72:	9900      	ldr	r1, [sp, #0]
 8011f74:	6011      	str	r1, [r2, #0]
 8011f76:	f1b9 0f0e 	cmp.w	r9, #14
 8011f7a:	d872      	bhi.n	8012062 <_dtoa_r+0x3ea>
 8011f7c:	2c00      	cmp	r4, #0
 8011f7e:	d070      	beq.n	8012062 <_dtoa_r+0x3ea>
 8011f80:	f1bb 0f00 	cmp.w	fp, #0
 8011f84:	f340 80a6 	ble.w	80120d4 <_dtoa_r+0x45c>
 8011f88:	49ca      	ldr	r1, [pc, #808]	; (80122b4 <_dtoa_r+0x63c>)
 8011f8a:	f00b 020f 	and.w	r2, fp, #15
 8011f8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011f92:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011f96:	ed92 7b00 	vldr	d7, [r2]
 8011f9a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011f9e:	f000 808d 	beq.w	80120bc <_dtoa_r+0x444>
 8011fa2:	4ac5      	ldr	r2, [pc, #788]	; (80122b8 <_dtoa_r+0x640>)
 8011fa4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011fa8:	ed92 6b08 	vldr	d6, [r2, #32]
 8011fac:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8011fb0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011fb4:	f001 010f 	and.w	r1, r1, #15
 8011fb8:	2203      	movs	r2, #3
 8011fba:	48bf      	ldr	r0, [pc, #764]	; (80122b8 <_dtoa_r+0x640>)
 8011fbc:	2900      	cmp	r1, #0
 8011fbe:	d17f      	bne.n	80120c0 <_dtoa_r+0x448>
 8011fc0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011fc4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011fc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011fcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011fce:	2900      	cmp	r1, #0
 8011fd0:	f000 80b2 	beq.w	8012138 <_dtoa_r+0x4c0>
 8011fd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011fd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011fdc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe4:	f140 80a8 	bpl.w	8012138 <_dtoa_r+0x4c0>
 8011fe8:	f1b9 0f00 	cmp.w	r9, #0
 8011fec:	f000 80a4 	beq.w	8012138 <_dtoa_r+0x4c0>
 8011ff0:	f1ba 0f00 	cmp.w	sl, #0
 8011ff4:	dd31      	ble.n	801205a <_dtoa_r+0x3e2>
 8011ff6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011ffa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011ffe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012002:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012006:	3201      	adds	r2, #1
 8012008:	4650      	mov	r0, sl
 801200a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801200e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012012:	ee07 2a90 	vmov	s15, r2
 8012016:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801201a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801201e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012022:	9c03      	ldr	r4, [sp, #12]
 8012024:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012028:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801202c:	2800      	cmp	r0, #0
 801202e:	f040 8086 	bne.w	801213e <_dtoa_r+0x4c6>
 8012032:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012036:	ee36 6b47 	vsub.f64	d6, d6, d7
 801203a:	ec42 1b17 	vmov	d7, r1, r2
 801203e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012046:	f300 8272 	bgt.w	801252e <_dtoa_r+0x8b6>
 801204a:	eeb1 7b47 	vneg.f64	d7, d7
 801204e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012056:	f100 8267 	bmi.w	8012528 <_dtoa_r+0x8b0>
 801205a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801205e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012062:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012064:	2a00      	cmp	r2, #0
 8012066:	f2c0 8129 	blt.w	80122bc <_dtoa_r+0x644>
 801206a:	f1bb 0f0e 	cmp.w	fp, #14
 801206e:	f300 8125 	bgt.w	80122bc <_dtoa_r+0x644>
 8012072:	4b90      	ldr	r3, [pc, #576]	; (80122b4 <_dtoa_r+0x63c>)
 8012074:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012078:	ed93 6b00 	vldr	d6, [r3]
 801207c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801207e:	2b00      	cmp	r3, #0
 8012080:	f280 80c3 	bge.w	801220a <_dtoa_r+0x592>
 8012084:	f1b9 0f00 	cmp.w	r9, #0
 8012088:	f300 80bf 	bgt.w	801220a <_dtoa_r+0x592>
 801208c:	f040 824c 	bne.w	8012528 <_dtoa_r+0x8b0>
 8012090:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012094:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012098:	ed9d 7b02 	vldr	d7, [sp, #8]
 801209c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80120a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a4:	464c      	mov	r4, r9
 80120a6:	464f      	mov	r7, r9
 80120a8:	f280 8222 	bge.w	80124f0 <_dtoa_r+0x878>
 80120ac:	f8dd 8000 	ldr.w	r8, [sp]
 80120b0:	2331      	movs	r3, #49	; 0x31
 80120b2:	f808 3b01 	strb.w	r3, [r8], #1
 80120b6:	f10b 0b01 	add.w	fp, fp, #1
 80120ba:	e21e      	b.n	80124fa <_dtoa_r+0x882>
 80120bc:	2202      	movs	r2, #2
 80120be:	e77c      	b.n	8011fba <_dtoa_r+0x342>
 80120c0:	07cc      	lsls	r4, r1, #31
 80120c2:	d504      	bpl.n	80120ce <_dtoa_r+0x456>
 80120c4:	ed90 6b00 	vldr	d6, [r0]
 80120c8:	3201      	adds	r2, #1
 80120ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80120ce:	1049      	asrs	r1, r1, #1
 80120d0:	3008      	adds	r0, #8
 80120d2:	e773      	b.n	8011fbc <_dtoa_r+0x344>
 80120d4:	d02e      	beq.n	8012134 <_dtoa_r+0x4bc>
 80120d6:	f1cb 0100 	rsb	r1, fp, #0
 80120da:	4a76      	ldr	r2, [pc, #472]	; (80122b4 <_dtoa_r+0x63c>)
 80120dc:	f001 000f 	and.w	r0, r1, #15
 80120e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80120e4:	ed92 7b00 	vldr	d7, [r2]
 80120e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80120ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80120f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80120f4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80120f8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80120fc:	486e      	ldr	r0, [pc, #440]	; (80122b8 <_dtoa_r+0x640>)
 80120fe:	1109      	asrs	r1, r1, #4
 8012100:	2400      	movs	r4, #0
 8012102:	2202      	movs	r2, #2
 8012104:	b939      	cbnz	r1, 8012116 <_dtoa_r+0x49e>
 8012106:	2c00      	cmp	r4, #0
 8012108:	f43f af60 	beq.w	8011fcc <_dtoa_r+0x354>
 801210c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012114:	e75a      	b.n	8011fcc <_dtoa_r+0x354>
 8012116:	07cf      	lsls	r7, r1, #31
 8012118:	d509      	bpl.n	801212e <_dtoa_r+0x4b6>
 801211a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801211e:	ed90 7b00 	vldr	d7, [r0]
 8012122:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012126:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801212a:	3201      	adds	r2, #1
 801212c:	2401      	movs	r4, #1
 801212e:	1049      	asrs	r1, r1, #1
 8012130:	3008      	adds	r0, #8
 8012132:	e7e7      	b.n	8012104 <_dtoa_r+0x48c>
 8012134:	2202      	movs	r2, #2
 8012136:	e749      	b.n	8011fcc <_dtoa_r+0x354>
 8012138:	465f      	mov	r7, fp
 801213a:	4648      	mov	r0, r9
 801213c:	e765      	b.n	801200a <_dtoa_r+0x392>
 801213e:	ec42 1b17 	vmov	d7, r1, r2
 8012142:	4a5c      	ldr	r2, [pc, #368]	; (80122b4 <_dtoa_r+0x63c>)
 8012144:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012148:	ed12 4b02 	vldr	d4, [r2, #-8]
 801214c:	9a00      	ldr	r2, [sp, #0]
 801214e:	1814      	adds	r4, r2, r0
 8012150:	9a08      	ldr	r2, [sp, #32]
 8012152:	b352      	cbz	r2, 80121aa <_dtoa_r+0x532>
 8012154:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012158:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801215c:	f8dd 8000 	ldr.w	r8, [sp]
 8012160:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012164:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012168:	ee35 7b47 	vsub.f64	d7, d5, d7
 801216c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012170:	ee14 2a90 	vmov	r2, s9
 8012174:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012178:	3230      	adds	r2, #48	; 0x30
 801217a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801217e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012186:	f808 2b01 	strb.w	r2, [r8], #1
 801218a:	d439      	bmi.n	8012200 <_dtoa_r+0x588>
 801218c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012190:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012198:	d472      	bmi.n	8012280 <_dtoa_r+0x608>
 801219a:	45a0      	cmp	r8, r4
 801219c:	f43f af5d 	beq.w	801205a <_dtoa_r+0x3e2>
 80121a0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80121a4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80121a8:	e7e0      	b.n	801216c <_dtoa_r+0x4f4>
 80121aa:	f8dd 8000 	ldr.w	r8, [sp]
 80121ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 80121b2:	4621      	mov	r1, r4
 80121b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80121b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80121bc:	ee14 2a90 	vmov	r2, s9
 80121c0:	3230      	adds	r2, #48	; 0x30
 80121c2:	f808 2b01 	strb.w	r2, [r8], #1
 80121c6:	45a0      	cmp	r8, r4
 80121c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80121cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80121d0:	d118      	bne.n	8012204 <_dtoa_r+0x58c>
 80121d2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80121d6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80121da:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80121de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e2:	dc4d      	bgt.n	8012280 <_dtoa_r+0x608>
 80121e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80121e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80121ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f0:	f57f af33 	bpl.w	801205a <_dtoa_r+0x3e2>
 80121f4:	4688      	mov	r8, r1
 80121f6:	3901      	subs	r1, #1
 80121f8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80121fc:	2b30      	cmp	r3, #48	; 0x30
 80121fe:	d0f9      	beq.n	80121f4 <_dtoa_r+0x57c>
 8012200:	46bb      	mov	fp, r7
 8012202:	e02a      	b.n	801225a <_dtoa_r+0x5e2>
 8012204:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012208:	e7d6      	b.n	80121b8 <_dtoa_r+0x540>
 801220a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801220e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012212:	f8dd 8000 	ldr.w	r8, [sp]
 8012216:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801221a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801221e:	ee15 3a10 	vmov	r3, s10
 8012222:	3330      	adds	r3, #48	; 0x30
 8012224:	f808 3b01 	strb.w	r3, [r8], #1
 8012228:	9b00      	ldr	r3, [sp, #0]
 801222a:	eba8 0303 	sub.w	r3, r8, r3
 801222e:	4599      	cmp	r9, r3
 8012230:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012234:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012238:	d133      	bne.n	80122a2 <_dtoa_r+0x62a>
 801223a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801223e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012246:	dc1a      	bgt.n	801227e <_dtoa_r+0x606>
 8012248:	eeb4 7b46 	vcmp.f64	d7, d6
 801224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012250:	d103      	bne.n	801225a <_dtoa_r+0x5e2>
 8012252:	ee15 3a10 	vmov	r3, s10
 8012256:	07d9      	lsls	r1, r3, #31
 8012258:	d411      	bmi.n	801227e <_dtoa_r+0x606>
 801225a:	4629      	mov	r1, r5
 801225c:	4630      	mov	r0, r6
 801225e:	f000 fad9 	bl	8012814 <_Bfree>
 8012262:	2300      	movs	r3, #0
 8012264:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012266:	f888 3000 	strb.w	r3, [r8]
 801226a:	f10b 0301 	add.w	r3, fp, #1
 801226e:	6013      	str	r3, [r2, #0]
 8012270:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012272:	2b00      	cmp	r3, #0
 8012274:	f43f ad4d 	beq.w	8011d12 <_dtoa_r+0x9a>
 8012278:	f8c3 8000 	str.w	r8, [r3]
 801227c:	e549      	b.n	8011d12 <_dtoa_r+0x9a>
 801227e:	465f      	mov	r7, fp
 8012280:	4643      	mov	r3, r8
 8012282:	4698      	mov	r8, r3
 8012284:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012288:	2a39      	cmp	r2, #57	; 0x39
 801228a:	d106      	bne.n	801229a <_dtoa_r+0x622>
 801228c:	9a00      	ldr	r2, [sp, #0]
 801228e:	429a      	cmp	r2, r3
 8012290:	d1f7      	bne.n	8012282 <_dtoa_r+0x60a>
 8012292:	9900      	ldr	r1, [sp, #0]
 8012294:	2230      	movs	r2, #48	; 0x30
 8012296:	3701      	adds	r7, #1
 8012298:	700a      	strb	r2, [r1, #0]
 801229a:	781a      	ldrb	r2, [r3, #0]
 801229c:	3201      	adds	r2, #1
 801229e:	701a      	strb	r2, [r3, #0]
 80122a0:	e7ae      	b.n	8012200 <_dtoa_r+0x588>
 80122a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80122a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80122aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ae:	d1b2      	bne.n	8012216 <_dtoa_r+0x59e>
 80122b0:	e7d3      	b.n	801225a <_dtoa_r+0x5e2>
 80122b2:	bf00      	nop
 80122b4:	08014938 	.word	0x08014938
 80122b8:	08014910 	.word	0x08014910
 80122bc:	9908      	ldr	r1, [sp, #32]
 80122be:	2900      	cmp	r1, #0
 80122c0:	f000 80d1 	beq.w	8012466 <_dtoa_r+0x7ee>
 80122c4:	9907      	ldr	r1, [sp, #28]
 80122c6:	2901      	cmp	r1, #1
 80122c8:	f300 80b4 	bgt.w	8012434 <_dtoa_r+0x7bc>
 80122cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80122ce:	2900      	cmp	r1, #0
 80122d0:	f000 80ac 	beq.w	801242c <_dtoa_r+0x7b4>
 80122d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80122d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80122dc:	461c      	mov	r4, r3
 80122de:	930a      	str	r3, [sp, #40]	; 0x28
 80122e0:	9b05      	ldr	r3, [sp, #20]
 80122e2:	4413      	add	r3, r2
 80122e4:	9305      	str	r3, [sp, #20]
 80122e6:	9b06      	ldr	r3, [sp, #24]
 80122e8:	2101      	movs	r1, #1
 80122ea:	4413      	add	r3, r2
 80122ec:	4630      	mov	r0, r6
 80122ee:	9306      	str	r3, [sp, #24]
 80122f0:	f000 fb4c 	bl	801298c <__i2b>
 80122f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122f6:	4607      	mov	r7, r0
 80122f8:	f1b8 0f00 	cmp.w	r8, #0
 80122fc:	dd0d      	ble.n	801231a <_dtoa_r+0x6a2>
 80122fe:	9a06      	ldr	r2, [sp, #24]
 8012300:	2a00      	cmp	r2, #0
 8012302:	dd0a      	ble.n	801231a <_dtoa_r+0x6a2>
 8012304:	4542      	cmp	r2, r8
 8012306:	9905      	ldr	r1, [sp, #20]
 8012308:	bfa8      	it	ge
 801230a:	4642      	movge	r2, r8
 801230c:	1a89      	subs	r1, r1, r2
 801230e:	9105      	str	r1, [sp, #20]
 8012310:	9906      	ldr	r1, [sp, #24]
 8012312:	eba8 0802 	sub.w	r8, r8, r2
 8012316:	1a8a      	subs	r2, r1, r2
 8012318:	9206      	str	r2, [sp, #24]
 801231a:	b303      	cbz	r3, 801235e <_dtoa_r+0x6e6>
 801231c:	9a08      	ldr	r2, [sp, #32]
 801231e:	2a00      	cmp	r2, #0
 8012320:	f000 80a6 	beq.w	8012470 <_dtoa_r+0x7f8>
 8012324:	2c00      	cmp	r4, #0
 8012326:	dd13      	ble.n	8012350 <_dtoa_r+0x6d8>
 8012328:	4639      	mov	r1, r7
 801232a:	4622      	mov	r2, r4
 801232c:	4630      	mov	r0, r6
 801232e:	930c      	str	r3, [sp, #48]	; 0x30
 8012330:	f000 fbe8 	bl	8012b04 <__pow5mult>
 8012334:	462a      	mov	r2, r5
 8012336:	4601      	mov	r1, r0
 8012338:	4607      	mov	r7, r0
 801233a:	4630      	mov	r0, r6
 801233c:	f000 fb3c 	bl	80129b8 <__multiply>
 8012340:	4629      	mov	r1, r5
 8012342:	900a      	str	r0, [sp, #40]	; 0x28
 8012344:	4630      	mov	r0, r6
 8012346:	f000 fa65 	bl	8012814 <_Bfree>
 801234a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801234c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801234e:	4615      	mov	r5, r2
 8012350:	1b1a      	subs	r2, r3, r4
 8012352:	d004      	beq.n	801235e <_dtoa_r+0x6e6>
 8012354:	4629      	mov	r1, r5
 8012356:	4630      	mov	r0, r6
 8012358:	f000 fbd4 	bl	8012b04 <__pow5mult>
 801235c:	4605      	mov	r5, r0
 801235e:	2101      	movs	r1, #1
 8012360:	4630      	mov	r0, r6
 8012362:	f000 fb13 	bl	801298c <__i2b>
 8012366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012368:	2b00      	cmp	r3, #0
 801236a:	4604      	mov	r4, r0
 801236c:	f340 8082 	ble.w	8012474 <_dtoa_r+0x7fc>
 8012370:	461a      	mov	r2, r3
 8012372:	4601      	mov	r1, r0
 8012374:	4630      	mov	r0, r6
 8012376:	f000 fbc5 	bl	8012b04 <__pow5mult>
 801237a:	9b07      	ldr	r3, [sp, #28]
 801237c:	2b01      	cmp	r3, #1
 801237e:	4604      	mov	r4, r0
 8012380:	dd7b      	ble.n	801247a <_dtoa_r+0x802>
 8012382:	2300      	movs	r3, #0
 8012384:	930a      	str	r3, [sp, #40]	; 0x28
 8012386:	6922      	ldr	r2, [r4, #16]
 8012388:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801238c:	6910      	ldr	r0, [r2, #16]
 801238e:	f000 faad 	bl	80128ec <__hi0bits>
 8012392:	f1c0 0020 	rsb	r0, r0, #32
 8012396:	9b06      	ldr	r3, [sp, #24]
 8012398:	4418      	add	r0, r3
 801239a:	f010 001f 	ands.w	r0, r0, #31
 801239e:	f000 808d 	beq.w	80124bc <_dtoa_r+0x844>
 80123a2:	f1c0 0220 	rsb	r2, r0, #32
 80123a6:	2a04      	cmp	r2, #4
 80123a8:	f340 8086 	ble.w	80124b8 <_dtoa_r+0x840>
 80123ac:	f1c0 001c 	rsb	r0, r0, #28
 80123b0:	9b05      	ldr	r3, [sp, #20]
 80123b2:	4403      	add	r3, r0
 80123b4:	9305      	str	r3, [sp, #20]
 80123b6:	9b06      	ldr	r3, [sp, #24]
 80123b8:	4403      	add	r3, r0
 80123ba:	4480      	add	r8, r0
 80123bc:	9306      	str	r3, [sp, #24]
 80123be:	9b05      	ldr	r3, [sp, #20]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	dd05      	ble.n	80123d0 <_dtoa_r+0x758>
 80123c4:	4629      	mov	r1, r5
 80123c6:	461a      	mov	r2, r3
 80123c8:	4630      	mov	r0, r6
 80123ca:	f000 fbf5 	bl	8012bb8 <__lshift>
 80123ce:	4605      	mov	r5, r0
 80123d0:	9b06      	ldr	r3, [sp, #24]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	dd05      	ble.n	80123e2 <_dtoa_r+0x76a>
 80123d6:	4621      	mov	r1, r4
 80123d8:	461a      	mov	r2, r3
 80123da:	4630      	mov	r0, r6
 80123dc:	f000 fbec 	bl	8012bb8 <__lshift>
 80123e0:	4604      	mov	r4, r0
 80123e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d06b      	beq.n	80124c0 <_dtoa_r+0x848>
 80123e8:	4621      	mov	r1, r4
 80123ea:	4628      	mov	r0, r5
 80123ec:	f000 fc50 	bl	8012c90 <__mcmp>
 80123f0:	2800      	cmp	r0, #0
 80123f2:	da65      	bge.n	80124c0 <_dtoa_r+0x848>
 80123f4:	2300      	movs	r3, #0
 80123f6:	4629      	mov	r1, r5
 80123f8:	220a      	movs	r2, #10
 80123fa:	4630      	mov	r0, r6
 80123fc:	f000 fa2c 	bl	8012858 <__multadd>
 8012400:	9b08      	ldr	r3, [sp, #32]
 8012402:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012406:	4605      	mov	r5, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	f000 8192 	beq.w	8012732 <_dtoa_r+0xaba>
 801240e:	4639      	mov	r1, r7
 8012410:	2300      	movs	r3, #0
 8012412:	220a      	movs	r2, #10
 8012414:	4630      	mov	r0, r6
 8012416:	f000 fa1f 	bl	8012858 <__multadd>
 801241a:	f1ba 0f00 	cmp.w	sl, #0
 801241e:	4607      	mov	r7, r0
 8012420:	f300 808e 	bgt.w	8012540 <_dtoa_r+0x8c8>
 8012424:	9b07      	ldr	r3, [sp, #28]
 8012426:	2b02      	cmp	r3, #2
 8012428:	dc51      	bgt.n	80124ce <_dtoa_r+0x856>
 801242a:	e089      	b.n	8012540 <_dtoa_r+0x8c8>
 801242c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801242e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012432:	e751      	b.n	80122d8 <_dtoa_r+0x660>
 8012434:	f109 34ff 	add.w	r4, r9, #4294967295
 8012438:	42a3      	cmp	r3, r4
 801243a:	bfbf      	itttt	lt
 801243c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801243e:	1ae3      	sublt	r3, r4, r3
 8012440:	18d2      	addlt	r2, r2, r3
 8012442:	4613      	movlt	r3, r2
 8012444:	bfb7      	itett	lt
 8012446:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012448:	1b1c      	subge	r4, r3, r4
 801244a:	4623      	movlt	r3, r4
 801244c:	2400      	movlt	r4, #0
 801244e:	f1b9 0f00 	cmp.w	r9, #0
 8012452:	bfb5      	itete	lt
 8012454:	9a05      	ldrlt	r2, [sp, #20]
 8012456:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801245a:	eba2 0809 	sublt.w	r8, r2, r9
 801245e:	464a      	movge	r2, r9
 8012460:	bfb8      	it	lt
 8012462:	2200      	movlt	r2, #0
 8012464:	e73b      	b.n	80122de <_dtoa_r+0x666>
 8012466:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801246a:	9f08      	ldr	r7, [sp, #32]
 801246c:	461c      	mov	r4, r3
 801246e:	e743      	b.n	80122f8 <_dtoa_r+0x680>
 8012470:	461a      	mov	r2, r3
 8012472:	e76f      	b.n	8012354 <_dtoa_r+0x6dc>
 8012474:	9b07      	ldr	r3, [sp, #28]
 8012476:	2b01      	cmp	r3, #1
 8012478:	dc18      	bgt.n	80124ac <_dtoa_r+0x834>
 801247a:	9b02      	ldr	r3, [sp, #8]
 801247c:	b9b3      	cbnz	r3, 80124ac <_dtoa_r+0x834>
 801247e:	9b03      	ldr	r3, [sp, #12]
 8012480:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012484:	b9a2      	cbnz	r2, 80124b0 <_dtoa_r+0x838>
 8012486:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801248a:	0d12      	lsrs	r2, r2, #20
 801248c:	0512      	lsls	r2, r2, #20
 801248e:	b18a      	cbz	r2, 80124b4 <_dtoa_r+0x83c>
 8012490:	9b05      	ldr	r3, [sp, #20]
 8012492:	3301      	adds	r3, #1
 8012494:	9305      	str	r3, [sp, #20]
 8012496:	9b06      	ldr	r3, [sp, #24]
 8012498:	3301      	adds	r3, #1
 801249a:	9306      	str	r3, [sp, #24]
 801249c:	2301      	movs	r3, #1
 801249e:	930a      	str	r3, [sp, #40]	; 0x28
 80124a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	f47f af6f 	bne.w	8012386 <_dtoa_r+0x70e>
 80124a8:	2001      	movs	r0, #1
 80124aa:	e774      	b.n	8012396 <_dtoa_r+0x71e>
 80124ac:	2300      	movs	r3, #0
 80124ae:	e7f6      	b.n	801249e <_dtoa_r+0x826>
 80124b0:	9b02      	ldr	r3, [sp, #8]
 80124b2:	e7f4      	b.n	801249e <_dtoa_r+0x826>
 80124b4:	920a      	str	r2, [sp, #40]	; 0x28
 80124b6:	e7f3      	b.n	80124a0 <_dtoa_r+0x828>
 80124b8:	d081      	beq.n	80123be <_dtoa_r+0x746>
 80124ba:	4610      	mov	r0, r2
 80124bc:	301c      	adds	r0, #28
 80124be:	e777      	b.n	80123b0 <_dtoa_r+0x738>
 80124c0:	f1b9 0f00 	cmp.w	r9, #0
 80124c4:	dc37      	bgt.n	8012536 <_dtoa_r+0x8be>
 80124c6:	9b07      	ldr	r3, [sp, #28]
 80124c8:	2b02      	cmp	r3, #2
 80124ca:	dd34      	ble.n	8012536 <_dtoa_r+0x8be>
 80124cc:	46ca      	mov	sl, r9
 80124ce:	f1ba 0f00 	cmp.w	sl, #0
 80124d2:	d10d      	bne.n	80124f0 <_dtoa_r+0x878>
 80124d4:	4621      	mov	r1, r4
 80124d6:	4653      	mov	r3, sl
 80124d8:	2205      	movs	r2, #5
 80124da:	4630      	mov	r0, r6
 80124dc:	f000 f9bc 	bl	8012858 <__multadd>
 80124e0:	4601      	mov	r1, r0
 80124e2:	4604      	mov	r4, r0
 80124e4:	4628      	mov	r0, r5
 80124e6:	f000 fbd3 	bl	8012c90 <__mcmp>
 80124ea:	2800      	cmp	r0, #0
 80124ec:	f73f adde 	bgt.w	80120ac <_dtoa_r+0x434>
 80124f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124f2:	f8dd 8000 	ldr.w	r8, [sp]
 80124f6:	ea6f 0b03 	mvn.w	fp, r3
 80124fa:	f04f 0900 	mov.w	r9, #0
 80124fe:	4621      	mov	r1, r4
 8012500:	4630      	mov	r0, r6
 8012502:	f000 f987 	bl	8012814 <_Bfree>
 8012506:	2f00      	cmp	r7, #0
 8012508:	f43f aea7 	beq.w	801225a <_dtoa_r+0x5e2>
 801250c:	f1b9 0f00 	cmp.w	r9, #0
 8012510:	d005      	beq.n	801251e <_dtoa_r+0x8a6>
 8012512:	45b9      	cmp	r9, r7
 8012514:	d003      	beq.n	801251e <_dtoa_r+0x8a6>
 8012516:	4649      	mov	r1, r9
 8012518:	4630      	mov	r0, r6
 801251a:	f000 f97b 	bl	8012814 <_Bfree>
 801251e:	4639      	mov	r1, r7
 8012520:	4630      	mov	r0, r6
 8012522:	f000 f977 	bl	8012814 <_Bfree>
 8012526:	e698      	b.n	801225a <_dtoa_r+0x5e2>
 8012528:	2400      	movs	r4, #0
 801252a:	4627      	mov	r7, r4
 801252c:	e7e0      	b.n	80124f0 <_dtoa_r+0x878>
 801252e:	46bb      	mov	fp, r7
 8012530:	4604      	mov	r4, r0
 8012532:	4607      	mov	r7, r0
 8012534:	e5ba      	b.n	80120ac <_dtoa_r+0x434>
 8012536:	9b08      	ldr	r3, [sp, #32]
 8012538:	46ca      	mov	sl, r9
 801253a:	2b00      	cmp	r3, #0
 801253c:	f000 8100 	beq.w	8012740 <_dtoa_r+0xac8>
 8012540:	f1b8 0f00 	cmp.w	r8, #0
 8012544:	dd05      	ble.n	8012552 <_dtoa_r+0x8da>
 8012546:	4639      	mov	r1, r7
 8012548:	4642      	mov	r2, r8
 801254a:	4630      	mov	r0, r6
 801254c:	f000 fb34 	bl	8012bb8 <__lshift>
 8012550:	4607      	mov	r7, r0
 8012552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012554:	2b00      	cmp	r3, #0
 8012556:	d05d      	beq.n	8012614 <_dtoa_r+0x99c>
 8012558:	6879      	ldr	r1, [r7, #4]
 801255a:	4630      	mov	r0, r6
 801255c:	f000 f91a 	bl	8012794 <_Balloc>
 8012560:	4680      	mov	r8, r0
 8012562:	b928      	cbnz	r0, 8012570 <_dtoa_r+0x8f8>
 8012564:	4b82      	ldr	r3, [pc, #520]	; (8012770 <_dtoa_r+0xaf8>)
 8012566:	4602      	mov	r2, r0
 8012568:	f240 21ea 	movw	r1, #746	; 0x2ea
 801256c:	f7ff bb9a 	b.w	8011ca4 <_dtoa_r+0x2c>
 8012570:	693a      	ldr	r2, [r7, #16]
 8012572:	3202      	adds	r2, #2
 8012574:	0092      	lsls	r2, r2, #2
 8012576:	f107 010c 	add.w	r1, r7, #12
 801257a:	300c      	adds	r0, #12
 801257c:	f7fe fe96 	bl	80112ac <memcpy>
 8012580:	2201      	movs	r2, #1
 8012582:	4641      	mov	r1, r8
 8012584:	4630      	mov	r0, r6
 8012586:	f000 fb17 	bl	8012bb8 <__lshift>
 801258a:	9b00      	ldr	r3, [sp, #0]
 801258c:	3301      	adds	r3, #1
 801258e:	9305      	str	r3, [sp, #20]
 8012590:	9b00      	ldr	r3, [sp, #0]
 8012592:	4453      	add	r3, sl
 8012594:	9309      	str	r3, [sp, #36]	; 0x24
 8012596:	9b02      	ldr	r3, [sp, #8]
 8012598:	f003 0301 	and.w	r3, r3, #1
 801259c:	46b9      	mov	r9, r7
 801259e:	9308      	str	r3, [sp, #32]
 80125a0:	4607      	mov	r7, r0
 80125a2:	9b05      	ldr	r3, [sp, #20]
 80125a4:	4621      	mov	r1, r4
 80125a6:	3b01      	subs	r3, #1
 80125a8:	4628      	mov	r0, r5
 80125aa:	9302      	str	r3, [sp, #8]
 80125ac:	f7ff fad6 	bl	8011b5c <quorem>
 80125b0:	4603      	mov	r3, r0
 80125b2:	3330      	adds	r3, #48	; 0x30
 80125b4:	9006      	str	r0, [sp, #24]
 80125b6:	4649      	mov	r1, r9
 80125b8:	4628      	mov	r0, r5
 80125ba:	930a      	str	r3, [sp, #40]	; 0x28
 80125bc:	f000 fb68 	bl	8012c90 <__mcmp>
 80125c0:	463a      	mov	r2, r7
 80125c2:	4682      	mov	sl, r0
 80125c4:	4621      	mov	r1, r4
 80125c6:	4630      	mov	r0, r6
 80125c8:	f000 fb7e 	bl	8012cc8 <__mdiff>
 80125cc:	68c2      	ldr	r2, [r0, #12]
 80125ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125d0:	4680      	mov	r8, r0
 80125d2:	bb0a      	cbnz	r2, 8012618 <_dtoa_r+0x9a0>
 80125d4:	4601      	mov	r1, r0
 80125d6:	4628      	mov	r0, r5
 80125d8:	f000 fb5a 	bl	8012c90 <__mcmp>
 80125dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125de:	4602      	mov	r2, r0
 80125e0:	4641      	mov	r1, r8
 80125e2:	4630      	mov	r0, r6
 80125e4:	920e      	str	r2, [sp, #56]	; 0x38
 80125e6:	930a      	str	r3, [sp, #40]	; 0x28
 80125e8:	f000 f914 	bl	8012814 <_Bfree>
 80125ec:	9b07      	ldr	r3, [sp, #28]
 80125ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80125f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80125f4:	ea43 0102 	orr.w	r1, r3, r2
 80125f8:	9b08      	ldr	r3, [sp, #32]
 80125fa:	430b      	orrs	r3, r1
 80125fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125fe:	d10d      	bne.n	801261c <_dtoa_r+0x9a4>
 8012600:	2b39      	cmp	r3, #57	; 0x39
 8012602:	d029      	beq.n	8012658 <_dtoa_r+0x9e0>
 8012604:	f1ba 0f00 	cmp.w	sl, #0
 8012608:	dd01      	ble.n	801260e <_dtoa_r+0x996>
 801260a:	9b06      	ldr	r3, [sp, #24]
 801260c:	3331      	adds	r3, #49	; 0x31
 801260e:	9a02      	ldr	r2, [sp, #8]
 8012610:	7013      	strb	r3, [r2, #0]
 8012612:	e774      	b.n	80124fe <_dtoa_r+0x886>
 8012614:	4638      	mov	r0, r7
 8012616:	e7b8      	b.n	801258a <_dtoa_r+0x912>
 8012618:	2201      	movs	r2, #1
 801261a:	e7e1      	b.n	80125e0 <_dtoa_r+0x968>
 801261c:	f1ba 0f00 	cmp.w	sl, #0
 8012620:	db06      	blt.n	8012630 <_dtoa_r+0x9b8>
 8012622:	9907      	ldr	r1, [sp, #28]
 8012624:	ea41 0a0a 	orr.w	sl, r1, sl
 8012628:	9908      	ldr	r1, [sp, #32]
 801262a:	ea5a 0101 	orrs.w	r1, sl, r1
 801262e:	d120      	bne.n	8012672 <_dtoa_r+0x9fa>
 8012630:	2a00      	cmp	r2, #0
 8012632:	ddec      	ble.n	801260e <_dtoa_r+0x996>
 8012634:	4629      	mov	r1, r5
 8012636:	2201      	movs	r2, #1
 8012638:	4630      	mov	r0, r6
 801263a:	9305      	str	r3, [sp, #20]
 801263c:	f000 fabc 	bl	8012bb8 <__lshift>
 8012640:	4621      	mov	r1, r4
 8012642:	4605      	mov	r5, r0
 8012644:	f000 fb24 	bl	8012c90 <__mcmp>
 8012648:	2800      	cmp	r0, #0
 801264a:	9b05      	ldr	r3, [sp, #20]
 801264c:	dc02      	bgt.n	8012654 <_dtoa_r+0x9dc>
 801264e:	d1de      	bne.n	801260e <_dtoa_r+0x996>
 8012650:	07da      	lsls	r2, r3, #31
 8012652:	d5dc      	bpl.n	801260e <_dtoa_r+0x996>
 8012654:	2b39      	cmp	r3, #57	; 0x39
 8012656:	d1d8      	bne.n	801260a <_dtoa_r+0x992>
 8012658:	9a02      	ldr	r2, [sp, #8]
 801265a:	2339      	movs	r3, #57	; 0x39
 801265c:	7013      	strb	r3, [r2, #0]
 801265e:	4643      	mov	r3, r8
 8012660:	4698      	mov	r8, r3
 8012662:	3b01      	subs	r3, #1
 8012664:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012668:	2a39      	cmp	r2, #57	; 0x39
 801266a:	d051      	beq.n	8012710 <_dtoa_r+0xa98>
 801266c:	3201      	adds	r2, #1
 801266e:	701a      	strb	r2, [r3, #0]
 8012670:	e745      	b.n	80124fe <_dtoa_r+0x886>
 8012672:	2a00      	cmp	r2, #0
 8012674:	dd03      	ble.n	801267e <_dtoa_r+0xa06>
 8012676:	2b39      	cmp	r3, #57	; 0x39
 8012678:	d0ee      	beq.n	8012658 <_dtoa_r+0x9e0>
 801267a:	3301      	adds	r3, #1
 801267c:	e7c7      	b.n	801260e <_dtoa_r+0x996>
 801267e:	9a05      	ldr	r2, [sp, #20]
 8012680:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012682:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012686:	428a      	cmp	r2, r1
 8012688:	d02b      	beq.n	80126e2 <_dtoa_r+0xa6a>
 801268a:	4629      	mov	r1, r5
 801268c:	2300      	movs	r3, #0
 801268e:	220a      	movs	r2, #10
 8012690:	4630      	mov	r0, r6
 8012692:	f000 f8e1 	bl	8012858 <__multadd>
 8012696:	45b9      	cmp	r9, r7
 8012698:	4605      	mov	r5, r0
 801269a:	f04f 0300 	mov.w	r3, #0
 801269e:	f04f 020a 	mov.w	r2, #10
 80126a2:	4649      	mov	r1, r9
 80126a4:	4630      	mov	r0, r6
 80126a6:	d107      	bne.n	80126b8 <_dtoa_r+0xa40>
 80126a8:	f000 f8d6 	bl	8012858 <__multadd>
 80126ac:	4681      	mov	r9, r0
 80126ae:	4607      	mov	r7, r0
 80126b0:	9b05      	ldr	r3, [sp, #20]
 80126b2:	3301      	adds	r3, #1
 80126b4:	9305      	str	r3, [sp, #20]
 80126b6:	e774      	b.n	80125a2 <_dtoa_r+0x92a>
 80126b8:	f000 f8ce 	bl	8012858 <__multadd>
 80126bc:	4639      	mov	r1, r7
 80126be:	4681      	mov	r9, r0
 80126c0:	2300      	movs	r3, #0
 80126c2:	220a      	movs	r2, #10
 80126c4:	4630      	mov	r0, r6
 80126c6:	f000 f8c7 	bl	8012858 <__multadd>
 80126ca:	4607      	mov	r7, r0
 80126cc:	e7f0      	b.n	80126b0 <_dtoa_r+0xa38>
 80126ce:	f1ba 0f00 	cmp.w	sl, #0
 80126d2:	9a00      	ldr	r2, [sp, #0]
 80126d4:	bfcc      	ite	gt
 80126d6:	46d0      	movgt	r8, sl
 80126d8:	f04f 0801 	movle.w	r8, #1
 80126dc:	4490      	add	r8, r2
 80126de:	f04f 0900 	mov.w	r9, #0
 80126e2:	4629      	mov	r1, r5
 80126e4:	2201      	movs	r2, #1
 80126e6:	4630      	mov	r0, r6
 80126e8:	9302      	str	r3, [sp, #8]
 80126ea:	f000 fa65 	bl	8012bb8 <__lshift>
 80126ee:	4621      	mov	r1, r4
 80126f0:	4605      	mov	r5, r0
 80126f2:	f000 facd 	bl	8012c90 <__mcmp>
 80126f6:	2800      	cmp	r0, #0
 80126f8:	dcb1      	bgt.n	801265e <_dtoa_r+0x9e6>
 80126fa:	d102      	bne.n	8012702 <_dtoa_r+0xa8a>
 80126fc:	9b02      	ldr	r3, [sp, #8]
 80126fe:	07db      	lsls	r3, r3, #31
 8012700:	d4ad      	bmi.n	801265e <_dtoa_r+0x9e6>
 8012702:	4643      	mov	r3, r8
 8012704:	4698      	mov	r8, r3
 8012706:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801270a:	2a30      	cmp	r2, #48	; 0x30
 801270c:	d0fa      	beq.n	8012704 <_dtoa_r+0xa8c>
 801270e:	e6f6      	b.n	80124fe <_dtoa_r+0x886>
 8012710:	9a00      	ldr	r2, [sp, #0]
 8012712:	429a      	cmp	r2, r3
 8012714:	d1a4      	bne.n	8012660 <_dtoa_r+0x9e8>
 8012716:	f10b 0b01 	add.w	fp, fp, #1
 801271a:	2331      	movs	r3, #49	; 0x31
 801271c:	e778      	b.n	8012610 <_dtoa_r+0x998>
 801271e:	4b15      	ldr	r3, [pc, #84]	; (8012774 <_dtoa_r+0xafc>)
 8012720:	f7ff bb12 	b.w	8011d48 <_dtoa_r+0xd0>
 8012724:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012726:	2b00      	cmp	r3, #0
 8012728:	f47f aaee 	bne.w	8011d08 <_dtoa_r+0x90>
 801272c:	4b12      	ldr	r3, [pc, #72]	; (8012778 <_dtoa_r+0xb00>)
 801272e:	f7ff bb0b 	b.w	8011d48 <_dtoa_r+0xd0>
 8012732:	f1ba 0f00 	cmp.w	sl, #0
 8012736:	dc03      	bgt.n	8012740 <_dtoa_r+0xac8>
 8012738:	9b07      	ldr	r3, [sp, #28]
 801273a:	2b02      	cmp	r3, #2
 801273c:	f73f aec7 	bgt.w	80124ce <_dtoa_r+0x856>
 8012740:	f8dd 8000 	ldr.w	r8, [sp]
 8012744:	4621      	mov	r1, r4
 8012746:	4628      	mov	r0, r5
 8012748:	f7ff fa08 	bl	8011b5c <quorem>
 801274c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012750:	f808 3b01 	strb.w	r3, [r8], #1
 8012754:	9a00      	ldr	r2, [sp, #0]
 8012756:	eba8 0202 	sub.w	r2, r8, r2
 801275a:	4592      	cmp	sl, r2
 801275c:	ddb7      	ble.n	80126ce <_dtoa_r+0xa56>
 801275e:	4629      	mov	r1, r5
 8012760:	2300      	movs	r3, #0
 8012762:	220a      	movs	r2, #10
 8012764:	4630      	mov	r0, r6
 8012766:	f000 f877 	bl	8012858 <__multadd>
 801276a:	4605      	mov	r5, r0
 801276c:	e7ea      	b.n	8012744 <_dtoa_r+0xacc>
 801276e:	bf00      	nop
 8012770:	0801489b 	.word	0x0801489b
 8012774:	080147f4 	.word	0x080147f4
 8012778:	08014818 	.word	0x08014818

0801277c <_localeconv_r>:
 801277c:	4800      	ldr	r0, [pc, #0]	; (8012780 <_localeconv_r+0x4>)
 801277e:	4770      	bx	lr
 8012780:	24000164 	.word	0x24000164

08012784 <malloc>:
 8012784:	4b02      	ldr	r3, [pc, #8]	; (8012790 <malloc+0xc>)
 8012786:	4601      	mov	r1, r0
 8012788:	6818      	ldr	r0, [r3, #0]
 801278a:	f000 bbe1 	b.w	8012f50 <_malloc_r>
 801278e:	bf00      	nop
 8012790:	24000010 	.word	0x24000010

08012794 <_Balloc>:
 8012794:	b570      	push	{r4, r5, r6, lr}
 8012796:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012798:	4604      	mov	r4, r0
 801279a:	460d      	mov	r5, r1
 801279c:	b976      	cbnz	r6, 80127bc <_Balloc+0x28>
 801279e:	2010      	movs	r0, #16
 80127a0:	f7ff fff0 	bl	8012784 <malloc>
 80127a4:	4602      	mov	r2, r0
 80127a6:	6260      	str	r0, [r4, #36]	; 0x24
 80127a8:	b920      	cbnz	r0, 80127b4 <_Balloc+0x20>
 80127aa:	4b18      	ldr	r3, [pc, #96]	; (801280c <_Balloc+0x78>)
 80127ac:	4818      	ldr	r0, [pc, #96]	; (8012810 <_Balloc+0x7c>)
 80127ae:	2166      	movs	r1, #102	; 0x66
 80127b0:	f000 fc38 	bl	8013024 <__assert_func>
 80127b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127b8:	6006      	str	r6, [r0, #0]
 80127ba:	60c6      	str	r6, [r0, #12]
 80127bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80127be:	68f3      	ldr	r3, [r6, #12]
 80127c0:	b183      	cbz	r3, 80127e4 <_Balloc+0x50>
 80127c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80127ca:	b9b8      	cbnz	r0, 80127fc <_Balloc+0x68>
 80127cc:	2101      	movs	r1, #1
 80127ce:	fa01 f605 	lsl.w	r6, r1, r5
 80127d2:	1d72      	adds	r2, r6, #5
 80127d4:	0092      	lsls	r2, r2, #2
 80127d6:	4620      	mov	r0, r4
 80127d8:	f000 fb5a 	bl	8012e90 <_calloc_r>
 80127dc:	b160      	cbz	r0, 80127f8 <_Balloc+0x64>
 80127de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80127e2:	e00e      	b.n	8012802 <_Balloc+0x6e>
 80127e4:	2221      	movs	r2, #33	; 0x21
 80127e6:	2104      	movs	r1, #4
 80127e8:	4620      	mov	r0, r4
 80127ea:	f000 fb51 	bl	8012e90 <_calloc_r>
 80127ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127f0:	60f0      	str	r0, [r6, #12]
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d1e4      	bne.n	80127c2 <_Balloc+0x2e>
 80127f8:	2000      	movs	r0, #0
 80127fa:	bd70      	pop	{r4, r5, r6, pc}
 80127fc:	6802      	ldr	r2, [r0, #0]
 80127fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012802:	2300      	movs	r3, #0
 8012804:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012808:	e7f7      	b.n	80127fa <_Balloc+0x66>
 801280a:	bf00      	nop
 801280c:	08014825 	.word	0x08014825
 8012810:	080148ac 	.word	0x080148ac

08012814 <_Bfree>:
 8012814:	b570      	push	{r4, r5, r6, lr}
 8012816:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012818:	4605      	mov	r5, r0
 801281a:	460c      	mov	r4, r1
 801281c:	b976      	cbnz	r6, 801283c <_Bfree+0x28>
 801281e:	2010      	movs	r0, #16
 8012820:	f7ff ffb0 	bl	8012784 <malloc>
 8012824:	4602      	mov	r2, r0
 8012826:	6268      	str	r0, [r5, #36]	; 0x24
 8012828:	b920      	cbnz	r0, 8012834 <_Bfree+0x20>
 801282a:	4b09      	ldr	r3, [pc, #36]	; (8012850 <_Bfree+0x3c>)
 801282c:	4809      	ldr	r0, [pc, #36]	; (8012854 <_Bfree+0x40>)
 801282e:	218a      	movs	r1, #138	; 0x8a
 8012830:	f000 fbf8 	bl	8013024 <__assert_func>
 8012834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012838:	6006      	str	r6, [r0, #0]
 801283a:	60c6      	str	r6, [r0, #12]
 801283c:	b13c      	cbz	r4, 801284e <_Bfree+0x3a>
 801283e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012840:	6862      	ldr	r2, [r4, #4]
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012848:	6021      	str	r1, [r4, #0]
 801284a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801284e:	bd70      	pop	{r4, r5, r6, pc}
 8012850:	08014825 	.word	0x08014825
 8012854:	080148ac 	.word	0x080148ac

08012858 <__multadd>:
 8012858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801285c:	690e      	ldr	r6, [r1, #16]
 801285e:	4607      	mov	r7, r0
 8012860:	4698      	mov	r8, r3
 8012862:	460c      	mov	r4, r1
 8012864:	f101 0014 	add.w	r0, r1, #20
 8012868:	2300      	movs	r3, #0
 801286a:	6805      	ldr	r5, [r0, #0]
 801286c:	b2a9      	uxth	r1, r5
 801286e:	fb02 8101 	mla	r1, r2, r1, r8
 8012872:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012876:	0c2d      	lsrs	r5, r5, #16
 8012878:	fb02 c505 	mla	r5, r2, r5, ip
 801287c:	b289      	uxth	r1, r1
 801287e:	3301      	adds	r3, #1
 8012880:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012884:	429e      	cmp	r6, r3
 8012886:	f840 1b04 	str.w	r1, [r0], #4
 801288a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801288e:	dcec      	bgt.n	801286a <__multadd+0x12>
 8012890:	f1b8 0f00 	cmp.w	r8, #0
 8012894:	d022      	beq.n	80128dc <__multadd+0x84>
 8012896:	68a3      	ldr	r3, [r4, #8]
 8012898:	42b3      	cmp	r3, r6
 801289a:	dc19      	bgt.n	80128d0 <__multadd+0x78>
 801289c:	6861      	ldr	r1, [r4, #4]
 801289e:	4638      	mov	r0, r7
 80128a0:	3101      	adds	r1, #1
 80128a2:	f7ff ff77 	bl	8012794 <_Balloc>
 80128a6:	4605      	mov	r5, r0
 80128a8:	b928      	cbnz	r0, 80128b6 <__multadd+0x5e>
 80128aa:	4602      	mov	r2, r0
 80128ac:	4b0d      	ldr	r3, [pc, #52]	; (80128e4 <__multadd+0x8c>)
 80128ae:	480e      	ldr	r0, [pc, #56]	; (80128e8 <__multadd+0x90>)
 80128b0:	21b5      	movs	r1, #181	; 0xb5
 80128b2:	f000 fbb7 	bl	8013024 <__assert_func>
 80128b6:	6922      	ldr	r2, [r4, #16]
 80128b8:	3202      	adds	r2, #2
 80128ba:	f104 010c 	add.w	r1, r4, #12
 80128be:	0092      	lsls	r2, r2, #2
 80128c0:	300c      	adds	r0, #12
 80128c2:	f7fe fcf3 	bl	80112ac <memcpy>
 80128c6:	4621      	mov	r1, r4
 80128c8:	4638      	mov	r0, r7
 80128ca:	f7ff ffa3 	bl	8012814 <_Bfree>
 80128ce:	462c      	mov	r4, r5
 80128d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80128d4:	3601      	adds	r6, #1
 80128d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80128da:	6126      	str	r6, [r4, #16]
 80128dc:	4620      	mov	r0, r4
 80128de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128e2:	bf00      	nop
 80128e4:	0801489b 	.word	0x0801489b
 80128e8:	080148ac 	.word	0x080148ac

080128ec <__hi0bits>:
 80128ec:	0c03      	lsrs	r3, r0, #16
 80128ee:	041b      	lsls	r3, r3, #16
 80128f0:	b9d3      	cbnz	r3, 8012928 <__hi0bits+0x3c>
 80128f2:	0400      	lsls	r0, r0, #16
 80128f4:	2310      	movs	r3, #16
 80128f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80128fa:	bf04      	itt	eq
 80128fc:	0200      	lsleq	r0, r0, #8
 80128fe:	3308      	addeq	r3, #8
 8012900:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012904:	bf04      	itt	eq
 8012906:	0100      	lsleq	r0, r0, #4
 8012908:	3304      	addeq	r3, #4
 801290a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801290e:	bf04      	itt	eq
 8012910:	0080      	lsleq	r0, r0, #2
 8012912:	3302      	addeq	r3, #2
 8012914:	2800      	cmp	r0, #0
 8012916:	db05      	blt.n	8012924 <__hi0bits+0x38>
 8012918:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801291c:	f103 0301 	add.w	r3, r3, #1
 8012920:	bf08      	it	eq
 8012922:	2320      	moveq	r3, #32
 8012924:	4618      	mov	r0, r3
 8012926:	4770      	bx	lr
 8012928:	2300      	movs	r3, #0
 801292a:	e7e4      	b.n	80128f6 <__hi0bits+0xa>

0801292c <__lo0bits>:
 801292c:	6803      	ldr	r3, [r0, #0]
 801292e:	f013 0207 	ands.w	r2, r3, #7
 8012932:	4601      	mov	r1, r0
 8012934:	d00b      	beq.n	801294e <__lo0bits+0x22>
 8012936:	07da      	lsls	r2, r3, #31
 8012938:	d424      	bmi.n	8012984 <__lo0bits+0x58>
 801293a:	0798      	lsls	r0, r3, #30
 801293c:	bf49      	itett	mi
 801293e:	085b      	lsrmi	r3, r3, #1
 8012940:	089b      	lsrpl	r3, r3, #2
 8012942:	2001      	movmi	r0, #1
 8012944:	600b      	strmi	r3, [r1, #0]
 8012946:	bf5c      	itt	pl
 8012948:	600b      	strpl	r3, [r1, #0]
 801294a:	2002      	movpl	r0, #2
 801294c:	4770      	bx	lr
 801294e:	b298      	uxth	r0, r3
 8012950:	b9b0      	cbnz	r0, 8012980 <__lo0bits+0x54>
 8012952:	0c1b      	lsrs	r3, r3, #16
 8012954:	2010      	movs	r0, #16
 8012956:	f013 0fff 	tst.w	r3, #255	; 0xff
 801295a:	bf04      	itt	eq
 801295c:	0a1b      	lsreq	r3, r3, #8
 801295e:	3008      	addeq	r0, #8
 8012960:	071a      	lsls	r2, r3, #28
 8012962:	bf04      	itt	eq
 8012964:	091b      	lsreq	r3, r3, #4
 8012966:	3004      	addeq	r0, #4
 8012968:	079a      	lsls	r2, r3, #30
 801296a:	bf04      	itt	eq
 801296c:	089b      	lsreq	r3, r3, #2
 801296e:	3002      	addeq	r0, #2
 8012970:	07da      	lsls	r2, r3, #31
 8012972:	d403      	bmi.n	801297c <__lo0bits+0x50>
 8012974:	085b      	lsrs	r3, r3, #1
 8012976:	f100 0001 	add.w	r0, r0, #1
 801297a:	d005      	beq.n	8012988 <__lo0bits+0x5c>
 801297c:	600b      	str	r3, [r1, #0]
 801297e:	4770      	bx	lr
 8012980:	4610      	mov	r0, r2
 8012982:	e7e8      	b.n	8012956 <__lo0bits+0x2a>
 8012984:	2000      	movs	r0, #0
 8012986:	4770      	bx	lr
 8012988:	2020      	movs	r0, #32
 801298a:	4770      	bx	lr

0801298c <__i2b>:
 801298c:	b510      	push	{r4, lr}
 801298e:	460c      	mov	r4, r1
 8012990:	2101      	movs	r1, #1
 8012992:	f7ff feff 	bl	8012794 <_Balloc>
 8012996:	4602      	mov	r2, r0
 8012998:	b928      	cbnz	r0, 80129a6 <__i2b+0x1a>
 801299a:	4b05      	ldr	r3, [pc, #20]	; (80129b0 <__i2b+0x24>)
 801299c:	4805      	ldr	r0, [pc, #20]	; (80129b4 <__i2b+0x28>)
 801299e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80129a2:	f000 fb3f 	bl	8013024 <__assert_func>
 80129a6:	2301      	movs	r3, #1
 80129a8:	6144      	str	r4, [r0, #20]
 80129aa:	6103      	str	r3, [r0, #16]
 80129ac:	bd10      	pop	{r4, pc}
 80129ae:	bf00      	nop
 80129b0:	0801489b 	.word	0x0801489b
 80129b4:	080148ac 	.word	0x080148ac

080129b8 <__multiply>:
 80129b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129bc:	4614      	mov	r4, r2
 80129be:	690a      	ldr	r2, [r1, #16]
 80129c0:	6923      	ldr	r3, [r4, #16]
 80129c2:	429a      	cmp	r2, r3
 80129c4:	bfb8      	it	lt
 80129c6:	460b      	movlt	r3, r1
 80129c8:	460d      	mov	r5, r1
 80129ca:	bfbc      	itt	lt
 80129cc:	4625      	movlt	r5, r4
 80129ce:	461c      	movlt	r4, r3
 80129d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80129d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80129d8:	68ab      	ldr	r3, [r5, #8]
 80129da:	6869      	ldr	r1, [r5, #4]
 80129dc:	eb0a 0709 	add.w	r7, sl, r9
 80129e0:	42bb      	cmp	r3, r7
 80129e2:	b085      	sub	sp, #20
 80129e4:	bfb8      	it	lt
 80129e6:	3101      	addlt	r1, #1
 80129e8:	f7ff fed4 	bl	8012794 <_Balloc>
 80129ec:	b930      	cbnz	r0, 80129fc <__multiply+0x44>
 80129ee:	4602      	mov	r2, r0
 80129f0:	4b42      	ldr	r3, [pc, #264]	; (8012afc <__multiply+0x144>)
 80129f2:	4843      	ldr	r0, [pc, #268]	; (8012b00 <__multiply+0x148>)
 80129f4:	f240 115d 	movw	r1, #349	; 0x15d
 80129f8:	f000 fb14 	bl	8013024 <__assert_func>
 80129fc:	f100 0614 	add.w	r6, r0, #20
 8012a00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012a04:	4633      	mov	r3, r6
 8012a06:	2200      	movs	r2, #0
 8012a08:	4543      	cmp	r3, r8
 8012a0a:	d31e      	bcc.n	8012a4a <__multiply+0x92>
 8012a0c:	f105 0c14 	add.w	ip, r5, #20
 8012a10:	f104 0314 	add.w	r3, r4, #20
 8012a14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012a18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012a1c:	9202      	str	r2, [sp, #8]
 8012a1e:	ebac 0205 	sub.w	r2, ip, r5
 8012a22:	3a15      	subs	r2, #21
 8012a24:	f022 0203 	bic.w	r2, r2, #3
 8012a28:	3204      	adds	r2, #4
 8012a2a:	f105 0115 	add.w	r1, r5, #21
 8012a2e:	458c      	cmp	ip, r1
 8012a30:	bf38      	it	cc
 8012a32:	2204      	movcc	r2, #4
 8012a34:	9201      	str	r2, [sp, #4]
 8012a36:	9a02      	ldr	r2, [sp, #8]
 8012a38:	9303      	str	r3, [sp, #12]
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d808      	bhi.n	8012a50 <__multiply+0x98>
 8012a3e:	2f00      	cmp	r7, #0
 8012a40:	dc55      	bgt.n	8012aee <__multiply+0x136>
 8012a42:	6107      	str	r7, [r0, #16]
 8012a44:	b005      	add	sp, #20
 8012a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a4a:	f843 2b04 	str.w	r2, [r3], #4
 8012a4e:	e7db      	b.n	8012a08 <__multiply+0x50>
 8012a50:	f8b3 a000 	ldrh.w	sl, [r3]
 8012a54:	f1ba 0f00 	cmp.w	sl, #0
 8012a58:	d020      	beq.n	8012a9c <__multiply+0xe4>
 8012a5a:	f105 0e14 	add.w	lr, r5, #20
 8012a5e:	46b1      	mov	r9, r6
 8012a60:	2200      	movs	r2, #0
 8012a62:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012a66:	f8d9 b000 	ldr.w	fp, [r9]
 8012a6a:	b2a1      	uxth	r1, r4
 8012a6c:	fa1f fb8b 	uxth.w	fp, fp
 8012a70:	fb0a b101 	mla	r1, sl, r1, fp
 8012a74:	4411      	add	r1, r2
 8012a76:	f8d9 2000 	ldr.w	r2, [r9]
 8012a7a:	0c24      	lsrs	r4, r4, #16
 8012a7c:	0c12      	lsrs	r2, r2, #16
 8012a7e:	fb0a 2404 	mla	r4, sl, r4, r2
 8012a82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012a86:	b289      	uxth	r1, r1
 8012a88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012a8c:	45f4      	cmp	ip, lr
 8012a8e:	f849 1b04 	str.w	r1, [r9], #4
 8012a92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012a96:	d8e4      	bhi.n	8012a62 <__multiply+0xaa>
 8012a98:	9901      	ldr	r1, [sp, #4]
 8012a9a:	5072      	str	r2, [r6, r1]
 8012a9c:	9a03      	ldr	r2, [sp, #12]
 8012a9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012aa2:	3304      	adds	r3, #4
 8012aa4:	f1b9 0f00 	cmp.w	r9, #0
 8012aa8:	d01f      	beq.n	8012aea <__multiply+0x132>
 8012aaa:	6834      	ldr	r4, [r6, #0]
 8012aac:	f105 0114 	add.w	r1, r5, #20
 8012ab0:	46b6      	mov	lr, r6
 8012ab2:	f04f 0a00 	mov.w	sl, #0
 8012ab6:	880a      	ldrh	r2, [r1, #0]
 8012ab8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012abc:	fb09 b202 	mla	r2, r9, r2, fp
 8012ac0:	4492      	add	sl, r2
 8012ac2:	b2a4      	uxth	r4, r4
 8012ac4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012ac8:	f84e 4b04 	str.w	r4, [lr], #4
 8012acc:	f851 4b04 	ldr.w	r4, [r1], #4
 8012ad0:	f8be 2000 	ldrh.w	r2, [lr]
 8012ad4:	0c24      	lsrs	r4, r4, #16
 8012ad6:	fb09 2404 	mla	r4, r9, r4, r2
 8012ada:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012ade:	458c      	cmp	ip, r1
 8012ae0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012ae4:	d8e7      	bhi.n	8012ab6 <__multiply+0xfe>
 8012ae6:	9a01      	ldr	r2, [sp, #4]
 8012ae8:	50b4      	str	r4, [r6, r2]
 8012aea:	3604      	adds	r6, #4
 8012aec:	e7a3      	b.n	8012a36 <__multiply+0x7e>
 8012aee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d1a5      	bne.n	8012a42 <__multiply+0x8a>
 8012af6:	3f01      	subs	r7, #1
 8012af8:	e7a1      	b.n	8012a3e <__multiply+0x86>
 8012afa:	bf00      	nop
 8012afc:	0801489b 	.word	0x0801489b
 8012b00:	080148ac 	.word	0x080148ac

08012b04 <__pow5mult>:
 8012b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b08:	4615      	mov	r5, r2
 8012b0a:	f012 0203 	ands.w	r2, r2, #3
 8012b0e:	4606      	mov	r6, r0
 8012b10:	460f      	mov	r7, r1
 8012b12:	d007      	beq.n	8012b24 <__pow5mult+0x20>
 8012b14:	4c25      	ldr	r4, [pc, #148]	; (8012bac <__pow5mult+0xa8>)
 8012b16:	3a01      	subs	r2, #1
 8012b18:	2300      	movs	r3, #0
 8012b1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b1e:	f7ff fe9b 	bl	8012858 <__multadd>
 8012b22:	4607      	mov	r7, r0
 8012b24:	10ad      	asrs	r5, r5, #2
 8012b26:	d03d      	beq.n	8012ba4 <__pow5mult+0xa0>
 8012b28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012b2a:	b97c      	cbnz	r4, 8012b4c <__pow5mult+0x48>
 8012b2c:	2010      	movs	r0, #16
 8012b2e:	f7ff fe29 	bl	8012784 <malloc>
 8012b32:	4602      	mov	r2, r0
 8012b34:	6270      	str	r0, [r6, #36]	; 0x24
 8012b36:	b928      	cbnz	r0, 8012b44 <__pow5mult+0x40>
 8012b38:	4b1d      	ldr	r3, [pc, #116]	; (8012bb0 <__pow5mult+0xac>)
 8012b3a:	481e      	ldr	r0, [pc, #120]	; (8012bb4 <__pow5mult+0xb0>)
 8012b3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012b40:	f000 fa70 	bl	8013024 <__assert_func>
 8012b44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b48:	6004      	str	r4, [r0, #0]
 8012b4a:	60c4      	str	r4, [r0, #12]
 8012b4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012b50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b54:	b94c      	cbnz	r4, 8012b6a <__pow5mult+0x66>
 8012b56:	f240 2171 	movw	r1, #625	; 0x271
 8012b5a:	4630      	mov	r0, r6
 8012b5c:	f7ff ff16 	bl	801298c <__i2b>
 8012b60:	2300      	movs	r3, #0
 8012b62:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b66:	4604      	mov	r4, r0
 8012b68:	6003      	str	r3, [r0, #0]
 8012b6a:	f04f 0900 	mov.w	r9, #0
 8012b6e:	07eb      	lsls	r3, r5, #31
 8012b70:	d50a      	bpl.n	8012b88 <__pow5mult+0x84>
 8012b72:	4639      	mov	r1, r7
 8012b74:	4622      	mov	r2, r4
 8012b76:	4630      	mov	r0, r6
 8012b78:	f7ff ff1e 	bl	80129b8 <__multiply>
 8012b7c:	4639      	mov	r1, r7
 8012b7e:	4680      	mov	r8, r0
 8012b80:	4630      	mov	r0, r6
 8012b82:	f7ff fe47 	bl	8012814 <_Bfree>
 8012b86:	4647      	mov	r7, r8
 8012b88:	106d      	asrs	r5, r5, #1
 8012b8a:	d00b      	beq.n	8012ba4 <__pow5mult+0xa0>
 8012b8c:	6820      	ldr	r0, [r4, #0]
 8012b8e:	b938      	cbnz	r0, 8012ba0 <__pow5mult+0x9c>
 8012b90:	4622      	mov	r2, r4
 8012b92:	4621      	mov	r1, r4
 8012b94:	4630      	mov	r0, r6
 8012b96:	f7ff ff0f 	bl	80129b8 <__multiply>
 8012b9a:	6020      	str	r0, [r4, #0]
 8012b9c:	f8c0 9000 	str.w	r9, [r0]
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	e7e4      	b.n	8012b6e <__pow5mult+0x6a>
 8012ba4:	4638      	mov	r0, r7
 8012ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012baa:	bf00      	nop
 8012bac:	08014a00 	.word	0x08014a00
 8012bb0:	08014825 	.word	0x08014825
 8012bb4:	080148ac 	.word	0x080148ac

08012bb8 <__lshift>:
 8012bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bbc:	460c      	mov	r4, r1
 8012bbe:	6849      	ldr	r1, [r1, #4]
 8012bc0:	6923      	ldr	r3, [r4, #16]
 8012bc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012bc6:	68a3      	ldr	r3, [r4, #8]
 8012bc8:	4607      	mov	r7, r0
 8012bca:	4691      	mov	r9, r2
 8012bcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012bd0:	f108 0601 	add.w	r6, r8, #1
 8012bd4:	42b3      	cmp	r3, r6
 8012bd6:	db0b      	blt.n	8012bf0 <__lshift+0x38>
 8012bd8:	4638      	mov	r0, r7
 8012bda:	f7ff fddb 	bl	8012794 <_Balloc>
 8012bde:	4605      	mov	r5, r0
 8012be0:	b948      	cbnz	r0, 8012bf6 <__lshift+0x3e>
 8012be2:	4602      	mov	r2, r0
 8012be4:	4b28      	ldr	r3, [pc, #160]	; (8012c88 <__lshift+0xd0>)
 8012be6:	4829      	ldr	r0, [pc, #164]	; (8012c8c <__lshift+0xd4>)
 8012be8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012bec:	f000 fa1a 	bl	8013024 <__assert_func>
 8012bf0:	3101      	adds	r1, #1
 8012bf2:	005b      	lsls	r3, r3, #1
 8012bf4:	e7ee      	b.n	8012bd4 <__lshift+0x1c>
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	f100 0114 	add.w	r1, r0, #20
 8012bfc:	f100 0210 	add.w	r2, r0, #16
 8012c00:	4618      	mov	r0, r3
 8012c02:	4553      	cmp	r3, sl
 8012c04:	db33      	blt.n	8012c6e <__lshift+0xb6>
 8012c06:	6920      	ldr	r0, [r4, #16]
 8012c08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c0c:	f104 0314 	add.w	r3, r4, #20
 8012c10:	f019 091f 	ands.w	r9, r9, #31
 8012c14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012c1c:	d02b      	beq.n	8012c76 <__lshift+0xbe>
 8012c1e:	f1c9 0e20 	rsb	lr, r9, #32
 8012c22:	468a      	mov	sl, r1
 8012c24:	2200      	movs	r2, #0
 8012c26:	6818      	ldr	r0, [r3, #0]
 8012c28:	fa00 f009 	lsl.w	r0, r0, r9
 8012c2c:	4302      	orrs	r2, r0
 8012c2e:	f84a 2b04 	str.w	r2, [sl], #4
 8012c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c36:	459c      	cmp	ip, r3
 8012c38:	fa22 f20e 	lsr.w	r2, r2, lr
 8012c3c:	d8f3      	bhi.n	8012c26 <__lshift+0x6e>
 8012c3e:	ebac 0304 	sub.w	r3, ip, r4
 8012c42:	3b15      	subs	r3, #21
 8012c44:	f023 0303 	bic.w	r3, r3, #3
 8012c48:	3304      	adds	r3, #4
 8012c4a:	f104 0015 	add.w	r0, r4, #21
 8012c4e:	4584      	cmp	ip, r0
 8012c50:	bf38      	it	cc
 8012c52:	2304      	movcc	r3, #4
 8012c54:	50ca      	str	r2, [r1, r3]
 8012c56:	b10a      	cbz	r2, 8012c5c <__lshift+0xa4>
 8012c58:	f108 0602 	add.w	r6, r8, #2
 8012c5c:	3e01      	subs	r6, #1
 8012c5e:	4638      	mov	r0, r7
 8012c60:	612e      	str	r6, [r5, #16]
 8012c62:	4621      	mov	r1, r4
 8012c64:	f7ff fdd6 	bl	8012814 <_Bfree>
 8012c68:	4628      	mov	r0, r5
 8012c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012c72:	3301      	adds	r3, #1
 8012c74:	e7c5      	b.n	8012c02 <__lshift+0x4a>
 8012c76:	3904      	subs	r1, #4
 8012c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012c80:	459c      	cmp	ip, r3
 8012c82:	d8f9      	bhi.n	8012c78 <__lshift+0xc0>
 8012c84:	e7ea      	b.n	8012c5c <__lshift+0xa4>
 8012c86:	bf00      	nop
 8012c88:	0801489b 	.word	0x0801489b
 8012c8c:	080148ac 	.word	0x080148ac

08012c90 <__mcmp>:
 8012c90:	b530      	push	{r4, r5, lr}
 8012c92:	6902      	ldr	r2, [r0, #16]
 8012c94:	690c      	ldr	r4, [r1, #16]
 8012c96:	1b12      	subs	r2, r2, r4
 8012c98:	d10e      	bne.n	8012cb8 <__mcmp+0x28>
 8012c9a:	f100 0314 	add.w	r3, r0, #20
 8012c9e:	3114      	adds	r1, #20
 8012ca0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012ca4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012ca8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012cac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012cb0:	42a5      	cmp	r5, r4
 8012cb2:	d003      	beq.n	8012cbc <__mcmp+0x2c>
 8012cb4:	d305      	bcc.n	8012cc2 <__mcmp+0x32>
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	4610      	mov	r0, r2
 8012cba:	bd30      	pop	{r4, r5, pc}
 8012cbc:	4283      	cmp	r3, r0
 8012cbe:	d3f3      	bcc.n	8012ca8 <__mcmp+0x18>
 8012cc0:	e7fa      	b.n	8012cb8 <__mcmp+0x28>
 8012cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8012cc6:	e7f7      	b.n	8012cb8 <__mcmp+0x28>

08012cc8 <__mdiff>:
 8012cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ccc:	460c      	mov	r4, r1
 8012cce:	4606      	mov	r6, r0
 8012cd0:	4611      	mov	r1, r2
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	4617      	mov	r7, r2
 8012cd6:	f7ff ffdb 	bl	8012c90 <__mcmp>
 8012cda:	1e05      	subs	r5, r0, #0
 8012cdc:	d110      	bne.n	8012d00 <__mdiff+0x38>
 8012cde:	4629      	mov	r1, r5
 8012ce0:	4630      	mov	r0, r6
 8012ce2:	f7ff fd57 	bl	8012794 <_Balloc>
 8012ce6:	b930      	cbnz	r0, 8012cf6 <__mdiff+0x2e>
 8012ce8:	4b39      	ldr	r3, [pc, #228]	; (8012dd0 <__mdiff+0x108>)
 8012cea:	4602      	mov	r2, r0
 8012cec:	f240 2132 	movw	r1, #562	; 0x232
 8012cf0:	4838      	ldr	r0, [pc, #224]	; (8012dd4 <__mdiff+0x10c>)
 8012cf2:	f000 f997 	bl	8013024 <__assert_func>
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012cfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d00:	bfa4      	itt	ge
 8012d02:	463b      	movge	r3, r7
 8012d04:	4627      	movge	r7, r4
 8012d06:	4630      	mov	r0, r6
 8012d08:	6879      	ldr	r1, [r7, #4]
 8012d0a:	bfa6      	itte	ge
 8012d0c:	461c      	movge	r4, r3
 8012d0e:	2500      	movge	r5, #0
 8012d10:	2501      	movlt	r5, #1
 8012d12:	f7ff fd3f 	bl	8012794 <_Balloc>
 8012d16:	b920      	cbnz	r0, 8012d22 <__mdiff+0x5a>
 8012d18:	4b2d      	ldr	r3, [pc, #180]	; (8012dd0 <__mdiff+0x108>)
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012d20:	e7e6      	b.n	8012cf0 <__mdiff+0x28>
 8012d22:	693e      	ldr	r6, [r7, #16]
 8012d24:	60c5      	str	r5, [r0, #12]
 8012d26:	6925      	ldr	r5, [r4, #16]
 8012d28:	f107 0114 	add.w	r1, r7, #20
 8012d2c:	f104 0914 	add.w	r9, r4, #20
 8012d30:	f100 0e14 	add.w	lr, r0, #20
 8012d34:	f107 0210 	add.w	r2, r7, #16
 8012d38:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012d3c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012d40:	46f2      	mov	sl, lr
 8012d42:	2700      	movs	r7, #0
 8012d44:	f859 3b04 	ldr.w	r3, [r9], #4
 8012d48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012d4c:	fa1f f883 	uxth.w	r8, r3
 8012d50:	fa17 f78b 	uxtah	r7, r7, fp
 8012d54:	0c1b      	lsrs	r3, r3, #16
 8012d56:	eba7 0808 	sub.w	r8, r7, r8
 8012d5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012d5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012d62:	fa1f f888 	uxth.w	r8, r8
 8012d66:	141f      	asrs	r7, r3, #16
 8012d68:	454d      	cmp	r5, r9
 8012d6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012d6e:	f84a 3b04 	str.w	r3, [sl], #4
 8012d72:	d8e7      	bhi.n	8012d44 <__mdiff+0x7c>
 8012d74:	1b2b      	subs	r3, r5, r4
 8012d76:	3b15      	subs	r3, #21
 8012d78:	f023 0303 	bic.w	r3, r3, #3
 8012d7c:	3304      	adds	r3, #4
 8012d7e:	3415      	adds	r4, #21
 8012d80:	42a5      	cmp	r5, r4
 8012d82:	bf38      	it	cc
 8012d84:	2304      	movcc	r3, #4
 8012d86:	4419      	add	r1, r3
 8012d88:	4473      	add	r3, lr
 8012d8a:	469e      	mov	lr, r3
 8012d8c:	460d      	mov	r5, r1
 8012d8e:	4565      	cmp	r5, ip
 8012d90:	d30e      	bcc.n	8012db0 <__mdiff+0xe8>
 8012d92:	f10c 0203 	add.w	r2, ip, #3
 8012d96:	1a52      	subs	r2, r2, r1
 8012d98:	f022 0203 	bic.w	r2, r2, #3
 8012d9c:	3903      	subs	r1, #3
 8012d9e:	458c      	cmp	ip, r1
 8012da0:	bf38      	it	cc
 8012da2:	2200      	movcc	r2, #0
 8012da4:	441a      	add	r2, r3
 8012da6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012daa:	b17b      	cbz	r3, 8012dcc <__mdiff+0x104>
 8012dac:	6106      	str	r6, [r0, #16]
 8012dae:	e7a5      	b.n	8012cfc <__mdiff+0x34>
 8012db0:	f855 8b04 	ldr.w	r8, [r5], #4
 8012db4:	fa17 f488 	uxtah	r4, r7, r8
 8012db8:	1422      	asrs	r2, r4, #16
 8012dba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012dbe:	b2a4      	uxth	r4, r4
 8012dc0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012dc4:	f84e 4b04 	str.w	r4, [lr], #4
 8012dc8:	1417      	asrs	r7, r2, #16
 8012dca:	e7e0      	b.n	8012d8e <__mdiff+0xc6>
 8012dcc:	3e01      	subs	r6, #1
 8012dce:	e7ea      	b.n	8012da6 <__mdiff+0xde>
 8012dd0:	0801489b 	.word	0x0801489b
 8012dd4:	080148ac 	.word	0x080148ac

08012dd8 <__d2b>:
 8012dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ddc:	4689      	mov	r9, r1
 8012dde:	2101      	movs	r1, #1
 8012de0:	ec57 6b10 	vmov	r6, r7, d0
 8012de4:	4690      	mov	r8, r2
 8012de6:	f7ff fcd5 	bl	8012794 <_Balloc>
 8012dea:	4604      	mov	r4, r0
 8012dec:	b930      	cbnz	r0, 8012dfc <__d2b+0x24>
 8012dee:	4602      	mov	r2, r0
 8012df0:	4b25      	ldr	r3, [pc, #148]	; (8012e88 <__d2b+0xb0>)
 8012df2:	4826      	ldr	r0, [pc, #152]	; (8012e8c <__d2b+0xb4>)
 8012df4:	f240 310a 	movw	r1, #778	; 0x30a
 8012df8:	f000 f914 	bl	8013024 <__assert_func>
 8012dfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012e00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012e04:	bb35      	cbnz	r5, 8012e54 <__d2b+0x7c>
 8012e06:	2e00      	cmp	r6, #0
 8012e08:	9301      	str	r3, [sp, #4]
 8012e0a:	d028      	beq.n	8012e5e <__d2b+0x86>
 8012e0c:	4668      	mov	r0, sp
 8012e0e:	9600      	str	r6, [sp, #0]
 8012e10:	f7ff fd8c 	bl	801292c <__lo0bits>
 8012e14:	9900      	ldr	r1, [sp, #0]
 8012e16:	b300      	cbz	r0, 8012e5a <__d2b+0x82>
 8012e18:	9a01      	ldr	r2, [sp, #4]
 8012e1a:	f1c0 0320 	rsb	r3, r0, #32
 8012e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8012e22:	430b      	orrs	r3, r1
 8012e24:	40c2      	lsrs	r2, r0
 8012e26:	6163      	str	r3, [r4, #20]
 8012e28:	9201      	str	r2, [sp, #4]
 8012e2a:	9b01      	ldr	r3, [sp, #4]
 8012e2c:	61a3      	str	r3, [r4, #24]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	bf14      	ite	ne
 8012e32:	2202      	movne	r2, #2
 8012e34:	2201      	moveq	r2, #1
 8012e36:	6122      	str	r2, [r4, #16]
 8012e38:	b1d5      	cbz	r5, 8012e70 <__d2b+0x98>
 8012e3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012e3e:	4405      	add	r5, r0
 8012e40:	f8c9 5000 	str.w	r5, [r9]
 8012e44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012e48:	f8c8 0000 	str.w	r0, [r8]
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	b003      	add	sp, #12
 8012e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012e58:	e7d5      	b.n	8012e06 <__d2b+0x2e>
 8012e5a:	6161      	str	r1, [r4, #20]
 8012e5c:	e7e5      	b.n	8012e2a <__d2b+0x52>
 8012e5e:	a801      	add	r0, sp, #4
 8012e60:	f7ff fd64 	bl	801292c <__lo0bits>
 8012e64:	9b01      	ldr	r3, [sp, #4]
 8012e66:	6163      	str	r3, [r4, #20]
 8012e68:	2201      	movs	r2, #1
 8012e6a:	6122      	str	r2, [r4, #16]
 8012e6c:	3020      	adds	r0, #32
 8012e6e:	e7e3      	b.n	8012e38 <__d2b+0x60>
 8012e70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012e74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012e78:	f8c9 0000 	str.w	r0, [r9]
 8012e7c:	6918      	ldr	r0, [r3, #16]
 8012e7e:	f7ff fd35 	bl	80128ec <__hi0bits>
 8012e82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012e86:	e7df      	b.n	8012e48 <__d2b+0x70>
 8012e88:	0801489b 	.word	0x0801489b
 8012e8c:	080148ac 	.word	0x080148ac

08012e90 <_calloc_r>:
 8012e90:	b513      	push	{r0, r1, r4, lr}
 8012e92:	434a      	muls	r2, r1
 8012e94:	4611      	mov	r1, r2
 8012e96:	9201      	str	r2, [sp, #4]
 8012e98:	f000 f85a 	bl	8012f50 <_malloc_r>
 8012e9c:	4604      	mov	r4, r0
 8012e9e:	b118      	cbz	r0, 8012ea8 <_calloc_r+0x18>
 8012ea0:	9a01      	ldr	r2, [sp, #4]
 8012ea2:	2100      	movs	r1, #0
 8012ea4:	f7fe fa10 	bl	80112c8 <memset>
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	b002      	add	sp, #8
 8012eac:	bd10      	pop	{r4, pc}
	...

08012eb0 <_free_r>:
 8012eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012eb2:	2900      	cmp	r1, #0
 8012eb4:	d048      	beq.n	8012f48 <_free_r+0x98>
 8012eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012eba:	9001      	str	r0, [sp, #4]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	f1a1 0404 	sub.w	r4, r1, #4
 8012ec2:	bfb8      	it	lt
 8012ec4:	18e4      	addlt	r4, r4, r3
 8012ec6:	f000 f8ef 	bl	80130a8 <__malloc_lock>
 8012eca:	4a20      	ldr	r2, [pc, #128]	; (8012f4c <_free_r+0x9c>)
 8012ecc:	9801      	ldr	r0, [sp, #4]
 8012ece:	6813      	ldr	r3, [r2, #0]
 8012ed0:	4615      	mov	r5, r2
 8012ed2:	b933      	cbnz	r3, 8012ee2 <_free_r+0x32>
 8012ed4:	6063      	str	r3, [r4, #4]
 8012ed6:	6014      	str	r4, [r2, #0]
 8012ed8:	b003      	add	sp, #12
 8012eda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ede:	f000 b8e9 	b.w	80130b4 <__malloc_unlock>
 8012ee2:	42a3      	cmp	r3, r4
 8012ee4:	d90b      	bls.n	8012efe <_free_r+0x4e>
 8012ee6:	6821      	ldr	r1, [r4, #0]
 8012ee8:	1862      	adds	r2, r4, r1
 8012eea:	4293      	cmp	r3, r2
 8012eec:	bf04      	itt	eq
 8012eee:	681a      	ldreq	r2, [r3, #0]
 8012ef0:	685b      	ldreq	r3, [r3, #4]
 8012ef2:	6063      	str	r3, [r4, #4]
 8012ef4:	bf04      	itt	eq
 8012ef6:	1852      	addeq	r2, r2, r1
 8012ef8:	6022      	streq	r2, [r4, #0]
 8012efa:	602c      	str	r4, [r5, #0]
 8012efc:	e7ec      	b.n	8012ed8 <_free_r+0x28>
 8012efe:	461a      	mov	r2, r3
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	b10b      	cbz	r3, 8012f08 <_free_r+0x58>
 8012f04:	42a3      	cmp	r3, r4
 8012f06:	d9fa      	bls.n	8012efe <_free_r+0x4e>
 8012f08:	6811      	ldr	r1, [r2, #0]
 8012f0a:	1855      	adds	r5, r2, r1
 8012f0c:	42a5      	cmp	r5, r4
 8012f0e:	d10b      	bne.n	8012f28 <_free_r+0x78>
 8012f10:	6824      	ldr	r4, [r4, #0]
 8012f12:	4421      	add	r1, r4
 8012f14:	1854      	adds	r4, r2, r1
 8012f16:	42a3      	cmp	r3, r4
 8012f18:	6011      	str	r1, [r2, #0]
 8012f1a:	d1dd      	bne.n	8012ed8 <_free_r+0x28>
 8012f1c:	681c      	ldr	r4, [r3, #0]
 8012f1e:	685b      	ldr	r3, [r3, #4]
 8012f20:	6053      	str	r3, [r2, #4]
 8012f22:	4421      	add	r1, r4
 8012f24:	6011      	str	r1, [r2, #0]
 8012f26:	e7d7      	b.n	8012ed8 <_free_r+0x28>
 8012f28:	d902      	bls.n	8012f30 <_free_r+0x80>
 8012f2a:	230c      	movs	r3, #12
 8012f2c:	6003      	str	r3, [r0, #0]
 8012f2e:	e7d3      	b.n	8012ed8 <_free_r+0x28>
 8012f30:	6825      	ldr	r5, [r4, #0]
 8012f32:	1961      	adds	r1, r4, r5
 8012f34:	428b      	cmp	r3, r1
 8012f36:	bf04      	itt	eq
 8012f38:	6819      	ldreq	r1, [r3, #0]
 8012f3a:	685b      	ldreq	r3, [r3, #4]
 8012f3c:	6063      	str	r3, [r4, #4]
 8012f3e:	bf04      	itt	eq
 8012f40:	1949      	addeq	r1, r1, r5
 8012f42:	6021      	streq	r1, [r4, #0]
 8012f44:	6054      	str	r4, [r2, #4]
 8012f46:	e7c7      	b.n	8012ed8 <_free_r+0x28>
 8012f48:	b003      	add	sp, #12
 8012f4a:	bd30      	pop	{r4, r5, pc}
 8012f4c:	24000250 	.word	0x24000250

08012f50 <_malloc_r>:
 8012f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f52:	1ccd      	adds	r5, r1, #3
 8012f54:	f025 0503 	bic.w	r5, r5, #3
 8012f58:	3508      	adds	r5, #8
 8012f5a:	2d0c      	cmp	r5, #12
 8012f5c:	bf38      	it	cc
 8012f5e:	250c      	movcc	r5, #12
 8012f60:	2d00      	cmp	r5, #0
 8012f62:	4606      	mov	r6, r0
 8012f64:	db01      	blt.n	8012f6a <_malloc_r+0x1a>
 8012f66:	42a9      	cmp	r1, r5
 8012f68:	d903      	bls.n	8012f72 <_malloc_r+0x22>
 8012f6a:	230c      	movs	r3, #12
 8012f6c:	6033      	str	r3, [r6, #0]
 8012f6e:	2000      	movs	r0, #0
 8012f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f72:	f000 f899 	bl	80130a8 <__malloc_lock>
 8012f76:	4921      	ldr	r1, [pc, #132]	; (8012ffc <_malloc_r+0xac>)
 8012f78:	680a      	ldr	r2, [r1, #0]
 8012f7a:	4614      	mov	r4, r2
 8012f7c:	b99c      	cbnz	r4, 8012fa6 <_malloc_r+0x56>
 8012f7e:	4f20      	ldr	r7, [pc, #128]	; (8013000 <_malloc_r+0xb0>)
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	b923      	cbnz	r3, 8012f8e <_malloc_r+0x3e>
 8012f84:	4621      	mov	r1, r4
 8012f86:	4630      	mov	r0, r6
 8012f88:	f000 f83c 	bl	8013004 <_sbrk_r>
 8012f8c:	6038      	str	r0, [r7, #0]
 8012f8e:	4629      	mov	r1, r5
 8012f90:	4630      	mov	r0, r6
 8012f92:	f000 f837 	bl	8013004 <_sbrk_r>
 8012f96:	1c43      	adds	r3, r0, #1
 8012f98:	d123      	bne.n	8012fe2 <_malloc_r+0x92>
 8012f9a:	230c      	movs	r3, #12
 8012f9c:	6033      	str	r3, [r6, #0]
 8012f9e:	4630      	mov	r0, r6
 8012fa0:	f000 f888 	bl	80130b4 <__malloc_unlock>
 8012fa4:	e7e3      	b.n	8012f6e <_malloc_r+0x1e>
 8012fa6:	6823      	ldr	r3, [r4, #0]
 8012fa8:	1b5b      	subs	r3, r3, r5
 8012faa:	d417      	bmi.n	8012fdc <_malloc_r+0x8c>
 8012fac:	2b0b      	cmp	r3, #11
 8012fae:	d903      	bls.n	8012fb8 <_malloc_r+0x68>
 8012fb0:	6023      	str	r3, [r4, #0]
 8012fb2:	441c      	add	r4, r3
 8012fb4:	6025      	str	r5, [r4, #0]
 8012fb6:	e004      	b.n	8012fc2 <_malloc_r+0x72>
 8012fb8:	6863      	ldr	r3, [r4, #4]
 8012fba:	42a2      	cmp	r2, r4
 8012fbc:	bf0c      	ite	eq
 8012fbe:	600b      	streq	r3, [r1, #0]
 8012fc0:	6053      	strne	r3, [r2, #4]
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	f000 f876 	bl	80130b4 <__malloc_unlock>
 8012fc8:	f104 000b 	add.w	r0, r4, #11
 8012fcc:	1d23      	adds	r3, r4, #4
 8012fce:	f020 0007 	bic.w	r0, r0, #7
 8012fd2:	1ac2      	subs	r2, r0, r3
 8012fd4:	d0cc      	beq.n	8012f70 <_malloc_r+0x20>
 8012fd6:	1a1b      	subs	r3, r3, r0
 8012fd8:	50a3      	str	r3, [r4, r2]
 8012fda:	e7c9      	b.n	8012f70 <_malloc_r+0x20>
 8012fdc:	4622      	mov	r2, r4
 8012fde:	6864      	ldr	r4, [r4, #4]
 8012fe0:	e7cc      	b.n	8012f7c <_malloc_r+0x2c>
 8012fe2:	1cc4      	adds	r4, r0, #3
 8012fe4:	f024 0403 	bic.w	r4, r4, #3
 8012fe8:	42a0      	cmp	r0, r4
 8012fea:	d0e3      	beq.n	8012fb4 <_malloc_r+0x64>
 8012fec:	1a21      	subs	r1, r4, r0
 8012fee:	4630      	mov	r0, r6
 8012ff0:	f000 f808 	bl	8013004 <_sbrk_r>
 8012ff4:	3001      	adds	r0, #1
 8012ff6:	d1dd      	bne.n	8012fb4 <_malloc_r+0x64>
 8012ff8:	e7cf      	b.n	8012f9a <_malloc_r+0x4a>
 8012ffa:	bf00      	nop
 8012ffc:	24000250 	.word	0x24000250
 8013000:	24000254 	.word	0x24000254

08013004 <_sbrk_r>:
 8013004:	b538      	push	{r3, r4, r5, lr}
 8013006:	4d06      	ldr	r5, [pc, #24]	; (8013020 <_sbrk_r+0x1c>)
 8013008:	2300      	movs	r3, #0
 801300a:	4604      	mov	r4, r0
 801300c:	4608      	mov	r0, r1
 801300e:	602b      	str	r3, [r5, #0]
 8013010:	f7f3 fecc 	bl	8006dac <_sbrk>
 8013014:	1c43      	adds	r3, r0, #1
 8013016:	d102      	bne.n	801301e <_sbrk_r+0x1a>
 8013018:	682b      	ldr	r3, [r5, #0]
 801301a:	b103      	cbz	r3, 801301e <_sbrk_r+0x1a>
 801301c:	6023      	str	r3, [r4, #0]
 801301e:	bd38      	pop	{r3, r4, r5, pc}
 8013020:	24000e44 	.word	0x24000e44

08013024 <__assert_func>:
 8013024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013026:	4614      	mov	r4, r2
 8013028:	461a      	mov	r2, r3
 801302a:	4b09      	ldr	r3, [pc, #36]	; (8013050 <__assert_func+0x2c>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	4605      	mov	r5, r0
 8013030:	68d8      	ldr	r0, [r3, #12]
 8013032:	b14c      	cbz	r4, 8013048 <__assert_func+0x24>
 8013034:	4b07      	ldr	r3, [pc, #28]	; (8013054 <__assert_func+0x30>)
 8013036:	9100      	str	r1, [sp, #0]
 8013038:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801303c:	4906      	ldr	r1, [pc, #24]	; (8013058 <__assert_func+0x34>)
 801303e:	462b      	mov	r3, r5
 8013040:	f000 f80e 	bl	8013060 <fiprintf>
 8013044:	f000 fa64 	bl	8013510 <abort>
 8013048:	4b04      	ldr	r3, [pc, #16]	; (801305c <__assert_func+0x38>)
 801304a:	461c      	mov	r4, r3
 801304c:	e7f3      	b.n	8013036 <__assert_func+0x12>
 801304e:	bf00      	nop
 8013050:	24000010 	.word	0x24000010
 8013054:	08014a0c 	.word	0x08014a0c
 8013058:	08014a19 	.word	0x08014a19
 801305c:	08014a47 	.word	0x08014a47

08013060 <fiprintf>:
 8013060:	b40e      	push	{r1, r2, r3}
 8013062:	b503      	push	{r0, r1, lr}
 8013064:	4601      	mov	r1, r0
 8013066:	ab03      	add	r3, sp, #12
 8013068:	4805      	ldr	r0, [pc, #20]	; (8013080 <fiprintf+0x20>)
 801306a:	f853 2b04 	ldr.w	r2, [r3], #4
 801306e:	6800      	ldr	r0, [r0, #0]
 8013070:	9301      	str	r3, [sp, #4]
 8013072:	f000 f84f 	bl	8013114 <_vfiprintf_r>
 8013076:	b002      	add	sp, #8
 8013078:	f85d eb04 	ldr.w	lr, [sp], #4
 801307c:	b003      	add	sp, #12
 801307e:	4770      	bx	lr
 8013080:	24000010 	.word	0x24000010

08013084 <__ascii_mbtowc>:
 8013084:	b082      	sub	sp, #8
 8013086:	b901      	cbnz	r1, 801308a <__ascii_mbtowc+0x6>
 8013088:	a901      	add	r1, sp, #4
 801308a:	b142      	cbz	r2, 801309e <__ascii_mbtowc+0x1a>
 801308c:	b14b      	cbz	r3, 80130a2 <__ascii_mbtowc+0x1e>
 801308e:	7813      	ldrb	r3, [r2, #0]
 8013090:	600b      	str	r3, [r1, #0]
 8013092:	7812      	ldrb	r2, [r2, #0]
 8013094:	1e10      	subs	r0, r2, #0
 8013096:	bf18      	it	ne
 8013098:	2001      	movne	r0, #1
 801309a:	b002      	add	sp, #8
 801309c:	4770      	bx	lr
 801309e:	4610      	mov	r0, r2
 80130a0:	e7fb      	b.n	801309a <__ascii_mbtowc+0x16>
 80130a2:	f06f 0001 	mvn.w	r0, #1
 80130a6:	e7f8      	b.n	801309a <__ascii_mbtowc+0x16>

080130a8 <__malloc_lock>:
 80130a8:	4801      	ldr	r0, [pc, #4]	; (80130b0 <__malloc_lock+0x8>)
 80130aa:	f000 bbf1 	b.w	8013890 <__retarget_lock_acquire_recursive>
 80130ae:	bf00      	nop
 80130b0:	24000e4c 	.word	0x24000e4c

080130b4 <__malloc_unlock>:
 80130b4:	4801      	ldr	r0, [pc, #4]	; (80130bc <__malloc_unlock+0x8>)
 80130b6:	f000 bbec 	b.w	8013892 <__retarget_lock_release_recursive>
 80130ba:	bf00      	nop
 80130bc:	24000e4c 	.word	0x24000e4c

080130c0 <__sfputc_r>:
 80130c0:	6893      	ldr	r3, [r2, #8]
 80130c2:	3b01      	subs	r3, #1
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	b410      	push	{r4}
 80130c8:	6093      	str	r3, [r2, #8]
 80130ca:	da08      	bge.n	80130de <__sfputc_r+0x1e>
 80130cc:	6994      	ldr	r4, [r2, #24]
 80130ce:	42a3      	cmp	r3, r4
 80130d0:	db01      	blt.n	80130d6 <__sfputc_r+0x16>
 80130d2:	290a      	cmp	r1, #10
 80130d4:	d103      	bne.n	80130de <__sfputc_r+0x1e>
 80130d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130da:	f000 b94b 	b.w	8013374 <__swbuf_r>
 80130de:	6813      	ldr	r3, [r2, #0]
 80130e0:	1c58      	adds	r0, r3, #1
 80130e2:	6010      	str	r0, [r2, #0]
 80130e4:	7019      	strb	r1, [r3, #0]
 80130e6:	4608      	mov	r0, r1
 80130e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130ec:	4770      	bx	lr

080130ee <__sfputs_r>:
 80130ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130f0:	4606      	mov	r6, r0
 80130f2:	460f      	mov	r7, r1
 80130f4:	4614      	mov	r4, r2
 80130f6:	18d5      	adds	r5, r2, r3
 80130f8:	42ac      	cmp	r4, r5
 80130fa:	d101      	bne.n	8013100 <__sfputs_r+0x12>
 80130fc:	2000      	movs	r0, #0
 80130fe:	e007      	b.n	8013110 <__sfputs_r+0x22>
 8013100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013104:	463a      	mov	r2, r7
 8013106:	4630      	mov	r0, r6
 8013108:	f7ff ffda 	bl	80130c0 <__sfputc_r>
 801310c:	1c43      	adds	r3, r0, #1
 801310e:	d1f3      	bne.n	80130f8 <__sfputs_r+0xa>
 8013110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013114 <_vfiprintf_r>:
 8013114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013118:	460d      	mov	r5, r1
 801311a:	b09d      	sub	sp, #116	; 0x74
 801311c:	4614      	mov	r4, r2
 801311e:	4698      	mov	r8, r3
 8013120:	4606      	mov	r6, r0
 8013122:	b118      	cbz	r0, 801312c <_vfiprintf_r+0x18>
 8013124:	6983      	ldr	r3, [r0, #24]
 8013126:	b90b      	cbnz	r3, 801312c <_vfiprintf_r+0x18>
 8013128:	f000 fb14 	bl	8013754 <__sinit>
 801312c:	4b89      	ldr	r3, [pc, #548]	; (8013354 <_vfiprintf_r+0x240>)
 801312e:	429d      	cmp	r5, r3
 8013130:	d11b      	bne.n	801316a <_vfiprintf_r+0x56>
 8013132:	6875      	ldr	r5, [r6, #4]
 8013134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013136:	07d9      	lsls	r1, r3, #31
 8013138:	d405      	bmi.n	8013146 <_vfiprintf_r+0x32>
 801313a:	89ab      	ldrh	r3, [r5, #12]
 801313c:	059a      	lsls	r2, r3, #22
 801313e:	d402      	bmi.n	8013146 <_vfiprintf_r+0x32>
 8013140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013142:	f000 fba5 	bl	8013890 <__retarget_lock_acquire_recursive>
 8013146:	89ab      	ldrh	r3, [r5, #12]
 8013148:	071b      	lsls	r3, r3, #28
 801314a:	d501      	bpl.n	8013150 <_vfiprintf_r+0x3c>
 801314c:	692b      	ldr	r3, [r5, #16]
 801314e:	b9eb      	cbnz	r3, 801318c <_vfiprintf_r+0x78>
 8013150:	4629      	mov	r1, r5
 8013152:	4630      	mov	r0, r6
 8013154:	f000 f96e 	bl	8013434 <__swsetup_r>
 8013158:	b1c0      	cbz	r0, 801318c <_vfiprintf_r+0x78>
 801315a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801315c:	07dc      	lsls	r4, r3, #31
 801315e:	d50e      	bpl.n	801317e <_vfiprintf_r+0x6a>
 8013160:	f04f 30ff 	mov.w	r0, #4294967295
 8013164:	b01d      	add	sp, #116	; 0x74
 8013166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801316a:	4b7b      	ldr	r3, [pc, #492]	; (8013358 <_vfiprintf_r+0x244>)
 801316c:	429d      	cmp	r5, r3
 801316e:	d101      	bne.n	8013174 <_vfiprintf_r+0x60>
 8013170:	68b5      	ldr	r5, [r6, #8]
 8013172:	e7df      	b.n	8013134 <_vfiprintf_r+0x20>
 8013174:	4b79      	ldr	r3, [pc, #484]	; (801335c <_vfiprintf_r+0x248>)
 8013176:	429d      	cmp	r5, r3
 8013178:	bf08      	it	eq
 801317a:	68f5      	ldreq	r5, [r6, #12]
 801317c:	e7da      	b.n	8013134 <_vfiprintf_r+0x20>
 801317e:	89ab      	ldrh	r3, [r5, #12]
 8013180:	0598      	lsls	r0, r3, #22
 8013182:	d4ed      	bmi.n	8013160 <_vfiprintf_r+0x4c>
 8013184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013186:	f000 fb84 	bl	8013892 <__retarget_lock_release_recursive>
 801318a:	e7e9      	b.n	8013160 <_vfiprintf_r+0x4c>
 801318c:	2300      	movs	r3, #0
 801318e:	9309      	str	r3, [sp, #36]	; 0x24
 8013190:	2320      	movs	r3, #32
 8013192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013196:	f8cd 800c 	str.w	r8, [sp, #12]
 801319a:	2330      	movs	r3, #48	; 0x30
 801319c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013360 <_vfiprintf_r+0x24c>
 80131a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80131a4:	f04f 0901 	mov.w	r9, #1
 80131a8:	4623      	mov	r3, r4
 80131aa:	469a      	mov	sl, r3
 80131ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131b0:	b10a      	cbz	r2, 80131b6 <_vfiprintf_r+0xa2>
 80131b2:	2a25      	cmp	r2, #37	; 0x25
 80131b4:	d1f9      	bne.n	80131aa <_vfiprintf_r+0x96>
 80131b6:	ebba 0b04 	subs.w	fp, sl, r4
 80131ba:	d00b      	beq.n	80131d4 <_vfiprintf_r+0xc0>
 80131bc:	465b      	mov	r3, fp
 80131be:	4622      	mov	r2, r4
 80131c0:	4629      	mov	r1, r5
 80131c2:	4630      	mov	r0, r6
 80131c4:	f7ff ff93 	bl	80130ee <__sfputs_r>
 80131c8:	3001      	adds	r0, #1
 80131ca:	f000 80aa 	beq.w	8013322 <_vfiprintf_r+0x20e>
 80131ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131d0:	445a      	add	r2, fp
 80131d2:	9209      	str	r2, [sp, #36]	; 0x24
 80131d4:	f89a 3000 	ldrb.w	r3, [sl]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	f000 80a2 	beq.w	8013322 <_vfiprintf_r+0x20e>
 80131de:	2300      	movs	r3, #0
 80131e0:	f04f 32ff 	mov.w	r2, #4294967295
 80131e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131e8:	f10a 0a01 	add.w	sl, sl, #1
 80131ec:	9304      	str	r3, [sp, #16]
 80131ee:	9307      	str	r3, [sp, #28]
 80131f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131f4:	931a      	str	r3, [sp, #104]	; 0x68
 80131f6:	4654      	mov	r4, sl
 80131f8:	2205      	movs	r2, #5
 80131fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131fe:	4858      	ldr	r0, [pc, #352]	; (8013360 <_vfiprintf_r+0x24c>)
 8013200:	f7ed f88e 	bl	8000320 <memchr>
 8013204:	9a04      	ldr	r2, [sp, #16]
 8013206:	b9d8      	cbnz	r0, 8013240 <_vfiprintf_r+0x12c>
 8013208:	06d1      	lsls	r1, r2, #27
 801320a:	bf44      	itt	mi
 801320c:	2320      	movmi	r3, #32
 801320e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013212:	0713      	lsls	r3, r2, #28
 8013214:	bf44      	itt	mi
 8013216:	232b      	movmi	r3, #43	; 0x2b
 8013218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801321c:	f89a 3000 	ldrb.w	r3, [sl]
 8013220:	2b2a      	cmp	r3, #42	; 0x2a
 8013222:	d015      	beq.n	8013250 <_vfiprintf_r+0x13c>
 8013224:	9a07      	ldr	r2, [sp, #28]
 8013226:	4654      	mov	r4, sl
 8013228:	2000      	movs	r0, #0
 801322a:	f04f 0c0a 	mov.w	ip, #10
 801322e:	4621      	mov	r1, r4
 8013230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013234:	3b30      	subs	r3, #48	; 0x30
 8013236:	2b09      	cmp	r3, #9
 8013238:	d94e      	bls.n	80132d8 <_vfiprintf_r+0x1c4>
 801323a:	b1b0      	cbz	r0, 801326a <_vfiprintf_r+0x156>
 801323c:	9207      	str	r2, [sp, #28]
 801323e:	e014      	b.n	801326a <_vfiprintf_r+0x156>
 8013240:	eba0 0308 	sub.w	r3, r0, r8
 8013244:	fa09 f303 	lsl.w	r3, r9, r3
 8013248:	4313      	orrs	r3, r2
 801324a:	9304      	str	r3, [sp, #16]
 801324c:	46a2      	mov	sl, r4
 801324e:	e7d2      	b.n	80131f6 <_vfiprintf_r+0xe2>
 8013250:	9b03      	ldr	r3, [sp, #12]
 8013252:	1d19      	adds	r1, r3, #4
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	9103      	str	r1, [sp, #12]
 8013258:	2b00      	cmp	r3, #0
 801325a:	bfbb      	ittet	lt
 801325c:	425b      	neglt	r3, r3
 801325e:	f042 0202 	orrlt.w	r2, r2, #2
 8013262:	9307      	strge	r3, [sp, #28]
 8013264:	9307      	strlt	r3, [sp, #28]
 8013266:	bfb8      	it	lt
 8013268:	9204      	strlt	r2, [sp, #16]
 801326a:	7823      	ldrb	r3, [r4, #0]
 801326c:	2b2e      	cmp	r3, #46	; 0x2e
 801326e:	d10c      	bne.n	801328a <_vfiprintf_r+0x176>
 8013270:	7863      	ldrb	r3, [r4, #1]
 8013272:	2b2a      	cmp	r3, #42	; 0x2a
 8013274:	d135      	bne.n	80132e2 <_vfiprintf_r+0x1ce>
 8013276:	9b03      	ldr	r3, [sp, #12]
 8013278:	1d1a      	adds	r2, r3, #4
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	9203      	str	r2, [sp, #12]
 801327e:	2b00      	cmp	r3, #0
 8013280:	bfb8      	it	lt
 8013282:	f04f 33ff 	movlt.w	r3, #4294967295
 8013286:	3402      	adds	r4, #2
 8013288:	9305      	str	r3, [sp, #20]
 801328a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013370 <_vfiprintf_r+0x25c>
 801328e:	7821      	ldrb	r1, [r4, #0]
 8013290:	2203      	movs	r2, #3
 8013292:	4650      	mov	r0, sl
 8013294:	f7ed f844 	bl	8000320 <memchr>
 8013298:	b140      	cbz	r0, 80132ac <_vfiprintf_r+0x198>
 801329a:	2340      	movs	r3, #64	; 0x40
 801329c:	eba0 000a 	sub.w	r0, r0, sl
 80132a0:	fa03 f000 	lsl.w	r0, r3, r0
 80132a4:	9b04      	ldr	r3, [sp, #16]
 80132a6:	4303      	orrs	r3, r0
 80132a8:	3401      	adds	r4, #1
 80132aa:	9304      	str	r3, [sp, #16]
 80132ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132b0:	482c      	ldr	r0, [pc, #176]	; (8013364 <_vfiprintf_r+0x250>)
 80132b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132b6:	2206      	movs	r2, #6
 80132b8:	f7ed f832 	bl	8000320 <memchr>
 80132bc:	2800      	cmp	r0, #0
 80132be:	d03f      	beq.n	8013340 <_vfiprintf_r+0x22c>
 80132c0:	4b29      	ldr	r3, [pc, #164]	; (8013368 <_vfiprintf_r+0x254>)
 80132c2:	bb1b      	cbnz	r3, 801330c <_vfiprintf_r+0x1f8>
 80132c4:	9b03      	ldr	r3, [sp, #12]
 80132c6:	3307      	adds	r3, #7
 80132c8:	f023 0307 	bic.w	r3, r3, #7
 80132cc:	3308      	adds	r3, #8
 80132ce:	9303      	str	r3, [sp, #12]
 80132d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132d2:	443b      	add	r3, r7
 80132d4:	9309      	str	r3, [sp, #36]	; 0x24
 80132d6:	e767      	b.n	80131a8 <_vfiprintf_r+0x94>
 80132d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80132dc:	460c      	mov	r4, r1
 80132de:	2001      	movs	r0, #1
 80132e0:	e7a5      	b.n	801322e <_vfiprintf_r+0x11a>
 80132e2:	2300      	movs	r3, #0
 80132e4:	3401      	adds	r4, #1
 80132e6:	9305      	str	r3, [sp, #20]
 80132e8:	4619      	mov	r1, r3
 80132ea:	f04f 0c0a 	mov.w	ip, #10
 80132ee:	4620      	mov	r0, r4
 80132f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132f4:	3a30      	subs	r2, #48	; 0x30
 80132f6:	2a09      	cmp	r2, #9
 80132f8:	d903      	bls.n	8013302 <_vfiprintf_r+0x1ee>
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d0c5      	beq.n	801328a <_vfiprintf_r+0x176>
 80132fe:	9105      	str	r1, [sp, #20]
 8013300:	e7c3      	b.n	801328a <_vfiprintf_r+0x176>
 8013302:	fb0c 2101 	mla	r1, ip, r1, r2
 8013306:	4604      	mov	r4, r0
 8013308:	2301      	movs	r3, #1
 801330a:	e7f0      	b.n	80132ee <_vfiprintf_r+0x1da>
 801330c:	ab03      	add	r3, sp, #12
 801330e:	9300      	str	r3, [sp, #0]
 8013310:	462a      	mov	r2, r5
 8013312:	4b16      	ldr	r3, [pc, #88]	; (801336c <_vfiprintf_r+0x258>)
 8013314:	a904      	add	r1, sp, #16
 8013316:	4630      	mov	r0, r6
 8013318:	f7fe f86e 	bl	80113f8 <_printf_float>
 801331c:	4607      	mov	r7, r0
 801331e:	1c78      	adds	r0, r7, #1
 8013320:	d1d6      	bne.n	80132d0 <_vfiprintf_r+0x1bc>
 8013322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013324:	07d9      	lsls	r1, r3, #31
 8013326:	d405      	bmi.n	8013334 <_vfiprintf_r+0x220>
 8013328:	89ab      	ldrh	r3, [r5, #12]
 801332a:	059a      	lsls	r2, r3, #22
 801332c:	d402      	bmi.n	8013334 <_vfiprintf_r+0x220>
 801332e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013330:	f000 faaf 	bl	8013892 <__retarget_lock_release_recursive>
 8013334:	89ab      	ldrh	r3, [r5, #12]
 8013336:	065b      	lsls	r3, r3, #25
 8013338:	f53f af12 	bmi.w	8013160 <_vfiprintf_r+0x4c>
 801333c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801333e:	e711      	b.n	8013164 <_vfiprintf_r+0x50>
 8013340:	ab03      	add	r3, sp, #12
 8013342:	9300      	str	r3, [sp, #0]
 8013344:	462a      	mov	r2, r5
 8013346:	4b09      	ldr	r3, [pc, #36]	; (801336c <_vfiprintf_r+0x258>)
 8013348:	a904      	add	r1, sp, #16
 801334a:	4630      	mov	r0, r6
 801334c:	f7fe fae0 	bl	8011910 <_printf_i>
 8013350:	e7e4      	b.n	801331c <_vfiprintf_r+0x208>
 8013352:	bf00      	nop
 8013354:	08014b84 	.word	0x08014b84
 8013358:	08014ba4 	.word	0x08014ba4
 801335c:	08014b64 	.word	0x08014b64
 8013360:	08014a52 	.word	0x08014a52
 8013364:	08014a5c 	.word	0x08014a5c
 8013368:	080113f9 	.word	0x080113f9
 801336c:	080130ef 	.word	0x080130ef
 8013370:	08014a58 	.word	0x08014a58

08013374 <__swbuf_r>:
 8013374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013376:	460e      	mov	r6, r1
 8013378:	4614      	mov	r4, r2
 801337a:	4605      	mov	r5, r0
 801337c:	b118      	cbz	r0, 8013386 <__swbuf_r+0x12>
 801337e:	6983      	ldr	r3, [r0, #24]
 8013380:	b90b      	cbnz	r3, 8013386 <__swbuf_r+0x12>
 8013382:	f000 f9e7 	bl	8013754 <__sinit>
 8013386:	4b21      	ldr	r3, [pc, #132]	; (801340c <__swbuf_r+0x98>)
 8013388:	429c      	cmp	r4, r3
 801338a:	d12b      	bne.n	80133e4 <__swbuf_r+0x70>
 801338c:	686c      	ldr	r4, [r5, #4]
 801338e:	69a3      	ldr	r3, [r4, #24]
 8013390:	60a3      	str	r3, [r4, #8]
 8013392:	89a3      	ldrh	r3, [r4, #12]
 8013394:	071a      	lsls	r2, r3, #28
 8013396:	d52f      	bpl.n	80133f8 <__swbuf_r+0x84>
 8013398:	6923      	ldr	r3, [r4, #16]
 801339a:	b36b      	cbz	r3, 80133f8 <__swbuf_r+0x84>
 801339c:	6923      	ldr	r3, [r4, #16]
 801339e:	6820      	ldr	r0, [r4, #0]
 80133a0:	1ac0      	subs	r0, r0, r3
 80133a2:	6963      	ldr	r3, [r4, #20]
 80133a4:	b2f6      	uxtb	r6, r6
 80133a6:	4283      	cmp	r3, r0
 80133a8:	4637      	mov	r7, r6
 80133aa:	dc04      	bgt.n	80133b6 <__swbuf_r+0x42>
 80133ac:	4621      	mov	r1, r4
 80133ae:	4628      	mov	r0, r5
 80133b0:	f000 f93c 	bl	801362c <_fflush_r>
 80133b4:	bb30      	cbnz	r0, 8013404 <__swbuf_r+0x90>
 80133b6:	68a3      	ldr	r3, [r4, #8]
 80133b8:	3b01      	subs	r3, #1
 80133ba:	60a3      	str	r3, [r4, #8]
 80133bc:	6823      	ldr	r3, [r4, #0]
 80133be:	1c5a      	adds	r2, r3, #1
 80133c0:	6022      	str	r2, [r4, #0]
 80133c2:	701e      	strb	r6, [r3, #0]
 80133c4:	6963      	ldr	r3, [r4, #20]
 80133c6:	3001      	adds	r0, #1
 80133c8:	4283      	cmp	r3, r0
 80133ca:	d004      	beq.n	80133d6 <__swbuf_r+0x62>
 80133cc:	89a3      	ldrh	r3, [r4, #12]
 80133ce:	07db      	lsls	r3, r3, #31
 80133d0:	d506      	bpl.n	80133e0 <__swbuf_r+0x6c>
 80133d2:	2e0a      	cmp	r6, #10
 80133d4:	d104      	bne.n	80133e0 <__swbuf_r+0x6c>
 80133d6:	4621      	mov	r1, r4
 80133d8:	4628      	mov	r0, r5
 80133da:	f000 f927 	bl	801362c <_fflush_r>
 80133de:	b988      	cbnz	r0, 8013404 <__swbuf_r+0x90>
 80133e0:	4638      	mov	r0, r7
 80133e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133e4:	4b0a      	ldr	r3, [pc, #40]	; (8013410 <__swbuf_r+0x9c>)
 80133e6:	429c      	cmp	r4, r3
 80133e8:	d101      	bne.n	80133ee <__swbuf_r+0x7a>
 80133ea:	68ac      	ldr	r4, [r5, #8]
 80133ec:	e7cf      	b.n	801338e <__swbuf_r+0x1a>
 80133ee:	4b09      	ldr	r3, [pc, #36]	; (8013414 <__swbuf_r+0xa0>)
 80133f0:	429c      	cmp	r4, r3
 80133f2:	bf08      	it	eq
 80133f4:	68ec      	ldreq	r4, [r5, #12]
 80133f6:	e7ca      	b.n	801338e <__swbuf_r+0x1a>
 80133f8:	4621      	mov	r1, r4
 80133fa:	4628      	mov	r0, r5
 80133fc:	f000 f81a 	bl	8013434 <__swsetup_r>
 8013400:	2800      	cmp	r0, #0
 8013402:	d0cb      	beq.n	801339c <__swbuf_r+0x28>
 8013404:	f04f 37ff 	mov.w	r7, #4294967295
 8013408:	e7ea      	b.n	80133e0 <__swbuf_r+0x6c>
 801340a:	bf00      	nop
 801340c:	08014b84 	.word	0x08014b84
 8013410:	08014ba4 	.word	0x08014ba4
 8013414:	08014b64 	.word	0x08014b64

08013418 <__ascii_wctomb>:
 8013418:	b149      	cbz	r1, 801342e <__ascii_wctomb+0x16>
 801341a:	2aff      	cmp	r2, #255	; 0xff
 801341c:	bf85      	ittet	hi
 801341e:	238a      	movhi	r3, #138	; 0x8a
 8013420:	6003      	strhi	r3, [r0, #0]
 8013422:	700a      	strbls	r2, [r1, #0]
 8013424:	f04f 30ff 	movhi.w	r0, #4294967295
 8013428:	bf98      	it	ls
 801342a:	2001      	movls	r0, #1
 801342c:	4770      	bx	lr
 801342e:	4608      	mov	r0, r1
 8013430:	4770      	bx	lr
	...

08013434 <__swsetup_r>:
 8013434:	4b32      	ldr	r3, [pc, #200]	; (8013500 <__swsetup_r+0xcc>)
 8013436:	b570      	push	{r4, r5, r6, lr}
 8013438:	681d      	ldr	r5, [r3, #0]
 801343a:	4606      	mov	r6, r0
 801343c:	460c      	mov	r4, r1
 801343e:	b125      	cbz	r5, 801344a <__swsetup_r+0x16>
 8013440:	69ab      	ldr	r3, [r5, #24]
 8013442:	b913      	cbnz	r3, 801344a <__swsetup_r+0x16>
 8013444:	4628      	mov	r0, r5
 8013446:	f000 f985 	bl	8013754 <__sinit>
 801344a:	4b2e      	ldr	r3, [pc, #184]	; (8013504 <__swsetup_r+0xd0>)
 801344c:	429c      	cmp	r4, r3
 801344e:	d10f      	bne.n	8013470 <__swsetup_r+0x3c>
 8013450:	686c      	ldr	r4, [r5, #4]
 8013452:	89a3      	ldrh	r3, [r4, #12]
 8013454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013458:	0719      	lsls	r1, r3, #28
 801345a:	d42c      	bmi.n	80134b6 <__swsetup_r+0x82>
 801345c:	06dd      	lsls	r5, r3, #27
 801345e:	d411      	bmi.n	8013484 <__swsetup_r+0x50>
 8013460:	2309      	movs	r3, #9
 8013462:	6033      	str	r3, [r6, #0]
 8013464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013468:	81a3      	strh	r3, [r4, #12]
 801346a:	f04f 30ff 	mov.w	r0, #4294967295
 801346e:	e03e      	b.n	80134ee <__swsetup_r+0xba>
 8013470:	4b25      	ldr	r3, [pc, #148]	; (8013508 <__swsetup_r+0xd4>)
 8013472:	429c      	cmp	r4, r3
 8013474:	d101      	bne.n	801347a <__swsetup_r+0x46>
 8013476:	68ac      	ldr	r4, [r5, #8]
 8013478:	e7eb      	b.n	8013452 <__swsetup_r+0x1e>
 801347a:	4b24      	ldr	r3, [pc, #144]	; (801350c <__swsetup_r+0xd8>)
 801347c:	429c      	cmp	r4, r3
 801347e:	bf08      	it	eq
 8013480:	68ec      	ldreq	r4, [r5, #12]
 8013482:	e7e6      	b.n	8013452 <__swsetup_r+0x1e>
 8013484:	0758      	lsls	r0, r3, #29
 8013486:	d512      	bpl.n	80134ae <__swsetup_r+0x7a>
 8013488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801348a:	b141      	cbz	r1, 801349e <__swsetup_r+0x6a>
 801348c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013490:	4299      	cmp	r1, r3
 8013492:	d002      	beq.n	801349a <__swsetup_r+0x66>
 8013494:	4630      	mov	r0, r6
 8013496:	f7ff fd0b 	bl	8012eb0 <_free_r>
 801349a:	2300      	movs	r3, #0
 801349c:	6363      	str	r3, [r4, #52]	; 0x34
 801349e:	89a3      	ldrh	r3, [r4, #12]
 80134a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80134a4:	81a3      	strh	r3, [r4, #12]
 80134a6:	2300      	movs	r3, #0
 80134a8:	6063      	str	r3, [r4, #4]
 80134aa:	6923      	ldr	r3, [r4, #16]
 80134ac:	6023      	str	r3, [r4, #0]
 80134ae:	89a3      	ldrh	r3, [r4, #12]
 80134b0:	f043 0308 	orr.w	r3, r3, #8
 80134b4:	81a3      	strh	r3, [r4, #12]
 80134b6:	6923      	ldr	r3, [r4, #16]
 80134b8:	b94b      	cbnz	r3, 80134ce <__swsetup_r+0x9a>
 80134ba:	89a3      	ldrh	r3, [r4, #12]
 80134bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80134c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80134c4:	d003      	beq.n	80134ce <__swsetup_r+0x9a>
 80134c6:	4621      	mov	r1, r4
 80134c8:	4630      	mov	r0, r6
 80134ca:	f000 fa07 	bl	80138dc <__smakebuf_r>
 80134ce:	89a0      	ldrh	r0, [r4, #12]
 80134d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134d4:	f010 0301 	ands.w	r3, r0, #1
 80134d8:	d00a      	beq.n	80134f0 <__swsetup_r+0xbc>
 80134da:	2300      	movs	r3, #0
 80134dc:	60a3      	str	r3, [r4, #8]
 80134de:	6963      	ldr	r3, [r4, #20]
 80134e0:	425b      	negs	r3, r3
 80134e2:	61a3      	str	r3, [r4, #24]
 80134e4:	6923      	ldr	r3, [r4, #16]
 80134e6:	b943      	cbnz	r3, 80134fa <__swsetup_r+0xc6>
 80134e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80134ec:	d1ba      	bne.n	8013464 <__swsetup_r+0x30>
 80134ee:	bd70      	pop	{r4, r5, r6, pc}
 80134f0:	0781      	lsls	r1, r0, #30
 80134f2:	bf58      	it	pl
 80134f4:	6963      	ldrpl	r3, [r4, #20]
 80134f6:	60a3      	str	r3, [r4, #8]
 80134f8:	e7f4      	b.n	80134e4 <__swsetup_r+0xb0>
 80134fa:	2000      	movs	r0, #0
 80134fc:	e7f7      	b.n	80134ee <__swsetup_r+0xba>
 80134fe:	bf00      	nop
 8013500:	24000010 	.word	0x24000010
 8013504:	08014b84 	.word	0x08014b84
 8013508:	08014ba4 	.word	0x08014ba4
 801350c:	08014b64 	.word	0x08014b64

08013510 <abort>:
 8013510:	b508      	push	{r3, lr}
 8013512:	2006      	movs	r0, #6
 8013514:	f000 fa4a 	bl	80139ac <raise>
 8013518:	2001      	movs	r0, #1
 801351a:	f7f3 fbcf 	bl	8006cbc <_exit>
	...

08013520 <__sflush_r>:
 8013520:	898a      	ldrh	r2, [r1, #12]
 8013522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013526:	4605      	mov	r5, r0
 8013528:	0710      	lsls	r0, r2, #28
 801352a:	460c      	mov	r4, r1
 801352c:	d458      	bmi.n	80135e0 <__sflush_r+0xc0>
 801352e:	684b      	ldr	r3, [r1, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	dc05      	bgt.n	8013540 <__sflush_r+0x20>
 8013534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013536:	2b00      	cmp	r3, #0
 8013538:	dc02      	bgt.n	8013540 <__sflush_r+0x20>
 801353a:	2000      	movs	r0, #0
 801353c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013542:	2e00      	cmp	r6, #0
 8013544:	d0f9      	beq.n	801353a <__sflush_r+0x1a>
 8013546:	2300      	movs	r3, #0
 8013548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801354c:	682f      	ldr	r7, [r5, #0]
 801354e:	602b      	str	r3, [r5, #0]
 8013550:	d032      	beq.n	80135b8 <__sflush_r+0x98>
 8013552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013554:	89a3      	ldrh	r3, [r4, #12]
 8013556:	075a      	lsls	r2, r3, #29
 8013558:	d505      	bpl.n	8013566 <__sflush_r+0x46>
 801355a:	6863      	ldr	r3, [r4, #4]
 801355c:	1ac0      	subs	r0, r0, r3
 801355e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013560:	b10b      	cbz	r3, 8013566 <__sflush_r+0x46>
 8013562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013564:	1ac0      	subs	r0, r0, r3
 8013566:	2300      	movs	r3, #0
 8013568:	4602      	mov	r2, r0
 801356a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801356c:	6a21      	ldr	r1, [r4, #32]
 801356e:	4628      	mov	r0, r5
 8013570:	47b0      	blx	r6
 8013572:	1c43      	adds	r3, r0, #1
 8013574:	89a3      	ldrh	r3, [r4, #12]
 8013576:	d106      	bne.n	8013586 <__sflush_r+0x66>
 8013578:	6829      	ldr	r1, [r5, #0]
 801357a:	291d      	cmp	r1, #29
 801357c:	d82c      	bhi.n	80135d8 <__sflush_r+0xb8>
 801357e:	4a2a      	ldr	r2, [pc, #168]	; (8013628 <__sflush_r+0x108>)
 8013580:	40ca      	lsrs	r2, r1
 8013582:	07d6      	lsls	r6, r2, #31
 8013584:	d528      	bpl.n	80135d8 <__sflush_r+0xb8>
 8013586:	2200      	movs	r2, #0
 8013588:	6062      	str	r2, [r4, #4]
 801358a:	04d9      	lsls	r1, r3, #19
 801358c:	6922      	ldr	r2, [r4, #16]
 801358e:	6022      	str	r2, [r4, #0]
 8013590:	d504      	bpl.n	801359c <__sflush_r+0x7c>
 8013592:	1c42      	adds	r2, r0, #1
 8013594:	d101      	bne.n	801359a <__sflush_r+0x7a>
 8013596:	682b      	ldr	r3, [r5, #0]
 8013598:	b903      	cbnz	r3, 801359c <__sflush_r+0x7c>
 801359a:	6560      	str	r0, [r4, #84]	; 0x54
 801359c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801359e:	602f      	str	r7, [r5, #0]
 80135a0:	2900      	cmp	r1, #0
 80135a2:	d0ca      	beq.n	801353a <__sflush_r+0x1a>
 80135a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80135a8:	4299      	cmp	r1, r3
 80135aa:	d002      	beq.n	80135b2 <__sflush_r+0x92>
 80135ac:	4628      	mov	r0, r5
 80135ae:	f7ff fc7f 	bl	8012eb0 <_free_r>
 80135b2:	2000      	movs	r0, #0
 80135b4:	6360      	str	r0, [r4, #52]	; 0x34
 80135b6:	e7c1      	b.n	801353c <__sflush_r+0x1c>
 80135b8:	6a21      	ldr	r1, [r4, #32]
 80135ba:	2301      	movs	r3, #1
 80135bc:	4628      	mov	r0, r5
 80135be:	47b0      	blx	r6
 80135c0:	1c41      	adds	r1, r0, #1
 80135c2:	d1c7      	bne.n	8013554 <__sflush_r+0x34>
 80135c4:	682b      	ldr	r3, [r5, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d0c4      	beq.n	8013554 <__sflush_r+0x34>
 80135ca:	2b1d      	cmp	r3, #29
 80135cc:	d001      	beq.n	80135d2 <__sflush_r+0xb2>
 80135ce:	2b16      	cmp	r3, #22
 80135d0:	d101      	bne.n	80135d6 <__sflush_r+0xb6>
 80135d2:	602f      	str	r7, [r5, #0]
 80135d4:	e7b1      	b.n	801353a <__sflush_r+0x1a>
 80135d6:	89a3      	ldrh	r3, [r4, #12]
 80135d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135dc:	81a3      	strh	r3, [r4, #12]
 80135de:	e7ad      	b.n	801353c <__sflush_r+0x1c>
 80135e0:	690f      	ldr	r7, [r1, #16]
 80135e2:	2f00      	cmp	r7, #0
 80135e4:	d0a9      	beq.n	801353a <__sflush_r+0x1a>
 80135e6:	0793      	lsls	r3, r2, #30
 80135e8:	680e      	ldr	r6, [r1, #0]
 80135ea:	bf08      	it	eq
 80135ec:	694b      	ldreq	r3, [r1, #20]
 80135ee:	600f      	str	r7, [r1, #0]
 80135f0:	bf18      	it	ne
 80135f2:	2300      	movne	r3, #0
 80135f4:	eba6 0807 	sub.w	r8, r6, r7
 80135f8:	608b      	str	r3, [r1, #8]
 80135fa:	f1b8 0f00 	cmp.w	r8, #0
 80135fe:	dd9c      	ble.n	801353a <__sflush_r+0x1a>
 8013600:	6a21      	ldr	r1, [r4, #32]
 8013602:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013604:	4643      	mov	r3, r8
 8013606:	463a      	mov	r2, r7
 8013608:	4628      	mov	r0, r5
 801360a:	47b0      	blx	r6
 801360c:	2800      	cmp	r0, #0
 801360e:	dc06      	bgt.n	801361e <__sflush_r+0xfe>
 8013610:	89a3      	ldrh	r3, [r4, #12]
 8013612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013616:	81a3      	strh	r3, [r4, #12]
 8013618:	f04f 30ff 	mov.w	r0, #4294967295
 801361c:	e78e      	b.n	801353c <__sflush_r+0x1c>
 801361e:	4407      	add	r7, r0
 8013620:	eba8 0800 	sub.w	r8, r8, r0
 8013624:	e7e9      	b.n	80135fa <__sflush_r+0xda>
 8013626:	bf00      	nop
 8013628:	20400001 	.word	0x20400001

0801362c <_fflush_r>:
 801362c:	b538      	push	{r3, r4, r5, lr}
 801362e:	690b      	ldr	r3, [r1, #16]
 8013630:	4605      	mov	r5, r0
 8013632:	460c      	mov	r4, r1
 8013634:	b913      	cbnz	r3, 801363c <_fflush_r+0x10>
 8013636:	2500      	movs	r5, #0
 8013638:	4628      	mov	r0, r5
 801363a:	bd38      	pop	{r3, r4, r5, pc}
 801363c:	b118      	cbz	r0, 8013646 <_fflush_r+0x1a>
 801363e:	6983      	ldr	r3, [r0, #24]
 8013640:	b90b      	cbnz	r3, 8013646 <_fflush_r+0x1a>
 8013642:	f000 f887 	bl	8013754 <__sinit>
 8013646:	4b14      	ldr	r3, [pc, #80]	; (8013698 <_fflush_r+0x6c>)
 8013648:	429c      	cmp	r4, r3
 801364a:	d11b      	bne.n	8013684 <_fflush_r+0x58>
 801364c:	686c      	ldr	r4, [r5, #4]
 801364e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d0ef      	beq.n	8013636 <_fflush_r+0xa>
 8013656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013658:	07d0      	lsls	r0, r2, #31
 801365a:	d404      	bmi.n	8013666 <_fflush_r+0x3a>
 801365c:	0599      	lsls	r1, r3, #22
 801365e:	d402      	bmi.n	8013666 <_fflush_r+0x3a>
 8013660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013662:	f000 f915 	bl	8013890 <__retarget_lock_acquire_recursive>
 8013666:	4628      	mov	r0, r5
 8013668:	4621      	mov	r1, r4
 801366a:	f7ff ff59 	bl	8013520 <__sflush_r>
 801366e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013670:	07da      	lsls	r2, r3, #31
 8013672:	4605      	mov	r5, r0
 8013674:	d4e0      	bmi.n	8013638 <_fflush_r+0xc>
 8013676:	89a3      	ldrh	r3, [r4, #12]
 8013678:	059b      	lsls	r3, r3, #22
 801367a:	d4dd      	bmi.n	8013638 <_fflush_r+0xc>
 801367c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801367e:	f000 f908 	bl	8013892 <__retarget_lock_release_recursive>
 8013682:	e7d9      	b.n	8013638 <_fflush_r+0xc>
 8013684:	4b05      	ldr	r3, [pc, #20]	; (801369c <_fflush_r+0x70>)
 8013686:	429c      	cmp	r4, r3
 8013688:	d101      	bne.n	801368e <_fflush_r+0x62>
 801368a:	68ac      	ldr	r4, [r5, #8]
 801368c:	e7df      	b.n	801364e <_fflush_r+0x22>
 801368e:	4b04      	ldr	r3, [pc, #16]	; (80136a0 <_fflush_r+0x74>)
 8013690:	429c      	cmp	r4, r3
 8013692:	bf08      	it	eq
 8013694:	68ec      	ldreq	r4, [r5, #12]
 8013696:	e7da      	b.n	801364e <_fflush_r+0x22>
 8013698:	08014b84 	.word	0x08014b84
 801369c:	08014ba4 	.word	0x08014ba4
 80136a0:	08014b64 	.word	0x08014b64

080136a4 <std>:
 80136a4:	2300      	movs	r3, #0
 80136a6:	b510      	push	{r4, lr}
 80136a8:	4604      	mov	r4, r0
 80136aa:	e9c0 3300 	strd	r3, r3, [r0]
 80136ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80136b2:	6083      	str	r3, [r0, #8]
 80136b4:	8181      	strh	r1, [r0, #12]
 80136b6:	6643      	str	r3, [r0, #100]	; 0x64
 80136b8:	81c2      	strh	r2, [r0, #14]
 80136ba:	6183      	str	r3, [r0, #24]
 80136bc:	4619      	mov	r1, r3
 80136be:	2208      	movs	r2, #8
 80136c0:	305c      	adds	r0, #92	; 0x5c
 80136c2:	f7fd fe01 	bl	80112c8 <memset>
 80136c6:	4b05      	ldr	r3, [pc, #20]	; (80136dc <std+0x38>)
 80136c8:	6263      	str	r3, [r4, #36]	; 0x24
 80136ca:	4b05      	ldr	r3, [pc, #20]	; (80136e0 <std+0x3c>)
 80136cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80136ce:	4b05      	ldr	r3, [pc, #20]	; (80136e4 <std+0x40>)
 80136d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80136d2:	4b05      	ldr	r3, [pc, #20]	; (80136e8 <std+0x44>)
 80136d4:	6224      	str	r4, [r4, #32]
 80136d6:	6323      	str	r3, [r4, #48]	; 0x30
 80136d8:	bd10      	pop	{r4, pc}
 80136da:	bf00      	nop
 80136dc:	080139e5 	.word	0x080139e5
 80136e0:	08013a07 	.word	0x08013a07
 80136e4:	08013a3f 	.word	0x08013a3f
 80136e8:	08013a63 	.word	0x08013a63

080136ec <_cleanup_r>:
 80136ec:	4901      	ldr	r1, [pc, #4]	; (80136f4 <_cleanup_r+0x8>)
 80136ee:	f000 b8af 	b.w	8013850 <_fwalk_reent>
 80136f2:	bf00      	nop
 80136f4:	0801362d 	.word	0x0801362d

080136f8 <__sfmoreglue>:
 80136f8:	b570      	push	{r4, r5, r6, lr}
 80136fa:	1e4a      	subs	r2, r1, #1
 80136fc:	2568      	movs	r5, #104	; 0x68
 80136fe:	4355      	muls	r5, r2
 8013700:	460e      	mov	r6, r1
 8013702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013706:	f7ff fc23 	bl	8012f50 <_malloc_r>
 801370a:	4604      	mov	r4, r0
 801370c:	b140      	cbz	r0, 8013720 <__sfmoreglue+0x28>
 801370e:	2100      	movs	r1, #0
 8013710:	e9c0 1600 	strd	r1, r6, [r0]
 8013714:	300c      	adds	r0, #12
 8013716:	60a0      	str	r0, [r4, #8]
 8013718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801371c:	f7fd fdd4 	bl	80112c8 <memset>
 8013720:	4620      	mov	r0, r4
 8013722:	bd70      	pop	{r4, r5, r6, pc}

08013724 <__sfp_lock_acquire>:
 8013724:	4801      	ldr	r0, [pc, #4]	; (801372c <__sfp_lock_acquire+0x8>)
 8013726:	f000 b8b3 	b.w	8013890 <__retarget_lock_acquire_recursive>
 801372a:	bf00      	nop
 801372c:	24000e50 	.word	0x24000e50

08013730 <__sfp_lock_release>:
 8013730:	4801      	ldr	r0, [pc, #4]	; (8013738 <__sfp_lock_release+0x8>)
 8013732:	f000 b8ae 	b.w	8013892 <__retarget_lock_release_recursive>
 8013736:	bf00      	nop
 8013738:	24000e50 	.word	0x24000e50

0801373c <__sinit_lock_acquire>:
 801373c:	4801      	ldr	r0, [pc, #4]	; (8013744 <__sinit_lock_acquire+0x8>)
 801373e:	f000 b8a7 	b.w	8013890 <__retarget_lock_acquire_recursive>
 8013742:	bf00      	nop
 8013744:	24000e4b 	.word	0x24000e4b

08013748 <__sinit_lock_release>:
 8013748:	4801      	ldr	r0, [pc, #4]	; (8013750 <__sinit_lock_release+0x8>)
 801374a:	f000 b8a2 	b.w	8013892 <__retarget_lock_release_recursive>
 801374e:	bf00      	nop
 8013750:	24000e4b 	.word	0x24000e4b

08013754 <__sinit>:
 8013754:	b510      	push	{r4, lr}
 8013756:	4604      	mov	r4, r0
 8013758:	f7ff fff0 	bl	801373c <__sinit_lock_acquire>
 801375c:	69a3      	ldr	r3, [r4, #24]
 801375e:	b11b      	cbz	r3, 8013768 <__sinit+0x14>
 8013760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013764:	f7ff bff0 	b.w	8013748 <__sinit_lock_release>
 8013768:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801376c:	6523      	str	r3, [r4, #80]	; 0x50
 801376e:	4b13      	ldr	r3, [pc, #76]	; (80137bc <__sinit+0x68>)
 8013770:	4a13      	ldr	r2, [pc, #76]	; (80137c0 <__sinit+0x6c>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	62a2      	str	r2, [r4, #40]	; 0x28
 8013776:	42a3      	cmp	r3, r4
 8013778:	bf04      	itt	eq
 801377a:	2301      	moveq	r3, #1
 801377c:	61a3      	streq	r3, [r4, #24]
 801377e:	4620      	mov	r0, r4
 8013780:	f000 f820 	bl	80137c4 <__sfp>
 8013784:	6060      	str	r0, [r4, #4]
 8013786:	4620      	mov	r0, r4
 8013788:	f000 f81c 	bl	80137c4 <__sfp>
 801378c:	60a0      	str	r0, [r4, #8]
 801378e:	4620      	mov	r0, r4
 8013790:	f000 f818 	bl	80137c4 <__sfp>
 8013794:	2200      	movs	r2, #0
 8013796:	60e0      	str	r0, [r4, #12]
 8013798:	2104      	movs	r1, #4
 801379a:	6860      	ldr	r0, [r4, #4]
 801379c:	f7ff ff82 	bl	80136a4 <std>
 80137a0:	68a0      	ldr	r0, [r4, #8]
 80137a2:	2201      	movs	r2, #1
 80137a4:	2109      	movs	r1, #9
 80137a6:	f7ff ff7d 	bl	80136a4 <std>
 80137aa:	68e0      	ldr	r0, [r4, #12]
 80137ac:	2202      	movs	r2, #2
 80137ae:	2112      	movs	r1, #18
 80137b0:	f7ff ff78 	bl	80136a4 <std>
 80137b4:	2301      	movs	r3, #1
 80137b6:	61a3      	str	r3, [r4, #24]
 80137b8:	e7d2      	b.n	8013760 <__sinit+0xc>
 80137ba:	bf00      	nop
 80137bc:	080147e0 	.word	0x080147e0
 80137c0:	080136ed 	.word	0x080136ed

080137c4 <__sfp>:
 80137c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137c6:	4607      	mov	r7, r0
 80137c8:	f7ff ffac 	bl	8013724 <__sfp_lock_acquire>
 80137cc:	4b1e      	ldr	r3, [pc, #120]	; (8013848 <__sfp+0x84>)
 80137ce:	681e      	ldr	r6, [r3, #0]
 80137d0:	69b3      	ldr	r3, [r6, #24]
 80137d2:	b913      	cbnz	r3, 80137da <__sfp+0x16>
 80137d4:	4630      	mov	r0, r6
 80137d6:	f7ff ffbd 	bl	8013754 <__sinit>
 80137da:	3648      	adds	r6, #72	; 0x48
 80137dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80137e0:	3b01      	subs	r3, #1
 80137e2:	d503      	bpl.n	80137ec <__sfp+0x28>
 80137e4:	6833      	ldr	r3, [r6, #0]
 80137e6:	b30b      	cbz	r3, 801382c <__sfp+0x68>
 80137e8:	6836      	ldr	r6, [r6, #0]
 80137ea:	e7f7      	b.n	80137dc <__sfp+0x18>
 80137ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80137f0:	b9d5      	cbnz	r5, 8013828 <__sfp+0x64>
 80137f2:	4b16      	ldr	r3, [pc, #88]	; (801384c <__sfp+0x88>)
 80137f4:	60e3      	str	r3, [r4, #12]
 80137f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80137fa:	6665      	str	r5, [r4, #100]	; 0x64
 80137fc:	f000 f847 	bl	801388e <__retarget_lock_init_recursive>
 8013800:	f7ff ff96 	bl	8013730 <__sfp_lock_release>
 8013804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801380c:	6025      	str	r5, [r4, #0]
 801380e:	61a5      	str	r5, [r4, #24]
 8013810:	2208      	movs	r2, #8
 8013812:	4629      	mov	r1, r5
 8013814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013818:	f7fd fd56 	bl	80112c8 <memset>
 801381c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013824:	4620      	mov	r0, r4
 8013826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013828:	3468      	adds	r4, #104	; 0x68
 801382a:	e7d9      	b.n	80137e0 <__sfp+0x1c>
 801382c:	2104      	movs	r1, #4
 801382e:	4638      	mov	r0, r7
 8013830:	f7ff ff62 	bl	80136f8 <__sfmoreglue>
 8013834:	4604      	mov	r4, r0
 8013836:	6030      	str	r0, [r6, #0]
 8013838:	2800      	cmp	r0, #0
 801383a:	d1d5      	bne.n	80137e8 <__sfp+0x24>
 801383c:	f7ff ff78 	bl	8013730 <__sfp_lock_release>
 8013840:	230c      	movs	r3, #12
 8013842:	603b      	str	r3, [r7, #0]
 8013844:	e7ee      	b.n	8013824 <__sfp+0x60>
 8013846:	bf00      	nop
 8013848:	080147e0 	.word	0x080147e0
 801384c:	ffff0001 	.word	0xffff0001

08013850 <_fwalk_reent>:
 8013850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013854:	4606      	mov	r6, r0
 8013856:	4688      	mov	r8, r1
 8013858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801385c:	2700      	movs	r7, #0
 801385e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013862:	f1b9 0901 	subs.w	r9, r9, #1
 8013866:	d505      	bpl.n	8013874 <_fwalk_reent+0x24>
 8013868:	6824      	ldr	r4, [r4, #0]
 801386a:	2c00      	cmp	r4, #0
 801386c:	d1f7      	bne.n	801385e <_fwalk_reent+0xe>
 801386e:	4638      	mov	r0, r7
 8013870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013874:	89ab      	ldrh	r3, [r5, #12]
 8013876:	2b01      	cmp	r3, #1
 8013878:	d907      	bls.n	801388a <_fwalk_reent+0x3a>
 801387a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801387e:	3301      	adds	r3, #1
 8013880:	d003      	beq.n	801388a <_fwalk_reent+0x3a>
 8013882:	4629      	mov	r1, r5
 8013884:	4630      	mov	r0, r6
 8013886:	47c0      	blx	r8
 8013888:	4307      	orrs	r7, r0
 801388a:	3568      	adds	r5, #104	; 0x68
 801388c:	e7e9      	b.n	8013862 <_fwalk_reent+0x12>

0801388e <__retarget_lock_init_recursive>:
 801388e:	4770      	bx	lr

08013890 <__retarget_lock_acquire_recursive>:
 8013890:	4770      	bx	lr

08013892 <__retarget_lock_release_recursive>:
 8013892:	4770      	bx	lr

08013894 <__swhatbuf_r>:
 8013894:	b570      	push	{r4, r5, r6, lr}
 8013896:	460e      	mov	r6, r1
 8013898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801389c:	2900      	cmp	r1, #0
 801389e:	b096      	sub	sp, #88	; 0x58
 80138a0:	4614      	mov	r4, r2
 80138a2:	461d      	mov	r5, r3
 80138a4:	da07      	bge.n	80138b6 <__swhatbuf_r+0x22>
 80138a6:	2300      	movs	r3, #0
 80138a8:	602b      	str	r3, [r5, #0]
 80138aa:	89b3      	ldrh	r3, [r6, #12]
 80138ac:	061a      	lsls	r2, r3, #24
 80138ae:	d410      	bmi.n	80138d2 <__swhatbuf_r+0x3e>
 80138b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138b4:	e00e      	b.n	80138d4 <__swhatbuf_r+0x40>
 80138b6:	466a      	mov	r2, sp
 80138b8:	f000 f8fa 	bl	8013ab0 <_fstat_r>
 80138bc:	2800      	cmp	r0, #0
 80138be:	dbf2      	blt.n	80138a6 <__swhatbuf_r+0x12>
 80138c0:	9a01      	ldr	r2, [sp, #4]
 80138c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80138c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80138ca:	425a      	negs	r2, r3
 80138cc:	415a      	adcs	r2, r3
 80138ce:	602a      	str	r2, [r5, #0]
 80138d0:	e7ee      	b.n	80138b0 <__swhatbuf_r+0x1c>
 80138d2:	2340      	movs	r3, #64	; 0x40
 80138d4:	2000      	movs	r0, #0
 80138d6:	6023      	str	r3, [r4, #0]
 80138d8:	b016      	add	sp, #88	; 0x58
 80138da:	bd70      	pop	{r4, r5, r6, pc}

080138dc <__smakebuf_r>:
 80138dc:	898b      	ldrh	r3, [r1, #12]
 80138de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80138e0:	079d      	lsls	r5, r3, #30
 80138e2:	4606      	mov	r6, r0
 80138e4:	460c      	mov	r4, r1
 80138e6:	d507      	bpl.n	80138f8 <__smakebuf_r+0x1c>
 80138e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80138ec:	6023      	str	r3, [r4, #0]
 80138ee:	6123      	str	r3, [r4, #16]
 80138f0:	2301      	movs	r3, #1
 80138f2:	6163      	str	r3, [r4, #20]
 80138f4:	b002      	add	sp, #8
 80138f6:	bd70      	pop	{r4, r5, r6, pc}
 80138f8:	ab01      	add	r3, sp, #4
 80138fa:	466a      	mov	r2, sp
 80138fc:	f7ff ffca 	bl	8013894 <__swhatbuf_r>
 8013900:	9900      	ldr	r1, [sp, #0]
 8013902:	4605      	mov	r5, r0
 8013904:	4630      	mov	r0, r6
 8013906:	f7ff fb23 	bl	8012f50 <_malloc_r>
 801390a:	b948      	cbnz	r0, 8013920 <__smakebuf_r+0x44>
 801390c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013910:	059a      	lsls	r2, r3, #22
 8013912:	d4ef      	bmi.n	80138f4 <__smakebuf_r+0x18>
 8013914:	f023 0303 	bic.w	r3, r3, #3
 8013918:	f043 0302 	orr.w	r3, r3, #2
 801391c:	81a3      	strh	r3, [r4, #12]
 801391e:	e7e3      	b.n	80138e8 <__smakebuf_r+0xc>
 8013920:	4b0d      	ldr	r3, [pc, #52]	; (8013958 <__smakebuf_r+0x7c>)
 8013922:	62b3      	str	r3, [r6, #40]	; 0x28
 8013924:	89a3      	ldrh	r3, [r4, #12]
 8013926:	6020      	str	r0, [r4, #0]
 8013928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801392c:	81a3      	strh	r3, [r4, #12]
 801392e:	9b00      	ldr	r3, [sp, #0]
 8013930:	6163      	str	r3, [r4, #20]
 8013932:	9b01      	ldr	r3, [sp, #4]
 8013934:	6120      	str	r0, [r4, #16]
 8013936:	b15b      	cbz	r3, 8013950 <__smakebuf_r+0x74>
 8013938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801393c:	4630      	mov	r0, r6
 801393e:	f000 f8c9 	bl	8013ad4 <_isatty_r>
 8013942:	b128      	cbz	r0, 8013950 <__smakebuf_r+0x74>
 8013944:	89a3      	ldrh	r3, [r4, #12]
 8013946:	f023 0303 	bic.w	r3, r3, #3
 801394a:	f043 0301 	orr.w	r3, r3, #1
 801394e:	81a3      	strh	r3, [r4, #12]
 8013950:	89a0      	ldrh	r0, [r4, #12]
 8013952:	4305      	orrs	r5, r0
 8013954:	81a5      	strh	r5, [r4, #12]
 8013956:	e7cd      	b.n	80138f4 <__smakebuf_r+0x18>
 8013958:	080136ed 	.word	0x080136ed

0801395c <_raise_r>:
 801395c:	291f      	cmp	r1, #31
 801395e:	b538      	push	{r3, r4, r5, lr}
 8013960:	4604      	mov	r4, r0
 8013962:	460d      	mov	r5, r1
 8013964:	d904      	bls.n	8013970 <_raise_r+0x14>
 8013966:	2316      	movs	r3, #22
 8013968:	6003      	str	r3, [r0, #0]
 801396a:	f04f 30ff 	mov.w	r0, #4294967295
 801396e:	bd38      	pop	{r3, r4, r5, pc}
 8013970:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013972:	b112      	cbz	r2, 801397a <_raise_r+0x1e>
 8013974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013978:	b94b      	cbnz	r3, 801398e <_raise_r+0x32>
 801397a:	4620      	mov	r0, r4
 801397c:	f000 f830 	bl	80139e0 <_getpid_r>
 8013980:	462a      	mov	r2, r5
 8013982:	4601      	mov	r1, r0
 8013984:	4620      	mov	r0, r4
 8013986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801398a:	f000 b817 	b.w	80139bc <_kill_r>
 801398e:	2b01      	cmp	r3, #1
 8013990:	d00a      	beq.n	80139a8 <_raise_r+0x4c>
 8013992:	1c59      	adds	r1, r3, #1
 8013994:	d103      	bne.n	801399e <_raise_r+0x42>
 8013996:	2316      	movs	r3, #22
 8013998:	6003      	str	r3, [r0, #0]
 801399a:	2001      	movs	r0, #1
 801399c:	e7e7      	b.n	801396e <_raise_r+0x12>
 801399e:	2400      	movs	r4, #0
 80139a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80139a4:	4628      	mov	r0, r5
 80139a6:	4798      	blx	r3
 80139a8:	2000      	movs	r0, #0
 80139aa:	e7e0      	b.n	801396e <_raise_r+0x12>

080139ac <raise>:
 80139ac:	4b02      	ldr	r3, [pc, #8]	; (80139b8 <raise+0xc>)
 80139ae:	4601      	mov	r1, r0
 80139b0:	6818      	ldr	r0, [r3, #0]
 80139b2:	f7ff bfd3 	b.w	801395c <_raise_r>
 80139b6:	bf00      	nop
 80139b8:	24000010 	.word	0x24000010

080139bc <_kill_r>:
 80139bc:	b538      	push	{r3, r4, r5, lr}
 80139be:	4d07      	ldr	r5, [pc, #28]	; (80139dc <_kill_r+0x20>)
 80139c0:	2300      	movs	r3, #0
 80139c2:	4604      	mov	r4, r0
 80139c4:	4608      	mov	r0, r1
 80139c6:	4611      	mov	r1, r2
 80139c8:	602b      	str	r3, [r5, #0]
 80139ca:	f7f3 f967 	bl	8006c9c <_kill>
 80139ce:	1c43      	adds	r3, r0, #1
 80139d0:	d102      	bne.n	80139d8 <_kill_r+0x1c>
 80139d2:	682b      	ldr	r3, [r5, #0]
 80139d4:	b103      	cbz	r3, 80139d8 <_kill_r+0x1c>
 80139d6:	6023      	str	r3, [r4, #0]
 80139d8:	bd38      	pop	{r3, r4, r5, pc}
 80139da:	bf00      	nop
 80139dc:	24000e44 	.word	0x24000e44

080139e0 <_getpid_r>:
 80139e0:	f7f3 b954 	b.w	8006c8c <_getpid>

080139e4 <__sread>:
 80139e4:	b510      	push	{r4, lr}
 80139e6:	460c      	mov	r4, r1
 80139e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139ec:	f000 f894 	bl	8013b18 <_read_r>
 80139f0:	2800      	cmp	r0, #0
 80139f2:	bfab      	itete	ge
 80139f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80139f6:	89a3      	ldrhlt	r3, [r4, #12]
 80139f8:	181b      	addge	r3, r3, r0
 80139fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80139fe:	bfac      	ite	ge
 8013a00:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a02:	81a3      	strhlt	r3, [r4, #12]
 8013a04:	bd10      	pop	{r4, pc}

08013a06 <__swrite>:
 8013a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a0a:	461f      	mov	r7, r3
 8013a0c:	898b      	ldrh	r3, [r1, #12]
 8013a0e:	05db      	lsls	r3, r3, #23
 8013a10:	4605      	mov	r5, r0
 8013a12:	460c      	mov	r4, r1
 8013a14:	4616      	mov	r6, r2
 8013a16:	d505      	bpl.n	8013a24 <__swrite+0x1e>
 8013a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a1c:	2302      	movs	r3, #2
 8013a1e:	2200      	movs	r2, #0
 8013a20:	f000 f868 	bl	8013af4 <_lseek_r>
 8013a24:	89a3      	ldrh	r3, [r4, #12]
 8013a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a2e:	81a3      	strh	r3, [r4, #12]
 8013a30:	4632      	mov	r2, r6
 8013a32:	463b      	mov	r3, r7
 8013a34:	4628      	mov	r0, r5
 8013a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a3a:	f000 b817 	b.w	8013a6c <_write_r>

08013a3e <__sseek>:
 8013a3e:	b510      	push	{r4, lr}
 8013a40:	460c      	mov	r4, r1
 8013a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a46:	f000 f855 	bl	8013af4 <_lseek_r>
 8013a4a:	1c43      	adds	r3, r0, #1
 8013a4c:	89a3      	ldrh	r3, [r4, #12]
 8013a4e:	bf15      	itete	ne
 8013a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8013a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013a5a:	81a3      	strheq	r3, [r4, #12]
 8013a5c:	bf18      	it	ne
 8013a5e:	81a3      	strhne	r3, [r4, #12]
 8013a60:	bd10      	pop	{r4, pc}

08013a62 <__sclose>:
 8013a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a66:	f000 b813 	b.w	8013a90 <_close_r>
	...

08013a6c <_write_r>:
 8013a6c:	b538      	push	{r3, r4, r5, lr}
 8013a6e:	4d07      	ldr	r5, [pc, #28]	; (8013a8c <_write_r+0x20>)
 8013a70:	4604      	mov	r4, r0
 8013a72:	4608      	mov	r0, r1
 8013a74:	4611      	mov	r1, r2
 8013a76:	2200      	movs	r2, #0
 8013a78:	602a      	str	r2, [r5, #0]
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	f7f3 f945 	bl	8006d0a <_write>
 8013a80:	1c43      	adds	r3, r0, #1
 8013a82:	d102      	bne.n	8013a8a <_write_r+0x1e>
 8013a84:	682b      	ldr	r3, [r5, #0]
 8013a86:	b103      	cbz	r3, 8013a8a <_write_r+0x1e>
 8013a88:	6023      	str	r3, [r4, #0]
 8013a8a:	bd38      	pop	{r3, r4, r5, pc}
 8013a8c:	24000e44 	.word	0x24000e44

08013a90 <_close_r>:
 8013a90:	b538      	push	{r3, r4, r5, lr}
 8013a92:	4d06      	ldr	r5, [pc, #24]	; (8013aac <_close_r+0x1c>)
 8013a94:	2300      	movs	r3, #0
 8013a96:	4604      	mov	r4, r0
 8013a98:	4608      	mov	r0, r1
 8013a9a:	602b      	str	r3, [r5, #0]
 8013a9c:	f7f3 f951 	bl	8006d42 <_close>
 8013aa0:	1c43      	adds	r3, r0, #1
 8013aa2:	d102      	bne.n	8013aaa <_close_r+0x1a>
 8013aa4:	682b      	ldr	r3, [r5, #0]
 8013aa6:	b103      	cbz	r3, 8013aaa <_close_r+0x1a>
 8013aa8:	6023      	str	r3, [r4, #0]
 8013aaa:	bd38      	pop	{r3, r4, r5, pc}
 8013aac:	24000e44 	.word	0x24000e44

08013ab0 <_fstat_r>:
 8013ab0:	b538      	push	{r3, r4, r5, lr}
 8013ab2:	4d07      	ldr	r5, [pc, #28]	; (8013ad0 <_fstat_r+0x20>)
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	4604      	mov	r4, r0
 8013ab8:	4608      	mov	r0, r1
 8013aba:	4611      	mov	r1, r2
 8013abc:	602b      	str	r3, [r5, #0]
 8013abe:	f7f3 f94c 	bl	8006d5a <_fstat>
 8013ac2:	1c43      	adds	r3, r0, #1
 8013ac4:	d102      	bne.n	8013acc <_fstat_r+0x1c>
 8013ac6:	682b      	ldr	r3, [r5, #0]
 8013ac8:	b103      	cbz	r3, 8013acc <_fstat_r+0x1c>
 8013aca:	6023      	str	r3, [r4, #0]
 8013acc:	bd38      	pop	{r3, r4, r5, pc}
 8013ace:	bf00      	nop
 8013ad0:	24000e44 	.word	0x24000e44

08013ad4 <_isatty_r>:
 8013ad4:	b538      	push	{r3, r4, r5, lr}
 8013ad6:	4d06      	ldr	r5, [pc, #24]	; (8013af0 <_isatty_r+0x1c>)
 8013ad8:	2300      	movs	r3, #0
 8013ada:	4604      	mov	r4, r0
 8013adc:	4608      	mov	r0, r1
 8013ade:	602b      	str	r3, [r5, #0]
 8013ae0:	f7f3 f94b 	bl	8006d7a <_isatty>
 8013ae4:	1c43      	adds	r3, r0, #1
 8013ae6:	d102      	bne.n	8013aee <_isatty_r+0x1a>
 8013ae8:	682b      	ldr	r3, [r5, #0]
 8013aea:	b103      	cbz	r3, 8013aee <_isatty_r+0x1a>
 8013aec:	6023      	str	r3, [r4, #0]
 8013aee:	bd38      	pop	{r3, r4, r5, pc}
 8013af0:	24000e44 	.word	0x24000e44

08013af4 <_lseek_r>:
 8013af4:	b538      	push	{r3, r4, r5, lr}
 8013af6:	4d07      	ldr	r5, [pc, #28]	; (8013b14 <_lseek_r+0x20>)
 8013af8:	4604      	mov	r4, r0
 8013afa:	4608      	mov	r0, r1
 8013afc:	4611      	mov	r1, r2
 8013afe:	2200      	movs	r2, #0
 8013b00:	602a      	str	r2, [r5, #0]
 8013b02:	461a      	mov	r2, r3
 8013b04:	f7f3 f944 	bl	8006d90 <_lseek>
 8013b08:	1c43      	adds	r3, r0, #1
 8013b0a:	d102      	bne.n	8013b12 <_lseek_r+0x1e>
 8013b0c:	682b      	ldr	r3, [r5, #0]
 8013b0e:	b103      	cbz	r3, 8013b12 <_lseek_r+0x1e>
 8013b10:	6023      	str	r3, [r4, #0]
 8013b12:	bd38      	pop	{r3, r4, r5, pc}
 8013b14:	24000e44 	.word	0x24000e44

08013b18 <_read_r>:
 8013b18:	b538      	push	{r3, r4, r5, lr}
 8013b1a:	4d07      	ldr	r5, [pc, #28]	; (8013b38 <_read_r+0x20>)
 8013b1c:	4604      	mov	r4, r0
 8013b1e:	4608      	mov	r0, r1
 8013b20:	4611      	mov	r1, r2
 8013b22:	2200      	movs	r2, #0
 8013b24:	602a      	str	r2, [r5, #0]
 8013b26:	461a      	mov	r2, r3
 8013b28:	f7f3 f8d2 	bl	8006cd0 <_read>
 8013b2c:	1c43      	adds	r3, r0, #1
 8013b2e:	d102      	bne.n	8013b36 <_read_r+0x1e>
 8013b30:	682b      	ldr	r3, [r5, #0]
 8013b32:	b103      	cbz	r3, 8013b36 <_read_r+0x1e>
 8013b34:	6023      	str	r3, [r4, #0]
 8013b36:	bd38      	pop	{r3, r4, r5, pc}
 8013b38:	24000e44 	.word	0x24000e44
 8013b3c:	00000000 	.word	0x00000000

08013b40 <cos>:
 8013b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b42:	eeb0 7b40 	vmov.f64	d7, d0
 8013b46:	ee17 3a90 	vmov	r3, s15
 8013b4a:	4a1f      	ldr	r2, [pc, #124]	; (8013bc8 <cos+0x88>)
 8013b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b50:	4293      	cmp	r3, r2
 8013b52:	dc04      	bgt.n	8013b5e <cos+0x1e>
 8013b54:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8013bc0 <cos+0x80>
 8013b58:	f000 f9ce 	bl	8013ef8 <__kernel_cos>
 8013b5c:	e004      	b.n	8013b68 <cos+0x28>
 8013b5e:	4a1b      	ldr	r2, [pc, #108]	; (8013bcc <cos+0x8c>)
 8013b60:	4293      	cmp	r3, r2
 8013b62:	dd04      	ble.n	8013b6e <cos+0x2e>
 8013b64:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013b68:	b005      	add	sp, #20
 8013b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b6e:	4668      	mov	r0, sp
 8013b70:	f000 f882 	bl	8013c78 <__ieee754_rem_pio2>
 8013b74:	f000 0003 	and.w	r0, r0, #3
 8013b78:	2801      	cmp	r0, #1
 8013b7a:	d007      	beq.n	8013b8c <cos+0x4c>
 8013b7c:	2802      	cmp	r0, #2
 8013b7e:	d00e      	beq.n	8013b9e <cos+0x5e>
 8013b80:	b9a0      	cbnz	r0, 8013bac <cos+0x6c>
 8013b82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b86:	ed9d 0b00 	vldr	d0, [sp]
 8013b8a:	e7e5      	b.n	8013b58 <cos+0x18>
 8013b8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b90:	ed9d 0b00 	vldr	d0, [sp]
 8013b94:	f000 fc9c 	bl	80144d0 <__kernel_sin>
 8013b98:	eeb1 0b40 	vneg.f64	d0, d0
 8013b9c:	e7e4      	b.n	8013b68 <cos+0x28>
 8013b9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013ba2:	ed9d 0b00 	vldr	d0, [sp]
 8013ba6:	f000 f9a7 	bl	8013ef8 <__kernel_cos>
 8013baa:	e7f5      	b.n	8013b98 <cos+0x58>
 8013bac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013bb0:	ed9d 0b00 	vldr	d0, [sp]
 8013bb4:	2001      	movs	r0, #1
 8013bb6:	f000 fc8b 	bl	80144d0 <__kernel_sin>
 8013bba:	e7d5      	b.n	8013b68 <cos+0x28>
 8013bbc:	f3af 8000 	nop.w
	...
 8013bc8:	3fe921fb 	.word	0x3fe921fb
 8013bcc:	7fefffff 	.word	0x7fefffff

08013bd0 <fabs>:
 8013bd0:	ec51 0b10 	vmov	r0, r1, d0
 8013bd4:	ee10 2a10 	vmov	r2, s0
 8013bd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013bdc:	ec43 2b10 	vmov	d0, r2, r3
 8013be0:	4770      	bx	lr
 8013be2:	0000      	movs	r0, r0
 8013be4:	0000      	movs	r0, r0
	...

08013be8 <sin>:
 8013be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013bea:	eeb0 7b40 	vmov.f64	d7, d0
 8013bee:	ee17 3a90 	vmov	r3, s15
 8013bf2:	4a1f      	ldr	r2, [pc, #124]	; (8013c70 <sin+0x88>)
 8013bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013bf8:	4293      	cmp	r3, r2
 8013bfa:	dc05      	bgt.n	8013c08 <sin+0x20>
 8013bfc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8013c68 <sin+0x80>
 8013c00:	2000      	movs	r0, #0
 8013c02:	f000 fc65 	bl	80144d0 <__kernel_sin>
 8013c06:	e004      	b.n	8013c12 <sin+0x2a>
 8013c08:	4a1a      	ldr	r2, [pc, #104]	; (8013c74 <sin+0x8c>)
 8013c0a:	4293      	cmp	r3, r2
 8013c0c:	dd04      	ble.n	8013c18 <sin+0x30>
 8013c0e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013c12:	b005      	add	sp, #20
 8013c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8013c18:	4668      	mov	r0, sp
 8013c1a:	f000 f82d 	bl	8013c78 <__ieee754_rem_pio2>
 8013c1e:	f000 0003 	and.w	r0, r0, #3
 8013c22:	2801      	cmp	r0, #1
 8013c24:	d008      	beq.n	8013c38 <sin+0x50>
 8013c26:	2802      	cmp	r0, #2
 8013c28:	d00d      	beq.n	8013c46 <sin+0x5e>
 8013c2a:	b9b0      	cbnz	r0, 8013c5a <sin+0x72>
 8013c2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c30:	ed9d 0b00 	vldr	d0, [sp]
 8013c34:	2001      	movs	r0, #1
 8013c36:	e7e4      	b.n	8013c02 <sin+0x1a>
 8013c38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c3c:	ed9d 0b00 	vldr	d0, [sp]
 8013c40:	f000 f95a 	bl	8013ef8 <__kernel_cos>
 8013c44:	e7e5      	b.n	8013c12 <sin+0x2a>
 8013c46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c4a:	ed9d 0b00 	vldr	d0, [sp]
 8013c4e:	2001      	movs	r0, #1
 8013c50:	f000 fc3e 	bl	80144d0 <__kernel_sin>
 8013c54:	eeb1 0b40 	vneg.f64	d0, d0
 8013c58:	e7db      	b.n	8013c12 <sin+0x2a>
 8013c5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c5e:	ed9d 0b00 	vldr	d0, [sp]
 8013c62:	f000 f949 	bl	8013ef8 <__kernel_cos>
 8013c66:	e7f5      	b.n	8013c54 <sin+0x6c>
	...
 8013c70:	3fe921fb 	.word	0x3fe921fb
 8013c74:	7fefffff 	.word	0x7fefffff

08013c78 <__ieee754_rem_pio2>:
 8013c78:	b570      	push	{r4, r5, r6, lr}
 8013c7a:	eeb0 7b40 	vmov.f64	d7, d0
 8013c7e:	ee17 5a90 	vmov	r5, s15
 8013c82:	4b97      	ldr	r3, [pc, #604]	; (8013ee0 <__ieee754_rem_pio2+0x268>)
 8013c84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013c88:	429e      	cmp	r6, r3
 8013c8a:	b088      	sub	sp, #32
 8013c8c:	4604      	mov	r4, r0
 8013c8e:	dc07      	bgt.n	8013ca0 <__ieee754_rem_pio2+0x28>
 8013c90:	2200      	movs	r2, #0
 8013c92:	2300      	movs	r3, #0
 8013c94:	ed84 0b00 	vstr	d0, [r4]
 8013c98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013c9c:	2000      	movs	r0, #0
 8013c9e:	e01b      	b.n	8013cd8 <__ieee754_rem_pio2+0x60>
 8013ca0:	4b90      	ldr	r3, [pc, #576]	; (8013ee4 <__ieee754_rem_pio2+0x26c>)
 8013ca2:	429e      	cmp	r6, r3
 8013ca4:	dc3b      	bgt.n	8013d1e <__ieee754_rem_pio2+0xa6>
 8013ca6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8013caa:	2d00      	cmp	r5, #0
 8013cac:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8013ea0 <__ieee754_rem_pio2+0x228>
 8013cb0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8013cb4:	dd19      	ble.n	8013cea <__ieee754_rem_pio2+0x72>
 8013cb6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013cba:	429e      	cmp	r6, r3
 8013cbc:	d00e      	beq.n	8013cdc <__ieee754_rem_pio2+0x64>
 8013cbe:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8013ea8 <__ieee754_rem_pio2+0x230>
 8013cc2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8013cc6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013cca:	ed84 5b00 	vstr	d5, [r4]
 8013cce:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013cd2:	ed84 7b02 	vstr	d7, [r4, #8]
 8013cd6:	2001      	movs	r0, #1
 8013cd8:	b008      	add	sp, #32
 8013cda:	bd70      	pop	{r4, r5, r6, pc}
 8013cdc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8013eb0 <__ieee754_rem_pio2+0x238>
 8013ce0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013ce4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8013eb8 <__ieee754_rem_pio2+0x240>
 8013ce8:	e7eb      	b.n	8013cc2 <__ieee754_rem_pio2+0x4a>
 8013cea:	429e      	cmp	r6, r3
 8013cec:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013cf0:	d00e      	beq.n	8013d10 <__ieee754_rem_pio2+0x98>
 8013cf2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8013ea8 <__ieee754_rem_pio2+0x230>
 8013cf6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8013cfa:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013cfe:	ed84 5b00 	vstr	d5, [r4]
 8013d02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013d06:	f04f 30ff 	mov.w	r0, #4294967295
 8013d0a:	ed84 7b02 	vstr	d7, [r4, #8]
 8013d0e:	e7e3      	b.n	8013cd8 <__ieee754_rem_pio2+0x60>
 8013d10:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8013eb0 <__ieee754_rem_pio2+0x238>
 8013d14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013d18:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8013eb8 <__ieee754_rem_pio2+0x240>
 8013d1c:	e7eb      	b.n	8013cf6 <__ieee754_rem_pio2+0x7e>
 8013d1e:	4b72      	ldr	r3, [pc, #456]	; (8013ee8 <__ieee754_rem_pio2+0x270>)
 8013d20:	429e      	cmp	r6, r3
 8013d22:	dc6e      	bgt.n	8013e02 <__ieee754_rem_pio2+0x18a>
 8013d24:	f7ff ff54 	bl	8013bd0 <fabs>
 8013d28:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013d2c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8013ec0 <__ieee754_rem_pio2+0x248>
 8013d30:	eea0 7b06 	vfma.f64	d7, d0, d6
 8013d34:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8013d38:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013d3c:	ee17 0a90 	vmov	r0, s15
 8013d40:	eeb1 4b45 	vneg.f64	d4, d5
 8013d44:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8013ea0 <__ieee754_rem_pio2+0x228>
 8013d48:	eea5 0b47 	vfms.f64	d0, d5, d7
 8013d4c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8013ea8 <__ieee754_rem_pio2+0x230>
 8013d50:	281f      	cmp	r0, #31
 8013d52:	ee25 7b07 	vmul.f64	d7, d5, d7
 8013d56:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013d5a:	dc08      	bgt.n	8013d6e <__ieee754_rem_pio2+0xf6>
 8013d5c:	4b63      	ldr	r3, [pc, #396]	; (8013eec <__ieee754_rem_pio2+0x274>)
 8013d5e:	1e42      	subs	r2, r0, #1
 8013d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d64:	42b3      	cmp	r3, r6
 8013d66:	d002      	beq.n	8013d6e <__ieee754_rem_pio2+0xf6>
 8013d68:	ed84 6b00 	vstr	d6, [r4]
 8013d6c:	e024      	b.n	8013db8 <__ieee754_rem_pio2+0x140>
 8013d6e:	ee16 3a90 	vmov	r3, s13
 8013d72:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013d76:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8013d7a:	2b10      	cmp	r3, #16
 8013d7c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8013d80:	ddf2      	ble.n	8013d68 <__ieee754_rem_pio2+0xf0>
 8013d82:	eeb0 6b40 	vmov.f64	d6, d0
 8013d86:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8013eb0 <__ieee754_rem_pio2+0x238>
 8013d8a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8013d8e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013d92:	eea4 7b03 	vfma.f64	d7, d4, d3
 8013d96:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8013eb8 <__ieee754_rem_pio2+0x240>
 8013d9a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8013d9e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8013da2:	ee13 3a90 	vmov	r3, s7
 8013da6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013daa:	1ad3      	subs	r3, r2, r3
 8013dac:	2b31      	cmp	r3, #49	; 0x31
 8013dae:	dc17      	bgt.n	8013de0 <__ieee754_rem_pio2+0x168>
 8013db0:	eeb0 0b46 	vmov.f64	d0, d6
 8013db4:	ed84 3b00 	vstr	d3, [r4]
 8013db8:	ed94 6b00 	vldr	d6, [r4]
 8013dbc:	2d00      	cmp	r5, #0
 8013dbe:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013dc2:	ee30 7b47 	vsub.f64	d7, d0, d7
 8013dc6:	ed84 7b02 	vstr	d7, [r4, #8]
 8013dca:	da85      	bge.n	8013cd8 <__ieee754_rem_pio2+0x60>
 8013dcc:	eeb1 6b46 	vneg.f64	d6, d6
 8013dd0:	ed84 6b00 	vstr	d6, [r4]
 8013dd4:	eeb1 7b47 	vneg.f64	d7, d7
 8013dd8:	4240      	negs	r0, r0
 8013dda:	ed84 7b02 	vstr	d7, [r4, #8]
 8013dde:	e77b      	b.n	8013cd8 <__ieee754_rem_pio2+0x60>
 8013de0:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8013ec8 <__ieee754_rem_pio2+0x250>
 8013de4:	eeb0 0b46 	vmov.f64	d0, d6
 8013de8:	eea4 0b03 	vfma.f64	d0, d4, d3
 8013dec:	ee36 7b40 	vsub.f64	d7, d6, d0
 8013df0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8013ed0 <__ieee754_rem_pio2+0x258>
 8013df4:	eea4 7b03 	vfma.f64	d7, d4, d3
 8013df8:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8013dfc:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013e00:	e7b2      	b.n	8013d68 <__ieee754_rem_pio2+0xf0>
 8013e02:	4b3b      	ldr	r3, [pc, #236]	; (8013ef0 <__ieee754_rem_pio2+0x278>)
 8013e04:	429e      	cmp	r6, r3
 8013e06:	dd06      	ble.n	8013e16 <__ieee754_rem_pio2+0x19e>
 8013e08:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013e0c:	ed80 7b02 	vstr	d7, [r0, #8]
 8013e10:	ed80 7b00 	vstr	d7, [r0]
 8013e14:	e742      	b.n	8013c9c <__ieee754_rem_pio2+0x24>
 8013e16:	1532      	asrs	r2, r6, #20
 8013e18:	ee10 0a10 	vmov	r0, s0
 8013e1c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8013e20:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8013e24:	ec41 0b17 	vmov	d7, r0, r1
 8013e28:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013e2c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8013ed8 <__ieee754_rem_pio2+0x260>
 8013e30:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013e34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013e38:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013e3c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013e40:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013e44:	a902      	add	r1, sp, #8
 8013e46:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013e4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013e4e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013e52:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013e56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013e5a:	2603      	movs	r6, #3
 8013e5c:	4608      	mov	r0, r1
 8013e5e:	ed91 7b04 	vldr	d7, [r1, #16]
 8013e62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e6a:	4633      	mov	r3, r6
 8013e6c:	f1a1 0108 	sub.w	r1, r1, #8
 8013e70:	f106 36ff 	add.w	r6, r6, #4294967295
 8013e74:	d0f3      	beq.n	8013e5e <__ieee754_rem_pio2+0x1e6>
 8013e76:	491f      	ldr	r1, [pc, #124]	; (8013ef4 <__ieee754_rem_pio2+0x27c>)
 8013e78:	9101      	str	r1, [sp, #4]
 8013e7a:	2102      	movs	r1, #2
 8013e7c:	9100      	str	r1, [sp, #0]
 8013e7e:	4621      	mov	r1, r4
 8013e80:	f000 f8a6 	bl	8013fd0 <__kernel_rem_pio2>
 8013e84:	2d00      	cmp	r5, #0
 8013e86:	f6bf af27 	bge.w	8013cd8 <__ieee754_rem_pio2+0x60>
 8013e8a:	ed94 7b00 	vldr	d7, [r4]
 8013e8e:	eeb1 7b47 	vneg.f64	d7, d7
 8013e92:	ed84 7b00 	vstr	d7, [r4]
 8013e96:	ed94 7b02 	vldr	d7, [r4, #8]
 8013e9a:	e79b      	b.n	8013dd4 <__ieee754_rem_pio2+0x15c>
 8013e9c:	f3af 8000 	nop.w
 8013ea0:	54400000 	.word	0x54400000
 8013ea4:	3ff921fb 	.word	0x3ff921fb
 8013ea8:	1a626331 	.word	0x1a626331
 8013eac:	3dd0b461 	.word	0x3dd0b461
 8013eb0:	1a600000 	.word	0x1a600000
 8013eb4:	3dd0b461 	.word	0x3dd0b461
 8013eb8:	2e037073 	.word	0x2e037073
 8013ebc:	3ba3198a 	.word	0x3ba3198a
 8013ec0:	6dc9c883 	.word	0x6dc9c883
 8013ec4:	3fe45f30 	.word	0x3fe45f30
 8013ec8:	2e000000 	.word	0x2e000000
 8013ecc:	3ba3198a 	.word	0x3ba3198a
 8013ed0:	252049c1 	.word	0x252049c1
 8013ed4:	397b839a 	.word	0x397b839a
 8013ed8:	00000000 	.word	0x00000000
 8013edc:	41700000 	.word	0x41700000
 8013ee0:	3fe921fb 	.word	0x3fe921fb
 8013ee4:	4002d97b 	.word	0x4002d97b
 8013ee8:	413921fb 	.word	0x413921fb
 8013eec:	08014bc4 	.word	0x08014bc4
 8013ef0:	7fefffff 	.word	0x7fefffff
 8013ef4:	08014c44 	.word	0x08014c44

08013ef8 <__kernel_cos>:
 8013ef8:	ee10 1a90 	vmov	r1, s1
 8013efc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8013f00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013f04:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8013f08:	da05      	bge.n	8013f16 <__kernel_cos+0x1e>
 8013f0a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8013f0e:	ee17 3a90 	vmov	r3, s15
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d03d      	beq.n	8013f92 <__kernel_cos+0x9a>
 8013f16:	ee20 3b00 	vmul.f64	d3, d0, d0
 8013f1a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8013f98 <__kernel_cos+0xa0>
 8013f1e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8013fa0 <__kernel_cos+0xa8>
 8013f22:	eea3 6b07 	vfma.f64	d6, d3, d7
 8013f26:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013fa8 <__kernel_cos+0xb0>
 8013f2a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8013f2e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8013fb0 <__kernel_cos+0xb8>
 8013f32:	eea7 6b03 	vfma.f64	d6, d7, d3
 8013f36:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013fb8 <__kernel_cos+0xc0>
 8013f3a:	4b23      	ldr	r3, [pc, #140]	; (8013fc8 <__kernel_cos+0xd0>)
 8013f3c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8013f40:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8013fc0 <__kernel_cos+0xc8>
 8013f44:	4299      	cmp	r1, r3
 8013f46:	eea7 6b03 	vfma.f64	d6, d7, d3
 8013f4a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013f4e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8013f52:	ee23 7b07 	vmul.f64	d7, d3, d7
 8013f56:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8013f5a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013f5e:	dc04      	bgt.n	8013f6a <__kernel_cos+0x72>
 8013f60:	ee37 6b46 	vsub.f64	d6, d7, d6
 8013f64:	ee34 0b46 	vsub.f64	d0, d4, d6
 8013f68:	4770      	bx	lr
 8013f6a:	4b18      	ldr	r3, [pc, #96]	; (8013fcc <__kernel_cos+0xd4>)
 8013f6c:	4299      	cmp	r1, r3
 8013f6e:	dc0d      	bgt.n	8013f8c <__kernel_cos+0x94>
 8013f70:	2200      	movs	r2, #0
 8013f72:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8013f76:	ec43 2b15 	vmov	d5, r2, r3
 8013f7a:	ee34 0b45 	vsub.f64	d0, d4, d5
 8013f7e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013f82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013f86:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013f8a:	4770      	bx	lr
 8013f8c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8013f90:	e7f3      	b.n	8013f7a <__kernel_cos+0x82>
 8013f92:	eeb0 0b44 	vmov.f64	d0, d4
 8013f96:	4770      	bx	lr
 8013f98:	be8838d4 	.word	0xbe8838d4
 8013f9c:	bda8fae9 	.word	0xbda8fae9
 8013fa0:	bdb4b1c4 	.word	0xbdb4b1c4
 8013fa4:	3e21ee9e 	.word	0x3e21ee9e
 8013fa8:	809c52ad 	.word	0x809c52ad
 8013fac:	be927e4f 	.word	0xbe927e4f
 8013fb0:	19cb1590 	.word	0x19cb1590
 8013fb4:	3efa01a0 	.word	0x3efa01a0
 8013fb8:	16c15177 	.word	0x16c15177
 8013fbc:	bf56c16c 	.word	0xbf56c16c
 8013fc0:	5555554c 	.word	0x5555554c
 8013fc4:	3fa55555 	.word	0x3fa55555
 8013fc8:	3fd33332 	.word	0x3fd33332
 8013fcc:	3fe90000 	.word	0x3fe90000

08013fd0 <__kernel_rem_pio2>:
 8013fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd4:	ed2d 8b06 	vpush	{d8-d10}
 8013fd8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8013fdc:	469b      	mov	fp, r3
 8013fde:	460f      	mov	r7, r1
 8013fe0:	4bcf      	ldr	r3, [pc, #828]	; (8014320 <__kernel_rem_pio2+0x350>)
 8013fe2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8013fe4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8013fe8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8013fec:	9000      	str	r0, [sp, #0]
 8013fee:	f112 0f14 	cmn.w	r2, #20
 8013ff2:	bfa8      	it	ge
 8013ff4:	2318      	movge	r3, #24
 8013ff6:	f10b 31ff 	add.w	r1, fp, #4294967295
 8013ffa:	bfb8      	it	lt
 8013ffc:	2300      	movlt	r3, #0
 8013ffe:	f06f 0417 	mvn.w	r4, #23
 8014002:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8014308 <__kernel_rem_pio2+0x338>
 8014006:	bfa4      	itt	ge
 8014008:	f1a2 0a03 	subge.w	sl, r2, #3
 801400c:	fb9a f3f3 	sdivge	r3, sl, r3
 8014010:	fb03 4404 	mla	r4, r3, r4, r4
 8014014:	1a5d      	subs	r5, r3, r1
 8014016:	4414      	add	r4, r2
 8014018:	eb09 0601 	add.w	r6, r9, r1
 801401c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8014020:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8014024:	2200      	movs	r2, #0
 8014026:	42b2      	cmp	r2, r6
 8014028:	dd12      	ble.n	8014050 <__kernel_rem_pio2+0x80>
 801402a:	aa18      	add	r2, sp, #96	; 0x60
 801402c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8014030:	460e      	mov	r6, r1
 8014032:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8014036:	f1cb 0a01 	rsb	sl, fp, #1
 801403a:	eb0a 0006 	add.w	r0, sl, r6
 801403e:	4581      	cmp	r9, r0
 8014040:	db25      	blt.n	801408e <__kernel_rem_pio2+0xbe>
 8014042:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8014308 <__kernel_rem_pio2+0x338>
 8014046:	f8dd e000 	ldr.w	lr, [sp]
 801404a:	4615      	mov	r5, r2
 801404c:	2000      	movs	r0, #0
 801404e:	e015      	b.n	801407c <__kernel_rem_pio2+0xac>
 8014050:	42d5      	cmn	r5, r2
 8014052:	d409      	bmi.n	8014068 <__kernel_rem_pio2+0x98>
 8014054:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8014058:	ee07 0a90 	vmov	s15, r0
 801405c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014060:	eca8 7b02 	vstmia	r8!, {d7}
 8014064:	3201      	adds	r2, #1
 8014066:	e7de      	b.n	8014026 <__kernel_rem_pio2+0x56>
 8014068:	eeb0 7b46 	vmov.f64	d7, d6
 801406c:	e7f8      	b.n	8014060 <__kernel_rem_pio2+0x90>
 801406e:	ecbe 5b02 	vldmia	lr!, {d5}
 8014072:	ed95 6b00 	vldr	d6, [r5]
 8014076:	3001      	adds	r0, #1
 8014078:	eea5 7b06 	vfma.f64	d7, d5, d6
 801407c:	4288      	cmp	r0, r1
 801407e:	f1a5 0508 	sub.w	r5, r5, #8
 8014082:	ddf4      	ble.n	801406e <__kernel_rem_pio2+0x9e>
 8014084:	eca8 7b02 	vstmia	r8!, {d7}
 8014088:	3208      	adds	r2, #8
 801408a:	3601      	adds	r6, #1
 801408c:	e7d5      	b.n	801403a <__kernel_rem_pio2+0x6a>
 801408e:	aa04      	add	r2, sp, #16
 8014090:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8014310 <__kernel_rem_pio2+0x340>
 8014094:	ed9f aba0 	vldr	d10, [pc, #640]	; 8014318 <__kernel_rem_pio2+0x348>
 8014098:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801409c:	9201      	str	r2, [sp, #4]
 801409e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80140a2:	464e      	mov	r6, r9
 80140a4:	ab90      	add	r3, sp, #576	; 0x240
 80140a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80140aa:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80140ae:	ab04      	add	r3, sp, #16
 80140b0:	4618      	mov	r0, r3
 80140b2:	4632      	mov	r2, r6
 80140b4:	2a00      	cmp	r2, #0
 80140b6:	dc4e      	bgt.n	8014156 <__kernel_rem_pio2+0x186>
 80140b8:	4620      	mov	r0, r4
 80140ba:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80140be:	f000 fad3 	bl	8014668 <scalbn>
 80140c2:	eeb0 8b40 	vmov.f64	d8, d0
 80140c6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80140ca:	ee28 0b00 	vmul.f64	d0, d8, d0
 80140ce:	f000 fa57 	bl	8014580 <floor>
 80140d2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80140d6:	eea0 8b47 	vfms.f64	d8, d0, d7
 80140da:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80140de:	2c00      	cmp	r4, #0
 80140e0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80140e4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80140e8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80140ec:	ee17 8a90 	vmov	r8, s15
 80140f0:	dd46      	ble.n	8014180 <__kernel_rem_pio2+0x1b0>
 80140f2:	1e70      	subs	r0, r6, #1
 80140f4:	aa04      	add	r2, sp, #16
 80140f6:	f1c4 0c18 	rsb	ip, r4, #24
 80140fa:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80140fe:	fa45 f20c 	asr.w	r2, r5, ip
 8014102:	4490      	add	r8, r2
 8014104:	fa02 f20c 	lsl.w	r2, r2, ip
 8014108:	1aad      	subs	r5, r5, r2
 801410a:	aa04      	add	r2, sp, #16
 801410c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8014110:	f1c4 0217 	rsb	r2, r4, #23
 8014114:	4115      	asrs	r5, r2
 8014116:	2d00      	cmp	r5, #0
 8014118:	dd41      	ble.n	801419e <__kernel_rem_pio2+0x1ce>
 801411a:	f04f 0c00 	mov.w	ip, #0
 801411e:	f108 0801 	add.w	r8, r8, #1
 8014122:	4660      	mov	r0, ip
 8014124:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8014128:	4566      	cmp	r6, ip
 801412a:	dc69      	bgt.n	8014200 <__kernel_rem_pio2+0x230>
 801412c:	2c00      	cmp	r4, #0
 801412e:	dd03      	ble.n	8014138 <__kernel_rem_pio2+0x168>
 8014130:	2c01      	cmp	r4, #1
 8014132:	d076      	beq.n	8014222 <__kernel_rem_pio2+0x252>
 8014134:	2c02      	cmp	r4, #2
 8014136:	d07f      	beq.n	8014238 <__kernel_rem_pio2+0x268>
 8014138:	2d02      	cmp	r5, #2
 801413a:	d130      	bne.n	801419e <__kernel_rem_pio2+0x1ce>
 801413c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014140:	ee30 8b48 	vsub.f64	d8, d0, d8
 8014144:	b358      	cbz	r0, 801419e <__kernel_rem_pio2+0x1ce>
 8014146:	4620      	mov	r0, r4
 8014148:	9102      	str	r1, [sp, #8]
 801414a:	f000 fa8d 	bl	8014668 <scalbn>
 801414e:	9902      	ldr	r1, [sp, #8]
 8014150:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014154:	e023      	b.n	801419e <__kernel_rem_pio2+0x1ce>
 8014156:	ee20 7b09 	vmul.f64	d7, d0, d9
 801415a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801415e:	3a01      	subs	r2, #1
 8014160:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8014164:	ad68      	add	r5, sp, #416	; 0x1a0
 8014166:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801416a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801416e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8014172:	eca0 0a01 	vstmia	r0!, {s0}
 8014176:	ed95 0b00 	vldr	d0, [r5]
 801417a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801417e:	e799      	b.n	80140b4 <__kernel_rem_pio2+0xe4>
 8014180:	d105      	bne.n	801418e <__kernel_rem_pio2+0x1be>
 8014182:	1e72      	subs	r2, r6, #1
 8014184:	a804      	add	r0, sp, #16
 8014186:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 801418a:	15ed      	asrs	r5, r5, #23
 801418c:	e7c3      	b.n	8014116 <__kernel_rem_pio2+0x146>
 801418e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014192:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801419a:	da2f      	bge.n	80141fc <__kernel_rem_pio2+0x22c>
 801419c:	2500      	movs	r5, #0
 801419e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80141a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141a6:	f040 8087 	bne.w	80142b8 <__kernel_rem_pio2+0x2e8>
 80141aa:	1e73      	subs	r3, r6, #1
 80141ac:	4618      	mov	r0, r3
 80141ae:	f04f 0c00 	mov.w	ip, #0
 80141b2:	4548      	cmp	r0, r9
 80141b4:	da47      	bge.n	8014246 <__kernel_rem_pio2+0x276>
 80141b6:	f1bc 0f00 	cmp.w	ip, #0
 80141ba:	d070      	beq.n	801429e <__kernel_rem_pio2+0x2ce>
 80141bc:	aa04      	add	r2, sp, #16
 80141be:	3c18      	subs	r4, #24
 80141c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80141c4:	2a00      	cmp	r2, #0
 80141c6:	d075      	beq.n	80142b4 <__kernel_rem_pio2+0x2e4>
 80141c8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80141cc:	4620      	mov	r0, r4
 80141ce:	9300      	str	r3, [sp, #0]
 80141d0:	f000 fa4a 	bl	8014668 <scalbn>
 80141d4:	9b00      	ldr	r3, [sp, #0]
 80141d6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8014310 <__kernel_rem_pio2+0x340>
 80141da:	461a      	mov	r2, r3
 80141dc:	2a00      	cmp	r2, #0
 80141de:	f280 80ac 	bge.w	801433a <__kernel_rem_pio2+0x36a>
 80141e2:	4619      	mov	r1, r3
 80141e4:	2000      	movs	r0, #0
 80141e6:	2900      	cmp	r1, #0
 80141e8:	f2c0 80cd 	blt.w	8014386 <__kernel_rem_pio2+0x3b6>
 80141ec:	aa68      	add	r2, sp, #416	; 0x1a0
 80141ee:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80141f2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8014308 <__kernel_rem_pio2+0x338>
 80141f6:	4e4b      	ldr	r6, [pc, #300]	; (8014324 <__kernel_rem_pio2+0x354>)
 80141f8:	2200      	movs	r2, #0
 80141fa:	e0b8      	b.n	801436e <__kernel_rem_pio2+0x39e>
 80141fc:	2502      	movs	r5, #2
 80141fe:	e78c      	b.n	801411a <__kernel_rem_pio2+0x14a>
 8014200:	681a      	ldr	r2, [r3, #0]
 8014202:	b948      	cbnz	r0, 8014218 <__kernel_rem_pio2+0x248>
 8014204:	b11a      	cbz	r2, 801420e <__kernel_rem_pio2+0x23e>
 8014206:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801420a:	601a      	str	r2, [r3, #0]
 801420c:	2201      	movs	r2, #1
 801420e:	f10c 0c01 	add.w	ip, ip, #1
 8014212:	3304      	adds	r3, #4
 8014214:	4610      	mov	r0, r2
 8014216:	e787      	b.n	8014128 <__kernel_rem_pio2+0x158>
 8014218:	ebae 0202 	sub.w	r2, lr, r2
 801421c:	601a      	str	r2, [r3, #0]
 801421e:	4602      	mov	r2, r0
 8014220:	e7f5      	b.n	801420e <__kernel_rem_pio2+0x23e>
 8014222:	1e72      	subs	r2, r6, #1
 8014224:	ab04      	add	r3, sp, #16
 8014226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801422a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801422e:	f10d 0c10 	add.w	ip, sp, #16
 8014232:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8014236:	e77f      	b.n	8014138 <__kernel_rem_pio2+0x168>
 8014238:	1e72      	subs	r2, r6, #1
 801423a:	ab04      	add	r3, sp, #16
 801423c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014240:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014244:	e7f3      	b.n	801422e <__kernel_rem_pio2+0x25e>
 8014246:	aa04      	add	r2, sp, #16
 8014248:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801424c:	3801      	subs	r0, #1
 801424e:	ea4c 0c02 	orr.w	ip, ip, r2
 8014252:	e7ae      	b.n	80141b2 <__kernel_rem_pio2+0x1e2>
 8014254:	3001      	adds	r0, #1
 8014256:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801425a:	2a00      	cmp	r2, #0
 801425c:	d0fa      	beq.n	8014254 <__kernel_rem_pio2+0x284>
 801425e:	eb06 020b 	add.w	r2, r6, fp
 8014262:	ad18      	add	r5, sp, #96	; 0x60
 8014264:	1c73      	adds	r3, r6, #1
 8014266:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801426a:	4406      	add	r6, r0
 801426c:	429e      	cmp	r6, r3
 801426e:	f6ff af19 	blt.w	80140a4 <__kernel_rem_pio2+0xd4>
 8014272:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8014276:	9d00      	ldr	r5, [sp, #0]
 8014278:	ee07 0a90 	vmov	s15, r0
 801427c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014280:	2000      	movs	r0, #0
 8014282:	eca2 7b02 	vstmia	r2!, {d7}
 8014286:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014308 <__kernel_rem_pio2+0x338>
 801428a:	4694      	mov	ip, r2
 801428c:	4288      	cmp	r0, r1
 801428e:	dd09      	ble.n	80142a4 <__kernel_rem_pio2+0x2d4>
 8014290:	a868      	add	r0, sp, #416	; 0x1a0
 8014292:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8014296:	ed80 7b00 	vstr	d7, [r0]
 801429a:	3301      	adds	r3, #1
 801429c:	e7e6      	b.n	801426c <__kernel_rem_pio2+0x29c>
 801429e:	9b01      	ldr	r3, [sp, #4]
 80142a0:	2001      	movs	r0, #1
 80142a2:	e7d8      	b.n	8014256 <__kernel_rem_pio2+0x286>
 80142a4:	ecb5 5b02 	vldmia	r5!, {d5}
 80142a8:	ed3c 6b02 	vldmdb	ip!, {d6}
 80142ac:	3001      	adds	r0, #1
 80142ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 80142b2:	e7eb      	b.n	801428c <__kernel_rem_pio2+0x2bc>
 80142b4:	3b01      	subs	r3, #1
 80142b6:	e781      	b.n	80141bc <__kernel_rem_pio2+0x1ec>
 80142b8:	4260      	negs	r0, r4
 80142ba:	eeb0 0b48 	vmov.f64	d0, d8
 80142be:	f000 f9d3 	bl	8014668 <scalbn>
 80142c2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8014318 <__kernel_rem_pio2+0x348>
 80142c6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80142ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ce:	db2b      	blt.n	8014328 <__kernel_rem_pio2+0x358>
 80142d0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8014310 <__kernel_rem_pio2+0x340>
 80142d4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80142d8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80142dc:	aa04      	add	r2, sp, #16
 80142de:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80142e2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80142e6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80142ea:	a904      	add	r1, sp, #16
 80142ec:	ee10 3a10 	vmov	r3, s0
 80142f0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80142f4:	ee17 2a10 	vmov	r2, s14
 80142f8:	1c73      	adds	r3, r6, #1
 80142fa:	3418      	adds	r4, #24
 80142fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014300:	e762      	b.n	80141c8 <__kernel_rem_pio2+0x1f8>
 8014302:	bf00      	nop
 8014304:	f3af 8000 	nop.w
	...
 8014314:	3e700000 	.word	0x3e700000
 8014318:	00000000 	.word	0x00000000
 801431c:	41700000 	.word	0x41700000
 8014320:	08014d90 	.word	0x08014d90
 8014324:	08014d50 	.word	0x08014d50
 8014328:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801432c:	aa04      	add	r2, sp, #16
 801432e:	ee10 3a10 	vmov	r3, s0
 8014332:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014336:	4633      	mov	r3, r6
 8014338:	e746      	b.n	80141c8 <__kernel_rem_pio2+0x1f8>
 801433a:	a804      	add	r0, sp, #16
 801433c:	a968      	add	r1, sp, #416	; 0x1a0
 801433e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8014342:	9000      	str	r0, [sp, #0]
 8014344:	ee07 0a90 	vmov	s15, r0
 8014348:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801434c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014350:	3a01      	subs	r2, #1
 8014352:	ee27 7b00 	vmul.f64	d7, d7, d0
 8014356:	ee20 0b06 	vmul.f64	d0, d0, d6
 801435a:	ed81 7b00 	vstr	d7, [r1]
 801435e:	e73d      	b.n	80141dc <__kernel_rem_pio2+0x20c>
 8014360:	ecb6 5b02 	vldmia	r6!, {d5}
 8014364:	ecb4 6b02 	vldmia	r4!, {d6}
 8014368:	3201      	adds	r2, #1
 801436a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801436e:	454a      	cmp	r2, r9
 8014370:	dc01      	bgt.n	8014376 <__kernel_rem_pio2+0x3a6>
 8014372:	4290      	cmp	r0, r2
 8014374:	daf4      	bge.n	8014360 <__kernel_rem_pio2+0x390>
 8014376:	aa40      	add	r2, sp, #256	; 0x100
 8014378:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801437c:	ed82 7b00 	vstr	d7, [r2]
 8014380:	3901      	subs	r1, #1
 8014382:	3001      	adds	r0, #1
 8014384:	e72f      	b.n	80141e6 <__kernel_rem_pio2+0x216>
 8014386:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8014388:	2a02      	cmp	r2, #2
 801438a:	dc0a      	bgt.n	80143a2 <__kernel_rem_pio2+0x3d2>
 801438c:	2a00      	cmp	r2, #0
 801438e:	dc5a      	bgt.n	8014446 <__kernel_rem_pio2+0x476>
 8014390:	d039      	beq.n	8014406 <__kernel_rem_pio2+0x436>
 8014392:	f008 0007 	and.w	r0, r8, #7
 8014396:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 801439a:	ecbd 8b06 	vpop	{d8-d10}
 801439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143a2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80143a4:	2a03      	cmp	r2, #3
 80143a6:	d1f4      	bne.n	8014392 <__kernel_rem_pio2+0x3c2>
 80143a8:	aa40      	add	r2, sp, #256	; 0x100
 80143aa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80143ae:	4611      	mov	r1, r2
 80143b0:	4618      	mov	r0, r3
 80143b2:	2800      	cmp	r0, #0
 80143b4:	f1a1 0108 	sub.w	r1, r1, #8
 80143b8:	dc52      	bgt.n	8014460 <__kernel_rem_pio2+0x490>
 80143ba:	4619      	mov	r1, r3
 80143bc:	2901      	cmp	r1, #1
 80143be:	f1a2 0208 	sub.w	r2, r2, #8
 80143c2:	dc5d      	bgt.n	8014480 <__kernel_rem_pio2+0x4b0>
 80143c4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80144c8 <__kernel_rem_pio2+0x4f8>
 80143c8:	2b01      	cmp	r3, #1
 80143ca:	dc69      	bgt.n	80144a0 <__kernel_rem_pio2+0x4d0>
 80143cc:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80143d0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80143d4:	2d00      	cmp	r5, #0
 80143d6:	d16c      	bne.n	80144b2 <__kernel_rem_pio2+0x4e2>
 80143d8:	ed87 5b00 	vstr	d5, [r7]
 80143dc:	ed87 6b02 	vstr	d6, [r7, #8]
 80143e0:	ed87 7b04 	vstr	d7, [r7, #16]
 80143e4:	e7d5      	b.n	8014392 <__kernel_rem_pio2+0x3c2>
 80143e6:	aa40      	add	r2, sp, #256	; 0x100
 80143e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80143ec:	ed92 6b00 	vldr	d6, [r2]
 80143f0:	3b01      	subs	r3, #1
 80143f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	daf5      	bge.n	80143e6 <__kernel_rem_pio2+0x416>
 80143fa:	b10d      	cbz	r5, 8014400 <__kernel_rem_pio2+0x430>
 80143fc:	eeb1 7b47 	vneg.f64	d7, d7
 8014400:	ed87 7b00 	vstr	d7, [r7]
 8014404:	e7c5      	b.n	8014392 <__kernel_rem_pio2+0x3c2>
 8014406:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80144c8 <__kernel_rem_pio2+0x4f8>
 801440a:	e7f4      	b.n	80143f6 <__kernel_rem_pio2+0x426>
 801440c:	a940      	add	r1, sp, #256	; 0x100
 801440e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014412:	ed91 7b00 	vldr	d7, [r1]
 8014416:	3a01      	subs	r2, #1
 8014418:	ee36 6b07 	vadd.f64	d6, d6, d7
 801441c:	2a00      	cmp	r2, #0
 801441e:	daf5      	bge.n	801440c <__kernel_rem_pio2+0x43c>
 8014420:	b1ad      	cbz	r5, 801444e <__kernel_rem_pio2+0x47e>
 8014422:	eeb1 7b46 	vneg.f64	d7, d6
 8014426:	ed87 7b00 	vstr	d7, [r7]
 801442a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 801442e:	a942      	add	r1, sp, #264	; 0x108
 8014430:	2201      	movs	r2, #1
 8014432:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014436:	4293      	cmp	r3, r2
 8014438:	da0c      	bge.n	8014454 <__kernel_rem_pio2+0x484>
 801443a:	b10d      	cbz	r5, 8014440 <__kernel_rem_pio2+0x470>
 801443c:	eeb1 7b47 	vneg.f64	d7, d7
 8014440:	ed87 7b02 	vstr	d7, [r7, #8]
 8014444:	e7a5      	b.n	8014392 <__kernel_rem_pio2+0x3c2>
 8014446:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80144c8 <__kernel_rem_pio2+0x4f8>
 801444a:	461a      	mov	r2, r3
 801444c:	e7e6      	b.n	801441c <__kernel_rem_pio2+0x44c>
 801444e:	eeb0 7b46 	vmov.f64	d7, d6
 8014452:	e7e8      	b.n	8014426 <__kernel_rem_pio2+0x456>
 8014454:	ecb1 6b02 	vldmia	r1!, {d6}
 8014458:	3201      	adds	r2, #1
 801445a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801445e:	e7ea      	b.n	8014436 <__kernel_rem_pio2+0x466>
 8014460:	ed91 7b00 	vldr	d7, [r1]
 8014464:	ed91 5b02 	vldr	d5, [r1, #8]
 8014468:	3801      	subs	r0, #1
 801446a:	ee37 6b05 	vadd.f64	d6, d7, d5
 801446e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014472:	ed81 6b00 	vstr	d6, [r1]
 8014476:	ee37 7b05 	vadd.f64	d7, d7, d5
 801447a:	ed81 7b02 	vstr	d7, [r1, #8]
 801447e:	e798      	b.n	80143b2 <__kernel_rem_pio2+0x3e2>
 8014480:	ed92 7b00 	vldr	d7, [r2]
 8014484:	ed92 5b02 	vldr	d5, [r2, #8]
 8014488:	3901      	subs	r1, #1
 801448a:	ee37 6b05 	vadd.f64	d6, d7, d5
 801448e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014492:	ed82 6b00 	vstr	d6, [r2]
 8014496:	ee37 7b05 	vadd.f64	d7, d7, d5
 801449a:	ed82 7b02 	vstr	d7, [r2, #8]
 801449e:	e78d      	b.n	80143bc <__kernel_rem_pio2+0x3ec>
 80144a0:	aa40      	add	r2, sp, #256	; 0x100
 80144a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80144a6:	ed92 6b00 	vldr	d6, [r2]
 80144aa:	3b01      	subs	r3, #1
 80144ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80144b0:	e78a      	b.n	80143c8 <__kernel_rem_pio2+0x3f8>
 80144b2:	eeb1 5b45 	vneg.f64	d5, d5
 80144b6:	eeb1 6b46 	vneg.f64	d6, d6
 80144ba:	ed87 5b00 	vstr	d5, [r7]
 80144be:	eeb1 7b47 	vneg.f64	d7, d7
 80144c2:	ed87 6b02 	vstr	d6, [r7, #8]
 80144c6:	e78b      	b.n	80143e0 <__kernel_rem_pio2+0x410>
	...

080144d0 <__kernel_sin>:
 80144d0:	ee10 3a90 	vmov	r3, s1
 80144d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80144d8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80144dc:	da04      	bge.n	80144e8 <__kernel_sin+0x18>
 80144de:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80144e2:	ee17 3a90 	vmov	r3, s15
 80144e6:	b35b      	cbz	r3, 8014540 <__kernel_sin+0x70>
 80144e8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80144ec:	ee20 5b06 	vmul.f64	d5, d0, d6
 80144f0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8014548 <__kernel_sin+0x78>
 80144f4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014550 <__kernel_sin+0x80>
 80144f8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80144fc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014558 <__kernel_sin+0x88>
 8014500:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014504:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014560 <__kernel_sin+0x90>
 8014508:	eea7 4b06 	vfma.f64	d4, d7, d6
 801450c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014568 <__kernel_sin+0x98>
 8014510:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014514:	b930      	cbnz	r0, 8014524 <__kernel_sin+0x54>
 8014516:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014570 <__kernel_sin+0xa0>
 801451a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801451e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8014522:	4770      	bx	lr
 8014524:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8014528:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801452c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8014530:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8014534:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8014578 <__kernel_sin+0xa8>
 8014538:	eea5 1b07 	vfma.f64	d1, d5, d7
 801453c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014540:	4770      	bx	lr
 8014542:	bf00      	nop
 8014544:	f3af 8000 	nop.w
 8014548:	5acfd57c 	.word	0x5acfd57c
 801454c:	3de5d93a 	.word	0x3de5d93a
 8014550:	8a2b9ceb 	.word	0x8a2b9ceb
 8014554:	be5ae5e6 	.word	0xbe5ae5e6
 8014558:	57b1fe7d 	.word	0x57b1fe7d
 801455c:	3ec71de3 	.word	0x3ec71de3
 8014560:	19c161d5 	.word	0x19c161d5
 8014564:	bf2a01a0 	.word	0xbf2a01a0
 8014568:	1110f8a6 	.word	0x1110f8a6
 801456c:	3f811111 	.word	0x3f811111
 8014570:	55555549 	.word	0x55555549
 8014574:	bfc55555 	.word	0xbfc55555
 8014578:	55555549 	.word	0x55555549
 801457c:	3fc55555 	.word	0x3fc55555

08014580 <floor>:
 8014580:	ee10 1a90 	vmov	r1, s1
 8014584:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014588:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801458c:	2b13      	cmp	r3, #19
 801458e:	b530      	push	{r4, r5, lr}
 8014590:	ee10 0a10 	vmov	r0, s0
 8014594:	ee10 5a10 	vmov	r5, s0
 8014598:	dc31      	bgt.n	80145fe <floor+0x7e>
 801459a:	2b00      	cmp	r3, #0
 801459c:	da15      	bge.n	80145ca <floor+0x4a>
 801459e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014658 <floor+0xd8>
 80145a2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80145a6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80145aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ae:	dd07      	ble.n	80145c0 <floor+0x40>
 80145b0:	2900      	cmp	r1, #0
 80145b2:	da4e      	bge.n	8014652 <floor+0xd2>
 80145b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80145b8:	4318      	orrs	r0, r3
 80145ba:	d001      	beq.n	80145c0 <floor+0x40>
 80145bc:	4928      	ldr	r1, [pc, #160]	; (8014660 <floor+0xe0>)
 80145be:	2000      	movs	r0, #0
 80145c0:	460b      	mov	r3, r1
 80145c2:	4602      	mov	r2, r0
 80145c4:	ec43 2b10 	vmov	d0, r2, r3
 80145c8:	e020      	b.n	801460c <floor+0x8c>
 80145ca:	4a26      	ldr	r2, [pc, #152]	; (8014664 <floor+0xe4>)
 80145cc:	411a      	asrs	r2, r3
 80145ce:	ea01 0402 	and.w	r4, r1, r2
 80145d2:	4304      	orrs	r4, r0
 80145d4:	d01a      	beq.n	801460c <floor+0x8c>
 80145d6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014658 <floor+0xd8>
 80145da:	ee30 0b07 	vadd.f64	d0, d0, d7
 80145de:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80145e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145e6:	ddeb      	ble.n	80145c0 <floor+0x40>
 80145e8:	2900      	cmp	r1, #0
 80145ea:	bfbe      	ittt	lt
 80145ec:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80145f0:	fa40 f303 	asrlt.w	r3, r0, r3
 80145f4:	18c9      	addlt	r1, r1, r3
 80145f6:	ea21 0102 	bic.w	r1, r1, r2
 80145fa:	2000      	movs	r0, #0
 80145fc:	e7e0      	b.n	80145c0 <floor+0x40>
 80145fe:	2b33      	cmp	r3, #51	; 0x33
 8014600:	dd05      	ble.n	801460e <floor+0x8e>
 8014602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014606:	d101      	bne.n	801460c <floor+0x8c>
 8014608:	ee30 0b00 	vadd.f64	d0, d0, d0
 801460c:	bd30      	pop	{r4, r5, pc}
 801460e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8014612:	f04f 32ff 	mov.w	r2, #4294967295
 8014616:	40e2      	lsrs	r2, r4
 8014618:	4202      	tst	r2, r0
 801461a:	d0f7      	beq.n	801460c <floor+0x8c>
 801461c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014658 <floor+0xd8>
 8014620:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014624:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801462c:	ddc8      	ble.n	80145c0 <floor+0x40>
 801462e:	2900      	cmp	r1, #0
 8014630:	da02      	bge.n	8014638 <floor+0xb8>
 8014632:	2b14      	cmp	r3, #20
 8014634:	d103      	bne.n	801463e <floor+0xbe>
 8014636:	3101      	adds	r1, #1
 8014638:	ea20 0002 	bic.w	r0, r0, r2
 801463c:	e7c0      	b.n	80145c0 <floor+0x40>
 801463e:	2401      	movs	r4, #1
 8014640:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014644:	fa04 f303 	lsl.w	r3, r4, r3
 8014648:	4418      	add	r0, r3
 801464a:	42a8      	cmp	r0, r5
 801464c:	bf38      	it	cc
 801464e:	1909      	addcc	r1, r1, r4
 8014650:	e7f2      	b.n	8014638 <floor+0xb8>
 8014652:	2000      	movs	r0, #0
 8014654:	4601      	mov	r1, r0
 8014656:	e7b3      	b.n	80145c0 <floor+0x40>
 8014658:	8800759c 	.word	0x8800759c
 801465c:	7e37e43c 	.word	0x7e37e43c
 8014660:	bff00000 	.word	0xbff00000
 8014664:	000fffff 	.word	0x000fffff

08014668 <scalbn>:
 8014668:	b082      	sub	sp, #8
 801466a:	ed8d 0b00 	vstr	d0, [sp]
 801466e:	9b01      	ldr	r3, [sp, #4]
 8014670:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014674:	b9a2      	cbnz	r2, 80146a0 <scalbn+0x38>
 8014676:	9a00      	ldr	r2, [sp, #0]
 8014678:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801467c:	4313      	orrs	r3, r2
 801467e:	d03a      	beq.n	80146f6 <scalbn+0x8e>
 8014680:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8014758 <scalbn+0xf0>
 8014684:	4b40      	ldr	r3, [pc, #256]	; (8014788 <scalbn+0x120>)
 8014686:	ee20 7b07 	vmul.f64	d7, d0, d7
 801468a:	4298      	cmp	r0, r3
 801468c:	ed8d 7b00 	vstr	d7, [sp]
 8014690:	da11      	bge.n	80146b6 <scalbn+0x4e>
 8014692:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8014760 <scalbn+0xf8>
 8014696:	ed9d 6b00 	vldr	d6, [sp]
 801469a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801469e:	e007      	b.n	80146b0 <scalbn+0x48>
 80146a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80146a4:	428a      	cmp	r2, r1
 80146a6:	d10a      	bne.n	80146be <scalbn+0x56>
 80146a8:	ed9d 7b00 	vldr	d7, [sp]
 80146ac:	ee37 7b07 	vadd.f64	d7, d7, d7
 80146b0:	ed8d 7b00 	vstr	d7, [sp]
 80146b4:	e01f      	b.n	80146f6 <scalbn+0x8e>
 80146b6:	9b01      	ldr	r3, [sp, #4]
 80146b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80146bc:	3a36      	subs	r2, #54	; 0x36
 80146be:	4402      	add	r2, r0
 80146c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80146c4:	428a      	cmp	r2, r1
 80146c6:	dd0a      	ble.n	80146de <scalbn+0x76>
 80146c8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8014768 <scalbn+0x100>
 80146cc:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8014770 <scalbn+0x108>
 80146d0:	eeb0 6b47 	vmov.f64	d6, d7
 80146d4:	9b01      	ldr	r3, [sp, #4]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80146dc:	e7dd      	b.n	801469a <scalbn+0x32>
 80146de:	2a00      	cmp	r2, #0
 80146e0:	dd0d      	ble.n	80146fe <scalbn+0x96>
 80146e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80146ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80146ee:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80146f2:	e9cd 0100 	strd	r0, r1, [sp]
 80146f6:	ed9d 0b00 	vldr	d0, [sp]
 80146fa:	b002      	add	sp, #8
 80146fc:	4770      	bx	lr
 80146fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014702:	da18      	bge.n	8014736 <scalbn+0xce>
 8014704:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014708:	4298      	cmp	r0, r3
 801470a:	9b01      	ldr	r3, [sp, #4]
 801470c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014710:	dd09      	ble.n	8014726 <scalbn+0xbe>
 8014712:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8014768 <scalbn+0x100>
 8014716:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8014770 <scalbn+0x108>
 801471a:	eeb0 6b47 	vmov.f64	d6, d7
 801471e:	2b00      	cmp	r3, #0
 8014720:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8014724:	e7b9      	b.n	801469a <scalbn+0x32>
 8014726:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014760 <scalbn+0xf8>
 801472a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8014778 <scalbn+0x110>
 801472e:	eeb0 6b47 	vmov.f64	d6, d7
 8014732:	2b00      	cmp	r3, #0
 8014734:	e7f4      	b.n	8014720 <scalbn+0xb8>
 8014736:	e9dd 0100 	ldrd	r0, r1, [sp]
 801473a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801473e:	3236      	adds	r2, #54	; 0x36
 8014740:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014744:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014748:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8014780 <scalbn+0x118>
 801474c:	ec41 0b17 	vmov	d7, r0, r1
 8014750:	e7a3      	b.n	801469a <scalbn+0x32>
 8014752:	bf00      	nop
 8014754:	f3af 8000 	nop.w
 8014758:	00000000 	.word	0x00000000
 801475c:	43500000 	.word	0x43500000
 8014760:	c2f8f359 	.word	0xc2f8f359
 8014764:	01a56e1f 	.word	0x01a56e1f
 8014768:	8800759c 	.word	0x8800759c
 801476c:	7e37e43c 	.word	0x7e37e43c
 8014770:	8800759c 	.word	0x8800759c
 8014774:	fe37e43c 	.word	0xfe37e43c
 8014778:	c2f8f359 	.word	0xc2f8f359
 801477c:	81a56e1f 	.word	0x81a56e1f
 8014780:	00000000 	.word	0x00000000
 8014784:	3c900000 	.word	0x3c900000
 8014788:	ffff3cb0 	.word	0xffff3cb0

0801478c <_init>:
 801478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801478e:	bf00      	nop
 8014790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014792:	bc08      	pop	{r3}
 8014794:	469e      	mov	lr, r3
 8014796:	4770      	bx	lr

08014798 <_fini>:
 8014798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479a:	bf00      	nop
 801479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801479e:	bc08      	pop	{r3}
 80147a0:	469e      	mov	lr, r3
 80147a2:	4770      	bx	lr
