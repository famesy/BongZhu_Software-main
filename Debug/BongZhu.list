
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014acc  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08014da0  08014da0  00024da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015398  08015398  00025398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080153a0  080153a0  000253a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080153a4  080153a4  000253a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  24000000  080153a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c7c  240001f4  0801559c  000301f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e70  0801559c  00030e70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039072  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005a2d  00000000  00000000  00069294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ab0  00000000  00000000  0006ecc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018b8  00000000  00000000  00070778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039d29  00000000  00000000  00072030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000283e7  00000000  00000000  000abd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016df60  00000000  00000000  000d4140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002420a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007fa0  00000000  00000000  002420f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001f4 	.word	0x240001f4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014d84 	.word	0x08014d84

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f8 	.word	0x240001f8
 800030c:	08014d84 	.word	0x08014d84

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include "AMT21.h"

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->prev_position = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	821a      	strh	r2, [r3, #16]
	dev->k0 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	749a      	strb	r2, [r3, #18]
	dev->k1 = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	74da      	strb	r2, [r3, #19]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f00a fe05 	bl	800b32c <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
			//1, 100);
	HAL_UART_Transmit(dev->uartHandle, &(dev->address),
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 010a 	add.w	r1, r3, #10
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	f00f f992 	bl	800fa58 <HAL_UART_Transmit>
				1, 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6858      	ldr	r0, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	891b      	ldrh	r3, [r3, #8]
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	f00a fdf4 	bl	800b32c <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 010c 	add.w	r1, r3, #12
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2202      	movs	r2, #2
 8000752:	f00f fa17 	bl	800fb84 <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x4000) == 0x4000;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	749a      	strb	r2, [r3, #18]
	dev->k1 = (dev->uart_buf & 0x8000) == 0x8000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	0bdb      	lsrs	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	74da      	strb	r2, [r3, #19]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AMT21_set_zero>:

void AMT21_set_zero(AMT21 *dev) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	 AMT21_set_zero does set encoder to zero position.

	 :param dev = AMT21 struct
	 :return: None
	 */
	uint8_t set_zero_command[2] = {(dev->address + 0x02), AMT21_SET_ZERO};
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7a9b      	ldrb	r3, [r3, #10]
 8000794:	3302      	adds	r3, #2
 8000796:	b2db      	uxtb	r3, r3
 8000798:	733b      	strb	r3, [r7, #12]
 800079a:	2375      	movs	r3, #117	; 0x75
 800079c:	737b      	strb	r3, [r7, #13]
 	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6858      	ldr	r0, [r3, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	891b      	ldrh	r3, [r3, #8]
 80007a6:	2201      	movs	r2, #1
 80007a8:	4619      	mov	r1, r3
 80007aa:	f00a fdbf 	bl	800b32c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f107 010c 	add.w	r1, r7, #12
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2202      	movs	r2, #2
 80007ba:	f00f f94d 	bl	800fa58 <HAL_UART_Transmit>
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6858      	ldr	r0, [r3, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	891b      	ldrh	r3, [r3, #8]
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	f00a fdaf 	bl	800b32c <HAL_GPIO_WritePin>
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <AMT21_check_value>:
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = dev->uart_buf & 0x3FFF;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80007e6:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = dev->uart_buf & 0x0001;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	899b      	ldrh	r3, [r3, #12]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 1) & 0x0001;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	899b      	ldrh	r3, [r3, #12]
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000804:	2300      	movs	r3, #0
 8000806:	737b      	strb	r3, [r7, #13]
 8000808:	e020      	b.n	800084c <AMT21_check_value+0x76>
		dev->uart_buf = dev->uart_buf >> 2;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	899b      	ldrh	r3, [r3, #12]
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	b29a      	uxth	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	899b      	ldrh	r3, [r3, #12]
 800081a:	b25b      	sxtb	r3, r3
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	b25a      	sxtb	r2, r3
 8000822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000826:	4053      	eors	r3, r2
 8000828:	b25b      	sxtb	r3, r3
 800082a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	899b      	ldrh	r3, [r3, #12]
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	b29b      	uxth	r3, r3
 8000834:	b25b      	sxtb	r3, r3
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	b25a      	sxtb	r2, r3
 800083c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000840:	4053      	eors	r3, r2
 8000842:	b25b      	sxtb	r3, r3
 8000844:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000846:	7b7b      	ldrb	r3, [r7, #13]
 8000848:	3301      	adds	r3, #1
 800084a:	737b      	strb	r3, [r7, #13]
 800084c:	7b7b      	ldrb	r3, [r7, #13]
 800084e:	2b05      	cmp	r3, #5
 8000850:	d9db      	bls.n	800080a <AMT21_check_value+0x34>
	}
	k0_check = !k0_check;
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf0c      	ite	eq
 8000866:	2301      	moveq	r3, #1
 8000868:	2300      	movne	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73bb      	strb	r3, [r7, #14]
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7c9b      	ldrb	r3, [r3, #18]
 8000872:	7bfa      	ldrb	r2, [r7, #15]
 8000874:	429a      	cmp	r2, r3
 8000876:	d109      	bne.n	800088c <AMT21_check_value+0xb6>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7cdb      	ldrb	r3, [r3, #19]
 800087c:	7bba      	ldrb	r2, [r7, #14]
 800087e:	429a      	cmp	r2, r3
 8000880:	d104      	bne.n	800088c <AMT21_check_value+0xb6>
		dev->position = position_temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	897a      	ldrh	r2, [r7, #10]
 8000886:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000888:	2300      	movs	r3, #0
 800088a:	e000      	b.n	800088e <AMT21_check_value+0xb8>
	} else {
		return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
	}
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <AMT21_unwrap>:

int32_t AMT21_unwrap(int32_t pulse, int32_t prev_pulse) {
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	int32_t dPulse = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
	if (pulse - prev_pulse > 8191) {
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b4:	db06      	blt.n	80008c4 <AMT21_unwrap+0x28>
		dPulse = -(16383 - (pulse-prev_pulse));
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	1ad2      	subs	r2, r2, r3
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <AMT21_unwrap+0x5c>)
 80008be:	4413      	add	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e011      	b.n	80008e8 <AMT21_unwrap+0x4c>
	} else if ( pulse -  prev_pulse < -8191) {
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 80008ce:	dc07      	bgt.n	80008e0 <AMT21_unwrap+0x44>
		dPulse = 16383 - (prev_pulse - pulse);
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	1ad2      	subs	r2, r2, r3
 80008d6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008da:	1a9b      	subs	r3, r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e003      	b.n	80008e8 <AMT21_unwrap+0x4c>
	} else {
		dPulse =  pulse -  prev_pulse;
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	60fb      	str	r3, [r7, #12]
	}
	return dPulse;
 80008e8:	68fb      	ldr	r3, [r7, #12]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	ffffc001 	.word	0xffffc001

080008fc <KalmanFilter_initialise>:
 *  Created on: Jan 28, 2022
 *      Author: fame
 */
#include "KalmanFilter.h"

void KalmanFilter_initialise(KalmanFilter *dev, float x1,float x2,float p11,float p12,float p21,float p22, float R, float Q){
 80008fc:	b480      	push	{r7}
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	6278      	str	r0, [r7, #36]	; 0x24
 8000904:	ed87 0a08 	vstr	s0, [r7, #32]
 8000908:	edc7 0a07 	vstr	s1, [r7, #28]
 800090c:	ed87 1a06 	vstr	s2, [r7, #24]
 8000910:	edc7 1a05 	vstr	s3, [r7, #20]
 8000914:	ed87 2a04 	vstr	s4, [r7, #16]
 8000918:	edc7 2a03 	vstr	s5, [r7, #12]
 800091c:	ed87 3a02 	vstr	s6, [r7, #8]
 8000920:	edc7 3a01 	vstr	s7, [r7, #4]
	/* Parameter */
	dev->R = R;
 8000924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	601a      	str	r2, [r3, #0]
	dev->Q = Q;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	605a      	str	r2, [r3, #4]

	/* KF "memory" */
	dev->x1 = x1;
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	6a3a      	ldr	r2, [r7, #32]
 8000934:	609a      	str	r2, [r3, #8]
	dev->x2 = x2;
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	69fa      	ldr	r2, [r7, #28]
 800093a:	60da      	str	r2, [r3, #12]
	dev->p11 = p11;
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	611a      	str	r2, [r3, #16]
	dev->p12 = p12;
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	615a      	str	r2, [r3, #20]
	dev->p21 = p21;
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	619a      	str	r2, [r3, #24]
	dev->p22 = p22;
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	61da      	str	r2, [r3, #28]
}
 8000954:	bf00      	nop
 8000956:	372c      	adds	r7, #44	; 0x2c
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <PIDController_initialise>:
 *  Created on: Jan 21, 2022
 *      Author: fame
 */
#include "PID.h"

void PIDController_initialise(PIDController *pid, float Kp, float Ki, float Kd){
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	ed87 0a02 	vstr	s0, [r7, #8]
 800096c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000970:	ed87 1a00 	vstr	s2, [r7]
	pid->Kp = Kp;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	609a      	str	r2, [r3, #8]
	pid->out = 0;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f04f 0200 	mov.w	r2, #0
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <PIDController_update>:

float PIDController_update(PIDController *pid, float setpoint, float measurement) {
 800099c:	b480      	push	{r7}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80009a8:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measurement;
 80009ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80009b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80009b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b8:	edc7 7a05 	vstr	s15, [r7, #20]
	/*
	 * P term
	 */
	pid->proportional_term = pid->Kp * error;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	ed93 7a00 	vldr	s14, [r3]
 80009c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80009c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	edc3 7a07 	vstr	s15, [r3, #28]

	/*
	 * I term
	 */
	pid->integrator += error;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	ed93 7a08 	vldr	s14, [r3, #32]
 80009d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80009da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->integral_term = pid->Ki * pid->integrator;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80009f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	/*
	 * D term
	 */
	pid->derivative_term = pid->Kd * (error - pid->prevError);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000a06:	edd7 6a05 	vldr	s13, [r7, #20]
 8000a0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	pid->prevError = error;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
	/*
	 * Calculate a final value
	 */
	pid->out = pid->proportional_term + pid->integral_term + pid->derivative_term;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	ed93 7a07 	vldr	s14, [r3, #28]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000a2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	if (pid->out > 2500){
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000a44:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000a8c <PIDController_update+0xf0>
 8000a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a50:	dd03      	ble.n	8000a5a <PIDController_update+0xbe>
		pid->out = 2500;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <PIDController_update+0xf4>)
 8000a56:	631a      	str	r2, [r3, #48]	; 0x30
 8000a58:	e00c      	b.n	8000a74 <PIDController_update+0xd8>
	}
	else if(pid->out < -2500){
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000a60:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000a94 <PIDController_update+0xf8>
 8000a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6c:	d502      	bpl.n	8000a74 <PIDController_update+0xd8>
		pid->out = -2500;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <PIDController_update+0xfc>)
 8000a72:	631a      	str	r2, [r3, #48]	; 0x30
	}
	return pid->out;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	ee07 3a90 	vmov	s15, r3
}
 8000a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a80:	371c      	adds	r7, #28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	451c4000 	.word	0x451c4000
 8000a90:	451c4000 	.word	0x451c4000
 8000a94:	c51c4000 	.word	0xc51c4000
 8000a98:	c51c4000 	.word	0xc51c4000

08000a9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2224      	movs	r2, #36	; 0x24
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f010 ff01 	bl	80118bc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aba:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000abc:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <MX_ADC1_Init+0xe8>)
 8000abe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000acc:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b18:	4819      	ldr	r0, [pc, #100]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b1a:	f008 f9db 	bl	8008ed4 <HAL_ADC_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000b24:	f006 f8c8 	bl	8006cb8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	4813      	ldr	r0, [pc, #76]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b34:	f009 fa14 	bl	8009f60 <HAL_ADCEx_MultiModeConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b3e:	f006 f8bb 	bl	8006cb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_ADC1_Init+0xec>)
 8000b44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b46:	2306      	movs	r3, #6
 8000b48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b4e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b52:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b54:	2304      	movs	r3, #4
 8000b56:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b68:	f008 fbbc 	bl	80092e4 <HAL_ADC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000b72:	f006 f8a1 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3730      	adds	r7, #48	; 0x30
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	24000370 	.word	0x24000370
 8000b84:	40022000 	.word	0x40022000
 8000b88:	2a000400 	.word	0x2a000400

08000b8c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2224      	movs	r2, #36	; 0x24
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f010 fe8f 	bl	80118bc <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b9e:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000ba0:	4a30      	ldr	r2, [pc, #192]	; (8000c64 <MX_ADC3_Init+0xd8>)
 8000ba2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ba4:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bb8:	2204      	movs	r2, #4
 8000bba:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c0a:	4815      	ldr	r0, [pc, #84]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000c0c:	f008 f962 	bl	8008ed4 <HAL_ADC_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000c16:	f006 f84f 	bl	8006cb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_ADC3_Init+0xdc>)
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1e:	2306      	movs	r3, #6
 8000c20:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 8000c22:	2302      	movs	r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c26:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c2a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000c4a:	f008 fb4b 	bl	80092e4 <HAL_ADC_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000c54:	f006 f830 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	240003e0 	.word	0x240003e0
 8000c64:	58026000 	.word	0x58026000
 8000c68:	c7520000 	.word	0xc7520000

08000c6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <HAL_ADC_MspInit+0xa8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12a      	bne.n	8000ce4 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000c90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c94:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000c96:	f043 0320 	orr.w	r3, r3, #32
 8000c9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca4:	f003 0320 	and.w	r3, r3, #32
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480f      	ldr	r0, [pc, #60]	; (8000d1c <HAL_ADC_MspInit+0xb0>)
 8000cde:	f00a f97d 	bl	800afdc <HAL_GPIO_Init>
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000ce2:	e013      	b.n	8000d0c <HAL_ADC_MspInit+0xa0>
  else if(adcHandle->Instance==ADC3)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_ADC_MspInit+0xb4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10e      	bne.n	8000d0c <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40022000 	.word	0x40022000
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58020800 	.word	0x58020800
 8000d20:	58026000 	.word	0x58026000

08000d24 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d2a:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <MX_CRC_Init+0x54>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d3c:	221d      	movs	r2, #29
 8000d3e:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d42:	2210      	movs	r2, #16
 8000d44:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d48:	22c4      	movs	r2, #196	; 0xc4
 8000d4a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d60:	f009 faf0 	bl	800a344 <HAL_CRC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000d6a:	f005 ffa5 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	24000450 	.word	0x24000450
 8000d78:	58024c00 	.word	0x58024c00

08000d7c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_CRC_MspInit+0x3c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10e      	bne.n	8000dac <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_CRC_MspInit+0x40>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <HAL_CRC_MspInit+0x40>)
 8000d96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_CRC_MspInit+0x40>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58024c00 	.word	0x58024c00
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	4b62      	ldr	r3, [pc, #392]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	4a60      	ldr	r2, [pc, #384]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de6:	4b5e      	ldr	r3, [pc, #376]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	4b5a      	ldr	r3, [pc, #360]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	4a59      	ldr	r2, [pc, #356]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e04:	4b56      	ldr	r3, [pc, #344]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	4b53      	ldr	r3, [pc, #332]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a51      	ldr	r2, [pc, #324]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b4f      	ldr	r3, [pc, #316]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b4b      	ldr	r3, [pc, #300]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a4a      	ldr	r2, [pc, #296]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a42      	ldr	r2, [pc, #264]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	4b3c      	ldr	r3, [pc, #240]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a3b      	ldr	r2, [pc, #236]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR1_Pin|DIR2_Pin|OE_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000e90:	4834      	ldr	r0, [pc, #208]	; (8000f64 <MX_GPIO_Init+0x1a4>)
 8000e92:	f00a fa4b 	bl	800b32c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 8000e9c:	4832      	ldr	r0, [pc, #200]	; (8000f68 <MX_GPIO_Init+0x1a8>)
 8000e9e:	f00a fa45 	bl	800b32c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f644 7111 	movw	r1, #20241	; 0x4f11
 8000ea8:	4830      	ldr	r0, [pc, #192]	; (8000f6c <MX_GPIO_Init+0x1ac>)
 8000eaa:	f00a fa3f 	bl	800b32c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000eb4:	482e      	ldr	r0, [pc, #184]	; (8000f70 <MX_GPIO_Init+0x1b0>)
 8000eb6:	f00a fa39 	bl	800b32c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	21f0      	movs	r1, #240	; 0xf0
 8000ebe:	482d      	ldr	r0, [pc, #180]	; (8000f74 <MX_GPIO_Init+0x1b4>)
 8000ec0:	f00a fa34 	bl	800b32c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|OE_Pin;
 8000ec4:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4821      	ldr	r0, [pc, #132]	; (8000f64 <MX_GPIO_Init+0x1a4>)
 8000ede:	f00a f87d 	bl	800afdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8000ee2:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8000ee6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481b      	ldr	r0, [pc, #108]	; (8000f68 <MX_GPIO_Init+0x1a8>)
 8000efc:	f00a f86e 	bl	800afdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f00:	f644 7311 	movw	r3, #20241	; 0x4f11
 8000f04:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4814      	ldr	r0, [pc, #80]	; (8000f6c <MX_GPIO_Init+0x1ac>)
 8000f1a:	f00a f85f 	bl	800afdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 8000f1e:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <MX_GPIO_Init+0x1b0>)
 8000f38:	f00a f850 	bl	800afdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8000f3c:	23f0      	movs	r3, #240	; 0xf0
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4808      	ldr	r0, [pc, #32]	; (8000f74 <MX_GPIO_Init+0x1b4>)
 8000f54:	f00a f842 	bl	800afdc <HAL_GPIO_Init>

}
 8000f58:	bf00      	nop
 8000f5a:	3730      	adds	r7, #48	; 0x30
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	58024400 	.word	0x58024400
 8000f64:	58021000 	.word	0x58021000
 8000f68:	58020800 	.word	0x58020800
 8000f6c:	58020c00 	.word	0x58020c00
 8000f70:	58020000 	.word	0x58020000
 8000f74:	58020400 	.word	0x58020400

08000f78 <IVK>:
	q_arr[4] = roll;
	memcpy(config_arr, q_arr, sizeof(q_arr));
	return 1;
}

void IVK(float q[5], float x_dot[5], float *m_dot) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	ed2d 8b04 	vpush	{d8-d9}
 8000f7e:	b0f8      	sub	sp, #480	; 0x1e0
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	6018      	str	r0, [r3, #0]
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	6019      	str	r1, [r3, #0]
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	601a      	str	r2, [r3, #0]
	  double e_J_inv_tmp;
	  double e_J_inv_tmp_tmp;
	  double f_J_inv_tmp_tmp;
	  int i;
	  int i1;
	  J_inv_tmp_tmp = q[1] + 2.0 * q[2];
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3308      	adds	r3, #8
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000fb6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fba:	ed87 7b72 	vstr	d7, [r7, #456]	; 0x1c8
	  b_J_inv_tmp_tmp =
	      ((((J_inv_tmp_tmp + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205;
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	330c      	adds	r3, #12
 8000fc6:	edd3 7a00 	vldr	s15, [r3]
 8000fca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fce:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8000fd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fd6:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 80013a0 <IVK+0x428>
 8000fda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fde:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 80013a8 <IVK+0x430>
 8000fe2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fe6:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 80013b0 <IVK+0x438>
 8000fea:	ee37 7b46 	vsub.f64	d7, d7, d6
	  b_J_inv_tmp_tmp =
 8000fee:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 80013b8 <IVK+0x440>
 8000ff2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ff6:	ed87 7b70 	vstr	d7, [r7, #448]	; 0x1c0
	  c_J_inv_tmp_tmp = sin(b_J_inv_tmp_tmp);
 8000ffa:	ed97 0b70 	vldr	d0, [r7, #448]	; 0x1c0
 8000ffe:	f013 f8ef 	bl	80141e0 <sin>
 8001002:	ed87 0b6e 	vstr	d0, [r7, #440]	; 0x1b8
	  d_J_inv_tmp_tmp = sin(q[0]);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001014:	eeb0 0b47 	vmov.f64	d0, d7
 8001018:	f013 f8e2 	bl	80141e0 <sin>
 800101c:	ed87 0b6c 	vstr	d0, [r7, #432]	; 0x1b0
	  J_inv_tmp = cos(((J_inv_tmp_tmp + 1.6845) + -0.8995) + -0.73665);
 8001020:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8001024:	ed9f 6bde 	vldr	d6, [pc, #888]	; 80013a0 <IVK+0x428>
 8001028:	ee37 7b06 	vadd.f64	d7, d7, d6
 800102c:	ed9f 6bde 	vldr	d6, [pc, #888]	; 80013a8 <IVK+0x430>
 8001030:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001034:	ed9f 6bde 	vldr	d6, [pc, #888]	; 80013b0 <IVK+0x438>
 8001038:	ee37 7b46 	vsub.f64	d7, d7, d6
 800103c:	eeb0 0b47 	vmov.f64	d0, d7
 8001040:	f013 f87a 	bl	8014138 <cos>
 8001044:	ed87 0b6a 	vstr	d0, [r7, #424]	; 0x1a8
	  b_J_inv_tmp = cos(b_J_inv_tmp_tmp);
 8001048:	ed97 0b70 	vldr	d0, [r7, #448]	; 0x1c0
 800104c:	f013 f874 	bl	8014138 <cos>
 8001050:	ed87 0b68 	vstr	d0, [r7, #416]	; 0x1a0
	  J_inv_tmp_tmp = ((q[1] + q[2]) + 1.6845) + -0.8995;
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3304      	adds	r3, #4
 800105c:	ed93 7a00 	vldr	s14, [r3]
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3308      	adds	r3, #8
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001070:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001074:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80013a0 <IVK+0x428>
 8001078:	ee37 7b06 	vadd.f64	d7, d7, d6
 800107c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80013a8 <IVK+0x430>
 8001080:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001084:	ed87 7b72 	vstr	d7, [r7, #456]	; 0x1c8
	  c_J_inv_tmp = cos(J_inv_tmp_tmp);
 8001088:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800108c:	f013 f854 	bl	8014138 <cos>
 8001090:	ed87 0b66 	vstr	d0, [r7, #408]	; 0x198
	  d_J_inv_tmp = sin(J_inv_tmp_tmp);
 8001094:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8001098:	f013 f8a2 	bl	80141e0 <sin>
 800109c:	ed87 0b64 	vstr	d0, [r7, #400]	; 0x190
	  J_inv_tmp_tmp = sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3304      	adds	r3, #4
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3308      	adds	r3, #8
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80010c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010c8:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80013a0 <IVK+0x428>
 80010cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010d0:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80013a8 <IVK+0x430>
 80010d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80010d8:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80013b0 <IVK+0x438>
 80010dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80010e0:	eeb0 0b47 	vmov.f64	d0, d7
 80010e4:	f013 f87c 	bl	80141e0 <sin>
 80010e8:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
	  b_J_inv_tmp_tmp = cos(q[1] + 1.6845);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3304      	adds	r3, #4
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fc:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80013a0 <IVK+0x428>
 8001100:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001104:	eeb0 0b47 	vmov.f64	d0, d7
 8001108:	f013 f816 	bl	8014138 <cos>
 800110c:	ed87 0b70 	vstr	d0, [r7, #448]	; 0x1c0
	  e_J_inv_tmp_tmp = sin(q[1] + 1.6845);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3304      	adds	r3, #4
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001120:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80013a0 <IVK+0x428>
 8001124:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001128:	eeb0 0b47 	vmov.f64	d0, d7
 800112c:	f013 f858 	bl	80141e0 <sin>
 8001130:	ed87 0b62 	vstr	d0, [r7, #392]	; 0x188
	  f_J_inv_tmp_tmp = cos(q[0]);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001142:	eeb0 0b47 	vmov.f64	d0, d7
 8001146:	f012 fff7 	bl	8014138 <cos>
 800114a:	ed87 0b60 	vstr	d0, [r7, #384]	; 0x180
	  e_J_inv_tmp = cos(q[2]);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3308      	adds	r3, #8
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800115e:	eeb0 0b47 	vmov.f64	d0, d7
 8001162:	f012 ffe9 	bl	8014138 <cos>
 8001166:	ed87 0b5e 	vstr	d0, [r7, #376]	; 0x178
	  dv[0] = 0.0;
 800116a:	f107 0110 	add.w	r1, r7, #16
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	e9c1 2300 	strd	r2, r3, [r1]
	  dv[5] = 0.0;
 800117a:	f107 0110 	add.w	r1, r7, #16
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  d = f_J_inv_tmp_tmp * f_J_inv_tmp_tmp;
 800118a:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800118e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001192:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	  d1 = d_J_inv_tmp_tmp * d_J_inv_tmp_tmp;
 8001196:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800119a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800119e:	ed87 7b5c 	vstr	d7, [r7, #368]	; 0x170
	  dv[10] =
	      -(25.0 * d_J_inv_tmp_tmp) /
 80011a2:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80011a6:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 80011aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011ae:	eeb1 8b47 	vneg.f64	d8, d7
	      (9.0 *
	       (((((((146.0 * c_J_inv_tmp_tmp * d + 410.488 * J_inv_tmp * d) +
 80011b2:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80011b6:	ed9f 6b84 	vldr	d6, [pc, #528]	; 80013c8 <IVK+0x450>
 80011ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011be:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80011c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011c6:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80011ca:	ed9f 5b81 	vldr	d5, [pc, #516]	; 80013d0 <IVK+0x458>
 80011ce:	ee27 5b05 	vmul.f64	d5, d7, d5
 80011d2:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80011d6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011da:	ee36 9b07 	vadd.f64	d9, d6, d7
	             146.0 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3308      	adds	r3, #8
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001202:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	330c      	adds	r3, #12
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001216:	ee36 7b07 	vadd.f64	d7, d6, d7
 800121a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80013a0 <IVK+0x428>
 800121e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001222:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80013a8 <IVK+0x430>
 8001226:	ee37 7b46 	vsub.f64	d7, d7, d6
 800122a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80013b0 <IVK+0x438>
 800122e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001232:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80013b8 <IVK+0x440>
 8001236:	ee37 7b06 	vadd.f64	d7, d7, d6
 800123a:	eeb0 0b47 	vmov.f64	d0, d7
 800123e:	f012 ffcf 	bl	80141e0 <sin>
 8001242:	eeb0 7b40 	vmov.f64	d7, d0
	             146.0 *
 8001246:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80013c8 <IVK+0x450>
 800124a:	ee27 6b06 	vmul.f64	d6, d7, d6
	                      -0.73665) +
	                     1.52205) *
 800124e:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8001252:	ee26 7b07 	vmul.f64	d7, d6, d7
	       (((((((146.0 * c_J_inv_tmp_tmp * d + 410.488 * J_inv_tmp * d) +
 8001256:	ee39 9b07 	vadd.f64	d9, d9, d7
	                 d1) +
	            410.488 *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3304      	adds	r3, #4
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3308      	adds	r3, #8
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800127a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800127e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001282:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80013a0 <IVK+0x428>
 8001286:	ee37 7b06 	vadd.f64	d7, d7, d6
 800128a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80013a8 <IVK+0x430>
 800128e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001292:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80013b0 <IVK+0x438>
 8001296:	ee37 7b46 	vsub.f64	d7, d7, d6
 800129a:	eeb0 0b47 	vmov.f64	d0, d7
 800129e:	f012 ff4b 	bl	8014138 <cos>
 80012a2:	eeb0 7b40 	vmov.f64	d7, d0
	            410.488 *
 80012a6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80013d0 <IVK+0x458>
 80012aa:	ee27 6b06 	vmul.f64	d6, d7, d6
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80012ae:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80012b2:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 d1) +
 80012b6:	ee39 6b07 	vadd.f64	d6, d9, d7
	                d1) +
	           60.0 * c_J_inv_tmp * d) +
 80012ba:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80012be:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80013d8 <IVK+0x460>
 80012c2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80012c6:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80012ca:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d1) +
 80012ce:	ee36 9b07 	vadd.f64	d9, d6, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) +
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3304      	adds	r3, #4
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3308      	adds	r3, #8
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f2:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80013a0 <IVK+0x428>
 80012f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012fa:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80013a8 <IVK+0x430>
 80012fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001302:	eeb0 0b47 	vmov.f64	d0, d7
 8001306:	f012 ff17 	bl	8014138 <cos>
 800130a:	eeb0 7b40 	vmov.f64	d7, d0
 800130e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80013d8 <IVK+0x460>
 8001312:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001316:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800131a:	ee26 7b07 	vmul.f64	d7, d6, d7
	           60.0 * c_J_inv_tmp * d) +
 800131e:	ee39 6b07 	vadd.f64	d6, d9, d7
	         352.278 * b_J_inv_tmp_tmp * d) +
 8001322:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001326:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80013e0 <IVK+0x468>
 800132a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800132e:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001332:	ee25 7b07 	vmul.f64	d7, d5, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) +
 8001336:	ee36 9b07 	vadd.f64	d9, d6, d7
	        352.278 * cos(q[1] + 1.6845) * d1));
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3304      	adds	r3, #4
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800134a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80013a0 <IVK+0x428>
 800134e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001352:	eeb0 0b47 	vmov.f64	d0, d7
 8001356:	f012 feef 	bl	8014138 <cos>
 800135a:	eeb0 7b40 	vmov.f64	d7, d0
 800135e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80013e0 <IVK+0x468>
 8001362:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001366:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800136a:	ee26 7b07 	vmul.f64	d7, d6, d7
	         352.278 * b_J_inv_tmp_tmp * d) +
 800136e:	ee39 7b07 	vadd.f64	d7, d9, d7
	      (9.0 *
 8001372:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001376:	ee27 6b06 	vmul.f64	d6, d7, d6
	      -(25.0 * d_J_inv_tmp_tmp) /
 800137a:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[10] =
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	  dv[15] =
	      25.0 * f_J_inv_tmp_tmp /
 8001386:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800138a:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 800138e:	ee27 8b06 	vmul.f64	d8, d7, d6
	      (9.0 *
	       (((((((146.0 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3304      	adds	r3, #4
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	e033      	b.n	8001408 <IVK+0x490>
 80013a0:	45a1cac1 	.word	0x45a1cac1
 80013a4:	3ffaf3b6 	.word	0x3ffaf3b6
 80013a8:	39581062 	.word	0x39581062
 80013ac:	3fecc8b4 	.word	0x3fecc8b4
 80013b0:	05532618 	.word	0x05532618
 80013b4:	3fe792a3 	.word	0x3fe792a3
 80013b8:	19ce075f 	.word	0x19ce075f
 80013bc:	3ff85a51 	.word	0x3ff85a51
 80013c0:	19ce075f 	.word	0x19ce075f
 80013c4:	3ff85a51 	.word	0x3ff85a51
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40624000 	.word	0x40624000
 80013d0:	d916872b 	.word	0xd916872b
 80013d4:	4079a7ce 	.word	0x4079a7ce
 80013d8:	00000000 	.word	0x00000000
 80013dc:	404e0000 	.word	0x404e0000
 80013e0:	b020c49c 	.word	0xb020c49c
 80013e4:	40760472 	.word	0x40760472
 80013e8:	45a1cac1 	.word	0x45a1cac1
 80013ec:	3ffaf3b6 	.word	0x3ffaf3b6
 80013f0:	39581062 	.word	0x39581062
 80013f4:	3fecc8b4 	.word	0x3fecc8b4
 80013f8:	05532618 	.word	0x05532618
 80013fc:	3fe792a3 	.word	0x3fe792a3
 8001400:	eb851eb8 	.word	0xeb851eb8
 8001404:	40d80d51 	.word	0x40d80d51
 8001408:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3308      	adds	r3, #8
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800141c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001420:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	330c      	adds	r3, #12
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001434:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001438:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 80013e8 <IVK+0x470>
 800143c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001440:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 80013f0 <IVK+0x478>
 8001444:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001448:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 80013f8 <IVK+0x480>
 800144c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001450:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 80013c0 <IVK+0x448>
 8001454:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001458:	eeb0 0b47 	vmov.f64	d0, d7
 800145c:	f012 fec0 	bl	80141e0 <sin>
 8001460:	eeb0 7b40 	vmov.f64	d7, d0
	       (((((((146.0 *
 8001464:	ed1f 6b28 	vldr	d6, [pc, #-160]	; 80013c8 <IVK+0x450>
 8001468:	ee27 6b06 	vmul.f64	d6, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 800146c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001470:	ee27 7b07 	vmul.f64	d7, d7, d7
	                      1.52205) *
 8001474:	ee26 9b07 	vmul.f64	d9, d6, d7
	              410.488 *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3304      	adds	r3, #4
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3308      	adds	r3, #8
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001498:	ee37 7b07 	vadd.f64	d7, d7, d7
 800149c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014a0:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 80013e8 <IVK+0x470>
 80014a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014a8:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 80013f0 <IVK+0x478>
 80014ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80014b0:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 80013f8 <IVK+0x480>
 80014b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80014b8:	eeb0 0b47 	vmov.f64	d0, d7
 80014bc:	f012 fe3c 	bl	8014138 <cos>
 80014c0:	eeb0 7b40 	vmov.f64	d7, d0
	              410.488 *
 80014c4:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 80013d0 <IVK+0x458>
 80014c8:	ee27 6b06 	vmul.f64	d6, d7, d6
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80014cc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80014d0:	ee27 7b07 	vmul.f64	d7, d7, d7
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80014d4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 80014d8:	ee39 9b07 	vadd.f64	d9, d9, d7
	             146.0 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3304      	adds	r3, #4
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3308      	adds	r3, #8
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001500:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	330c      	adds	r3, #12
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001514:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001518:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 80013e8 <IVK+0x470>
 800151c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001520:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 80013f0 <IVK+0x478>
 8001524:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001528:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 80013f8 <IVK+0x480>
 800152c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001530:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 80013c0 <IVK+0x448>
 8001534:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001538:	eeb0 0b47 	vmov.f64	d0, d7
 800153c:	f012 fe50 	bl	80141e0 <sin>
 8001540:	eeb0 7b40 	vmov.f64	d7, d0
	             146.0 *
 8001544:	ed1f 6b60 	vldr	d6, [pc, #-384]	; 80013c8 <IVK+0x450>
 8001548:	ee27 6b06 	vmul.f64	d6, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800154c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001550:	ee27 7b07 	vmul.f64	d7, d7, d7
	                     1.52205) *
 8001554:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001558:	ee39 9b07 	vadd.f64	d9, d9, d7
	            410.488 *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3304      	adds	r3, #4
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3308      	adds	r3, #8
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800157c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001580:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001584:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80013e8 <IVK+0x470>
 8001588:	ee37 7b06 	vadd.f64	d7, d7, d6
 800158c:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80013f0 <IVK+0x478>
 8001590:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001594:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80013f8 <IVK+0x480>
 8001598:	ee37 7b46 	vsub.f64	d7, d7, d6
 800159c:	eeb0 0b47 	vmov.f64	d0, d7
 80015a0:	f012 fdca 	bl	8014138 <cos>
 80015a4:	eeb0 7b40 	vmov.f64	d7, d0
	            410.488 *
 80015a8:	ed1f 6b77 	vldr	d6, [pc, #-476]	; 80013d0 <IVK+0x458>
 80015ac:	ee27 6b06 	vmul.f64	d6, d7, d6
	                (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80015b0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80015b4:	ee27 7b07 	vmul.f64	d7, d7, d7
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80015b8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80015bc:	ee39 9b07 	vadd.f64	d9, d9, d7
	           60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3304      	adds	r3, #4
 80015c8:	ed93 7a00 	vldr	s14, [r3]
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3308      	adds	r3, #8
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e0:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 80013e8 <IVK+0x470>
 80015e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015e8:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 80013f0 <IVK+0x478>
 80015ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80015f0:	eeb0 0b47 	vmov.f64	d0, d7
 80015f4:	f012 fda0 	bl	8014138 <cos>
 80015f8:	eeb0 7b40 	vmov.f64	d7, d0
 80015fc:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 80013d8 <IVK+0x460>
 8001600:	ee27 6b06 	vmul.f64	d6, d7, d6
	               (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001604:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001608:	ee27 7b07 	vmul.f64	d7, d7, d7
	           60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800160c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001610:	ee39 9b07 	vadd.f64	d9, d9, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3304      	adds	r3, #4
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3308      	adds	r3, #8
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001630:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001634:	ed1f 6b94 	vldr	d6, [pc, #-592]	; 80013e8 <IVK+0x470>
 8001638:	ee37 7b06 	vadd.f64	d7, d7, d6
 800163c:	ed1f 6b94 	vldr	d6, [pc, #-592]	; 80013f0 <IVK+0x478>
 8001640:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001644:	eeb0 0b47 	vmov.f64	d0, d7
 8001648:	f012 fd76 	bl	8014138 <cos>
 800164c:	eeb0 7b40 	vmov.f64	d7, d0
 8001650:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 80013d8 <IVK+0x460>
 8001654:	ee27 6b06 	vmul.f64	d6, d7, d6
	              (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001658:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800165c:	ee27 7b07 	vmul.f64	d7, d7, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8001660:	ee26 7b07 	vmul.f64	d7, d6, d7
	               (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001664:	ee39 9b07 	vadd.f64	d9, d9, d7
	         352.278 * cos(q[1] + 1.6845) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3304      	adds	r3, #4
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001678:	ed1f 6ba5 	vldr	d6, [pc, #-660]	; 80013e8 <IVK+0x470>
 800167c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001680:	eeb0 0b47 	vmov.f64	d0, d7
 8001684:	f012 fd58 	bl	8014138 <cos>
 8001688:	eeb0 7b40 	vmov.f64	d7, d0
 800168c:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 80013e0 <IVK+0x468>
 8001690:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001694:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001698:	ee27 7b07 	vmul.f64	d7, d7, d7
 800169c:	ee26 7b07 	vmul.f64	d7, d6, d7
	              (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80016a0:	ee39 9b07 	vadd.f64	d9, d9, d7
	        352.278 * cos(q[1] + 1.6845) * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3304      	adds	r3, #4
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016b4:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 80013e8 <IVK+0x470>
 80016b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016bc:	eeb0 0b47 	vmov.f64	d0, d7
 80016c0:	f012 fd3a 	bl	8014138 <cos>
 80016c4:	eeb0 7b40 	vmov.f64	d7, d0
 80016c8:	ed1f 6bbb 	vldr	d6, [pc, #-748]	; 80013e0 <IVK+0x468>
 80016cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016d0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80016d4:	ee27 7b07 	vmul.f64	d7, d7, d7
 80016d8:	ee26 7b07 	vmul.f64	d7, d6, d7
	         352.278 * cos(q[1] + 1.6845) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80016dc:	ee39 7b07 	vadd.f64	d7, d9, d7
	      (9.0 *
 80016e0:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80016e4:	ee27 6b06 	vmul.f64	d6, d7, d6
	      25.0 * f_J_inv_tmp_tmp /
 80016e8:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[15] =
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	  dv[20] = 0.0;
 80016f4:	f107 0110 	add.w	r1, r7, #16
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	  d2 = sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3304      	adds	r3, #4
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	3308      	adds	r3, #8
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001724:	ed1f 6bd0 	vldr	d6, [pc, #-832]	; 80013e8 <IVK+0x470>
 8001728:	ee37 7b06 	vadd.f64	d7, d7, d6
 800172c:	ed1f 6bd0 	vldr	d6, [pc, #-832]	; 80013f0 <IVK+0x478>
 8001730:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001734:	eeb0 0b47 	vmov.f64	d0, d7
 8001738:	f012 fd52 	bl	80141e0 <sin>
 800173c:	ed87 0b5a 	vstr	d0, [r7, #360]	; 0x168
	  d3 = 24629.28 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3304      	adds	r3, #4
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3308      	adds	r3, #8
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001760:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001764:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001768:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 80013e8 <IVK+0x470>
 800176c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001770:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 80013f0 <IVK+0x478>
 8001774:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001778:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 80013f8 <IVK+0x480>
 800177c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001780:	eeb0 0b47 	vmov.f64	d0, d7
 8001784:	f012 fcd8 	bl	8014138 <cos>
 8001788:	eeb0 7b40 	vmov.f64	d7, d0
 800178c:	ed1f 6be4 	vldr	d6, [pc, #-912]	; 8001400 <IVK+0x488>
 8001790:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001794:	ed97 6b5a 	vldr	d6, [r7, #360]	; 0x168
 8001798:	ee26 7b07 	vmul.f64	d7, d6, d7
 800179c:	ed87 7b58 	vstr	d7, [r7, #352]	; 0x160
	       d2;
	  d4 = 24629.28 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 80017a0:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80017a4:	ed1f 6bea 	vldr	d6, [pc, #-936]	; 8001400 <IVK+0x488>
 80017a8:	ee27 8b06 	vmul.f64	d8, d7, d6
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3304      	adds	r3, #4
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3308      	adds	r3, #8
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017cc:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8001ba8 <IVK+0xc30>
 80017d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017d4:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8001bb0 <IVK+0xc38>
 80017d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017dc:	eeb0 0b47 	vmov.f64	d0, d7
 80017e0:	f012 fcaa 	bl	8014138 <cos>
 80017e4:	eeb0 7b40 	vmov.f64	d7, d0
 80017e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80017ec:	ed87 7b56 	vstr	d7, [r7, #344]	; 0x158
	  d5 = 289211.783328 *
	       cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3304      	adds	r3, #4
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3308      	adds	r3, #8
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001810:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001814:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001818:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8001ba8 <IVK+0xc30>
 800181c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001820:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8001bb0 <IVK+0xc38>
 8001824:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001828:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8001be8 <IVK+0xc70>
 800182c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001830:	eeb0 0b47 	vmov.f64	d0, d7
 8001834:	f012 fc80 	bl	8014138 <cos>
 8001838:	eeb0 7b40 	vmov.f64	d7, d0
	  d5 = 289211.783328 *
 800183c:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001bb8 <IVK+0xc40>
 8001840:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001844:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 8001848:	ee26 7b07 	vmul.f64	d7, d6, d7
 800184c:	ed87 7b54 	vstr	d7, [r7, #336]	; 0x150
	       e_J_inv_tmp_tmp;
	  d6 = 289211.783328 * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8001850:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8001854:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001bb8 <IVK+0xc40>
 8001858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800185c:	ed97 6b70 	vldr	d6, [r7, #448]	; 0x1c0
 8001860:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001864:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
	  d7 = 21136.68 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3304      	adds	r3, #4
 8001870:	ed93 7a00 	vldr	s14, [r3]
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3308      	adds	r3, #8
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001884:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001888:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8001ba8 <IVK+0xc30>
 800188c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001890:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8001bb0 <IVK+0xc38>
 8001894:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001898:	eeb0 0b47 	vmov.f64	d0, d7
 800189c:	f012 fc4c 	bl	8014138 <cos>
 80018a0:	eeb0 7b40 	vmov.f64	d7, d0
 80018a4:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8001bc0 <IVK+0xc48>
 80018a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018ac:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 80018b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018b4:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	  d8 = 21136.68 * d2 * b_J_inv_tmp_tmp;
 80018b8:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80018bc:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001bc0 <IVK+0xc48>
 80018c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018c4:	ed97 6b70 	vldr	d6, [r7, #448]	; 0x1c0
 80018c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018cc:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
	  dv[1] = 27.0 *
	          (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 80018d0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80018d4:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8001bc8 <IVK+0xc50>
 80018d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018dc:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80018e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018e4:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80018e8:	ee26 6b07 	vmul.f64	d6, d6, d7
	             119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 80018ec:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 80018f0:	ed9f 5bbb 	vldr	d5, [pc, #748]	; 8001be0 <IVK+0xc68>
 80018f4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80018f8:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80018fc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001900:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001904:	ee25 7b07 	vmul.f64	d7, d5, d7
	          (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 8001908:	ee36 6b07 	vadd.f64	d6, d6, d7
	            119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 800190c:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8001910:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8001be0 <IVK+0xc68>
 8001914:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001918:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 800191c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001920:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001924:	ee25 7b07 	vmul.f64	d7, d5, d7
	             119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 8001928:	ee36 6b07 	vadd.f64	d6, d6, d7
	           8760.0 * b_J_inv_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) /
 800192c:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8001930:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8001bc8 <IVK+0xc50>
 8001934:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001938:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 800193c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001940:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001944:	ee25 7b07 	vmul.f64	d7, d5, d7
	            119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8001948:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[1] = 27.0 *
 800194c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8001950:	ee27 5b06 	vmul.f64	d5, d7, d6
	          (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d -
 8001954:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001958:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001bd0 <IVK+0xc58>
 800195c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001960:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001964:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001968:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 800196c:	ee26 6b07 	vmul.f64	d6, d6, d7
	                     24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8001970:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8001974:	ed9f 4b96 	vldr	d4, [pc, #600]	; 8001bd0 <IVK+0xc58>
 8001978:	ee27 4b04 	vmul.f64	d4, d7, d4
 800197c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8001980:	ee24 4b07 	vmul.f64	d4, d4, d7
 8001984:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001988:	ee24 7b07 	vmul.f64	d7, d4, d7
	          (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d -
 800198c:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d3 * d1) -
 8001990:	ed97 4b58 	vldr	d4, [r7, #352]	; 0x160
 8001994:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8001998:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) +
 800199c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d4 * d1) +
 80019a0:	ed97 4b56 	vldr	d4, [r7, #344]	; 0x158
 80019a4:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80019a8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d3 * d1) -
 80019ac:	ee36 6b47 	vsub.f64	d6, d6, d7
	                  289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 80019b0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80019b4:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8001bb8 <IVK+0xc40>
 80019b8:	ee27 4b04 	vmul.f64	d4, d7, d4
 80019bc:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80019c0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80019c4:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80019c8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                   d4 * d1) +
 80019cc:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d6 * d) +
 80019d0:	ed97 4b52 	vldr	d4, [r7, #328]	; 0x148
 80019d4:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80019d8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                  289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 80019dc:	ee36 6b47 	vsub.f64	d6, d6, d7
	                d5 * d1) -
 80019e0:	ed97 4b54 	vldr	d4, [r7, #336]	; 0x150
 80019e4:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80019e8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                 d6 * d) +
 80019ec:	ee36 6b07 	vadd.f64	d6, d6, d7
	               d6 * d1) +
 80019f0:	ed97 4b52 	vldr	d4, [r7, #328]	; 0x148
 80019f4:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80019f8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                d5 * d1) -
 80019fc:	ee36 6b47 	vsub.f64	d6, d6, d7
	              21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8001a00:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8001a04:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 8001bc0 <IVK+0xc48>
 8001a08:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001a0c:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8001a10:	ee24 4b07 	vmul.f64	d4, d4, d7
 8001a14:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001a18:	ee24 7b07 	vmul.f64	d7, d4, d7
	               d6 * d1) +
 8001a1c:	ee36 6b07 	vadd.f64	d6, d6, d7
	             21136.68 * d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8001a20:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001a24:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8001bc0 <IVK+0xc48>
 8001a28:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001a2c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001a30:	ee24 4b07 	vmul.f64	d4, d4, d7
 8001a34:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001a38:	ee24 7b07 	vmul.f64	d7, d4, d7
	              21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8001a3c:	ee36 6b47 	vsub.f64	d6, d6, d7
	            d7 * d1) -
 8001a40:	ed97 4b50 	vldr	d4, [r7, #320]	; 0x140
 8001a44:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8001a48:	ee24 7b07 	vmul.f64	d7, d4, d7
	             21136.68 * d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8001a4c:	ee36 6b07 	vadd.f64	d6, d6, d7
	           d8 * d1);
 8001a50:	ed97 4b4e 	vldr	d4, [r7, #312]	; 0x138
 8001a54:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8001a58:	ee24 7b07 	vmul.f64	d7, d4, d7
	            d7 * d1) -
 8001a5c:	ee36 6b47 	vsub.f64	d6, d6, d7
	           8760.0 * b_J_inv_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) /
 8001a60:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[1] = 27.0 *
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	ed83 7b02 	vstr	d7, [r3, #8]
	  d9 = 8760.0 *
	       cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3304      	adds	r3, #4
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3308      	adds	r3, #8
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a8c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a90:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	330c      	adds	r3, #12
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aa4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001aa8:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001ba8 <IVK+0xc30>
 8001aac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ab0:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001bb0 <IVK+0xc38>
 8001ab4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ab8:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001be8 <IVK+0xc70>
 8001abc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ac0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001bd8 <IVK+0xc60>
 8001ac4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ac8:	eeb0 0b47 	vmov.f64	d0, d7
 8001acc:	f012 fb34 	bl	8014138 <cos>
 8001ad0:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 8760.0 *
 8001ad4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001bc8 <IVK+0xc50>
 8001ad8:	ee27 8b06 	vmul.f64	d8, d7, d6
	           1.52205) *
	       cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	ed93 7a00 	vldr	s14, [r3]
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3308      	adds	r3, #8
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001afc:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001ba8 <IVK+0xc30>
 8001b00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b04:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001bb0 <IVK+0xc38>
 8001b08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b0c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b10:	f012 fb12 	bl	8014138 <cos>
 8001b14:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 8760.0 *
 8001b18:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001b1c:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	  d10 = 8760.0 *
	        sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	3304      	adds	r3, #4
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3308      	adds	r3, #8
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b44:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	330c      	adds	r3, #12
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b5c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001ba8 <IVK+0xc30>
 8001b60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b64:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001bb0 <IVK+0xc38>
 8001b68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b6c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001be8 <IVK+0xc70>
 8001b70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b74:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001bd8 <IVK+0xc60>
 8001b78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b7c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b80:	f012 fb2e 	bl	80141e0 <sin>
 8001b84:	eeb0 7b40 	vmov.f64	d7, d0
	  d10 = 8760.0 *
 8001b88:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001bc8 <IVK+0xc50>
 8001b8c:	ee27 8b06 	vmul.f64	d8, d7, d6
	            1.52205) *
	        sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3304      	adds	r3, #4
 8001b98:	ed93 7a00 	vldr	s14, [r3]
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	e038      	b.n	8001c18 <IVK+0xca0>
 8001ba6:	bf00      	nop
 8001ba8:	45a1cac1 	.word	0x45a1cac1
 8001bac:	3ffaf3b6 	.word	0x3ffaf3b6
 8001bb0:	39581062 	.word	0x39581062
 8001bb4:	3fecc8b4 	.word	0x3fecc8b4
 8001bb8:	2220bc38 	.word	0x2220bc38
 8001bbc:	4111a6ef 	.word	0x4111a6ef
 8001bc0:	851eb852 	.word	0x851eb852
 8001bc4:	40d4a42b 	.word	0x40d4a42b
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40c11c00 	.word	0x40c11c00
 8001bd0:	eb851eb8 	.word	0xeb851eb8
 8001bd4:	40d80d51 	.word	0x40d80d51
 8001bd8:	19ce075f 	.word	0x19ce075f
 8001bdc:	3ff85a51 	.word	0x3ff85a51
 8001be0:	ef9db22d 	.word	0xef9db22d
 8001be4:	40fd4367 	.word	0x40fd4367
 8001be8:	05532618 	.word	0x05532618
 8001bec:	3fe792a3 	.word	0x3fe792a3
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	404e0000 	.word	0x404e0000
 8001bf8:	45a1cac1 	.word	0x45a1cac1
 8001bfc:	3ffaf3b6 	.word	0x3ffaf3b6
 8001c00:	39581062 	.word	0x39581062
 8001c04:	3fecc8b4 	.word	0x3fecc8b4
 8001c08:	05532618 	.word	0x05532618
 8001c0c:	3fe792a3 	.word	0x3fe792a3
 8001c10:	d916872b 	.word	0xd916872b
 8001c14:	4089a7ce 	.word	0x4089a7ce
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c24:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 8001bf8 <IVK+0xc80>
 8001c28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c2c:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 8001c00 <IVK+0xc88>
 8001c30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c34:	eeb0 0b47 	vmov.f64	d0, d7
 8001c38:	f012 fad2 	bl	80141e0 <sin>
 8001c3c:	eeb0 7b40 	vmov.f64	d7, d0
	  d10 = 8760.0 *
 8001c40:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c44:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8001c48:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c4c:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001c50:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8001c54:	ee26 6b07 	vmul.f64	d6, d6, d7
	                  d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001c58:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c5c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c60:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8001c64:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8001c68:	ee36 6b47 	vsub.f64	d6, d6, d7
	                 d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8001c6c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001c70:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c74:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8001c78:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001c7c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001c80:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001c84:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c88:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8001c8c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8001c90:	ee36 6b47 	vsub.f64	d6, d6, d7
	               d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8001c94:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c98:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c9c:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001ca0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001ca4:	ee36 6b07 	vadd.f64	d6, d6, d7
	              d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001ca8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001cac:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001cb0:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8001cb4:	ee25 7b07 	vmul.f64	d7, d5, d7
	               d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8001cb8:	ee36 6b47 	vsub.f64	d6, d6, d7
	             d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8001cbc:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001cc0:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001cc4:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001cc8:	ee25 7b07 	vmul.f64	d7, d5, d7
	              d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001ccc:	ee36 6b07 	vadd.f64	d6, d6, d7
	            d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001cd0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001cd4:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001cd8:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8001cdc:	ee25 7b07 	vmul.f64	d7, d5, d7
	             d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8001ce0:	ee36 6b47 	vsub.f64	d6, d6, d7
	           d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8001ce4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001ce8:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001cec:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8001cf0:	ee25 7b07 	vmul.f64	d7, d5, d7
	            d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001cf4:	ee36 6b07 	vadd.f64	d6, d6, d7
	          d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001cf8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001cfc:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001d00:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8001d04:	ee25 7b07 	vmul.f64	d7, d5, d7
	           d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8001d08:	ee36 6b47 	vsub.f64	d6, d6, d7
	         d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8001d0c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001d10:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001d14:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8001d18:	ee25 7b07 	vmul.f64	d7, d5, d7
	          d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001d1c:	ee36 6b07 	vadd.f64	d6, d6, d7
	        d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp);
 8001d20:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001d24:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001d28:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8001d2c:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8001d30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d34:	ed87 7b48 	vstr	d7, [r7, #288]	; 0x120
	  dv[6] = -(27.0 *
	            (((d10 * f_J_inv_tmp_tmp +
 8001d38:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8001d3c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001d40:	ee26 8b07 	vmul.f64	d8, d6, d7
	               119862.496 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3308      	adds	r3, #8
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d64:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001d68:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	330c      	adds	r3, #12
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d80:	ed1f 6b63 	vldr	d6, [pc, #-396]	; 8001bf8 <IVK+0xc80>
 8001d84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d88:	ed1f 6b63 	vldr	d6, [pc, #-396]	; 8001c00 <IVK+0xc88>
 8001d8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d90:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8001be8 <IVK+0xc70>
 8001d94:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d98:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 8001bd8 <IVK+0xc60>
 8001d9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001da0:	eeb0 0b47 	vmov.f64	d0, d7
 8001da4:	f012 f9c8 	bl	8014138 <cos>
 8001da8:	eeb0 7b40 	vmov.f64	d7, d0
	               119862.496 *
 8001dac:	ed1f 6b74 	vldr	d6, [pc, #-464]	; 8001be0 <IVK+0xc68>
 8001db0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3308      	adds	r3, #8
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dd4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001dd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ddc:	ed1f 6b7a 	vldr	d6, [pc, #-488]	; 8001bf8 <IVK+0xc80>
 8001de0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001de4:	ed1f 6b7a 	vldr	d6, [pc, #-488]	; 8001c00 <IVK+0xc88>
 8001de8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dec:	ed1f 6b82 	vldr	d6, [pc, #-520]	; 8001be8 <IVK+0xc70>
 8001df0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001df4:	eeb0 0b47 	vmov.f64	d0, d7
 8001df8:	f012 f99e 	bl	8014138 <cos>
 8001dfc:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8001e00:	ee29 6b07 	vmul.f64	d6, d9, d7
	                   cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001e04:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001e08:	ee26 7b07 	vmul.f64	d7, d6, d7
	            (((d10 * f_J_inv_tmp_tmp +
 8001e0c:	ee38 8b07 	vadd.f64	d8, d8, d7
	                   f_J_inv_tmp_tmp) +
	              119862.496 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3304      	adds	r3, #4
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3308      	adds	r3, #8
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e30:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001e34:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	330c      	adds	r3, #12
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e4c:	ed1f 6b96 	vldr	d6, [pc, #-600]	; 8001bf8 <IVK+0xc80>
 8001e50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e54:	ed1f 6b96 	vldr	d6, [pc, #-600]	; 8001c00 <IVK+0xc88>
 8001e58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e5c:	ed1f 6b9e 	vldr	d6, [pc, #-632]	; 8001be8 <IVK+0xc70>
 8001e60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e64:	ed1f 6ba4 	vldr	d6, [pc, #-656]	; 8001bd8 <IVK+0xc60>
 8001e68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e6c:	eeb0 0b47 	vmov.f64	d0, d7
 8001e70:	f012 f9b6 	bl	80141e0 <sin>
 8001e74:	eeb0 7b40 	vmov.f64	d7, d0
	              119862.496 *
 8001e78:	ed1f 6ba7 	vldr	d6, [pc, #-668]	; 8001be0 <IVK+0xc68>
 8001e7c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3304      	adds	r3, #4
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3308      	adds	r3, #8
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ea0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001ea4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ea8:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 8001bf8 <IVK+0xc80>
 8001eac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001eb0:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 8001c00 <IVK+0xc88>
 8001eb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001eb8:	ed1f 6bb5 	vldr	d6, [pc, #-724]	; 8001be8 <IVK+0xc70>
 8001ebc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ec0:	eeb0 0b47 	vmov.f64	d0, d7
 8001ec4:	f012 f98c 	bl	80141e0 <sin>
 8001ec8:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8001ecc:	ee29 6b07 	vmul.f64	d6, d9, d7
	                  sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001ed0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001ed4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                   f_J_inv_tmp_tmp) +
 8001ed8:	ee38 6b07 	vadd.f64	d6, d8, d7
	                  f_J_inv_tmp_tmp) +
	             d9 * f_J_inv_tmp_tmp)) /
 8001edc:	ed97 5b4c 	vldr	d5, [r7, #304]	; 0x130
 8001ee0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001ee4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  f_J_inv_tmp_tmp) +
 8001ee8:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[6] = -(27.0 *
 8001eec:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8001ef0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ef4:	eeb1 5b47 	vneg.f64	d5, d7
	             d9 * f_J_inv_tmp_tmp)) /
 8001ef8:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 8001efc:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[6] = -(27.0 *
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	          d11;
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 8001f08:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001f0c:	ed1f 6bc0 	vldr	d6, [pc, #-768]	; 8001c10 <IVK+0xc98>
 8001f10:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f14:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001f18:	ee26 8b07 	vmul.f64	d8, d6, d7
	                     60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3304      	adds	r3, #4
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	3308      	adds	r3, #8
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f3c:	ed1f 6bd2 	vldr	d6, [pc, #-840]	; 8001bf8 <IVK+0xc80>
 8001f40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f44:	ed1f 6bd2 	vldr	d6, [pc, #-840]	; 8001c00 <IVK+0xc88>
 8001f48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f4c:	eeb0 0b47 	vmov.f64	d0, d7
 8001f50:	f012 f8f2 	bl	8014138 <cos>
 8001f54:	eeb0 7b40 	vmov.f64	d7, d0
 8001f58:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8001bf0 <IVK+0xc78>
 8001f5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f60:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001f64:	ee26 7b07 	vmul.f64	d7, d6, d7
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 8001f68:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001f6c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8001f70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f74:	eeb1 5b47 	vneg.f64	d5, d7
	                         f_J_inv_tmp_tmp)) /
 8001f78:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 8001f7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	           d11;
	  dv[16] =
	      -(27.0 *
	        (820.976 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	edd3 7a00 	vldr	s15, [r3]
 8001fa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fa8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fac:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fb0:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001bf8 <IVK+0xc80>
 8001fb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fb8:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001c00 <IVK+0xc88>
 8001fbc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fc0:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001c08 <IVK+0xc90>
 8001fc4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fc8:	eeb0 0b47 	vmov.f64	d0, d7
 8001fcc:	f012 f8b4 	bl	8014138 <cos>
 8001fd0:	eeb0 7b40 	vmov.f64	d7, d0
 8001fd4:	ed1f 6bf2 	vldr	d6, [pc, #-968]	; 8001c10 <IVK+0xc98>
 8001fd8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fdc:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001fe0:	ee26 8b07 	vmul.f64	d8, d6, d7
	             d_J_inv_tmp_tmp +
	         60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp)) /
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3304      	adds	r3, #4
 8001fec:	ed93 7a00 	vldr	s14, [r3]
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002000:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002004:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 80023d8 <IVK+0x1460>
 8002008:	ee37 7b06 	vadd.f64	d7, d7, d6
 800200c:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 80023e0 <IVK+0x1468>
 8002010:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002014:	eeb0 0b47 	vmov.f64	d0, d7
 8002018:	f012 f88e 	bl	8014138 <cos>
 800201c:	eeb0 7b40 	vmov.f64	d7, d0
 8002020:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 80023e8 <IVK+0x1470>
 8002024:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002028:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800202c:	ee26 7b07 	vmul.f64	d7, d6, d7
	             d_J_inv_tmp_tmp +
 8002030:	ee38 7b07 	vadd.f64	d7, d8, d7
	      -(27.0 *
 8002034:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002038:	ee27 7b06 	vmul.f64	d7, d7, d6
 800203c:	eeb1 5b47 	vneg.f64	d5, d7
	         60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp)) /
 8002040:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 8002044:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[16] =
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	      d11;
	  dv[21] = -(27.0 * (820.976 * J_inv_tmp_tmp + 60.0 * d_J_inv_tmp)) / d11;
 8002050:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002054:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80023f0 <IVK+0x1478>
 8002058:	ee27 6b06 	vmul.f64	d6, d7, d6
 800205c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002060:	ed9f 5be1 	vldr	d5, [pc, #900]	; 80023e8 <IVK+0x1470>
 8002064:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002068:	ee36 7b07 	vadd.f64	d7, d6, d7
 800206c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002070:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002074:	eeb1 5b47 	vneg.f64	d5, d7
 8002078:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800207c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
	  d12 = 2.0 * d11;
 8002088:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 800208c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002090:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002094:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002098:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 80023f8 <IVK+0x1480>
 800209c:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020a0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80020a4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80020a8:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80020ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 80020b0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80020b4:	ee26 6b07 	vmul.f64	d6, d6, d7
	                            d_J_inv_tmp_tmp +
	                        59931.248 * c_J_inv_tmp_tmp * J_inv_tmp_tmp *
 80020b8:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80020bc:	ed9f 5bce 	vldr	d5, [pc, #824]	; 80023f8 <IVK+0x1480>
 80020c0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80020c4:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80020c8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80020cc:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80020d0:	ee25 5b07 	vmul.f64	d5, d5, d7
	                            e_J_inv_tmp * d_J_inv_tmp_tmp) +
 80020d4:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80020d8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                            d_J_inv_tmp_tmp +
 80020dc:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d9 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 80020e0:	ed97 5b4c 	vldr	d5, [r7, #304]	; 0x130
 80020e4:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80020e8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80020ec:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80020f0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                            e_J_inv_tmp * d_J_inv_tmp_tmp) +
 80020f4:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      51432.588 * b_J_inv_tmp * b_J_inv_tmp_tmp * e_J_inv_tmp *
 80020f8:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 80020fc:	ed9f 5bc4 	vldr	d5, [pc, #784]	; 8002410 <IVK+0x1498>
 8002100:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002104:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002108:	ee25 5b07 	vmul.f64	d5, d5, d7
 800210c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002110:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002114:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002118:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       d9 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 800211c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                          d_J_inv_tmp_tmp) +
	                     d10 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002120:	ed97 5b4a 	vldr	d5, [r7, #296]	; 0x128
 8002124:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002128:	ee25 5b07 	vmul.f64	d5, d5, d7
 800212c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002130:	ee25 7b07 	vmul.f64	d7, d5, d7
	                          d_J_inv_tmp_tmp) +
 8002134:	ee36 6b07 	vadd.f64	d6, d6, d7
	                    51432.588 * c_J_inv_tmp_tmp * e_J_inv_tmp_tmp *
 8002138:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 800213c:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8002410 <IVK+0x1498>
 8002140:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002144:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002148:	ee25 5b07 	vmul.f64	d5, d5, d7
 800214c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002150:	ee25 5b07 	vmul.f64	d5, d5, d7
	                        e_J_inv_tmp * d_J_inv_tmp_tmp)) /
 8002154:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002158:	ee25 7b07 	vmul.f64	d7, d5, d7
	                     d10 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 800215c:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002160:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8002438 <IVK+0x14c0>
 8002164:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002168:	eeb1 5b47 	vneg.f64	d5, d7
	                        e_J_inv_tmp * d_J_inv_tmp_tmp)) /
 800216c:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 8002170:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	ed83 7b04 	vstr	d7, [r3, #16]
	          d12;
	  dv[7] =
	      55.0 *
	      (((((59931.248 *
	               cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3304      	adds	r3, #4
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3308      	adds	r3, #8
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800219c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021a0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80021a4:	f107 030c 	add.w	r3, r7, #12
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	330c      	adds	r3, #12
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021b8:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80023d8 <IVK+0x1460>
 80021bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021c0:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80023e0 <IVK+0x1468>
 80021c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021c8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002428 <IVK+0x14b0>
 80021cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021d0:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8002408 <IVK+0x1490>
 80021d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021d8:	eeb0 0b47 	vmov.f64	d0, d7
 80021dc:	f011 ffac 	bl	8014138 <cos>
 80021e0:	eeb0 7b40 	vmov.f64	d7, d0
	      (((((59931.248 *
 80021e4:	ed9f 6b84 	vldr	d6, [pc, #528]	; 80023f8 <IVK+0x1480>
 80021e8:	ee27 8b06 	vmul.f64	d8, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3304      	adds	r3, #4
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	3308      	adds	r3, #8
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800220c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002210:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002214:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80023d8 <IVK+0x1460>
 8002218:	ee37 7b06 	vadd.f64	d7, d7, d6
 800221c:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80023e0 <IVK+0x1468>
 8002220:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002224:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8002428 <IVK+0x14b0>
 8002228:	ee37 7b46 	vsub.f64	d7, d7, d6
 800222c:	eeb0 0b47 	vmov.f64	d0, d7
 8002230:	f011 ff82 	bl	8014138 <cos>
 8002234:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8002238:	ee28 6b07 	vmul.f64	d6, d8, d7
	               cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800223c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002240:	ee26 6b07 	vmul.f64	d6, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp +
 8002244:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002248:	ee26 8b07 	vmul.f64	d8, d6, d7
	           59931.248 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3304      	adds	r3, #4
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3308      	adds	r3, #8
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800226c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002270:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	330c      	adds	r3, #12
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002284:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002288:	ed9f 6b53 	vldr	d6, [pc, #332]	; 80023d8 <IVK+0x1460>
 800228c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002290:	ed9f 6b53 	vldr	d6, [pc, #332]	; 80023e0 <IVK+0x1468>
 8002294:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002298:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8002428 <IVK+0x14b0>
 800229c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022a0:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8002408 <IVK+0x1490>
 80022a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022a8:	eeb0 0b47 	vmov.f64	d0, d7
 80022ac:	f011 ff98 	bl	80141e0 <sin>
 80022b0:	eeb0 7b40 	vmov.f64	d7, d0
	           59931.248 *
 80022b4:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80023f8 <IVK+0x1480>
 80022b8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3304      	adds	r3, #4
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3308      	adds	r3, #8
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80022e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022e4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80023d8 <IVK+0x1460>
 80022e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022ec:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80023e0 <IVK+0x1468>
 80022f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022f4:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8002428 <IVK+0x14b0>
 80022f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022fc:	eeb0 0b47 	vmov.f64	d0, d7
 8002300:	f011 ff6e 	bl	80141e0 <sin>
 8002304:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8002308:	ee29 6b07 	vmul.f64	d6, d9, d7
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800230c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002310:	ee26 6b07 	vmul.f64	d6, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002314:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002318:	ee26 7b07 	vmul.f64	d7, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp +
 800231c:	ee38 8b07 	vadd.f64	d8, d8, d7
	          8760.0 *
	              cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3304      	adds	r3, #4
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3308      	adds	r3, #8
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002340:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002344:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	330c      	adds	r3, #12
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002358:	ee36 7b07 	vadd.f64	d7, d6, d7
 800235c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80023d8 <IVK+0x1460>
 8002360:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002364:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80023e0 <IVK+0x1468>
 8002368:	ee37 7b46 	vsub.f64	d7, d7, d6
 800236c:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8002428 <IVK+0x14b0>
 8002370:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002374:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8002408 <IVK+0x1490>
 8002378:	ee37 7b06 	vadd.f64	d7, d7, d6
 800237c:	eeb0 0b47 	vmov.f64	d0, d7
 8002380:	f011 feda 	bl	8014138 <cos>
 8002384:	eeb0 7b40 	vmov.f64	d7, d0
	          8760.0 *
 8002388:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002400 <IVK+0x1488>
 800238c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3304      	adds	r3, #4
 8002398:	ed93 7a00 	vldr	s14, [r3]
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3308      	adds	r3, #8
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023b0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80023d8 <IVK+0x1460>
 80023b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023b8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80023e0 <IVK+0x1468>
 80023bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023c0:	eeb0 0b47 	vmov.f64	d0, d7
 80023c4:	f011 feb8 	bl	8014138 <cos>
 80023c8:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 80023cc:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	e03b      	b.n	8002450 <IVK+0x14d8>
 80023d8:	45a1cac1 	.word	0x45a1cac1
 80023dc:	3ffaf3b6 	.word	0x3ffaf3b6
 80023e0:	39581062 	.word	0x39581062
 80023e4:	3fecc8b4 	.word	0x3fecc8b4
 80023e8:	00000000 	.word	0x00000000
 80023ec:	404e0000 	.word	0x404e0000
 80023f0:	d916872b 	.word	0xd916872b
 80023f4:	4089a7ce 	.word	0x4089a7ce
 80023f8:	ef9db22d 	.word	0xef9db22d
 80023fc:	40ed4367 	.word	0x40ed4367
 8002400:	00000000 	.word	0x00000000
 8002404:	40c11c00 	.word	0x40c11c00
 8002408:	19ce075f 	.word	0x19ce075f
 800240c:	3ff85a51 	.word	0x3ff85a51
 8002410:	d0e56042 	.word	0xd0e56042
 8002414:	40e91d12 	.word	0x40e91d12
 8002418:	00000000 	.word	0x00000000
 800241c:	404e0000 	.word	0x404e0000
 8002420:	b020c49c 	.word	0xb020c49c
 8002424:	40760472 	.word	0x40760472
 8002428:	05532618 	.word	0x05532618
 800242c:	3fe792a3 	.word	0x3fe792a3
 8002430:	d916872b 	.word	0xd916872b
 8002434:	4079a7ce 	.word	0x4079a7ce
 8002438:	00000000 	.word	0x00000000
 800243c:	404b8000 	.word	0x404b8000
 8002440:	45a1cac1 	.word	0x45a1cac1
 8002444:	3ffaf3b6 	.word	0x3ffaf3b6
 8002448:	39581062 	.word	0x39581062
 800244c:	3fecc8b4 	.word	0x3fecc8b4
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002458:	eeb0 0b47 	vmov.f64	d0, d7
 800245c:	f011 fe6c 	bl	8014138 <cos>
 8002460:	eeb0 7b40 	vmov.f64	d7, d0
 8002464:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002468:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800246c:	ee26 7b07 	vmul.f64	d7, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002470:	ee38 8b07 	vadd.f64	d8, d8, d7
	              e_J_inv_tmp) +
	         51432.588 *
	             cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3304      	adds	r3, #4
 800247c:	edd3 7a00 	vldr	s15, [r3]
 8002480:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002484:	f107 030c 	add.w	r3, r7, #12
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3308      	adds	r3, #8
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002494:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002498:	ee36 6b07 	vadd.f64	d6, d6, d7
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	330c      	adds	r3, #12
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024b0:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8002440 <IVK+0x14c8>
 80024b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80024b8:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8002448 <IVK+0x14d0>
 80024bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024c0:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 8002428 <IVK+0x14b0>
 80024c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024c8:	ed1f 6b31 	vldr	d6, [pc, #-196]	; 8002408 <IVK+0x1490>
 80024cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80024d0:	eeb0 0b47 	vmov.f64	d0, d7
 80024d4:	f011 fe30 	bl	8014138 <cos>
 80024d8:	eeb0 7b40 	vmov.f64	d7, d0
	         51432.588 *
 80024dc:	ed1f 6b34 	vldr	d6, [pc, #-208]	; 8002410 <IVK+0x1498>
 80024e0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3304      	adds	r3, #4
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f4:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002440 <IVK+0x14c8>
 80024f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80024fc:	eeb0 0b47 	vmov.f64	d0, d7
 8002500:	f011 fe1a 	bl	8014138 <cos>
 8002504:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8002508:	ee29 6b07 	vmul.f64	d6, d9, d7
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 800250c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002510:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002514:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002518:	ee26 7b07 	vmul.f64	d7, d6, d7
	              e_J_inv_tmp) +
 800251c:	ee38 8b07 	vadd.f64	d8, d8, d7
	        8760.0 *
	            sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3304      	adds	r3, #4
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3308      	adds	r3, #8
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002540:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002544:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	330c      	adds	r3, #12
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002558:	ee36 7b07 	vadd.f64	d7, d6, d7
 800255c:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 8002440 <IVK+0x14c8>
 8002560:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002564:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 8002448 <IVK+0x14d0>
 8002568:	ee37 7b46 	vsub.f64	d7, d7, d6
 800256c:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 8002428 <IVK+0x14b0>
 8002570:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002574:	ed1f 6b5c 	vldr	d6, [pc, #-368]	; 8002408 <IVK+0x1490>
 8002578:	ee37 7b06 	vadd.f64	d7, d7, d6
 800257c:	eeb0 0b47 	vmov.f64	d0, d7
 8002580:	f011 fe2e 	bl	80141e0 <sin>
 8002584:	eeb0 7b40 	vmov.f64	d7, d0
	        8760.0 *
 8002588:	ed1f 6b63 	vldr	d6, [pc, #-396]	; 8002400 <IVK+0x1488>
 800258c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                 -0.73665) +
	                1.52205) *
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3304      	adds	r3, #4
 8002598:	ed93 7a00 	vldr	s14, [r3]
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3308      	adds	r3, #8
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025b0:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 8002440 <IVK+0x14c8>
 80025b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80025b8:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 8002448 <IVK+0x14d0>
 80025bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80025c0:	eeb0 0b47 	vmov.f64	d0, d7
 80025c4:	f011 fe0c 	bl	80141e0 <sin>
 80025c8:	eeb0 7b40 	vmov.f64	d7, d0
	                1.52205) *
 80025cc:	ee29 9b07 	vmul.f64	d9, d9, d7
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025de:	eeb0 0b47 	vmov.f64	d0, d7
 80025e2:	f011 fda9 	bl	8014138 <cos>
 80025e6:	eeb0 7b40 	vmov.f64	d7, d0
 80025ea:	ee29 6b07 	vmul.f64	d6, d9, d7
 80025ee:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80025f2:	ee26 7b07 	vmul.f64	d7, d6, d7
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 80025f6:	ee38 8b07 	vadd.f64	d8, d8, d7
	       51432.588 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3304      	adds	r3, #4
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3308      	adds	r3, #8
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800261a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800261e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002622:	f107 030c 	add.w	r3, r7, #12
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002632:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002636:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8002440 <IVK+0x14c8>
 800263a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800263e:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8002448 <IVK+0x14d0>
 8002642:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002646:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 8002428 <IVK+0x14b0>
 800264a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800264e:	ed1f 6b92 	vldr	d6, [pc, #-584]	; 8002408 <IVK+0x1490>
 8002652:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002656:	eeb0 0b47 	vmov.f64	d0, d7
 800265a:	f011 fdc1 	bl	80141e0 <sin>
 800265e:	eeb0 7b40 	vmov.f64	d7, d0
	       51432.588 *
 8002662:	ed1f 6b95 	vldr	d6, [pc, #-596]	; 8002410 <IVK+0x1498>
 8002666:	ee27 9b06 	vmul.f64	d9, d7, d6
	                -0.73665) +
	               1.52205) *
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3304      	adds	r3, #4
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800267a:	ed1f 6b8f 	vldr	d6, [pc, #-572]	; 8002440 <IVK+0x14c8>
 800267e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002682:	eeb0 0b47 	vmov.f64	d0, d7
 8002686:	f011 fdab 	bl	80141e0 <sin>
 800268a:	eeb0 7b40 	vmov.f64	d7, d0
	               1.52205) *
 800268e:	ee29 6b07 	vmul.f64	d6, d9, d7
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 8002692:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002696:	ee26 6b07 	vmul.f64	d6, d6, d7
 800269a:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800269e:	ee26 7b07 	vmul.f64	d7, d6, d7
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 80026a2:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 80026a6:	ed1f 6b9c 	vldr	d6, [pc, #-624]	; 8002438 <IVK+0x14c0>
 80026aa:	ee27 5b06 	vmul.f64	d5, d7, d6
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80026ae:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 80026b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[7] =
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	      d12;
	  dv[12] =
	      55.0 *
	      ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3304      	adds	r3, #4
 80026c6:	ed93 7a00 	vldr	s14, [r3]
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3308      	adds	r3, #8
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026de:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8002440 <IVK+0x14c8>
 80026e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026e6:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8002448 <IVK+0x14d0>
 80026ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80026ee:	eeb0 0b47 	vmov.f64	d0, d7
 80026f2:	f011 fd21 	bl	8014138 <cos>
 80026f6:	eeb0 7b40 	vmov.f64	d7, d0
 80026fa:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8002418 <IVK+0x14a0>
 80026fe:	ee27 8b06 	vmul.f64	d8, d7, d6
 8002702:	f107 030c 	add.w	r3, r7, #12
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002710:	eeb0 0b47 	vmov.f64	d0, d7
 8002714:	f011 fd10 	bl	8014138 <cos>
 8002718:	eeb0 7b40 	vmov.f64	d7, d0
 800271c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002720:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002724:	ee26 8b07 	vmul.f64	d8, d6, d7
	            e_J_inv_tmp +
	        352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3304      	adds	r3, #4
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002738:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 8002440 <IVK+0x14c8>
 800273c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002740:	eeb0 0b47 	vmov.f64	d0, d7
 8002744:	f011 fcf8 	bl	8014138 <cos>
 8002748:	eeb0 7b40 	vmov.f64	d7, d0
 800274c:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8002420 <IVK+0x14a8>
 8002750:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002754:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002758:	ee26 6b07 	vmul.f64	d6, d6, d7
 800275c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002760:	ee26 7b07 	vmul.f64	d7, d6, d7
	            e_J_inv_tmp +
 8002764:	ee38 8b07 	vadd.f64	d8, d8, d7
	       410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3304      	adds	r3, #4
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3308      	adds	r3, #8
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002788:	ee37 7b07 	vadd.f64	d7, d7, d7
 800278c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002790:	ed1f 6bd5 	vldr	d6, [pc, #-852]	; 8002440 <IVK+0x14c8>
 8002794:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002798:	ed1f 6bd5 	vldr	d6, [pc, #-852]	; 8002448 <IVK+0x14d0>
 800279c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80027a0:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8002428 <IVK+0x14b0>
 80027a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80027a8:	eeb0 0b47 	vmov.f64	d0, d7
 80027ac:	f011 fcc4 	bl	8014138 <cos>
 80027b0:	eeb0 7b40 	vmov.f64	d7, d0
 80027b4:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8002430 <IVK+0x14b8>
 80027b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80027bc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80027c0:	ee26 6b07 	vmul.f64	d6, d6, d7
	           f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80027c4:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80027c8:	ee26 7b07 	vmul.f64	d7, d6, d7
	        352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 80027cc:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 80027d0:	ed1f 6be7 	vldr	d6, [pc, #-924]	; 8002438 <IVK+0x14c0>
 80027d4:	ee27 5b06 	vmul.f64	d5, d7, d6
	           f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80027d8:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 80027dc:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[12] =
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	      d12;
	  dv[17] =
	      55.0 *
	      ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp *
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3304      	adds	r3, #4
 80027f0:	ed93 7a00 	vldr	s14, [r3]
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3308      	adds	r3, #8
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002808:	ed1f 6bf3 	vldr	d6, [pc, #-972]	; 8002440 <IVK+0x14c8>
 800280c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002810:	ed1f 6bf3 	vldr	d6, [pc, #-972]	; 8002448 <IVK+0x14d0>
 8002814:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002818:	eeb0 0b47 	vmov.f64	d0, d7
 800281c:	f011 fc8c 	bl	8014138 <cos>
 8002820:	eeb0 7b40 	vmov.f64	d7, d0
 8002824:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 8002bf8 <IVK+0x1c80>
 8002828:	ee27 6b06 	vmul.f64	d6, d7, d6
 800282c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002830:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002834:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002838:	ee26 8b07 	vmul.f64	d8, d6, d7
	            d_J_inv_tmp_tmp +
	        352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3304      	adds	r3, #4
 8002844:	edd3 7a00 	vldr	s15, [r3]
 8002848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800284c:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8002c00 <IVK+0x1c88>
 8002850:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002854:	eeb0 0b47 	vmov.f64	d0, d7
 8002858:	f011 fc6e 	bl	8014138 <cos>
 800285c:	eeb0 7b40 	vmov.f64	d7, d0
 8002860:	ed9f 6be9 	vldr	d6, [pc, #932]	; 8002c08 <IVK+0x1c90>
 8002864:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002868:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800286c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002870:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002874:	ee26 7b07 	vmul.f64	d7, d6, d7
	            d_J_inv_tmp_tmp +
 8002878:	ee38 8b07 	vadd.f64	d8, d8, d7
	       410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3304      	adds	r3, #4
 8002884:	edd3 7a00 	vldr	s15, [r3]
 8002888:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3308      	adds	r3, #8
 8002894:	edd3 7a00 	vldr	s15, [r3]
 8002898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800289c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80028a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80028a4:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8002c00 <IVK+0x1c88>
 80028a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028ac:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8002c38 <IVK+0x1cc0>
 80028b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028b4:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8002c40 <IVK+0x1cc8>
 80028b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028bc:	eeb0 0b47 	vmov.f64	d0, d7
 80028c0:	f011 fc3a 	bl	8014138 <cos>
 80028c4:	eeb0 7b40 	vmov.f64	d7, d0
 80028c8:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 8002c10 <IVK+0x1c98>
 80028cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80028d0:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80028d4:	ee26 6b07 	vmul.f64	d6, d6, d7
	           e_J_inv_tmp * d_J_inv_tmp_tmp) /
 80028d8:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80028dc:	ee26 7b07 	vmul.f64	d7, d6, d7
	        352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 80028e0:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 80028e4:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8002c18 <IVK+0x1ca0>
 80028e8:	ee27 5b06 	vmul.f64	d5, d7, d6
	           e_J_inv_tmp * d_J_inv_tmp_tmp) /
 80028ec:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 80028f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[17] =
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	      d12;
	  dv[22] = 55.0 *
	           ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp +
 80028fc:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002900:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002c10 <IVK+0x1c98>
 8002904:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002908:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800290c:	ee26 8b07 	vmul.f64	d8, d6, d7
	             60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) +
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3304      	adds	r3, #4
 8002918:	ed93 7a00 	vldr	s14, [r3]
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3308      	adds	r3, #8
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800292c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002930:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8002c00 <IVK+0x1c88>
 8002934:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002938:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8002c38 <IVK+0x1cc0>
 800293c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002940:	eeb0 0b47 	vmov.f64	d0, d7
 8002944:	f011 fc4c 	bl	80141e0 <sin>
 8002948:	eeb0 7b40 	vmov.f64	d7, d0
 800294c:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8002bf8 <IVK+0x1c80>
 8002950:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002954:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002958:	ee26 7b07 	vmul.f64	d7, d6, d7
	           ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp +
 800295c:	ee38 6b07 	vadd.f64	d6, d8, d7
	            352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) /
 8002960:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002964:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8002c08 <IVK+0x1c90>
 8002968:	ee27 5b05 	vmul.f64	d5, d7, d5
 800296c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002970:	ee25 7b07 	vmul.f64	d7, d5, d7
	             60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) +
 8002974:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[22] = 55.0 *
 8002978:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002c18 <IVK+0x1ca0>
 800297c:	ee27 5b06 	vmul.f64	d5, d7, d6
	            352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) /
 8002980:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 8002984:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[22] = 55.0 *
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	           d12;
	  d9 = 21136.68 *
	       sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3304      	adds	r3, #4
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3308      	adds	r3, #8
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80029b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029cc:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8002c00 <IVK+0x1c88>
 80029d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029d4:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002c38 <IVK+0x1cc0>
 80029d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80029dc:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002c40 <IVK+0x1cc8>
 80029e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80029e4:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8002c78 <IVK+0x1d00>
 80029e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029ec:	eeb0 0b47 	vmov.f64	d0, d7
 80029f0:	f011 fbf6 	bl	80141e0 <sin>
 80029f4:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 21136.68 *
 80029f8:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8002c20 <IVK+0x1ca8>
 80029fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a00:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	           1.52205);
	  d10 = d9 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	ed93 7a00 	vldr	s14, [r3]
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3308      	adds	r3, #8
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a24:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8002c00 <IVK+0x1c88>
 8002a28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a2c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8002c38 <IVK+0x1cc0>
 8002a30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a34:	eeb0 0b47 	vmov.f64	d0, d7
 8002a38:	f011 fb7e 	bl	8014138 <cos>
 8002a3c:	eeb0 6b40 	vmov.f64	d6, d0
 8002a40:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8002a44:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a48:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 8002a4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a50:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	  d9 = d9 * d2 * b_J_inv_tmp_tmp;
 8002a54:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8002a58:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8002a5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a60:	ed97 6b70 	vldr	d6, [r7, #448]	; 0x1c0
 8002a64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a68:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	  d12 = 24629.28 *
	        sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3304      	adds	r3, #4
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3308      	adds	r3, #8
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a8c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002a90:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aa4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002aa8:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8002c00 <IVK+0x1c88>
 8002aac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ab0:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002c38 <IVK+0x1cc0>
 8002ab4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ab8:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002c40 <IVK+0x1cc8>
 8002abc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ac0:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8002c78 <IVK+0x1d00>
 8002ac4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ac8:	eeb0 0b47 	vmov.f64	d0, d7
 8002acc:	f011 fb88 	bl	80141e0 <sin>
 8002ad0:	eeb0 7b40 	vmov.f64	d7, d0
	  d12 = 24629.28 *
 8002ad4:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8002c28 <IVK+0x1cb0>
 8002ad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002adc:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	            1.52205);
	  d2 *= d12 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002af0:	f107 030c 	add.w	r3, r7, #12
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3308      	adds	r3, #8
 8002af8:	edd3 7a00 	vldr	s15, [r3]
 8002afc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002b04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b08:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8002c00 <IVK+0x1c88>
 8002b0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b10:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002c38 <IVK+0x1cc0>
 8002b14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b18:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002c40 <IVK+0x1cc8>
 8002b1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b20:	eeb0 0b47 	vmov.f64	d0, d7
 8002b24:	f011 fb08 	bl	8014138 <cos>
 8002b28:	eeb0 6b40 	vmov.f64	d6, d0
 8002b2c:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8002b30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b34:	ed97 6b5a 	vldr	d6, [r7, #360]	; 0x168
 8002b38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b3c:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
	  d12 = d12 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002b40:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 8002b44:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002b48:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002b4c:	f107 030c 	add.w	r3, r7, #12
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3304      	adds	r3, #4
 8002b54:	ed93 7a00 	vldr	s14, [r3]
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3308      	adds	r3, #8
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b6c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8002c00 <IVK+0x1c88>
 8002b70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b74:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8002c38 <IVK+0x1cc0>
 8002b78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b7c:	eeb0 0b47 	vmov.f64	d0, d7
 8002b80:	f011 fada 	bl	8014138 <cos>
 8002b84:	eeb0 7b40 	vmov.f64	d7, d0
 8002b88:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002b8c:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	  e_J_inv_tmp =
	      289211.783328 *
	      sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3304      	adds	r3, #4
 8002b98:	edd3 7a00 	vldr	s15, [r3]
 8002b9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bb0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002bb4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002bb8:	f107 030c 	add.w	r3, r7, #12
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bc8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002bcc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8002c00 <IVK+0x1c88>
 8002bd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002bd4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002c38 <IVK+0x1cc0>
 8002bd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002bdc:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002c40 <IVK+0x1cc8>
 8002be0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002be4:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8002c78 <IVK+0x1d00>
 8002be8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002bec:	eeb0 0b47 	vmov.f64	d0, d7
 8002bf0:	e05a      	b.n	8002ca8 <IVK+0x1d30>
 8002bf2:	bf00      	nop
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	404e0000 	.word	0x404e0000
 8002c00:	45a1cac1 	.word	0x45a1cac1
 8002c04:	3ffaf3b6 	.word	0x3ffaf3b6
 8002c08:	b020c49c 	.word	0xb020c49c
 8002c0c:	40760472 	.word	0x40760472
 8002c10:	d916872b 	.word	0xd916872b
 8002c14:	4079a7ce 	.word	0x4079a7ce
 8002c18:	00000000 	.word	0x00000000
 8002c1c:	404b8000 	.word	0x404b8000
 8002c20:	851eb852 	.word	0x851eb852
 8002c24:	40d4a42b 	.word	0x40d4a42b
 8002c28:	eb851eb8 	.word	0xeb851eb8
 8002c2c:	40d80d51 	.word	0x40d80d51
 8002c30:	2220bc38 	.word	0x2220bc38
 8002c34:	4111a6ef 	.word	0x4111a6ef
 8002c38:	39581062 	.word	0x39581062
 8002c3c:	3fecc8b4 	.word	0x3fecc8b4
 8002c40:	05532618 	.word	0x05532618
 8002c44:	3fe792a3 	.word	0x3fe792a3
 8002c48:	28f5c28f 	.word	0x28f5c28f
 8002c4c:	410b0efc 	.word	0x410b0efc
 8002c50:	0664d3c0 	.word	0x0664d3c0
 8002c54:	4143dbcd 	.word	0x4143dbcd
 8002c58:	f5c28f5d 	.word	0xf5c28f5d
 8002c5c:	410738b0 	.word	0x410738b0
 8002c60:	00000000 	.word	0x00000000
 8002c64:	40f56300 	.word	0x40f56300
 8002c68:	851eb852 	.word	0x851eb852
 8002c6c:	412f6457 	.word	0x412f6457
 8002c70:	66666666 	.word	0x66666666
 8002c74:	410e10a6 	.word	0x410e10a6
 8002c78:	19ce075f 	.word	0x19ce075f
 8002c7c:	3ff85a51 	.word	0x3ff85a51
 8002c80:	05532618 	.word	0x05532618
 8002c84:	3fe792a3 	.word	0x3fe792a3
 8002c88:	eaa8eb47 	.word	0xeaa8eb47
 8002c8c:	414610aa 	.word	0x414610aa
 8002c90:	66666667 	.word	0x66666667
 8002c94:	4109cd36 	.word	0x4109cd36
 8002c98:	45a1cac1 	.word	0x45a1cac1
 8002c9c:	3ffaf3b6 	.word	0x3ffaf3b6
 8002ca0:	39581062 	.word	0x39581062
 8002ca4:	3fecc8b4 	.word	0x3fecc8b4
 8002ca8:	f011 fa9a 	bl	80141e0 <sin>
 8002cac:	eeb0 7b40 	vmov.f64	d7, d0
	  e_J_inv_tmp =
 8002cb0:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8002c30 <IVK+0x1cb8>
 8002cb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cb8:	ed87 7b5e 	vstr	d7, [r7, #376]	; 0x178
	          1.52205);
	  d13 = e_J_inv_tmp *
	        cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ccc:	f107 030c 	add.w	r3, r7, #12
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	edd3 7a00 	vldr	s15, [r3]
 8002cd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cdc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002ce0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ce4:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8002c98 <IVK+0x1d20>
 8002ce8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002cec:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002c38 <IVK+0x1cc0>
 8002cf0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002cf4:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002c40 <IVK+0x1cc8>
 8002cf8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002cfc:	eeb0 0b47 	vmov.f64	d0, d7
 8002d00:	f011 fa1a 	bl	8014138 <cos>
 8002d04:	eeb0 6b40 	vmov.f64	d6, d0
	  d13 = e_J_inv_tmp *
 8002d08:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002d0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d10:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 8002d14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d18:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
	        e_J_inv_tmp_tmp;
	  e_J_inv_tmp = e_J_inv_tmp * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8002d1c:	ed97 6b5e 	vldr	d6, [r7, #376]	; 0x178
 8002d20:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002d24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d28:	ed97 6b70 	vldr	d6, [r7, #448]	; 0x1c0
 8002d2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d30:	ed87 7b5e 	vstr	d7, [r7, #376]	; 0x178
	  d14 = c_J_inv_tmp_tmp * c_J_inv_tmp_tmp;
 8002d34:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002d38:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002d3c:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
	  d15 = 87600.0 * d14 * d_J_inv_tmp;
 8002d40:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8002d44:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8002c60 <IVK+0x1ce8>
 8002d48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d4c:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8002d50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d54:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
	  d14 = 1.02865176E+6 * d14 * e_J_inv_tmp_tmp;
 8002d58:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8002d5c:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8002c68 <IVK+0x1cf0>
 8002d60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d64:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 8002d68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d6c:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
	  d16 = d15 * d_J_inv_tmp_tmp;
 8002d70:	ed97 6b40 	vldr	d6, [r7, #256]	; 0x100
 8002d74:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002d78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d7c:	ed87 7b3e 	vstr	d7, [r7, #248]	; 0xf8
	  d17 = d14 * d_J_inv_tmp_tmp;
 8002d80:	ed97 6b42 	vldr	d6, [r7, #264]	; 0x108
 8002d84:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002d88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d8c:	ed87 7b3c 	vstr	d7, [r7, #240]	; 0xf0
	  dv[3] =
	      4.0 *
	      (((((((((((((((221663.52 * J_inv_tmp * d_J_inv_tmp * f_J_inv_tmp_tmp -
 8002d90:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8002d94:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8002c48 <IVK+0x1cd0>
 8002d98:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d9c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002da0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002da4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002da8:	ee26 6b07 	vmul.f64	d6, d6, d7
	                     221663.52 * J_inv_tmp_tmp * c_J_inv_tmp *
 8002dac:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002db0:	ed1f 5b5b 	vldr	d5, [pc, #-364]	; 8002c48 <IVK+0x1cd0>
 8002db4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002db8:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002dbc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002dc0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002dc4:	ee25 7b07 	vmul.f64	d7, d5, d7
	      (((((((((((((((221663.52 * J_inv_tmp * d_J_inv_tmp * f_J_inv_tmp_tmp -
 8002dc8:	ee36 6b47 	vsub.f64	d6, d6, d7
	                         f_J_inv_tmp_tmp) +
	                    2.6029060499520004E+6 * J_inv_tmp * e_J_inv_tmp_tmp *
 8002dcc:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8002dd0:	ed1f 5b61 	vldr	d5, [pc, #-388]	; 8002c50 <IVK+0x1cd8>
 8002dd4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002dd8:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002ddc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002de0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002de4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                         f_J_inv_tmp_tmp) +
 8002de8:	ee36 6b07 	vadd.f64	d6, d6, d7
	                        f_J_inv_tmp_tmp) -
	                   2.6029060499520004E+6 * J_inv_tmp_tmp * b_J_inv_tmp_tmp *
 8002dec:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002df0:	ed1f 5b69 	vldr	d5, [pc, #-420]	; 8002c50 <IVK+0x1cd8>
 8002df4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002df8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002dfc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e00:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002e04:	ee25 7b07 	vmul.f64	d7, d5, d7
	                        f_J_inv_tmp_tmp) -
 8002e08:	ee36 6b47 	vsub.f64	d6, d6, d7
	                       f_J_inv_tmp_tmp) +
	                  190230.12000000002 * c_J_inv_tmp * e_J_inv_tmp_tmp *
 8002e0c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002e10:	ed1f 5b6f 	vldr	d5, [pc, #-444]	; 8002c58 <IVK+0x1ce0>
 8002e14:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002e18:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002e1c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e20:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002e24:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       f_J_inv_tmp_tmp) +
 8002e28:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      f_J_inv_tmp_tmp) -
	                 190230.12000000002 * d_J_inv_tmp * b_J_inv_tmp_tmp *
 8002e2c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002e30:	ed1f 5b77 	vldr	d5, [pc, #-476]	; 8002c58 <IVK+0x1ce0>
 8002e34:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002e38:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002e3c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e40:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002e44:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      f_J_inv_tmp_tmp) -
 8002e48:	ee36 6b47 	vsub.f64	d6, d6, d7
	                     f_J_inv_tmp_tmp) +
 8002e4c:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8002e50:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d16) +
 8002e54:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 8002e58:	ee36 6b07 	vadd.f64	d6, d6, d7
	               d17) +
	              87600.0 * b_J_inv_tmp * c_J_inv_tmp_tmp * c_J_inv_tmp *
 8002e5c:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002e60:	ed1f 5b81 	vldr	d5, [pc, #-516]	; 8002c60 <IVK+0x1ce8>
 8002e64:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002e68:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002e6c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e70:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002e74:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e78:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002e7c:	ee25 7b07 	vmul.f64	d7, d5, d7
	               d17) +
 8002e80:	ee36 6b07 	vadd.f64	d6, d6, d7
	                  d_J_inv_tmp_tmp) +
	             1.02865176E+6 * b_J_inv_tmp * c_J_inv_tmp_tmp * b_J_inv_tmp_tmp *
 8002e84:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002e88:	ed1f 5b89 	vldr	d5, [pc, #-548]	; 8002c68 <IVK+0x1cf0>
 8002e8c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002e90:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002e94:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e98:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002e9c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002ea0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002ea4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d_J_inv_tmp_tmp) +
 8002ea8:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d_J_inv_tmp_tmp) +
	            246292.8 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp *
 8002eac:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002eb0:	ed1f 5b91 	vldr	d5, [pc, #-580]	; 8002c70 <IVK+0x1cf8>
 8002eb4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002eb8:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8002ebc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002ec0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002ec4:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002ec8:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002ecc:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d_J_inv_tmp_tmp) +
 8002ed0:	ee36 8b07 	vadd.f64	d8, d6, d7
	                d_J_inv_tmp_tmp) -
	           246292.8 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3304      	adds	r3, #4
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ee4:	f107 030c 	add.w	r3, r7, #12
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3308      	adds	r3, #8
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ef4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002ef8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f10:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8002c98 <IVK+0x1d20>
 8002f14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f18:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8002ca0 <IVK+0x1d28>
 8002f1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f20:	ed1f 6ba9 	vldr	d6, [pc, #-676]	; 8002c80 <IVK+0x1d08>
 8002f24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f28:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 8002c78 <IVK+0x1d00>
 8002f2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f30:	eeb0 0b47 	vmov.f64	d0, d7
 8002f34:	f011 f954 	bl	80141e0 <sin>
 8002f38:	eeb0 7b40 	vmov.f64	d7, d0
	           246292.8 *
 8002f3c:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8002c70 <IVK+0x1cf8>
 8002f40:	ee27 6b06 	vmul.f64	d6, d7, d6
	                    -0.73665) +
	                   1.52205) *
 8002f44:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002f48:	ee26 6b07 	vmul.f64	d6, d6, d7
	               J_inv_tmp_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002f4c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002f50:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002f54:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002f58:	ee26 7b07 	vmul.f64	d7, d6, d7
	                d_J_inv_tmp_tmp) -
 8002f5c:	ee38 6b47 	vsub.f64	d6, d8, d7
	          2.8921178332800004E+6 * c_J_inv_tmp_tmp * J_inv_tmp *
 8002f60:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002f64:	ed1f 5bb8 	vldr	d5, [pc, #-736]	; 8002c88 <IVK+0x1d10>
 8002f68:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002f6c:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8002f70:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002f74:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002f78:	ee25 5b07 	vmul.f64	d5, d5, d7
	              e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) -
 8002f7c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002f80:	ee25 7b07 	vmul.f64	d7, d5, d7
	               J_inv_tmp_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002f84:	ee36 8b07 	vadd.f64	d8, d6, d7
	         2.8921178332800004E+6 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002f98:	f107 030c 	add.w	r3, r7, #12
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	edd3 7a00 	vldr	s15, [r3]
 8002fa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fa8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002fac:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	330c      	adds	r3, #12
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fc0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002fc4:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8002c98 <IVK+0x1d20>
 8002fc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002fcc:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8002ca0 <IVK+0x1d28>
 8002fd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002fd4:	ed1f 6bd6 	vldr	d6, [pc, #-856]	; 8002c80 <IVK+0x1d08>
 8002fd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002fdc:	ed1f 6bda 	vldr	d6, [pc, #-872]	; 8002c78 <IVK+0x1d00>
 8002fe0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002fe4:	eeb0 0b47 	vmov.f64	d0, d7
 8002fe8:	f011 f8fa 	bl	80141e0 <sin>
 8002fec:	eeb0 7b40 	vmov.f64	d7, d0
	         2.8921178332800004E+6 *
 8002ff0:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8002c88 <IVK+0x1d10>
 8002ff4:	ee27 6b06 	vmul.f64	d6, d7, d6
	                  -0.73665) +
	                 1.52205) *
 8002ff8:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002ffc:	ee26 6b07 	vmul.f64	d6, d6, d7
	             J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8003000:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003004:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003008:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800300c:	ee26 7b07 	vmul.f64	d7, d6, d7
	              e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) -
 8003010:	ee38 6b47 	vsub.f64	d6, d8, d7
	        211366.80000000002 * c_J_inv_tmp_tmp * c_J_inv_tmp * e_J_inv_tmp_tmp *
 8003014:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003018:	ed1f 5be3 	vldr	d5, [pc, #-908]	; 8002c90 <IVK+0x1d18>
 800301c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003020:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003024:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003028:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800302c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003030:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003034:	ee25 7b07 	vmul.f64	d7, d5, d7
	             J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8003038:	ee36 8b07 	vadd.f64	d8, d6, d7
	            d_J_inv_tmp_tmp) -
	       211366.80000000002 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800303c:	f107 030c 	add.w	r3, r7, #12
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3304      	adds	r3, #4
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3308      	adds	r3, #8
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800305c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003060:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003064:	f107 030c 	add.w	r3, r7, #12
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	edd3 7a00 	vldr	s15, [r3]
 8003070:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003074:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003078:	ed1f 6bf9 	vldr	d6, [pc, #-996]	; 8002c98 <IVK+0x1d20>
 800307c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003080:	ed1f 6bf9 	vldr	d6, [pc, #-996]	; 8002ca0 <IVK+0x1d28>
 8003084:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003088:	ed9f 6bf9 	vldr	d6, [pc, #996]	; 8003470 <IVK+0x24f8>
 800308c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003090:	ed9f 6bf9 	vldr	d6, [pc, #996]	; 8003478 <IVK+0x2500>
 8003094:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003098:	eeb0 0b47 	vmov.f64	d0, d7
 800309c:	f011 f8a0 	bl	80141e0 <sin>
 80030a0:	eeb0 7b40 	vmov.f64	d7, d0
	       211366.80000000002 *
 80030a4:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8003480 <IVK+0x2508>
 80030a8:	ee27 6b06 	vmul.f64	d6, d7, d6
	                -0.73665) +
	               1.52205) *
 80030ac:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80030b0:	ee26 6b07 	vmul.f64	d6, d6, d7
	           d_J_inv_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) /
 80030b4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80030b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030bc:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80030c0:	ee26 7b07 	vmul.f64	d7, d6, d7
	            d_J_inv_tmp_tmp) -
 80030c4:	ee38 7b47 	vsub.f64	d7, d8, d7
	      4.0 *
 80030c8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80030cc:	ee27 8b06 	vmul.f64	d8, d7, d6
	      (9.0 *
	       (((((((((((21136.68 * c_J_inv_tmp_tmp * c_J_inv_tmp * e_J_inv_tmp_tmp *
 80030d0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80030d4:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8003488 <IVK+0x2510>
 80030d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80030dc:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80030e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030e4:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80030e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030ec:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80030f0:	ee26 9b07 	vmul.f64	d9, d6, d7
	                      d -
	                  21136.68 *
	                      sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3304      	adds	r3, #4
 80030fc:	edd3 7a00 	vldr	s15, [r3]
 8003100:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003104:	f107 030c 	add.w	r3, r7, #12
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3308      	adds	r3, #8
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003114:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003118:	ee36 6b07 	vadd.f64	d6, d6, d7
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800312c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003130:	ed9f 6be3 	vldr	d6, [pc, #908]	; 80034c0 <IVK+0x2548>
 8003134:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003138:	ed9f 6be3 	vldr	d6, [pc, #908]	; 80034c8 <IVK+0x2550>
 800313c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003140:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8003470 <IVK+0x24f8>
 8003144:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003148:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8003478 <IVK+0x2500>
 800314c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003150:	eeb0 0b47 	vmov.f64	d0, d7
 8003154:	f011 f844 	bl	80141e0 <sin>
 8003158:	eeb0 7b40 	vmov.f64	d7, d0
	                  21136.68 *
 800315c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8003488 <IVK+0x2510>
 8003160:	ee27 6b06 	vmul.f64	d6, d7, d6
	                           -0.73665) +
	                          1.52205) *
 8003164:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003168:	ee26 6b07 	vmul.f64	d6, d6, d7
	                      d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 800316c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003170:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003174:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003178:	ee26 7b07 	vmul.f64	d7, d6, d7
	                      d -
 800317c:	ee39 6b47 	vsub.f64	d6, d9, d7
	                 d10 * d1) -
 8003180:	ed97 5b4a 	vldr	d5, [r7, #296]	; 0x128
 8003184:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8003188:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 800318c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d9 * d1) +
 8003190:	ed97 5b4c 	vldr	d5, [r7, #304]	; 0x130
 8003194:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8003198:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d10 * d1) -
 800319c:	ee36 6b47 	vsub.f64	d6, d6, d7
	               24629.28 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp * d) -
 80031a0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80031a4:	ed9f 5bba 	vldr	d5, [pc, #744]	; 8003490 <IVK+0x2518>
 80031a8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80031ac:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80031b0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80031b4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80031b8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80031bc:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80031c0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d9 * d1) +
 80031c4:	ee36 9b07 	vadd.f64	d9, d6, d7
	              24629.28 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80031c8:	f107 030c 	add.w	r3, r7, #12
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3304      	adds	r3, #4
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	edd3 7a00 	vldr	s15, [r3]
 80031e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80031ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003200:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003204:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80034c0 <IVK+0x2548>
 8003208:	ee37 7b06 	vadd.f64	d7, d7, d6
 800320c:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80034c8 <IVK+0x2550>
 8003210:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003214:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8003470 <IVK+0x24f8>
 8003218:	ee37 7b46 	vsub.f64	d7, d7, d6
 800321c:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8003478 <IVK+0x2500>
 8003220:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003224:	eeb0 0b47 	vmov.f64	d0, d7
 8003228:	f010 ffda 	bl	80141e0 <sin>
 800322c:	eeb0 7b40 	vmov.f64	d7, d0
	              24629.28 *
 8003230:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8003490 <IVK+0x2518>
 8003234:	ee27 6b06 	vmul.f64	d6, d7, d6
	                       -0.73665) +
	                      1.52205) *
 8003238:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 800323c:	ee26 6b07 	vmul.f64	d6, d6, d7
	                  J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8003240:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003244:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003248:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 800324c:	ee26 7b07 	vmul.f64	d7, d6, d7
	               24629.28 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp * d) -
 8003250:	ee39 6b47 	vsub.f64	d6, d9, d7
	             d2 * d1) -
 8003254:	ed97 5b5a 	vldr	d5, [r7, #360]	; 0x168
 8003258:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800325c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8003260:	ee36 6b07 	vadd.f64	d6, d6, d7
	            d12 * d1) +
 8003264:	ed97 5b46 	vldr	d5, [r7, #280]	; 0x118
 8003268:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800326c:	ee25 7b07 	vmul.f64	d7, d5, d7
	             d2 * d1) -
 8003270:	ee36 6b47 	vsub.f64	d6, d6, d7
	           289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8003274:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003278:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8003498 <IVK+0x2520>
 800327c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003280:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003284:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003288:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800328c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003290:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003294:	ee25 7b07 	vmul.f64	d7, d5, d7
	            d12 * d1) +
 8003298:	ee36 6b07 	vadd.f64	d6, d6, d7
	          e_J_inv_tmp * d) +
 800329c:	ed97 5b5e 	vldr	d5, [r7, #376]	; 0x178
 80032a0:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80032a4:	ee25 7b07 	vmul.f64	d7, d5, d7
	           289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 80032a8:	ee36 6b47 	vsub.f64	d6, d6, d7
	         d13 * d1) -
 80032ac:	ed97 5b44 	vldr	d5, [r7, #272]	; 0x110
 80032b0:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80032b4:	ee25 7b07 	vmul.f64	d7, d5, d7
	          e_J_inv_tmp * d) +
 80032b8:	ee36 6b07 	vadd.f64	d6, d6, d7
	        e_J_inv_tmp * d1));
 80032bc:	ed97 5b5e 	vldr	d5, [r7, #376]	; 0x178
 80032c0:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80032c4:	ee25 7b07 	vmul.f64	d7, d5, d7
	         d13 * d1) -
 80032c8:	ee36 7b47 	vsub.f64	d7, d6, d7
	      (9.0 *
 80032cc:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80032d0:	ee27 6b06 	vmul.f64	d6, d7, d6
	           d_J_inv_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) /
 80032d4:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[3] =
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	ed83 7b06 	vstr	d7, [r3, #24]
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80032e0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80032e4:	ee27 6b07 	vmul.f64	d6, d7, d7
 80032e8:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 80032ec:	ee26 6b07 	vmul.f64	d6, d6, d7
	                       d9 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80032f0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80032f4:	ee27 5b07 	vmul.f64	d5, d7, d7
 80032f8:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 80032fc:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8003300:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d10 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003304:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003308:	ee27 5b07 	vmul.f64	d5, d7, d7
 800330c:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8003310:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       d9 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003314:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d9 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003318:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800331c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003320:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8003324:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      d10 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003328:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d2 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800332c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003330:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003334:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8003338:	ee25 7b07 	vmul.f64	d7, d5, d7
	                     d9 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800333c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d12 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003340:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003344:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003348:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800334c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                    d2 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003350:	ee36 6b47 	vsub.f64	d6, d6, d7
	                  d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003354:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003358:	ee27 5b07 	vmul.f64	d5, d7, d7
 800335c:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8003360:	ee25 7b07 	vmul.f64	d7, d5, d7
	                   d12 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003364:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d12 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003368:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800336c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003370:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8003374:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003378:	ee36 6b47 	vsub.f64	d6, d6, d7
	                d13 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800337c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003380:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003384:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 8003388:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d12 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800338c:	ee36 6b07 	vadd.f64	d6, d6, d7
	               e_J_inv_tmp * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003390:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003394:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003398:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800339c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d13 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80033a0:	ee36 6b47 	vsub.f64	d6, d6, d7
	              d13 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80033a4:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80033a8:	ee27 5b07 	vmul.f64	d5, d7, d7
 80033ac:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 80033b0:	ee25 7b07 	vmul.f64	d7, d5, d7
	               e_J_inv_tmp * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80033b4:	ee36 6b07 	vadd.f64	d6, d6, d7
	             e_J_inv_tmp * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp));
 80033b8:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80033bc:	ee27 5b07 	vmul.f64	d5, d7, d7
 80033c0:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80033c4:	ee25 7b07 	vmul.f64	d7, d5, d7
	              d13 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80033c8:	ee36 7b47 	vsub.f64	d7, d6, d7
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80033cc:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80033d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033d4:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	  d1 = d15 * f_J_inv_tmp_tmp;
 80033d8:	ed97 6b40 	vldr	d6, [r7, #256]	; 0x100
 80033dc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80033e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033e4:	ed87 7b5c 	vstr	d7, [r7, #368]	; 0x170
	  d2 = d14 * f_J_inv_tmp_tmp;
 80033e8:	ed97 6b42 	vldr	d6, [r7, #264]	; 0x108
 80033ec:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80033f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033f4:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
	  dv[8] =
	      -(4.0 *
	        (((((((((((((((221663.52 *
	                           sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3304      	adds	r3, #4
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3308      	adds	r3, #8
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003418:	ee37 7b07 	vadd.f64	d7, d7, d7
 800341c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003420:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80034c0 <IVK+0x2548>
 8003424:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003428:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80034c8 <IVK+0x2550>
 800342c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003430:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003470 <IVK+0x24f8>
 8003434:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003438:	eeb0 0b47 	vmov.f64	d0, d7
 800343c:	f010 fed0 	bl	80141e0 <sin>
 8003440:	eeb0 7b40 	vmov.f64	d7, d0
	        (((((((((((((((221663.52 *
 8003444:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80034a0 <IVK+0x2528>
 8003448:	ee27 8b06 	vmul.f64	d8, d7, d6
	                               -0.73665) *
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3304      	adds	r3, #4
 8003454:	ed93 7a00 	vldr	s14, [r3]
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3308      	adds	r3, #8
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003468:	e03a      	b.n	80034e0 <IVK+0x2568>
 800346a:	bf00      	nop
 800346c:	f3af 8000 	nop.w
 8003470:	05532618 	.word	0x05532618
 8003474:	3fe792a3 	.word	0x3fe792a3
 8003478:	19ce075f 	.word	0x19ce075f
 800347c:	3ff85a51 	.word	0x3ff85a51
 8003480:	66666667 	.word	0x66666667
 8003484:	4109cd36 	.word	0x4109cd36
 8003488:	851eb852 	.word	0x851eb852
 800348c:	40d4a42b 	.word	0x40d4a42b
 8003490:	eb851eb8 	.word	0xeb851eb8
 8003494:	40d80d51 	.word	0x40d80d51
 8003498:	2220bc38 	.word	0x2220bc38
 800349c:	4111a6ef 	.word	0x4111a6ef
 80034a0:	28f5c28f 	.word	0x28f5c28f
 80034a4:	410b0efc 	.word	0x410b0efc
 80034a8:	0664d3c0 	.word	0x0664d3c0
 80034ac:	4143dbcd 	.word	0x4143dbcd
 80034b0:	f5c28f5d 	.word	0xf5c28f5d
 80034b4:	410738b0 	.word	0x410738b0
 80034b8:	00000000 	.word	0x00000000
 80034bc:	40f56300 	.word	0x40f56300
 80034c0:	45a1cac1 	.word	0x45a1cac1
 80034c4:	3ffaf3b6 	.word	0x3ffaf3b6
 80034c8:	39581062 	.word	0x39581062
 80034cc:	3fecc8b4 	.word	0x3fecc8b4
 80034d0:	19ce075f 	.word	0x19ce075f
 80034d4:	3ff85a51 	.word	0x3ff85a51
 80034d8:	05532618 	.word	0x05532618
 80034dc:	3fe792a3 	.word	0x3fe792a3
 80034e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034e4:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 80034c0 <IVK+0x2548>
 80034e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034ec:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 80034c8 <IVK+0x2550>
 80034f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034f4:	eeb0 0b47 	vmov.f64	d0, d7
 80034f8:	f010 fe1e 	bl	8014138 <cos>
 80034fc:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8003500:	ee28 6b07 	vmul.f64	d6, d8, d7
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003504:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003508:	ee26 8b07 	vmul.f64	d8, d6, d7
	                           d_J_inv_tmp_tmp -
	                       221663.52 *
	                           cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 800350c:	f107 030c 	add.w	r3, r7, #12
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3304      	adds	r3, #4
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800352c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003530:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003534:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 80034c0 <IVK+0x2548>
 8003538:	ee37 7b06 	vadd.f64	d7, d7, d6
 800353c:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 80034c8 <IVK+0x2550>
 8003540:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003544:	ed1f 6b1c 	vldr	d6, [pc, #-112]	; 80034d8 <IVK+0x2560>
 8003548:	ee37 7b46 	vsub.f64	d7, d7, d6
 800354c:	eeb0 0b47 	vmov.f64	d0, d7
 8003550:	f010 fdf2 	bl	8014138 <cos>
 8003554:	eeb0 7b40 	vmov.f64	d7, d0
	                       221663.52 *
 8003558:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 80034a0 <IVK+0x2528>
 800355c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                               -0.73665) *
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3304      	adds	r3, #4
 8003568:	ed93 7a00 	vldr	s14, [r3]
 800356c:	f107 030c 	add.w	r3, r7, #12
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3308      	adds	r3, #8
 8003574:	edd3 7a00 	vldr	s15, [r3]
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003580:	ed1f 6b31 	vldr	d6, [pc, #-196]	; 80034c0 <IVK+0x2548>
 8003584:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003588:	ed1f 6b31 	vldr	d6, [pc, #-196]	; 80034c8 <IVK+0x2550>
 800358c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003590:	eeb0 0b47 	vmov.f64	d0, d7
 8003594:	f010 fe24 	bl	80141e0 <sin>
 8003598:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 800359c:	ee29 6b07 	vmul.f64	d6, d9, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80035a0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80035a4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                           d_J_inv_tmp_tmp -
 80035a8:	ee38 8b47 	vsub.f64	d8, d8, d7
	                           d_J_inv_tmp_tmp) -
	                      2.6029060499520004E+6 *
	                          cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3304      	adds	r3, #4
 80035b4:	edd3 7a00 	vldr	s15, [r3]
 80035b8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3308      	adds	r3, #8
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80035d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80035d4:	ed1f 6b46 	vldr	d6, [pc, #-280]	; 80034c0 <IVK+0x2548>
 80035d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035dc:	ed1f 6b46 	vldr	d6, [pc, #-280]	; 80034c8 <IVK+0x2550>
 80035e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80035e4:	ed1f 6b44 	vldr	d6, [pc, #-272]	; 80034d8 <IVK+0x2560>
 80035e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80035ec:	eeb0 0b47 	vmov.f64	d0, d7
 80035f0:	f010 fda2 	bl	8014138 <cos>
 80035f4:	eeb0 7b40 	vmov.f64	d7, d0
	                      2.6029060499520004E+6 *
 80035f8:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 80034a8 <IVK+0x2530>
 80035fc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                              -0.73665) *
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003600:	f107 030c 	add.w	r3, r7, #12
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3304      	adds	r3, #4
 8003608:	edd3 7a00 	vldr	s15, [r3]
 800360c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003610:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 80034c0 <IVK+0x2548>
 8003614:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003618:	eeb0 0b47 	vmov.f64	d0, d7
 800361c:	f010 fde0 	bl	80141e0 <sin>
 8003620:	eeb0 7b40 	vmov.f64	d7, d0
	                              -0.73665) *
 8003624:	ee29 6b07 	vmul.f64	d6, d9, d7
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003628:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800362c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                           d_J_inv_tmp_tmp) -
 8003630:	ee38 8b47 	vsub.f64	d8, d8, d7
	                     2.6029060499520004E+6 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3304      	adds	r3, #4
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3308      	adds	r3, #8
 800364c:	edd3 7a00 	vldr	s15, [r3]
 8003650:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003654:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003658:	ee36 7b07 	vadd.f64	d7, d6, d7
 800365c:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80034c0 <IVK+0x2548>
 8003660:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003664:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80034c8 <IVK+0x2550>
 8003668:	ee37 7b46 	vsub.f64	d7, d7, d6
 800366c:	ed1f 6b66 	vldr	d6, [pc, #-408]	; 80034d8 <IVK+0x2560>
 8003670:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003674:	eeb0 0b47 	vmov.f64	d0, d7
 8003678:	f010 fdb2 	bl	80141e0 <sin>
 800367c:	eeb0 7b40 	vmov.f64	d7, d0
	                     2.6029060499520004E+6 *
 8003680:	ed1f 6b77 	vldr	d6, [pc, #-476]	; 80034a8 <IVK+0x2530>
 8003684:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003688:	f107 030c 	add.w	r3, r7, #12
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3304      	adds	r3, #4
 8003690:	edd3 7a00 	vldr	s15, [r3]
 8003694:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003698:	ed1f 6b77 	vldr	d6, [pc, #-476]	; 80034c0 <IVK+0x2548>
 800369c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80036a0:	eeb0 0b47 	vmov.f64	d0, d7
 80036a4:	f010 fd48 	bl	8014138 <cos>
 80036a8:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 80036ac:	ee29 6b07 	vmul.f64	d6, d9, d7
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80036b0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80036b4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80036b8:	ee38 6b07 	vadd.f64	d6, d8, d7
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80036bc:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80036c0:	ee36 8b07 	vadd.f64	d8, d6, d7
	                    d1) -
	                   190230.12000000002 *
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80036c4:	f107 030c 	add.w	r3, r7, #12
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3304      	adds	r3, #4
 80036cc:	ed93 7a00 	vldr	s14, [r3]
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3308      	adds	r3, #8
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036e4:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 80034c0 <IVK+0x2548>
 80036e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80036ec:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 80034c8 <IVK+0x2550>
 80036f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80036f4:	eeb0 0b47 	vmov.f64	d0, d7
 80036f8:	f010 fd1e 	bl	8014138 <cos>
 80036fc:	eeb0 7b40 	vmov.f64	d7, d0
	                   190230.12000000002 *
 8003700:	ed1f 6b95 	vldr	d6, [pc, #-596]	; 80034b0 <IVK+0x2538>
 8003704:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3304      	adds	r3, #4
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003718:	ed1f 6b97 	vldr	d6, [pc, #-604]	; 80034c0 <IVK+0x2548>
 800371c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003720:	eeb0 0b47 	vmov.f64	d0, d7
 8003724:	f010 fd5c 	bl	80141e0 <sin>
 8003728:	eeb0 7b40 	vmov.f64	d7, d0
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800372c:	ee29 6b07 	vmul.f64	d6, d9, d7
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003730:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003734:	ee26 7b07 	vmul.f64	d7, d6, d7
	                    d1) -
 8003738:	ee38 8b47 	vsub.f64	d8, d8, d7
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800373c:	f107 030c 	add.w	r3, r7, #12
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3304      	adds	r3, #4
 8003744:	ed93 7a00 	vldr	s14, [r3]
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3308      	adds	r3, #8
 8003750:	edd3 7a00 	vldr	s15, [r3]
 8003754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003758:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800375c:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 80034c0 <IVK+0x2548>
 8003760:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003764:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 80034c8 <IVK+0x2550>
 8003768:	ee37 7b46 	vsub.f64	d7, d7, d6
 800376c:	eeb0 0b47 	vmov.f64	d0, d7
 8003770:	f010 fd36 	bl	80141e0 <sin>
 8003774:	eeb0 7b40 	vmov.f64	d7, d0
 8003778:	ed1f 6bb3 	vldr	d6, [pc, #-716]	; 80034b0 <IVK+0x2538>
 800377c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003780:	f107 030c 	add.w	r3, r7, #12
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3304      	adds	r3, #4
 8003788:	edd3 7a00 	vldr	s15, [r3]
 800378c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003790:	ed1f 6bb5 	vldr	d6, [pc, #-724]	; 80034c0 <IVK+0x2548>
 8003794:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003798:	eeb0 0b47 	vmov.f64	d0, d7
 800379c:	f010 fccc 	bl	8014138 <cos>
 80037a0:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80037a4:	ee29 6b07 	vmul.f64	d6, d9, d7
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80037a8:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80037ac:	ee26 7b07 	vmul.f64	d7, d6, d7
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80037b0:	ee38 6b07 	vadd.f64	d6, d8, d7
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80037b4:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80037b8:	ee36 8b07 	vadd.f64	d8, d6, d7
	                 d2) +
	                87600.0 *
	                    cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3304      	adds	r3, #4
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80037e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	edd3 7a00 	vldr	s15, [r3]
 80037f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037f8:	ed1f 6bcf 	vldr	d6, [pc, #-828]	; 80034c0 <IVK+0x2548>
 80037fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003800:	ed1f 6bcf 	vldr	d6, [pc, #-828]	; 80034c8 <IVK+0x2550>
 8003804:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003808:	ed1f 6bcd 	vldr	d6, [pc, #-820]	; 80034d8 <IVK+0x2560>
 800380c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003810:	ed1f 6bd1 	vldr	d6, [pc, #-836]	; 80034d0 <IVK+0x2558>
 8003814:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003818:	eeb0 0b47 	vmov.f64	d0, d7
 800381c:	f010 fc8c 	bl	8014138 <cos>
 8003820:	eeb0 7b40 	vmov.f64	d7, d0
	                87600.0 *
 8003824:	ed1f 6bdc 	vldr	d6, [pc, #-880]	; 80034b8 <IVK+0x2540>
 8003828:	ee27 9b06 	vmul.f64	d9, d7, d6
	                         -0.73665) +
	                        1.52205) *
	                    sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3304      	adds	r3, #4
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800383c:	f107 030c 	add.w	r3, r7, #12
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3308      	adds	r3, #8
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800384c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003850:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	edd3 7a00 	vldr	s15, [r3]
 8003860:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003864:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003868:	ed1f 6beb 	vldr	d6, [pc, #-940]	; 80034c0 <IVK+0x2548>
 800386c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003870:	ed1f 6beb 	vldr	d6, [pc, #-940]	; 80034c8 <IVK+0x2550>
 8003874:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003878:	ed1f 6be9 	vldr	d6, [pc, #-932]	; 80034d8 <IVK+0x2560>
 800387c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003880:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 80034d0 <IVK+0x2558>
 8003884:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003888:	eeb0 0b47 	vmov.f64	d0, d7
 800388c:	f010 fca8 	bl	80141e0 <sin>
 8003890:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8003894:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         -0.73665) +
	                        1.52205) *
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8003898:	f107 030c 	add.w	r3, r7, #12
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3304      	adds	r3, #4
 80038a0:	ed93 7a00 	vldr	s14, [r3]
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038b8:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8003c78 <IVK+0x2d00>
 80038bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038c0:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8003c80 <IVK+0x2d08>
 80038c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038c8:	eeb0 0b47 	vmov.f64	d0, d7
 80038cc:	f010 fc34 	bl	8014138 <cos>
 80038d0:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 80038d4:	ee29 6b07 	vmul.f64	d6, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 80038d8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80038dc:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 d2) +
 80038e0:	ee38 8b07 	vadd.f64	d8, d8, d7
	               1.02865176E+6 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80038e4:	f107 030c 	add.w	r3, r7, #12
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3304      	adds	r3, #4
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3308      	adds	r3, #8
 80038fc:	edd3 7a00 	vldr	s15, [r3]
 8003900:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003904:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003908:	ee36 6b07 	vadd.f64	d6, d6, d7
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	330c      	adds	r3, #12
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800391c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003920:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8003c78 <IVK+0x2d00>
 8003924:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003928:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8003c80 <IVK+0x2d08>
 800392c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003930:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8003ca8 <IVK+0x2d30>
 8003934:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003938:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8003ca0 <IVK+0x2d28>
 800393c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003940:	eeb0 0b47 	vmov.f64	d0, d7
 8003944:	f010 fbf8 	bl	8014138 <cos>
 8003948:	eeb0 7b40 	vmov.f64	d7, d0
	               1.02865176E+6 *
 800394c:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8003c88 <IVK+0x2d10>
 8003950:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003954:	f107 030c 	add.w	r3, r7, #12
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3304      	adds	r3, #4
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003964:	f107 030c 	add.w	r3, r7, #12
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3308      	adds	r3, #8
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003974:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003978:	ee36 6b07 	vadd.f64	d6, d6, d7
 800397c:	f107 030c 	add.w	r3, r7, #12
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800398c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003990:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8003c78 <IVK+0x2d00>
 8003994:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003998:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8003c80 <IVK+0x2d08>
 800399c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80039a0:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8003ca8 <IVK+0x2d30>
 80039a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80039a8:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8003ca0 <IVK+0x2d28>
 80039ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039b0:	eeb0 0b47 	vmov.f64	d0, d7
 80039b4:	f010 fc14 	bl	80141e0 <sin>
 80039b8:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80039bc:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        -0.73665) +
	                       1.52205) *
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80039c0:	f107 030c 	add.w	r3, r7, #12
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3304      	adds	r3, #4
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039d0:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8003c78 <IVK+0x2d00>
 80039d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039d8:	eeb0 0b47 	vmov.f64	d0, d7
 80039dc:	f010 fbac 	bl	8014138 <cos>
 80039e0:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80039e4:	ee29 6b07 	vmul.f64	d6, d9, d7
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80039e8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80039ec:	ee26 7b07 	vmul.f64	d7, d6, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 80039f0:	ee38 8b07 	vadd.f64	d8, d8, d7
	              246292.8 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3304      	adds	r3, #4
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a04:	f107 030c 	add.w	r3, r7, #12
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a14:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003a18:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	edd3 7a00 	vldr	s15, [r3]
 8003a28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a30:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8003c78 <IVK+0x2d00>
 8003a34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a38:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8003c80 <IVK+0x2d08>
 8003a3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a40:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8003ca8 <IVK+0x2d30>
 8003a44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a48:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8003ca0 <IVK+0x2d28>
 8003a4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a50:	eeb0 0b47 	vmov.f64	d0, d7
 8003a54:	f010 fbc4 	bl	80141e0 <sin>
 8003a58:	eeb0 7b40 	vmov.f64	d7, d0
	              246292.8 *
 8003a5c:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8003c90 <IVK+0x2d18>
 8003a60:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	edd3 7a00 	vldr	s15, [r3]
 8003a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003a88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a8c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8003c78 <IVK+0x2d00>
 8003a90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a94:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8003c80 <IVK+0x2d08>
 8003a98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a9c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8003ca8 <IVK+0x2d30>
 8003aa0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003aa4:	eeb0 0b47 	vmov.f64	d0, d7
 8003aa8:	f010 fb46 	bl	8014138 <cos>
 8003aac:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8003ab0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 8003ab4:	f107 030c 	add.w	r3, r7, #12
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3304      	adds	r3, #4
 8003abc:	ed93 7a00 	vldr	s14, [r3]
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ad4:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8003c78 <IVK+0x2d00>
 8003ad8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003adc:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8003c80 <IVK+0x2d08>
 8003ae0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ae4:	eeb0 0b47 	vmov.f64	d0, d7
 8003ae8:	f010 fb7a 	bl	80141e0 <sin>
 8003aec:	eeb0 7b40 	vmov.f64	d7, d0
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003af0:	ee29 6b07 	vmul.f64	d6, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 8003af4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003af8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8003afc:	ee38 8b07 	vadd.f64	d8, d8, d7
	             246292.8 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3304      	adds	r3, #4
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b10:	f107 030c 	add.w	r3, r7, #12
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3308      	adds	r3, #8
 8003b18:	edd3 7a00 	vldr	s15, [r3]
 8003b1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003b24:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b28:	f107 030c 	add.w	r3, r7, #12
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	edd3 7a00 	vldr	s15, [r3]
 8003b34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b3c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8003c78 <IVK+0x2d00>
 8003b40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b44:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8003c80 <IVK+0x2d08>
 8003b48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003b4c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8003ca8 <IVK+0x2d30>
 8003b50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003b54:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8003ca0 <IVK+0x2d28>
 8003b58:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b5c:	eeb0 0b47 	vmov.f64	d0, d7
 8003b60:	f010 fb3e 	bl	80141e0 <sin>
 8003b64:	eeb0 7b40 	vmov.f64	d7, d0
	             246292.8 *
 8003b68:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8003c90 <IVK+0x2d18>
 8003b6c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003b70:	f107 030c 	add.w	r3, r7, #12
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3304      	adds	r3, #4
 8003b78:	edd3 7a00 	vldr	s15, [r3]
 8003b7c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3308      	adds	r3, #8
 8003b88:	edd3 7a00 	vldr	s15, [r3]
 8003b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b90:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003b94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b98:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003c78 <IVK+0x2d00>
 8003b9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ba0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003c80 <IVK+0x2d08>
 8003ba4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ba8:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8003ca8 <IVK+0x2d30>
 8003bac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003bb0:	eeb0 0b47 	vmov.f64	d0, d7
 8003bb4:	f010 fb14 	bl	80141e0 <sin>
 8003bb8:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8003bbc:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8003bc0:	f107 030c 	add.w	r3, r7, #12
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	ed93 7a00 	vldr	s14, [r3]
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003be0:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003c78 <IVK+0x2d00>
 8003be4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003be8:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003c80 <IVK+0x2d08>
 8003bec:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003bf0:	eeb0 0b47 	vmov.f64	d0, d7
 8003bf4:	f010 faa0 	bl	8014138 <cos>
 8003bf8:	eeb0 7b40 	vmov.f64	d7, d0
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003bfc:	ee29 6b07 	vmul.f64	d6, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8003c00:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003c04:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 8003c08:	ee38 8b47 	vsub.f64	d8, d8, d7
	            2.8921178332800004E+6 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003c0c:	f107 030c 	add.w	r3, r7, #12
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3304      	adds	r3, #4
 8003c14:	edd3 7a00 	vldr	s15, [r3]
 8003c18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c1c:	f107 030c 	add.w	r3, r7, #12
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3308      	adds	r3, #8
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c2c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003c30:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003c34:	f107 030c 	add.w	r3, r7, #12
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	edd3 7a00 	vldr	s15, [r3]
 8003c40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c48:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8003c78 <IVK+0x2d00>
 8003c4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c50:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8003c80 <IVK+0x2d08>
 8003c54:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003c58:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003ca8 <IVK+0x2d30>
 8003c5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003c60:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003ca0 <IVK+0x2d28>
 8003c64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c68:	eeb0 0b47 	vmov.f64	d0, d7
 8003c6c:	f010 fab8 	bl	80141e0 <sin>
 8003c70:	eeb0 7b40 	vmov.f64	d7, d0
 8003c74:	e030      	b.n	8003cd8 <IVK+0x2d60>
 8003c76:	bf00      	nop
 8003c78:	45a1cac1 	.word	0x45a1cac1
 8003c7c:	3ffaf3b6 	.word	0x3ffaf3b6
 8003c80:	39581062 	.word	0x39581062
 8003c84:	3fecc8b4 	.word	0x3fecc8b4
 8003c88:	851eb852 	.word	0x851eb852
 8003c8c:	412f6457 	.word	0x412f6457
 8003c90:	66666666 	.word	0x66666666
 8003c94:	410e10a6 	.word	0x410e10a6
 8003c98:	eaa8eb47 	.word	0xeaa8eb47
 8003c9c:	414610aa 	.word	0x414610aa
 8003ca0:	19ce075f 	.word	0x19ce075f
 8003ca4:	3ff85a51 	.word	0x3ff85a51
 8003ca8:	05532618 	.word	0x05532618
 8003cac:	3fe792a3 	.word	0x3fe792a3
 8003cb0:	66666667 	.word	0x66666667
 8003cb4:	4109cd36 	.word	0x4109cd36
 8003cb8:	00000000 	.word	0x00000000
 8003cbc:	40440000 	.word	0x40440000
 8003cc0:	45a1cac1 	.word	0x45a1cac1
 8003cc4:	3ffaf3b6 	.word	0x3ffaf3b6
 8003cc8:	39581062 	.word	0x39581062
 8003ccc:	3fecc8b4 	.word	0x3fecc8b4
 8003cd0:	00000000 	.word	0x00000000
 8003cd4:	404e0000 	.word	0x404e0000
	            2.8921178332800004E+6 *
 8003cd8:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8003c98 <IVK+0x2d20>
 8003cdc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003ce0:	f107 030c 	add.w	r3, r7, #12
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	edd3 7a00 	vldr	s15, [r3]
 8003cec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003cf0:	f107 030c 	add.w	r3, r7, #12
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	edd3 7a00 	vldr	s15, [r3]
 8003cfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003d04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d08:	ed1f 6b13 	vldr	d6, [pc, #-76]	; 8003cc0 <IVK+0x2d48>
 8003d0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d10:	ed1f 6b13 	vldr	d6, [pc, #-76]	; 8003cc8 <IVK+0x2d50>
 8003d14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d18:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8003ca8 <IVK+0x2d30>
 8003d1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d20:	eeb0 0b47 	vmov.f64	d0, d7
 8003d24:	f010 fa08 	bl	8014138 <cos>
 8003d28:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 8003d2c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3304      	adds	r3, #4
 8003d38:	edd3 7a00 	vldr	s15, [r3]
 8003d3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d40:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8003cc0 <IVK+0x2d48>
 8003d44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d48:	eeb0 0b47 	vmov.f64	d0, d7
 8003d4c:	f010 fa48 	bl	80141e0 <sin>
 8003d50:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003d54:	ee29 6b07 	vmul.f64	d6, d9, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 8003d58:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003d5c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8003d60:	ee38 8b07 	vadd.f64	d8, d8, d7
	           2.8921178332800004E+6 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003d64:	f107 030c 	add.w	r3, r7, #12
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	edd3 7a00 	vldr	s15, [r3]
 8003d70:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003d88:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003d8c:	f107 030c 	add.w	r3, r7, #12
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	edd3 7a00 	vldr	s15, [r3]
 8003d98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003da0:	ed1f 6b39 	vldr	d6, [pc, #-228]	; 8003cc0 <IVK+0x2d48>
 8003da4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003da8:	ed1f 6b39 	vldr	d6, [pc, #-228]	; 8003cc8 <IVK+0x2d50>
 8003dac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003db0:	ed1f 6b43 	vldr	d6, [pc, #-268]	; 8003ca8 <IVK+0x2d30>
 8003db4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003db8:	ed1f 6b47 	vldr	d6, [pc, #-284]	; 8003ca0 <IVK+0x2d28>
 8003dbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003dc0:	eeb0 0b47 	vmov.f64	d0, d7
 8003dc4:	f010 fa0c 	bl	80141e0 <sin>
 8003dc8:	eeb0 7b40 	vmov.f64	d7, d0
	           2.8921178332800004E+6 *
 8003dcc:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 8003c98 <IVK+0x2d20>
 8003dd0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	edd3 7a00 	vldr	s15, [r3]
 8003de0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3308      	adds	r3, #8
 8003dec:	edd3 7a00 	vldr	s15, [r3]
 8003df0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003df4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003df8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003dfc:	ed1f 6b50 	vldr	d6, [pc, #-320]	; 8003cc0 <IVK+0x2d48>
 8003e00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e04:	ed1f 6b50 	vldr	d6, [pc, #-320]	; 8003cc8 <IVK+0x2d50>
 8003e08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e0c:	ed1f 6b5a 	vldr	d6, [pc, #-360]	; 8003ca8 <IVK+0x2d30>
 8003e10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e14:	eeb0 0b47 	vmov.f64	d0, d7
 8003e18:	f010 f9e2 	bl	80141e0 <sin>
 8003e1c:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8003e20:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8003e24:	f107 030c 	add.w	r3, r7, #12
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e34:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8003cc0 <IVK+0x2d48>
 8003e38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e3c:	eeb0 0b47 	vmov.f64	d0, d7
 8003e40:	f010 f97a 	bl	8014138 <cos>
 8003e44:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003e48:	ee29 6b07 	vmul.f64	d6, d9, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8003e4c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003e50:	ee26 7b07 	vmul.f64	d7, d6, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 8003e54:	ee38 8b47 	vsub.f64	d8, d8, d7
	          211366.80000000002 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003e58:	f107 030c 	add.w	r3, r7, #12
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	edd3 7a00 	vldr	s15, [r3]
 8003e64:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e68:	f107 030c 	add.w	r3, r7, #12
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	edd3 7a00 	vldr	s15, [r3]
 8003e74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e78:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003e7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003e80:	f107 030c 	add.w	r3, r7, #12
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e94:	ed1f 6b76 	vldr	d6, [pc, #-472]	; 8003cc0 <IVK+0x2d48>
 8003e98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e9c:	ed1f 6b76 	vldr	d6, [pc, #-472]	; 8003cc8 <IVK+0x2d50>
 8003ea0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ea4:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8003ca8 <IVK+0x2d30>
 8003ea8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003eac:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 8003ca0 <IVK+0x2d28>
 8003eb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003eb4:	eeb0 0b47 	vmov.f64	d0, d7
 8003eb8:	f010 f992 	bl	80141e0 <sin>
 8003ebc:	eeb0 7b40 	vmov.f64	d7, d0
	          211366.80000000002 *
 8003ec0:	ed1f 6b85 	vldr	d6, [pc, #-532]	; 8003cb0 <IVK+0x2d38>
 8003ec4:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8003ec8:	f107 030c 	add.w	r3, r7, #12
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	ed93 7a00 	vldr	s14, [r3]
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ee8:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 8003cc0 <IVK+0x2d48>
 8003eec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ef0:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 8003cc8 <IVK+0x2d50>
 8003ef4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ef8:	eeb0 0b47 	vmov.f64	d0, d7
 8003efc:	f010 f91c 	bl	8014138 <cos>
 8003f00:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8003f04:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	edd3 7a00 	vldr	s15, [r3]
 8003f14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f18:	ed1f 6b97 	vldr	d6, [pc, #-604]	; 8003cc0 <IVK+0x2d48>
 8003f1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f20:	eeb0 0b47 	vmov.f64	d0, d7
 8003f24:	f010 f95c 	bl	80141e0 <sin>
 8003f28:	eeb0 7b40 	vmov.f64	d7, d0
 8003f2c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8003f30:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003f34:	ee26 7b07 	vmul.f64	d7, d6, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8003f38:	ee38 8b07 	vadd.f64	d8, d8, d7
	              f_J_inv_tmp_tmp) -
	         211366.80000000002 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003f3c:	f107 030c 	add.w	r3, r7, #12
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3304      	adds	r3, #4
 8003f44:	edd3 7a00 	vldr	s15, [r3]
 8003f48:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003f4c:	f107 030c 	add.w	r3, r7, #12
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3308      	adds	r3, #8
 8003f54:	edd3 7a00 	vldr	s15, [r3]
 8003f58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f5c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003f60:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003f64:	f107 030c 	add.w	r3, r7, #12
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f78:	ed1f 6baf 	vldr	d6, [pc, #-700]	; 8003cc0 <IVK+0x2d48>
 8003f7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f80:	ed1f 6baf 	vldr	d6, [pc, #-700]	; 8003cc8 <IVK+0x2d50>
 8003f84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f88:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8003ca8 <IVK+0x2d30>
 8003f8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f90:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 8003ca0 <IVK+0x2d28>
 8003f94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f98:	eeb0 0b47 	vmov.f64	d0, d7
 8003f9c:	f010 f920 	bl	80141e0 <sin>
 8003fa0:	eeb0 7b40 	vmov.f64	d7, d0
	         211366.80000000002 *
 8003fa4:	ed1f 6bbe 	vldr	d6, [pc, #-760]	; 8003cb0 <IVK+0x2d38>
 8003fa8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8003fac:	f107 030c 	add.w	r3, r7, #12
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	ed93 7a00 	vldr	s14, [r3]
 8003fb8:	f107 030c 	add.w	r3, r7, #12
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	edd3 7a00 	vldr	s15, [r3]
 8003fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fcc:	ed1f 6bc4 	vldr	d6, [pc, #-784]	; 8003cc0 <IVK+0x2d48>
 8003fd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003fd4:	ed1f 6bc4 	vldr	d6, [pc, #-784]	; 8003cc8 <IVK+0x2d50>
 8003fd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003fdc:	eeb0 0b47 	vmov.f64	d0, d7
 8003fe0:	f010 f8fe 	bl	80141e0 <sin>
 8003fe4:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8003fe8:	ee29 9b07 	vmul.f64	d9, d9, d7
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8003fec:	f107 030c 	add.w	r3, r7, #12
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ffc:	ed1f 6bd0 	vldr	d6, [pc, #-832]	; 8003cc0 <IVK+0x2d48>
 8004000:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004004:	eeb0 0b47 	vmov.f64	d0, d7
 8004008:	f010 f896 	bl	8014138 <cos>
 800400c:	eeb0 7b40 	vmov.f64	d7, d0
 8004010:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004014:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8004018:	ee26 7b07 	vmul.f64	d7, d6, d7
	              f_J_inv_tmp_tmp) -
 800401c:	ee38 7b47 	vsub.f64	d7, d8, d7
	      -(4.0 *
 8004020:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004024:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004028:	eeb1 5b47 	vneg.f64	d5, d7
	             f_J_inv_tmp_tmp)) /
 800402c:	ed97 6b76 	vldr	d6, [r7, #472]	; 0x1d8
 8004030:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[8] =
 8004034:	f107 0310 	add.w	r3, r7, #16
 8004038:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	      d;
	  d9 = 9.0 * d11;
 800403c:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8004040:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8004044:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004048:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 800404c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8004050:	ed1f 6be7 	vldr	d6, [pc, #-924]	; 8003cb8 <IVK+0x2d40>
 8004054:	ee27 8b06 	vmul.f64	d8, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004058:	f107 030c 	add.w	r3, r7, #12
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3304      	adds	r3, #4
 8004060:	ed93 7a00 	vldr	s14, [r3]
 8004064:	f107 030c 	add.w	r3, r7, #12
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3308      	adds	r3, #8
 800406c:	edd3 7a00 	vldr	s15, [r3]
 8004070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004074:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004078:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8003cc0 <IVK+0x2d48>
 800407c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004080:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8003cc8 <IVK+0x2d50>
 8004084:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004088:	eeb0 0b47 	vmov.f64	d0, d7
 800408c:	f010 f854 	bl	8014138 <cos>
 8004090:	eeb0 7b40 	vmov.f64	d7, d0
 8004094:	ed1f 6bf2 	vldr	d6, [pc, #-968]	; 8003cd0 <IVK+0x2d58>
 8004098:	ee27 6b06 	vmul.f64	d6, d7, d6
	              704.556 * b_J_inv_tmp_tmp)) /
 800409c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80040a0:	ed9f 5bf1 	vldr	d5, [pc, #964]	; 8004468 <IVK+0x34f0>
 80040a4:	ee27 7b05 	vmul.f64	d7, d7, d5
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80040a8:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 80040ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 80040b0:	eeb1 5b47 	vneg.f64	d5, d7
	              704.556 * b_J_inv_tmp_tmp)) /
 80040b4:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 80040b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 80040bc:	f107 0310 	add.w	r3, r7, #16
 80040c0:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	           d9;
	  dv[18] =
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 80040c4:	f107 030c 	add.w	r3, r7, #12
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3304      	adds	r3, #4
 80040cc:	ed93 7a00 	vldr	s14, [r3]
 80040d0:	f107 030c 	add.w	r3, r7, #12
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3308      	adds	r3, #8
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040e4:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8004498 <IVK+0x3520>
 80040e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80040ec:	ed9f 6bec 	vldr	d6, [pc, #944]	; 80044a0 <IVK+0x3528>
 80040f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80040f4:	eeb0 0b47 	vmov.f64	d0, d7
 80040f8:	f010 f81e 	bl	8014138 <cos>
 80040fc:	eeb0 7b40 	vmov.f64	d7, d0
 8004100:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 8004470 <IVK+0x34f8>
 8004104:	ee27 8b06 	vmul.f64	d8, d7, d6
 8004108:	f107 030c 	add.w	r3, r7, #12
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	edd3 7a00 	vldr	s15, [r3]
 8004112:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004116:	eeb0 0b47 	vmov.f64	d0, d7
 800411a:	f010 f861 	bl	80141e0 <sin>
 800411e:	eeb0 7b40 	vmov.f64	d7, d0
 8004122:	ee28 8b07 	vmul.f64	d8, d8, d7
	                704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) /
 8004126:	f107 030c 	add.w	r3, r7, #12
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3304      	adds	r3, #4
 800412e:	edd3 7a00 	vldr	s15, [r3]
 8004132:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004136:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8004498 <IVK+0x3520>
 800413a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800413e:	eeb0 0b47 	vmov.f64	d0, d7
 8004142:	f00f fff9 	bl	8014138 <cos>
 8004146:	eeb0 7b40 	vmov.f64	d7, d0
 800414a:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8004468 <IVK+0x34f0>
 800414e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004152:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8004156:	ee26 7b07 	vmul.f64	d7, d6, d7
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 800415a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800415e:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8004478 <IVK+0x3500>
 8004162:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004166:	eeb1 5b47 	vneg.f64	d5, d7
	                704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) /
 800416a:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 800416e:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[18] =
 8004172:	f107 0310 	add.w	r3, r7, #16
 8004176:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	      d9;
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 800417a:	f107 030c 	add.w	r3, r7, #12
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3304      	adds	r3, #4
 8004182:	ed93 7a00 	vldr	s14, [r3]
 8004186:	f107 030c 	add.w	r3, r7, #12
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3308      	adds	r3, #8
 800418e:	edd3 7a00 	vldr	s15, [r3]
 8004192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004196:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800419a:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8004498 <IVK+0x3520>
 800419e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041a2:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 80044a0 <IVK+0x3528>
 80041a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041aa:	eeb0 0b47 	vmov.f64	d0, d7
 80041ae:	f010 f817 	bl	80141e0 <sin>
 80041b2:	eeb0 7b40 	vmov.f64	d7, d0
 80041b6:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8004470 <IVK+0x34f8>
 80041ba:	ee27 6b06 	vmul.f64	d6, d7, d6
	                     704.556 * e_J_inv_tmp_tmp)) /
 80041be:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80041c2:	ed9f 5ba9 	vldr	d5, [pc, #676]	; 8004468 <IVK+0x34f0>
 80041c6:	ee27 7b05 	vmul.f64	d7, d7, d5
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80041ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041ce:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8004478 <IVK+0x3500>
 80041d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80041d6:	eeb1 5b47 	vneg.f64	d5, d7
	                     704.556 * e_J_inv_tmp_tmp)) /
 80041da:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 80041de:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80041e2:	f107 0310 	add.w	r3, r7, #16
 80041e6:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
	           d9;
	  dv[4] =
	      4.0 *
	      (((((((((((((((221663.52 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3304      	adds	r3, #4
 80041f2:	edd3 7a00 	vldr	s15, [r3]
 80041f6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80041fa:	f107 030c 	add.w	r3, r7, #12
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3308      	adds	r3, #8
 8004202:	edd3 7a00 	vldr	s15, [r3]
 8004206:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800420a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800420e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004212:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8004498 <IVK+0x3520>
 8004216:	ee37 7b06 	vadd.f64	d7, d7, d6
 800421a:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 80044a0 <IVK+0x3528>
 800421e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004222:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 80044c8 <IVK+0x3550>
 8004226:	ee37 7b46 	vsub.f64	d7, d7, d6
 800422a:	eeb0 0b47 	vmov.f64	d0, d7
 800422e:	f00f ffd7 	bl	80141e0 <sin>
 8004232:	eeb0 7b40 	vmov.f64	d7, d0
	      (((((((((((((((221663.52 *
 8004236:	ed9f 6b92 	vldr	d6, [pc, #584]	; 8004480 <IVK+0x3508>
 800423a:	ee27 8b06 	vmul.f64	d8, d7, d6
	                             -0.73665) *
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 800423e:	f107 030c 	add.w	r3, r7, #12
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	ed93 7a00 	vldr	s14, [r3]
 800424a:	f107 030c 	add.w	r3, r7, #12
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	edd3 7a00 	vldr	s15, [r3]
 8004256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800425e:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8004498 <IVK+0x3520>
 8004262:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004266:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 80044a0 <IVK+0x3528>
 800426a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800426e:	eeb0 0b47 	vmov.f64	d0, d7
 8004272:	f00f ff61 	bl	8014138 <cos>
 8004276:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 800427a:	ee28 8b07 	vmul.f64	d8, d8, d7
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	edd3 7a00 	vldr	s15, [r3]
 8004288:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800428c:	eeb0 0b47 	vmov.f64	d0, d7
 8004290:	f00f ff52 	bl	8014138 <cos>
 8004294:	eeb0 7b40 	vmov.f64	d7, d0
 8004298:	ee28 8b07 	vmul.f64	d8, d8, d7
	                     221663.52 *
	                         cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 800429c:	f107 030c 	add.w	r3, r7, #12
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3304      	adds	r3, #4
 80042a4:	edd3 7a00 	vldr	s15, [r3]
 80042a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80042ac:	f107 030c 	add.w	r3, r7, #12
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3308      	adds	r3, #8
 80042b4:	edd3 7a00 	vldr	s15, [r3]
 80042b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80042bc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80042c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80042c4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8004498 <IVK+0x3520>
 80042c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80042cc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80044a0 <IVK+0x3528>
 80042d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80042d4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80044c8 <IVK+0x3550>
 80042d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80042dc:	eeb0 0b47 	vmov.f64	d0, d7
 80042e0:	f00f ff2a 	bl	8014138 <cos>
 80042e4:	eeb0 7b40 	vmov.f64	d7, d0
	                     221663.52 *
 80042e8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8004480 <IVK+0x3508>
 80042ec:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 80042f0:	f107 030c 	add.w	r3, r7, #12
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3304      	adds	r3, #4
 80042f8:	ed93 7a00 	vldr	s14, [r3]
 80042fc:	f107 030c 	add.w	r3, r7, #12
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3308      	adds	r3, #8
 8004304:	edd3 7a00 	vldr	s15, [r3]
 8004308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800430c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004310:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8004498 <IVK+0x3520>
 8004314:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004318:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80044a0 <IVK+0x3528>
 800431c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004320:	eeb0 0b47 	vmov.f64	d0, d7
 8004324:	f00f ff5c 	bl	80141e0 <sin>
 8004328:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 800432c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8004330:	f107 030c 	add.w	r3, r7, #12
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	edd3 7a00 	vldr	s15, [r3]
 800433a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800433e:	eeb0 0b47 	vmov.f64	d0, d7
 8004342:	f00f fef9 	bl	8014138 <cos>
 8004346:	eeb0 7b40 	vmov.f64	d7, d0
 800434a:	ee29 7b07 	vmul.f64	d7, d9, d7
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 800434e:	ee38 8b47 	vsub.f64	d8, d8, d7
	                    2.6029060499520004E+6 *
	                        cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3304      	adds	r3, #4
 800435a:	edd3 7a00 	vldr	s15, [r3]
 800435e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3308      	adds	r3, #8
 800436a:	edd3 7a00 	vldr	s15, [r3]
 800436e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004372:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004376:	ee36 7b07 	vadd.f64	d7, d6, d7
 800437a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8004498 <IVK+0x3520>
 800437e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004382:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80044a0 <IVK+0x3528>
 8004386:	ee37 7b46 	vsub.f64	d7, d7, d6
 800438a:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 80044c8 <IVK+0x3550>
 800438e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004392:	eeb0 0b47 	vmov.f64	d0, d7
 8004396:	f00f fecf 	bl	8014138 <cos>
 800439a:	eeb0 7b40 	vmov.f64	d7, d0
	                    2.6029060499520004E+6 *
 800439e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8004488 <IVK+0x3510>
 80043a2:	ee27 9b06 	vmul.f64	d9, d7, d6
	                            -0.73665) *
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 80043a6:	f107 030c 	add.w	r3, r7, #12
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3304      	adds	r3, #4
 80043ae:	edd3 7a00 	vldr	s15, [r3]
 80043b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043b6:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8004498 <IVK+0x3520>
 80043ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80043be:	eeb0 0b47 	vmov.f64	d0, d7
 80043c2:	f00f ff0d 	bl	80141e0 <sin>
 80043c6:	eeb0 7b40 	vmov.f64	d7, d0
	                            -0.73665) *
 80043ca:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 80043ce:	f107 030c 	add.w	r3, r7, #12
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	edd3 7a00 	vldr	s15, [r3]
 80043d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043dc:	eeb0 0b47 	vmov.f64	d0, d7
 80043e0:	f00f feaa 	bl	8014138 <cos>
 80043e4:	eeb0 7b40 	vmov.f64	d7, d0
 80043e8:	ee29 7b07 	vmul.f64	d7, d9, d7
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 80043ec:	ee38 8b47 	vsub.f64	d8, d8, d7
	                   2.6029060499520004E+6 *
	                       sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80043f0:	f107 030c 	add.w	r3, r7, #12
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3304      	adds	r3, #4
 80043f8:	edd3 7a00 	vldr	s15, [r3]
 80043fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004400:	f107 030c 	add.w	r3, r7, #12
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3308      	adds	r3, #8
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004410:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004414:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004418:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8004498 <IVK+0x3520>
 800441c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004420:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80044a0 <IVK+0x3528>
 8004424:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004428:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80044c8 <IVK+0x3550>
 800442c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004430:	eeb0 0b47 	vmov.f64	d0, d7
 8004434:	f00f fed4 	bl	80141e0 <sin>
 8004438:	eeb0 7b40 	vmov.f64	d7, d0
	                   2.6029060499520004E+6 *
 800443c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8004488 <IVK+0x3510>
 8004440:	ee27 9b06 	vmul.f64	d9, d7, d6
	                           -0.73665) *
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 8004444:	f107 030c 	add.w	r3, r7, #12
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3304      	adds	r3, #4
 800444c:	edd3 7a00 	vldr	s15, [r3]
 8004450:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004454:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8004498 <IVK+0x3520>
 8004458:	ee37 7b06 	vadd.f64	d7, d7, d6
 800445c:	eeb0 0b47 	vmov.f64	d0, d7
 8004460:	f00f fe6a 	bl	8014138 <cos>
 8004464:	e038      	b.n	80044d8 <IVK+0x3560>
 8004466:	bf00      	nop
 8004468:	b020c49c 	.word	0xb020c49c
 800446c:	40860472 	.word	0x40860472
 8004470:	00000000 	.word	0x00000000
 8004474:	404e0000 	.word	0x404e0000
 8004478:	00000000 	.word	0x00000000
 800447c:	40440000 	.word	0x40440000
 8004480:	28f5c28f 	.word	0x28f5c28f
 8004484:	410b0efc 	.word	0x410b0efc
 8004488:	0664d3c0 	.word	0x0664d3c0
 800448c:	4143dbcd 	.word	0x4143dbcd
 8004490:	f5c28f5d 	.word	0xf5c28f5d
 8004494:	410738b0 	.word	0x410738b0
 8004498:	45a1cac1 	.word	0x45a1cac1
 800449c:	3ffaf3b6 	.word	0x3ffaf3b6
 80044a0:	39581062 	.word	0x39581062
 80044a4:	3fecc8b4 	.word	0x3fecc8b4
 80044a8:	00000000 	.word	0x00000000
 80044ac:	40f56300 	.word	0x40f56300
 80044b0:	851eb852 	.word	0x851eb852
 80044b4:	412f6457 	.word	0x412f6457
 80044b8:	39581062 	.word	0x39581062
 80044bc:	3fecc8b4 	.word	0x3fecc8b4
 80044c0:	19ce075f 	.word	0x19ce075f
 80044c4:	3ff85a51 	.word	0x3ff85a51
 80044c8:	05532618 	.word	0x05532618
 80044cc:	3fe792a3 	.word	0x3fe792a3
 80044d0:	45a1cac1 	.word	0x45a1cac1
 80044d4:	3ffaf3b6 	.word	0x3ffaf3b6
 80044d8:	eeb0 7b40 	vmov.f64	d7, d0
	                           -0.73665) *
 80044dc:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	edd3 7a00 	vldr	s15, [r3]
 80044ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044ee:	eeb0 0b47 	vmov.f64	d0, d7
 80044f2:	f00f fe21 	bl	8014138 <cos>
 80044f6:	eeb0 7b40 	vmov.f64	d7, d0
 80044fa:	ee29 7b07 	vmul.f64	d7, d9, d7
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 80044fe:	ee38 8b07 	vadd.f64	d8, d8, d7
	                  190230.12000000002 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004502:	f107 030c 	add.w	r3, r7, #12
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3304      	adds	r3, #4
 800450a:	ed93 7a00 	vldr	s14, [r3]
 800450e:	f107 030c 	add.w	r3, r7, #12
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3308      	adds	r3, #8
 8004516:	edd3 7a00 	vldr	s15, [r3]
 800451a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800451e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004522:	ed1f 6b23 	vldr	d6, [pc, #-140]	; 8004498 <IVK+0x3520>
 8004526:	ee37 7b06 	vadd.f64	d7, d7, d6
 800452a:	ed1f 6b23 	vldr	d6, [pc, #-140]	; 80044a0 <IVK+0x3528>
 800452e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004532:	eeb0 0b47 	vmov.f64	d0, d7
 8004536:	f00f fdff 	bl	8014138 <cos>
 800453a:	eeb0 7b40 	vmov.f64	d7, d0
 800453e:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8004490 <IVK+0x3518>
 8004542:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 8004546:	f107 030c 	add.w	r3, r7, #12
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3304      	adds	r3, #4
 800454e:	edd3 7a00 	vldr	s15, [r3]
 8004552:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004556:	ed1f 6b30 	vldr	d6, [pc, #-192]	; 8004498 <IVK+0x3520>
 800455a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800455e:	eeb0 0b47 	vmov.f64	d0, d7
 8004562:	f00f fe3d 	bl	80141e0 <sin>
 8004566:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800456a:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 800456e:	f107 030c 	add.w	r3, r7, #12
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	edd3 7a00 	vldr	s15, [r3]
 8004578:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800457c:	eeb0 0b47 	vmov.f64	d0, d7
 8004580:	f00f fdda 	bl	8014138 <cos>
 8004584:	eeb0 7b40 	vmov.f64	d7, d0
 8004588:	ee29 7b07 	vmul.f64	d7, d9, d7
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 800458c:	ee38 8b47 	vsub.f64	d8, d8, d7
	                 190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3304      	adds	r3, #4
 8004598:	ed93 7a00 	vldr	s14, [r3]
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3308      	adds	r3, #8
 80045a4:	edd3 7a00 	vldr	s15, [r3]
 80045a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045b0:	ed1f 6b47 	vldr	d6, [pc, #-284]	; 8004498 <IVK+0x3520>
 80045b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80045b8:	ed1f 6b47 	vldr	d6, [pc, #-284]	; 80044a0 <IVK+0x3528>
 80045bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80045c0:	eeb0 0b47 	vmov.f64	d0, d7
 80045c4:	f00f fe0c 	bl	80141e0 <sin>
 80045c8:	eeb0 7b40 	vmov.f64	d7, d0
 80045cc:	ed1f 6b50 	vldr	d6, [pc, #-320]	; 8004490 <IVK+0x3518>
 80045d0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3304      	adds	r3, #4
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045e4:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8004498 <IVK+0x3520>
 80045e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80045ec:	eeb0 0b47 	vmov.f64	d0, d7
 80045f0:	f00f fda2 	bl	8014138 <cos>
 80045f4:	eeb0 7b40 	vmov.f64	d7, d0
	                 190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80045f8:	ee29 9b07 	vmul.f64	d9, d9, d7
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 80045fc:	f107 030c 	add.w	r3, r7, #12
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	edd3 7a00 	vldr	s15, [r3]
 8004606:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800460a:	eeb0 0b47 	vmov.f64	d0, d7
 800460e:	f00f fd93 	bl	8014138 <cos>
 8004612:	eeb0 7b40 	vmov.f64	d7, d0
 8004616:	ee29 7b07 	vmul.f64	d7, d9, d7
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 800461a:	ee38 6b07 	vadd.f64	d6, d8, d7
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 800461e:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8004622:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d16) +
 8004626:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800462a:	ee36 8b07 	vadd.f64	d8, d6, d7
	               d17) +
	              87600.0 *
	                  cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800462e:	f107 030c 	add.w	r3, r7, #12
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3304      	adds	r3, #4
 8004636:	edd3 7a00 	vldr	s15, [r3]
 800463a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800463e:	f107 030c 	add.w	r3, r7, #12
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800464e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004652:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004656:	f107 030c 	add.w	r3, r7, #12
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	edd3 7a00 	vldr	s15, [r3]
 8004662:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004666:	ee36 7b07 	vadd.f64	d7, d6, d7
 800466a:	ed1f 6b75 	vldr	d6, [pc, #-468]	; 8004498 <IVK+0x3520>
 800466e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004672:	ed1f 6b75 	vldr	d6, [pc, #-468]	; 80044a0 <IVK+0x3528>
 8004676:	ee37 7b46 	vsub.f64	d7, d7, d6
 800467a:	ed1f 6b6d 	vldr	d6, [pc, #-436]	; 80044c8 <IVK+0x3550>
 800467e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004682:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 80044c0 <IVK+0x3548>
 8004686:	ee37 7b06 	vadd.f64	d7, d7, d6
 800468a:	eeb0 0b47 	vmov.f64	d0, d7
 800468e:	f00f fd53 	bl	8014138 <cos>
 8004692:	eeb0 7b40 	vmov.f64	d7, d0
	              87600.0 *
 8004696:	ed1f 6b7c 	vldr	d6, [pc, #-496]	; 80044a8 <IVK+0x3530>
 800469a:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800469e:	f107 030c 	add.w	r3, r7, #12
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3304      	adds	r3, #4
 80046a6:	edd3 7a00 	vldr	s15, [r3]
 80046aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80046ae:	f107 030c 	add.w	r3, r7, #12
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3308      	adds	r3, #8
 80046b6:	edd3 7a00 	vldr	s15, [r3]
 80046ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80046c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80046c6:	f107 030c 	add.w	r3, r7, #12
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	edd3 7a00 	vldr	s15, [r3]
 80046d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046da:	ed1f 6b83 	vldr	d6, [pc, #-524]	; 80044d0 <IVK+0x3558>
 80046de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046e2:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 80044b8 <IVK+0x3540>
 80046e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046ea:	ed1f 6b89 	vldr	d6, [pc, #-548]	; 80044c8 <IVK+0x3550>
 80046ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046f2:	ed1f 6b8d 	vldr	d6, [pc, #-564]	; 80044c0 <IVK+0x3548>
 80046f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046fa:	eeb0 0b47 	vmov.f64	d0, d7
 80046fe:	f00f fd6f 	bl	80141e0 <sin>
 8004702:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8004706:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       -0.73665) +
	                      1.52205) *
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 800470a:	f107 030c 	add.w	r3, r7, #12
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3304      	adds	r3, #4
 8004712:	ed93 7a00 	vldr	s14, [r3]
 8004716:	f107 030c 	add.w	r3, r7, #12
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3308      	adds	r3, #8
 800471e:	edd3 7a00 	vldr	s15, [r3]
 8004722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004726:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800472a:	ed1f 6b97 	vldr	d6, [pc, #-604]	; 80044d0 <IVK+0x3558>
 800472e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004732:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 80044b8 <IVK+0x3540>
 8004736:	ee37 7b46 	vsub.f64	d7, d7, d6
 800473a:	eeb0 0b47 	vmov.f64	d0, d7
 800473e:	f00f fcfb 	bl	8014138 <cos>
 8004742:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8004746:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 800474a:	f107 030c 	add.w	r3, r7, #12
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	edd3 7a00 	vldr	s15, [r3]
 8004754:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004758:	eeb0 0b47 	vmov.f64	d0, d7
 800475c:	f00f fd40 	bl	80141e0 <sin>
 8004760:	eeb0 7b40 	vmov.f64	d7, d0
 8004764:	ee29 7b07 	vmul.f64	d7, d9, d7
	               d17) +
 8004768:	ee38 8b07 	vadd.f64	d8, d8, d7
	             1.02865176E+6 *
	                 cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800476c:	f107 030c 	add.w	r3, r7, #12
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3304      	adds	r3, #4
 8004774:	edd3 7a00 	vldr	s15, [r3]
 8004778:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800478c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004790:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004794:	f107 030c 	add.w	r3, r7, #12
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	edd3 7a00 	vldr	s15, [r3]
 80047a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047a8:	ed1f 6bb7 	vldr	d6, [pc, #-732]	; 80044d0 <IVK+0x3558>
 80047ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047b0:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 80044b8 <IVK+0x3540>
 80047b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80047b8:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 80044c8 <IVK+0x3550>
 80047bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80047c0:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 80044c0 <IVK+0x3548>
 80047c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047c8:	eeb0 0b47 	vmov.f64	d0, d7
 80047cc:	f00f fcb4 	bl	8014138 <cos>
 80047d0:	eeb0 7b40 	vmov.f64	d7, d0
	             1.02865176E+6 *
 80047d4:	ed1f 6bca 	vldr	d6, [pc, #-808]	; 80044b0 <IVK+0x3538>
 80047d8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3304      	adds	r3, #4
 80047e4:	edd3 7a00 	vldr	s15, [r3]
 80047e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80047ec:	f107 030c 	add.w	r3, r7, #12
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	edd3 7a00 	vldr	s15, [r3]
 80047f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004800:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004804:	f107 030c 	add.w	r3, r7, #12
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	edd3 7a00 	vldr	s15, [r3]
 8004810:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004814:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004818:	ed1f 6bd3 	vldr	d6, [pc, #-844]	; 80044d0 <IVK+0x3558>
 800481c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004820:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 80044b8 <IVK+0x3540>
 8004824:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004828:	ed1f 6bd9 	vldr	d6, [pc, #-868]	; 80044c8 <IVK+0x3550>
 800482c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004830:	ed1f 6bdd 	vldr	d6, [pc, #-884]	; 80044c0 <IVK+0x3548>
 8004834:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004838:	eeb0 0b47 	vmov.f64	d0, d7
 800483c:	f00f fcd0 	bl	80141e0 <sin>
 8004840:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8004844:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      -0.73665) +
	                     1.52205) *
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 8004848:	f107 030c 	add.w	r3, r7, #12
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3304      	adds	r3, #4
 8004850:	edd3 7a00 	vldr	s15, [r3]
 8004854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004858:	ed1f 6be3 	vldr	d6, [pc, #-908]	; 80044d0 <IVK+0x3558>
 800485c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004860:	eeb0 0b47 	vmov.f64	d0, d7
 8004864:	f00f fc68 	bl	8014138 <cos>
 8004868:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 800486c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	edd3 7a00 	vldr	s15, [r3]
 800487a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800487e:	eeb0 0b47 	vmov.f64	d0, d7
 8004882:	f00f fcad 	bl	80141e0 <sin>
 8004886:	eeb0 7b40 	vmov.f64	d7, d0
 800488a:	ee29 7b07 	vmul.f64	d7, d9, d7
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 800488e:	ee38 8b07 	vadd.f64	d8, d8, d7
	            246292.8 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004892:	f107 030c 	add.w	r3, r7, #12
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3304      	adds	r3, #4
 800489a:	edd3 7a00 	vldr	s15, [r3]
 800489e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80048a2:	f107 030c 	add.w	r3, r7, #12
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3308      	adds	r3, #8
 80048aa:	edd3 7a00 	vldr	s15, [r3]
 80048ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80048b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80048ba:	f107 030c 	add.w	r3, r7, #12
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	330c      	adds	r3, #12
 80048c2:	edd3 7a00 	vldr	s15, [r3]
 80048c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80048ce:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004c90 <IVK+0x3d18>
 80048d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80048d6:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004c98 <IVK+0x3d20>
 80048da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048de:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004ca0 <IVK+0x3d28>
 80048e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048e6:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004ca8 <IVK+0x3d30>
 80048ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80048ee:	eeb0 0b47 	vmov.f64	d0, d7
 80048f2:	f00f fc75 	bl	80141e0 <sin>
 80048f6:	eeb0 7b40 	vmov.f64	d7, d0
	            246292.8 *
 80048fa:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8004cb0 <IVK+0x3d38>
 80048fe:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004902:	f107 030c 	add.w	r3, r7, #12
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3304      	adds	r3, #4
 800490a:	edd3 7a00 	vldr	s15, [r3]
 800490e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	edd3 7a00 	vldr	s15, [r3]
 800491e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004922:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004926:	ee36 7b07 	vadd.f64	d7, d6, d7
 800492a:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8004c90 <IVK+0x3d18>
 800492e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004932:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8004c98 <IVK+0x3d20>
 8004936:	ee37 7b46 	vsub.f64	d7, d7, d6
 800493a:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8004ca0 <IVK+0x3d28>
 800493e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004942:	eeb0 0b47 	vmov.f64	d0, d7
 8004946:	f00f fbf7 	bl	8014138 <cos>
 800494a:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 800494e:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 8004952:	f107 030c 	add.w	r3, r7, #12
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3304      	adds	r3, #4
 800495a:	ed93 7a00 	vldr	s14, [r3]
 800495e:	f107 030c 	add.w	r3, r7, #12
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	edd3 7a00 	vldr	s15, [r3]
 800496a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800496e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004972:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8004c90 <IVK+0x3d18>
 8004976:	ee37 7b06 	vadd.f64	d7, d7, d6
 800497a:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8004c98 <IVK+0x3d20>
 800497e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004982:	eeb0 0b47 	vmov.f64	d0, d7
 8004986:	f00f fc2b 	bl	80141e0 <sin>
 800498a:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800498e:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 8004992:	f107 030c 	add.w	r3, r7, #12
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	edd3 7a00 	vldr	s15, [r3]
 800499c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049a0:	eeb0 0b47 	vmov.f64	d0, d7
 80049a4:	f00f fc1c 	bl	80141e0 <sin>
 80049a8:	eeb0 7b40 	vmov.f64	d7, d0
 80049ac:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 80049b0:	ee38 8b07 	vadd.f64	d8, d8, d7
	           246292.8 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80049b4:	f107 030c 	add.w	r3, r7, #12
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3304      	adds	r3, #4
 80049bc:	edd3 7a00 	vldr	s15, [r3]
 80049c0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80049c4:	f107 030c 	add.w	r3, r7, #12
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3308      	adds	r3, #8
 80049cc:	edd3 7a00 	vldr	s15, [r3]
 80049d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049d4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80049d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80049dc:	f107 030c 	add.w	r3, r7, #12
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	edd3 7a00 	vldr	s15, [r3]
 80049e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049f0:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004c90 <IVK+0x3d18>
 80049f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80049f8:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004c98 <IVK+0x3d20>
 80049fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a00:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004ca0 <IVK+0x3d28>
 8004a04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a08:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004ca8 <IVK+0x3d30>
 8004a0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a10:	eeb0 0b47 	vmov.f64	d0, d7
 8004a14:	f00f fbe4 	bl	80141e0 <sin>
 8004a18:	eeb0 7b40 	vmov.f64	d7, d0
	           246292.8 *
 8004a1c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8004cb0 <IVK+0x3d38>
 8004a20:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004a24:	f107 030c 	add.w	r3, r7, #12
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	edd3 7a00 	vldr	s15, [r3]
 8004a30:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	edd3 7a00 	vldr	s15, [r3]
 8004a40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a44:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004a48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a4c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8004c90 <IVK+0x3d18>
 8004a50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a54:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8004c98 <IVK+0x3d20>
 8004a58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a5c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8004ca0 <IVK+0x3d28>
 8004a60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a64:	eeb0 0b47 	vmov.f64	d0, d7
 8004a68:	f00f fbba 	bl	80141e0 <sin>
 8004a6c:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8004a70:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004a74:	f107 030c 	add.w	r3, r7, #12
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	ed93 7a00 	vldr	s14, [r3]
 8004a80:	f107 030c 	add.w	r3, r7, #12
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	edd3 7a00 	vldr	s15, [r3]
 8004a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a94:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8004c90 <IVK+0x3d18>
 8004a98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a9c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8004c98 <IVK+0x3d20>
 8004aa0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004aa4:	eeb0 0b47 	vmov.f64	d0, d7
 8004aa8:	f00f fb46 	bl	8014138 <cos>
 8004aac:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004ab0:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004ab4:	f107 030c 	add.w	r3, r7, #12
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	edd3 7a00 	vldr	s15, [r3]
 8004abe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ac2:	eeb0 0b47 	vmov.f64	d0, d7
 8004ac6:	f00f fb8b 	bl	80141e0 <sin>
 8004aca:	eeb0 7b40 	vmov.f64	d7, d0
 8004ace:	ee29 7b07 	vmul.f64	d7, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 8004ad2:	ee38 8b47 	vsub.f64	d8, d8, d7
	          2.8921178332800004E+6 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004ad6:	f107 030c 	add.w	r3, r7, #12
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3304      	adds	r3, #4
 8004ade:	edd3 7a00 	vldr	s15, [r3]
 8004ae2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	edd3 7a00 	vldr	s15, [r3]
 8004af2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004af6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004afa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004afe:	f107 030c 	add.w	r3, r7, #12
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	edd3 7a00 	vldr	s15, [r3]
 8004b0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b12:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004c90 <IVK+0x3d18>
 8004b16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b1a:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004c98 <IVK+0x3d20>
 8004b1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b22:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004ca0 <IVK+0x3d28>
 8004b26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b2a:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004ca8 <IVK+0x3d30>
 8004b2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b32:	eeb0 0b47 	vmov.f64	d0, d7
 8004b36:	f00f fb53 	bl	80141e0 <sin>
 8004b3a:	eeb0 7b40 	vmov.f64	d7, d0
	          2.8921178332800004E+6 *
 8004b3e:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8004cb8 <IVK+0x3d40>
 8004b42:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	edd3 7a00 	vldr	s15, [r3]
 8004b52:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004b56:	f107 030c 	add.w	r3, r7, #12
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	edd3 7a00 	vldr	s15, [r3]
 8004b62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b6e:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8004c90 <IVK+0x3d18>
 8004b72:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b76:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8004c98 <IVK+0x3d20>
 8004b7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b7e:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8004ca0 <IVK+0x3d28>
 8004b82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b86:	eeb0 0b47 	vmov.f64	d0, d7
 8004b8a:	f00f fad5 	bl	8014138 <cos>
 8004b8e:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8004b92:	ee29 9b07 	vmul.f64	d9, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 8004b96:	f107 030c 	add.w	r3, r7, #12
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	edd3 7a00 	vldr	s15, [r3]
 8004ba2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ba6:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8004c90 <IVK+0x3d18>
 8004baa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004bae:	eeb0 0b47 	vmov.f64	d0, d7
 8004bb2:	f00f fb15 	bl	80141e0 <sin>
 8004bb6:	eeb0 7b40 	vmov.f64	d7, d0
	              cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004bba:	ee29 9b07 	vmul.f64	d9, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 8004bbe:	f107 030c 	add.w	r3, r7, #12
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	edd3 7a00 	vldr	s15, [r3]
 8004bc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bcc:	eeb0 0b47 	vmov.f64	d0, d7
 8004bd0:	f00f fb06 	bl	80141e0 <sin>
 8004bd4:	eeb0 7b40 	vmov.f64	d7, d0
 8004bd8:	ee29 7b07 	vmul.f64	d7, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004bdc:	ee38 8b07 	vadd.f64	d8, d8, d7
	         2.8921178332800004E+6 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004be0:	f107 030c 	add.w	r3, r7, #12
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3304      	adds	r3, #4
 8004be8:	edd3 7a00 	vldr	s15, [r3]
 8004bec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	edd3 7a00 	vldr	s15, [r3]
 8004bfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c04:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c08:	f107 030c 	add.w	r3, r7, #12
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	edd3 7a00 	vldr	s15, [r3]
 8004c14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c1c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004c90 <IVK+0x3d18>
 8004c20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c24:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004c98 <IVK+0x3d20>
 8004c28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c2c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004ca0 <IVK+0x3d28>
 8004c30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c34:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004ca8 <IVK+0x3d30>
 8004c38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c3c:	eeb0 0b47 	vmov.f64	d0, d7
 8004c40:	f00f face 	bl	80141e0 <sin>
 8004c44:	eeb0 7b40 	vmov.f64	d7, d0
	         2.8921178332800004E+6 *
 8004c48:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8004cb8 <IVK+0x3d40>
 8004c4c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004c50:	f107 030c 	add.w	r3, r7, #12
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3304      	adds	r3, #4
 8004c58:	edd3 7a00 	vldr	s15, [r3]
 8004c5c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004c60:	f107 030c 	add.w	r3, r7, #12
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3308      	adds	r3, #8
 8004c68:	edd3 7a00 	vldr	s15, [r3]
 8004c6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c70:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c78:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8004c90 <IVK+0x3d18>
 8004c7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c80:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8004c98 <IVK+0x3d20>
 8004c84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c88:	e032      	b.n	8004cf0 <IVK+0x3d78>
 8004c8a:	bf00      	nop
 8004c8c:	f3af 8000 	nop.w
 8004c90:	45a1cac1 	.word	0x45a1cac1
 8004c94:	3ffaf3b6 	.word	0x3ffaf3b6
 8004c98:	39581062 	.word	0x39581062
 8004c9c:	3fecc8b4 	.word	0x3fecc8b4
 8004ca0:	05532618 	.word	0x05532618
 8004ca4:	3fe792a3 	.word	0x3fe792a3
 8004ca8:	19ce075f 	.word	0x19ce075f
 8004cac:	3ff85a51 	.word	0x3ff85a51
 8004cb0:	66666666 	.word	0x66666666
 8004cb4:	410e10a6 	.word	0x410e10a6
 8004cb8:	eaa8eb47 	.word	0xeaa8eb47
 8004cbc:	414610aa 	.word	0x414610aa
 8004cc0:	19ce075f 	.word	0x19ce075f
 8004cc4:	3ff85a51 	.word	0x3ff85a51
 8004cc8:	66666667 	.word	0x66666667
 8004ccc:	4109cd36 	.word	0x4109cd36
 8004cd0:	05532618 	.word	0x05532618
 8004cd4:	3fe792a3 	.word	0x3fe792a3
 8004cd8:	28f5c28f 	.word	0x28f5c28f
 8004cdc:	410b0efc 	.word	0x410b0efc
 8004ce0:	45a1cac1 	.word	0x45a1cac1
 8004ce4:	3ffaf3b6 	.word	0x3ffaf3b6
 8004ce8:	39581062 	.word	0x39581062
 8004cec:	3fecc8b4 	.word	0x3fecc8b4
 8004cf0:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8004cd0 <IVK+0x3d58>
 8004cf4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004cf8:	eeb0 0b47 	vmov.f64	d0, d7
 8004cfc:	f00f fa70 	bl	80141e0 <sin>
 8004d00:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8004d04:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 8004d08:	f107 030c 	add.w	r3, r7, #12
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	edd3 7a00 	vldr	s15, [r3]
 8004d14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d18:	ed1f 6b0f 	vldr	d6, [pc, #-60]	; 8004ce0 <IVK+0x3d68>
 8004d1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d20:	eeb0 0b47 	vmov.f64	d0, d7
 8004d24:	f00f fa08 	bl	8014138 <cos>
 8004d28:	eeb0 7b40 	vmov.f64	d7, d0
	             sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004d2c:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 8004d30:	f107 030c 	add.w	r3, r7, #12
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	edd3 7a00 	vldr	s15, [r3]
 8004d3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d3e:	eeb0 0b47 	vmov.f64	d0, d7
 8004d42:	f00f fa4d 	bl	80141e0 <sin>
 8004d46:	eeb0 7b40 	vmov.f64	d7, d0
 8004d4a:	ee29 7b07 	vmul.f64	d7, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 8004d4e:	ee38 8b47 	vsub.f64	d8, d8, d7
	        211366.80000000002 *
	            sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004d52:	f107 030c 	add.w	r3, r7, #12
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	edd3 7a00 	vldr	s15, [r3]
 8004d5e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d62:	f107 030c 	add.w	r3, r7, #12
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	edd3 7a00 	vldr	s15, [r3]
 8004d6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d72:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d76:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004d7a:	f107 030c 	add.w	r3, r7, #12
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	edd3 7a00 	vldr	s15, [r3]
 8004d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d8e:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8004ce0 <IVK+0x3d68>
 8004d92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d96:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8004ce8 <IVK+0x3d70>
 8004d9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d9e:	ed1f 6b34 	vldr	d6, [pc, #-208]	; 8004cd0 <IVK+0x3d58>
 8004da2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004da6:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8004cc0 <IVK+0x3d48>
 8004daa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004dae:	eeb0 0b47 	vmov.f64	d0, d7
 8004db2:	f00f fa15 	bl	80141e0 <sin>
 8004db6:	eeb0 7b40 	vmov.f64	d7, d0
	        211366.80000000002 *
 8004dba:	ed1f 6b3d 	vldr	d6, [pc, #-244]	; 8004cc8 <IVK+0x3d50>
 8004dbe:	ee27 9b06 	vmul.f64	d9, d7, d6
	                 -0.73665) +
	                1.52205) *
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8004dc2:	f107 030c 	add.w	r3, r7, #12
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	ed93 7a00 	vldr	s14, [r3]
 8004dce:	f107 030c 	add.w	r3, r7, #12
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	edd3 7a00 	vldr	s15, [r3]
 8004dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004de2:	ed1f 6b41 	vldr	d6, [pc, #-260]	; 8004ce0 <IVK+0x3d68>
 8004de6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004dea:	ed1f 6b41 	vldr	d6, [pc, #-260]	; 8004ce8 <IVK+0x3d70>
 8004dee:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004df2:	eeb0 0b47 	vmov.f64	d0, d7
 8004df6:	f00f f99f 	bl	8014138 <cos>
 8004dfa:	eeb0 7b40 	vmov.f64	d7, d0
	                1.52205) *
 8004dfe:	ee29 9b07 	vmul.f64	d9, d9, d7
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8004e02:	f107 030c 	add.w	r3, r7, #12
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	edd3 7a00 	vldr	s15, [r3]
 8004e0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e12:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 8004ce0 <IVK+0x3d68>
 8004e16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e1a:	eeb0 0b47 	vmov.f64	d0, d7
 8004e1e:	f00f f9df 	bl	80141e0 <sin>
 8004e22:	eeb0 7b40 	vmov.f64	d7, d0
 8004e26:	ee29 9b07 	vmul.f64	d9, d9, d7
	            sin(q[0])) -
 8004e2a:	f107 030c 	add.w	r3, r7, #12
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	edd3 7a00 	vldr	s15, [r3]
 8004e34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e38:	eeb0 0b47 	vmov.f64	d0, d7
 8004e3c:	f00f f9d0 	bl	80141e0 <sin>
 8004e40:	eeb0 7b40 	vmov.f64	d7, d0
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8004e44:	ee29 7b07 	vmul.f64	d7, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 8004e48:	ee38 8b07 	vadd.f64	d8, d8, d7
	       211366.80000000002 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004e4c:	f107 030c 	add.w	r3, r7, #12
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3304      	adds	r3, #4
 8004e54:	edd3 7a00 	vldr	s15, [r3]
 8004e58:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004e5c:	f107 030c 	add.w	r3, r7, #12
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	edd3 7a00 	vldr	s15, [r3]
 8004e68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e6c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e70:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	edd3 7a00 	vldr	s15, [r3]
 8004e80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e88:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8004ce0 <IVK+0x3d68>
 8004e8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e90:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8004ce8 <IVK+0x3d70>
 8004e94:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e98:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 8004cd0 <IVK+0x3d58>
 8004e9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ea0:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 8004cc0 <IVK+0x3d48>
 8004ea4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ea8:	eeb0 0b47 	vmov.f64	d0, d7
 8004eac:	f00f f998 	bl	80141e0 <sin>
 8004eb0:	eeb0 7b40 	vmov.f64	d7, d0
	       211366.80000000002 *
 8004eb4:	ed1f 6b7c 	vldr	d6, [pc, #-496]	; 8004cc8 <IVK+0x3d50>
 8004eb8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                -0.73665) +
	               1.52205) *
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8004ebc:	f107 030c 	add.w	r3, r7, #12
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	ed93 7a00 	vldr	s14, [r3]
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	edd3 7a00 	vldr	s15, [r3]
 8004ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004edc:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8004ce0 <IVK+0x3d68>
 8004ee0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ee4:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8004ce8 <IVK+0x3d70>
 8004ee8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004eec:	eeb0 0b47 	vmov.f64	d0, d7
 8004ef0:	f00f f976 	bl	80141e0 <sin>
 8004ef4:	eeb0 7b40 	vmov.f64	d7, d0
	               1.52205) *
 8004ef8:	ee29 9b07 	vmul.f64	d9, d9, d7
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8004efc:	f107 030c 	add.w	r3, r7, #12
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3304      	adds	r3, #4
 8004f04:	edd3 7a00 	vldr	s15, [r3]
 8004f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f0c:	ed1f 6b8c 	vldr	d6, [pc, #-560]	; 8004ce0 <IVK+0x3d68>
 8004f10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f14:	eeb0 0b47 	vmov.f64	d0, d7
 8004f18:	f00f f90e 	bl	8014138 <cos>
 8004f1c:	eeb0 7b40 	vmov.f64	d7, d0
 8004f20:	ee29 9b07 	vmul.f64	d9, d9, d7
	           sin(q[0])) /
 8004f24:	f107 030c 	add.w	r3, r7, #12
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	edd3 7a00 	vldr	s15, [r3]
 8004f2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f32:	eeb0 0b47 	vmov.f64	d0, d7
 8004f36:	f00f f953 	bl	80141e0 <sin>
 8004f3a:	eeb0 7b40 	vmov.f64	d7, d0
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8004f3e:	ee29 7b07 	vmul.f64	d7, d9, d7
	            sin(q[0])) -
 8004f42:	ee38 7b47 	vsub.f64	d7, d8, d7
	      4.0 *
 8004f46:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004f4a:	ee27 5b06 	vmul.f64	d5, d7, d6
	           sin(q[0])) /
 8004f4e:	ed97 6b76 	vldr	d6, [r7, #472]	; 0x1d8
 8004f52:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[4] =
 8004f56:	f107 0310 	add.w	r3, r7, #16
 8004f5a:	ed83 7b08 	vstr	d7, [r3, #32]
	      d;
	  dv[9] =
	      -(4.0 *
	        (((((((((((((((221663.52 *
	                           cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004f5e:	f107 030c 	add.w	r3, r7, #12
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3304      	adds	r3, #4
 8004f66:	edd3 7a00 	vldr	s15, [r3]
 8004f6a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004f6e:	f107 030c 	add.w	r3, r7, #12
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	edd3 7a00 	vldr	s15, [r3]
 8004f7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f86:	ed1f 6baa 	vldr	d6, [pc, #-680]	; 8004ce0 <IVK+0x3d68>
 8004f8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f8e:	ed1f 6baa 	vldr	d6, [pc, #-680]	; 8004ce8 <IVK+0x3d70>
 8004f92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f96:	ed1f 6bb2 	vldr	d6, [pc, #-712]	; 8004cd0 <IVK+0x3d58>
 8004f9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f9e:	eeb0 0b47 	vmov.f64	d0, d7
 8004fa2:	f00f f8c9 	bl	8014138 <cos>
 8004fa6:	eeb0 7b40 	vmov.f64	d7, d0
	        (((((((((((((((221663.52 *
 8004faa:	ed1f 6bb5 	vldr	d6, [pc, #-724]	; 8004cd8 <IVK+0x3d60>
 8004fae:	ee27 8b06 	vmul.f64	d8, d7, d6
	                               -0.73665) *
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 8004fb2:	f107 030c 	add.w	r3, r7, #12
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	ed93 7a00 	vldr	s14, [r3]
 8004fbe:	f107 030c 	add.w	r3, r7, #12
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	edd3 7a00 	vldr	s15, [r3]
 8004fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fd2:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 8004ce0 <IVK+0x3d68>
 8004fd6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004fda:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 8004ce8 <IVK+0x3d70>
 8004fde:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004fe2:	eeb0 0b47 	vmov.f64	d0, d7
 8004fe6:	f00f f8fb 	bl	80141e0 <sin>
 8004fea:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8004fee:	ee28 8b07 	vmul.f64	d8, d8, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 8004ff2:	f107 030c 	add.w	r3, r7, #12
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	edd3 7a00 	vldr	s15, [r3]
 8004ffc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005000:	eeb0 0b47 	vmov.f64	d0, d7
 8005004:	f00f f8ec 	bl	80141e0 <sin>
 8005008:	eeb0 7b40 	vmov.f64	d7, d0
 800500c:	ee28 8b07 	vmul.f64	d8, d8, d7
	                       221663.52 *
	                           sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8005010:	f107 030c 	add.w	r3, r7, #12
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3304      	adds	r3, #4
 8005018:	edd3 7a00 	vldr	s15, [r3]
 800501c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005020:	f107 030c 	add.w	r3, r7, #12
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	edd3 7a00 	vldr	s15, [r3]
 800502c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005030:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005034:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005038:	ed1f 6bd7 	vldr	d6, [pc, #-860]	; 8004ce0 <IVK+0x3d68>
 800503c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005040:	ed1f 6bd7 	vldr	d6, [pc, #-860]	; 8004ce8 <IVK+0x3d70>
 8005044:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005048:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8004cd0 <IVK+0x3d58>
 800504c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005050:	eeb0 0b47 	vmov.f64	d0, d7
 8005054:	f00f f8c4 	bl	80141e0 <sin>
 8005058:	eeb0 7b40 	vmov.f64	d7, d0
	                       221663.52 *
 800505c:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8004cd8 <IVK+0x3d60>
 8005060:	ee27 9b06 	vmul.f64	d9, d7, d6
	                               -0.73665) *
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005064:	f107 030c 	add.w	r3, r7, #12
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3304      	adds	r3, #4
 800506c:	ed93 7a00 	vldr	s14, [r3]
 8005070:	f107 030c 	add.w	r3, r7, #12
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3308      	adds	r3, #8
 8005078:	edd3 7a00 	vldr	s15, [r3]
 800507c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005080:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005084:	ed1f 6bea 	vldr	d6, [pc, #-936]	; 8004ce0 <IVK+0x3d68>
 8005088:	ee37 7b06 	vadd.f64	d7, d7, d6
 800508c:	ed1f 6bea 	vldr	d6, [pc, #-936]	; 8004ce8 <IVK+0x3d70>
 8005090:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005094:	eeb0 0b47 	vmov.f64	d0, d7
 8005098:	f00f f84e 	bl	8014138 <cos>
 800509c:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 80050a0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                           sin(q[0])) +
 80050a4:	f107 030c 	add.w	r3, r7, #12
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	edd3 7a00 	vldr	s15, [r3]
 80050ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050b2:	eeb0 0b47 	vmov.f64	d0, d7
 80050b6:	f00f f893 	bl	80141e0 <sin>
 80050ba:	eeb0 7b40 	vmov.f64	d7, d0
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80050be:	ee29 7b07 	vmul.f64	d7, d9, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 80050c2:	ee38 8b47 	vsub.f64	d8, d8, d7
	                      2.6029060499520004E+6 *
	                          cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80050c6:	f107 030c 	add.w	r3, r7, #12
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3304      	adds	r3, #4
 80050ce:	edd3 7a00 	vldr	s15, [r3]
 80050d2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80050d6:	f107 030c 	add.w	r3, r7, #12
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	edd3 7a00 	vldr	s15, [r3]
 80050e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80050ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050ee:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80054b0 <IVK+0x4538>
 80050f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80050f6:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80054b8 <IVK+0x4540>
 80050fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80050fe:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80054c0 <IVK+0x4548>
 8005102:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005106:	eeb0 0b47 	vmov.f64	d0, d7
 800510a:	f00f f815 	bl	8014138 <cos>
 800510e:	eeb0 7b40 	vmov.f64	d7, d0
	                      2.6029060499520004E+6 *
 8005112:	ed9f 6bed 	vldr	d6, [pc, #948]	; 80054c8 <IVK+0x4550>
 8005116:	ee27 9b06 	vmul.f64	d9, d7, d6
	                              -0.73665) *
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 800511a:	f107 030c 	add.w	r3, r7, #12
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3304      	adds	r3, #4
 8005122:	edd3 7a00 	vldr	s15, [r3]
 8005126:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800512a:	ed9f 6be1 	vldr	d6, [pc, #900]	; 80054b0 <IVK+0x4538>
 800512e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005132:	eeb0 0b47 	vmov.f64	d0, d7
 8005136:	f00f f853 	bl	80141e0 <sin>
 800513a:	eeb0 7b40 	vmov.f64	d7, d0
	                              -0.73665) *
 800513e:	ee29 9b07 	vmul.f64	d9, d9, d7
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 8005142:	f107 030c 	add.w	r3, r7, #12
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	edd3 7a00 	vldr	s15, [r3]
 800514c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005150:	eeb0 0b47 	vmov.f64	d0, d7
 8005154:	f00f f844 	bl	80141e0 <sin>
 8005158:	eeb0 7b40 	vmov.f64	d7, d0
 800515c:	ee29 7b07 	vmul.f64	d7, d9, d7
	                           sin(q[0])) +
 8005160:	ee38 8b07 	vadd.f64	d8, d8, d7
	                     2.6029060499520004E+6 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8005164:	f107 030c 	add.w	r3, r7, #12
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3304      	adds	r3, #4
 800516c:	edd3 7a00 	vldr	s15, [r3]
 8005170:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005174:	f107 030c 	add.w	r3, r7, #12
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	edd3 7a00 	vldr	s15, [r3]
 8005180:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005184:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005188:	ee36 7b07 	vadd.f64	d7, d6, d7
 800518c:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 80054b0 <IVK+0x4538>
 8005190:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005194:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 80054b8 <IVK+0x4540>
 8005198:	ee37 7b46 	vsub.f64	d7, d7, d6
 800519c:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 80054c0 <IVK+0x4548>
 80051a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051a4:	eeb0 0b47 	vmov.f64	d0, d7
 80051a8:	f00f f81a 	bl	80141e0 <sin>
 80051ac:	eeb0 7b40 	vmov.f64	d7, d0
	                     2.6029060499520004E+6 *
 80051b0:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 80054c8 <IVK+0x4550>
 80051b4:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 80051b8:	f107 030c 	add.w	r3, r7, #12
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3304      	adds	r3, #4
 80051c0:	edd3 7a00 	vldr	s15, [r3]
 80051c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051c8:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 80054b0 <IVK+0x4538>
 80051cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051d0:	eeb0 0b47 	vmov.f64	d0, d7
 80051d4:	f00e ffb0 	bl	8014138 <cos>
 80051d8:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 80051dc:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 80051e0:	f107 030c 	add.w	r3, r7, #12
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	edd3 7a00 	vldr	s15, [r3]
 80051ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051ee:	eeb0 0b47 	vmov.f64	d0, d7
 80051f2:	f00e fff5 	bl	80141e0 <sin>
 80051f6:	eeb0 7b40 	vmov.f64	d7, d0
 80051fa:	ee29 7b07 	vmul.f64	d7, d9, d7
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 80051fe:	ee38 6b47 	vsub.f64	d6, d8, d7
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 8005202:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8005206:	ee36 8b07 	vadd.f64	d8, d6, d7
	                    d1) +
	                   190230.12000000002 *
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800520a:	f107 030c 	add.w	r3, r7, #12
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3304      	adds	r3, #4
 8005212:	ed93 7a00 	vldr	s14, [r3]
 8005216:	f107 030c 	add.w	r3, r7, #12
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3308      	adds	r3, #8
 800521e:	edd3 7a00 	vldr	s15, [r3]
 8005222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005226:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800522a:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 80054b0 <IVK+0x4538>
 800522e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005232:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 80054b8 <IVK+0x4540>
 8005236:	ee37 7b46 	vsub.f64	d7, d7, d6
 800523a:	eeb0 0b47 	vmov.f64	d0, d7
 800523e:	f00e ff7b 	bl	8014138 <cos>
 8005242:	eeb0 7b40 	vmov.f64	d7, d0
	                   190230.12000000002 *
 8005246:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80054d0 <IVK+0x4558>
 800524a:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 800524e:	f107 030c 	add.w	r3, r7, #12
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3304      	adds	r3, #4
 8005256:	edd3 7a00 	vldr	s15, [r3]
 800525a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800525e:	ed9f 6b94 	vldr	d6, [pc, #592]	; 80054b0 <IVK+0x4538>
 8005262:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005266:	eeb0 0b47 	vmov.f64	d0, d7
 800526a:	f00e ffb9 	bl	80141e0 <sin>
 800526e:	eeb0 7b40 	vmov.f64	d7, d0
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005272:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 8005276:	f107 030c 	add.w	r3, r7, #12
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	edd3 7a00 	vldr	s15, [r3]
 8005280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005284:	eeb0 0b47 	vmov.f64	d0, d7
 8005288:	f00e ffaa 	bl	80141e0 <sin>
 800528c:	eeb0 7b40 	vmov.f64	d7, d0
 8005290:	ee29 7b07 	vmul.f64	d7, d9, d7
	                    d1) +
 8005294:	ee38 8b07 	vadd.f64	d8, d8, d7
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005298:	f107 030c 	add.w	r3, r7, #12
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3304      	adds	r3, #4
 80052a0:	ed93 7a00 	vldr	s14, [r3]
 80052a4:	f107 030c 	add.w	r3, r7, #12
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3308      	adds	r3, #8
 80052ac:	edd3 7a00 	vldr	s15, [r3]
 80052b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052b8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80054b0 <IVK+0x4538>
 80052bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052c0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80054b8 <IVK+0x4540>
 80052c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052c8:	eeb0 0b47 	vmov.f64	d0, d7
 80052cc:	f00e ff88 	bl	80141e0 <sin>
 80052d0:	eeb0 7b40 	vmov.f64	d7, d0
 80052d4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80054d0 <IVK+0x4558>
 80052d8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 80052dc:	f107 030c 	add.w	r3, r7, #12
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3304      	adds	r3, #4
 80052e4:	edd3 7a00 	vldr	s15, [r3]
 80052e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052ec:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80054b0 <IVK+0x4538>
 80052f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052f4:	eeb0 0b47 	vmov.f64	d0, d7
 80052f8:	f00e ff1e 	bl	8014138 <cos>
 80052fc:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005300:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 8005304:	f107 030c 	add.w	r3, r7, #12
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	edd3 7a00 	vldr	s15, [r3]
 800530e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005312:	eeb0 0b47 	vmov.f64	d0, d7
 8005316:	f00e ff63 	bl	80141e0 <sin>
 800531a:	eeb0 7b40 	vmov.f64	d7, d0
 800531e:	ee29 7b07 	vmul.f64	d7, d9, d7
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 8005322:	ee38 6b47 	vsub.f64	d6, d8, d7
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 8005326:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800532a:	ee36 8b07 	vadd.f64	d8, d6, d7
	                 d2) +
	                87600.0 *
	                    cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800532e:	f107 030c 	add.w	r3, r7, #12
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3304      	adds	r3, #4
 8005336:	edd3 7a00 	vldr	s15, [r3]
 800533a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800533e:	f107 030c 	add.w	r3, r7, #12
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800534e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005352:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005356:	f107 030c 	add.w	r3, r7, #12
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	330c      	adds	r3, #12
 800535e:	edd3 7a00 	vldr	s15, [r3]
 8005362:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005366:	ee36 7b07 	vadd.f64	d7, d6, d7
 800536a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80054b0 <IVK+0x4538>
 800536e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005372:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80054b8 <IVK+0x4540>
 8005376:	ee37 7b46 	vsub.f64	d7, d7, d6
 800537a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80054c0 <IVK+0x4548>
 800537e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005382:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8005500 <IVK+0x4588>
 8005386:	ee37 7b06 	vadd.f64	d7, d7, d6
 800538a:	eeb0 0b47 	vmov.f64	d0, d7
 800538e:	f00e fed3 	bl	8014138 <cos>
 8005392:	eeb0 7b40 	vmov.f64	d7, d0
	                87600.0 *
 8005396:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80054d8 <IVK+0x4560>
 800539a:	ee27 9b06 	vmul.f64	d9, d7, d6
	                         -0.73665) +
	                        1.52205) *
	                    sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800539e:	f107 030c 	add.w	r3, r7, #12
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3304      	adds	r3, #4
 80053a6:	edd3 7a00 	vldr	s15, [r3]
 80053aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3308      	adds	r3, #8
 80053b6:	edd3 7a00 	vldr	s15, [r3]
 80053ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80053c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80053c6:	f107 030c 	add.w	r3, r7, #12
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	edd3 7a00 	vldr	s15, [r3]
 80053d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80053da:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80054b0 <IVK+0x4538>
 80053de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053e2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80054b8 <IVK+0x4540>
 80053e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80053ea:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80054c0 <IVK+0x4548>
 80053ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80053f2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005500 <IVK+0x4588>
 80053f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053fa:	eeb0 0b47 	vmov.f64	d0, d7
 80053fe:	f00e feef 	bl	80141e0 <sin>
 8005402:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8005406:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         -0.73665) +
	                        1.52205) *
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 800540a:	f107 030c 	add.w	r3, r7, #12
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3304      	adds	r3, #4
 8005412:	ed93 7a00 	vldr	s14, [r3]
 8005416:	f107 030c 	add.w	r3, r7, #12
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	edd3 7a00 	vldr	s15, [r3]
 8005422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005426:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800542a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80054b0 <IVK+0x4538>
 800542e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005432:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80054b8 <IVK+0x4540>
 8005436:	ee37 7b46 	vsub.f64	d7, d7, d6
 800543a:	eeb0 0b47 	vmov.f64	d0, d7
 800543e:	f00e fe7b 	bl	8014138 <cos>
 8005442:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8005446:	ee29 9b07 	vmul.f64	d9, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 800544a:	f107 030c 	add.w	r3, r7, #12
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	edd3 7a00 	vldr	s15, [r3]
 8005454:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005458:	eeb0 0b47 	vmov.f64	d0, d7
 800545c:	f00e fe6c 	bl	8014138 <cos>
 8005460:	eeb0 7b40 	vmov.f64	d7, d0
 8005464:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 d2) +
 8005468:	ee38 8b07 	vadd.f64	d8, d8, d7
	               1.02865176E+6 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800546c:	f107 030c 	add.w	r3, r7, #12
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3304      	adds	r3, #4
 8005474:	edd3 7a00 	vldr	s15, [r3]
 8005478:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800547c:	f107 030c 	add.w	r3, r7, #12
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3308      	adds	r3, #8
 8005484:	edd3 7a00 	vldr	s15, [r3]
 8005488:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800548c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005490:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005494:	f107 030c 	add.w	r3, r7, #12
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	edd3 7a00 	vldr	s15, [r3]
 80054a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80054a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80054a8:	e036      	b.n	8005518 <IVK+0x45a0>
 80054aa:	bf00      	nop
 80054ac:	f3af 8000 	nop.w
 80054b0:	45a1cac1 	.word	0x45a1cac1
 80054b4:	3ffaf3b6 	.word	0x3ffaf3b6
 80054b8:	39581062 	.word	0x39581062
 80054bc:	3fecc8b4 	.word	0x3fecc8b4
 80054c0:	05532618 	.word	0x05532618
 80054c4:	3fe792a3 	.word	0x3fe792a3
 80054c8:	0664d3c0 	.word	0x0664d3c0
 80054cc:	4143dbcd 	.word	0x4143dbcd
 80054d0:	f5c28f5d 	.word	0xf5c28f5d
 80054d4:	410738b0 	.word	0x410738b0
 80054d8:	00000000 	.word	0x00000000
 80054dc:	40f56300 	.word	0x40f56300
 80054e0:	851eb852 	.word	0x851eb852
 80054e4:	412f6457 	.word	0x412f6457
 80054e8:	66666666 	.word	0x66666666
 80054ec:	410e10a6 	.word	0x410e10a6
 80054f0:	45a1cac1 	.word	0x45a1cac1
 80054f4:	3ffaf3b6 	.word	0x3ffaf3b6
 80054f8:	39581062 	.word	0x39581062
 80054fc:	3fecc8b4 	.word	0x3fecc8b4
 8005500:	19ce075f 	.word	0x19ce075f
 8005504:	3ff85a51 	.word	0x3ff85a51
 8005508:	05532618 	.word	0x05532618
 800550c:	3fe792a3 	.word	0x3fe792a3
 8005510:	eaa8eb47 	.word	0xeaa8eb47
 8005514:	414610aa 	.word	0x414610aa
 8005518:	ed1f 6b0b 	vldr	d6, [pc, #-44]	; 80054f0 <IVK+0x4578>
 800551c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005520:	ed1f 6b0b 	vldr	d6, [pc, #-44]	; 80054f8 <IVK+0x4580>
 8005524:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005528:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8005508 <IVK+0x4590>
 800552c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005530:	ed1f 6b0d 	vldr	d6, [pc, #-52]	; 8005500 <IVK+0x4588>
 8005534:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005538:	eeb0 0b47 	vmov.f64	d0, d7
 800553c:	f00e fdfc 	bl	8014138 <cos>
 8005540:	eeb0 7b40 	vmov.f64	d7, d0
	               1.02865176E+6 *
 8005544:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 80054e0 <IVK+0x4568>
 8005548:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800554c:	f107 030c 	add.w	r3, r7, #12
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3304      	adds	r3, #4
 8005554:	edd3 7a00 	vldr	s15, [r3]
 8005558:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800555c:	f107 030c 	add.w	r3, r7, #12
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3308      	adds	r3, #8
 8005564:	edd3 7a00 	vldr	s15, [r3]
 8005568:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800556c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005570:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	330c      	adds	r3, #12
 800557c:	edd3 7a00 	vldr	s15, [r3]
 8005580:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005584:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005588:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 80054f0 <IVK+0x4578>
 800558c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005590:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 80054f8 <IVK+0x4580>
 8005594:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005598:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 8005508 <IVK+0x4590>
 800559c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055a0:	ed1f 6b29 	vldr	d6, [pc, #-164]	; 8005500 <IVK+0x4588>
 80055a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80055a8:	eeb0 0b47 	vmov.f64	d0, d7
 80055ac:	f00e fe18 	bl	80141e0 <sin>
 80055b0:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80055b4:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        -0.73665) +
	                       1.52205) *
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 80055b8:	f107 030c 	add.w	r3, r7, #12
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3304      	adds	r3, #4
 80055c0:	edd3 7a00 	vldr	s15, [r3]
 80055c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055c8:	ed1f 6b37 	vldr	d6, [pc, #-220]	; 80054f0 <IVK+0x4578>
 80055cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80055d0:	eeb0 0b47 	vmov.f64	d0, d7
 80055d4:	f00e fdb0 	bl	8014138 <cos>
 80055d8:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80055dc:	ee29 9b07 	vmul.f64	d9, d9, d7
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 80055e0:	f107 030c 	add.w	r3, r7, #12
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	edd3 7a00 	vldr	s15, [r3]
 80055ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055ee:	eeb0 0b47 	vmov.f64	d0, d7
 80055f2:	f00e fda1 	bl	8014138 <cos>
 80055f6:	eeb0 7b40 	vmov.f64	d7, d0
 80055fa:	ee29 7b07 	vmul.f64	d7, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 80055fe:	ee38 8b07 	vadd.f64	d8, d8, d7
	              246292.8 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005602:	f107 030c 	add.w	r3, r7, #12
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3304      	adds	r3, #4
 800560a:	edd3 7a00 	vldr	s15, [r3]
 800560e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005612:	f107 030c 	add.w	r3, r7, #12
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	edd3 7a00 	vldr	s15, [r3]
 800561e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005622:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005626:	ee36 6b07 	vadd.f64	d6, d6, d7
 800562a:	f107 030c 	add.w	r3, r7, #12
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	330c      	adds	r3, #12
 8005632:	edd3 7a00 	vldr	s15, [r3]
 8005636:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800563a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800563e:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 80054f0 <IVK+0x4578>
 8005642:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005646:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 80054f8 <IVK+0x4580>
 800564a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800564e:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 8005508 <IVK+0x4590>
 8005652:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005656:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8005500 <IVK+0x4588>
 800565a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800565e:	eeb0 0b47 	vmov.f64	d0, d7
 8005662:	f00e fdbd 	bl	80141e0 <sin>
 8005666:	eeb0 7b40 	vmov.f64	d7, d0
	              246292.8 *
 800566a:	ed1f 6b61 	vldr	d6, [pc, #-388]	; 80054e8 <IVK+0x4570>
 800566e:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005672:	f107 030c 	add.w	r3, r7, #12
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3304      	adds	r3, #4
 800567a:	edd3 7a00 	vldr	s15, [r3]
 800567e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005682:	f107 030c 	add.w	r3, r7, #12
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3308      	adds	r3, #8
 800568a:	edd3 7a00 	vldr	s15, [r3]
 800568e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005692:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005696:	ee36 7b07 	vadd.f64	d7, d6, d7
 800569a:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 80054f0 <IVK+0x4578>
 800569e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056a2:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 80054f8 <IVK+0x4580>
 80056a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056aa:	ed1f 6b69 	vldr	d6, [pc, #-420]	; 8005508 <IVK+0x4590>
 80056ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056b2:	eeb0 0b47 	vmov.f64	d0, d7
 80056b6:	f00e fd3f 	bl	8014138 <cos>
 80056ba:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 80056be:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 80056c2:	f107 030c 	add.w	r3, r7, #12
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3304      	adds	r3, #4
 80056ca:	ed93 7a00 	vldr	s14, [r3]
 80056ce:	f107 030c 	add.w	r3, r7, #12
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	edd3 7a00 	vldr	s15, [r3]
 80056da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056e2:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 80054f0 <IVK+0x4578>
 80056e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056ea:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 80054f8 <IVK+0x4580>
 80056ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056f2:	eeb0 0b47 	vmov.f64	d0, d7
 80056f6:	f00e fd73 	bl	80141e0 <sin>
 80056fa:	eeb0 7b40 	vmov.f64	d7, d0
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80056fe:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005702:	f107 030c 	add.w	r3, r7, #12
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	edd3 7a00 	vldr	s15, [r3]
 800570c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005710:	eeb0 0b47 	vmov.f64	d0, d7
 8005714:	f00e fd10 	bl	8014138 <cos>
 8005718:	eeb0 7b40 	vmov.f64	d7, d0
 800571c:	ee29 7b07 	vmul.f64	d7, d9, d7
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 8005720:	ee38 8b07 	vadd.f64	d8, d8, d7
	             246292.8 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3304      	adds	r3, #4
 800572c:	edd3 7a00 	vldr	s15, [r3]
 8005730:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005734:	f107 030c 	add.w	r3, r7, #12
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	edd3 7a00 	vldr	s15, [r3]
 8005740:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005744:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005748:	ee36 6b07 	vadd.f64	d6, d6, d7
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	edd3 7a00 	vldr	s15, [r3]
 8005758:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800575c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005760:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 80054f0 <IVK+0x4578>
 8005764:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005768:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 80054f8 <IVK+0x4580>
 800576c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005770:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8005508 <IVK+0x4590>
 8005774:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005778:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8005500 <IVK+0x4588>
 800577c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005780:	eeb0 0b47 	vmov.f64	d0, d7
 8005784:	f00e fd2c 	bl	80141e0 <sin>
 8005788:	eeb0 7b40 	vmov.f64	d7, d0
	             246292.8 *
 800578c:	ed1f 6baa 	vldr	d6, [pc, #-680]	; 80054e8 <IVK+0x4570>
 8005790:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005794:	f107 030c 	add.w	r3, r7, #12
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3304      	adds	r3, #4
 800579c:	edd3 7a00 	vldr	s15, [r3]
 80057a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80057a4:	f107 030c 	add.w	r3, r7, #12
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	edd3 7a00 	vldr	s15, [r3]
 80057b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80057b4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80057b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057bc:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 80054f0 <IVK+0x4578>
 80057c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80057c4:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 80054f8 <IVK+0x4580>
 80057c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80057cc:	ed1f 6bb2 	vldr	d6, [pc, #-712]	; 8005508 <IVK+0x4590>
 80057d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80057d4:	eeb0 0b47 	vmov.f64	d0, d7
 80057d8:	f00e fd02 	bl	80141e0 <sin>
 80057dc:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 80057e0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 80057e4:	f107 030c 	add.w	r3, r7, #12
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3304      	adds	r3, #4
 80057ec:	ed93 7a00 	vldr	s14, [r3]
 80057f0:	f107 030c 	add.w	r3, r7, #12
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	edd3 7a00 	vldr	s15, [r3]
 80057fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005804:	ed1f 6bc6 	vldr	d6, [pc, #-792]	; 80054f0 <IVK+0x4578>
 8005808:	ee37 7b06 	vadd.f64	d7, d7, d6
 800580c:	ed1f 6bc6 	vldr	d6, [pc, #-792]	; 80054f8 <IVK+0x4580>
 8005810:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005814:	eeb0 0b47 	vmov.f64	d0, d7
 8005818:	f00e fc8e 	bl	8014138 <cos>
 800581c:	eeb0 7b40 	vmov.f64	d7, d0
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005820:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005824:	f107 030c 	add.w	r3, r7, #12
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	edd3 7a00 	vldr	s15, [r3]
 800582e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005832:	eeb0 0b47 	vmov.f64	d0, d7
 8005836:	f00e fc7f 	bl	8014138 <cos>
 800583a:	eeb0 7b40 	vmov.f64	d7, d0
 800583e:	ee29 7b07 	vmul.f64	d7, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005842:	ee38 8b47 	vsub.f64	d8, d8, d7
	            2.8921178332800004E+6 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005846:	f107 030c 	add.w	r3, r7, #12
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3304      	adds	r3, #4
 800584e:	edd3 7a00 	vldr	s15, [r3]
 8005852:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005856:	f107 030c 	add.w	r3, r7, #12
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3308      	adds	r3, #8
 800585e:	edd3 7a00 	vldr	s15, [r3]
 8005862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005866:	ee37 7b07 	vadd.f64	d7, d7, d7
 800586a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800586e:	f107 030c 	add.w	r3, r7, #12
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	edd3 7a00 	vldr	s15, [r3]
 800587a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800587e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005882:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 80054f0 <IVK+0x4578>
 8005886:	ee37 7b06 	vadd.f64	d7, d7, d6
 800588a:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 80054f8 <IVK+0x4580>
 800588e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005892:	ed1f 6be3 	vldr	d6, [pc, #-908]	; 8005508 <IVK+0x4590>
 8005896:	ee37 7b46 	vsub.f64	d7, d7, d6
 800589a:	ed1f 6be7 	vldr	d6, [pc, #-924]	; 8005500 <IVK+0x4588>
 800589e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80058a2:	eeb0 0b47 	vmov.f64	d0, d7
 80058a6:	f00e fc9b 	bl	80141e0 <sin>
 80058aa:	eeb0 7b40 	vmov.f64	d7, d0
	            2.8921178332800004E+6 *
 80058ae:	ed1f 6be8 	vldr	d6, [pc, #-928]	; 8005510 <IVK+0x4598>
 80058b2:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80058b6:	f107 030c 	add.w	r3, r7, #12
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3304      	adds	r3, #4
 80058be:	edd3 7a00 	vldr	s15, [r3]
 80058c2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80058c6:	f107 030c 	add.w	r3, r7, #12
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3308      	adds	r3, #8
 80058ce:	edd3 7a00 	vldr	s15, [r3]
 80058d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80058d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80058da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80058de:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005ca0 <IVK+0x4d28>
 80058e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80058e6:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005ca8 <IVK+0x4d30>
 80058ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80058ee:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005cb0 <IVK+0x4d38>
 80058f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80058f6:	eeb0 0b47 	vmov.f64	d0, d7
 80058fa:	f00e fc1d 	bl	8014138 <cos>
 80058fe:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 8005902:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005906:	f107 030c 	add.w	r3, r7, #12
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3304      	adds	r3, #4
 800590e:	edd3 7a00 	vldr	s15, [r3]
 8005912:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005916:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8005ca0 <IVK+0x4d28>
 800591a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800591e:	eeb0 0b47 	vmov.f64	d0, d7
 8005922:	f00e fc5d 	bl	80141e0 <sin>
 8005926:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800592a:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 800592e:	f107 030c 	add.w	r3, r7, #12
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	edd3 7a00 	vldr	s15, [r3]
 8005938:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800593c:	eeb0 0b47 	vmov.f64	d0, d7
 8005940:	f00e fbfa 	bl	8014138 <cos>
 8005944:	eeb0 7b40 	vmov.f64	d7, d0
 8005948:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 800594c:	ee38 8b07 	vadd.f64	d8, d8, d7
	           2.8921178332800004E+6 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005950:	f107 030c 	add.w	r3, r7, #12
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3304      	adds	r3, #4
 8005958:	edd3 7a00 	vldr	s15, [r3]
 800595c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	edd3 7a00 	vldr	s15, [r3]
 800596c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005970:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005974:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005978:	f107 030c 	add.w	r3, r7, #12
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330c      	adds	r3, #12
 8005980:	edd3 7a00 	vldr	s15, [r3]
 8005984:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800598c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005ca0 <IVK+0x4d28>
 8005990:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005994:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005ca8 <IVK+0x4d30>
 8005998:	ee37 7b46 	vsub.f64	d7, d7, d6
 800599c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005cb0 <IVK+0x4d38>
 80059a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80059a4:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005cb8 <IVK+0x4d40>
 80059a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059ac:	eeb0 0b47 	vmov.f64	d0, d7
 80059b0:	f00e fc16 	bl	80141e0 <sin>
 80059b4:	eeb0 7b40 	vmov.f64	d7, d0
	           2.8921178332800004E+6 *
 80059b8:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8005cc0 <IVK+0x4d48>
 80059bc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80059c0:	f107 030c 	add.w	r3, r7, #12
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3304      	adds	r3, #4
 80059c8:	edd3 7a00 	vldr	s15, [r3]
 80059cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80059d0:	f107 030c 	add.w	r3, r7, #12
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	edd3 7a00 	vldr	s15, [r3]
 80059dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80059e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80059e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80059e8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005ca0 <IVK+0x4d28>
 80059ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059f0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005ca8 <IVK+0x4d30>
 80059f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80059f8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005cb0 <IVK+0x4d38>
 80059fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a00:	eeb0 0b47 	vmov.f64	d0, d7
 8005a04:	f00e fbec 	bl	80141e0 <sin>
 8005a08:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8005a0c:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005a10:	f107 030c 	add.w	r3, r7, #12
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3304      	adds	r3, #4
 8005a18:	edd3 7a00 	vldr	s15, [r3]
 8005a1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a20:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8005ca0 <IVK+0x4d28>
 8005a24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a28:	eeb0 0b47 	vmov.f64	d0, d7
 8005a2c:	f00e fb84 	bl	8014138 <cos>
 8005a30:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005a34:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005a38:	f107 030c 	add.w	r3, r7, #12
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	edd3 7a00 	vldr	s15, [r3]
 8005a42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a46:	eeb0 0b47 	vmov.f64	d0, d7
 8005a4a:	f00e fb75 	bl	8014138 <cos>
 8005a4e:	eeb0 7b40 	vmov.f64	d7, d0
 8005a52:	ee29 7b07 	vmul.f64	d7, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005a56:	ee38 8b47 	vsub.f64	d8, d8, d7
	          211366.80000000002 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005a5a:	f107 030c 	add.w	r3, r7, #12
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3304      	adds	r3, #4
 8005a62:	edd3 7a00 	vldr	s15, [r3]
 8005a66:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005a6a:	f107 030c 	add.w	r3, r7, #12
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3308      	adds	r3, #8
 8005a72:	edd3 7a00 	vldr	s15, [r3]
 8005a76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a7e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a82:	f107 030c 	add.w	r3, r7, #12
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	edd3 7a00 	vldr	s15, [r3]
 8005a8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a96:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005ca0 <IVK+0x4d28>
 8005a9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a9e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005ca8 <IVK+0x4d30>
 8005aa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005aa6:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005cb0 <IVK+0x4d38>
 8005aaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005aae:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005cb8 <IVK+0x4d40>
 8005ab2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ab6:	eeb0 0b47 	vmov.f64	d0, d7
 8005aba:	f00e fb91 	bl	80141e0 <sin>
 8005abe:	eeb0 7b40 	vmov.f64	d7, d0
	          211366.80000000002 *
 8005ac2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8005cc8 <IVK+0x4d50>
 8005ac6:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8005aca:	f107 030c 	add.w	r3, r7, #12
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	ed93 7a00 	vldr	s14, [r3]
 8005ad6:	f107 030c 	add.w	r3, r7, #12
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3308      	adds	r3, #8
 8005ade:	edd3 7a00 	vldr	s15, [r3]
 8005ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005aea:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8005ca0 <IVK+0x4d28>
 8005aee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005af2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8005ca8 <IVK+0x4d30>
 8005af6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005afa:	eeb0 0b47 	vmov.f64	d0, d7
 8005afe:	f00e fb1b 	bl	8014138 <cos>
 8005b02:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8005b06:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8005b0a:	f107 030c 	add.w	r3, r7, #12
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3304      	adds	r3, #4
 8005b12:	edd3 7a00 	vldr	s15, [r3]
 8005b16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b1a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8005ca0 <IVK+0x4d28>
 8005b1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b22:	eeb0 0b47 	vmov.f64	d0, d7
 8005b26:	f00e fb5b 	bl	80141e0 <sin>
 8005b2a:	eeb0 7b40 	vmov.f64	d7, d0
 8005b2e:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(q[0])) -
 8005b32:	f107 030c 	add.w	r3, r7, #12
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	edd3 7a00 	vldr	s15, [r3]
 8005b3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b40:	eeb0 0b47 	vmov.f64	d0, d7
 8005b44:	f00e faf8 	bl	8014138 <cos>
 8005b48:	eeb0 7b40 	vmov.f64	d7, d0
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8005b4c:	ee29 7b07 	vmul.f64	d7, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005b50:	ee38 8b07 	vadd.f64	d8, d8, d7
	         211366.80000000002 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005b54:	f107 030c 	add.w	r3, r7, #12
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	edd3 7a00 	vldr	s15, [r3]
 8005b60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005b64:	f107 030c 	add.w	r3, r7, #12
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	edd3 7a00 	vldr	s15, [r3]
 8005b70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b74:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b78:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005b7c:	f107 030c 	add.w	r3, r7, #12
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	330c      	adds	r3, #12
 8005b84:	edd3 7a00 	vldr	s15, [r3]
 8005b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b90:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005ca0 <IVK+0x4d28>
 8005b94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b98:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005ca8 <IVK+0x4d30>
 8005b9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ba0:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005cb0 <IVK+0x4d38>
 8005ba4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ba8:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005cb8 <IVK+0x4d40>
 8005bac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005bb0:	eeb0 0b47 	vmov.f64	d0, d7
 8005bb4:	f00e fb14 	bl	80141e0 <sin>
 8005bb8:	eeb0 7b40 	vmov.f64	d7, d0
	         211366.80000000002 *
 8005bbc:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8005cc8 <IVK+0x4d50>
 8005bc0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8005bc4:	f107 030c 	add.w	r3, r7, #12
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	ed93 7a00 	vldr	s14, [r3]
 8005bd0:	f107 030c 	add.w	r3, r7, #12
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	edd3 7a00 	vldr	s15, [r3]
 8005bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005be4:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8005ca0 <IVK+0x4d28>
 8005be8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005bec:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8005ca8 <IVK+0x4d30>
 8005bf0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005bf4:	eeb0 0b47 	vmov.f64	d0, d7
 8005bf8:	f00e faf2 	bl	80141e0 <sin>
 8005bfc:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8005c00:	ee29 9b07 	vmul.f64	d9, d9, d7
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8005c04:	f107 030c 	add.w	r3, r7, #12
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	edd3 7a00 	vldr	s15, [r3]
 8005c10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c14:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8005ca0 <IVK+0x4d28>
 8005c18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8005c20:	f00e fa8a 	bl	8014138 <cos>
 8005c24:	eeb0 7b40 	vmov.f64	d7, d0
 8005c28:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[0]))) /
 8005c2c:	f107 030c 	add.w	r3, r7, #12
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	edd3 7a00 	vldr	s15, [r3]
 8005c36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c3a:	eeb0 0b47 	vmov.f64	d0, d7
 8005c3e:	f00e fa7b 	bl	8014138 <cos>
 8005c42:	eeb0 7b40 	vmov.f64	d7, d0
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8005c46:	ee29 7b07 	vmul.f64	d7, d9, d7
	              cos(q[0])) -
 8005c4a:	ee38 7b47 	vsub.f64	d7, d8, d7
	      -(4.0 *
 8005c4e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005c52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c56:	eeb1 5b47 	vneg.f64	d5, d7
	             cos(q[0]))) /
 8005c5a:	ed97 6b76 	vldr	d6, [r7, #472]	; 0x1d8
 8005c5e:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[9] =
 8005c62:	f107 0310 	add.w	r3, r7, #16
 8005c66:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	      d;
	  dv[14] = -(40.0 * cos(q[0]) *
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	edd3 7a00 	vldr	s15, [r3]
 8005c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c78:	eeb0 0b47 	vmov.f64	d0, d7
 8005c7c:	f00e fa5c 	bl	8014138 <cos>
 8005c80:	eeb0 7b40 	vmov.f64	d7, d0
 8005c84:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8005cf0 <IVK+0x4d78>
 8005c88:	ee27 8b06 	vmul.f64	d8, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8005c8c:	f107 030c 	add.w	r3, r7, #12
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3304      	adds	r3, #4
 8005c94:	ed93 7a00 	vldr	s14, [r3]
 8005c98:	f107 030c 	add.w	r3, r7, #12
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	e02b      	b.n	8005cf8 <IVK+0x4d80>
 8005ca0:	45a1cac1 	.word	0x45a1cac1
 8005ca4:	3ffaf3b6 	.word	0x3ffaf3b6
 8005ca8:	39581062 	.word	0x39581062
 8005cac:	3fecc8b4 	.word	0x3fecc8b4
 8005cb0:	05532618 	.word	0x05532618
 8005cb4:	3fe792a3 	.word	0x3fe792a3
 8005cb8:	19ce075f 	.word	0x19ce075f
 8005cbc:	3ff85a51 	.word	0x3ff85a51
 8005cc0:	eaa8eb47 	.word	0xeaa8eb47
 8005cc4:	414610aa 	.word	0x414610aa
 8005cc8:	66666667 	.word	0x66666667
 8005ccc:	4109cd36 	.word	0x4109cd36
 8005cd0:	39581062 	.word	0x39581062
 8005cd4:	3fecc8b4 	.word	0x3fecc8b4
 8005cd8:	00000000 	.word	0x00000000
 8005cdc:	404e0000 	.word	0x404e0000
 8005ce0:	45a1cac1 	.word	0x45a1cac1
 8005ce4:	3ffaf3b6 	.word	0x3ffaf3b6
 8005ce8:	b020c49c 	.word	0xb020c49c
 8005cec:	40860472 	.word	0x40860472
 8005cf0:	00000000 	.word	0x00000000
 8005cf4:	40440000 	.word	0x40440000
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	edd3 7a00 	vldr	s15, [r3]
 8005cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d06:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 8005ce0 <IVK+0x4d68>
 8005d0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d0e:	ed1f 6b10 	vldr	d6, [pc, #-64]	; 8005cd0 <IVK+0x4d58>
 8005d12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d16:	eeb0 0b47 	vmov.f64	d0, d7
 8005d1a:	f00e fa0d 	bl	8014138 <cos>
 8005d1e:	eeb0 7b40 	vmov.f64	d7, d0
 8005d22:	ed1f 6b13 	vldr	d6, [pc, #-76]	; 8005cd8 <IVK+0x4d60>
 8005d26:	ee27 9b06 	vmul.f64	d9, d7, d6
	              704.556 * cos(q[1] + 1.6845))) /
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3304      	adds	r3, #4
 8005d32:	edd3 7a00 	vldr	s15, [r3]
 8005d36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d3a:	ed1f 6b17 	vldr	d6, [pc, #-92]	; 8005ce0 <IVK+0x4d68>
 8005d3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d42:	eeb0 0b47 	vmov.f64	d0, d7
 8005d46:	f00e f9f7 	bl	8014138 <cos>
 8005d4a:	eeb0 7b40 	vmov.f64	d7, d0
 8005d4e:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8005ce8 <IVK+0x4d70>
 8005d52:	ee27 7b06 	vmul.f64	d7, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8005d56:	ee39 7b07 	vadd.f64	d7, d9, d7
	  dv[14] = -(40.0 * cos(q[0]) *
 8005d5a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005d5e:	eeb1 5b47 	vneg.f64	d5, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8005d62:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005d66:	ee27 6b07 	vmul.f64	d6, d7, d7
 8005d6a:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8005d6e:	ee26 6b07 	vmul.f64	d6, d6, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005d72:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005d76:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005d7a:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8005d7e:	ee24 7b07 	vmul.f64	d7, d4, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8005d82:	ee36 6b47 	vsub.f64	d6, d6, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005d86:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005d8a:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005d8e:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8005d92:	ee24 7b07 	vmul.f64	d7, d4, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005d96:	ee36 6b07 	vadd.f64	d6, d6, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005d9a:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005d9e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005da2:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8005da6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005daa:	ee36 6b47 	vsub.f64	d6, d6, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005dae:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005db2:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005db6:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8005dba:	ee24 7b07 	vmul.f64	d7, d4, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005dbe:	ee36 6b07 	vadd.f64	d6, d6, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005dc2:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005dc6:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005dca:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8005dce:	ee24 7b07 	vmul.f64	d7, d4, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005dd2:	ee36 6b47 	vsub.f64	d6, d6, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005dd6:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005dda:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005dde:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8005de2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005de6:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005dea:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005dee:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005df2:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8005df6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005dfa:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005dfe:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005e02:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005e06:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005e0a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005e0e:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005e12:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005e16:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005e1a:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8005e1e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005e22:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005e26:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005e2a:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005e2e:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005e32:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005e36:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 8005e3a:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005e3e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005e42:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8005e46:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005e4a:	ee36 7b47 	vsub.f64	d7, d6, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8005e4e:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8005e52:	ee27 6b06 	vmul.f64	d6, d7, d6
	              704.556 * cos(q[1] + 1.6845))) /
 8005e56:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[14] = -(40.0 * cos(q[0]) *
 8005e5a:	f107 0310 	add.w	r3, r7, #16
 8005e5e:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
	  dv[19] =
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 8005e62:	f107 030c 	add.w	r3, r7, #12
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	ed93 7a00 	vldr	s14, [r3]
 8005e6e:	f107 030c 	add.w	r3, r7, #12
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3308      	adds	r3, #8
 8005e76:	edd3 7a00 	vldr	s15, [r3]
 8005e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e82:	ed1f 6b69 	vldr	d6, [pc, #-420]	; 8005ce0 <IVK+0x4d68>
 8005e86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e8a:	ed1f 6b6f 	vldr	d6, [pc, #-444]	; 8005cd0 <IVK+0x4d58>
 8005e8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e92:	eeb0 0b47 	vmov.f64	d0, d7
 8005e96:	f00e f94f 	bl	8014138 <cos>
 8005e9a:	eeb0 7b40 	vmov.f64	d7, d0
 8005e9e:	ed1f 6b72 	vldr	d6, [pc, #-456]	; 8005cd8 <IVK+0x4d60>
 8005ea2:	ee27 8b06 	vmul.f64	d8, d7, d6
 8005ea6:	f107 030c 	add.w	r3, r7, #12
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	edd3 7a00 	vldr	s15, [r3]
 8005eb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005eb4:	eeb0 0b47 	vmov.f64	d0, d7
 8005eb8:	f00e f992 	bl	80141e0 <sin>
 8005ebc:	eeb0 7b40 	vmov.f64	d7, d0
 8005ec0:	ee28 8b07 	vmul.f64	d8, d8, d7
	                704.556 * cos(q[1] + 1.6845) * sin(q[0]))) /
 8005ec4:	f107 030c 	add.w	r3, r7, #12
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	edd3 7a00 	vldr	s15, [r3]
 8005ed0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ed4:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8005ce0 <IVK+0x4d68>
 8005ed8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005edc:	eeb0 0b47 	vmov.f64	d0, d7
 8005ee0:	f00e f92a 	bl	8014138 <cos>
 8005ee4:	eeb0 7b40 	vmov.f64	d7, d0
 8005ee8:	ed1f 6b81 	vldr	d6, [pc, #-516]	; 8005ce8 <IVK+0x4d70>
 8005eec:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005ef0:	f107 030c 	add.w	r3, r7, #12
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	edd3 7a00 	vldr	s15, [r3]
 8005efa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005efe:	eeb0 0b47 	vmov.f64	d0, d7
 8005f02:	f00e f96d 	bl	80141e0 <sin>
 8005f06:	eeb0 7b40 	vmov.f64	d7, d0
 8005f0a:	ee29 7b07 	vmul.f64	d7, d9, d7
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 8005f0e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005f12:	ed1f 6b89 	vldr	d6, [pc, #-548]	; 8005cf0 <IVK+0x4d78>
 8005f16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f1a:	eeb1 5b47 	vneg.f64	d5, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8005f1e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005f22:	ee27 6b07 	vmul.f64	d6, d7, d7
 8005f26:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8005f2a:	ee26 6b07 	vmul.f64	d6, d6, d7
	                        d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005f2e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005f32:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f36:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8005f3a:	ee24 7b07 	vmul.f64	d7, d4, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8005f3e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                       d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005f42:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005f46:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f4a:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8005f4e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005f52:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005f56:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005f5a:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f5e:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8005f62:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005f66:	ee36 6b47 	vsub.f64	d6, d6, d7
	                     d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005f6a:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005f6e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f72:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8005f76:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005f7a:	ee36 6b07 	vadd.f64	d6, d6, d7
	                    d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005f7e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005f82:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f86:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8005f8a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005f8e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                   d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005f92:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005f96:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f9a:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8005f9e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005fa2:	ee36 6b07 	vadd.f64	d6, d6, d7
	                  d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005fa6:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005faa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005fae:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8005fb2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                   d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005fb6:	ee36 6b47 	vsub.f64	d6, d6, d7
	                 d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005fba:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005fbe:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005fc2:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005fc6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                  d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005fca:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005fce:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005fd2:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005fd6:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8005fda:	ee24 7b07 	vmul.f64	d7, d4, d7
	                 d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005fde:	ee36 6b47 	vsub.f64	d6, d6, d7
	               d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005fe2:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005fe6:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005fea:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005fee:	ee24 7b07 	vmul.f64	d7, d4, d7
	                d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005ff2:	ee36 6b07 	vadd.f64	d6, d6, d7
	              d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 8005ff6:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005ffa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005ffe:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8006002:	ee24 7b07 	vmul.f64	d7, d4, d7
	               d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006006:	ee36 7b47 	vsub.f64	d7, d6, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800600a:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 800600e:	ee27 6b06 	vmul.f64	d6, d7, d6
	                704.556 * cos(q[1] + 1.6845) * sin(q[0]))) /
 8006012:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[19] =
 8006016:	f107 0310 	add.w	r3, r7, #16
 800601a:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 800601e:	f107 030c 	add.w	r3, r7, #12
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3304      	adds	r3, #4
 8006026:	ed93 7a00 	vldr	s14, [r3]
 800602a:	f107 030c 	add.w	r3, r7, #12
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	edd3 7a00 	vldr	s15, [r3]
 8006036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800603a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800603e:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 8005ce0 <IVK+0x4d68>
 8006042:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006046:	ed1f 6bde 	vldr	d6, [pc, #-888]	; 8005cd0 <IVK+0x4d58>
 800604a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800604e:	eeb0 0b47 	vmov.f64	d0, d7
 8006052:	f00e f8c5 	bl	80141e0 <sin>
 8006056:	eeb0 7b40 	vmov.f64	d7, d0
 800605a:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 8005cd8 <IVK+0x4d60>
 800605e:	ee27 8b06 	vmul.f64	d8, d7, d6
	                     704.556 * sin(q[1] + 1.6845))) /
 8006062:	f107 030c 	add.w	r3, r7, #12
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3304      	adds	r3, #4
 800606a:	edd3 7a00 	vldr	s15, [r3]
 800606e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006072:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 8005ce0 <IVK+0x4d68>
 8006076:	ee37 7b06 	vadd.f64	d7, d7, d6
 800607a:	eeb0 0b47 	vmov.f64	d0, d7
 800607e:	f00e f8af 	bl	80141e0 <sin>
 8006082:	eeb0 7b40 	vmov.f64	d7, d0
 8006086:	ed1f 6be8 	vldr	d6, [pc, #-928]	; 8005ce8 <IVK+0x4d70>
 800608a:	ee27 7b06 	vmul.f64	d7, d7, d6
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 800608e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006092:	ed1f 6be9 	vldr	d6, [pc, #-932]	; 8005cf0 <IVK+0x4d78>
 8006096:	ee27 7b06 	vmul.f64	d7, d7, d6
 800609a:	eeb1 5b47 	vneg.f64	d5, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800609e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80060a2:	ee27 6b07 	vmul.f64	d6, d7, d7
 80060a6:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80060aa:	ee26 6b07 	vmul.f64	d6, d6, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80060ae:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80060b2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80060b6:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80060ba:	ee24 7b07 	vmul.f64	d7, d4, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80060be:	ee36 6b47 	vsub.f64	d6, d6, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80060c2:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80060c6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80060ca:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80060ce:	ee24 7b07 	vmul.f64	d7, d4, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80060d2:	ee36 6b07 	vadd.f64	d6, d6, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80060d6:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80060da:	ee27 4b07 	vmul.f64	d4, d7, d7
 80060de:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80060e2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80060e6:	ee36 6b47 	vsub.f64	d6, d6, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80060ea:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80060ee:	ee27 4b07 	vmul.f64	d4, d7, d7
 80060f2:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80060f6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80060fa:	ee36 6b07 	vadd.f64	d6, d6, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80060fe:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8006102:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006106:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800610a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800610e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006112:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8006116:	ee27 4b07 	vmul.f64	d4, d7, d7
 800611a:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800611e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006122:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006126:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800612a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800612e:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8006132:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006136:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800613a:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800613e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006142:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8006146:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800614a:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800614e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8006152:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006156:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 800615a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800615e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006162:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8006166:	ee27 4b07 	vmul.f64	d4, d7, d7
 800616a:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 800616e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006172:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 8006176:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800617a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800617e:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8006182:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006186:	ee36 7b47 	vsub.f64	d7, d6, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800618a:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 800618e:	ee27 6b06 	vmul.f64	d6, d7, d6
	                     704.556 * sin(q[1] + 1.6845))) /
 8006192:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8006196:	f107 0310 	add.w	r3, r7, #16
 800619a:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
	  for (i = 0; i < 5; i++) {
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80061a4:	e044      	b.n	8006230 <IVK+0x52b8>
	    d = 0.0;
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
	    for (i1 = 0; i1 < 5; i1++) {
 80061b2:	2300      	movs	r3, #0
 80061b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80061b8:	e025      	b.n	8006206 <IVK+0x528e>
	      d += dv[i + 5 * i1] * x_dot[i1];
 80061ba:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	441a      	add	r2, r3
 80061c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80061c8:	4413      	add	r3, r2
 80061ca:	f107 0210 	add.w	r2, r7, #16
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	4413      	add	r3, r2
 80061d2:	ed93 6b00 	vldr	d6, [r3]
 80061d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	f107 0208 	add.w	r2, r7, #8
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	4413      	add	r3, r2
 80061e4:	edd3 7a00 	vldr	s15, [r3]
 80061e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80061ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80061f0:	ed97 6b76 	vldr	d6, [r7, #472]	; 0x1d8
 80061f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061f8:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	    for (i1 = 0; i1 < 5; i1++) {
 80061fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006200:	3301      	adds	r3, #1
 8006202:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006206:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800620a:	2b04      	cmp	r3, #4
 800620c:	ddd5      	ble.n	80061ba <IVK+0x5242>
	    }
	    m_dot_temp[i] = d;
 800620e:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8006212:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006216:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800621a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	edc3 7a00 	vstr	s15, [r3]
	  for (i = 0; i < 5; i++) {
 8006226:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800622a:	3301      	adds	r3, #1
 800622c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006230:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006234:	2b04      	cmp	r3, #4
 8006236:	ddb6      	ble.n	80061a6 <IVK+0x522e>
	  }
	memcpy(m_dot, m_dot_temp, 20);
 8006238:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 800623c:	1d3b      	adds	r3, r7, #4
 800623e:	2214      	movs	r2, #20
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	f00b fb2d 	bl	80118a0 <memcpy>
}
 8006246:	bf00      	nop
 8006248:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800624c:	46bd      	mov	sp, r7
 800624e:	ecbd 8b04 	vpop	{d8-d9}
 8006252:	bd80      	pop	{r7, pc}
 8006254:	0000      	movs	r0, r0
	...

08006258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006258:	b590      	push	{r4, r7, lr}
 800625a:	b095      	sub	sp, #84	; 0x54
 800625c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800625e:	f002 fb61 	bl	8008924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006262:	f000 fc6f 	bl	8006b44 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8006266:	f000 fce7 	bl	8006c38 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800626a:	f7fa fda9 	bl	8000dc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800626e:	f7fa fc15 	bl	8000a9c <MX_ADC1_Init>
  MX_ADC3_Init();
 8006272:	f7fa fc8b 	bl	8000b8c <MX_ADC3_Init>
  MX_SPI3_Init();
 8006276:	f000 fe69 	bl	8006f4c <MX_SPI3_Init>
  MX_TIM1_Init();
 800627a:	f001 f8c1 	bl	8007400 <MX_TIM1_Init>
  MX_TIM2_Init();
 800627e:	f001 f96d 	bl	800755c <MX_TIM2_Init>
  MX_TIM3_Init();
 8006282:	f001 f9e3 	bl	800764c <MX_TIM3_Init>
  MX_TIM4_Init();
 8006286:	f001 fa59 	bl	800773c <MX_TIM4_Init>
  MX_TIM12_Init();
 800628a:	f001 facf 	bl	800782c <MX_TIM12_Init>
  MX_TIM13_Init();
 800628e:	f001 fb31 	bl	80078f4 <MX_TIM13_Init>
  MX_TIM14_Init();
 8006292:	f001 fb53 	bl	800793c <MX_TIM14_Init>
  MX_TIM15_Init();
 8006296:	f001 fb9f 	bl	80079d8 <MX_TIM15_Init>
  MX_TIM16_Init();
 800629a:	f001 fc41 	bl	8007b20 <MX_TIM16_Init>
  MX_TIM17_Init();
 800629e:	f001 fcb9 	bl	8007c14 <MX_TIM17_Init>
  MX_UART4_Init();
 80062a2:	f002 f893 	bl	80083cc <MX_UART4_Init>
  MX_UART5_Init();
 80062a6:	f002 f8dd 	bl	8008464 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80062aa:	f002 f927 	bl	80084fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80062ae:	f002 f971 	bl	8008594 <MX_USART3_UART_Init>
  MX_TIM23_Init();
 80062b2:	f001 fd2b 	bl	8007d0c <MX_TIM23_Init>
  MX_CRC_Init();
 80062b6:	f7fa fd35 	bl	8000d24 <MX_CRC_Init>
  MX_TIM24_Init();
 80062ba:	f001 fd77 	bl	8007dac <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
	uint32_t timestamp1 = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t timestamp2 = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t j_num = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

//	ARMsProtocol_FUNC_Init();
//	HAL_TIM_Base_Start_IT(&htim24);
	int32_t encoder_unwrap_value[5] = { 0 };
 80062cc:	f107 0318 	add.w	r3, r7, #24
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	605a      	str	r2, [r3, #4]
 80062d6:	609a      	str	r2, [r3, #8]
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	611a      	str	r2, [r3, #16]
//	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 1);
//	servo_initialise(&servo_motor, &htim17, TIM_CHANNEL_1);
	/*
	 * Encoder Initialise
	 */
	AMT21_initialise(&encoders[0], &huart2, 0x2C, USART2_DE_GPIO_Port,
 80062dc:	2310      	movs	r3, #16
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	4bc2      	ldr	r3, [pc, #776]	; (80065ec <main+0x394>)
 80062e2:	222c      	movs	r2, #44	; 0x2c
 80062e4:	49c2      	ldr	r1, [pc, #776]	; (80065f0 <main+0x398>)
 80062e6:	48c3      	ldr	r0, [pc, #780]	; (80065f4 <main+0x39c>)
 80062e8:	f7fa f9e6 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[1], &huart2, 0x70, USART2_DE_GPIO_Port,
 80062ec:	2310      	movs	r3, #16
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	4bbe      	ldr	r3, [pc, #760]	; (80065ec <main+0x394>)
 80062f2:	2270      	movs	r2, #112	; 0x70
 80062f4:	49be      	ldr	r1, [pc, #760]	; (80065f0 <main+0x398>)
 80062f6:	48c0      	ldr	r0, [pc, #768]	; (80065f8 <main+0x3a0>)
 80062f8:	f7fa f9de 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[2], &huart2, 0x54, USART2_DE_GPIO_Port,
 80062fc:	2310      	movs	r3, #16
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	4bba      	ldr	r3, [pc, #744]	; (80065ec <main+0x394>)
 8006302:	2254      	movs	r2, #84	; 0x54
 8006304:	49ba      	ldr	r1, [pc, #744]	; (80065f0 <main+0x398>)
 8006306:	48bd      	ldr	r0, [pc, #756]	; (80065fc <main+0x3a4>)
 8006308:	f7fa f9d6 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[4], &huart2, 0xE8, USART2_DE_GPIO_Port,
 800630c:	2310      	movs	r3, #16
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	4bb6      	ldr	r3, [pc, #728]	; (80065ec <main+0x394>)
 8006312:	22e8      	movs	r2, #232	; 0xe8
 8006314:	49b6      	ldr	r1, [pc, #728]	; (80065f0 <main+0x398>)
 8006316:	48ba      	ldr	r0, [pc, #744]	; (8006600 <main+0x3a8>)
 8006318:	f7fa f9ce 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[3], &huart2, 0xB4, USART2_DE_GPIO_Port,
 800631c:	2310      	movs	r3, #16
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	4bb2      	ldr	r3, [pc, #712]	; (80065ec <main+0x394>)
 8006322:	22b4      	movs	r2, #180	; 0xb4
 8006324:	49b2      	ldr	r1, [pc, #712]	; (80065f0 <main+0x398>)
 8006326:	48b7      	ldr	r0, [pc, #732]	; (8006604 <main+0x3ac>)
 8006328:	f7fa f9c6 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	/*
	 * Stepper Initialise
	 */
	stepper_initialise(&steppers[0], &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port,
 800632c:	2301      	movs	r3, #1
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	2308      	movs	r3, #8
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	4bb4      	ldr	r3, [pc, #720]	; (8006608 <main+0x3b0>)
 8006336:	2200      	movs	r2, #0
 8006338:	49b4      	ldr	r1, [pc, #720]	; (800660c <main+0x3b4>)
 800633a:	48b5      	ldr	r0, [pc, #724]	; (8006610 <main+0x3b8>)
 800633c:	f000 fcc2 	bl	8006cc4 <stepper_initialise>
	DIR1_Pin, 1);//swap 0 -> 1
	stepper_initialise(&steppers[1], &htim2, TIM_CHANNEL_1, DIR2_GPIO_Port,
 8006340:	2301      	movs	r3, #1
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	2310      	movs	r3, #16
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	4baf      	ldr	r3, [pc, #700]	; (8006608 <main+0x3b0>)
 800634a:	2200      	movs	r2, #0
 800634c:	49b1      	ldr	r1, [pc, #708]	; (8006614 <main+0x3bc>)
 800634e:	48b2      	ldr	r0, [pc, #712]	; (8006618 <main+0x3c0>)
 8006350:	f000 fcb8 	bl	8006cc4 <stepper_initialise>
	DIR2_Pin, 1);
	stepper_initialise(&steppers[2], &htim3, TIM_CHANNEL_1, DIR3_GPIO_Port,
 8006354:	2300      	movs	r3, #0
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	4baf      	ldr	r3, [pc, #700]	; (800661c <main+0x3c4>)
 8006360:	2200      	movs	r2, #0
 8006362:	49af      	ldr	r1, [pc, #700]	; (8006620 <main+0x3c8>)
 8006364:	48af      	ldr	r0, [pc, #700]	; (8006624 <main+0x3cc>)
 8006366:	f000 fcad 	bl	8006cc4 <stepper_initialise>
	DIR3_Pin, 0);//swap 1 -> 0
	stepper_initialise(&steppers[4], &htim4, TIM_CHANNEL_1, DIR4_GPIO_Port,
 800636a:	2300      	movs	r3, #0
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	4ba9      	ldr	r3, [pc, #676]	; (800661c <main+0x3c4>)
 8006376:	2200      	movs	r2, #0
 8006378:	49ab      	ldr	r1, [pc, #684]	; (8006628 <main+0x3d0>)
 800637a:	48ac      	ldr	r0, [pc, #688]	; (800662c <main+0x3d4>)
 800637c:	f000 fca2 	bl	8006cc4 <stepper_initialise>
	DIR4_Pin, 0);
	stepper_initialise(&steppers[3], &htim15, TIM_CHANNEL_1, DIR5_GPIO_Port,
 8006380:	2301      	movs	r3, #1
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	4ba4      	ldr	r3, [pc, #656]	; (800661c <main+0x3c4>)
 800638c:	2200      	movs	r2, #0
 800638e:	49a8      	ldr	r1, [pc, #672]	; (8006630 <main+0x3d8>)
 8006390:	48a8      	ldr	r0, [pc, #672]	; (8006634 <main+0x3dc>)
 8006392:	f000 fc97 	bl	8006cc4 <stepper_initialise>
	DIR5_Pin, 1);
	/*
	 * Kalman Filter Initialise
	 */
	KalmanFilter_initialise(&kalman_filter[0], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 8006396:	eddf 3aa8 	vldr	s7, [pc, #672]	; 8006638 <main+0x3e0>
 800639a:	ed9f 3aa8 	vldr	s6, [pc, #672]	; 800663c <main+0x3e4>
 800639e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80063a2:	ed9f 2aa7 	vldr	s4, [pc, #668]	; 8006640 <main+0x3e8>
 80063a6:	eddf 1aa6 	vldr	s3, [pc, #664]	; 8006640 <main+0x3e8>
 80063aa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80063ae:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8006640 <main+0x3e8>
 80063b2:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8006640 <main+0x3e8>
 80063b6:	48a3      	ldr	r0, [pc, #652]	; (8006644 <main+0x3ec>)
 80063b8:	f7fa faa0 	bl	80008fc <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[1], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 80063bc:	eddf 3a9e 	vldr	s7, [pc, #632]	; 8006638 <main+0x3e0>
 80063c0:	ed9f 3a9e 	vldr	s6, [pc, #632]	; 800663c <main+0x3e4>
 80063c4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80063c8:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 8006640 <main+0x3e8>
 80063cc:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8006640 <main+0x3e8>
 80063d0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80063d4:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8006640 <main+0x3e8>
 80063d8:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8006640 <main+0x3e8>
 80063dc:	489a      	ldr	r0, [pc, #616]	; (8006648 <main+0x3f0>)
 80063de:	f7fa fa8d 	bl	80008fc <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[2], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 80063e2:	eddf 3a95 	vldr	s7, [pc, #596]	; 8006638 <main+0x3e0>
 80063e6:	ed9f 3a95 	vldr	s6, [pc, #596]	; 800663c <main+0x3e4>
 80063ea:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80063ee:	ed9f 2a94 	vldr	s4, [pc, #592]	; 8006640 <main+0x3e8>
 80063f2:	eddf 1a93 	vldr	s3, [pc, #588]	; 8006640 <main+0x3e8>
 80063f6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80063fa:	eddf 0a91 	vldr	s1, [pc, #580]	; 8006640 <main+0x3e8>
 80063fe:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8006640 <main+0x3e8>
 8006402:	4892      	ldr	r0, [pc, #584]	; (800664c <main+0x3f4>)
 8006404:	f7fa fa7a 	bl	80008fc <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[3], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 8006408:	eddf 3a8b 	vldr	s7, [pc, #556]	; 8006638 <main+0x3e0>
 800640c:	ed9f 3a8b 	vldr	s6, [pc, #556]	; 800663c <main+0x3e4>
 8006410:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8006414:	ed9f 2a8a 	vldr	s4, [pc, #552]	; 8006640 <main+0x3e8>
 8006418:	eddf 1a89 	vldr	s3, [pc, #548]	; 8006640 <main+0x3e8>
 800641c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006420:	eddf 0a87 	vldr	s1, [pc, #540]	; 8006640 <main+0x3e8>
 8006424:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8006640 <main+0x3e8>
 8006428:	4889      	ldr	r0, [pc, #548]	; (8006650 <main+0x3f8>)
 800642a:	f7fa fa67 	bl	80008fc <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[4], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 800642e:	eddf 3a82 	vldr	s7, [pc, #520]	; 8006638 <main+0x3e0>
 8006432:	ed9f 3a82 	vldr	s6, [pc, #520]	; 800663c <main+0x3e4>
 8006436:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800643a:	ed9f 2a81 	vldr	s4, [pc, #516]	; 8006640 <main+0x3e8>
 800643e:	eddf 1a80 	vldr	s3, [pc, #512]	; 8006640 <main+0x3e8>
 8006442:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006446:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8006640 <main+0x3e8>
 800644a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8006640 <main+0x3e8>
 800644e:	4881      	ldr	r0, [pc, #516]	; (8006654 <main+0x3fc>)
 8006450:	f7fa fa54 	bl	80008fc <KalmanFilter_initialise>
	/*
	 * Position Pid Initialise
	 */
	PIDController_initialise(&position_pid_controller[0], 1500, 0, 0);
 8006454:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8006640 <main+0x3e8>
 8006458:	eddf 0a79 	vldr	s1, [pc, #484]	; 8006640 <main+0x3e8>
 800645c:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8006658 <main+0x400>
 8006460:	487e      	ldr	r0, [pc, #504]	; (800665c <main+0x404>)
 8006462:	f7fa fa7d 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[1], 1500, 0, 0);
 8006466:	ed9f 1a76 	vldr	s2, [pc, #472]	; 8006640 <main+0x3e8>
 800646a:	eddf 0a75 	vldr	s1, [pc, #468]	; 8006640 <main+0x3e8>
 800646e:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8006658 <main+0x400>
 8006472:	487b      	ldr	r0, [pc, #492]	; (8006660 <main+0x408>)
 8006474:	f7fa fa74 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[2], 1500, 0, 0);
 8006478:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8006640 <main+0x3e8>
 800647c:	eddf 0a70 	vldr	s1, [pc, #448]	; 8006640 <main+0x3e8>
 8006480:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8006658 <main+0x400>
 8006484:	4877      	ldr	r0, [pc, #476]	; (8006664 <main+0x40c>)
 8006486:	f7fa fa6b 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[3], 1500, 0, 0);
 800648a:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 8006640 <main+0x3e8>
 800648e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8006640 <main+0x3e8>
 8006492:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8006658 <main+0x400>
 8006496:	4874      	ldr	r0, [pc, #464]	; (8006668 <main+0x410>)
 8006498:	f7fa fa62 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[4], 1500, 0, 0);
 800649c:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8006640 <main+0x3e8>
 80064a0:	eddf 0a67 	vldr	s1, [pc, #412]	; 8006640 <main+0x3e8>
 80064a4:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8006658 <main+0x400>
 80064a8:	4870      	ldr	r0, [pc, #448]	; (800666c <main+0x414>)
 80064aa:	f7fa fa59 	bl	8000960 <PIDController_initialise>
	/*
	 * Velocity Pid Initialise
	 */
	PIDController_initialise(&velocity_pid_controller[0], 0, 0, 0);
 80064ae:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8006640 <main+0x3e8>
 80064b2:	eddf 0a63 	vldr	s1, [pc, #396]	; 8006640 <main+0x3e8>
 80064b6:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8006640 <main+0x3e8>
 80064ba:	486d      	ldr	r0, [pc, #436]	; (8006670 <main+0x418>)
 80064bc:	f7fa fa50 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[1], 0, 0, 0);
 80064c0:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8006640 <main+0x3e8>
 80064c4:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8006640 <main+0x3e8>
 80064c8:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8006640 <main+0x3e8>
 80064cc:	4869      	ldr	r0, [pc, #420]	; (8006674 <main+0x41c>)
 80064ce:	f7fa fa47 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[2], 0, 0, 0);
 80064d2:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8006640 <main+0x3e8>
 80064d6:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8006640 <main+0x3e8>
 80064da:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8006640 <main+0x3e8>
 80064de:	4866      	ldr	r0, [pc, #408]	; (8006678 <main+0x420>)
 80064e0:	f7fa fa3e 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[3], 0, 0, 0);
 80064e4:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8006640 <main+0x3e8>
 80064e8:	eddf 0a55 	vldr	s1, [pc, #340]	; 8006640 <main+0x3e8>
 80064ec:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8006640 <main+0x3e8>
 80064f0:	4862      	ldr	r0, [pc, #392]	; (800667c <main+0x424>)
 80064f2:	f7fa fa35 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[4], 0, 0, 0);
 80064f6:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8006640 <main+0x3e8>
 80064fa:	eddf 0a51 	vldr	s1, [pc, #324]	; 8006640 <main+0x3e8>
 80064fe:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8006640 <main+0x3e8>
 8006502:	485f      	ldr	r0, [pc, #380]	; (8006680 <main+0x428>)
 8006504:	f7fa fa2c 	bl	8000960 <PIDController_initialise>
	/*
	 * for Cartesian Jog
	 */
	float delta_q[5] = {0};
 8006508:	1d3b      	adds	r3, r7, #4
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	609a      	str	r2, [r3, #8]
 8006512:	60da      	str	r2, [r3, #12]
 8006514:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start(&htim24);
 8006516:	485b      	ldr	r0, [pc, #364]	; (8006684 <main+0x42c>)
 8006518:	f008 f8ca 	bl	800e6b0 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (set_zero_flag > 0){
 800651c:	4b5a      	ldr	r3, [pc, #360]	; (8006688 <main+0x430>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00e      	beq.n	8006542 <main+0x2ea>
			AMT21_set_zero(&encoders[3]);
 8006524:	4837      	ldr	r0, [pc, #220]	; (8006604 <main+0x3ac>)
 8006526:	f7fa f92f 	bl	8000788 <AMT21_set_zero>
			AMT21_set_zero(&encoders[4]);
 800652a:	4835      	ldr	r0, [pc, #212]	; (8006600 <main+0x3a8>)
 800652c:	f7fa f92c 	bl	8000788 <AMT21_set_zero>
			encoder_config[3] = 0;
 8006530:	4b56      	ldr	r3, [pc, #344]	; (800668c <main+0x434>)
 8006532:	2200      	movs	r2, #0
 8006534:	60da      	str	r2, [r3, #12]
			encoder_config[4] = 0;
 8006536:	4b55      	ldr	r3, [pc, #340]	; (800668c <main+0x434>)
 8006538:	2200      	movs	r2, #0
 800653a:	611a      	str	r2, [r3, #16]
			set_zero_flag = 0;
 800653c:	4b52      	ldr	r3, [pc, #328]	; (8006688 <main+0x430>)
 800653e:	2200      	movs	r2, #0
 8006540:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - timestamp1 >= 250) {
 8006542:	f002 fa75 	bl	8008a30 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2bf9      	cmp	r3, #249	; 0xf9
 800654e:	f240 8180 	bls.w	8006852 <main+0x5fa>
			if (jog_cycle > 0){
 8006552:	4b4f      	ldr	r3, [pc, #316]	; (8006690 <main+0x438>)
 8006554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006558:	2b00      	cmp	r3, #0
 800655a:	dd21      	ble.n	80065a0 <main+0x348>
				if (khe_cnt >= 0){
 800655c:	4b4d      	ldr	r3, [pc, #308]	; (8006694 <main+0x43c>)
 800655e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006562:	2b00      	cmp	r3, #0
 8006564:	db02      	blt.n	800656c <main+0x314>
					delta_khe[1] = 0.02;
 8006566:	4b4c      	ldr	r3, [pc, #304]	; (8006698 <main+0x440>)
 8006568:	4a4c      	ldr	r2, [pc, #304]	; (800669c <main+0x444>)
 800656a:	605a      	str	r2, [r3, #4]
				}
				if (khe_cnt < 0){
 800656c:	4b49      	ldr	r3, [pc, #292]	; (8006694 <main+0x43c>)
 800656e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006572:	2b00      	cmp	r3, #0
 8006574:	da02      	bge.n	800657c <main+0x324>
					delta_khe[1] = -0.02;
 8006576:	4b48      	ldr	r3, [pc, #288]	; (8006698 <main+0x440>)
 8006578:	4a49      	ldr	r2, [pc, #292]	; (80066a0 <main+0x448>)
 800657a:	605a      	str	r2, [r3, #4]
				}
				khe_cnt++;
 800657c:	4b45      	ldr	r3, [pc, #276]	; (8006694 <main+0x43c>)
 800657e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006582:	b29b      	uxth	r3, r3
 8006584:	3301      	adds	r3, #1
 8006586:	b29b      	uxth	r3, r3
 8006588:	b21a      	sxth	r2, r3
 800658a:	4b42      	ldr	r3, [pc, #264]	; (8006694 <main+0x43c>)
 800658c:	801a      	strh	r2, [r3, #0]
				if (khe_cnt == 35){
 800658e:	4b41      	ldr	r3, [pc, #260]	; (8006694 <main+0x43c>)
 8006590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006594:	2b23      	cmp	r3, #35	; 0x23
 8006596:	d103      	bne.n	80065a0 <main+0x348>
					khe_cnt = -34;
 8006598:	4b3e      	ldr	r3, [pc, #248]	; (8006694 <main+0x43c>)
 800659a:	f64f 72de 	movw	r2, #65502	; 0xffde
 800659e:	801a      	strh	r2, [r3, #0]
				}
			}
			if ((delta_khe[0] != 0)|
 80065a0:	4b3d      	ldr	r3, [pc, #244]	; (8006698 <main+0x440>)
 80065a2:	edd3 7a00 	vldr	s15, [r3]
 80065a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80065aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ae:	bf14      	ite	ne
 80065b0:	2301      	movne	r3, #1
 80065b2:	2300      	moveq	r3, #0
 80065b4:	b2da      	uxtb	r2, r3
			(delta_khe[1] != 0)|
 80065b6:	4b38      	ldr	r3, [pc, #224]	; (8006698 <main+0x440>)
 80065b8:	edd3 7a01 	vldr	s15, [r3, #4]
			if ((delta_khe[0] != 0)|
 80065bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80065c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c4:	bf14      	ite	ne
 80065c6:	2301      	movne	r3, #1
 80065c8:	2300      	moveq	r3, #0
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	461a      	mov	r2, r3
			(delta_khe[2] != 0)|
 80065d2:	4b31      	ldr	r3, [pc, #196]	; (8006698 <main+0x440>)
 80065d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80065d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80065dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e0:	bf14      	ite	ne
 80065e2:	2301      	movne	r3, #1
 80065e4:	2300      	moveq	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
			(delta_khe[1] != 0)|
 80065e8:	4313      	orrs	r3, r2
 80065ea:	e05b      	b.n	80066a4 <main+0x44c>
 80065ec:	58020c00 	.word	0x58020c00
 80065f0:	24000dcc 	.word	0x24000dcc
 80065f4:	240004f8 	.word	0x240004f8
 80065f8:	2400050c 	.word	0x2400050c
 80065fc:	24000520 	.word	0x24000520
 8006600:	24000548 	.word	0x24000548
 8006604:	24000534 	.word	0x24000534
 8006608:	58021000 	.word	0x58021000
 800660c:	24000a54 	.word	0x24000a54
 8006610:	24000474 	.word	0x24000474
 8006614:	24000aa0 	.word	0x24000aa0
 8006618:	2400048c 	.word	0x2400048c
 800661c:	58020800 	.word	0x58020800
 8006620:	240009bc 	.word	0x240009bc
 8006624:	240004a4 	.word	0x240004a4
 8006628:	240008d8 	.word	0x240008d8
 800662c:	240004d4 	.word	0x240004d4
 8006630:	24000924 	.word	0x24000924
 8006634:	240004bc 	.word	0x240004bc
 8006638:	3aa3d70a 	.word	0x3aa3d70a
 800663c:	44fa0000 	.word	0x44fa0000
 8006640:	00000000 	.word	0x00000000
 8006644:	24000660 	.word	0x24000660
 8006648:	24000680 	.word	0x24000680
 800664c:	240006a0 	.word	0x240006a0
 8006650:	240006c0 	.word	0x240006c0
 8006654:	240006e0 	.word	0x240006e0
 8006658:	44bb8000 	.word	0x44bb8000
 800665c:	24000700 	.word	0x24000700
 8006660:	24000734 	.word	0x24000734
 8006664:	24000768 	.word	0x24000768
 8006668:	2400079c 	.word	0x2400079c
 800666c:	240007d0 	.word	0x240007d0
 8006670:	2400055c 	.word	0x2400055c
 8006674:	24000590 	.word	0x24000590
 8006678:	240005c4 	.word	0x240005c4
 800667c:	240005f8 	.word	0x240005f8
 8006680:	2400062c 	.word	0x2400062c
 8006684:	2400088c 	.word	0x2400088c
 8006688:	24000264 	.word	0x24000264
 800668c:	24000210 	.word	0x24000210
 8006690:	24000260 	.word	0x24000260
 8006694:	24000262 	.word	0x24000262
 8006698:	2400024c 	.word	0x2400024c
 800669c:	3ca3d70a 	.word	0x3ca3d70a
 80066a0:	bca3d70a 	.word	0xbca3d70a
			(delta_khe[3] != 0)|
 80066a4:	4a56      	ldr	r2, [pc, #344]	; (8006800 <main+0x5a8>)
 80066a6:	edd2 7a03 	vldr	s15, [r2, #12]
 80066aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80066ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b2:	bf14      	ite	ne
 80066b4:	2201      	movne	r2, #1
 80066b6:	2200      	moveq	r2, #0
 80066b8:	b2d2      	uxtb	r2, r2
			(delta_khe[2] != 0)|
 80066ba:	4313      	orrs	r3, r2
			(delta_khe[4] != 0)
 80066bc:	4a50      	ldr	r2, [pc, #320]	; (8006800 <main+0x5a8>)
 80066be:	edd2 7a04 	vldr	s15, [r2, #16]
 80066c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80066c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ca:	bf14      	ite	ne
 80066cc:	2201      	movne	r2, #1
 80066ce:	2200      	moveq	r2, #0
 80066d0:	b2d2      	uxtb	r2, r2
			(delta_khe[3] != 0)|
 80066d2:	4313      	orrs	r3, r2
			if ((delta_khe[0] != 0)|
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80bc 	beq.w	8006852 <main+0x5fa>
			) {
				timestamp1 = HAL_GetTick();
 80066da:	f002 f9a9 	bl	8008a30 <HAL_GetTick>
 80066de:	6478      	str	r0, [r7, #68]	; 0x44
				joint_config[0] = (2*M_PI * encoder_config[0])/16384.0f;
 80066e0:	4b48      	ldr	r3, [pc, #288]	; (8006804 <main+0x5ac>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066ec:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80067e8 <main+0x590>
 80066f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80066f4:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 80067f0 <main+0x598>
 80066f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006700:	4b41      	ldr	r3, [pc, #260]	; (8006808 <main+0x5b0>)
 8006702:	edc3 7a00 	vstr	s15, [r3]
				joint_config[1] = (2*M_PI * encoder_config[1])/16384.0f;
 8006706:	4b3f      	ldr	r3, [pc, #252]	; (8006804 <main+0x5ac>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006712:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80067e8 <main+0x590>
 8006716:	ee27 6b06 	vmul.f64	d6, d7, d6
 800671a:	ed9f 5b35 	vldr	d5, [pc, #212]	; 80067f0 <main+0x598>
 800671e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006722:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006726:	4b38      	ldr	r3, [pc, #224]	; (8006808 <main+0x5b0>)
 8006728:	edc3 7a01 	vstr	s15, [r3, #4]
				joint_config[2] = (2*M_PI * encoder_config[2])/16384.0f;
 800672c:	4b35      	ldr	r3, [pc, #212]	; (8006804 <main+0x5ac>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	ee07 3a90 	vmov	s15, r3
 8006734:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006738:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80067e8 <main+0x590>
 800673c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006740:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80067f0 <main+0x598>
 8006744:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006748:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800674c:	4b2e      	ldr	r3, [pc, #184]	; (8006808 <main+0x5b0>)
 800674e:	edc3 7a02 	vstr	s15, [r3, #8]
				float m4 = (2*M_PI * encoder_config[3])/16384.0f;
 8006752:	4b2c      	ldr	r3, [pc, #176]	; (8006804 <main+0x5ac>)
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800675e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80067e8 <main+0x590>
 8006762:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006766:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80067f0 <main+0x598>
 800676a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800676e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006772:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				float m5 =  (2*M_PI * encoder_config[4])/16384.0f;
 8006776:	4b23      	ldr	r3, [pc, #140]	; (8006804 <main+0x5ac>)
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006782:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80067e8 <main+0x590>
 8006786:	ee27 6b06 	vmul.f64	d6, d7, d6
 800678a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80067f0 <main+0x598>
 800678e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006792:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006796:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				joint_config[3] = (m4 + m5) * 0.1125;
 800679a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800679e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80067a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80067aa:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80067f8 <main+0x5a0>
 80067ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80067b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80067b6:	4b14      	ldr	r3, [pc, #80]	; (8006808 <main+0x5b0>)
 80067b8:	edc3 7a03 	vstr	s15, [r3, #12]
				joint_config[4] = (m4 - m5)/8.0;
 80067bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80067c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80067c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80067c8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80067cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067d0:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <main+0x5b0>)
 80067d2:	edc3 7a04 	vstr	s15, [r3, #16]
//				joint_config[1] = desired_position[1];
//				joint_config[2] = desired_position[2];
//				desired_position[3] = 0;
//				desired_position[4] = 0;

				IVK(joint_config, delta_khe, delta_q);
 80067d6:	1d3b      	adds	r3, r7, #4
 80067d8:	461a      	mov	r2, r3
 80067da:	4909      	ldr	r1, [pc, #36]	; (8006800 <main+0x5a8>)
 80067dc:	480a      	ldr	r0, [pc, #40]	; (8006808 <main+0x5b0>)
 80067de:	f7fa fbcb 	bl	8000f78 <IVK>
				for (int i = 0; i < 5; i++) {
 80067e2:	2300      	movs	r3, #0
 80067e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80067e6:	e031      	b.n	800684c <main+0x5f4>
 80067e8:	54442d18 	.word	0x54442d18
 80067ec:	401921fb 	.word	0x401921fb
 80067f0:	00000000 	.word	0x00000000
 80067f4:	40d00000 	.word	0x40d00000
 80067f8:	cccccccd 	.word	0xcccccccd
 80067fc:	3fbccccc 	.word	0x3fbccccc
 8006800:	2400024c 	.word	0x2400024c
 8006804:	24000210 	.word	0x24000210
 8006808:	24000224 	.word	0x24000224
					desired_position[i] += delta_q[i];
 800680c:	4ac6      	ldr	r2, [pc, #792]	; (8006b28 <main+0x8d0>)
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	ed93 7a00 	vldr	s14, [r3]
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006820:	4413      	add	r3, r2
 8006822:	3b44      	subs	r3, #68	; 0x44
 8006824:	edd3 7a00 	vldr	s15, [r3]
 8006828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800682c:	4abe      	ldr	r2, [pc, #760]	; (8006b28 <main+0x8d0>)
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	edc3 7a00 	vstr	s15, [r3]
					delta_khe[i] = 0;
 8006838:	4abc      	ldr	r2, [pc, #752]	; (8006b2c <main+0x8d4>)
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 5; i++) {
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	3301      	adds	r3, #1
 800684a:	63bb      	str	r3, [r7, #56]	; 0x38
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	2b04      	cmp	r3, #4
 8006850:	dddc      	ble.n	800680c <main+0x5b4>
				}
//			ARMsProtocol_FUNC_Interface();
			}
		}
		if (HAL_GetTick() - timestamp2 >= 1) {
 8006852:	f002 f8ed 	bl	8008a30 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800685a:	4293      	cmp	r3, r2
 800685c:	f43f ae5e 	beq.w	800651c <main+0x2c4>
			timestamp2 = HAL_GetTick();
 8006860:	f002 f8e6 	bl	8008a30 <HAL_GetTick>
 8006864:	6438      	str	r0, [r7, #64]	; 0x40
			HAL_StatusTypeDef rep = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			encoder_unwrap_value[j_num] = 0;
 800686c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006876:	4413      	add	r3, r2
 8006878:	2200      	movs	r2, #0
 800687a:	f843 2c30 	str.w	r2, [r3, #-48]
			while (1) {
				AMT21_read_value(&(encoders[j_num]));
 800687e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4aa9      	ldr	r2, [pc, #676]	; (8006b30 <main+0x8d8>)
 800688c:	4413      	add	r3, r2
 800688e:	4618      	mov	r0, r3
 8006890:	f7f9 ff3b 	bl	800070a <AMT21_read_value>
				rep = AMT21_check_value(&(encoders[j_num]));
 8006894:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4aa3      	ldr	r2, [pc, #652]	; (8006b30 <main+0x8d8>)
 80068a2:	4413      	add	r3, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7f9 ff96 	bl	80007d6 <AMT21_check_value>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (rep == HAL_OK) {
 80068b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e2      	bne.n	800687e <main+0x626>
					encoder_unwrap_value[j_num] = AMT21_unwrap(
							(int32_t) encoders[j_num].position,
 80068b8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80068bc:	499c      	ldr	r1, [pc, #624]	; (8006b30 <main+0x8d8>)
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	330e      	adds	r3, #14
 80068ca:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 80068cc:	4618      	mov	r0, r3
							(int32_t) encoders[j_num].prev_position);
 80068ce:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80068d2:	4997      	ldr	r1, [pc, #604]	; (8006b30 <main+0x8d8>)
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	3310      	adds	r3, #16
 80068e0:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 80068e2:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 80068e6:	4619      	mov	r1, r3
 80068e8:	f7f9 ffd8 	bl	800089c <AMT21_unwrap>
 80068ec:	4602      	mov	r2, r0
 80068ee:	00a3      	lsls	r3, r4, #2
 80068f0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80068f4:	440b      	add	r3, r1
 80068f6:	f843 2c30 	str.w	r2, [r3, #-48]
					encoders[j_num].prev_position = encoders[j_num].position;
 80068fa:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80068fe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006902:	488b      	ldr	r0, [pc, #556]	; (8006b30 <main+0x8d8>)
 8006904:	460b      	mov	r3, r1
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4403      	add	r3, r0
 800690e:	330e      	adds	r3, #14
 8006910:	8818      	ldrh	r0, [r3, #0]
 8006912:	4987      	ldr	r1, [pc, #540]	; (8006b30 <main+0x8d8>)
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	3310      	adds	r3, #16
 8006920:	4602      	mov	r2, r0
 8006922:	801a      	strh	r2, [r3, #0]
					break;
 8006924:	bf00      	nop
				}
			}
			if ((j_num == 0)|(j_num == 2)|(j_num == 3)){
 8006926:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800692a:	2b00      	cmp	r3, #0
 800692c:	bf0c      	ite	eq
 800692e:	2301      	moveq	r3, #1
 8006930:	2300      	movne	r3, #0
 8006932:	b2da      	uxtb	r2, r3
 8006934:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006938:	2b02      	cmp	r3, #2
 800693a:	bf0c      	ite	eq
 800693c:	2301      	moveq	r3, #1
 800693e:	2300      	movne	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	4313      	orrs	r3, r2
 8006944:	b2db      	uxtb	r3, r3
 8006946:	461a      	mov	r2, r3
 8006948:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800694c:	2b03      	cmp	r3, #3
 800694e:	bf0c      	ite	eq
 8006950:	2301      	moveq	r3, #1
 8006952:	2300      	movne	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	4313      	orrs	r3, r2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d010      	beq.n	800697e <main+0x726>
				encoder_unwrap_value[j_num] = encoder_unwrap_value[j_num] * -1;
 800695c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006966:	4413      	add	r3, r2
 8006968:	f853 2c30 	ldr.w	r2, [r3, #-48]
 800696c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006970:	4252      	negs	r2, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006978:	440b      	add	r3, r1
 800697a:	f843 2c30 	str.w	r2, [r3, #-48]
			}
			encoder_config[j_num] = encoder_config[j_num]
 800697e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006982:	4a6c      	ldr	r2, [pc, #432]	; (8006b34 <main+0x8dc>)
 8006984:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
					+ encoder_unwrap_value[j_num];
 8006988:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006992:	4413      	add	r3, r2
 8006994:	f853 2c30 	ldr.w	r2, [r3, #-48]
			encoder_config[j_num] = encoder_config[j_num]
 8006998:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
					+ encoder_unwrap_value[j_num];
 800699c:	440a      	add	r2, r1
			encoder_config[j_num] = encoder_config[j_num]
 800699e:	4965      	ldr	r1, [pc, #404]	; (8006b34 <main+0x8dc>)
 80069a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//			KalmanFilter_Update(&kalman_filter[j_num], encoder_config[j_num]);

			motor_config[0] = ((2*M_PI * encoder_config[0])/16384.0f) * (25.0f/9.0f);
 80069a4:	4b63      	ldr	r3, [pc, #396]	; (8006b34 <main+0x8dc>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	ee07 3a90 	vmov	s15, r3
 80069ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80069b0:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8006b08 <main+0x8b0>
 80069b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80069b8:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8006b10 <main+0x8b8>
 80069bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069c0:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8006b18 <main+0x8c0>
 80069c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80069c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80069cc:	4b5a      	ldr	r3, [pc, #360]	; (8006b38 <main+0x8e0>)
 80069ce:	edc3 7a00 	vstr	s15, [r3]
			motor_config[1] = ((2*M_PI * encoder_config[1])/16384.0f) * 27.0;
 80069d2:	4b58      	ldr	r3, [pc, #352]	; (8006b34 <main+0x8dc>)
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80069de:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8006b08 <main+0x8b0>
 80069e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80069e6:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8006b10 <main+0x8b8>
 80069ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069ee:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 80069f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80069f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80069fa:	4b4f      	ldr	r3, [pc, #316]	; (8006b38 <main+0x8e0>)
 80069fc:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_config[2] = 22.5 * sin((2*M_PI * encoder_config[2])/16384.0f);
 8006a00:	4b4c      	ldr	r3, [pc, #304]	; (8006b34 <main+0x8dc>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	ee07 3a90 	vmov	s15, r3
 8006a08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a0c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8006b08 <main+0x8b0>
 8006a10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006a14:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8006b10 <main+0x8b8>
 8006a18:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8006a1c:	eeb0 0b46 	vmov.f64	d0, d6
 8006a20:	f00d fbde 	bl	80141e0 <sin>
 8006a24:	eeb0 7b40 	vmov.f64	d7, d0
 8006a28:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8006b20 <main+0x8c8>
 8006a2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006a30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006a34:	4b40      	ldr	r3, [pc, #256]	; (8006b38 <main+0x8e0>)
 8006a36:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_config[3] = (2*M_PI * encoder_config[3])/16384.0f; //checked
 8006a3a:	4b3e      	ldr	r3, [pc, #248]	; (8006b34 <main+0x8dc>)
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a46:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8006b08 <main+0x8b0>
 8006a4a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a4e:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8006b10 <main+0x8b8>
 8006a52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006a5a:	4b37      	ldr	r3, [pc, #220]	; (8006b38 <main+0x8e0>)
 8006a5c:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_config[4] = (2*M_PI * encoder_config[4])/16384.0f; //checked
 8006a60:	4b34      	ldr	r3, [pc, #208]	; (8006b34 <main+0x8dc>)
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	ee07 3a90 	vmov	s15, r3
 8006a68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a6c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8006b08 <main+0x8b0>
 8006a70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a74:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8006b10 <main+0x8b8>
 8006a78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006a80:	4b2d      	ldr	r3, [pc, #180]	; (8006b38 <main+0x8e0>)
 8006a82:	edc3 7a04 	vstr	s15, [r3, #16]
			/*
			 * Position Controller
			 */
			PIDController_update(&position_pid_controller[j_num],
 8006a86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a8a:	2234      	movs	r2, #52	; 0x34
 8006a8c:	fb02 f303 	mul.w	r3, r2, r3
 8006a90:	4a2a      	ldr	r2, [pc, #168]	; (8006b3c <main+0x8e4>)
 8006a92:	441a      	add	r2, r3
 8006a94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a98:	4923      	ldr	r1, [pc, #140]	; (8006b28 <main+0x8d0>)
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	edd3 7a00 	vldr	s15, [r3]
 8006aa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006aa6:	4924      	ldr	r1, [pc, #144]	; (8006b38 <main+0x8e0>)
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	ed93 7a00 	vldr	s14, [r3]
 8006ab0:	eef0 0a47 	vmov.f32	s1, s14
 8006ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ab8:	4610      	mov	r0, r2
 8006aba:	f7f9 ff6f 	bl	800099c <PIDController_update>
					desired_position[j_num], motor_config[j_num]);
			stepper_set_speed(&steppers[j_num],
 8006abe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	4413      	add	r3, r2
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	4a1d      	ldr	r2, [pc, #116]	; (8006b40 <main+0x8e8>)
 8006acc:	441a      	add	r2, r3
 8006ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ad2:	491a      	ldr	r1, [pc, #104]	; (8006b3c <main+0x8e4>)
 8006ad4:	2034      	movs	r0, #52	; 0x34
 8006ad6:	fb00 f303 	mul.w	r3, r0, r3
 8006ada:	440b      	add	r3, r1
 8006adc:	3330      	adds	r3, #48	; 0x30
 8006ade:	edd3 7a00 	vldr	s15, [r3]
 8006ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	f000 f9a8 	bl	8006e3c <stepper_set_speed>
					position_pid_controller[j_num].out);
			j_num++;
 8006aec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006af0:	3301      	adds	r3, #1
 8006af2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (j_num == 5) {
 8006af6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006afa:	2b05      	cmp	r3, #5
 8006afc:	f47f ad0e 	bne.w	800651c <main+0x2c4>
				j_num = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (set_zero_flag > 0){
 8006b06:	e509      	b.n	800651c <main+0x2c4>
 8006b08:	54442d18 	.word	0x54442d18
 8006b0c:	401921fb 	.word	0x401921fb
 8006b10:	00000000 	.word	0x00000000
 8006b14:	40d00000 	.word	0x40d00000
 8006b18:	80000000 	.word	0x80000000
 8006b1c:	400638e3 	.word	0x400638e3
 8006b20:	00000000 	.word	0x00000000
 8006b24:	40368000 	.word	0x40368000
 8006b28:	24000000 	.word	0x24000000
 8006b2c:	2400024c 	.word	0x2400024c
 8006b30:	240004f8 	.word	0x240004f8
 8006b34:	24000210 	.word	0x24000210
 8006b38:	24000238 	.word	0x24000238
 8006b3c:	24000700 	.word	0x24000700
 8006b40:	24000474 	.word	0x24000474

08006b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b09c      	sub	sp, #112	; 0x70
 8006b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b4e:	224c      	movs	r2, #76	; 0x4c
 8006b50:	2100      	movs	r1, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	f00a feb2 	bl	80118bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b58:	1d3b      	adds	r3, r7, #4
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f00a feac 	bl	80118bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006b64:	2002      	movs	r0, #2
 8006b66:	f004 fbfb 	bl	800b360 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	603b      	str	r3, [r7, #0]
 8006b6e:	4b30      	ldr	r3, [pc, #192]	; (8006c30 <SystemClock_Config+0xec>)
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	4a2f      	ldr	r2, [pc, #188]	; (8006c30 <SystemClock_Config+0xec>)
 8006b74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006b78:	6193      	str	r3, [r2, #24]
 8006b7a:	4b2d      	ldr	r3, [pc, #180]	; (8006c30 <SystemClock_Config+0xec>)
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006b86:	bf00      	nop
 8006b88:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <SystemClock_Config+0xec>)
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b94:	d1f8      	bne.n	8006b88 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006b96:	4b27      	ldr	r3, [pc, #156]	; (8006c34 <SystemClock_Config+0xf0>)
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	f023 0303 	bic.w	r3, r3, #3
 8006b9e:	4a25      	ldr	r2, [pc, #148]	; (8006c34 <SystemClock_Config+0xf0>)
 8006ba0:	f043 0302 	orr.w	r3, r3, #2
 8006ba4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8006bbc:	232c      	movs	r3, #44	; 0x2c
 8006bbe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006bcc:	230c      	movs	r3, #12
 8006bce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f004 fbf9 	bl	800b3d4 <HAL_RCC_OscConfig>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8006be8:	f000 f866 	bl	8006cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006bec:	233f      	movs	r3, #63	; 0x3f
 8006bee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006bf8:	2308      	movs	r3, #8
 8006bfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006bfc:	2340      	movs	r3, #64	; 0x40
 8006bfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006c00:	2340      	movs	r3, #64	; 0x40
 8006c02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006c0a:	2340      	movs	r3, #64	; 0x40
 8006c0c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	2103      	movs	r1, #3
 8006c12:	4618      	mov	r0, r3
 8006c14:	f004 ff8a 	bl	800bb2c <HAL_RCC_ClockConfig>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8006c1e:	f000 f84b 	bl	8006cb8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8006c22:	f005 f939 	bl	800be98 <HAL_RCC_EnableCSS>
}
 8006c26:	bf00      	nop
 8006c28:	3770      	adds	r7, #112	; 0x70
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	58024800 	.word	0x58024800
 8006c34:	58024400 	.word	0x58024400

08006c38 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b0ae      	sub	sp, #184	; 0xb8
 8006c3c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c3e:	1d3b      	adds	r3, r7, #4
 8006c40:	22b4      	movs	r2, #180	; 0xb4
 8006c42:	2100      	movs	r1, #0
 8006c44:	4618      	mov	r0, r3
 8006c46:	f00a fe39 	bl	80118bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006c4a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c4e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8006c50:	2302      	movs	r3, #2
 8006c52:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8006c54:	230f      	movs	r3, #15
 8006c56:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006c60:	2302      	movs	r3, #2
 8006c62:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8006c64:	23c0      	movs	r3, #192	; 0xc0
 8006c66:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8006c6c:	f640 3386 	movw	r3, #2950	; 0xb86
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8006c72:	2300      	movs	r3, #0
 8006c74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f005 fb0e 	bl	800c29c <HAL_RCCEx_PeriphCLKConfig>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8006c86:	f000 f817 	bl	8006cb8 <Error_Handler>
  }
}
 8006c8a:	bf00      	nop
 8006c8c:	37b8      	adds	r7, #184	; 0xb8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 1);
 8006c9c:	1d39      	adds	r1, r7, #4
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	4804      	ldr	r0, [pc, #16]	; (8006cb4 <__io_putchar+0x20>)
 8006ca4:	f008 fed8 	bl	800fa58 <HAL_UART_Transmit>

	return ch;
 8006ca8:	687b      	ldr	r3, [r7, #4]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	24000c1c 	.word	0x24000c1c

08006cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006cbc:	b672      	cpsid	i
}
 8006cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006cc0:	e7fe      	b.n	8006cc0 <Error_Handler+0x8>
	...

08006cc4 <stepper_initialise>:
 */

#include "motor.h"

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		uint32_t tim_channel, GPIO_TypeDef *dir_port, uint16_t dir_pin, uint8_t dir_mode) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	605a      	str	r2, [r3, #4]
	dev->dir_port = dir_port;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	609a      	str	r2, [r3, #8]
	dev->dir_pin = dir_pin;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8b3a      	ldrh	r2, [r7, #24]
 8006ce8:	819a      	strh	r2, [r3, #12]
	/*
	 * dir mode set direction of stepper
	 */
	dev->dir_mode = dir_mode;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	7f3a      	ldrb	r2, [r7, #28]
 8006cee:	755a      	strb	r2, [r3, #21]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6898      	ldr	r0, [r3, #8]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	899b      	ldrh	r3, [r3, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	f004 fb16 	bl	800b32c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	f007 fdb0 	bl	800e870 <HAL_TIM_PWM_Start>
	dev->freq = 1;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006d16:	611a      	str	r2, [r3, #16]
	stepper_set_speed(dev, 0);
 8006d18:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8006d2c <stepper_initialise+0x68>
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f88d 	bl	8006e3c <stepper_set_speed>
}
 8006d22:	bf00      	nop
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	00000000 	.word	0x00000000

08006d30 <set_pwm>:
	dev->degree = 1;
	servo_set_degree(dev, 0);
}

void set_pwm(TIM_HandleTypeDef *tim_pwm, uint32_t tim_channel, float freq,
		float duty_cycle) {
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8006d3e:	edc7 0a00 	vstr	s1, [r7]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	if (freq > MAX_FREQUENCY){
 8006d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d46:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006e2c <set_pwm+0xfc>
 8006d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d52:	dd02      	ble.n	8006d5a <set_pwm+0x2a>
		freq = MAX_FREQUENCY;
 8006d54:	4b36      	ldr	r3, [pc, #216]	; (8006e30 <set_pwm+0x100>)
 8006d56:	607b      	str	r3, [r7, #4]
 8006d58:	e00a      	b.n	8006d70 <set_pwm+0x40>
	}
	else if ((freq * -1) > MAX_FREQUENCY){
 8006d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d5e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006e34 <set_pwm+0x104>
 8006d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6a:	d501      	bpl.n	8006d70 <set_pwm+0x40>
		freq = MAX_FREQUENCY;
 8006d6c:	4b30      	ldr	r3, [pc, #192]	; (8006e30 <set_pwm+0x100>)
 8006d6e:	607b      	str	r3, [r7, #4]
	}
	uint16_t ARR_value = 50000 / freq; //500000 come from 275MHz/550
 8006d70:	eddf 6a31 	vldr	s13, [pc, #196]	; 8006e38 <set_pwm+0x108>
 8006d74:	ed97 7a01 	vldr	s14, [r7, #4]
 8006d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d80:	ee17 3a90 	vmov	r3, s15
 8006d84:	82bb      	strh	r3, [r7, #20]
	uint16_t CCRx_value = (ARR_value * duty_cycle);
 8006d86:	8abb      	ldrh	r3, [r7, #20]
 8006d88:	ee07 3a90 	vmov	s15, r3
 8006d8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d90:	edd7 7a00 	vldr	s15, [r7]
 8006d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d9c:	ee17 3a90 	vmov	r3, s15
 8006da0:	82fb      	strh	r3, [r7, #22]
	if (duty_cycle == 1.0) {
 8006da2:	edd7 7a00 	vldr	s15, [r7]
 8006da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006daa:	eef4 7a47 	vcmp.f32	s15, s14
 8006dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db2:	d101      	bne.n	8006db8 <set_pwm+0x88>
		CCRx_value = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	82fb      	strh	r3, [r7, #22]
	}
	__HAL_TIM_SET_AUTORELOAD(tim_pwm, ARR_value);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	8aba      	ldrh	r2, [r7, #20]
 8006dbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8006dc0:	8aba      	ldrh	r2, [r7, #20]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d104      	bne.n	8006dd6 <set_pwm+0xa6>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	8afa      	ldrh	r2, [r7, #22]
 8006dd2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006dd4:	e023      	b.n	8006e1e <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d104      	bne.n	8006de6 <set_pwm+0xb6>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	8afb      	ldrh	r3, [r7, #22]
 8006de2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006de4:	e01b      	b.n	8006e1e <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d104      	bne.n	8006df6 <set_pwm+0xc6>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	8afb      	ldrh	r3, [r7, #22]
 8006df2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8006df4:	e013      	b.n	8006e1e <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b0c      	cmp	r3, #12
 8006dfa:	d104      	bne.n	8006e06 <set_pwm+0xd6>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	8afb      	ldrh	r3, [r7, #22]
 8006e02:	6413      	str	r3, [r2, #64]	; 0x40
}
 8006e04:	e00b      	b.n	8006e1e <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b10      	cmp	r3, #16
 8006e0a:	d104      	bne.n	8006e16 <set_pwm+0xe6>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	8afb      	ldrh	r3, [r7, #22]
 8006e12:	6593      	str	r3, [r2, #88]	; 0x58
}
 8006e14:	e003      	b.n	8006e1e <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	8afb      	ldrh	r3, [r7, #22]
 8006e1c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	46c35000 	.word	0x46c35000
 8006e30:	46c35000 	.word	0x46c35000
 8006e34:	c6c35000 	.word	0xc6c35000
 8006e38:	47435000 	.word	0x47435000

08006e3c <stepper_set_speed>:
		set_pwm(dev->timHandle, dev->tim_channel, 50, cyc);
		dev->degree = degree;
	}
}

void stepper_set_speed(Stepper_Motor *dev, float freq) {
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	ed87 0a00 	vstr	s0, [r7]
	 stepper_set_speed does set your stepper to your given value.

	 :param freq can be -9999.9999 to 9999.9999. signed value use to set stepper direction.
	 :return: None
	 */
	if (freq != dev->freq) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8006e4e:	ed97 7a00 	vldr	s14, [r7]
 8006e52:	eeb4 7a67 	vcmp.f32	s14, s15
 8006e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5a:	d070      	beq.n	8006f3e <stepper_set_speed+0x102>
		if (freq > MIN_FREQUENCY) {
 8006e5c:	edd7 7a00 	vldr	s15, [r7]
 8006e60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6c:	dd25      	ble.n	8006eba <stepper_set_speed+0x7e>
			if (dev->dir_mode == 0){
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	7d5b      	ldrb	r3, [r3, #21]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d108      	bne.n	8006e88 <stepper_set_speed+0x4c>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6898      	ldr	r0, [r3, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	899b      	ldrh	r3, [r3, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4619      	mov	r1, r3
 8006e82:	f004 fa53 	bl	800b32c <HAL_GPIO_WritePin>
 8006e86:	e00b      	b.n	8006ea0 <stepper_set_speed+0x64>
			}
			else if (dev->dir_mode == 1){
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	7d5b      	ldrb	r3, [r3, #21]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d107      	bne.n	8006ea0 <stepper_set_speed+0x64>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6898      	ldr	r0, [r3, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	899b      	ldrh	r3, [r3, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	f004 fa46 	bl	800b32c <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, freq, 0.50);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8006eac:	ed97 0a00 	vldr	s0, [r7]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f7ff ff3c 	bl	8006d30 <set_pwm>
 8006eb8:	e03e      	b.n	8006f38 <stepper_set_speed+0xfc>
		} else if (freq < (-1 * MIN_FREQUENCY)) {
 8006eba:	edd7 7a00 	vldr	s15, [r7]
 8006ebe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eca:	d529      	bpl.n	8006f20 <stepper_set_speed+0xe4>
			if (dev->dir_mode == 0){
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7d5b      	ldrb	r3, [r3, #21]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d108      	bne.n	8006ee6 <stepper_set_speed+0xaa>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6898      	ldr	r0, [r3, #8]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	899b      	ldrh	r3, [r3, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	4619      	mov	r1, r3
 8006ee0:	f004 fa24 	bl	800b32c <HAL_GPIO_WritePin>
 8006ee4:	e00b      	b.n	8006efe <stepper_set_speed+0xc2>
			}
			else if (dev->dir_mode == 1){
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	7d5b      	ldrb	r3, [r3, #21]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d107      	bne.n	8006efe <stepper_set_speed+0xc2>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6898      	ldr	r0, [r3, #8]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	899b      	ldrh	r3, [r3, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4619      	mov	r1, r3
 8006efa:	f004 fa17 	bl	800b32c <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, (-1*freq), 0.50);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	edd7 7a00 	vldr	s15, [r7]
 8006f0a:	eef1 7a67 	vneg.f32	s15, s15
 8006f0e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8006f12:	eeb0 0a67 	vmov.f32	s0, s15
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f7ff ff09 	bl	8006d30 <set_pwm>
 8006f1e:	e00b      	b.n	8006f38 <stepper_set_speed+0xfc>
		} else {
			set_pwm(dev->timHandle, dev->tim_channel, 100, 1.0);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006f2c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8006f48 <stepper_set_speed+0x10c>
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7ff fefc 	bl	8006d30 <set_pwm>
		}
		dev->freq = freq;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	611a      	str	r2, [r3, #16]
	}
}
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	42c80000 	.word	0x42c80000

08006f4c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8006f50:	4b27      	ldr	r3, [pc, #156]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f52:	4a28      	ldr	r2, [pc, #160]	; (8006ff4 <MX_SPI3_Init+0xa8>)
 8006f54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006f56:	4b26      	ldr	r3, [pc, #152]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006f5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006f5e:	4b24      	ldr	r3, [pc, #144]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8006f64:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f66:	2203      	movs	r2, #3
 8006f68:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f6a:	4b21      	ldr	r3, [pc, #132]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f70:	4b1f      	ldr	r3, [pc, #124]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006f76:	4b1e      	ldr	r3, [pc, #120]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006f7c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f7e:	4b1c      	ldr	r3, [pc, #112]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f84:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f8a:	4b19      	ldr	r3, [pc, #100]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f90:	4b17      	ldr	r3, [pc, #92]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8006f96:	4b16      	ldr	r3, [pc, #88]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f9c:	4b14      	ldr	r3, [pc, #80]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006fa2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006fa4:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006faa:	4b11      	ldr	r3, [pc, #68]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006fb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006fb6:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006fbc:	4b0c      	ldr	r3, [pc, #48]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006fc2:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006fc8:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006fce:	4b08      	ldr	r3, [pc, #32]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006fd4:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006fda:	4805      	ldr	r0, [pc, #20]	; (8006ff0 <MX_SPI3_Init+0xa4>)
 8006fdc:	f007 f9f0 	bl	800e3c0 <HAL_SPI_Init>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8006fe6:	f7ff fe67 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006fea:	bf00      	nop
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	24000804 	.word	0x24000804
 8006ff4:	40003c00 	.word	0x40003c00

08006ff8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b0b6      	sub	sp, #216	; 0xd8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007000:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	605a      	str	r2, [r3, #4]
 800700a:	609a      	str	r2, [r3, #8]
 800700c:	60da      	str	r2, [r3, #12]
 800700e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007010:	f107 0310 	add.w	r3, r7, #16
 8007014:	22b4      	movs	r2, #180	; 0xb4
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f00a fc4f 	bl	80118bc <memset>
  if(spiHandle->Instance==SPI3)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a25      	ldr	r2, [pc, #148]	; (80070b8 <HAL_SPI_MspInit+0xc0>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d142      	bne.n	80070ae <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8007028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800702c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800702e:	2300      	movs	r3, #0
 8007030:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007032:	f107 0310 	add.w	r3, r7, #16
 8007036:	4618      	mov	r0, r3
 8007038:	f005 f930 	bl	800c29c <HAL_RCCEx_PeriphCLKConfig>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8007042:	f7ff fe39 	bl	8006cb8 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007046:	4b1d      	ldr	r3, [pc, #116]	; (80070bc <HAL_SPI_MspInit+0xc4>)
 8007048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800704c:	4a1b      	ldr	r2, [pc, #108]	; (80070bc <HAL_SPI_MspInit+0xc4>)
 800704e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007052:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007056:	4b19      	ldr	r3, [pc, #100]	; (80070bc <HAL_SPI_MspInit+0xc4>)
 8007058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800705c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007064:	4b15      	ldr	r3, [pc, #84]	; (80070bc <HAL_SPI_MspInit+0xc4>)
 8007066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800706a:	4a14      	ldr	r2, [pc, #80]	; (80070bc <HAL_SPI_MspInit+0xc4>)
 800706c:	f043 0304 	orr.w	r3, r3, #4
 8007070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007074:	4b11      	ldr	r3, [pc, #68]	; (80070bc <HAL_SPI_MspInit+0xc4>)
 8007076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	60bb      	str	r3, [r7, #8]
 8007080:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007082:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007086:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800708a:	2302      	movs	r3, #2
 800708c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007090:	2300      	movs	r3, #0
 8007092:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007096:	2300      	movs	r3, #0
 8007098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800709c:	2306      	movs	r3, #6
 800709e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4805      	ldr	r0, [pc, #20]	; (80070c0 <HAL_SPI_MspInit+0xc8>)
 80070aa:	f003 ff97 	bl	800afdc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80070ae:	bf00      	nop
 80070b0:	37d8      	adds	r7, #216	; 0xd8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40003c00 	.word	0x40003c00
 80070bc:	58024400 	.word	0x58024400
 80070c0:	58020800 	.word	0x58020800

080070c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <HAL_MspInit+0x30>)
 80070cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070d0:	4a08      	ldr	r2, [pc, #32]	; (80070f4 <HAL_MspInit+0x30>)
 80070d2:	f043 0302 	orr.w	r3, r3, #2
 80070d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <HAL_MspInit+0x30>)
 80070dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	607b      	str	r3, [r7, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	58024400 	.word	0x58024400

080070f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80070fc:	f005 f8b2 	bl	800c264 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007100:	e7fe      	b.n	8007100 <NMI_Handler+0x8>

08007102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007102:	b480      	push	{r7}
 8007104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007106:	e7fe      	b.n	8007106 <HardFault_Handler+0x4>

08007108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800710c:	e7fe      	b.n	800710c <MemManage_Handler+0x4>

0800710e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800710e:	b480      	push	{r7}
 8007110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007112:	e7fe      	b.n	8007112 <BusFault_Handler+0x4>

08007114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007118:	e7fe      	b.n	8007118 <UsageFault_Handler+0x4>

0800711a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800711a:	b480      	push	{r7}
 800711c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800712c:	bf00      	nop
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007136:	b480      	push	{r7}
 8007138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800713a:	bf00      	nop
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007148:	f001 fc5e 	bl	8008a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800714c:	bf00      	nop
 800714e:	bd80      	pop	{r7, pc}

08007150 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007154:	4802      	ldr	r0, [pc, #8]	; (8007160 <USART3_IRQHandler+0x10>)
 8007156:	f008 fde9 	bl	800fd2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800715a:	bf00      	nop
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	24000c1c 	.word	0x24000c1c

08007164 <HAL_UART_TxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	__HAL_UART_FLUSH_DRREGISTER(huart);
	ARMsProtocol_FUNC_Rx_Callback(huart);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	//__HAL_UART_FLUSH_DRREGISTER(huart);
	ARMsProtocol_Data.Tx_flag = 0;
 800716c:	4b04      	ldr	r3, [pc, #16]	; (8007180 <HAL_UART_TxCpltCallback+0x1c>)
 800716e:	2200      	movs	r2, #0
 8007170:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	24000280 	.word	0x24000280

08007184 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
	return 1;
 8007188:	2301      	movs	r3, #1
}
 800718a:	4618      	mov	r0, r3
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <_kill>:

int _kill(int pid, int sig)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800719e:	f00a fb55 	bl	801184c <__errno>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2216      	movs	r2, #22
 80071a6:	601a      	str	r2, [r3, #0]
	return -1;
 80071a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <_exit>:

void _exit (int status)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80071bc:	f04f 31ff 	mov.w	r1, #4294967295
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff ffe7 	bl	8007194 <_kill>
	while (1) {}		/* Make sure we hang here */
 80071c6:	e7fe      	b.n	80071c6 <_exit+0x12>

080071c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	e00a      	b.n	80071f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80071da:	f3af 8000 	nop.w
 80071de:	4601      	mov	r1, r0
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	60ba      	str	r2, [r7, #8]
 80071e6:	b2ca      	uxtb	r2, r1
 80071e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	3301      	adds	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	dbf0      	blt.n	80071da <_read+0x12>
	}

return len;
 80071f8:	687b      	ldr	r3, [r7, #4]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b086      	sub	sp, #24
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e009      	b.n	8007228 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	60ba      	str	r2, [r7, #8]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff fd39 	bl	8006c94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	3301      	adds	r3, #1
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	429a      	cmp	r2, r3
 800722e:	dbf1      	blt.n	8007214 <_write+0x12>
	}
	return len;
 8007230:	687b      	ldr	r3, [r7, #4]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <_close>:

int _close(int file)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
	return -1;
 8007242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007262:	605a      	str	r2, [r3, #4]
	return 0;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <_isatty>:

int _isatty(int file)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
	return 1;
 800727a:	2301      	movs	r3, #1
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
	return 0;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80072ac:	4a14      	ldr	r2, [pc, #80]	; (8007300 <_sbrk+0x5c>)
 80072ae:	4b15      	ldr	r3, [pc, #84]	; (8007304 <_sbrk+0x60>)
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80072b8:	4b13      	ldr	r3, [pc, #76]	; (8007308 <_sbrk+0x64>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80072c0:	4b11      	ldr	r3, [pc, #68]	; (8007308 <_sbrk+0x64>)
 80072c2:	4a12      	ldr	r2, [pc, #72]	; (800730c <_sbrk+0x68>)
 80072c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <_sbrk+0x64>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d207      	bcs.n	80072e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80072d4:	f00a faba 	bl	801184c <__errno>
 80072d8:	4603      	mov	r3, r0
 80072da:	220c      	movs	r2, #12
 80072dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80072de:	f04f 33ff 	mov.w	r3, #4294967295
 80072e2:	e009      	b.n	80072f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80072e4:	4b08      	ldr	r3, [pc, #32]	; (8007308 <_sbrk+0x64>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <_sbrk+0x64>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4413      	add	r3, r2
 80072f2:	4a05      	ldr	r2, [pc, #20]	; (8007308 <_sbrk+0x64>)
 80072f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80072f6:	68fb      	ldr	r3, [r7, #12]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	24050000 	.word	0x24050000
 8007304:	00000400 	.word	0x00000400
 8007308:	24000268 	.word	0x24000268
 800730c:	24000e70 	.word	0x24000e70

08007310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007314:	4b32      	ldr	r3, [pc, #200]	; (80073e0 <SystemInit+0xd0>)
 8007316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800731a:	4a31      	ldr	r2, [pc, #196]	; (80073e0 <SystemInit+0xd0>)
 800731c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007324:	4b2f      	ldr	r3, [pc, #188]	; (80073e4 <SystemInit+0xd4>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 030f 	and.w	r3, r3, #15
 800732c:	2b06      	cmp	r3, #6
 800732e:	d807      	bhi.n	8007340 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007330:	4b2c      	ldr	r3, [pc, #176]	; (80073e4 <SystemInit+0xd4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f023 030f 	bic.w	r3, r3, #15
 8007338:	4a2a      	ldr	r2, [pc, #168]	; (80073e4 <SystemInit+0xd4>)
 800733a:	f043 0307 	orr.w	r3, r3, #7
 800733e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007340:	4b29      	ldr	r3, [pc, #164]	; (80073e8 <SystemInit+0xd8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a28      	ldr	r2, [pc, #160]	; (80073e8 <SystemInit+0xd8>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800734c:	4b26      	ldr	r3, [pc, #152]	; (80073e8 <SystemInit+0xd8>)
 800734e:	2200      	movs	r2, #0
 8007350:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007352:	4b25      	ldr	r3, [pc, #148]	; (80073e8 <SystemInit+0xd8>)
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	4924      	ldr	r1, [pc, #144]	; (80073e8 <SystemInit+0xd8>)
 8007358:	4b24      	ldr	r3, [pc, #144]	; (80073ec <SystemInit+0xdc>)
 800735a:	4013      	ands	r3, r2
 800735c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800735e:	4b21      	ldr	r3, [pc, #132]	; (80073e4 <SystemInit+0xd4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800736a:	4b1e      	ldr	r3, [pc, #120]	; (80073e4 <SystemInit+0xd4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f023 030f 	bic.w	r3, r3, #15
 8007372:	4a1c      	ldr	r2, [pc, #112]	; (80073e4 <SystemInit+0xd4>)
 8007374:	f043 0307 	orr.w	r3, r3, #7
 8007378:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800737a:	4b1b      	ldr	r3, [pc, #108]	; (80073e8 <SystemInit+0xd8>)
 800737c:	2200      	movs	r2, #0
 800737e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007380:	4b19      	ldr	r3, [pc, #100]	; (80073e8 <SystemInit+0xd8>)
 8007382:	2200      	movs	r2, #0
 8007384:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007386:	4b18      	ldr	r3, [pc, #96]	; (80073e8 <SystemInit+0xd8>)
 8007388:	2200      	movs	r2, #0
 800738a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800738c:	4b16      	ldr	r3, [pc, #88]	; (80073e8 <SystemInit+0xd8>)
 800738e:	4a18      	ldr	r2, [pc, #96]	; (80073f0 <SystemInit+0xe0>)
 8007390:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007392:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <SystemInit+0xd8>)
 8007394:	4a17      	ldr	r2, [pc, #92]	; (80073f4 <SystemInit+0xe4>)
 8007396:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007398:	4b13      	ldr	r3, [pc, #76]	; (80073e8 <SystemInit+0xd8>)
 800739a:	4a17      	ldr	r2, [pc, #92]	; (80073f8 <SystemInit+0xe8>)
 800739c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800739e:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <SystemInit+0xd8>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80073a4:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <SystemInit+0xd8>)
 80073a6:	4a14      	ldr	r2, [pc, #80]	; (80073f8 <SystemInit+0xe8>)
 80073a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80073aa:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <SystemInit+0xd8>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80073b0:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <SystemInit+0xd8>)
 80073b2:	4a11      	ldr	r2, [pc, #68]	; (80073f8 <SystemInit+0xe8>)
 80073b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80073b6:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <SystemInit+0xd8>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80073bc:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <SystemInit+0xd8>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <SystemInit+0xd8>)
 80073c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80073c8:	4b07      	ldr	r3, [pc, #28]	; (80073e8 <SystemInit+0xd8>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80073ce:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <SystemInit+0xec>)
 80073d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80073d4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80073d6:	bf00      	nop
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	e000ed00 	.word	0xe000ed00
 80073e4:	52002000 	.word	0x52002000
 80073e8:	58024400 	.word	0x58024400
 80073ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80073f0:	02020200 	.word	0x02020200
 80073f4:	01ff0000 	.word	0x01ff0000
 80073f8:	01010280 	.word	0x01010280
 80073fc:	52004000 	.word	0x52004000

08007400 <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b09c      	sub	sp, #112	; 0x70
 8007404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007406:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	605a      	str	r2, [r3, #4]
 8007410:	609a      	str	r2, [r3, #8]
 8007412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007414:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	605a      	str	r2, [r3, #4]
 800741e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007420:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	609a      	str	r2, [r3, #8]
 800742c:	60da      	str	r2, [r3, #12]
 800742e:	611a      	str	r2, [r3, #16]
 8007430:	615a      	str	r2, [r3, #20]
 8007432:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007434:	1d3b      	adds	r3, r7, #4
 8007436:	2234      	movs	r2, #52	; 0x34
 8007438:	2100      	movs	r1, #0
 800743a:	4618      	mov	r0, r3
 800743c:	f00a fa3e 	bl	80118bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007440:	4b44      	ldr	r3, [pc, #272]	; (8007554 <MX_TIM1_Init+0x154>)
 8007442:	4a45      	ldr	r2, [pc, #276]	; (8007558 <MX_TIM1_Init+0x158>)
 8007444:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5500-1;
 8007446:	4b43      	ldr	r3, [pc, #268]	; (8007554 <MX_TIM1_Init+0x154>)
 8007448:	f241 527b 	movw	r2, #5499	; 0x157b
 800744c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800744e:	4b41      	ldr	r3, [pc, #260]	; (8007554 <MX_TIM1_Init+0x154>)
 8007450:	2200      	movs	r2, #0
 8007452:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8007454:	4b3f      	ldr	r3, [pc, #252]	; (8007554 <MX_TIM1_Init+0x154>)
 8007456:	f242 7210 	movw	r2, #10000	; 0x2710
 800745a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800745c:	4b3d      	ldr	r3, [pc, #244]	; (8007554 <MX_TIM1_Init+0x154>)
 800745e:	2200      	movs	r2, #0
 8007460:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007462:	4b3c      	ldr	r3, [pc, #240]	; (8007554 <MX_TIM1_Init+0x154>)
 8007464:	2200      	movs	r2, #0
 8007466:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007468:	4b3a      	ldr	r3, [pc, #232]	; (8007554 <MX_TIM1_Init+0x154>)
 800746a:	2280      	movs	r2, #128	; 0x80
 800746c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800746e:	4839      	ldr	r0, [pc, #228]	; (8007554 <MX_TIM1_Init+0x154>)
 8007470:	f007 f8c7 	bl	800e602 <HAL_TIM_Base_Init>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800747a:	f7ff fc1d 	bl	8006cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800747e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007482:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007484:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007488:	4619      	mov	r1, r3
 800748a:	4832      	ldr	r0, [pc, #200]	; (8007554 <MX_TIM1_Init+0x154>)
 800748c:	f007 fc20 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8007496:	f7ff fc0f 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800749a:	482e      	ldr	r0, [pc, #184]	; (8007554 <MX_TIM1_Init+0x154>)
 800749c:	f007 f986 	bl	800e7ac <HAL_TIM_PWM_Init>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80074a6:	f7ff fc07 	bl	8006cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074aa:	2300      	movs	r3, #0
 80074ac:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80074ae:	2300      	movs	r3, #0
 80074b0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074b2:	2300      	movs	r3, #0
 80074b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80074b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80074ba:	4619      	mov	r1, r3
 80074bc:	4825      	ldr	r0, [pc, #148]	; (8007554 <MX_TIM1_Init+0x154>)
 80074be:	f008 f93f 	bl	800f740 <HAL_TIMEx_MasterConfigSynchronization>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80074c8:	f7ff fbf6 	bl	8006cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80074cc:	2360      	movs	r3, #96	; 0x60
 80074ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074d4:	2300      	movs	r3, #0
 80074d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80074d8:	2300      	movs	r3, #0
 80074da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074dc:	2300      	movs	r3, #0
 80074de:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80074e0:	2300      	movs	r3, #0
 80074e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80074e4:	2300      	movs	r3, #0
 80074e6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80074ec:	2200      	movs	r2, #0
 80074ee:	4619      	mov	r1, r3
 80074f0:	4818      	ldr	r0, [pc, #96]	; (8007554 <MX_TIM1_Init+0x154>)
 80074f2:	f007 fad9 	bl	800eaa8 <HAL_TIM_PWM_ConfigChannel>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80074fc:	f7ff fbdc 	bl	8006cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007500:	2300      	movs	r3, #0
 8007502:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007504:	2300      	movs	r3, #0
 8007506:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007518:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800751e:	2300      	movs	r3, #0
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800752c:	2300      	movs	r3, #0
 800752e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007530:	1d3b      	adds	r3, r7, #4
 8007532:	4619      	mov	r1, r3
 8007534:	4807      	ldr	r0, [pc, #28]	; (8007554 <MX_TIM1_Init+0x154>)
 8007536:	f008 f99f 	bl	800f878 <HAL_TIMEx_ConfigBreakDeadTime>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8007540:	f7ff fbba 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007544:	4803      	ldr	r0, [pc, #12]	; (8007554 <MX_TIM1_Init+0x154>)
 8007546:	f000 fdc3 	bl	80080d0 <HAL_TIM_MspPostInit>

}
 800754a:	bf00      	nop
 800754c:	3770      	adds	r7, #112	; 0x70
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	24000a54 	.word	0x24000a54
 8007558:	40010000 	.word	0x40010000

0800755c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08e      	sub	sp, #56	; 0x38
 8007560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	605a      	str	r2, [r3, #4]
 800756c:	609a      	str	r2, [r3, #8]
 800756e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007570:	f107 031c 	add.w	r3, r7, #28
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	605a      	str	r2, [r3, #4]
 800757a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800757c:	463b      	mov	r3, r7
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	605a      	str	r2, [r3, #4]
 8007584:	609a      	str	r2, [r3, #8]
 8007586:	60da      	str	r2, [r3, #12]
 8007588:	611a      	str	r2, [r3, #16]
 800758a:	615a      	str	r2, [r3, #20]
 800758c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800758e:	4b2e      	ldr	r3, [pc, #184]	; (8007648 <MX_TIM2_Init+0xec>)
 8007590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007594:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5500- 1;
 8007596:	4b2c      	ldr	r3, [pc, #176]	; (8007648 <MX_TIM2_Init+0xec>)
 8007598:	f241 527b 	movw	r2, #5499	; 0x157b
 800759c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800759e:	4b2a      	ldr	r3, [pc, #168]	; (8007648 <MX_TIM2_Init+0xec>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80075a4:	4b28      	ldr	r3, [pc, #160]	; (8007648 <MX_TIM2_Init+0xec>)
 80075a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80075aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80075ac:	4b26      	ldr	r3, [pc, #152]	; (8007648 <MX_TIM2_Init+0xec>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80075b2:	4b25      	ldr	r3, [pc, #148]	; (8007648 <MX_TIM2_Init+0xec>)
 80075b4:	2280      	movs	r2, #128	; 0x80
 80075b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80075b8:	4823      	ldr	r0, [pc, #140]	; (8007648 <MX_TIM2_Init+0xec>)
 80075ba:	f007 f822 	bl	800e602 <HAL_TIM_Base_Init>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80075c4:	f7ff fb78 	bl	8006cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80075c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80075ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80075d2:	4619      	mov	r1, r3
 80075d4:	481c      	ldr	r0, [pc, #112]	; (8007648 <MX_TIM2_Init+0xec>)
 80075d6:	f007 fb7b 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80075e0:	f7ff fb6a 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80075e4:	4818      	ldr	r0, [pc, #96]	; (8007648 <MX_TIM2_Init+0xec>)
 80075e6:	f007 f8e1 	bl	800e7ac <HAL_TIM_PWM_Init>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80075f0:	f7ff fb62 	bl	8006cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80075f4:	2300      	movs	r3, #0
 80075f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80075fc:	f107 031c 	add.w	r3, r7, #28
 8007600:	4619      	mov	r1, r3
 8007602:	4811      	ldr	r0, [pc, #68]	; (8007648 <MX_TIM2_Init+0xec>)
 8007604:	f008 f89c 	bl	800f740 <HAL_TIMEx_MasterConfigSynchronization>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800760e:	f7ff fb53 	bl	8006cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007612:	2360      	movs	r3, #96	; 0x60
 8007614:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800761e:	2300      	movs	r3, #0
 8007620:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007622:	463b      	mov	r3, r7
 8007624:	2200      	movs	r2, #0
 8007626:	4619      	mov	r1, r3
 8007628:	4807      	ldr	r0, [pc, #28]	; (8007648 <MX_TIM2_Init+0xec>)
 800762a:	f007 fa3d 	bl	800eaa8 <HAL_TIM_PWM_ConfigChannel>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8007634:	f7ff fb40 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007638:	4803      	ldr	r0, [pc, #12]	; (8007648 <MX_TIM2_Init+0xec>)
 800763a:	f000 fd49 	bl	80080d0 <HAL_TIM_MspPostInit>

}
 800763e:	bf00      	nop
 8007640:	3738      	adds	r7, #56	; 0x38
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	24000aa0 	.word	0x24000aa0

0800764c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08e      	sub	sp, #56	; 0x38
 8007650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	605a      	str	r2, [r3, #4]
 800765c:	609a      	str	r2, [r3, #8]
 800765e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007660:	f107 031c 	add.w	r3, r7, #28
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	605a      	str	r2, [r3, #4]
 800766a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800766c:	463b      	mov	r3, r7
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	605a      	str	r2, [r3, #4]
 8007674:	609a      	str	r2, [r3, #8]
 8007676:	60da      	str	r2, [r3, #12]
 8007678:	611a      	str	r2, [r3, #16]
 800767a:	615a      	str	r2, [r3, #20]
 800767c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800767e:	4b2d      	ldr	r3, [pc, #180]	; (8007734 <MX_TIM3_Init+0xe8>)
 8007680:	4a2d      	ldr	r2, [pc, #180]	; (8007738 <MX_TIM3_Init+0xec>)
 8007682:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5500 - 1;
 8007684:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <MX_TIM3_Init+0xe8>)
 8007686:	f241 527b 	movw	r2, #5499	; 0x157b
 800768a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800768c:	4b29      	ldr	r3, [pc, #164]	; (8007734 <MX_TIM3_Init+0xe8>)
 800768e:	2200      	movs	r2, #0
 8007690:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8007692:	4b28      	ldr	r3, [pc, #160]	; (8007734 <MX_TIM3_Init+0xe8>)
 8007694:	f242 7210 	movw	r2, #10000	; 0x2710
 8007698:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800769a:	4b26      	ldr	r3, [pc, #152]	; (8007734 <MX_TIM3_Init+0xe8>)
 800769c:	2200      	movs	r2, #0
 800769e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80076a0:	4b24      	ldr	r3, [pc, #144]	; (8007734 <MX_TIM3_Init+0xe8>)
 80076a2:	2280      	movs	r2, #128	; 0x80
 80076a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80076a6:	4823      	ldr	r0, [pc, #140]	; (8007734 <MX_TIM3_Init+0xe8>)
 80076a8:	f006 ffab 	bl	800e602 <HAL_TIM_Base_Init>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80076b2:	f7ff fb01 	bl	8006cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80076b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80076bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076c0:	4619      	mov	r1, r3
 80076c2:	481c      	ldr	r0, [pc, #112]	; (8007734 <MX_TIM3_Init+0xe8>)
 80076c4:	f007 fb04 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80076ce:	f7ff faf3 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80076d2:	4818      	ldr	r0, [pc, #96]	; (8007734 <MX_TIM3_Init+0xe8>)
 80076d4:	f007 f86a 	bl	800e7ac <HAL_TIM_PWM_Init>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80076de:	f7ff faeb 	bl	8006cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80076ea:	f107 031c 	add.w	r3, r7, #28
 80076ee:	4619      	mov	r1, r3
 80076f0:	4810      	ldr	r0, [pc, #64]	; (8007734 <MX_TIM3_Init+0xe8>)
 80076f2:	f008 f825 	bl	800f740 <HAL_TIMEx_MasterConfigSynchronization>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80076fc:	f7ff fadc 	bl	8006cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007700:	2360      	movs	r3, #96	; 0x60
 8007702:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007708:	2300      	movs	r3, #0
 800770a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800770c:	2300      	movs	r3, #0
 800770e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007710:	463b      	mov	r3, r7
 8007712:	2200      	movs	r2, #0
 8007714:	4619      	mov	r1, r3
 8007716:	4807      	ldr	r0, [pc, #28]	; (8007734 <MX_TIM3_Init+0xe8>)
 8007718:	f007 f9c6 	bl	800eaa8 <HAL_TIM_PWM_ConfigChannel>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8007722:	f7ff fac9 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007726:	4803      	ldr	r0, [pc, #12]	; (8007734 <MX_TIM3_Init+0xe8>)
 8007728:	f000 fcd2 	bl	80080d0 <HAL_TIM_MspPostInit>

}
 800772c:	bf00      	nop
 800772e:	3738      	adds	r7, #56	; 0x38
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	240009bc 	.word	0x240009bc
 8007738:	40000400 	.word	0x40000400

0800773c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08e      	sub	sp, #56	; 0x38
 8007740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	605a      	str	r2, [r3, #4]
 800774c:	609a      	str	r2, [r3, #8]
 800774e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007750:	f107 031c 	add.w	r3, r7, #28
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	605a      	str	r2, [r3, #4]
 800775a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800775c:	463b      	mov	r3, r7
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	605a      	str	r2, [r3, #4]
 8007764:	609a      	str	r2, [r3, #8]
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	611a      	str	r2, [r3, #16]
 800776a:	615a      	str	r2, [r3, #20]
 800776c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800776e:	4b2d      	ldr	r3, [pc, #180]	; (8007824 <MX_TIM4_Init+0xe8>)
 8007770:	4a2d      	ldr	r2, [pc, #180]	; (8007828 <MX_TIM4_Init+0xec>)
 8007772:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5500-1;
 8007774:	4b2b      	ldr	r3, [pc, #172]	; (8007824 <MX_TIM4_Init+0xe8>)
 8007776:	f241 527b 	movw	r2, #5499	; 0x157b
 800777a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800777c:	4b29      	ldr	r3, [pc, #164]	; (8007824 <MX_TIM4_Init+0xe8>)
 800777e:	2200      	movs	r2, #0
 8007780:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8007782:	4b28      	ldr	r3, [pc, #160]	; (8007824 <MX_TIM4_Init+0xe8>)
 8007784:	f242 7210 	movw	r2, #10000	; 0x2710
 8007788:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800778a:	4b26      	ldr	r3, [pc, #152]	; (8007824 <MX_TIM4_Init+0xe8>)
 800778c:	2200      	movs	r2, #0
 800778e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007790:	4b24      	ldr	r3, [pc, #144]	; (8007824 <MX_TIM4_Init+0xe8>)
 8007792:	2280      	movs	r2, #128	; 0x80
 8007794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007796:	4823      	ldr	r0, [pc, #140]	; (8007824 <MX_TIM4_Init+0xe8>)
 8007798:	f006 ff33 	bl	800e602 <HAL_TIM_Base_Init>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80077a2:	f7ff fa89 	bl	8006cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80077ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077b0:	4619      	mov	r1, r3
 80077b2:	481c      	ldr	r0, [pc, #112]	; (8007824 <MX_TIM4_Init+0xe8>)
 80077b4:	f007 fa8c 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80077be:	f7ff fa7b 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80077c2:	4818      	ldr	r0, [pc, #96]	; (8007824 <MX_TIM4_Init+0xe8>)
 80077c4:	f006 fff2 	bl	800e7ac <HAL_TIM_PWM_Init>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80077ce:	f7ff fa73 	bl	8006cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077d2:	2300      	movs	r3, #0
 80077d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80077da:	f107 031c 	add.w	r3, r7, #28
 80077de:	4619      	mov	r1, r3
 80077e0:	4810      	ldr	r0, [pc, #64]	; (8007824 <MX_TIM4_Init+0xe8>)
 80077e2:	f007 ffad 	bl	800f740 <HAL_TIMEx_MasterConfigSynchronization>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80077ec:	f7ff fa64 	bl	8006cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80077f0:	2360      	movs	r3, #96	; 0x60
 80077f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80077fc:	2300      	movs	r3, #0
 80077fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007800:	463b      	mov	r3, r7
 8007802:	2200      	movs	r2, #0
 8007804:	4619      	mov	r1, r3
 8007806:	4807      	ldr	r0, [pc, #28]	; (8007824 <MX_TIM4_Init+0xe8>)
 8007808:	f007 f94e 	bl	800eaa8 <HAL_TIM_PWM_ConfigChannel>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8007812:	f7ff fa51 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007816:	4803      	ldr	r0, [pc, #12]	; (8007824 <MX_TIM4_Init+0xe8>)
 8007818:	f000 fc5a 	bl	80080d0 <HAL_TIM_MspPostInit>

}
 800781c:	bf00      	nop
 800781e:	3738      	adds	r7, #56	; 0x38
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	240008d8 	.word	0x240008d8
 8007828:	40000800 	.word	0x40000800

0800782c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08c      	sub	sp, #48	; 0x30
 8007830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007832:	f107 0320 	add.w	r3, r7, #32
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	605a      	str	r2, [r3, #4]
 800783c:	609a      	str	r2, [r3, #8]
 800783e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007840:	1d3b      	adds	r3, r7, #4
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	605a      	str	r2, [r3, #4]
 8007848:	609a      	str	r2, [r3, #8]
 800784a:	60da      	str	r2, [r3, #12]
 800784c:	611a      	str	r2, [r3, #16]
 800784e:	615a      	str	r2, [r3, #20]
 8007850:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8007852:	4b26      	ldr	r3, [pc, #152]	; (80078ec <MX_TIM12_Init+0xc0>)
 8007854:	4a26      	ldr	r2, [pc, #152]	; (80078f0 <MX_TIM12_Init+0xc4>)
 8007856:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 550 - 1;
 8007858:	4b24      	ldr	r3, [pc, #144]	; (80078ec <MX_TIM12_Init+0xc0>)
 800785a:	f240 2225 	movw	r2, #549	; 0x225
 800785e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007860:	4b22      	ldr	r3, [pc, #136]	; (80078ec <MX_TIM12_Init+0xc0>)
 8007862:	2200      	movs	r2, #0
 8007864:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1 - 1;
 8007866:	4b21      	ldr	r3, [pc, #132]	; (80078ec <MX_TIM12_Init+0xc0>)
 8007868:	2200      	movs	r2, #0
 800786a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800786c:	4b1f      	ldr	r3, [pc, #124]	; (80078ec <MX_TIM12_Init+0xc0>)
 800786e:	2200      	movs	r2, #0
 8007870:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007872:	4b1e      	ldr	r3, [pc, #120]	; (80078ec <MX_TIM12_Init+0xc0>)
 8007874:	2280      	movs	r2, #128	; 0x80
 8007876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8007878:	481c      	ldr	r0, [pc, #112]	; (80078ec <MX_TIM12_Init+0xc0>)
 800787a:	f006 fec2 	bl	800e602 <HAL_TIM_Base_Init>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8007884:	f7ff fa18 	bl	8006cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800788c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800788e:	f107 0320 	add.w	r3, r7, #32
 8007892:	4619      	mov	r1, r3
 8007894:	4815      	ldr	r0, [pc, #84]	; (80078ec <MX_TIM12_Init+0xc0>)
 8007896:	f007 fa1b 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80078a0:	f7ff fa0a 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80078a4:	4811      	ldr	r0, [pc, #68]	; (80078ec <MX_TIM12_Init+0xc0>)
 80078a6:	f006 ff81 	bl	800e7ac <HAL_TIM_PWM_Init>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80078b0:	f7ff fa02 	bl	8006cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80078b4:	2360      	movs	r3, #96	; 0x60
 80078b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 80078b8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80078bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80078c6:	1d3b      	adds	r3, r7, #4
 80078c8:	2200      	movs	r2, #0
 80078ca:	4619      	mov	r1, r3
 80078cc:	4807      	ldr	r0, [pc, #28]	; (80078ec <MX_TIM12_Init+0xc0>)
 80078ce:	f007 f8eb 	bl	800eaa8 <HAL_TIM_PWM_ConfigChannel>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80078d8:	f7ff f9ee 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80078dc:	4803      	ldr	r0, [pc, #12]	; (80078ec <MX_TIM12_Init+0xc0>)
 80078de:	f000 fbf7 	bl	80080d0 <HAL_TIM_MspPostInit>

}
 80078e2:	bf00      	nop
 80078e4:	3730      	adds	r7, #48	; 0x30
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	24000b84 	.word	0x24000b84
 80078f0:	40001800 	.word	0x40001800

080078f4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80078f8:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <MX_TIM13_Init+0x40>)
 80078fa:	4a0f      	ldr	r2, [pc, #60]	; (8007938 <MX_TIM13_Init+0x44>)
 80078fc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550 - 1;
 80078fe:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <MX_TIM13_Init+0x40>)
 8007900:	f240 2225 	movw	r2, #549	; 0x225
 8007904:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007906:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <MX_TIM13_Init+0x40>)
 8007908:	2200      	movs	r2, #0
 800790a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1-1;
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <MX_TIM13_Init+0x40>)
 800790e:	2200      	movs	r2, #0
 8007910:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007912:	4b08      	ldr	r3, [pc, #32]	; (8007934 <MX_TIM13_Init+0x40>)
 8007914:	2200      	movs	r2, #0
 8007916:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007918:	4b06      	ldr	r3, [pc, #24]	; (8007934 <MX_TIM13_Init+0x40>)
 800791a:	2280      	movs	r2, #128	; 0x80
 800791c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800791e:	4805      	ldr	r0, [pc, #20]	; (8007934 <MX_TIM13_Init+0x40>)
 8007920:	f006 fe6f 	bl	800e602 <HAL_TIM_Base_Init>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800792a:	f7ff f9c5 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800792e:	bf00      	nop
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	24000a08 	.word	0x24000a08
 8007938:	40001c00 	.word	0x40001c00

0800793c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b088      	sub	sp, #32
 8007940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007942:	1d3b      	adds	r3, r7, #4
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	609a      	str	r2, [r3, #8]
 800794c:	60da      	str	r2, [r3, #12]
 800794e:	611a      	str	r2, [r3, #16]
 8007950:	615a      	str	r2, [r3, #20]
 8007952:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8007954:	4b1e      	ldr	r3, [pc, #120]	; (80079d0 <MX_TIM14_Init+0x94>)
 8007956:	4a1f      	ldr	r2, [pc, #124]	; (80079d4 <MX_TIM14_Init+0x98>)
 8007958:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 800795a:	4b1d      	ldr	r3, [pc, #116]	; (80079d0 <MX_TIM14_Init+0x94>)
 800795c:	f240 2225 	movw	r2, #549	; 0x225
 8007960:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007962:	4b1b      	ldr	r3, [pc, #108]	; (80079d0 <MX_TIM14_Init+0x94>)
 8007964:	2200      	movs	r2, #0
 8007966:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1-1;
 8007968:	4b19      	ldr	r3, [pc, #100]	; (80079d0 <MX_TIM14_Init+0x94>)
 800796a:	2200      	movs	r2, #0
 800796c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800796e:	4b18      	ldr	r3, [pc, #96]	; (80079d0 <MX_TIM14_Init+0x94>)
 8007970:	2200      	movs	r2, #0
 8007972:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007974:	4b16      	ldr	r3, [pc, #88]	; (80079d0 <MX_TIM14_Init+0x94>)
 8007976:	2280      	movs	r2, #128	; 0x80
 8007978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800797a:	4815      	ldr	r0, [pc, #84]	; (80079d0 <MX_TIM14_Init+0x94>)
 800797c:	f006 fe41 	bl	800e602 <HAL_TIM_Base_Init>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8007986:	f7ff f997 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800798a:	4811      	ldr	r0, [pc, #68]	; (80079d0 <MX_TIM14_Init+0x94>)
 800798c:	f006 ff0e 	bl	800e7ac <HAL_TIM_PWM_Init>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8007996:	f7ff f98f 	bl	8006cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800799a:	2360      	movs	r3, #96	; 0x60
 800799c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800799e:	f240 13f3 	movw	r3, #499	; 0x1f3
 80079a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80079ac:	1d3b      	adds	r3, r7, #4
 80079ae:	2200      	movs	r2, #0
 80079b0:	4619      	mov	r1, r3
 80079b2:	4807      	ldr	r0, [pc, #28]	; (80079d0 <MX_TIM14_Init+0x94>)
 80079b4:	f007 f878 	bl	800eaa8 <HAL_TIM_PWM_ConfigChannel>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80079be:	f7ff f97b 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80079c2:	4803      	ldr	r0, [pc, #12]	; (80079d0 <MX_TIM14_Init+0x94>)
 80079c4:	f000 fb84 	bl	80080d0 <HAL_TIM_MspPostInit>

}
 80079c8:	bf00      	nop
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	24000b38 	.word	0x24000b38
 80079d4:	40002000 	.word	0x40002000

080079d8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b09c      	sub	sp, #112	; 0x70
 80079dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80079de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	605a      	str	r2, [r3, #4]
 80079e8:	609a      	str	r2, [r3, #8]
 80079ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80079ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	605a      	str	r2, [r3, #4]
 80079f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80079f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079fc:	2200      	movs	r2, #0
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	605a      	str	r2, [r3, #4]
 8007a02:	609a      	str	r2, [r3, #8]
 8007a04:	60da      	str	r2, [r3, #12]
 8007a06:	611a      	str	r2, [r3, #16]
 8007a08:	615a      	str	r2, [r3, #20]
 8007a0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007a0c:	1d3b      	adds	r3, r7, #4
 8007a0e:	2234      	movs	r2, #52	; 0x34
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f009 ff52 	bl	80118bc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8007a18:	4b3f      	ldr	r3, [pc, #252]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007a1a:	4a40      	ldr	r2, [pc, #256]	; (8007b1c <MX_TIM15_Init+0x144>)
 8007a1c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 5500 - 1;
 8007a1e:	4b3e      	ldr	r3, [pc, #248]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007a20:	f241 527b 	movw	r2, #5499	; 0x157b
 8007a24:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a26:	4b3c      	ldr	r3, [pc, #240]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 8007a2c:	4b3a      	ldr	r3, [pc, #232]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007a2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007a32:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a34:	4b38      	ldr	r3, [pc, #224]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007a3a:	4b37      	ldr	r3, [pc, #220]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007a40:	4b35      	ldr	r3, [pc, #212]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007a42:	2280      	movs	r2, #128	; 0x80
 8007a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007a46:	4834      	ldr	r0, [pc, #208]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007a48:	f006 fddb 	bl	800e602 <HAL_TIM_Base_Init>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8007a52:	f7ff f931 	bl	8006cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a5a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007a5c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007a60:	4619      	mov	r1, r3
 8007a62:	482d      	ldr	r0, [pc, #180]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007a64:	f007 f934 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8007a6e:	f7ff f923 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8007a72:	4829      	ldr	r0, [pc, #164]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007a74:	f006 fe9a 	bl	800e7ac <HAL_TIM_PWM_Init>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8007a7e:	f7ff f91b 	bl	8006cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a82:	2300      	movs	r3, #0
 8007a84:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007a8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4821      	ldr	r0, [pc, #132]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007a92:	f007 fe55 	bl	800f740 <HAL_TIMEx_MasterConfigSynchronization>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8007a9c:	f7ff f90c 	bl	8006cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007aa0:	2360      	movs	r3, #96	; 0x60
 8007aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007aac:	2300      	movs	r3, #0
 8007aae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007abc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4814      	ldr	r0, [pc, #80]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007ac6:	f006 ffef 	bl	800eaa8 <HAL_TIM_PWM_ConfigChannel>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8007ad0:	f7ff f8f2 	bl	8006cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007aec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8007af6:	1d3b      	adds	r3, r7, #4
 8007af8:	4619      	mov	r1, r3
 8007afa:	4807      	ldr	r0, [pc, #28]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007afc:	f007 febc 	bl	800f878 <HAL_TIMEx_ConfigBreakDeadTime>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8007b06:	f7ff f8d7 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8007b0a:	4803      	ldr	r0, [pc, #12]	; (8007b18 <MX_TIM15_Init+0x140>)
 8007b0c:	f000 fae0 	bl	80080d0 <HAL_TIM_MspPostInit>

}
 8007b10:	bf00      	nop
 8007b12:	3770      	adds	r7, #112	; 0x70
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	24000924 	.word	0x24000924
 8007b1c:	40014000 	.word	0x40014000

08007b20 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b094      	sub	sp, #80	; 0x50
 8007b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007b26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	605a      	str	r2, [r3, #4]
 8007b30:	609a      	str	r2, [r3, #8]
 8007b32:	60da      	str	r2, [r3, #12]
 8007b34:	611a      	str	r2, [r3, #16]
 8007b36:	615a      	str	r2, [r3, #20]
 8007b38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	2234      	movs	r2, #52	; 0x34
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4618      	mov	r0, r3
 8007b42:	f009 febb 	bl	80118bc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007b46:	4b31      	ldr	r3, [pc, #196]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007b48:	4a31      	ldr	r2, [pc, #196]	; (8007c10 <MX_TIM16_Init+0xf0>)
 8007b4a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8007b4c:	4b2f      	ldr	r3, [pc, #188]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007b4e:	f240 2225 	movw	r2, #549	; 0x225
 8007b52:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b54:	4b2d      	ldr	r3, [pc, #180]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1-1;
 8007b5a:	4b2c      	ldr	r3, [pc, #176]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b60:	4b2a      	ldr	r3, [pc, #168]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007b66:	4b29      	ldr	r3, [pc, #164]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007b6c:	4b27      	ldr	r3, [pc, #156]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007b6e:	2280      	movs	r2, #128	; 0x80
 8007b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007b72:	4826      	ldr	r0, [pc, #152]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007b74:	f006 fd45 	bl	800e602 <HAL_TIM_Base_Init>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8007b7e:	f7ff f89b 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8007b82:	4822      	ldr	r0, [pc, #136]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007b84:	f006 fe12 	bl	800e7ac <HAL_TIM_PWM_Init>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8007b8e:	f7ff f893 	bl	8006cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007b92:	2360      	movs	r3, #96	; 0x60
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8007b96:	f240 13f3 	movw	r3, #499	; 0x1f3
 8007b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007bac:	2300      	movs	r3, #0
 8007bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007bb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4814      	ldr	r0, [pc, #80]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007bba:	f006 ff75 	bl	800eaa8 <HAL_TIM_PWM_ConfigChannel>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8007bc4:	f7ff f878 	bl	8006cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007be0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8007bea:	463b      	mov	r3, r7
 8007bec:	4619      	mov	r1, r3
 8007bee:	4807      	ldr	r0, [pc, #28]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007bf0:	f007 fe42 	bl	800f878 <HAL_TIMEx_ConfigBreakDeadTime>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8007bfa:	f7ff f85d 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8007bfe:	4803      	ldr	r0, [pc, #12]	; (8007c0c <MX_TIM16_Init+0xec>)
 8007c00:	f000 fa66 	bl	80080d0 <HAL_TIM_MspPostInit>

}
 8007c04:	bf00      	nop
 8007c06:	3750      	adds	r7, #80	; 0x50
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	24000bd0 	.word	0x24000bd0
 8007c10:	40014400 	.word	0x40014400

08007c14 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b094      	sub	sp, #80	; 0x50
 8007c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	605a      	str	r2, [r3, #4]
 8007c24:	609a      	str	r2, [r3, #8]
 8007c26:	60da      	str	r2, [r3, #12]
 8007c28:	611a      	str	r2, [r3, #16]
 8007c2a:	615a      	str	r2, [r3, #20]
 8007c2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007c2e:	463b      	mov	r3, r7
 8007c30:	2234      	movs	r2, #52	; 0x34
 8007c32:	2100      	movs	r1, #0
 8007c34:	4618      	mov	r0, r3
 8007c36:	f009 fe41 	bl	80118bc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8007c3a:	4b32      	ldr	r3, [pc, #200]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007c3c:	4a32      	ldr	r2, [pc, #200]	; (8007d08 <MX_TIM17_Init+0xf4>)
 8007c3e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8007c40:	4b30      	ldr	r3, [pc, #192]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007c42:	f240 2225 	movw	r2, #549	; 0x225
 8007c46:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c48:	4b2e      	ldr	r3, [pc, #184]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8007c4e:	4b2d      	ldr	r3, [pc, #180]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007c50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c54:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c56:	4b2b      	ldr	r3, [pc, #172]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8007c5c:	4b29      	ldr	r3, [pc, #164]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007c62:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007c64:	2280      	movs	r2, #128	; 0x80
 8007c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8007c68:	4826      	ldr	r0, [pc, #152]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007c6a:	f006 fcca 	bl	800e602 <HAL_TIM_Base_Init>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8007c74:	f7ff f820 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8007c78:	4822      	ldr	r0, [pc, #136]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007c7a:	f006 fd97 	bl	800e7ac <HAL_TIM_PWM_Init>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8007c84:	f7ff f818 	bl	8006cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007c88:	2360      	movs	r3, #96	; 0x60
 8007c8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8007c8c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8007c90:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007c92:	2300      	movs	r3, #0
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007c96:	2300      	movs	r3, #0
 8007c98:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007ca6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007caa:	2200      	movs	r2, #0
 8007cac:	4619      	mov	r1, r3
 8007cae:	4815      	ldr	r0, [pc, #84]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007cb0:	f006 fefa 	bl	800eaa8 <HAL_TIM_PWM_ConfigChannel>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8007cba:	f7fe fffd 	bl	8006cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007cd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4807      	ldr	r0, [pc, #28]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007ce6:	f007 fdc7 	bl	800f878 <HAL_TIMEx_ConfigBreakDeadTime>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8007cf0:	f7fe ffe2 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8007cf4:	4803      	ldr	r0, [pc, #12]	; (8007d04 <MX_TIM17_Init+0xf0>)
 8007cf6:	f000 f9eb 	bl	80080d0 <HAL_TIM_MspPostInit>

}
 8007cfa:	bf00      	nop
 8007cfc:	3750      	adds	r7, #80	; 0x50
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	24000970 	.word	0x24000970
 8007d08:	40014800 	.word	0x40014800

08007d0c <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d12:	f107 0310 	add.w	r3, r7, #16
 8007d16:	2200      	movs	r2, #0
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	605a      	str	r2, [r3, #4]
 8007d1c:	609a      	str	r2, [r3, #8]
 8007d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d20:	1d3b      	adds	r3, r7, #4
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	605a      	str	r2, [r3, #4]
 8007d28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8007d2a:	4b1e      	ldr	r3, [pc, #120]	; (8007da4 <MX_TIM23_Init+0x98>)
 8007d2c:	4a1e      	ldr	r2, [pc, #120]	; (8007da8 <MX_TIM23_Init+0x9c>)
 8007d2e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8007d30:	4b1c      	ldr	r3, [pc, #112]	; (8007da4 <MX_TIM23_Init+0x98>)
 8007d32:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007d36:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d38:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <MX_TIM23_Init+0x98>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8007d3e:	4b19      	ldr	r3, [pc, #100]	; (8007da4 <MX_TIM23_Init+0x98>)
 8007d40:	f04f 32ff 	mov.w	r2, #4294967295
 8007d44:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d46:	4b17      	ldr	r3, [pc, #92]	; (8007da4 <MX_TIM23_Init+0x98>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d4c:	4b15      	ldr	r3, [pc, #84]	; (8007da4 <MX_TIM23_Init+0x98>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8007d52:	4814      	ldr	r0, [pc, #80]	; (8007da4 <MX_TIM23_Init+0x98>)
 8007d54:	f006 fc55 	bl	800e602 <HAL_TIM_Base_Init>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8007d5e:	f7fe ffab 	bl	8006cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8007d68:	f107 0310 	add.w	r3, r7, #16
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	480d      	ldr	r0, [pc, #52]	; (8007da4 <MX_TIM23_Init+0x98>)
 8007d70:	f006 ffae 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8007d7a:	f7fe ff9d 	bl	8006cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8007d86:	1d3b      	adds	r3, r7, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4806      	ldr	r0, [pc, #24]	; (8007da4 <MX_TIM23_Init+0x98>)
 8007d8c:	f007 fcd8 	bl	800f740 <HAL_TIMEx_MasterConfigSynchronization>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8007d96:	f7fe ff8f 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8007d9a:	bf00      	nop
 8007d9c:	3720      	adds	r7, #32
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	24000aec 	.word	0x24000aec
 8007da8:	4000e000 	.word	0x4000e000

08007dac <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007db2:	f107 0310 	add.w	r3, r7, #16
 8007db6:	2200      	movs	r2, #0
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	605a      	str	r2, [r3, #4]
 8007dbc:	609a      	str	r2, [r3, #8]
 8007dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007dc0:	1d3b      	adds	r3, r7, #4
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	605a      	str	r2, [r3, #4]
 8007dc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8007dca:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <MX_TIM24_Init+0x94>)
 8007dcc:	4a1d      	ldr	r2, [pc, #116]	; (8007e44 <MX_TIM24_Init+0x98>)
 8007dce:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8007dd0:	4b1b      	ldr	r3, [pc, #108]	; (8007e40 <MX_TIM24_Init+0x94>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	; (8007e40 <MX_TIM24_Init+0x94>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8007ddc:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <MX_TIM24_Init+0x94>)
 8007dde:	f04f 32ff 	mov.w	r2, #4294967295
 8007de2:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007de4:	4b16      	ldr	r3, [pc, #88]	; (8007e40 <MX_TIM24_Init+0x94>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007dea:	4b15      	ldr	r3, [pc, #84]	; (8007e40 <MX_TIM24_Init+0x94>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8007df0:	4813      	ldr	r0, [pc, #76]	; (8007e40 <MX_TIM24_Init+0x94>)
 8007df2:	f006 fc06 	bl	800e602 <HAL_TIM_Base_Init>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 8007dfc:	f7fe ff5c 	bl	8006cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8007e06:	f107 0310 	add.w	r3, r7, #16
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	480c      	ldr	r0, [pc, #48]	; (8007e40 <MX_TIM24_Init+0x94>)
 8007e0e:	f006 ff5f 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 8007e18:	f7fe ff4e 	bl	8006cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8007e24:	1d3b      	adds	r3, r7, #4
 8007e26:	4619      	mov	r1, r3
 8007e28:	4805      	ldr	r0, [pc, #20]	; (8007e40 <MX_TIM24_Init+0x94>)
 8007e2a:	f007 fc89 	bl	800f740 <HAL_TIMEx_MasterConfigSynchronization>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 8007e34:	f7fe ff40 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8007e38:	bf00      	nop
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	2400088c 	.word	0x2400088c
 8007e44:	4000e400 	.word	0x4000e400

08007e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b094      	sub	sp, #80	; 0x50
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007e54:	2200      	movs	r2, #0
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	605a      	str	r2, [r3, #4]
 8007e5a:	609a      	str	r2, [r3, #8]
 8007e5c:	60da      	str	r2, [r3, #12]
 8007e5e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a8d      	ldr	r2, [pc, #564]	; (800809c <HAL_TIM_Base_MspInit+0x254>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d10f      	bne.n	8007e8a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007e6a:	4b8d      	ldr	r3, [pc, #564]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e70:	4a8b      	ldr	r2, [pc, #556]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007e72:	f043 0301 	orr.w	r3, r3, #1
 8007e76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007e7a:	4b89      	ldr	r3, [pc, #548]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8007e88:	e104      	b.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM2)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e92:	d10f      	bne.n	8007eb4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e94:	4b82      	ldr	r3, [pc, #520]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e9a:	4a81      	ldr	r2, [pc, #516]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007e9c:	f043 0301 	orr.w	r3, r3, #1
 8007ea0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007ea4:	4b7e      	ldr	r3, [pc, #504]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	637b      	str	r3, [r7, #52]	; 0x34
 8007eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007eb2:	e0ef      	b.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM3)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a7a      	ldr	r2, [pc, #488]	; (80080a4 <HAL_TIM_Base_MspInit+0x25c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d10f      	bne.n	8007ede <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007ebe:	4b78      	ldr	r3, [pc, #480]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ec4:	4a76      	ldr	r2, [pc, #472]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007ece:	4b74      	ldr	r3, [pc, #464]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007edc:	e0da      	b.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM4)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a71      	ldr	r2, [pc, #452]	; (80080a8 <HAL_TIM_Base_MspInit+0x260>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d10f      	bne.n	8007f08 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007ee8:	4b6d      	ldr	r3, [pc, #436]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007eee:	4a6c      	ldr	r2, [pc, #432]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007ef0:	f043 0304 	orr.w	r3, r3, #4
 8007ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007ef8:	4b69      	ldr	r3, [pc, #420]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007efa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007efe:	f003 0304 	and.w	r3, r3, #4
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007f06:	e0c5      	b.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM12)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a67      	ldr	r2, [pc, #412]	; (80080ac <HAL_TIM_Base_MspInit+0x264>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d10f      	bne.n	8007f32 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8007f12:	4b63      	ldr	r3, [pc, #396]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f18:	4a61      	ldr	r2, [pc, #388]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007f22:	4b5f      	ldr	r3, [pc, #380]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007f30:	e0b0      	b.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM13)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a5e      	ldr	r2, [pc, #376]	; (80080b0 <HAL_TIM_Base_MspInit+0x268>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d10f      	bne.n	8007f5c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007f3c:	4b58      	ldr	r3, [pc, #352]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f42:	4a57      	ldr	r2, [pc, #348]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007f4c:	4b54      	ldr	r3, [pc, #336]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f5a:	e09b      	b.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM14)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a54      	ldr	r2, [pc, #336]	; (80080b4 <HAL_TIM_Base_MspInit+0x26c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d10f      	bne.n	8007f86 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8007f66:	4b4e      	ldr	r3, [pc, #312]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f6c:	4a4c      	ldr	r2, [pc, #304]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007f76:	4b4a      	ldr	r3, [pc, #296]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f80:	623b      	str	r3, [r7, #32]
 8007f82:	6a3b      	ldr	r3, [r7, #32]
}
 8007f84:	e086      	b.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM15)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a4b      	ldr	r2, [pc, #300]	; (80080b8 <HAL_TIM_Base_MspInit+0x270>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d12e      	bne.n	8007fee <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007f90:	4b43      	ldr	r3, [pc, #268]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f96:	4a42      	ldr	r2, [pc, #264]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007fa0:	4b3f      	ldr	r3, [pc, #252]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007faa:	61fb      	str	r3, [r7, #28]
 8007fac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fae:	4b3c      	ldr	r3, [pc, #240]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fb4:	4a3a      	ldr	r2, [pc, #232]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007fb6:	f043 0301 	orr.w	r3, r3, #1
 8007fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007fbe:	4b38      	ldr	r3, [pc, #224]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007fcc:	2308      	movs	r3, #8
 8007fce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8007fdc:	2304      	movs	r3, #4
 8007fde:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fe0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4835      	ldr	r0, [pc, #212]	; (80080bc <HAL_TIM_Base_MspInit+0x274>)
 8007fe8:	f002 fff8 	bl	800afdc <HAL_GPIO_Init>
}
 8007fec:	e052      	b.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM16)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a33      	ldr	r2, [pc, #204]	; (80080c0 <HAL_TIM_Base_MspInit+0x278>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d10f      	bne.n	8008018 <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007ff8:	4b29      	ldr	r3, [pc, #164]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8007ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ffe:	4a28      	ldr	r2, [pc, #160]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8008000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008004:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008008:	4b25      	ldr	r3, [pc, #148]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 800800a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800800e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	697b      	ldr	r3, [r7, #20]
}
 8008016:	e03d      	b.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM17)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a29      	ldr	r2, [pc, #164]	; (80080c4 <HAL_TIM_Base_MspInit+0x27c>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d10f      	bne.n	8008042 <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008022:	4b1f      	ldr	r3, [pc, #124]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8008024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008028:	4a1d      	ldr	r2, [pc, #116]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 800802a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800802e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008032:	4b1b      	ldr	r3, [pc, #108]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8008034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800803c:	613b      	str	r3, [r7, #16]
 800803e:	693b      	ldr	r3, [r7, #16]
}
 8008040:	e028      	b.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM23)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a20      	ldr	r2, [pc, #128]	; (80080c8 <HAL_TIM_Base_MspInit+0x280>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d10f      	bne.n	800806c <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800804c:	4b14      	ldr	r3, [pc, #80]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 800804e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008052:	4a13      	ldr	r2, [pc, #76]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8008054:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008058:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800805c:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 800805e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
}
 800806a:	e013      	b.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM24)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a16      	ldr	r2, [pc, #88]	; (80080cc <HAL_TIM_Base_MspInit+0x284>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d10e      	bne.n	8008094 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8008076:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8008078:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800807c:	4a08      	ldr	r2, [pc, #32]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 800807e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008082:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8008086:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <HAL_TIM_Base_MspInit+0x258>)
 8008088:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800808c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008090:	60bb      	str	r3, [r7, #8]
 8008092:	68bb      	ldr	r3, [r7, #8]
}
 8008094:	bf00      	nop
 8008096:	3750      	adds	r7, #80	; 0x50
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	40010000 	.word	0x40010000
 80080a0:	58024400 	.word	0x58024400
 80080a4:	40000400 	.word	0x40000400
 80080a8:	40000800 	.word	0x40000800
 80080ac:	40001800 	.word	0x40001800
 80080b0:	40001c00 	.word	0x40001c00
 80080b4:	40002000 	.word	0x40002000
 80080b8:	40014000 	.word	0x40014000
 80080bc:	58020000 	.word	0x58020000
 80080c0:	40014400 	.word	0x40014400
 80080c4:	40014800 	.word	0x40014800
 80080c8:	4000e000 	.word	0x4000e000
 80080cc:	4000e400 	.word	0x4000e400

080080d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b090      	sub	sp, #64	; 0x40
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080dc:	2200      	movs	r2, #0
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	605a      	str	r2, [r3, #4]
 80080e2:	609a      	str	r2, [r3, #8]
 80080e4:	60da      	str	r2, [r3, #12]
 80080e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4aa9      	ldr	r2, [pc, #676]	; (8008394 <HAL_TIM_MspPostInit+0x2c4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d120      	bne.n	8008134 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80080f2:	4ba9      	ldr	r3, [pc, #676]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 80080f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080f8:	4aa7      	ldr	r2, [pc, #668]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 80080fa:	f043 0310 	orr.w	r3, r3, #16
 80080fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008102:	4ba5      	ldr	r3, [pc, #660]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008108:	f003 0310 	and.w	r3, r3, #16
 800810c:	62bb      	str	r3, [r7, #40]	; 0x28
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008116:	2302      	movs	r3, #2
 8008118:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800811a:	2300      	movs	r3, #0
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800811e:	2300      	movs	r3, #0
 8008120:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008122:	2301      	movs	r3, #1
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800812a:	4619      	mov	r1, r3
 800812c:	489b      	ldr	r0, [pc, #620]	; (800839c <HAL_TIM_MspPostInit+0x2cc>)
 800812e:	f002 ff55 	bl	800afdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8008132:	e12a      	b.n	800838a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM2)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813c:	d11f      	bne.n	800817e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800813e:	4b96      	ldr	r3, [pc, #600]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008144:	4a94      	ldr	r2, [pc, #592]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008146:	f043 0301 	orr.w	r3, r3, #1
 800814a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800814e:	4b92      	ldr	r3, [pc, #584]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800815c:	2301      	movs	r3, #1
 800815e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008160:	2302      	movs	r3, #2
 8008162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008164:	2300      	movs	r3, #0
 8008166:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008168:	2300      	movs	r3, #0
 800816a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800816c:	2301      	movs	r3, #1
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008174:	4619      	mov	r1, r3
 8008176:	488a      	ldr	r0, [pc, #552]	; (80083a0 <HAL_TIM_MspPostInit+0x2d0>)
 8008178:	f002 ff30 	bl	800afdc <HAL_GPIO_Init>
}
 800817c:	e105      	b.n	800838a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM3)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a88      	ldr	r2, [pc, #544]	; (80083a4 <HAL_TIM_MspPostInit+0x2d4>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d11f      	bne.n	80081c8 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008188:	4b83      	ldr	r3, [pc, #524]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 800818a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800818e:	4a82      	ldr	r2, [pc, #520]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008190:	f043 0304 	orr.w	r3, r3, #4
 8008194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008198:	4b7f      	ldr	r3, [pc, #508]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 800819a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	623b      	str	r3, [r7, #32]
 80081a4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80081a6:	2340      	movs	r3, #64	; 0x40
 80081a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081aa:	2302      	movs	r3, #2
 80081ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081b2:	2300      	movs	r3, #0
 80081b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80081b6:	2302      	movs	r3, #2
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081be:	4619      	mov	r1, r3
 80081c0:	4879      	ldr	r0, [pc, #484]	; (80083a8 <HAL_TIM_MspPostInit+0x2d8>)
 80081c2:	f002 ff0b 	bl	800afdc <HAL_GPIO_Init>
}
 80081c6:	e0e0      	b.n	800838a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM4)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a77      	ldr	r2, [pc, #476]	; (80083ac <HAL_TIM_MspPostInit+0x2dc>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d120      	bne.n	8008214 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80081d2:	4b71      	ldr	r3, [pc, #452]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 80081d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081d8:	4a6f      	ldr	r2, [pc, #444]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 80081da:	f043 0308 	orr.w	r3, r3, #8
 80081de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80081e2:	4b6d      	ldr	r3, [pc, #436]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 80081e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081e8:	f003 0308 	and.w	r3, r3, #8
 80081ec:	61fb      	str	r3, [r7, #28]
 80081ee:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80081f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081f6:	2302      	movs	r3, #2
 80081f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081fe:	2300      	movs	r3, #0
 8008200:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008202:	2302      	movs	r3, #2
 8008204:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800820a:	4619      	mov	r1, r3
 800820c:	4868      	ldr	r0, [pc, #416]	; (80083b0 <HAL_TIM_MspPostInit+0x2e0>)
 800820e:	f002 fee5 	bl	800afdc <HAL_GPIO_Init>
}
 8008212:	e0ba      	b.n	800838a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM12)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a66      	ldr	r2, [pc, #408]	; (80083b4 <HAL_TIM_MspPostInit+0x2e4>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d120      	bne.n	8008260 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800821e:	4b5e      	ldr	r3, [pc, #376]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008224:	4a5c      	ldr	r2, [pc, #368]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008226:	f043 0302 	orr.w	r3, r3, #2
 800822a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800822e:	4b5a      	ldr	r3, [pc, #360]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800823c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008242:	2302      	movs	r3, #2
 8008244:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008246:	2300      	movs	r3, #0
 8008248:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800824a:	2300      	movs	r3, #0
 800824c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800824e:	2302      	movs	r3, #2
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008256:	4619      	mov	r1, r3
 8008258:	4857      	ldr	r0, [pc, #348]	; (80083b8 <HAL_TIM_MspPostInit+0x2e8>)
 800825a:	f002 febf 	bl	800afdc <HAL_GPIO_Init>
}
 800825e:	e094      	b.n	800838a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM14)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a55      	ldr	r2, [pc, #340]	; (80083bc <HAL_TIM_MspPostInit+0x2ec>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d11f      	bne.n	80082aa <HAL_TIM_MspPostInit+0x1da>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800826a:	4b4b      	ldr	r3, [pc, #300]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 800826c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008270:	4a49      	ldr	r2, [pc, #292]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800827a:	4b47      	ldr	r3, [pc, #284]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 800827c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008288:	2380      	movs	r3, #128	; 0x80
 800828a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800828c:	2302      	movs	r3, #2
 800828e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008290:	2300      	movs	r3, #0
 8008292:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008294:	2300      	movs	r3, #0
 8008296:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8008298:	2309      	movs	r3, #9
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800829c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082a0:	4619      	mov	r1, r3
 80082a2:	483f      	ldr	r0, [pc, #252]	; (80083a0 <HAL_TIM_MspPostInit+0x2d0>)
 80082a4:	f002 fe9a 	bl	800afdc <HAL_GPIO_Init>
}
 80082a8:	e06f      	b.n	800838a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM15)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a44      	ldr	r2, [pc, #272]	; (80083c0 <HAL_TIM_MspPostInit+0x2f0>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d11f      	bne.n	80082f4 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80082b4:	4b38      	ldr	r3, [pc, #224]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 80082b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082ba:	4a37      	ldr	r2, [pc, #220]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 80082bc:	f043 0310 	orr.w	r3, r3, #16
 80082c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082c4:	4b34      	ldr	r3, [pc, #208]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 80082c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082ca:	f003 0310 	and.w	r3, r3, #16
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80082d2:	2320      	movs	r3, #32
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082d6:	2302      	movs	r3, #2
 80082d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082de:	2300      	movs	r3, #0
 80082e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80082e2:	2304      	movs	r3, #4
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80082e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082ea:	4619      	mov	r1, r3
 80082ec:	482b      	ldr	r0, [pc, #172]	; (800839c <HAL_TIM_MspPostInit+0x2cc>)
 80082ee:	f002 fe75 	bl	800afdc <HAL_GPIO_Init>
}
 80082f2:	e04a      	b.n	800838a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM16)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a32      	ldr	r2, [pc, #200]	; (80083c4 <HAL_TIM_MspPostInit+0x2f4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d120      	bne.n	8008340 <HAL_TIM_MspPostInit+0x270>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082fe:	4b26      	ldr	r3, [pc, #152]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008304:	4a24      	ldr	r2, [pc, #144]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008306:	f043 0302 	orr.w	r3, r3, #2
 800830a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800830e:	4b22      	ldr	r3, [pc, #136]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800831c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008320:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008322:	2302      	movs	r3, #2
 8008324:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008326:	2300      	movs	r3, #0
 8008328:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800832a:	2300      	movs	r3, #0
 800832c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800832e:	2301      	movs	r3, #1
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008336:	4619      	mov	r1, r3
 8008338:	481f      	ldr	r0, [pc, #124]	; (80083b8 <HAL_TIM_MspPostInit+0x2e8>)
 800833a:	f002 fe4f 	bl	800afdc <HAL_GPIO_Init>
}
 800833e:	e024      	b.n	800838a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM17)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a20      	ldr	r2, [pc, #128]	; (80083c8 <HAL_TIM_MspPostInit+0x2f8>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d11f      	bne.n	800838a <HAL_TIM_MspPostInit+0x2ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800834a:	4b13      	ldr	r3, [pc, #76]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 800834c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008350:	4a11      	ldr	r2, [pc, #68]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 8008352:	f043 0302 	orr.w	r3, r3, #2
 8008356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800835a:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <HAL_TIM_MspPostInit+0x2c8>)
 800835c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008360:	f003 0302 	and.w	r3, r3, #2
 8008364:	60bb      	str	r3, [r7, #8]
 8008366:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800836e:	2302      	movs	r3, #2
 8008370:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008372:	2300      	movs	r3, #0
 8008374:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008376:	2300      	movs	r3, #0
 8008378:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800837a:	2301      	movs	r3, #1
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800837e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008382:	4619      	mov	r1, r3
 8008384:	480c      	ldr	r0, [pc, #48]	; (80083b8 <HAL_TIM_MspPostInit+0x2e8>)
 8008386:	f002 fe29 	bl	800afdc <HAL_GPIO_Init>
}
 800838a:	bf00      	nop
 800838c:	3740      	adds	r7, #64	; 0x40
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	40010000 	.word	0x40010000
 8008398:	58024400 	.word	0x58024400
 800839c:	58021000 	.word	0x58021000
 80083a0:	58020000 	.word	0x58020000
 80083a4:	40000400 	.word	0x40000400
 80083a8:	58020800 	.word	0x58020800
 80083ac:	40000800 	.word	0x40000800
 80083b0:	58020c00 	.word	0x58020c00
 80083b4:	40001800 	.word	0x40001800
 80083b8:	58020400 	.word	0x58020400
 80083bc:	40002000 	.word	0x40002000
 80083c0:	40014000 	.word	0x40014000
 80083c4:	40014400 	.word	0x40014400
 80083c8:	40014800 	.word	0x40014800

080083cc <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80083d0:	4b22      	ldr	r3, [pc, #136]	; (800845c <MX_UART4_Init+0x90>)
 80083d2:	4a23      	ldr	r2, [pc, #140]	; (8008460 <MX_UART4_Init+0x94>)
 80083d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80083d6:	4b21      	ldr	r3, [pc, #132]	; (800845c <MX_UART4_Init+0x90>)
 80083d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80083dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80083de:	4b1f      	ldr	r3, [pc, #124]	; (800845c <MX_UART4_Init+0x90>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80083e4:	4b1d      	ldr	r3, [pc, #116]	; (800845c <MX_UART4_Init+0x90>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80083ea:	4b1c      	ldr	r3, [pc, #112]	; (800845c <MX_UART4_Init+0x90>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80083f0:	4b1a      	ldr	r3, [pc, #104]	; (800845c <MX_UART4_Init+0x90>)
 80083f2:	220c      	movs	r2, #12
 80083f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083f6:	4b19      	ldr	r3, [pc, #100]	; (800845c <MX_UART4_Init+0x90>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80083fc:	4b17      	ldr	r3, [pc, #92]	; (800845c <MX_UART4_Init+0x90>)
 80083fe:	2200      	movs	r2, #0
 8008400:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008402:	4b16      	ldr	r3, [pc, #88]	; (800845c <MX_UART4_Init+0x90>)
 8008404:	2200      	movs	r2, #0
 8008406:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008408:	4b14      	ldr	r3, [pc, #80]	; (800845c <MX_UART4_Init+0x90>)
 800840a:	2200      	movs	r2, #0
 800840c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800840e:	4b13      	ldr	r3, [pc, #76]	; (800845c <MX_UART4_Init+0x90>)
 8008410:	2200      	movs	r2, #0
 8008412:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8008414:	4811      	ldr	r0, [pc, #68]	; (800845c <MX_UART4_Init+0x90>)
 8008416:	f007 facf 	bl	800f9b8 <HAL_UART_Init>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8008420:	f7fe fc4a 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008424:	2100      	movs	r1, #0
 8008426:	480d      	ldr	r0, [pc, #52]	; (800845c <MX_UART4_Init+0x90>)
 8008428:	f009 f946 	bl	80116b8 <HAL_UARTEx_SetTxFifoThreshold>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8008432:	f7fe fc41 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008436:	2100      	movs	r1, #0
 8008438:	4808      	ldr	r0, [pc, #32]	; (800845c <MX_UART4_Init+0x90>)
 800843a:	f009 f97b 	bl	8011734 <HAL_UARTEx_SetRxFifoThreshold>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8008444:	f7fe fc38 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8008448:	4804      	ldr	r0, [pc, #16]	; (800845c <MX_UART4_Init+0x90>)
 800844a:	f009 f8fc 	bl	8011646 <HAL_UARTEx_DisableFifoMode>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8008454:	f7fe fc30 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8008458:	bf00      	nop
 800845a:	bd80      	pop	{r7, pc}
 800845c:	24000d3c 	.word	0x24000d3c
 8008460:	40004c00 	.word	0x40004c00

08008464 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8008468:	4b22      	ldr	r3, [pc, #136]	; (80084f4 <MX_UART5_Init+0x90>)
 800846a:	4a23      	ldr	r2, [pc, #140]	; (80084f8 <MX_UART5_Init+0x94>)
 800846c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800846e:	4b21      	ldr	r3, [pc, #132]	; (80084f4 <MX_UART5_Init+0x90>)
 8008470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008474:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8008476:	4b1f      	ldr	r3, [pc, #124]	; (80084f4 <MX_UART5_Init+0x90>)
 8008478:	2200      	movs	r2, #0
 800847a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800847c:	4b1d      	ldr	r3, [pc, #116]	; (80084f4 <MX_UART5_Init+0x90>)
 800847e:	2200      	movs	r2, #0
 8008480:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8008482:	4b1c      	ldr	r3, [pc, #112]	; (80084f4 <MX_UART5_Init+0x90>)
 8008484:	2200      	movs	r2, #0
 8008486:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8008488:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <MX_UART5_Init+0x90>)
 800848a:	220c      	movs	r2, #12
 800848c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800848e:	4b19      	ldr	r3, [pc, #100]	; (80084f4 <MX_UART5_Init+0x90>)
 8008490:	2200      	movs	r2, #0
 8008492:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8008494:	4b17      	ldr	r3, [pc, #92]	; (80084f4 <MX_UART5_Init+0x90>)
 8008496:	2200      	movs	r2, #0
 8008498:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800849a:	4b16      	ldr	r3, [pc, #88]	; (80084f4 <MX_UART5_Init+0x90>)
 800849c:	2200      	movs	r2, #0
 800849e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80084a0:	4b14      	ldr	r3, [pc, #80]	; (80084f4 <MX_UART5_Init+0x90>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80084a6:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <MX_UART5_Init+0x90>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80084ac:	4811      	ldr	r0, [pc, #68]	; (80084f4 <MX_UART5_Init+0x90>)
 80084ae:	f007 fa83 	bl	800f9b8 <HAL_UART_Init>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80084b8:	f7fe fbfe 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80084bc:	2100      	movs	r1, #0
 80084be:	480d      	ldr	r0, [pc, #52]	; (80084f4 <MX_UART5_Init+0x90>)
 80084c0:	f009 f8fa 	bl	80116b8 <HAL_UARTEx_SetTxFifoThreshold>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80084ca:	f7fe fbf5 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80084ce:	2100      	movs	r1, #0
 80084d0:	4808      	ldr	r0, [pc, #32]	; (80084f4 <MX_UART5_Init+0x90>)
 80084d2:	f009 f92f 	bl	8011734 <HAL_UARTEx_SetRxFifoThreshold>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80084dc:	f7fe fbec 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80084e0:	4804      	ldr	r0, [pc, #16]	; (80084f4 <MX_UART5_Init+0x90>)
 80084e2:	f009 f8b0 	bl	8011646 <HAL_UARTEx_DisableFifoMode>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80084ec:	f7fe fbe4 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80084f0:	bf00      	nop
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	24000cac 	.word	0x24000cac
 80084f8:	40005000 	.word	0x40005000

080084fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008500:	4b22      	ldr	r3, [pc, #136]	; (800858c <MX_USART2_UART_Init+0x90>)
 8008502:	4a23      	ldr	r2, [pc, #140]	; (8008590 <MX_USART2_UART_Init+0x94>)
 8008504:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008506:	4b21      	ldr	r3, [pc, #132]	; (800858c <MX_USART2_UART_Init+0x90>)
 8008508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800850c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800850e:	4b1f      	ldr	r3, [pc, #124]	; (800858c <MX_USART2_UART_Init+0x90>)
 8008510:	2200      	movs	r2, #0
 8008512:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008514:	4b1d      	ldr	r3, [pc, #116]	; (800858c <MX_USART2_UART_Init+0x90>)
 8008516:	2200      	movs	r2, #0
 8008518:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800851a:	4b1c      	ldr	r3, [pc, #112]	; (800858c <MX_USART2_UART_Init+0x90>)
 800851c:	2200      	movs	r2, #0
 800851e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008520:	4b1a      	ldr	r3, [pc, #104]	; (800858c <MX_USART2_UART_Init+0x90>)
 8008522:	220c      	movs	r2, #12
 8008524:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008526:	4b19      	ldr	r3, [pc, #100]	; (800858c <MX_USART2_UART_Init+0x90>)
 8008528:	2200      	movs	r2, #0
 800852a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800852c:	4b17      	ldr	r3, [pc, #92]	; (800858c <MX_USART2_UART_Init+0x90>)
 800852e:	2200      	movs	r2, #0
 8008530:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008532:	4b16      	ldr	r3, [pc, #88]	; (800858c <MX_USART2_UART_Init+0x90>)
 8008534:	2200      	movs	r2, #0
 8008536:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008538:	4b14      	ldr	r3, [pc, #80]	; (800858c <MX_USART2_UART_Init+0x90>)
 800853a:	2200      	movs	r2, #0
 800853c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800853e:	4b13      	ldr	r3, [pc, #76]	; (800858c <MX_USART2_UART_Init+0x90>)
 8008540:	2200      	movs	r2, #0
 8008542:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008544:	4811      	ldr	r0, [pc, #68]	; (800858c <MX_USART2_UART_Init+0x90>)
 8008546:	f007 fa37 	bl	800f9b8 <HAL_UART_Init>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008550:	f7fe fbb2 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008554:	2100      	movs	r1, #0
 8008556:	480d      	ldr	r0, [pc, #52]	; (800858c <MX_USART2_UART_Init+0x90>)
 8008558:	f009 f8ae 	bl	80116b8 <HAL_UARTEx_SetTxFifoThreshold>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8008562:	f7fe fba9 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008566:	2100      	movs	r1, #0
 8008568:	4808      	ldr	r0, [pc, #32]	; (800858c <MX_USART2_UART_Init+0x90>)
 800856a:	f009 f8e3 	bl	8011734 <HAL_UARTEx_SetRxFifoThreshold>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008574:	f7fe fba0 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008578:	4804      	ldr	r0, [pc, #16]	; (800858c <MX_USART2_UART_Init+0x90>)
 800857a:	f009 f864 	bl	8011646 <HAL_UARTEx_DisableFifoMode>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008584:	f7fe fb98 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008588:	bf00      	nop
 800858a:	bd80      	pop	{r7, pc}
 800858c:	24000dcc 	.word	0x24000dcc
 8008590:	40004400 	.word	0x40004400

08008594 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008598:	4b22      	ldr	r3, [pc, #136]	; (8008624 <MX_USART3_UART_Init+0x90>)
 800859a:	4a23      	ldr	r2, [pc, #140]	; (8008628 <MX_USART3_UART_Init+0x94>)
 800859c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800859e:	4b21      	ldr	r3, [pc, #132]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80085a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80085a6:	4b1f      	ldr	r3, [pc, #124]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80085ac:	4b1d      	ldr	r3, [pc, #116]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80085b2:	4b1c      	ldr	r3, [pc, #112]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80085b8:	4b1a      	ldr	r3, [pc, #104]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085ba:	220c      	movs	r2, #12
 80085bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085be:	4b19      	ldr	r3, [pc, #100]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80085c4:	4b17      	ldr	r3, [pc, #92]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80085ca:	4b16      	ldr	r3, [pc, #88]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80085d0:	4b14      	ldr	r3, [pc, #80]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80085d6:	4b13      	ldr	r3, [pc, #76]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085d8:	2200      	movs	r2, #0
 80085da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80085dc:	4811      	ldr	r0, [pc, #68]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085de:	f007 f9eb 	bl	800f9b8 <HAL_UART_Init>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80085e8:	f7fe fb66 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80085ec:	2100      	movs	r1, #0
 80085ee:	480d      	ldr	r0, [pc, #52]	; (8008624 <MX_USART3_UART_Init+0x90>)
 80085f0:	f009 f862 	bl	80116b8 <HAL_UARTEx_SetTxFifoThreshold>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80085fa:	f7fe fb5d 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80085fe:	2100      	movs	r1, #0
 8008600:	4808      	ldr	r0, [pc, #32]	; (8008624 <MX_USART3_UART_Init+0x90>)
 8008602:	f009 f897 	bl	8011734 <HAL_UARTEx_SetRxFifoThreshold>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800860c:	f7fe fb54 	bl	8006cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8008610:	4804      	ldr	r0, [pc, #16]	; (8008624 <MX_USART3_UART_Init+0x90>)
 8008612:	f009 f818 	bl	8011646 <HAL_UARTEx_DisableFifoMode>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800861c:	f7fe fb4c 	bl	8006cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008620:	bf00      	nop
 8008622:	bd80      	pop	{r7, pc}
 8008624:	24000c1c 	.word	0x24000c1c
 8008628:	40004800 	.word	0x40004800

0800862c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b0bc      	sub	sp, #240	; 0xf0
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008634:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	605a      	str	r2, [r3, #4]
 800863e:	609a      	str	r2, [r3, #8]
 8008640:	60da      	str	r2, [r3, #12]
 8008642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008648:	22b4      	movs	r2, #180	; 0xb4
 800864a:	2100      	movs	r1, #0
 800864c:	4618      	mov	r0, r3
 800864e:	f009 f935 	bl	80118bc <memset>
  if(uartHandle->Instance==UART4)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a96      	ldr	r2, [pc, #600]	; (80088b0 <HAL_UART_MspInit+0x284>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d143      	bne.n	80086e4 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800865c:	2302      	movs	r3, #2
 800865e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008660:	2300      	movs	r3, #0
 8008662:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800866a:	4618      	mov	r0, r3
 800866c:	f003 fe16 	bl	800c29c <HAL_RCCEx_PeriphCLKConfig>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008676:	f7fe fb1f 	bl	8006cb8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800867a:	4b8e      	ldr	r3, [pc, #568]	; (80088b4 <HAL_UART_MspInit+0x288>)
 800867c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008680:	4a8c      	ldr	r2, [pc, #560]	; (80088b4 <HAL_UART_MspInit+0x288>)
 8008682:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008686:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800868a:	4b8a      	ldr	r3, [pc, #552]	; (80088b4 <HAL_UART_MspInit+0x288>)
 800868c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008698:	4b86      	ldr	r3, [pc, #536]	; (80088b4 <HAL_UART_MspInit+0x288>)
 800869a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800869e:	4a85      	ldr	r2, [pc, #532]	; (80088b4 <HAL_UART_MspInit+0x288>)
 80086a0:	f043 0301 	orr.w	r3, r3, #1
 80086a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086a8:	4b82      	ldr	r3, [pc, #520]	; (80088b4 <HAL_UART_MspInit+0x288>)
 80086aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	623b      	str	r3, [r7, #32]
 80086b4:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80086ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086be:	2302      	movs	r3, #2
 80086c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c4:	2300      	movs	r3, #0
 80086c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ca:	2300      	movs	r3, #0
 80086cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80086d0:	2306      	movs	r3, #6
 80086d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80086da:	4619      	mov	r1, r3
 80086dc:	4876      	ldr	r0, [pc, #472]	; (80088b8 <HAL_UART_MspInit+0x28c>)
 80086de:	f002 fc7d 	bl	800afdc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80086e2:	e0e0      	b.n	80088a6 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==UART5)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a74      	ldr	r2, [pc, #464]	; (80088bc <HAL_UART_MspInit+0x290>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d143      	bne.n	8008776 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80086ee:	2302      	movs	r3, #2
 80086f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80086f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086fc:	4618      	mov	r0, r3
 80086fe:	f003 fdcd 	bl	800c29c <HAL_RCCEx_PeriphCLKConfig>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8008708:	f7fe fad6 	bl	8006cb8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800870c:	4b69      	ldr	r3, [pc, #420]	; (80088b4 <HAL_UART_MspInit+0x288>)
 800870e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008712:	4a68      	ldr	r2, [pc, #416]	; (80088b4 <HAL_UART_MspInit+0x288>)
 8008714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008718:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800871c:	4b65      	ldr	r3, [pc, #404]	; (80088b4 <HAL_UART_MspInit+0x288>)
 800871e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008726:	61fb      	str	r3, [r7, #28]
 8008728:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800872a:	4b62      	ldr	r3, [pc, #392]	; (80088b4 <HAL_UART_MspInit+0x288>)
 800872c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008730:	4a60      	ldr	r2, [pc, #384]	; (80088b4 <HAL_UART_MspInit+0x288>)
 8008732:	f043 0302 	orr.w	r3, r3, #2
 8008736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800873a:	4b5e      	ldr	r3, [pc, #376]	; (80088b4 <HAL_UART_MspInit+0x288>)
 800873c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	61bb      	str	r3, [r7, #24]
 8008746:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8008748:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800874c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008750:	2302      	movs	r3, #2
 8008752:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008756:	2300      	movs	r3, #0
 8008758:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800875c:	2300      	movs	r3, #0
 800875e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8008762:	230e      	movs	r3, #14
 8008764:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008768:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800876c:	4619      	mov	r1, r3
 800876e:	4854      	ldr	r0, [pc, #336]	; (80088c0 <HAL_UART_MspInit+0x294>)
 8008770:	f002 fc34 	bl	800afdc <HAL_GPIO_Init>
}
 8008774:	e097      	b.n	80088a6 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART2)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a52      	ldr	r2, [pc, #328]	; (80088c4 <HAL_UART_MspInit+0x298>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d142      	bne.n	8008806 <HAL_UART_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008780:	2302      	movs	r3, #2
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008784:	2300      	movs	r3, #0
 8008786:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800878a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800878e:	4618      	mov	r0, r3
 8008790:	f003 fd84 	bl	800c29c <HAL_RCCEx_PeriphCLKConfig>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <HAL_UART_MspInit+0x172>
      Error_Handler();
 800879a:	f7fe fa8d 	bl	8006cb8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800879e:	4b45      	ldr	r3, [pc, #276]	; (80088b4 <HAL_UART_MspInit+0x288>)
 80087a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80087a4:	4a43      	ldr	r2, [pc, #268]	; (80088b4 <HAL_UART_MspInit+0x288>)
 80087a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80087ae:	4b41      	ldr	r3, [pc, #260]	; (80088b4 <HAL_UART_MspInit+0x288>)
 80087b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80087b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b8:	617b      	str	r3, [r7, #20]
 80087ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80087bc:	4b3d      	ldr	r3, [pc, #244]	; (80088b4 <HAL_UART_MspInit+0x288>)
 80087be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087c2:	4a3c      	ldr	r2, [pc, #240]	; (80088b4 <HAL_UART_MspInit+0x288>)
 80087c4:	f043 0308 	orr.w	r3, r3, #8
 80087c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087cc:	4b39      	ldr	r3, [pc, #228]	; (80088b4 <HAL_UART_MspInit+0x288>)
 80087ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	613b      	str	r3, [r7, #16]
 80087d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80087da:	2360      	movs	r3, #96	; 0x60
 80087dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e0:	2302      	movs	r3, #2
 80087e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087ec:	2300      	movs	r3, #0
 80087ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80087f2:	2307      	movs	r3, #7
 80087f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80087f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80087fc:	4619      	mov	r1, r3
 80087fe:	4832      	ldr	r0, [pc, #200]	; (80088c8 <HAL_UART_MspInit+0x29c>)
 8008800:	f002 fbec 	bl	800afdc <HAL_GPIO_Init>
}
 8008804:	e04f      	b.n	80088a6 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART3)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a30      	ldr	r2, [pc, #192]	; (80088cc <HAL_UART_MspInit+0x2a0>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d14a      	bne.n	80088a6 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008810:	2302      	movs	r3, #2
 8008812:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008814:	2300      	movs	r3, #0
 8008816:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800881a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800881e:	4618      	mov	r0, r3
 8008820:	f003 fd3c 	bl	800c29c <HAL_RCCEx_PeriphCLKConfig>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <HAL_UART_MspInit+0x202>
      Error_Handler();
 800882a:	f7fe fa45 	bl	8006cb8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800882e:	4b21      	ldr	r3, [pc, #132]	; (80088b4 <HAL_UART_MspInit+0x288>)
 8008830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008834:	4a1f      	ldr	r2, [pc, #124]	; (80088b4 <HAL_UART_MspInit+0x288>)
 8008836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800883a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800883e:	4b1d      	ldr	r3, [pc, #116]	; (80088b4 <HAL_UART_MspInit+0x288>)
 8008840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800884c:	4b19      	ldr	r3, [pc, #100]	; (80088b4 <HAL_UART_MspInit+0x288>)
 800884e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008852:	4a18      	ldr	r2, [pc, #96]	; (80088b4 <HAL_UART_MspInit+0x288>)
 8008854:	f043 0302 	orr.w	r3, r3, #2
 8008858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800885c:	4b15      	ldr	r3, [pc, #84]	; (80088b4 <HAL_UART_MspInit+0x288>)
 800885e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008862:	f003 0302 	and.w	r3, r3, #2
 8008866:	60bb      	str	r3, [r7, #8]
 8008868:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800886a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800886e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008872:	2302      	movs	r3, #2
 8008874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008878:	2300      	movs	r3, #0
 800887a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800887e:	2300      	movs	r3, #0
 8008880:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008884:	2307      	movs	r3, #7
 8008886:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800888a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800888e:	4619      	mov	r1, r3
 8008890:	480b      	ldr	r0, [pc, #44]	; (80088c0 <HAL_UART_MspInit+0x294>)
 8008892:	f002 fba3 	bl	800afdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8008896:	2200      	movs	r2, #0
 8008898:	2100      	movs	r1, #0
 800889a:	2027      	movs	r0, #39	; 0x27
 800889c:	f001 fd1d 	bl	800a2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80088a0:	2027      	movs	r0, #39	; 0x27
 80088a2:	f001 fd34 	bl	800a30e <HAL_NVIC_EnableIRQ>
}
 80088a6:	bf00      	nop
 80088a8:	37f0      	adds	r7, #240	; 0xf0
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40004c00 	.word	0x40004c00
 80088b4:	58024400 	.word	0x58024400
 80088b8:	58020000 	.word	0x58020000
 80088bc:	40005000 	.word	0x40005000
 80088c0:	58020400 	.word	0x58020400
 80088c4:	40004400 	.word	0x40004400
 80088c8:	58020c00 	.word	0x58020c00
 80088cc:	40004800 	.word	0x40004800

080088d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80088d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008908 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80088d4:	f7fe fd1c 	bl	8007310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80088d8:	480c      	ldr	r0, [pc, #48]	; (800890c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80088da:	490d      	ldr	r1, [pc, #52]	; (8008910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80088dc:	4a0d      	ldr	r2, [pc, #52]	; (8008914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80088de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80088e0:	e002      	b.n	80088e8 <LoopCopyDataInit>

080088e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80088e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80088e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80088e6:	3304      	adds	r3, #4

080088e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80088e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80088ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80088ec:	d3f9      	bcc.n	80088e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80088ee:	4a0a      	ldr	r2, [pc, #40]	; (8008918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80088f0:	4c0a      	ldr	r4, [pc, #40]	; (800891c <LoopFillZerobss+0x22>)
  movs r3, #0
 80088f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80088f4:	e001      	b.n	80088fa <LoopFillZerobss>

080088f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80088f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80088f8:	3204      	adds	r2, #4

080088fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80088fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80088fc:	d3fb      	bcc.n	80088f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80088fe:	f008 ffab 	bl	8011858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008902:	f7fd fca9 	bl	8006258 <main>
  bx  lr
 8008906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008908:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800890c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008910:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8008914:	080153a8 	.word	0x080153a8
  ldr r2, =_sbss
 8008918:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 800891c:	24000e70 	.word	0x24000e70

08008920 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008920:	e7fe      	b.n	8008920 <ADC3_IRQHandler>
	...

08008924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800892a:	2003      	movs	r0, #3
 800892c:	f001 fcca 	bl	800a2c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008930:	f003 fac2 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 8008934:	4602      	mov	r2, r0
 8008936:	4b15      	ldr	r3, [pc, #84]	; (800898c <HAL_Init+0x68>)
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	0a1b      	lsrs	r3, r3, #8
 800893c:	f003 030f 	and.w	r3, r3, #15
 8008940:	4913      	ldr	r1, [pc, #76]	; (8008990 <HAL_Init+0x6c>)
 8008942:	5ccb      	ldrb	r3, [r1, r3]
 8008944:	f003 031f 	and.w	r3, r3, #31
 8008948:	fa22 f303 	lsr.w	r3, r2, r3
 800894c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800894e:	4b0f      	ldr	r3, [pc, #60]	; (800898c <HAL_Init+0x68>)
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	f003 030f 	and.w	r3, r3, #15
 8008956:	4a0e      	ldr	r2, [pc, #56]	; (8008990 <HAL_Init+0x6c>)
 8008958:	5cd3      	ldrb	r3, [r2, r3]
 800895a:	f003 031f 	and.w	r3, r3, #31
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	fa22 f303 	lsr.w	r3, r2, r3
 8008964:	4a0b      	ldr	r2, [pc, #44]	; (8008994 <HAL_Init+0x70>)
 8008966:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008968:	4a0b      	ldr	r2, [pc, #44]	; (8008998 <HAL_Init+0x74>)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800896e:	2000      	movs	r0, #0
 8008970:	f000 f814 	bl	800899c <HAL_InitTick>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e002      	b.n	8008984 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800897e:	f7fe fba1 	bl	80070c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	58024400 	.word	0x58024400
 8008990:	08014da0 	.word	0x08014da0
 8008994:	24000018 	.word	0x24000018
 8008998:	24000014 	.word	0x24000014

0800899c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80089a4:	4b15      	ldr	r3, [pc, #84]	; (80089fc <HAL_InitTick+0x60>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e021      	b.n	80089f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80089b0:	4b13      	ldr	r3, [pc, #76]	; (8008a00 <HAL_InitTick+0x64>)
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	4b11      	ldr	r3, [pc, #68]	; (80089fc <HAL_InitTick+0x60>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	4619      	mov	r1, r3
 80089ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089be:	fbb3 f3f1 	udiv	r3, r3, r1
 80089c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c6:	4618      	mov	r0, r3
 80089c8:	f001 fcaf 	bl	800a32a <HAL_SYSTICK_Config>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e00e      	b.n	80089f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b0f      	cmp	r3, #15
 80089da:	d80a      	bhi.n	80089f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089dc:	2200      	movs	r2, #0
 80089de:	6879      	ldr	r1, [r7, #4]
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	f001 fc79 	bl	800a2da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80089e8:	4a06      	ldr	r2, [pc, #24]	; (8008a04 <HAL_InitTick+0x68>)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	e000      	b.n	80089f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	24000020 	.word	0x24000020
 8008a00:	24000014 	.word	0x24000014
 8008a04:	2400001c 	.word	0x2400001c

08008a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008a0c:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <HAL_IncTick+0x20>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	4b06      	ldr	r3, [pc, #24]	; (8008a2c <HAL_IncTick+0x24>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4413      	add	r3, r2
 8008a18:	4a04      	ldr	r2, [pc, #16]	; (8008a2c <HAL_IncTick+0x24>)
 8008a1a:	6013      	str	r3, [r2, #0]
}
 8008a1c:	bf00      	nop
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	24000020 	.word	0x24000020
 8008a2c:	24000e5c 	.word	0x24000e5c

08008a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a30:	b480      	push	{r7}
 8008a32:	af00      	add	r7, sp, #0
  return uwTick;
 8008a34:	4b03      	ldr	r3, [pc, #12]	; (8008a44 <HAL_GetTick+0x14>)
 8008a36:	681b      	ldr	r3, [r3, #0]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	24000e5c 	.word	0x24000e5c

08008a48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	609a      	str	r2, [r3, #8]
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	431a      	orrs	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	609a      	str	r2, [r3, #8]
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3360      	adds	r3, #96	; 0x60
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4a10      	ldr	r2, [pc, #64]	; (8008b10 <LL_ADC_SetOffset+0x60>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d10b      	bne.n	8008aec <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8008aea:	e00b      	b.n	8008b04 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	430b      	orrs	r3, r1
 8008afe:	431a      	orrs	r2, r3
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	601a      	str	r2, [r3, #0]
}
 8008b04:	bf00      	nop
 8008b06:	371c      	adds	r7, #28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	58026000 	.word	0x58026000

08008b14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	3360      	adds	r3, #96	; 0x60
 8008b22:	461a      	mov	r2, r3
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f003 031f 	and.w	r3, r3, #31
 8008b5a:	6879      	ldr	r1, [r7, #4]
 8008b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b60:	431a      	orrs	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	611a      	str	r2, [r3, #16]
}
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
	...

08008b74 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4a0c      	ldr	r2, [pc, #48]	; (8008bb4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00e      	beq.n	8008ba6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3360      	adds	r3, #96	; 0x60
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	601a      	str	r2, [r3, #0]
  }
}
 8008ba6:	bf00      	nop
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	58026000 	.word	0x58026000

08008bb8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4a0c      	ldr	r2, [pc, #48]	; (8008bf8 <LL_ADC_SetOffsetSaturation+0x40>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d10e      	bne.n	8008bea <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3360      	adds	r3, #96	; 0x60
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	431a      	orrs	r2, r3
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	58026000 	.word	0x58026000

08008bfc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4a0c      	ldr	r2, [pc, #48]	; (8008c3c <LL_ADC_SetOffsetSign+0x40>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d10e      	bne.n	8008c2e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	3360      	adds	r3, #96	; 0x60
 8008c14:	461a      	mov	r2, r3
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	431a      	orrs	r2, r3
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8008c2e:	bf00      	nop
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	58026000 	.word	0x58026000

08008c40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3360      	adds	r3, #96	; 0x60
 8008c50:	461a      	mov	r2, r3
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4a0c      	ldr	r2, [pc, #48]	; (8008c90 <LL_ADC_SetOffsetState+0x50>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d108      	bne.n	8008c74 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8008c72:	e007      	b.n	8008c84 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	601a      	str	r2, [r3, #0]
}
 8008c84:	bf00      	nop
 8008c86:	371c      	adds	r7, #28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	58026000 	.word	0x58026000

08008c94 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3330      	adds	r3, #48	; 0x30
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	0a1b      	lsrs	r3, r3, #8
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	f003 030c 	and.w	r3, r3, #12
 8008cb0:	4413      	add	r3, r2
 8008cb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f003 031f 	and.w	r3, r3, #31
 8008cbe:	211f      	movs	r1, #31
 8008cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc4:	43db      	mvns	r3, r3
 8008cc6:	401a      	ands	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	0e9b      	lsrs	r3, r3, #26
 8008ccc:	f003 011f 	and.w	r1, r3, #31
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f003 031f 	and.w	r3, r3, #31
 8008cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008ce0:	bf00      	nop
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b087      	sub	sp, #28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3314      	adds	r3, #20
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	0e5b      	lsrs	r3, r3, #25
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	f003 0304 	and.w	r3, r3, #4
 8008d08:	4413      	add	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	0d1b      	lsrs	r3, r3, #20
 8008d14:	f003 031f 	and.w	r3, r3, #31
 8008d18:	2107      	movs	r1, #7
 8008d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d1e:	43db      	mvns	r3, r3
 8008d20:	401a      	ands	r2, r3
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	0d1b      	lsrs	r3, r3, #20
 8008d26:	f003 031f 	and.w	r3, r3, #31
 8008d2a:	6879      	ldr	r1, [r7, #4]
 8008d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d30:	431a      	orrs	r2, r3
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008d36:	bf00      	nop
 8008d38:	371c      	adds	r7, #28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
	...

08008d44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4a1a      	ldr	r2, [pc, #104]	; (8008dbc <LL_ADC_SetChannelSingleDiff+0x78>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d115      	bne.n	8008d84 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d64:	43db      	mvns	r3, r3
 8008d66:	401a      	ands	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f003 0318 	and.w	r3, r3, #24
 8008d6e:	4914      	ldr	r1, [pc, #80]	; (8008dc0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008d70:	40d9      	lsrs	r1, r3
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	400b      	ands	r3, r1
 8008d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8008d82:	e014      	b.n	8008dae <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d90:	43db      	mvns	r3, r3
 8008d92:	401a      	ands	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f003 0318 	and.w	r3, r3, #24
 8008d9a:	4909      	ldr	r1, [pc, #36]	; (8008dc0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008d9c:	40d9      	lsrs	r1, r3
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	400b      	ands	r3, r1
 8008da2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008da6:	431a      	orrs	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8008dae:	bf00      	nop
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	58026000 	.word	0x58026000
 8008dc0:	000fffff 	.word	0x000fffff

08008dc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	6093      	str	r3, [r2, #8]
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	5fffffc0 	.word	0x5fffffc0

08008de8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dfc:	d101      	bne.n	8008e02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <LL_ADC_EnableInternalRegulator+0x24>)
 8008e1e:	4013      	ands	r3, r2
 8008e20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	6fffffc0 	.word	0x6fffffc0

08008e38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e4c:	d101      	bne.n	8008e52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e000      	b.n	8008e54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d101      	bne.n	8008e78 <LL_ADC_IsEnabled+0x18>
 8008e74:	2301      	movs	r3, #1
 8008e76:	e000      	b.n	8008e7a <LL_ADC_IsEnabled+0x1a>
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f003 0304 	and.w	r3, r3, #4
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d101      	bne.n	8008e9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e000      	b.n	8008ea0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 0308 	and.w	r3, r3, #8
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	d101      	bne.n	8008ec4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e000      	b.n	8008ec6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
	...

08008ed4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008ed4:	b590      	push	{r4, r7, lr}
 8008ed6:	b089      	sub	sp, #36	; 0x24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e1ee      	b.n	80092cc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d109      	bne.n	8008f10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7f7 feb5 	bl	8000c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7ff ff67 	bl	8008de8 <LL_ADC_IsDeepPowerDownEnabled>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7ff ff4d 	bl	8008dc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff ff82 	bl	8008e38 <LL_ADC_IsInternalRegulatorEnabled>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d114      	bne.n	8008f64 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff ff66 	bl	8008e10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008f44:	4b8e      	ldr	r3, [pc, #568]	; (8009180 <HAL_ADC_Init+0x2ac>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	099b      	lsrs	r3, r3, #6
 8008f4a:	4a8e      	ldr	r2, [pc, #568]	; (8009184 <HAL_ADC_Init+0x2b0>)
 8008f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f50:	099b      	lsrs	r3, r3, #6
 8008f52:	3301      	adds	r3, #1
 8008f54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008f56:	e002      	b.n	8008f5e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1f9      	bne.n	8008f58 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff ff65 	bl	8008e38 <LL_ADC_IsInternalRegulatorEnabled>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10d      	bne.n	8008f90 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f78:	f043 0210 	orr.w	r2, r3, #16
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f84:	f043 0201 	orr.w	r2, r3, #1
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7ff ff76 	bl	8008e86 <LL_ADC_REG_IsConversionOngoing>
 8008f9a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fa0:	f003 0310 	and.w	r3, r3, #16
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f040 8188 	bne.w	80092ba <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f040 8184 	bne.w	80092ba <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008fba:	f043 0202 	orr.w	r2, r3, #2
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff ff4a 	bl	8008e60 <LL_ADC_IsEnabled>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d136      	bne.n	8009040 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a6c      	ldr	r2, [pc, #432]	; (8009188 <HAL_ADC_Init+0x2b4>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d004      	beq.n	8008fe6 <HAL_ADC_Init+0x112>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a6a      	ldr	r2, [pc, #424]	; (800918c <HAL_ADC_Init+0x2b8>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d10e      	bne.n	8009004 <HAL_ADC_Init+0x130>
 8008fe6:	4868      	ldr	r0, [pc, #416]	; (8009188 <HAL_ADC_Init+0x2b4>)
 8008fe8:	f7ff ff3a 	bl	8008e60 <LL_ADC_IsEnabled>
 8008fec:	4604      	mov	r4, r0
 8008fee:	4867      	ldr	r0, [pc, #412]	; (800918c <HAL_ADC_Init+0x2b8>)
 8008ff0:	f7ff ff36 	bl	8008e60 <LL_ADC_IsEnabled>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	4323      	orrs	r3, r4
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	bf0c      	ite	eq
 8008ffc:	2301      	moveq	r3, #1
 8008ffe:	2300      	movne	r3, #0
 8009000:	b2db      	uxtb	r3, r3
 8009002:	e008      	b.n	8009016 <HAL_ADC_Init+0x142>
 8009004:	4862      	ldr	r0, [pc, #392]	; (8009190 <HAL_ADC_Init+0x2bc>)
 8009006:	f7ff ff2b 	bl	8008e60 <LL_ADC_IsEnabled>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	bf0c      	ite	eq
 8009010:	2301      	moveq	r3, #1
 8009012:	2300      	movne	r3, #0
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d012      	beq.n	8009040 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a5a      	ldr	r2, [pc, #360]	; (8009188 <HAL_ADC_Init+0x2b4>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d004      	beq.n	800902e <HAL_ADC_Init+0x15a>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a58      	ldr	r2, [pc, #352]	; (800918c <HAL_ADC_Init+0x2b8>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d101      	bne.n	8009032 <HAL_ADC_Init+0x15e>
 800902e:	4a59      	ldr	r2, [pc, #356]	; (8009194 <HAL_ADC_Init+0x2c0>)
 8009030:	e000      	b.n	8009034 <HAL_ADC_Init+0x160>
 8009032:	4a59      	ldr	r2, [pc, #356]	; (8009198 <HAL_ADC_Init+0x2c4>)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f7ff fd04 	bl	8008a48 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a52      	ldr	r2, [pc, #328]	; (8009190 <HAL_ADC_Init+0x2bc>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d129      	bne.n	800909e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	7e5b      	ldrb	r3, [r3, #25]
 800904e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009054:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800905a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	2b08      	cmp	r3, #8
 8009062:	d013      	beq.n	800908c <HAL_ADC_Init+0x1b8>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	2b0c      	cmp	r3, #12
 800906a:	d00d      	beq.n	8009088 <HAL_ADC_Init+0x1b4>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	2b1c      	cmp	r3, #28
 8009072:	d007      	beq.n	8009084 <HAL_ADC_Init+0x1b0>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	2b18      	cmp	r3, #24
 800907a:	d101      	bne.n	8009080 <HAL_ADC_Init+0x1ac>
 800907c:	2318      	movs	r3, #24
 800907e:	e006      	b.n	800908e <HAL_ADC_Init+0x1ba>
 8009080:	2300      	movs	r3, #0
 8009082:	e004      	b.n	800908e <HAL_ADC_Init+0x1ba>
 8009084:	2310      	movs	r3, #16
 8009086:	e002      	b.n	800908e <HAL_ADC_Init+0x1ba>
 8009088:	2308      	movs	r3, #8
 800908a:	e000      	b.n	800908e <HAL_ADC_Init+0x1ba>
 800908c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800908e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009096:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009098:	4313      	orrs	r3, r2
 800909a:	61bb      	str	r3, [r7, #24]
 800909c:	e00e      	b.n	80090bc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	7e5b      	ldrb	r3, [r3, #25]
 80090a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80090a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80090ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80090b8:	4313      	orrs	r3, r2
 80090ba:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d106      	bne.n	80090d4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	3b01      	subs	r3, #1
 80090cc:	045b      	lsls	r3, r3, #17
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d009      	beq.n	80090f0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a26      	ldr	r2, [pc, #152]	; (8009190 <HAL_ADC_Init+0x2bc>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d115      	bne.n	8009126 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	4b26      	ldr	r3, [pc, #152]	; (800919c <HAL_ADC_Init+0x2c8>)
 8009102:	4013      	ands	r3, r2
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6812      	ldr	r2, [r2, #0]
 8009108:	69b9      	ldr	r1, [r7, #24]
 800910a:	430b      	orrs	r3, r1
 800910c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	611a      	str	r2, [r3, #16]
 8009124:	e009      	b.n	800913a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68da      	ldr	r2, [r3, #12]
 800912c:	4b1c      	ldr	r3, [pc, #112]	; (80091a0 <HAL_ADC_Init+0x2cc>)
 800912e:	4013      	ands	r3, r2
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6812      	ldr	r2, [r2, #0]
 8009134:	69b9      	ldr	r1, [r7, #24]
 8009136:	430b      	orrs	r3, r1
 8009138:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fea1 	bl	8008e86 <LL_ADC_REG_IsConversionOngoing>
 8009144:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff feae 	bl	8008eac <LL_ADC_INJ_IsConversionOngoing>
 8009150:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	f040 808e 	bne.w	8009276 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	f040 808a 	bne.w	8009276 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a0a      	ldr	r2, [pc, #40]	; (8009190 <HAL_ADC_Init+0x2bc>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d11b      	bne.n	80091a4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7e1b      	ldrb	r3, [r3, #24]
 8009170:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009178:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800917a:	4313      	orrs	r3, r2
 800917c:	61bb      	str	r3, [r7, #24]
 800917e:	e018      	b.n	80091b2 <HAL_ADC_Init+0x2de>
 8009180:	24000014 	.word	0x24000014
 8009184:	053e2d63 	.word	0x053e2d63
 8009188:	40022000 	.word	0x40022000
 800918c:	40022100 	.word	0x40022100
 8009190:	58026000 	.word	0x58026000
 8009194:	40022300 	.word	0x40022300
 8009198:	58026300 	.word	0x58026300
 800919c:	fff04007 	.word	0xfff04007
 80091a0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	7e1b      	ldrb	r3, [r3, #24]
 80091a8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80091ae:	4313      	orrs	r3, r2
 80091b0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68da      	ldr	r2, [r3, #12]
 80091b8:	4b46      	ldr	r3, [pc, #280]	; (80092d4 <HAL_ADC_Init+0x400>)
 80091ba:	4013      	ands	r3, r2
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	6812      	ldr	r2, [r2, #0]
 80091c0:	69b9      	ldr	r1, [r7, #24]
 80091c2:	430b      	orrs	r3, r1
 80091c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d137      	bne.n	8009240 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a3f      	ldr	r2, [pc, #252]	; (80092d8 <HAL_ADC_Init+0x404>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d116      	bne.n	800920e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	691a      	ldr	r2, [r3, #16]
 80091e6:	4b3d      	ldr	r3, [pc, #244]	; (80092dc <HAL_ADC_Init+0x408>)
 80091e8:	4013      	ands	r3, r2
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80091f2:	4311      	orrs	r1, r2
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80091f8:	4311      	orrs	r1, r2
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80091fe:	430a      	orrs	r2, r1
 8009200:	431a      	orrs	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	611a      	str	r2, [r3, #16]
 800920c:	e020      	b.n	8009250 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	691a      	ldr	r2, [r3, #16]
 8009214:	4b32      	ldr	r3, [pc, #200]	; (80092e0 <HAL_ADC_Init+0x40c>)
 8009216:	4013      	ands	r3, r2
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800921c:	3a01      	subs	r2, #1
 800921e:	0411      	lsls	r1, r2, #16
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009224:	4311      	orrs	r1, r2
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800922a:	4311      	orrs	r1, r2
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009230:	430a      	orrs	r2, r1
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f042 0201 	orr.w	r2, r2, #1
 800923c:	611a      	str	r2, [r3, #16]
 800923e:	e007      	b.n	8009250 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	691a      	ldr	r2, [r3, #16]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0201 	bic.w	r2, r2, #1
 800924e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	430a      	orrs	r2, r1
 8009264:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a1b      	ldr	r2, [pc, #108]	; (80092d8 <HAL_ADC_Init+0x404>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d002      	beq.n	8009276 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fd63 	bl	8009d3c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d10c      	bne.n	8009298 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009284:	f023 010f 	bic.w	r1, r3, #15
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	1e5a      	subs	r2, r3, #1
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	631a      	str	r2, [r3, #48]	; 0x30
 8009296:	e007      	b.n	80092a8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 020f 	bic.w	r2, r2, #15
 80092a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ac:	f023 0303 	bic.w	r3, r3, #3
 80092b0:	f043 0201 	orr.w	r2, r3, #1
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	661a      	str	r2, [r3, #96]	; 0x60
 80092b8:	e007      	b.n	80092ca <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092be:	f043 0210 	orr.w	r2, r3, #16
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80092ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3724      	adds	r7, #36	; 0x24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd90      	pop	{r4, r7, pc}
 80092d4:	ffffbffc 	.word	0xffffbffc
 80092d8:	58026000 	.word	0x58026000
 80092dc:	fc00f81f 	.word	0xfc00f81f
 80092e0:	fc00f81e 	.word	0xfc00f81e

080092e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80092e4:	b590      	push	{r4, r7, lr}
 80092e6:	b0b9      	sub	sp, #228	; 0xe4
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092fe:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	4ab3      	ldr	r2, [pc, #716]	; (80095d4 <HAL_ADC_ConfigChannel+0x2f0>)
 8009306:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800930e:	2b01      	cmp	r3, #1
 8009310:	d102      	bne.n	8009318 <HAL_ADC_ConfigChannel+0x34>
 8009312:	2302      	movs	r3, #2
 8009314:	f000 bcfa 	b.w	8009d0c <HAL_ADC_ConfigChannel+0xa28>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4618      	mov	r0, r3
 8009326:	f7ff fdae 	bl	8008e86 <LL_ADC_REG_IsConversionOngoing>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	f040 84de 	bne.w	8009cee <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4aa8      	ldr	r2, [pc, #672]	; (80095d8 <HAL_ADC_ConfigChannel+0x2f4>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d033      	beq.n	80093a4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009344:	2b00      	cmp	r3, #0
 8009346:	d108      	bne.n	800935a <HAL_ADC_ConfigChannel+0x76>
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	0e9b      	lsrs	r3, r3, #26
 800934e:	f003 031f 	and.w	r3, r3, #31
 8009352:	2201      	movs	r2, #1
 8009354:	fa02 f303 	lsl.w	r3, r2, r3
 8009358:	e01d      	b.n	8009396 <HAL_ADC_ConfigChannel+0xb2>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009366:	fa93 f3a3 	rbit	r3, r3
 800936a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800936e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800937e:	2320      	movs	r3, #32
 8009380:	e004      	b.n	800938c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8009382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009386:	fab3 f383 	clz	r3, r3
 800938a:	b2db      	uxtb	r3, r3
 800938c:	f003 031f 	and.w	r3, r3, #31
 8009390:	2201      	movs	r2, #1
 8009392:	fa02 f303 	lsl.w	r3, r2, r3
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6812      	ldr	r2, [r2, #0]
 800939a:	69d1      	ldr	r1, [r2, #28]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	6812      	ldr	r2, [r2, #0]
 80093a0:	430b      	orrs	r3, r1
 80093a2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	6859      	ldr	r1, [r3, #4]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	f7ff fc6f 	bl	8008c94 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7ff fd63 	bl	8008e86 <LL_ADC_REG_IsConversionOngoing>
 80093c0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff fd6f 	bl	8008eac <LL_ADC_INJ_IsConversionOngoing>
 80093ce:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80093d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f040 8270 	bne.w	80098bc <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80093dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f040 826b 	bne.w	80098bc <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	6819      	ldr	r1, [r3, #0]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	461a      	mov	r2, r3
 80093f4:	f7ff fc7a 	bl	8008cec <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a76      	ldr	r2, [pc, #472]	; (80095d8 <HAL_ADC_ConfigChannel+0x2f4>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d10d      	bne.n	800941e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	695a      	ldr	r2, [r3, #20]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	08db      	lsrs	r3, r3, #3
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	fa02 f303 	lsl.w	r3, r2, r3
 8009418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800941c:	e032      	b.n	8009484 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800941e:	4b6f      	ldr	r3, [pc, #444]	; (80095dc <HAL_ADC_ConfigChannel+0x2f8>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800942a:	d10b      	bne.n	8009444 <HAL_ADC_ConfigChannel+0x160>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	695a      	ldr	r2, [r3, #20]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	089b      	lsrs	r3, r3, #2
 8009438:	f003 0307 	and.w	r3, r3, #7
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	fa02 f303 	lsl.w	r3, r2, r3
 8009442:	e01d      	b.n	8009480 <HAL_ADC_ConfigChannel+0x19c>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f003 0310 	and.w	r3, r3, #16
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10b      	bne.n	800946a <HAL_ADC_ConfigChannel+0x186>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	695a      	ldr	r2, [r3, #20]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	089b      	lsrs	r3, r3, #2
 800945e:	f003 0307 	and.w	r3, r3, #7
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	fa02 f303 	lsl.w	r3, r2, r3
 8009468:	e00a      	b.n	8009480 <HAL_ADC_ConfigChannel+0x19c>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	695a      	ldr	r2, [r3, #20]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	089b      	lsrs	r3, r3, #2
 8009476:	f003 0304 	and.w	r3, r3, #4
 800947a:	005b      	lsls	r3, r3, #1
 800947c:	fa02 f303 	lsl.w	r3, r2, r3
 8009480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b04      	cmp	r3, #4
 800948a:	d048      	beq.n	800951e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	6919      	ldr	r1, [r3, #16]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800949c:	f7ff fb08 	bl	8008ab0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a4c      	ldr	r2, [pc, #304]	; (80095d8 <HAL_ADC_ConfigChannel+0x2f4>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d119      	bne.n	80094de <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	6919      	ldr	r1, [r3, #16]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	461a      	mov	r2, r3
 80094b8:	f7ff fba0 	bl	8008bfc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6818      	ldr	r0, [r3, #0]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	6919      	ldr	r1, [r3, #16]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d102      	bne.n	80094d4 <HAL_ADC_ConfigChannel+0x1f0>
 80094ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094d2:	e000      	b.n	80094d6 <HAL_ADC_ConfigChannel+0x1f2>
 80094d4:	2300      	movs	r3, #0
 80094d6:	461a      	mov	r2, r3
 80094d8:	f7ff fb6e 	bl	8008bb8 <LL_ADC_SetOffsetSaturation>
 80094dc:	e1ee      	b.n	80098bc <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	6919      	ldr	r1, [r3, #16]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d102      	bne.n	80094f6 <HAL_ADC_ConfigChannel+0x212>
 80094f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094f4:	e000      	b.n	80094f8 <HAL_ADC_ConfigChannel+0x214>
 80094f6:	2300      	movs	r3, #0
 80094f8:	461a      	mov	r2, r3
 80094fa:	f7ff fb3b 	bl	8008b74 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	6919      	ldr	r1, [r3, #16]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	7e1b      	ldrb	r3, [r3, #24]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d102      	bne.n	8009514 <HAL_ADC_ConfigChannel+0x230>
 800950e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009512:	e000      	b.n	8009516 <HAL_ADC_ConfigChannel+0x232>
 8009514:	2300      	movs	r3, #0
 8009516:	461a      	mov	r2, r3
 8009518:	f7ff fb12 	bl	8008b40 <LL_ADC_SetDataRightShift>
 800951c:	e1ce      	b.n	80098bc <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a2d      	ldr	r2, [pc, #180]	; (80095d8 <HAL_ADC_ConfigChannel+0x2f4>)
 8009524:	4293      	cmp	r3, r2
 8009526:	f040 8181 	bne.w	800982c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2100      	movs	r1, #0
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff faef 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 8009536:	4603      	mov	r3, r0
 8009538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <HAL_ADC_ConfigChannel+0x272>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2100      	movs	r1, #0
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff fae4 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 800954c:	4603      	mov	r3, r0
 800954e:	0e9b      	lsrs	r3, r3, #26
 8009550:	f003 021f 	and.w	r2, r3, #31
 8009554:	e01e      	b.n	8009594 <HAL_ADC_ConfigChannel+0x2b0>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2100      	movs	r1, #0
 800955c:	4618      	mov	r0, r3
 800955e:	f7ff fad9 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 8009562:	4603      	mov	r3, r0
 8009564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009568:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800956c:	fa93 f3a3 	rbit	r3, r3
 8009570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8009574:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009578:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800957c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8009584:	2320      	movs	r3, #32
 8009586:	e004      	b.n	8009592 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8009588:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800958c:	fab3 f383 	clz	r3, r3
 8009590:	b2db      	uxtb	r3, r3
 8009592:	461a      	mov	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800959c:	2b00      	cmp	r3, #0
 800959e:	d105      	bne.n	80095ac <HAL_ADC_ConfigChannel+0x2c8>
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	0e9b      	lsrs	r3, r3, #26
 80095a6:	f003 031f 	and.w	r3, r3, #31
 80095aa:	e01e      	b.n	80095ea <HAL_ADC_ConfigChannel+0x306>
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095b8:	fa93 f3a3 	rbit	r3, r3
 80095bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80095c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80095c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d107      	bne.n	80095e0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80095d0:	2320      	movs	r3, #32
 80095d2:	e00a      	b.n	80095ea <HAL_ADC_ConfigChannel+0x306>
 80095d4:	47ff0000 	.word	0x47ff0000
 80095d8:	58026000 	.word	0x58026000
 80095dc:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 80095e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80095e4:	fab3 f383 	clz	r3, r3
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d106      	bne.n	80095fc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2200      	movs	r2, #0
 80095f4:	2100      	movs	r1, #0
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7ff fb22 	bl	8008c40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2101      	movs	r1, #1
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff fa86 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 8009608:	4603      	mov	r3, r0
 800960a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10a      	bne.n	8009628 <HAL_ADC_ConfigChannel+0x344>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2101      	movs	r1, #1
 8009618:	4618      	mov	r0, r3
 800961a:	f7ff fa7b 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 800961e:	4603      	mov	r3, r0
 8009620:	0e9b      	lsrs	r3, r3, #26
 8009622:	f003 021f 	and.w	r2, r3, #31
 8009626:	e01e      	b.n	8009666 <HAL_ADC_ConfigChannel+0x382>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2101      	movs	r1, #1
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff fa70 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 8009634:	4603      	mov	r3, r0
 8009636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800963a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800963e:	fa93 f3a3 	rbit	r3, r3
 8009642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8009646:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800964a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800964e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8009656:	2320      	movs	r3, #32
 8009658:	e004      	b.n	8009664 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800965a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800965e:	fab3 f383 	clz	r3, r3
 8009662:	b2db      	uxtb	r3, r3
 8009664:	461a      	mov	r2, r3
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800966e:	2b00      	cmp	r3, #0
 8009670:	d105      	bne.n	800967e <HAL_ADC_ConfigChannel+0x39a>
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	0e9b      	lsrs	r3, r3, #26
 8009678:	f003 031f 	and.w	r3, r3, #31
 800967c:	e018      	b.n	80096b0 <HAL_ADC_ConfigChannel+0x3cc>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009686:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800968a:	fa93 f3a3 	rbit	r3, r3
 800968e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8009692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009696:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800969a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80096a2:	2320      	movs	r3, #32
 80096a4:	e004      	b.n	80096b0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80096a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096aa:	fab3 f383 	clz	r3, r3
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d106      	bne.n	80096c2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2200      	movs	r2, #0
 80096ba:	2101      	movs	r1, #1
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff fabf 	bl	8008c40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2102      	movs	r1, #2
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff fa23 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 80096ce:	4603      	mov	r3, r0
 80096d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10a      	bne.n	80096ee <HAL_ADC_ConfigChannel+0x40a>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2102      	movs	r1, #2
 80096de:	4618      	mov	r0, r3
 80096e0:	f7ff fa18 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 80096e4:	4603      	mov	r3, r0
 80096e6:	0e9b      	lsrs	r3, r3, #26
 80096e8:	f003 021f 	and.w	r2, r3, #31
 80096ec:	e01e      	b.n	800972c <HAL_ADC_ConfigChannel+0x448>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2102      	movs	r1, #2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7ff fa0d 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009704:	fa93 f3a3 	rbit	r3, r3
 8009708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800970c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8009714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800971c:	2320      	movs	r3, #32
 800971e:	e004      	b.n	800972a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8009720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009724:	fab3 f383 	clz	r3, r3
 8009728:	b2db      	uxtb	r3, r3
 800972a:	461a      	mov	r2, r3
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009734:	2b00      	cmp	r3, #0
 8009736:	d105      	bne.n	8009744 <HAL_ADC_ConfigChannel+0x460>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	0e9b      	lsrs	r3, r3, #26
 800973e:	f003 031f 	and.w	r3, r3, #31
 8009742:	e014      	b.n	800976e <HAL_ADC_ConfigChannel+0x48a>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800974a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800974c:	fa93 f3a3 	rbit	r3, r3
 8009750:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8009752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8009758:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8009760:	2320      	movs	r3, #32
 8009762:	e004      	b.n	800976e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8009764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009768:	fab3 f383 	clz	r3, r3
 800976c:	b2db      	uxtb	r3, r3
 800976e:	429a      	cmp	r2, r3
 8009770:	d106      	bne.n	8009780 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2200      	movs	r2, #0
 8009778:	2102      	movs	r1, #2
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fa60 	bl	8008c40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2103      	movs	r1, #3
 8009786:	4618      	mov	r0, r3
 8009788:	f7ff f9c4 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 800978c:	4603      	mov	r3, r0
 800978e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10a      	bne.n	80097ac <HAL_ADC_ConfigChannel+0x4c8>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2103      	movs	r1, #3
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff f9b9 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 80097a2:	4603      	mov	r3, r0
 80097a4:	0e9b      	lsrs	r3, r3, #26
 80097a6:	f003 021f 	and.w	r2, r3, #31
 80097aa:	e017      	b.n	80097dc <HAL_ADC_ConfigChannel+0x4f8>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2103      	movs	r1, #3
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff f9ae 	bl	8008b14 <LL_ADC_GetOffsetChannel>
 80097b8:	4603      	mov	r3, r0
 80097ba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097be:	fa93 f3a3 	rbit	r3, r3
 80097c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80097c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80097c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80097ce:	2320      	movs	r3, #32
 80097d0:	e003      	b.n	80097da <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80097d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097d4:	fab3 f383 	clz	r3, r3
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	461a      	mov	r2, r3
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d105      	bne.n	80097f4 <HAL_ADC_ConfigChannel+0x510>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	0e9b      	lsrs	r3, r3, #26
 80097ee:	f003 031f 	and.w	r3, r3, #31
 80097f2:	e011      	b.n	8009818 <HAL_ADC_ConfigChannel+0x534>
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097fc:	fa93 f3a3 	rbit	r3, r3
 8009800:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8009802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009804:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8009806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800980c:	2320      	movs	r3, #32
 800980e:	e003      	b.n	8009818 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8009810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009812:	fab3 f383 	clz	r3, r3
 8009816:	b2db      	uxtb	r3, r3
 8009818:	429a      	cmp	r2, r3
 800981a:	d14f      	bne.n	80098bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2200      	movs	r2, #0
 8009822:	2103      	movs	r1, #3
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff fa0b 	bl	8008c40 <LL_ADC_SetOffsetState>
 800982a:	e047      	b.n	80098bc <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009832:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	069b      	lsls	r3, r3, #26
 800983c:	429a      	cmp	r2, r3
 800983e:	d107      	bne.n	8009850 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800984e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009856:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	069b      	lsls	r3, r3, #26
 8009860:	429a      	cmp	r2, r3
 8009862:	d107      	bne.n	8009874 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009872:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800987a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	069b      	lsls	r3, r3, #26
 8009884:	429a      	cmp	r2, r3
 8009886:	d107      	bne.n	8009898 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009896:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800989e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	069b      	lsls	r3, r3, #26
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d107      	bne.n	80098bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80098ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff facd 	bl	8008e60 <LL_ADC_IsEnabled>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f040 8219 	bne.w	8009d00 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6818      	ldr	r0, [r3, #0]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	6819      	ldr	r1, [r3, #0]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	461a      	mov	r2, r3
 80098dc:	f7ff fa32 	bl	8008d44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	4aa1      	ldr	r2, [pc, #644]	; (8009b6c <HAL_ADC_ConfigChannel+0x888>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	f040 812e 	bne.w	8009b48 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10b      	bne.n	8009914 <HAL_ADC_ConfigChannel+0x630>
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	0e9b      	lsrs	r3, r3, #26
 8009902:	3301      	adds	r3, #1
 8009904:	f003 031f 	and.w	r3, r3, #31
 8009908:	2b09      	cmp	r3, #9
 800990a:	bf94      	ite	ls
 800990c:	2301      	movls	r3, #1
 800990e:	2300      	movhi	r3, #0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	e019      	b.n	8009948 <HAL_ADC_ConfigChannel+0x664>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800991a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800991c:	fa93 f3a3 	rbit	r3, r3
 8009920:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009924:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8009926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800992c:	2320      	movs	r3, #32
 800992e:	e003      	b.n	8009938 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8009930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009932:	fab3 f383 	clz	r3, r3
 8009936:	b2db      	uxtb	r3, r3
 8009938:	3301      	adds	r3, #1
 800993a:	f003 031f 	and.w	r3, r3, #31
 800993e:	2b09      	cmp	r3, #9
 8009940:	bf94      	ite	ls
 8009942:	2301      	movls	r3, #1
 8009944:	2300      	movhi	r3, #0
 8009946:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009948:	2b00      	cmp	r3, #0
 800994a:	d079      	beq.n	8009a40 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009954:	2b00      	cmp	r3, #0
 8009956:	d107      	bne.n	8009968 <HAL_ADC_ConfigChannel+0x684>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	0e9b      	lsrs	r3, r3, #26
 800995e:	3301      	adds	r3, #1
 8009960:	069b      	lsls	r3, r3, #26
 8009962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009966:	e015      	b.n	8009994 <HAL_ADC_ConfigChannel+0x6b0>
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800996e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009970:	fa93 f3a3 	rbit	r3, r3
 8009974:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8009976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009978:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800997a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8009980:	2320      	movs	r3, #32
 8009982:	e003      	b.n	800998c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8009984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009986:	fab3 f383 	clz	r3, r3
 800998a:	b2db      	uxtb	r3, r3
 800998c:	3301      	adds	r3, #1
 800998e:	069b      	lsls	r3, r3, #26
 8009990:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800999c:	2b00      	cmp	r3, #0
 800999e:	d109      	bne.n	80099b4 <HAL_ADC_ConfigChannel+0x6d0>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	0e9b      	lsrs	r3, r3, #26
 80099a6:	3301      	adds	r3, #1
 80099a8:	f003 031f 	and.w	r3, r3, #31
 80099ac:	2101      	movs	r1, #1
 80099ae:	fa01 f303 	lsl.w	r3, r1, r3
 80099b2:	e017      	b.n	80099e4 <HAL_ADC_ConfigChannel+0x700>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099bc:	fa93 f3a3 	rbit	r3, r3
 80099c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80099c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80099c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80099cc:	2320      	movs	r3, #32
 80099ce:	e003      	b.n	80099d8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80099d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099d2:	fab3 f383 	clz	r3, r3
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	3301      	adds	r3, #1
 80099da:	f003 031f 	and.w	r3, r3, #31
 80099de:	2101      	movs	r1, #1
 80099e0:	fa01 f303 	lsl.w	r3, r1, r3
 80099e4:	ea42 0103 	orr.w	r1, r2, r3
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10a      	bne.n	8009a0a <HAL_ADC_ConfigChannel+0x726>
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	0e9b      	lsrs	r3, r3, #26
 80099fa:	3301      	adds	r3, #1
 80099fc:	f003 021f 	and.w	r2, r3, #31
 8009a00:	4613      	mov	r3, r2
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	4413      	add	r3, r2
 8009a06:	051b      	lsls	r3, r3, #20
 8009a08:	e018      	b.n	8009a3c <HAL_ADC_ConfigChannel+0x758>
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a12:	fa93 f3a3 	rbit	r3, r3
 8009a16:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8009a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8009a22:	2320      	movs	r3, #32
 8009a24:	e003      	b.n	8009a2e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8009a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a28:	fab3 f383 	clz	r3, r3
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	3301      	adds	r3, #1
 8009a30:	f003 021f 	and.w	r2, r3, #31
 8009a34:	4613      	mov	r3, r2
 8009a36:	005b      	lsls	r3, r3, #1
 8009a38:	4413      	add	r3, r2
 8009a3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009a3c:	430b      	orrs	r3, r1
 8009a3e:	e07e      	b.n	8009b3e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d107      	bne.n	8009a5c <HAL_ADC_ConfigChannel+0x778>
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	0e9b      	lsrs	r3, r3, #26
 8009a52:	3301      	adds	r3, #1
 8009a54:	069b      	lsls	r3, r3, #26
 8009a56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009a5a:	e015      	b.n	8009a88 <HAL_ADC_ConfigChannel+0x7a4>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a64:	fa93 f3a3 	rbit	r3, r3
 8009a68:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8009a74:	2320      	movs	r3, #32
 8009a76:	e003      	b.n	8009a80 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	fab3 f383 	clz	r3, r3
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	3301      	adds	r3, #1
 8009a82:	069b      	lsls	r3, r3, #26
 8009a84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d109      	bne.n	8009aa8 <HAL_ADC_ConfigChannel+0x7c4>
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	0e9b      	lsrs	r3, r3, #26
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	f003 031f 	and.w	r3, r3, #31
 8009aa0:	2101      	movs	r1, #1
 8009aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa6:	e017      	b.n	8009ad8 <HAL_ADC_ConfigChannel+0x7f4>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	fa93 f3a3 	rbit	r3, r3
 8009ab4:	61bb      	str	r3, [r7, #24]
  return result;
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8009ac0:	2320      	movs	r3, #32
 8009ac2:	e003      	b.n	8009acc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	fab3 f383 	clz	r3, r3
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	3301      	adds	r3, #1
 8009ace:	f003 031f 	and.w	r3, r3, #31
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad8:	ea42 0103 	orr.w	r1, r2, r3
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10d      	bne.n	8009b04 <HAL_ADC_ConfigChannel+0x820>
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	0e9b      	lsrs	r3, r3, #26
 8009aee:	3301      	adds	r3, #1
 8009af0:	f003 021f 	and.w	r2, r3, #31
 8009af4:	4613      	mov	r3, r2
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	4413      	add	r3, r2
 8009afa:	3b1e      	subs	r3, #30
 8009afc:	051b      	lsls	r3, r3, #20
 8009afe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009b02:	e01b      	b.n	8009b3c <HAL_ADC_ConfigChannel+0x858>
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	fa93 f3a3 	rbit	r3, r3
 8009b10:	60fb      	str	r3, [r7, #12]
  return result;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8009b1c:	2320      	movs	r3, #32
 8009b1e:	e003      	b.n	8009b28 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	fab3 f383 	clz	r3, r3
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	3301      	adds	r3, #1
 8009b2a:	f003 021f 	and.w	r2, r3, #31
 8009b2e:	4613      	mov	r3, r2
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	4413      	add	r3, r2
 8009b34:	3b1e      	subs	r3, #30
 8009b36:	051b      	lsls	r3, r3, #20
 8009b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	6892      	ldr	r2, [r2, #8]
 8009b42:	4619      	mov	r1, r3
 8009b44:	f7ff f8d2 	bl	8008cec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f280 80d7 	bge.w	8009d00 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a06      	ldr	r2, [pc, #24]	; (8009b70 <HAL_ADC_ConfigChannel+0x88c>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d004      	beq.n	8009b66 <HAL_ADC_ConfigChannel+0x882>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a04      	ldr	r2, [pc, #16]	; (8009b74 <HAL_ADC_ConfigChannel+0x890>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d10a      	bne.n	8009b7c <HAL_ADC_ConfigChannel+0x898>
 8009b66:	4b04      	ldr	r3, [pc, #16]	; (8009b78 <HAL_ADC_ConfigChannel+0x894>)
 8009b68:	e009      	b.n	8009b7e <HAL_ADC_ConfigChannel+0x89a>
 8009b6a:	bf00      	nop
 8009b6c:	47ff0000 	.word	0x47ff0000
 8009b70:	40022000 	.word	0x40022000
 8009b74:	40022100 	.word	0x40022100
 8009b78:	40022300 	.word	0x40022300
 8009b7c:	4b65      	ldr	r3, [pc, #404]	; (8009d14 <HAL_ADC_ConfigChannel+0xa30>)
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe ff88 	bl	8008a94 <LL_ADC_GetCommonPathInternalCh>
 8009b84:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a62      	ldr	r2, [pc, #392]	; (8009d18 <HAL_ADC_ConfigChannel+0xa34>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d004      	beq.n	8009b9c <HAL_ADC_ConfigChannel+0x8b8>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a61      	ldr	r2, [pc, #388]	; (8009d1c <HAL_ADC_ConfigChannel+0xa38>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d10e      	bne.n	8009bba <HAL_ADC_ConfigChannel+0x8d6>
 8009b9c:	485e      	ldr	r0, [pc, #376]	; (8009d18 <HAL_ADC_ConfigChannel+0xa34>)
 8009b9e:	f7ff f95f 	bl	8008e60 <LL_ADC_IsEnabled>
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	485d      	ldr	r0, [pc, #372]	; (8009d1c <HAL_ADC_ConfigChannel+0xa38>)
 8009ba6:	f7ff f95b 	bl	8008e60 <LL_ADC_IsEnabled>
 8009baa:	4603      	mov	r3, r0
 8009bac:	4323      	orrs	r3, r4
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	bf0c      	ite	eq
 8009bb2:	2301      	moveq	r3, #1
 8009bb4:	2300      	movne	r3, #0
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	e008      	b.n	8009bcc <HAL_ADC_ConfigChannel+0x8e8>
 8009bba:	4859      	ldr	r0, [pc, #356]	; (8009d20 <HAL_ADC_ConfigChannel+0xa3c>)
 8009bbc:	f7ff f950 	bl	8008e60 <LL_ADC_IsEnabled>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bf0c      	ite	eq
 8009bc6:	2301      	moveq	r3, #1
 8009bc8:	2300      	movne	r3, #0
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 8084 	beq.w	8009cda <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a53      	ldr	r2, [pc, #332]	; (8009d24 <HAL_ADC_ConfigChannel+0xa40>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d132      	bne.n	8009c42 <HAL_ADC_ConfigChannel+0x95e>
 8009bdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d12c      	bne.n	8009c42 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a4c      	ldr	r2, [pc, #304]	; (8009d20 <HAL_ADC_ConfigChannel+0xa3c>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	f040 8086 	bne.w	8009d00 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a47      	ldr	r2, [pc, #284]	; (8009d18 <HAL_ADC_ConfigChannel+0xa34>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d004      	beq.n	8009c08 <HAL_ADC_ConfigChannel+0x924>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a46      	ldr	r2, [pc, #280]	; (8009d1c <HAL_ADC_ConfigChannel+0xa38>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d101      	bne.n	8009c0c <HAL_ADC_ConfigChannel+0x928>
 8009c08:	4a47      	ldr	r2, [pc, #284]	; (8009d28 <HAL_ADC_ConfigChannel+0xa44>)
 8009c0a:	e000      	b.n	8009c0e <HAL_ADC_ConfigChannel+0x92a>
 8009c0c:	4a41      	ldr	r2, [pc, #260]	; (8009d14 <HAL_ADC_ConfigChannel+0xa30>)
 8009c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c16:	4619      	mov	r1, r3
 8009c18:	4610      	mov	r0, r2
 8009c1a:	f7fe ff28 	bl	8008a6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009c1e:	4b43      	ldr	r3, [pc, #268]	; (8009d2c <HAL_ADC_ConfigChannel+0xa48>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	099b      	lsrs	r3, r3, #6
 8009c24:	4a42      	ldr	r2, [pc, #264]	; (8009d30 <HAL_ADC_ConfigChannel+0xa4c>)
 8009c26:	fba2 2303 	umull	r2, r3, r2, r3
 8009c2a:	099b      	lsrs	r3, r3, #6
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8009c32:	e002      	b.n	8009c3a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1f9      	bne.n	8009c34 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009c40:	e05e      	b.n	8009d00 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a3b      	ldr	r2, [pc, #236]	; (8009d34 <HAL_ADC_ConfigChannel+0xa50>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d120      	bne.n	8009c8e <HAL_ADC_ConfigChannel+0x9aa>
 8009c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11a      	bne.n	8009c8e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a30      	ldr	r2, [pc, #192]	; (8009d20 <HAL_ADC_ConfigChannel+0xa3c>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d14e      	bne.n	8009d00 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a2c      	ldr	r2, [pc, #176]	; (8009d18 <HAL_ADC_ConfigChannel+0xa34>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d004      	beq.n	8009c76 <HAL_ADC_ConfigChannel+0x992>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a2a      	ldr	r2, [pc, #168]	; (8009d1c <HAL_ADC_ConfigChannel+0xa38>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d101      	bne.n	8009c7a <HAL_ADC_ConfigChannel+0x996>
 8009c76:	4a2c      	ldr	r2, [pc, #176]	; (8009d28 <HAL_ADC_ConfigChannel+0xa44>)
 8009c78:	e000      	b.n	8009c7c <HAL_ADC_ConfigChannel+0x998>
 8009c7a:	4a26      	ldr	r2, [pc, #152]	; (8009d14 <HAL_ADC_ConfigChannel+0xa30>)
 8009c7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c84:	4619      	mov	r1, r3
 8009c86:	4610      	mov	r0, r2
 8009c88:	f7fe fef1 	bl	8008a6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009c8c:	e038      	b.n	8009d00 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a29      	ldr	r2, [pc, #164]	; (8009d38 <HAL_ADC_ConfigChannel+0xa54>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d133      	bne.n	8009d00 <HAL_ADC_ConfigChannel+0xa1c>
 8009c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d12d      	bne.n	8009d00 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a1d      	ldr	r2, [pc, #116]	; (8009d20 <HAL_ADC_ConfigChannel+0xa3c>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d128      	bne.n	8009d00 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a19      	ldr	r2, [pc, #100]	; (8009d18 <HAL_ADC_ConfigChannel+0xa34>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d004      	beq.n	8009cc2 <HAL_ADC_ConfigChannel+0x9de>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a17      	ldr	r2, [pc, #92]	; (8009d1c <HAL_ADC_ConfigChannel+0xa38>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d101      	bne.n	8009cc6 <HAL_ADC_ConfigChannel+0x9e2>
 8009cc2:	4a19      	ldr	r2, [pc, #100]	; (8009d28 <HAL_ADC_ConfigChannel+0xa44>)
 8009cc4:	e000      	b.n	8009cc8 <HAL_ADC_ConfigChannel+0x9e4>
 8009cc6:	4a13      	ldr	r2, [pc, #76]	; (8009d14 <HAL_ADC_ConfigChannel+0xa30>)
 8009cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ccc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f7fe fecb 	bl	8008a6e <LL_ADC_SetCommonPathInternalCh>
 8009cd8:	e012      	b.n	8009d00 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cde:	f043 0220 	orr.w	r2, r3, #32
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8009cec:	e008      	b.n	8009d00 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cf2:	f043 0220 	orr.w	r2, r3, #32
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8009d08:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	37e4      	adds	r7, #228	; 0xe4
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd90      	pop	{r4, r7, pc}
 8009d14:	58026300 	.word	0x58026300
 8009d18:	40022000 	.word	0x40022000
 8009d1c:	40022100 	.word	0x40022100
 8009d20:	58026000 	.word	0x58026000
 8009d24:	c7520000 	.word	0xc7520000
 8009d28:	40022300 	.word	0x40022300
 8009d2c:	24000014 	.word	0x24000014
 8009d30:	053e2d63 	.word	0x053e2d63
 8009d34:	c3210000 	.word	0xc3210000
 8009d38:	cb840000 	.word	0xcb840000

08009d3c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a6b      	ldr	r2, [pc, #428]	; (8009ef8 <ADC_ConfigureBoostMode+0x1bc>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d004      	beq.n	8009d58 <ADC_ConfigureBoostMode+0x1c>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a6a      	ldr	r2, [pc, #424]	; (8009efc <ADC_ConfigureBoostMode+0x1c0>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d109      	bne.n	8009d6c <ADC_ConfigureBoostMode+0x30>
 8009d58:	4b69      	ldr	r3, [pc, #420]	; (8009f00 <ADC_ConfigureBoostMode+0x1c4>)
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bf14      	ite	ne
 8009d64:	2301      	movne	r3, #1
 8009d66:	2300      	moveq	r3, #0
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	e008      	b.n	8009d7e <ADC_ConfigureBoostMode+0x42>
 8009d6c:	4b65      	ldr	r3, [pc, #404]	; (8009f04 <ADC_ConfigureBoostMode+0x1c8>)
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	bf14      	ite	ne
 8009d78:	2301      	movne	r3, #1
 8009d7a:	2300      	moveq	r3, #0
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d01c      	beq.n	8009dbc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8009d82:	f002 fa13 	bl	800c1ac <HAL_RCC_GetHCLKFreq>
 8009d86:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d90:	d010      	beq.n	8009db4 <ADC_ConfigureBoostMode+0x78>
 8009d92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d96:	d871      	bhi.n	8009e7c <ADC_ConfigureBoostMode+0x140>
 8009d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d9c:	d002      	beq.n	8009da4 <ADC_ConfigureBoostMode+0x68>
 8009d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009da2:	d16b      	bne.n	8009e7c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	0c1b      	lsrs	r3, r3, #16
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db0:	60fb      	str	r3, [r7, #12]
        break;
 8009db2:	e066      	b.n	8009e82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	089b      	lsrs	r3, r3, #2
 8009db8:	60fb      	str	r3, [r7, #12]
        break;
 8009dba:	e062      	b.n	8009e82 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8009dbc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009dc0:	f003 f966 	bl	800d090 <HAL_RCCEx_GetPeriphCLKFreq>
 8009dc4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8009dce:	d051      	beq.n	8009e74 <ADC_ConfigureBoostMode+0x138>
 8009dd0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8009dd4:	d854      	bhi.n	8009e80 <ADC_ConfigureBoostMode+0x144>
 8009dd6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8009dda:	d047      	beq.n	8009e6c <ADC_ConfigureBoostMode+0x130>
 8009ddc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8009de0:	d84e      	bhi.n	8009e80 <ADC_ConfigureBoostMode+0x144>
 8009de2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8009de6:	d03d      	beq.n	8009e64 <ADC_ConfigureBoostMode+0x128>
 8009de8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8009dec:	d848      	bhi.n	8009e80 <ADC_ConfigureBoostMode+0x144>
 8009dee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009df2:	d033      	beq.n	8009e5c <ADC_ConfigureBoostMode+0x120>
 8009df4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009df8:	d842      	bhi.n	8009e80 <ADC_ConfigureBoostMode+0x144>
 8009dfa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009dfe:	d029      	beq.n	8009e54 <ADC_ConfigureBoostMode+0x118>
 8009e00:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009e04:	d83c      	bhi.n	8009e80 <ADC_ConfigureBoostMode+0x144>
 8009e06:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009e0a:	d01a      	beq.n	8009e42 <ADC_ConfigureBoostMode+0x106>
 8009e0c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009e10:	d836      	bhi.n	8009e80 <ADC_ConfigureBoostMode+0x144>
 8009e12:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009e16:	d014      	beq.n	8009e42 <ADC_ConfigureBoostMode+0x106>
 8009e18:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009e1c:	d830      	bhi.n	8009e80 <ADC_ConfigureBoostMode+0x144>
 8009e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e22:	d00e      	beq.n	8009e42 <ADC_ConfigureBoostMode+0x106>
 8009e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e28:	d82a      	bhi.n	8009e80 <ADC_ConfigureBoostMode+0x144>
 8009e2a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009e2e:	d008      	beq.n	8009e42 <ADC_ConfigureBoostMode+0x106>
 8009e30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009e34:	d824      	bhi.n	8009e80 <ADC_ConfigureBoostMode+0x144>
 8009e36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e3a:	d002      	beq.n	8009e42 <ADC_ConfigureBoostMode+0x106>
 8009e3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009e40:	d11e      	bne.n	8009e80 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	0c9b      	lsrs	r3, r3, #18
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e50:	60fb      	str	r3, [r7, #12]
        break;
 8009e52:	e016      	b.n	8009e82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	091b      	lsrs	r3, r3, #4
 8009e58:	60fb      	str	r3, [r7, #12]
        break;
 8009e5a:	e012      	b.n	8009e82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	095b      	lsrs	r3, r3, #5
 8009e60:	60fb      	str	r3, [r7, #12]
        break;
 8009e62:	e00e      	b.n	8009e82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	099b      	lsrs	r3, r3, #6
 8009e68:	60fb      	str	r3, [r7, #12]
        break;
 8009e6a:	e00a      	b.n	8009e82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	09db      	lsrs	r3, r3, #7
 8009e70:	60fb      	str	r3, [r7, #12]
        break;
 8009e72:	e006      	b.n	8009e82 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	0a1b      	lsrs	r3, r3, #8
 8009e78:	60fb      	str	r3, [r7, #12]
        break;
 8009e7a:	e002      	b.n	8009e82 <ADC_ConfigureBoostMode+0x146>
        break;
 8009e7c:	bf00      	nop
 8009e7e:	e000      	b.n	8009e82 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8009e80:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	085b      	lsrs	r3, r3, #1
 8009e86:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4a1f      	ldr	r2, [pc, #124]	; (8009f08 <ADC_ConfigureBoostMode+0x1cc>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d808      	bhi.n	8009ea2 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	689a      	ldr	r2, [r3, #8]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009e9e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8009ea0:	e025      	b.n	8009eee <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	4a19      	ldr	r2, [pc, #100]	; (8009f0c <ADC_ConfigureBoostMode+0x1d0>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d80a      	bhi.n	8009ec0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ebc:	609a      	str	r2, [r3, #8]
}
 8009ebe:	e016      	b.n	8009eee <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4a13      	ldr	r2, [pc, #76]	; (8009f10 <ADC_ConfigureBoostMode+0x1d4>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d80a      	bhi.n	8009ede <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eda:	609a      	str	r2, [r3, #8]
}
 8009edc:	e007      	b.n	8009eee <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	689a      	ldr	r2, [r3, #8]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009eec:	609a      	str	r2, [r3, #8]
}
 8009eee:	bf00      	nop
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	40022000 	.word	0x40022000
 8009efc:	40022100 	.word	0x40022100
 8009f00:	40022300 	.word	0x40022300
 8009f04:	58026300 	.word	0x58026300
 8009f08:	005f5e10 	.word	0x005f5e10
 8009f0c:	00bebc20 	.word	0x00bebc20
 8009f10:	017d7840 	.word	0x017d7840

08009f14 <LL_ADC_IsEnabled>:
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d101      	bne.n	8009f2c <LL_ADC_IsEnabled+0x18>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e000      	b.n	8009f2e <LL_ADC_IsEnabled+0x1a>
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <LL_ADC_REG_IsConversionOngoing>:
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d101      	bne.n	8009f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b0a3      	sub	sp, #140	; 0x8c
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d101      	bne.n	8009f7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	e0c1      	b.n	800a102 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8009f86:	2300      	movs	r3, #0
 8009f88:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a5e      	ldr	r2, [pc, #376]	; (800a10c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d102      	bne.n	8009f9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009f98:	4b5d      	ldr	r3, [pc, #372]	; (800a110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	e001      	b.n	8009fa2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10b      	bne.n	8009fc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fac:	f043 0220 	orr.w	r2, r3, #32
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e0a0      	b.n	800a102 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7ff ffb9 	bl	8009f3a <LL_ADC_REG_IsConversionOngoing>
 8009fc8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7ff ffb2 	bl	8009f3a <LL_ADC_REG_IsConversionOngoing>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f040 8081 	bne.w	800a0e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d17c      	bne.n	800a0e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a48      	ldr	r2, [pc, #288]	; (800a10c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d004      	beq.n	8009ffa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a46      	ldr	r2, [pc, #280]	; (800a110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d101      	bne.n	8009ffe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8009ffa:	4b46      	ldr	r3, [pc, #280]	; (800a114 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8009ffc:	e000      	b.n	800a000 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009ffe:	4b46      	ldr	r3, [pc, #280]	; (800a118 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800a000:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d039      	beq.n	800a07e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800a00a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	431a      	orrs	r2, r3
 800a018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a01a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a3a      	ldr	r2, [pc, #232]	; (800a10c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d004      	beq.n	800a030 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a39      	ldr	r2, [pc, #228]	; (800a110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d10e      	bne.n	800a04e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800a030:	4836      	ldr	r0, [pc, #216]	; (800a10c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a032:	f7ff ff6f 	bl	8009f14 <LL_ADC_IsEnabled>
 800a036:	4604      	mov	r4, r0
 800a038:	4835      	ldr	r0, [pc, #212]	; (800a110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a03a:	f7ff ff6b 	bl	8009f14 <LL_ADC_IsEnabled>
 800a03e:	4603      	mov	r3, r0
 800a040:	4323      	orrs	r3, r4
 800a042:	2b00      	cmp	r3, #0
 800a044:	bf0c      	ite	eq
 800a046:	2301      	moveq	r3, #1
 800a048:	2300      	movne	r3, #0
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	e008      	b.n	800a060 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a04e:	4833      	ldr	r0, [pc, #204]	; (800a11c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800a050:	f7ff ff60 	bl	8009f14 <LL_ADC_IsEnabled>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	bf0c      	ite	eq
 800a05a:	2301      	moveq	r3, #1
 800a05c:	2300      	movne	r3, #0
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d047      	beq.n	800a0f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	4b2d      	ldr	r3, [pc, #180]	; (800a120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800a06a:	4013      	ands	r3, r2
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	6811      	ldr	r1, [r2, #0]
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	6892      	ldr	r2, [r2, #8]
 800a074:	430a      	orrs	r2, r1
 800a076:	431a      	orrs	r2, r3
 800a078:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a07a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a07c:	e03a      	b.n	800a0f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800a07e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a086:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a088:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a1f      	ldr	r2, [pc, #124]	; (800a10c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d004      	beq.n	800a09e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a1d      	ldr	r2, [pc, #116]	; (800a110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d10e      	bne.n	800a0bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800a09e:	481b      	ldr	r0, [pc, #108]	; (800a10c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a0a0:	f7ff ff38 	bl	8009f14 <LL_ADC_IsEnabled>
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	481a      	ldr	r0, [pc, #104]	; (800a110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a0a8:	f7ff ff34 	bl	8009f14 <LL_ADC_IsEnabled>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	4323      	orrs	r3, r4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	bf0c      	ite	eq
 800a0b4:	2301      	moveq	r3, #1
 800a0b6:	2300      	movne	r3, #0
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	e008      	b.n	800a0ce <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800a0bc:	4817      	ldr	r0, [pc, #92]	; (800a11c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800a0be:	f7ff ff29 	bl	8009f14 <LL_ADC_IsEnabled>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	bf0c      	ite	eq
 800a0c8:	2301      	moveq	r3, #1
 800a0ca:	2300      	movne	r3, #0
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d010      	beq.n	800a0f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a0d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	4b12      	ldr	r3, [pc, #72]	; (800a120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800a0d8:	4013      	ands	r3, r2
 800a0da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a0dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a0de:	e009      	b.n	800a0f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0e4:	f043 0220 	orr.w	r2, r3, #32
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800a0f2:	e000      	b.n	800a0f6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a0f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800a0fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800a102:	4618      	mov	r0, r3
 800a104:	378c      	adds	r7, #140	; 0x8c
 800a106:	46bd      	mov	sp, r7
 800a108:	bd90      	pop	{r4, r7, pc}
 800a10a:	bf00      	nop
 800a10c:	40022000 	.word	0x40022000
 800a110:	40022100 	.word	0x40022100
 800a114:	40022300 	.word	0x40022300
 800a118:	58026300 	.word	0x58026300
 800a11c:	58026000 	.word	0x58026000
 800a120:	fffff0e0 	.word	0xfffff0e0

0800a124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f003 0307 	and.w	r3, r3, #7
 800a132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a134:	4b0b      	ldr	r3, [pc, #44]	; (800a164 <__NVIC_SetPriorityGrouping+0x40>)
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a140:	4013      	ands	r3, r2
 800a142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a14c:	4b06      	ldr	r3, [pc, #24]	; (800a168 <__NVIC_SetPriorityGrouping+0x44>)
 800a14e:	4313      	orrs	r3, r2
 800a150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a152:	4a04      	ldr	r2, [pc, #16]	; (800a164 <__NVIC_SetPriorityGrouping+0x40>)
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	60d3      	str	r3, [r2, #12]
}
 800a158:	bf00      	nop
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	e000ed00 	.word	0xe000ed00
 800a168:	05fa0000 	.word	0x05fa0000

0800a16c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a170:	4b04      	ldr	r3, [pc, #16]	; (800a184 <__NVIC_GetPriorityGrouping+0x18>)
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	0a1b      	lsrs	r3, r3, #8
 800a176:	f003 0307 	and.w	r3, r3, #7
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	e000ed00 	.word	0xe000ed00

0800a188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a196:	2b00      	cmp	r3, #0
 800a198:	db0b      	blt.n	800a1b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a19a:	88fb      	ldrh	r3, [r7, #6]
 800a19c:	f003 021f 	and.w	r2, r3, #31
 800a1a0:	4907      	ldr	r1, [pc, #28]	; (800a1c0 <__NVIC_EnableIRQ+0x38>)
 800a1a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1a6:	095b      	lsrs	r3, r3, #5
 800a1a8:	2001      	movs	r0, #1
 800a1aa:	fa00 f202 	lsl.w	r2, r0, r2
 800a1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a1b2:	bf00      	nop
 800a1b4:	370c      	adds	r7, #12
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	e000e100 	.word	0xe000e100

0800a1c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	6039      	str	r1, [r7, #0]
 800a1ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a1d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	db0a      	blt.n	800a1ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	490c      	ldr	r1, [pc, #48]	; (800a210 <__NVIC_SetPriority+0x4c>)
 800a1de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1e2:	0112      	lsls	r2, r2, #4
 800a1e4:	b2d2      	uxtb	r2, r2
 800a1e6:	440b      	add	r3, r1
 800a1e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a1ec:	e00a      	b.n	800a204 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	4908      	ldr	r1, [pc, #32]	; (800a214 <__NVIC_SetPriority+0x50>)
 800a1f4:	88fb      	ldrh	r3, [r7, #6]
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	3b04      	subs	r3, #4
 800a1fc:	0112      	lsls	r2, r2, #4
 800a1fe:	b2d2      	uxtb	r2, r2
 800a200:	440b      	add	r3, r1
 800a202:	761a      	strb	r2, [r3, #24]
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	e000e100 	.word	0xe000e100
 800a214:	e000ed00 	.word	0xe000ed00

0800a218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a218:	b480      	push	{r7}
 800a21a:	b089      	sub	sp, #36	; 0x24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	f1c3 0307 	rsb	r3, r3, #7
 800a232:	2b04      	cmp	r3, #4
 800a234:	bf28      	it	cs
 800a236:	2304      	movcs	r3, #4
 800a238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	3304      	adds	r3, #4
 800a23e:	2b06      	cmp	r3, #6
 800a240:	d902      	bls.n	800a248 <NVIC_EncodePriority+0x30>
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	3b03      	subs	r3, #3
 800a246:	e000      	b.n	800a24a <NVIC_EncodePriority+0x32>
 800a248:	2300      	movs	r3, #0
 800a24a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a24c:	f04f 32ff 	mov.w	r2, #4294967295
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	fa02 f303 	lsl.w	r3, r2, r3
 800a256:	43da      	mvns	r2, r3
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	401a      	ands	r2, r3
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a260:	f04f 31ff 	mov.w	r1, #4294967295
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	fa01 f303 	lsl.w	r3, r1, r3
 800a26a:	43d9      	mvns	r1, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a270:	4313      	orrs	r3, r2
         );
}
 800a272:	4618      	mov	r0, r3
 800a274:	3724      	adds	r7, #36	; 0x24
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
	...

0800a280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a290:	d301      	bcc.n	800a296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a292:	2301      	movs	r3, #1
 800a294:	e00f      	b.n	800a2b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a296:	4a0a      	ldr	r2, [pc, #40]	; (800a2c0 <SysTick_Config+0x40>)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a29e:	210f      	movs	r1, #15
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a4:	f7ff ff8e 	bl	800a1c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a2a8:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <SysTick_Config+0x40>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a2ae:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <SysTick_Config+0x40>)
 800a2b0:	2207      	movs	r2, #7
 800a2b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	e000e010 	.word	0xe000e010

0800a2c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff ff29 	bl	800a124 <__NVIC_SetPriorityGrouping>
}
 800a2d2:	bf00      	nop
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b086      	sub	sp, #24
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	607a      	str	r2, [r7, #4]
 800a2e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a2e8:	f7ff ff40 	bl	800a16c <__NVIC_GetPriorityGrouping>
 800a2ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	68b9      	ldr	r1, [r7, #8]
 800a2f2:	6978      	ldr	r0, [r7, #20]
 800a2f4:	f7ff ff90 	bl	800a218 <NVIC_EncodePriority>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a2fe:	4611      	mov	r1, r2
 800a300:	4618      	mov	r0, r3
 800a302:	f7ff ff5f 	bl	800a1c4 <__NVIC_SetPriority>
}
 800a306:	bf00      	nop
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	4603      	mov	r3, r0
 800a316:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7ff ff33 	bl	800a188 <__NVIC_EnableIRQ>
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b082      	sub	sp, #8
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff ffa4 	bl	800a280 <SysTick_Config>
 800a338:	4603      	mov	r3, r0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e054      	b.n	800a400 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	7f5b      	ldrb	r3, [r3, #29]
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d105      	bne.n	800a36c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7f6 fd08 	bl	8000d7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	791b      	ldrb	r3, [r3, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10c      	bne.n	800a394 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a22      	ldr	r2, [pc, #136]	; (800a408 <HAL_CRC_Init+0xc4>)
 800a380:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689a      	ldr	r2, [r3, #8]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f022 0218 	bic.w	r2, r2, #24
 800a390:	609a      	str	r2, [r3, #8]
 800a392:	e00c      	b.n	800a3ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6899      	ldr	r1, [r3, #8]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	461a      	mov	r2, r3
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f834 	bl	800a40c <HAL_CRCEx_Polynomial_Set>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e028      	b.n	800a400 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	795b      	ldrb	r3, [r3, #5]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d105      	bne.n	800a3c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a3be:	611a      	str	r2, [r3, #16]
 800a3c0:	e004      	b.n	800a3cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6912      	ldr	r2, [r2, #16]
 800a3ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	695a      	ldr	r2, [r3, #20]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	430a      	orrs	r2, r1
 800a3e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	699a      	ldr	r2, [r3, #24]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	04c11db7 	.word	0x04c11db7

0800a40c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a41c:	231f      	movs	r3, #31
 800a41e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a420:	bf00      	nop
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	1e5a      	subs	r2, r3, #1
 800a426:	613a      	str	r2, [r7, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d009      	beq.n	800a440 <HAL_CRCEx_Polynomial_Set+0x34>
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f003 031f 	and.w	r3, r3, #31
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	fa22 f303 	lsr.w	r3, r2, r3
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d0f0      	beq.n	800a422 <HAL_CRCEx_Polynomial_Set+0x16>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b18      	cmp	r3, #24
 800a444:	d846      	bhi.n	800a4d4 <HAL_CRCEx_Polynomial_Set+0xc8>
 800a446:	a201      	add	r2, pc, #4	; (adr r2, 800a44c <HAL_CRCEx_Polynomial_Set+0x40>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a4db 	.word	0x0800a4db
 800a450:	0800a4d5 	.word	0x0800a4d5
 800a454:	0800a4d5 	.word	0x0800a4d5
 800a458:	0800a4d5 	.word	0x0800a4d5
 800a45c:	0800a4d5 	.word	0x0800a4d5
 800a460:	0800a4d5 	.word	0x0800a4d5
 800a464:	0800a4d5 	.word	0x0800a4d5
 800a468:	0800a4d5 	.word	0x0800a4d5
 800a46c:	0800a4c9 	.word	0x0800a4c9
 800a470:	0800a4d5 	.word	0x0800a4d5
 800a474:	0800a4d5 	.word	0x0800a4d5
 800a478:	0800a4d5 	.word	0x0800a4d5
 800a47c:	0800a4d5 	.word	0x0800a4d5
 800a480:	0800a4d5 	.word	0x0800a4d5
 800a484:	0800a4d5 	.word	0x0800a4d5
 800a488:	0800a4d5 	.word	0x0800a4d5
 800a48c:	0800a4bd 	.word	0x0800a4bd
 800a490:	0800a4d5 	.word	0x0800a4d5
 800a494:	0800a4d5 	.word	0x0800a4d5
 800a498:	0800a4d5 	.word	0x0800a4d5
 800a49c:	0800a4d5 	.word	0x0800a4d5
 800a4a0:	0800a4d5 	.word	0x0800a4d5
 800a4a4:	0800a4d5 	.word	0x0800a4d5
 800a4a8:	0800a4d5 	.word	0x0800a4d5
 800a4ac:	0800a4b1 	.word	0x0800a4b1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	2b06      	cmp	r3, #6
 800a4b4:	d913      	bls.n	800a4de <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a4ba:	e010      	b.n	800a4de <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2b07      	cmp	r3, #7
 800a4c0:	d90f      	bls.n	800a4e2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a4c6:	e00c      	b.n	800a4e2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	2b0f      	cmp	r3, #15
 800a4cc:	d90b      	bls.n	800a4e6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a4d2:	e008      	b.n	800a4e6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4d8:	e006      	b.n	800a4e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a4da:	bf00      	nop
 800a4dc:	e004      	b.n	800a4e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a4de:	bf00      	nop
 800a4e0:	e002      	b.n	800a4e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a4e2:	bf00      	nop
 800a4e4:	e000      	b.n	800a4e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a4e6:	bf00      	nop
  }
  if (status == HAL_OK)
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10d      	bne.n	800a50a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	f023 0118 	bic.w	r1, r3, #24
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	430a      	orrs	r2, r1
 800a508:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	371c      	adds	r7, #28
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800a520:	f7fe fa86 	bl	8008a30 <HAL_GetTick>
 800a524:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e2dc      	b.n	800aaea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d008      	beq.n	800a54e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2280      	movs	r2, #128	; 0x80
 800a540:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e2cd      	b.n	800aaea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a76      	ldr	r2, [pc, #472]	; (800a72c <HAL_DMA_Abort+0x214>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d04a      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a74      	ldr	r2, [pc, #464]	; (800a730 <HAL_DMA_Abort+0x218>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d045      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a73      	ldr	r2, [pc, #460]	; (800a734 <HAL_DMA_Abort+0x21c>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d040      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a71      	ldr	r2, [pc, #452]	; (800a738 <HAL_DMA_Abort+0x220>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d03b      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a70      	ldr	r2, [pc, #448]	; (800a73c <HAL_DMA_Abort+0x224>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d036      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a6e      	ldr	r2, [pc, #440]	; (800a740 <HAL_DMA_Abort+0x228>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d031      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a6d      	ldr	r2, [pc, #436]	; (800a744 <HAL_DMA_Abort+0x22c>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d02c      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a6b      	ldr	r2, [pc, #428]	; (800a748 <HAL_DMA_Abort+0x230>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d027      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a6a      	ldr	r2, [pc, #424]	; (800a74c <HAL_DMA_Abort+0x234>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d022      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a68      	ldr	r2, [pc, #416]	; (800a750 <HAL_DMA_Abort+0x238>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d01d      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a67      	ldr	r2, [pc, #412]	; (800a754 <HAL_DMA_Abort+0x23c>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d018      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a65      	ldr	r2, [pc, #404]	; (800a758 <HAL_DMA_Abort+0x240>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d013      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a64      	ldr	r2, [pc, #400]	; (800a75c <HAL_DMA_Abort+0x244>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d00e      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a62      	ldr	r2, [pc, #392]	; (800a760 <HAL_DMA_Abort+0x248>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d009      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a61      	ldr	r2, [pc, #388]	; (800a764 <HAL_DMA_Abort+0x24c>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d004      	beq.n	800a5ee <HAL_DMA_Abort+0xd6>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a5f      	ldr	r2, [pc, #380]	; (800a768 <HAL_DMA_Abort+0x250>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d101      	bne.n	800a5f2 <HAL_DMA_Abort+0xda>
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e000      	b.n	800a5f4 <HAL_DMA_Abort+0xdc>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d013      	beq.n	800a620 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f022 021e 	bic.w	r2, r2, #30
 800a606:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	695a      	ldr	r2, [r3, #20]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a616:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	617b      	str	r3, [r7, #20]
 800a61e:	e00a      	b.n	800a636 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 020e 	bic.w	r2, r2, #14
 800a62e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a3c      	ldr	r2, [pc, #240]	; (800a72c <HAL_DMA_Abort+0x214>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d072      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a3a      	ldr	r2, [pc, #232]	; (800a730 <HAL_DMA_Abort+0x218>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d06d      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a39      	ldr	r2, [pc, #228]	; (800a734 <HAL_DMA_Abort+0x21c>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d068      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a37      	ldr	r2, [pc, #220]	; (800a738 <HAL_DMA_Abort+0x220>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d063      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a36      	ldr	r2, [pc, #216]	; (800a73c <HAL_DMA_Abort+0x224>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d05e      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a34      	ldr	r2, [pc, #208]	; (800a740 <HAL_DMA_Abort+0x228>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d059      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a33      	ldr	r2, [pc, #204]	; (800a744 <HAL_DMA_Abort+0x22c>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d054      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a31      	ldr	r2, [pc, #196]	; (800a748 <HAL_DMA_Abort+0x230>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d04f      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a30      	ldr	r2, [pc, #192]	; (800a74c <HAL_DMA_Abort+0x234>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d04a      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a2e      	ldr	r2, [pc, #184]	; (800a750 <HAL_DMA_Abort+0x238>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d045      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a2d      	ldr	r2, [pc, #180]	; (800a754 <HAL_DMA_Abort+0x23c>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d040      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a2b      	ldr	r2, [pc, #172]	; (800a758 <HAL_DMA_Abort+0x240>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d03b      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a2a      	ldr	r2, [pc, #168]	; (800a75c <HAL_DMA_Abort+0x244>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d036      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a28      	ldr	r2, [pc, #160]	; (800a760 <HAL_DMA_Abort+0x248>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d031      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a27      	ldr	r2, [pc, #156]	; (800a764 <HAL_DMA_Abort+0x24c>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d02c      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a25      	ldr	r2, [pc, #148]	; (800a768 <HAL_DMA_Abort+0x250>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d027      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a24      	ldr	r2, [pc, #144]	; (800a76c <HAL_DMA_Abort+0x254>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d022      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a22      	ldr	r2, [pc, #136]	; (800a770 <HAL_DMA_Abort+0x258>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d01d      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a21      	ldr	r2, [pc, #132]	; (800a774 <HAL_DMA_Abort+0x25c>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d018      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a1f      	ldr	r2, [pc, #124]	; (800a778 <HAL_DMA_Abort+0x260>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d013      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a1e      	ldr	r2, [pc, #120]	; (800a77c <HAL_DMA_Abort+0x264>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d00e      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a1c      	ldr	r2, [pc, #112]	; (800a780 <HAL_DMA_Abort+0x268>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d009      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a1b      	ldr	r2, [pc, #108]	; (800a784 <HAL_DMA_Abort+0x26c>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d004      	beq.n	800a726 <HAL_DMA_Abort+0x20e>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a19      	ldr	r2, [pc, #100]	; (800a788 <HAL_DMA_Abort+0x270>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d132      	bne.n	800a78c <HAL_DMA_Abort+0x274>
 800a726:	2301      	movs	r3, #1
 800a728:	e031      	b.n	800a78e <HAL_DMA_Abort+0x276>
 800a72a:	bf00      	nop
 800a72c:	40020010 	.word	0x40020010
 800a730:	40020028 	.word	0x40020028
 800a734:	40020040 	.word	0x40020040
 800a738:	40020058 	.word	0x40020058
 800a73c:	40020070 	.word	0x40020070
 800a740:	40020088 	.word	0x40020088
 800a744:	400200a0 	.word	0x400200a0
 800a748:	400200b8 	.word	0x400200b8
 800a74c:	40020410 	.word	0x40020410
 800a750:	40020428 	.word	0x40020428
 800a754:	40020440 	.word	0x40020440
 800a758:	40020458 	.word	0x40020458
 800a75c:	40020470 	.word	0x40020470
 800a760:	40020488 	.word	0x40020488
 800a764:	400204a0 	.word	0x400204a0
 800a768:	400204b8 	.word	0x400204b8
 800a76c:	58025408 	.word	0x58025408
 800a770:	5802541c 	.word	0x5802541c
 800a774:	58025430 	.word	0x58025430
 800a778:	58025444 	.word	0x58025444
 800a77c:	58025458 	.word	0x58025458
 800a780:	5802546c 	.word	0x5802546c
 800a784:	58025480 	.word	0x58025480
 800a788:	58025494 	.word	0x58025494
 800a78c:	2300      	movs	r3, #0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d007      	beq.n	800a7a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a79c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a6d      	ldr	r2, [pc, #436]	; (800a95c <HAL_DMA_Abort+0x444>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d04a      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a6b      	ldr	r2, [pc, #428]	; (800a960 <HAL_DMA_Abort+0x448>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d045      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a6a      	ldr	r2, [pc, #424]	; (800a964 <HAL_DMA_Abort+0x44c>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d040      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a68      	ldr	r2, [pc, #416]	; (800a968 <HAL_DMA_Abort+0x450>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d03b      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a67      	ldr	r2, [pc, #412]	; (800a96c <HAL_DMA_Abort+0x454>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d036      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a65      	ldr	r2, [pc, #404]	; (800a970 <HAL_DMA_Abort+0x458>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d031      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a64      	ldr	r2, [pc, #400]	; (800a974 <HAL_DMA_Abort+0x45c>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d02c      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a62      	ldr	r2, [pc, #392]	; (800a978 <HAL_DMA_Abort+0x460>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d027      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a61      	ldr	r2, [pc, #388]	; (800a97c <HAL_DMA_Abort+0x464>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d022      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a5f      	ldr	r2, [pc, #380]	; (800a980 <HAL_DMA_Abort+0x468>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d01d      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a5e      	ldr	r2, [pc, #376]	; (800a984 <HAL_DMA_Abort+0x46c>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d018      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a5c      	ldr	r2, [pc, #368]	; (800a988 <HAL_DMA_Abort+0x470>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d013      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a5b      	ldr	r2, [pc, #364]	; (800a98c <HAL_DMA_Abort+0x474>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d00e      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a59      	ldr	r2, [pc, #356]	; (800a990 <HAL_DMA_Abort+0x478>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d009      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a58      	ldr	r2, [pc, #352]	; (800a994 <HAL_DMA_Abort+0x47c>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d004      	beq.n	800a842 <HAL_DMA_Abort+0x32a>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a56      	ldr	r2, [pc, #344]	; (800a998 <HAL_DMA_Abort+0x480>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d108      	bne.n	800a854 <HAL_DMA_Abort+0x33c>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f022 0201 	bic.w	r2, r2, #1
 800a850:	601a      	str	r2, [r3, #0]
 800a852:	e007      	b.n	800a864 <HAL_DMA_Abort+0x34c>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0201 	bic.w	r2, r2, #1
 800a862:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a864:	e013      	b.n	800a88e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a866:	f7fe f8e3 	bl	8008a30 <HAL_GetTick>
 800a86a:	4602      	mov	r2, r0
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	2b05      	cmp	r3, #5
 800a872:	d90c      	bls.n	800a88e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2220      	movs	r2, #32
 800a878:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2203      	movs	r2, #3
 800a87e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e12d      	b.n	800aaea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0301 	and.w	r3, r3, #1
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1e5      	bne.n	800a866 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a2f      	ldr	r2, [pc, #188]	; (800a95c <HAL_DMA_Abort+0x444>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d04a      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a2d      	ldr	r2, [pc, #180]	; (800a960 <HAL_DMA_Abort+0x448>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d045      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a2c      	ldr	r2, [pc, #176]	; (800a964 <HAL_DMA_Abort+0x44c>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d040      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a2a      	ldr	r2, [pc, #168]	; (800a968 <HAL_DMA_Abort+0x450>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d03b      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a29      	ldr	r2, [pc, #164]	; (800a96c <HAL_DMA_Abort+0x454>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d036      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a27      	ldr	r2, [pc, #156]	; (800a970 <HAL_DMA_Abort+0x458>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d031      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a26      	ldr	r2, [pc, #152]	; (800a974 <HAL_DMA_Abort+0x45c>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d02c      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a24      	ldr	r2, [pc, #144]	; (800a978 <HAL_DMA_Abort+0x460>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d027      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a23      	ldr	r2, [pc, #140]	; (800a97c <HAL_DMA_Abort+0x464>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d022      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a21      	ldr	r2, [pc, #132]	; (800a980 <HAL_DMA_Abort+0x468>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d01d      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a20      	ldr	r2, [pc, #128]	; (800a984 <HAL_DMA_Abort+0x46c>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d018      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a1e      	ldr	r2, [pc, #120]	; (800a988 <HAL_DMA_Abort+0x470>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d013      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a1d      	ldr	r2, [pc, #116]	; (800a98c <HAL_DMA_Abort+0x474>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d00e      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a1b      	ldr	r2, [pc, #108]	; (800a990 <HAL_DMA_Abort+0x478>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d009      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a1a      	ldr	r2, [pc, #104]	; (800a994 <HAL_DMA_Abort+0x47c>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d004      	beq.n	800a93a <HAL_DMA_Abort+0x422>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a18      	ldr	r2, [pc, #96]	; (800a998 <HAL_DMA_Abort+0x480>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d101      	bne.n	800a93e <HAL_DMA_Abort+0x426>
 800a93a:	2301      	movs	r3, #1
 800a93c:	e000      	b.n	800a940 <HAL_DMA_Abort+0x428>
 800a93e:	2300      	movs	r3, #0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d02b      	beq.n	800a99c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a948:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a94e:	f003 031f 	and.w	r3, r3, #31
 800a952:	223f      	movs	r2, #63	; 0x3f
 800a954:	409a      	lsls	r2, r3
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	609a      	str	r2, [r3, #8]
 800a95a:	e02a      	b.n	800a9b2 <HAL_DMA_Abort+0x49a>
 800a95c:	40020010 	.word	0x40020010
 800a960:	40020028 	.word	0x40020028
 800a964:	40020040 	.word	0x40020040
 800a968:	40020058 	.word	0x40020058
 800a96c:	40020070 	.word	0x40020070
 800a970:	40020088 	.word	0x40020088
 800a974:	400200a0 	.word	0x400200a0
 800a978:	400200b8 	.word	0x400200b8
 800a97c:	40020410 	.word	0x40020410
 800a980:	40020428 	.word	0x40020428
 800a984:	40020440 	.word	0x40020440
 800a988:	40020458 	.word	0x40020458
 800a98c:	40020470 	.word	0x40020470
 800a990:	40020488 	.word	0x40020488
 800a994:	400204a0 	.word	0x400204a0
 800a998:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a6:	f003 031f 	and.w	r3, r3, #31
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	409a      	lsls	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a4f      	ldr	r2, [pc, #316]	; (800aaf4 <HAL_DMA_Abort+0x5dc>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d072      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a4d      	ldr	r2, [pc, #308]	; (800aaf8 <HAL_DMA_Abort+0x5e0>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d06d      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a4c      	ldr	r2, [pc, #304]	; (800aafc <HAL_DMA_Abort+0x5e4>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d068      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a4a      	ldr	r2, [pc, #296]	; (800ab00 <HAL_DMA_Abort+0x5e8>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d063      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a49      	ldr	r2, [pc, #292]	; (800ab04 <HAL_DMA_Abort+0x5ec>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d05e      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a47      	ldr	r2, [pc, #284]	; (800ab08 <HAL_DMA_Abort+0x5f0>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d059      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a46      	ldr	r2, [pc, #280]	; (800ab0c <HAL_DMA_Abort+0x5f4>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d054      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a44      	ldr	r2, [pc, #272]	; (800ab10 <HAL_DMA_Abort+0x5f8>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d04f      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a43      	ldr	r2, [pc, #268]	; (800ab14 <HAL_DMA_Abort+0x5fc>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d04a      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a41      	ldr	r2, [pc, #260]	; (800ab18 <HAL_DMA_Abort+0x600>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d045      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a40      	ldr	r2, [pc, #256]	; (800ab1c <HAL_DMA_Abort+0x604>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d040      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a3e      	ldr	r2, [pc, #248]	; (800ab20 <HAL_DMA_Abort+0x608>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d03b      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a3d      	ldr	r2, [pc, #244]	; (800ab24 <HAL_DMA_Abort+0x60c>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d036      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a3b      	ldr	r2, [pc, #236]	; (800ab28 <HAL_DMA_Abort+0x610>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d031      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a3a      	ldr	r2, [pc, #232]	; (800ab2c <HAL_DMA_Abort+0x614>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d02c      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a38      	ldr	r2, [pc, #224]	; (800ab30 <HAL_DMA_Abort+0x618>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d027      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a37      	ldr	r2, [pc, #220]	; (800ab34 <HAL_DMA_Abort+0x61c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d022      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a35      	ldr	r2, [pc, #212]	; (800ab38 <HAL_DMA_Abort+0x620>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d01d      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a34      	ldr	r2, [pc, #208]	; (800ab3c <HAL_DMA_Abort+0x624>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d018      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a32      	ldr	r2, [pc, #200]	; (800ab40 <HAL_DMA_Abort+0x628>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d013      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a31      	ldr	r2, [pc, #196]	; (800ab44 <HAL_DMA_Abort+0x62c>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d00e      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a2f      	ldr	r2, [pc, #188]	; (800ab48 <HAL_DMA_Abort+0x630>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d009      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a2e      	ldr	r2, [pc, #184]	; (800ab4c <HAL_DMA_Abort+0x634>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d004      	beq.n	800aaa2 <HAL_DMA_Abort+0x58a>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a2c      	ldr	r2, [pc, #176]	; (800ab50 <HAL_DMA_Abort+0x638>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d101      	bne.n	800aaa6 <HAL_DMA_Abort+0x58e>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e000      	b.n	800aaa8 <HAL_DMA_Abort+0x590>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d015      	beq.n	800aad8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800aab4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00c      	beq.n	800aad8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aacc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800aad6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	40020010 	.word	0x40020010
 800aaf8:	40020028 	.word	0x40020028
 800aafc:	40020040 	.word	0x40020040
 800ab00:	40020058 	.word	0x40020058
 800ab04:	40020070 	.word	0x40020070
 800ab08:	40020088 	.word	0x40020088
 800ab0c:	400200a0 	.word	0x400200a0
 800ab10:	400200b8 	.word	0x400200b8
 800ab14:	40020410 	.word	0x40020410
 800ab18:	40020428 	.word	0x40020428
 800ab1c:	40020440 	.word	0x40020440
 800ab20:	40020458 	.word	0x40020458
 800ab24:	40020470 	.word	0x40020470
 800ab28:	40020488 	.word	0x40020488
 800ab2c:	400204a0 	.word	0x400204a0
 800ab30:	400204b8 	.word	0x400204b8
 800ab34:	58025408 	.word	0x58025408
 800ab38:	5802541c 	.word	0x5802541c
 800ab3c:	58025430 	.word	0x58025430
 800ab40:	58025444 	.word	0x58025444
 800ab44:	58025458 	.word	0x58025458
 800ab48:	5802546c 	.word	0x5802546c
 800ab4c:	58025480 	.word	0x58025480
 800ab50:	58025494 	.word	0x58025494

0800ab54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d101      	bne.n	800ab66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e205      	b.n	800af72 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d004      	beq.n	800ab7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2280      	movs	r2, #128	; 0x80
 800ab76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e1fa      	b.n	800af72 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a8c      	ldr	r2, [pc, #560]	; (800adb4 <HAL_DMA_Abort_IT+0x260>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d04a      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a8b      	ldr	r2, [pc, #556]	; (800adb8 <HAL_DMA_Abort_IT+0x264>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d045      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a89      	ldr	r2, [pc, #548]	; (800adbc <HAL_DMA_Abort_IT+0x268>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d040      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a88      	ldr	r2, [pc, #544]	; (800adc0 <HAL_DMA_Abort_IT+0x26c>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d03b      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a86      	ldr	r2, [pc, #536]	; (800adc4 <HAL_DMA_Abort_IT+0x270>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d036      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a85      	ldr	r2, [pc, #532]	; (800adc8 <HAL_DMA_Abort_IT+0x274>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d031      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a83      	ldr	r2, [pc, #524]	; (800adcc <HAL_DMA_Abort_IT+0x278>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d02c      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a82      	ldr	r2, [pc, #520]	; (800add0 <HAL_DMA_Abort_IT+0x27c>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d027      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a80      	ldr	r2, [pc, #512]	; (800add4 <HAL_DMA_Abort_IT+0x280>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d022      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a7f      	ldr	r2, [pc, #508]	; (800add8 <HAL_DMA_Abort_IT+0x284>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d01d      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a7d      	ldr	r2, [pc, #500]	; (800addc <HAL_DMA_Abort_IT+0x288>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d018      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a7c      	ldr	r2, [pc, #496]	; (800ade0 <HAL_DMA_Abort_IT+0x28c>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d013      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a7a      	ldr	r2, [pc, #488]	; (800ade4 <HAL_DMA_Abort_IT+0x290>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d00e      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a79      	ldr	r2, [pc, #484]	; (800ade8 <HAL_DMA_Abort_IT+0x294>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d009      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a77      	ldr	r2, [pc, #476]	; (800adec <HAL_DMA_Abort_IT+0x298>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d004      	beq.n	800ac1c <HAL_DMA_Abort_IT+0xc8>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a76      	ldr	r2, [pc, #472]	; (800adf0 <HAL_DMA_Abort_IT+0x29c>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d101      	bne.n	800ac20 <HAL_DMA_Abort_IT+0xcc>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e000      	b.n	800ac22 <HAL_DMA_Abort_IT+0xce>
 800ac20:	2300      	movs	r3, #0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d065      	beq.n	800acf2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2204      	movs	r2, #4
 800ac2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a60      	ldr	r2, [pc, #384]	; (800adb4 <HAL_DMA_Abort_IT+0x260>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d04a      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a5e      	ldr	r2, [pc, #376]	; (800adb8 <HAL_DMA_Abort_IT+0x264>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d045      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a5d      	ldr	r2, [pc, #372]	; (800adbc <HAL_DMA_Abort_IT+0x268>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d040      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a5b      	ldr	r2, [pc, #364]	; (800adc0 <HAL_DMA_Abort_IT+0x26c>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d03b      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a5a      	ldr	r2, [pc, #360]	; (800adc4 <HAL_DMA_Abort_IT+0x270>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d036      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a58      	ldr	r2, [pc, #352]	; (800adc8 <HAL_DMA_Abort_IT+0x274>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d031      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a57      	ldr	r2, [pc, #348]	; (800adcc <HAL_DMA_Abort_IT+0x278>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d02c      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a55      	ldr	r2, [pc, #340]	; (800add0 <HAL_DMA_Abort_IT+0x27c>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d027      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a54      	ldr	r2, [pc, #336]	; (800add4 <HAL_DMA_Abort_IT+0x280>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d022      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a52      	ldr	r2, [pc, #328]	; (800add8 <HAL_DMA_Abort_IT+0x284>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d01d      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a51      	ldr	r2, [pc, #324]	; (800addc <HAL_DMA_Abort_IT+0x288>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d018      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a4f      	ldr	r2, [pc, #316]	; (800ade0 <HAL_DMA_Abort_IT+0x28c>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d013      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a4e      	ldr	r2, [pc, #312]	; (800ade4 <HAL_DMA_Abort_IT+0x290>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d00e      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a4c      	ldr	r2, [pc, #304]	; (800ade8 <HAL_DMA_Abort_IT+0x294>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d009      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a4b      	ldr	r2, [pc, #300]	; (800adec <HAL_DMA_Abort_IT+0x298>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d004      	beq.n	800acce <HAL_DMA_Abort_IT+0x17a>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a49      	ldr	r2, [pc, #292]	; (800adf0 <HAL_DMA_Abort_IT+0x29c>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d108      	bne.n	800ace0 <HAL_DMA_Abort_IT+0x18c>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f022 0201 	bic.w	r2, r2, #1
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	e147      	b.n	800af70 <HAL_DMA_Abort_IT+0x41c>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f022 0201 	bic.w	r2, r2, #1
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	e13e      	b.n	800af70 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f022 020e 	bic.w	r2, r2, #14
 800ad00:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a2b      	ldr	r2, [pc, #172]	; (800adb4 <HAL_DMA_Abort_IT+0x260>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d04a      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a29      	ldr	r2, [pc, #164]	; (800adb8 <HAL_DMA_Abort_IT+0x264>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d045      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a28      	ldr	r2, [pc, #160]	; (800adbc <HAL_DMA_Abort_IT+0x268>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d040      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a26      	ldr	r2, [pc, #152]	; (800adc0 <HAL_DMA_Abort_IT+0x26c>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d03b      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a25      	ldr	r2, [pc, #148]	; (800adc4 <HAL_DMA_Abort_IT+0x270>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d036      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a23      	ldr	r2, [pc, #140]	; (800adc8 <HAL_DMA_Abort_IT+0x274>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d031      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a22      	ldr	r2, [pc, #136]	; (800adcc <HAL_DMA_Abort_IT+0x278>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d02c      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a20      	ldr	r2, [pc, #128]	; (800add0 <HAL_DMA_Abort_IT+0x27c>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d027      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a1f      	ldr	r2, [pc, #124]	; (800add4 <HAL_DMA_Abort_IT+0x280>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d022      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a1d      	ldr	r2, [pc, #116]	; (800add8 <HAL_DMA_Abort_IT+0x284>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d01d      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a1c      	ldr	r2, [pc, #112]	; (800addc <HAL_DMA_Abort_IT+0x288>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d018      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a1a      	ldr	r2, [pc, #104]	; (800ade0 <HAL_DMA_Abort_IT+0x28c>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d013      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a19      	ldr	r2, [pc, #100]	; (800ade4 <HAL_DMA_Abort_IT+0x290>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d00e      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a17      	ldr	r2, [pc, #92]	; (800ade8 <HAL_DMA_Abort_IT+0x294>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d009      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a16      	ldr	r2, [pc, #88]	; (800adec <HAL_DMA_Abort_IT+0x298>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d004      	beq.n	800ada2 <HAL_DMA_Abort_IT+0x24e>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a14      	ldr	r2, [pc, #80]	; (800adf0 <HAL_DMA_Abort_IT+0x29c>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d128      	bne.n	800adf4 <HAL_DMA_Abort_IT+0x2a0>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f022 0201 	bic.w	r2, r2, #1
 800adb0:	601a      	str	r2, [r3, #0]
 800adb2:	e027      	b.n	800ae04 <HAL_DMA_Abort_IT+0x2b0>
 800adb4:	40020010 	.word	0x40020010
 800adb8:	40020028 	.word	0x40020028
 800adbc:	40020040 	.word	0x40020040
 800adc0:	40020058 	.word	0x40020058
 800adc4:	40020070 	.word	0x40020070
 800adc8:	40020088 	.word	0x40020088
 800adcc:	400200a0 	.word	0x400200a0
 800add0:	400200b8 	.word	0x400200b8
 800add4:	40020410 	.word	0x40020410
 800add8:	40020428 	.word	0x40020428
 800addc:	40020440 	.word	0x40020440
 800ade0:	40020458 	.word	0x40020458
 800ade4:	40020470 	.word	0x40020470
 800ade8:	40020488 	.word	0x40020488
 800adec:	400204a0 	.word	0x400204a0
 800adf0:	400204b8 	.word	0x400204b8
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f022 0201 	bic.w	r2, r2, #1
 800ae02:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a5c      	ldr	r2, [pc, #368]	; (800af7c <HAL_DMA_Abort_IT+0x428>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d072      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a5b      	ldr	r2, [pc, #364]	; (800af80 <HAL_DMA_Abort_IT+0x42c>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d06d      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a59      	ldr	r2, [pc, #356]	; (800af84 <HAL_DMA_Abort_IT+0x430>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d068      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a58      	ldr	r2, [pc, #352]	; (800af88 <HAL_DMA_Abort_IT+0x434>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d063      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a56      	ldr	r2, [pc, #344]	; (800af8c <HAL_DMA_Abort_IT+0x438>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d05e      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a55      	ldr	r2, [pc, #340]	; (800af90 <HAL_DMA_Abort_IT+0x43c>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d059      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a53      	ldr	r2, [pc, #332]	; (800af94 <HAL_DMA_Abort_IT+0x440>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d054      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a52      	ldr	r2, [pc, #328]	; (800af98 <HAL_DMA_Abort_IT+0x444>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d04f      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a50      	ldr	r2, [pc, #320]	; (800af9c <HAL_DMA_Abort_IT+0x448>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d04a      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a4f      	ldr	r2, [pc, #316]	; (800afa0 <HAL_DMA_Abort_IT+0x44c>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d045      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a4d      	ldr	r2, [pc, #308]	; (800afa4 <HAL_DMA_Abort_IT+0x450>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d040      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a4c      	ldr	r2, [pc, #304]	; (800afa8 <HAL_DMA_Abort_IT+0x454>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d03b      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a4a      	ldr	r2, [pc, #296]	; (800afac <HAL_DMA_Abort_IT+0x458>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d036      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a49      	ldr	r2, [pc, #292]	; (800afb0 <HAL_DMA_Abort_IT+0x45c>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d031      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a47      	ldr	r2, [pc, #284]	; (800afb4 <HAL_DMA_Abort_IT+0x460>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d02c      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a46      	ldr	r2, [pc, #280]	; (800afb8 <HAL_DMA_Abort_IT+0x464>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d027      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a44      	ldr	r2, [pc, #272]	; (800afbc <HAL_DMA_Abort_IT+0x468>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d022      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a43      	ldr	r2, [pc, #268]	; (800afc0 <HAL_DMA_Abort_IT+0x46c>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d01d      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a41      	ldr	r2, [pc, #260]	; (800afc4 <HAL_DMA_Abort_IT+0x470>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d018      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a40      	ldr	r2, [pc, #256]	; (800afc8 <HAL_DMA_Abort_IT+0x474>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d013      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a3e      	ldr	r2, [pc, #248]	; (800afcc <HAL_DMA_Abort_IT+0x478>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d00e      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a3d      	ldr	r2, [pc, #244]	; (800afd0 <HAL_DMA_Abort_IT+0x47c>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d009      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a3b      	ldr	r2, [pc, #236]	; (800afd4 <HAL_DMA_Abort_IT+0x480>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d004      	beq.n	800aef4 <HAL_DMA_Abort_IT+0x3a0>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a3a      	ldr	r2, [pc, #232]	; (800afd8 <HAL_DMA_Abort_IT+0x484>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d101      	bne.n	800aef8 <HAL_DMA_Abort_IT+0x3a4>
 800aef4:	2301      	movs	r3, #1
 800aef6:	e000      	b.n	800aefa <HAL_DMA_Abort_IT+0x3a6>
 800aef8:	2300      	movs	r3, #0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d028      	beq.n	800af50 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af18:	f003 031f 	and.w	r3, r3, #31
 800af1c:	2201      	movs	r2, #1
 800af1e:	409a      	lsls	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800af2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00c      	beq.n	800af50 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800af4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af64:	2b00      	cmp	r3, #0
 800af66:	d003      	beq.n	800af70 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	40020010 	.word	0x40020010
 800af80:	40020028 	.word	0x40020028
 800af84:	40020040 	.word	0x40020040
 800af88:	40020058 	.word	0x40020058
 800af8c:	40020070 	.word	0x40020070
 800af90:	40020088 	.word	0x40020088
 800af94:	400200a0 	.word	0x400200a0
 800af98:	400200b8 	.word	0x400200b8
 800af9c:	40020410 	.word	0x40020410
 800afa0:	40020428 	.word	0x40020428
 800afa4:	40020440 	.word	0x40020440
 800afa8:	40020458 	.word	0x40020458
 800afac:	40020470 	.word	0x40020470
 800afb0:	40020488 	.word	0x40020488
 800afb4:	400204a0 	.word	0x400204a0
 800afb8:	400204b8 	.word	0x400204b8
 800afbc:	58025408 	.word	0x58025408
 800afc0:	5802541c 	.word	0x5802541c
 800afc4:	58025430 	.word	0x58025430
 800afc8:	58025444 	.word	0x58025444
 800afcc:	58025458 	.word	0x58025458
 800afd0:	5802546c 	.word	0x5802546c
 800afd4:	58025480 	.word	0x58025480
 800afd8:	58025494 	.word	0x58025494

0800afdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800afdc:	b480      	push	{r7}
 800afde:	b089      	sub	sp, #36	; 0x24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800afe6:	2300      	movs	r3, #0
 800afe8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800afea:	4b86      	ldr	r3, [pc, #536]	; (800b204 <HAL_GPIO_Init+0x228>)
 800afec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800afee:	e18c      	b.n	800b30a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	2101      	movs	r1, #1
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	fa01 f303 	lsl.w	r3, r1, r3
 800affc:	4013      	ands	r3, r2
 800affe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f000 817e 	beq.w	800b304 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	f003 0303 	and.w	r3, r3, #3
 800b010:	2b01      	cmp	r3, #1
 800b012:	d005      	beq.n	800b020 <HAL_GPIO_Init+0x44>
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	f003 0303 	and.w	r3, r3, #3
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d130      	bne.n	800b082 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	005b      	lsls	r3, r3, #1
 800b02a:	2203      	movs	r2, #3
 800b02c:	fa02 f303 	lsl.w	r3, r2, r3
 800b030:	43db      	mvns	r3, r3
 800b032:	69ba      	ldr	r2, [r7, #24]
 800b034:	4013      	ands	r3, r2
 800b036:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	68da      	ldr	r2, [r3, #12]
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	005b      	lsls	r3, r3, #1
 800b040:	fa02 f303 	lsl.w	r3, r2, r3
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	4313      	orrs	r3, r2
 800b048:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b056:	2201      	movs	r2, #1
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	fa02 f303 	lsl.w	r3, r2, r3
 800b05e:	43db      	mvns	r3, r3
 800b060:	69ba      	ldr	r2, [r7, #24]
 800b062:	4013      	ands	r3, r2
 800b064:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	091b      	lsrs	r3, r3, #4
 800b06c:	f003 0201 	and.w	r2, r3, #1
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	fa02 f303 	lsl.w	r3, r2, r3
 800b076:	69ba      	ldr	r2, [r7, #24]
 800b078:	4313      	orrs	r3, r2
 800b07a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	69ba      	ldr	r2, [r7, #24]
 800b080:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f003 0303 	and.w	r3, r3, #3
 800b08a:	2b03      	cmp	r3, #3
 800b08c:	d017      	beq.n	800b0be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	005b      	lsls	r3, r3, #1
 800b098:	2203      	movs	r2, #3
 800b09a:	fa02 f303 	lsl.w	r3, r2, r3
 800b09e:	43db      	mvns	r3, r3
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	689a      	ldr	r2, [r3, #8]
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b2:	69ba      	ldr	r2, [r7, #24]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	69ba      	ldr	r2, [r7, #24]
 800b0bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f003 0303 	and.w	r3, r3, #3
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d123      	bne.n	800b112 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	08da      	lsrs	r2, r3, #3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3208      	adds	r2, #8
 800b0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	f003 0307 	and.w	r3, r3, #7
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	220f      	movs	r2, #15
 800b0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e6:	43db      	mvns	r3, r3
 800b0e8:	69ba      	ldr	r2, [r7, #24]
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	691a      	ldr	r2, [r3, #16]
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	f003 0307 	and.w	r3, r3, #7
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fe:	69ba      	ldr	r2, [r7, #24]
 800b100:	4313      	orrs	r3, r2
 800b102:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	08da      	lsrs	r2, r3, #3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3208      	adds	r2, #8
 800b10c:	69b9      	ldr	r1, [r7, #24]
 800b10e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	005b      	lsls	r3, r3, #1
 800b11c:	2203      	movs	r2, #3
 800b11e:	fa02 f303 	lsl.w	r3, r2, r3
 800b122:	43db      	mvns	r3, r3
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	4013      	ands	r3, r2
 800b128:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	f003 0203 	and.w	r2, r3, #3
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	005b      	lsls	r3, r3, #1
 800b136:	fa02 f303 	lsl.w	r3, r2, r3
 800b13a:	69ba      	ldr	r2, [r7, #24]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 80d8 	beq.w	800b304 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b154:	4b2c      	ldr	r3, [pc, #176]	; (800b208 <HAL_GPIO_Init+0x22c>)
 800b156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b15a:	4a2b      	ldr	r2, [pc, #172]	; (800b208 <HAL_GPIO_Init+0x22c>)
 800b15c:	f043 0302 	orr.w	r3, r3, #2
 800b160:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b164:	4b28      	ldr	r3, [pc, #160]	; (800b208 <HAL_GPIO_Init+0x22c>)
 800b166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b16a:	f003 0302 	and.w	r3, r3, #2
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b172:	4a26      	ldr	r2, [pc, #152]	; (800b20c <HAL_GPIO_Init+0x230>)
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	089b      	lsrs	r3, r3, #2
 800b178:	3302      	adds	r3, #2
 800b17a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b17e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	f003 0303 	and.w	r3, r3, #3
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	220f      	movs	r2, #15
 800b18a:	fa02 f303 	lsl.w	r3, r2, r3
 800b18e:	43db      	mvns	r3, r3
 800b190:	69ba      	ldr	r2, [r7, #24]
 800b192:	4013      	ands	r3, r2
 800b194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a1d      	ldr	r2, [pc, #116]	; (800b210 <HAL_GPIO_Init+0x234>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d04a      	beq.n	800b234 <HAL_GPIO_Init+0x258>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a1c      	ldr	r2, [pc, #112]	; (800b214 <HAL_GPIO_Init+0x238>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d02b      	beq.n	800b1fe <HAL_GPIO_Init+0x222>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a1b      	ldr	r2, [pc, #108]	; (800b218 <HAL_GPIO_Init+0x23c>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d025      	beq.n	800b1fa <HAL_GPIO_Init+0x21e>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a1a      	ldr	r2, [pc, #104]	; (800b21c <HAL_GPIO_Init+0x240>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d01f      	beq.n	800b1f6 <HAL_GPIO_Init+0x21a>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a19      	ldr	r2, [pc, #100]	; (800b220 <HAL_GPIO_Init+0x244>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d019      	beq.n	800b1f2 <HAL_GPIO_Init+0x216>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a18      	ldr	r2, [pc, #96]	; (800b224 <HAL_GPIO_Init+0x248>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d013      	beq.n	800b1ee <HAL_GPIO_Init+0x212>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a17      	ldr	r2, [pc, #92]	; (800b228 <HAL_GPIO_Init+0x24c>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d00d      	beq.n	800b1ea <HAL_GPIO_Init+0x20e>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a16      	ldr	r2, [pc, #88]	; (800b22c <HAL_GPIO_Init+0x250>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d007      	beq.n	800b1e6 <HAL_GPIO_Init+0x20a>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a15      	ldr	r2, [pc, #84]	; (800b230 <HAL_GPIO_Init+0x254>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d101      	bne.n	800b1e2 <HAL_GPIO_Init+0x206>
 800b1de:	2309      	movs	r3, #9
 800b1e0:	e029      	b.n	800b236 <HAL_GPIO_Init+0x25a>
 800b1e2:	230a      	movs	r3, #10
 800b1e4:	e027      	b.n	800b236 <HAL_GPIO_Init+0x25a>
 800b1e6:	2307      	movs	r3, #7
 800b1e8:	e025      	b.n	800b236 <HAL_GPIO_Init+0x25a>
 800b1ea:	2306      	movs	r3, #6
 800b1ec:	e023      	b.n	800b236 <HAL_GPIO_Init+0x25a>
 800b1ee:	2305      	movs	r3, #5
 800b1f0:	e021      	b.n	800b236 <HAL_GPIO_Init+0x25a>
 800b1f2:	2304      	movs	r3, #4
 800b1f4:	e01f      	b.n	800b236 <HAL_GPIO_Init+0x25a>
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	e01d      	b.n	800b236 <HAL_GPIO_Init+0x25a>
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	e01b      	b.n	800b236 <HAL_GPIO_Init+0x25a>
 800b1fe:	2301      	movs	r3, #1
 800b200:	e019      	b.n	800b236 <HAL_GPIO_Init+0x25a>
 800b202:	bf00      	nop
 800b204:	58000080 	.word	0x58000080
 800b208:	58024400 	.word	0x58024400
 800b20c:	58000400 	.word	0x58000400
 800b210:	58020000 	.word	0x58020000
 800b214:	58020400 	.word	0x58020400
 800b218:	58020800 	.word	0x58020800
 800b21c:	58020c00 	.word	0x58020c00
 800b220:	58021000 	.word	0x58021000
 800b224:	58021400 	.word	0x58021400
 800b228:	58021800 	.word	0x58021800
 800b22c:	58021c00 	.word	0x58021c00
 800b230:	58022400 	.word	0x58022400
 800b234:	2300      	movs	r3, #0
 800b236:	69fa      	ldr	r2, [r7, #28]
 800b238:	f002 0203 	and.w	r2, r2, #3
 800b23c:	0092      	lsls	r2, r2, #2
 800b23e:	4093      	lsls	r3, r2
 800b240:	69ba      	ldr	r2, [r7, #24]
 800b242:	4313      	orrs	r3, r2
 800b244:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b246:	4938      	ldr	r1, [pc, #224]	; (800b328 <HAL_GPIO_Init+0x34c>)
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	089b      	lsrs	r3, r3, #2
 800b24c:	3302      	adds	r3, #2
 800b24e:	69ba      	ldr	r2, [r7, #24]
 800b250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	43db      	mvns	r3, r3
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	4013      	ands	r3, r2
 800b264:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b272:	69ba      	ldr	r2, [r7, #24]
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	4313      	orrs	r3, r2
 800b278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b27a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	43db      	mvns	r3, r3
 800b28e:	69ba      	ldr	r2, [r7, #24]
 800b290:	4013      	ands	r3, r2
 800b292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d003      	beq.n	800b2a8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b2a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	43db      	mvns	r3, r3
 800b2ba:	69ba      	ldr	r2, [r7, #24]
 800b2bc:	4013      	ands	r3, r2
 800b2be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d003      	beq.n	800b2d4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b2cc:	69ba      	ldr	r2, [r7, #24]
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	69ba      	ldr	r2, [r7, #24]
 800b2d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	43db      	mvns	r3, r3
 800b2e4:	69ba      	ldr	r2, [r7, #24]
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d003      	beq.n	800b2fe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b2f6:	69ba      	ldr	r2, [r7, #24]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	3301      	adds	r3, #1
 800b308:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	fa22 f303 	lsr.w	r3, r2, r3
 800b314:	2b00      	cmp	r3, #0
 800b316:	f47f ae6b 	bne.w	800aff0 <HAL_GPIO_Init+0x14>
  }
}
 800b31a:	bf00      	nop
 800b31c:	bf00      	nop
 800b31e:	3724      	adds	r7, #36	; 0x24
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	58000400 	.word	0x58000400

0800b32c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	807b      	strh	r3, [r7, #2]
 800b338:	4613      	mov	r3, r2
 800b33a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b33c:	787b      	ldrb	r3, [r7, #1]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b342:	887a      	ldrh	r2, [r7, #2]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b348:	e003      	b.n	800b352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b34a:	887b      	ldrh	r3, [r7, #2]
 800b34c:	041a      	lsls	r2, r3, #16
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	619a      	str	r2, [r3, #24]
}
 800b352:	bf00      	nop
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
	...

0800b360 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b368:	4b19      	ldr	r3, [pc, #100]	; (800b3d0 <HAL_PWREx_ConfigSupply+0x70>)
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	f003 0304 	and.w	r3, r3, #4
 800b370:	2b04      	cmp	r3, #4
 800b372:	d00a      	beq.n	800b38a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b374:	4b16      	ldr	r3, [pc, #88]	; (800b3d0 <HAL_PWREx_ConfigSupply+0x70>)
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f003 0307 	and.w	r3, r3, #7
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d001      	beq.n	800b386 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e01f      	b.n	800b3c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	e01d      	b.n	800b3c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b38a:	4b11      	ldr	r3, [pc, #68]	; (800b3d0 <HAL_PWREx_ConfigSupply+0x70>)
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	f023 0207 	bic.w	r2, r3, #7
 800b392:	490f      	ldr	r1, [pc, #60]	; (800b3d0 <HAL_PWREx_ConfigSupply+0x70>)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4313      	orrs	r3, r2
 800b398:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b39a:	f7fd fb49 	bl	8008a30 <HAL_GetTick>
 800b39e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b3a0:	e009      	b.n	800b3b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b3a2:	f7fd fb45 	bl	8008a30 <HAL_GetTick>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3b0:	d901      	bls.n	800b3b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e007      	b.n	800b3c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b3b6:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <HAL_PWREx_ConfigSupply+0x70>)
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c2:	d1ee      	bne.n	800b3a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	58024800 	.word	0x58024800

0800b3d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b08c      	sub	sp, #48	; 0x30
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e397      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 8087 	beq.w	800b502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3f4:	4b9e      	ldr	r3, [pc, #632]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b3fe:	4b9c      	ldr	r3, [pc, #624]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b402:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b406:	2b10      	cmp	r3, #16
 800b408:	d007      	beq.n	800b41a <HAL_RCC_OscConfig+0x46>
 800b40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40c:	2b18      	cmp	r3, #24
 800b40e:	d110      	bne.n	800b432 <HAL_RCC_OscConfig+0x5e>
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	f003 0303 	and.w	r3, r3, #3
 800b416:	2b02      	cmp	r3, #2
 800b418:	d10b      	bne.n	800b432 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b41a:	4b95      	ldr	r3, [pc, #596]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b422:	2b00      	cmp	r3, #0
 800b424:	d06c      	beq.n	800b500 <HAL_RCC_OscConfig+0x12c>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d168      	bne.n	800b500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e371      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b43a:	d106      	bne.n	800b44a <HAL_RCC_OscConfig+0x76>
 800b43c:	4b8c      	ldr	r3, [pc, #560]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a8b      	ldr	r2, [pc, #556]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b446:	6013      	str	r3, [r2, #0]
 800b448:	e02e      	b.n	800b4a8 <HAL_RCC_OscConfig+0xd4>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10c      	bne.n	800b46c <HAL_RCC_OscConfig+0x98>
 800b452:	4b87      	ldr	r3, [pc, #540]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a86      	ldr	r2, [pc, #536]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b45c:	6013      	str	r3, [r2, #0]
 800b45e:	4b84      	ldr	r3, [pc, #528]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a83      	ldr	r2, [pc, #524]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b468:	6013      	str	r3, [r2, #0]
 800b46a:	e01d      	b.n	800b4a8 <HAL_RCC_OscConfig+0xd4>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b474:	d10c      	bne.n	800b490 <HAL_RCC_OscConfig+0xbc>
 800b476:	4b7e      	ldr	r3, [pc, #504]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a7d      	ldr	r2, [pc, #500]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b47c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b480:	6013      	str	r3, [r2, #0]
 800b482:	4b7b      	ldr	r3, [pc, #492]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a7a      	ldr	r2, [pc, #488]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b48c:	6013      	str	r3, [r2, #0]
 800b48e:	e00b      	b.n	800b4a8 <HAL_RCC_OscConfig+0xd4>
 800b490:	4b77      	ldr	r3, [pc, #476]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a76      	ldr	r2, [pc, #472]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b49a:	6013      	str	r3, [r2, #0]
 800b49c:	4b74      	ldr	r3, [pc, #464]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a73      	ldr	r2, [pc, #460]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b4a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d013      	beq.n	800b4d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4b0:	f7fd fabe 	bl	8008a30 <HAL_GetTick>
 800b4b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b4b6:	e008      	b.n	800b4ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b4b8:	f7fd faba 	bl	8008a30 <HAL_GetTick>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	2b64      	cmp	r3, #100	; 0x64
 800b4c4:	d901      	bls.n	800b4ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	e325      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b4ca:	4b69      	ldr	r3, [pc, #420]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0f0      	beq.n	800b4b8 <HAL_RCC_OscConfig+0xe4>
 800b4d6:	e014      	b.n	800b502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4d8:	f7fd faaa 	bl	8008a30 <HAL_GetTick>
 800b4dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b4de:	e008      	b.n	800b4f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b4e0:	f7fd faa6 	bl	8008a30 <HAL_GetTick>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	2b64      	cmp	r3, #100	; 0x64
 800b4ec:	d901      	bls.n	800b4f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	e311      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b4f2:	4b5f      	ldr	r3, [pc, #380]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1f0      	bne.n	800b4e0 <HAL_RCC_OscConfig+0x10c>
 800b4fe:	e000      	b.n	800b502 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 0302 	and.w	r3, r3, #2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 808a 	beq.w	800b624 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b510:	4b57      	ldr	r3, [pc, #348]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b518:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b51a:	4b55      	ldr	r3, [pc, #340]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b520:	6a3b      	ldr	r3, [r7, #32]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d007      	beq.n	800b536 <HAL_RCC_OscConfig+0x162>
 800b526:	6a3b      	ldr	r3, [r7, #32]
 800b528:	2b18      	cmp	r3, #24
 800b52a:	d137      	bne.n	800b59c <HAL_RCC_OscConfig+0x1c8>
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d132      	bne.n	800b59c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b536:	4b4e      	ldr	r3, [pc, #312]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 0304 	and.w	r3, r3, #4
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d005      	beq.n	800b54e <HAL_RCC_OscConfig+0x17a>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e2e3      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b54e:	4b48      	ldr	r3, [pc, #288]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f023 0219 	bic.w	r2, r3, #25
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	4945      	ldr	r1, [pc, #276]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b55c:	4313      	orrs	r3, r2
 800b55e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b560:	f7fd fa66 	bl	8008a30 <HAL_GetTick>
 800b564:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b566:	e008      	b.n	800b57a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b568:	f7fd fa62 	bl	8008a30 <HAL_GetTick>
 800b56c:	4602      	mov	r2, r0
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	2b02      	cmp	r3, #2
 800b574:	d901      	bls.n	800b57a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	e2cd      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b57a:	4b3d      	ldr	r3, [pc, #244]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f003 0304 	and.w	r3, r3, #4
 800b582:	2b00      	cmp	r3, #0
 800b584:	d0f0      	beq.n	800b568 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b586:	4b3a      	ldr	r3, [pc, #232]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	061b      	lsls	r3, r3, #24
 800b594:	4936      	ldr	r1, [pc, #216]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b596:	4313      	orrs	r3, r2
 800b598:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b59a:	e043      	b.n	800b624 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d026      	beq.n	800b5f2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b5a4:	4b32      	ldr	r3, [pc, #200]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f023 0219 	bic.w	r2, r3, #25
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	492f      	ldr	r1, [pc, #188]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5b6:	f7fd fa3b 	bl	8008a30 <HAL_GetTick>
 800b5ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b5bc:	e008      	b.n	800b5d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b5be:	f7fd fa37 	bl	8008a30 <HAL_GetTick>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d901      	bls.n	800b5d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	e2a2      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b5d0:	4b27      	ldr	r3, [pc, #156]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 0304 	and.w	r3, r3, #4
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d0f0      	beq.n	800b5be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5dc:	4b24      	ldr	r3, [pc, #144]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	061b      	lsls	r3, r3, #24
 800b5ea:	4921      	ldr	r1, [pc, #132]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	604b      	str	r3, [r1, #4]
 800b5f0:	e018      	b.n	800b624 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b5f2:	4b1f      	ldr	r3, [pc, #124]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a1e      	ldr	r2, [pc, #120]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b5f8:	f023 0301 	bic.w	r3, r3, #1
 800b5fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5fe:	f7fd fa17 	bl	8008a30 <HAL_GetTick>
 800b602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b604:	e008      	b.n	800b618 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b606:	f7fd fa13 	bl	8008a30 <HAL_GetTick>
 800b60a:	4602      	mov	r2, r0
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	2b02      	cmp	r3, #2
 800b612:	d901      	bls.n	800b618 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	e27e      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b618:	4b15      	ldr	r3, [pc, #84]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 0304 	and.w	r3, r3, #4
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1f0      	bne.n	800b606 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f003 0310 	and.w	r3, r3, #16
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d06d      	beq.n	800b70c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b630:	4b0f      	ldr	r3, [pc, #60]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b638:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b63a:	4b0d      	ldr	r3, [pc, #52]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	2b08      	cmp	r3, #8
 800b644:	d007      	beq.n	800b656 <HAL_RCC_OscConfig+0x282>
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	2b18      	cmp	r3, #24
 800b64a:	d11e      	bne.n	800b68a <HAL_RCC_OscConfig+0x2b6>
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	f003 0303 	and.w	r3, r3, #3
 800b652:	2b01      	cmp	r3, #1
 800b654:	d119      	bne.n	800b68a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b656:	4b06      	ldr	r3, [pc, #24]	; (800b670 <HAL_RCC_OscConfig+0x29c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d008      	beq.n	800b674 <HAL_RCC_OscConfig+0x2a0>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	69db      	ldr	r3, [r3, #28]
 800b666:	2b80      	cmp	r3, #128	; 0x80
 800b668:	d004      	beq.n	800b674 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e253      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
 800b66e:	bf00      	nop
 800b670:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b674:	4ba3      	ldr	r3, [pc, #652]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	061b      	lsls	r3, r3, #24
 800b682:	49a0      	ldr	r1, [pc, #640]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b684:	4313      	orrs	r3, r2
 800b686:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b688:	e040      	b.n	800b70c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	69db      	ldr	r3, [r3, #28]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d023      	beq.n	800b6da <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b692:	4b9c      	ldr	r3, [pc, #624]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a9b      	ldr	r2, [pc, #620]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b69c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b69e:	f7fd f9c7 	bl	8008a30 <HAL_GetTick>
 800b6a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b6a4:	e008      	b.n	800b6b8 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b6a6:	f7fd f9c3 	bl	8008a30 <HAL_GetTick>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	1ad3      	subs	r3, r2, r3
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d901      	bls.n	800b6b8 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e22e      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b6b8:	4b92      	ldr	r3, [pc, #584]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d0f0      	beq.n	800b6a6 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b6c4:	4b8f      	ldr	r3, [pc, #572]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a1b      	ldr	r3, [r3, #32]
 800b6d0:	061b      	lsls	r3, r3, #24
 800b6d2:	498c      	ldr	r1, [pc, #560]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	60cb      	str	r3, [r1, #12]
 800b6d8:	e018      	b.n	800b70c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b6da:	4b8a      	ldr	r3, [pc, #552]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a89      	ldr	r2, [pc, #548]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b6e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6e6:	f7fd f9a3 	bl	8008a30 <HAL_GetTick>
 800b6ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b6ec:	e008      	b.n	800b700 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b6ee:	f7fd f99f 	bl	8008a30 <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d901      	bls.n	800b700 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	e20a      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b700:	4b80      	ldr	r3, [pc, #512]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1f0      	bne.n	800b6ee <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 0308 	and.w	r3, r3, #8
 800b714:	2b00      	cmp	r3, #0
 800b716:	d036      	beq.n	800b786 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d019      	beq.n	800b754 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b720:	4b78      	ldr	r3, [pc, #480]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b724:	4a77      	ldr	r2, [pc, #476]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b726:	f043 0301 	orr.w	r3, r3, #1
 800b72a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b72c:	f7fd f980 	bl	8008a30 <HAL_GetTick>
 800b730:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b732:	e008      	b.n	800b746 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b734:	f7fd f97c 	bl	8008a30 <HAL_GetTick>
 800b738:	4602      	mov	r2, r0
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d901      	bls.n	800b746 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800b742:	2303      	movs	r3, #3
 800b744:	e1e7      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b746:	4b6f      	ldr	r3, [pc, #444]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b74a:	f003 0302 	and.w	r3, r3, #2
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0f0      	beq.n	800b734 <HAL_RCC_OscConfig+0x360>
 800b752:	e018      	b.n	800b786 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b754:	4b6b      	ldr	r3, [pc, #428]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b758:	4a6a      	ldr	r2, [pc, #424]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b75a:	f023 0301 	bic.w	r3, r3, #1
 800b75e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b760:	f7fd f966 	bl	8008a30 <HAL_GetTick>
 800b764:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b766:	e008      	b.n	800b77a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b768:	f7fd f962 	bl	8008a30 <HAL_GetTick>
 800b76c:	4602      	mov	r2, r0
 800b76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	2b02      	cmp	r3, #2
 800b774:	d901      	bls.n	800b77a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800b776:	2303      	movs	r3, #3
 800b778:	e1cd      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b77a:	4b62      	ldr	r3, [pc, #392]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1f0      	bne.n	800b768 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f003 0320 	and.w	r3, r3, #32
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d036      	beq.n	800b800 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d019      	beq.n	800b7ce <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b79a:	4b5a      	ldr	r3, [pc, #360]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a59      	ldr	r2, [pc, #356]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b7a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b7a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b7a6:	f7fd f943 	bl	8008a30 <HAL_GetTick>
 800b7aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b7ac:	e008      	b.n	800b7c0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b7ae:	f7fd f93f 	bl	8008a30 <HAL_GetTick>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d901      	bls.n	800b7c0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e1aa      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b7c0:	4b50      	ldr	r3, [pc, #320]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d0f0      	beq.n	800b7ae <HAL_RCC_OscConfig+0x3da>
 800b7cc:	e018      	b.n	800b800 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b7ce:	4b4d      	ldr	r3, [pc, #308]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a4c      	ldr	r2, [pc, #304]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b7d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b7da:	f7fd f929 	bl	8008a30 <HAL_GetTick>
 800b7de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b7e0:	e008      	b.n	800b7f4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b7e2:	f7fd f925 	bl	8008a30 <HAL_GetTick>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d901      	bls.n	800b7f4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	e190      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b7f4:	4b43      	ldr	r3, [pc, #268]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1f0      	bne.n	800b7e2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 0304 	and.w	r3, r3, #4
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 8085 	beq.w	800b918 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b80e:	4b3e      	ldr	r3, [pc, #248]	; (800b908 <HAL_RCC_OscConfig+0x534>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a3d      	ldr	r2, [pc, #244]	; (800b908 <HAL_RCC_OscConfig+0x534>)
 800b814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b81a:	f7fd f909 	bl	8008a30 <HAL_GetTick>
 800b81e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b820:	e008      	b.n	800b834 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b822:	f7fd f905 	bl	8008a30 <HAL_GetTick>
 800b826:	4602      	mov	r2, r0
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	2b64      	cmp	r3, #100	; 0x64
 800b82e:	d901      	bls.n	800b834 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800b830:	2303      	movs	r3, #3
 800b832:	e170      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b834:	4b34      	ldr	r3, [pc, #208]	; (800b908 <HAL_RCC_OscConfig+0x534>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d0f0      	beq.n	800b822 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d106      	bne.n	800b856 <HAL_RCC_OscConfig+0x482>
 800b848:	4b2e      	ldr	r3, [pc, #184]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b84a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b84c:	4a2d      	ldr	r2, [pc, #180]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b84e:	f043 0301 	orr.w	r3, r3, #1
 800b852:	6713      	str	r3, [r2, #112]	; 0x70
 800b854:	e02d      	b.n	800b8b2 <HAL_RCC_OscConfig+0x4de>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10c      	bne.n	800b878 <HAL_RCC_OscConfig+0x4a4>
 800b85e:	4b29      	ldr	r3, [pc, #164]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b862:	4a28      	ldr	r2, [pc, #160]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b864:	f023 0301 	bic.w	r3, r3, #1
 800b868:	6713      	str	r3, [r2, #112]	; 0x70
 800b86a:	4b26      	ldr	r3, [pc, #152]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b86e:	4a25      	ldr	r2, [pc, #148]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b870:	f023 0304 	bic.w	r3, r3, #4
 800b874:	6713      	str	r3, [r2, #112]	; 0x70
 800b876:	e01c      	b.n	800b8b2 <HAL_RCC_OscConfig+0x4de>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	2b05      	cmp	r3, #5
 800b87e:	d10c      	bne.n	800b89a <HAL_RCC_OscConfig+0x4c6>
 800b880:	4b20      	ldr	r3, [pc, #128]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b884:	4a1f      	ldr	r2, [pc, #124]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b886:	f043 0304 	orr.w	r3, r3, #4
 800b88a:	6713      	str	r3, [r2, #112]	; 0x70
 800b88c:	4b1d      	ldr	r3, [pc, #116]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b88e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b890:	4a1c      	ldr	r2, [pc, #112]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b892:	f043 0301 	orr.w	r3, r3, #1
 800b896:	6713      	str	r3, [r2, #112]	; 0x70
 800b898:	e00b      	b.n	800b8b2 <HAL_RCC_OscConfig+0x4de>
 800b89a:	4b1a      	ldr	r3, [pc, #104]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b89e:	4a19      	ldr	r2, [pc, #100]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b8a0:	f023 0301 	bic.w	r3, r3, #1
 800b8a4:	6713      	str	r3, [r2, #112]	; 0x70
 800b8a6:	4b17      	ldr	r3, [pc, #92]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8aa:	4a16      	ldr	r2, [pc, #88]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b8ac:	f023 0304 	bic.w	r3, r3, #4
 800b8b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d015      	beq.n	800b8e6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8ba:	f7fd f8b9 	bl	8008a30 <HAL_GetTick>
 800b8be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8c0:	e00a      	b.n	800b8d8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b8c2:	f7fd f8b5 	bl	8008a30 <HAL_GetTick>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d901      	bls.n	800b8d8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	e11e      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8d8:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <HAL_RCC_OscConfig+0x530>)
 800b8da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8dc:	f003 0302 	and.w	r3, r3, #2
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d0ee      	beq.n	800b8c2 <HAL_RCC_OscConfig+0x4ee>
 800b8e4:	e018      	b.n	800b918 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8e6:	f7fd f8a3 	bl	8008a30 <HAL_GetTick>
 800b8ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b8ec:	e00e      	b.n	800b90c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b8ee:	f7fd f89f 	bl	8008a30 <HAL_GetTick>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d905      	bls.n	800b90c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b900:	2303      	movs	r3, #3
 800b902:	e108      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
 800b904:	58024400 	.word	0x58024400
 800b908:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b90c:	4b84      	ldr	r3, [pc, #528]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b90e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b910:	f003 0302 	and.w	r3, r3, #2
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1ea      	bne.n	800b8ee <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 80f9 	beq.w	800bb14 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b922:	4b7f      	ldr	r3, [pc, #508]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b92a:	2b18      	cmp	r3, #24
 800b92c:	f000 80b4 	beq.w	800ba98 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b934:	2b02      	cmp	r3, #2
 800b936:	f040 8095 	bne.w	800ba64 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b93a:	4b79      	ldr	r3, [pc, #484]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a78      	ldr	r2, [pc, #480]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b940:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b946:	f7fd f873 	bl	8008a30 <HAL_GetTick>
 800b94a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b94c:	e008      	b.n	800b960 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b94e:	f7fd f86f 	bl	8008a30 <HAL_GetTick>
 800b952:	4602      	mov	r2, r0
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d901      	bls.n	800b960 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b95c:	2303      	movs	r3, #3
 800b95e:	e0da      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b960:	4b6f      	ldr	r3, [pc, #444]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1f0      	bne.n	800b94e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b96c:	4b6c      	ldr	r3, [pc, #432]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b96e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b970:	4b6c      	ldr	r3, [pc, #432]	; (800bb24 <HAL_RCC_OscConfig+0x750>)
 800b972:	4013      	ands	r3, r2
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b97c:	0112      	lsls	r2, r2, #4
 800b97e:	430a      	orrs	r2, r1
 800b980:	4967      	ldr	r1, [pc, #412]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b982:	4313      	orrs	r3, r2
 800b984:	628b      	str	r3, [r1, #40]	; 0x28
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b98a:	3b01      	subs	r3, #1
 800b98c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b994:	3b01      	subs	r3, #1
 800b996:	025b      	lsls	r3, r3, #9
 800b998:	b29b      	uxth	r3, r3
 800b99a:	431a      	orrs	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	041b      	lsls	r3, r3, #16
 800b9a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b9a8:	431a      	orrs	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	061b      	lsls	r3, r3, #24
 800b9b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b9b6:	495a      	ldr	r1, [pc, #360]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b9bc:	4b58      	ldr	r3, [pc, #352]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c0:	4a57      	ldr	r2, [pc, #348]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b9c2:	f023 0301 	bic.w	r3, r3, #1
 800b9c6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b9c8:	4b55      	ldr	r3, [pc, #340]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b9ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9cc:	4b56      	ldr	r3, [pc, #344]	; (800bb28 <HAL_RCC_OscConfig+0x754>)
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b9d4:	00d2      	lsls	r2, r2, #3
 800b9d6:	4952      	ldr	r1, [pc, #328]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b9dc:	4b50      	ldr	r3, [pc, #320]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e0:	f023 020c 	bic.w	r2, r3, #12
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e8:	494d      	ldr	r1, [pc, #308]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b9ee:	4b4c      	ldr	r3, [pc, #304]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f2:	f023 0202 	bic.w	r2, r3, #2
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9fa:	4949      	ldr	r1, [pc, #292]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ba00:	4b47      	ldr	r3, [pc, #284]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	4a46      	ldr	r2, [pc, #280]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba0c:	4b44      	ldr	r3, [pc, #272]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	4a43      	ldr	r2, [pc, #268]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ba18:	4b41      	ldr	r3, [pc, #260]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1c:	4a40      	ldr	r2, [pc, #256]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ba24:	4b3e      	ldr	r3, [pc, #248]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	4a3d      	ldr	r2, [pc, #244]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba2a:	f043 0301 	orr.w	r3, r3, #1
 800ba2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ba30:	4b3b      	ldr	r3, [pc, #236]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a3a      	ldr	r2, [pc, #232]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba3c:	f7fc fff8 	bl	8008a30 <HAL_GetTick>
 800ba40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ba42:	e008      	b.n	800ba56 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba44:	f7fc fff4 	bl	8008a30 <HAL_GetTick>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d901      	bls.n	800ba56 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e05f      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ba56:	4b32      	ldr	r3, [pc, #200]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0f0      	beq.n	800ba44 <HAL_RCC_OscConfig+0x670>
 800ba62:	e057      	b.n	800bb14 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba64:	4b2e      	ldr	r3, [pc, #184]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a2d      	ldr	r2, [pc, #180]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba70:	f7fc ffde 	bl	8008a30 <HAL_GetTick>
 800ba74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba76:	e008      	b.n	800ba8a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba78:	f7fc ffda 	bl	8008a30 <HAL_GetTick>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d901      	bls.n	800ba8a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e045      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba8a:	4b25      	ldr	r3, [pc, #148]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1f0      	bne.n	800ba78 <HAL_RCC_OscConfig+0x6a4>
 800ba96:	e03d      	b.n	800bb14 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ba98:	4b21      	ldr	r3, [pc, #132]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800ba9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ba9e:	4b20      	ldr	r3, [pc, #128]	; (800bb20 <HAL_RCC_OscConfig+0x74c>)
 800baa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d031      	beq.n	800bb10 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	f003 0203 	and.w	r2, r3, #3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d12a      	bne.n	800bb10 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	091b      	lsrs	r3, r3, #4
 800babe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d122      	bne.n	800bb10 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d11a      	bne.n	800bb10 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	0a5b      	lsrs	r3, r3, #9
 800bade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bae8:	429a      	cmp	r2, r3
 800baea:	d111      	bne.n	800bb10 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	0c1b      	lsrs	r3, r3, #16
 800baf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d108      	bne.n	800bb10 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	0e1b      	lsrs	r3, r3, #24
 800bb02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d001      	beq.n	800bb14 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	e000      	b.n	800bb16 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3730      	adds	r7, #48	; 0x30
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	58024400 	.word	0x58024400
 800bb24:	fffffc0c 	.word	0xfffffc0c
 800bb28:	ffff0007 	.word	0xffff0007

0800bb2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d101      	bne.n	800bb40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e19c      	b.n	800be7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bb40:	4b8a      	ldr	r3, [pc, #552]	; (800bd6c <HAL_RCC_ClockConfig+0x240>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 030f 	and.w	r3, r3, #15
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d910      	bls.n	800bb70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb4e:	4b87      	ldr	r3, [pc, #540]	; (800bd6c <HAL_RCC_ClockConfig+0x240>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f023 020f 	bic.w	r2, r3, #15
 800bb56:	4985      	ldr	r1, [pc, #532]	; (800bd6c <HAL_RCC_ClockConfig+0x240>)
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb5e:	4b83      	ldr	r3, [pc, #524]	; (800bd6c <HAL_RCC_ClockConfig+0x240>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f003 030f 	and.w	r3, r3, #15
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d001      	beq.n	800bb70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e184      	b.n	800be7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f003 0304 	and.w	r3, r3, #4
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d010      	beq.n	800bb9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	691a      	ldr	r2, [r3, #16]
 800bb80:	4b7b      	ldr	r3, [pc, #492]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d908      	bls.n	800bb9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bb8c:	4b78      	ldr	r3, [pc, #480]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	4975      	ldr	r1, [pc, #468]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d010      	beq.n	800bbcc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	695a      	ldr	r2, [r3, #20]
 800bbae:	4b70      	ldr	r3, [pc, #448]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bbb0:	69db      	ldr	r3, [r3, #28]
 800bbb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d908      	bls.n	800bbcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bbba:	4b6d      	ldr	r3, [pc, #436]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bbbc:	69db      	ldr	r3, [r3, #28]
 800bbbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	695b      	ldr	r3, [r3, #20]
 800bbc6:	496a      	ldr	r1, [pc, #424]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 0310 	and.w	r3, r3, #16
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d010      	beq.n	800bbfa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	699a      	ldr	r2, [r3, #24]
 800bbdc:	4b64      	ldr	r3, [pc, #400]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bbde:	69db      	ldr	r3, [r3, #28]
 800bbe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d908      	bls.n	800bbfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bbe8:	4b61      	ldr	r3, [pc, #388]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bbea:	69db      	ldr	r3, [r3, #28]
 800bbec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	699b      	ldr	r3, [r3, #24]
 800bbf4:	495e      	ldr	r1, [pc, #376]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f003 0320 	and.w	r3, r3, #32
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d010      	beq.n	800bc28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	69da      	ldr	r2, [r3, #28]
 800bc0a:	4b59      	ldr	r3, [pc, #356]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d908      	bls.n	800bc28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bc16:	4b56      	ldr	r3, [pc, #344]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	69db      	ldr	r3, [r3, #28]
 800bc22:	4953      	ldr	r1, [pc, #332]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bc24:	4313      	orrs	r3, r2
 800bc26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 0302 	and.w	r3, r3, #2
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d010      	beq.n	800bc56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68da      	ldr	r2, [r3, #12]
 800bc38:	4b4d      	ldr	r3, [pc, #308]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bc3a:	699b      	ldr	r3, [r3, #24]
 800bc3c:	f003 030f 	and.w	r3, r3, #15
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d908      	bls.n	800bc56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc44:	4b4a      	ldr	r3, [pc, #296]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bc46:	699b      	ldr	r3, [r3, #24]
 800bc48:	f023 020f 	bic.w	r2, r3, #15
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	4947      	ldr	r1, [pc, #284]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bc52:	4313      	orrs	r3, r2
 800bc54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d055      	beq.n	800bd0e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bc62:	4b43      	ldr	r3, [pc, #268]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	4940      	ldr	r1, [pc, #256]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bc70:	4313      	orrs	r3, r2
 800bc72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d107      	bne.n	800bc8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bc7c:	4b3c      	ldr	r3, [pc, #240]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d121      	bne.n	800bccc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e0f6      	b.n	800be7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	d107      	bne.n	800bca4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc94:	4b36      	ldr	r3, [pc, #216]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d115      	bne.n	800bccc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	e0ea      	b.n	800be7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d107      	bne.n	800bcbc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bcac:	4b30      	ldr	r3, [pc, #192]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d109      	bne.n	800bccc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e0de      	b.n	800be7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bcbc:	4b2c      	ldr	r3, [pc, #176]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f003 0304 	and.w	r3, r3, #4
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e0d6      	b.n	800be7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bccc:	4b28      	ldr	r3, [pc, #160]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	f023 0207 	bic.w	r2, r3, #7
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	4925      	ldr	r1, [pc, #148]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcde:	f7fc fea7 	bl	8008a30 <HAL_GetTick>
 800bce2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bce4:	e00a      	b.n	800bcfc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bce6:	f7fc fea3 	bl	8008a30 <HAL_GetTick>
 800bcea:	4602      	mov	r2, r0
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d901      	bls.n	800bcfc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	e0be      	b.n	800be7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bcfc:	4b1c      	ldr	r3, [pc, #112]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	00db      	lsls	r3, r3, #3
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d1eb      	bne.n	800bce6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f003 0302 	and.w	r3, r3, #2
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d010      	beq.n	800bd3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	68da      	ldr	r2, [r3, #12]
 800bd1e:	4b14      	ldr	r3, [pc, #80]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bd20:	699b      	ldr	r3, [r3, #24]
 800bd22:	f003 030f 	and.w	r3, r3, #15
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d208      	bcs.n	800bd3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd2a:	4b11      	ldr	r3, [pc, #68]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bd2c:	699b      	ldr	r3, [r3, #24]
 800bd2e:	f023 020f 	bic.w	r2, r3, #15
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	490e      	ldr	r1, [pc, #56]	; (800bd70 <HAL_RCC_ClockConfig+0x244>)
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bd3c:	4b0b      	ldr	r3, [pc, #44]	; (800bd6c <HAL_RCC_ClockConfig+0x240>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 030f 	and.w	r3, r3, #15
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d214      	bcs.n	800bd74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd4a:	4b08      	ldr	r3, [pc, #32]	; (800bd6c <HAL_RCC_ClockConfig+0x240>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f023 020f 	bic.w	r2, r3, #15
 800bd52:	4906      	ldr	r1, [pc, #24]	; (800bd6c <HAL_RCC_ClockConfig+0x240>)
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd5a:	4b04      	ldr	r3, [pc, #16]	; (800bd6c <HAL_RCC_ClockConfig+0x240>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f003 030f 	and.w	r3, r3, #15
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d005      	beq.n	800bd74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e086      	b.n	800be7a <HAL_RCC_ClockConfig+0x34e>
 800bd6c:	52002000 	.word	0x52002000
 800bd70:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f003 0304 	and.w	r3, r3, #4
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d010      	beq.n	800bda2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	691a      	ldr	r2, [r3, #16]
 800bd84:	4b3f      	ldr	r3, [pc, #252]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d208      	bcs.n	800bda2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bd90:	4b3c      	ldr	r3, [pc, #240]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800bd92:	699b      	ldr	r3, [r3, #24]
 800bd94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	4939      	ldr	r1, [pc, #228]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 0308 	and.w	r3, r3, #8
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d010      	beq.n	800bdd0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	695a      	ldr	r2, [r3, #20]
 800bdb2:	4b34      	ldr	r3, [pc, #208]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800bdb4:	69db      	ldr	r3, [r3, #28]
 800bdb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d208      	bcs.n	800bdd0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bdbe:	4b31      	ldr	r3, [pc, #196]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800bdc0:	69db      	ldr	r3, [r3, #28]
 800bdc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	695b      	ldr	r3, [r3, #20]
 800bdca:	492e      	ldr	r1, [pc, #184]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f003 0310 	and.w	r3, r3, #16
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d010      	beq.n	800bdfe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	699a      	ldr	r2, [r3, #24]
 800bde0:	4b28      	ldr	r3, [pc, #160]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800bde2:	69db      	ldr	r3, [r3, #28]
 800bde4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d208      	bcs.n	800bdfe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bdec:	4b25      	ldr	r3, [pc, #148]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800bdee:	69db      	ldr	r3, [r3, #28]
 800bdf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	4922      	ldr	r1, [pc, #136]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 0320 	and.w	r3, r3, #32
 800be06:	2b00      	cmp	r3, #0
 800be08:	d010      	beq.n	800be2c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	69da      	ldr	r2, [r3, #28]
 800be0e:	4b1d      	ldr	r3, [pc, #116]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800be10:	6a1b      	ldr	r3, [r3, #32]
 800be12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be16:	429a      	cmp	r2, r3
 800be18:	d208      	bcs.n	800be2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800be1a:	4b1a      	ldr	r3, [pc, #104]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	69db      	ldr	r3, [r3, #28]
 800be26:	4917      	ldr	r1, [pc, #92]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800be28:	4313      	orrs	r3, r2
 800be2a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800be2c:	f000 f844 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800be30:	4602      	mov	r2, r0
 800be32:	4b14      	ldr	r3, [pc, #80]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	0a1b      	lsrs	r3, r3, #8
 800be38:	f003 030f 	and.w	r3, r3, #15
 800be3c:	4912      	ldr	r1, [pc, #72]	; (800be88 <HAL_RCC_ClockConfig+0x35c>)
 800be3e:	5ccb      	ldrb	r3, [r1, r3]
 800be40:	f003 031f 	and.w	r3, r3, #31
 800be44:	fa22 f303 	lsr.w	r3, r2, r3
 800be48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800be4a:	4b0e      	ldr	r3, [pc, #56]	; (800be84 <HAL_RCC_ClockConfig+0x358>)
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	f003 030f 	and.w	r3, r3, #15
 800be52:	4a0d      	ldr	r2, [pc, #52]	; (800be88 <HAL_RCC_ClockConfig+0x35c>)
 800be54:	5cd3      	ldrb	r3, [r2, r3]
 800be56:	f003 031f 	and.w	r3, r3, #31
 800be5a:	693a      	ldr	r2, [r7, #16]
 800be5c:	fa22 f303 	lsr.w	r3, r2, r3
 800be60:	4a0a      	ldr	r2, [pc, #40]	; (800be8c <HAL_RCC_ClockConfig+0x360>)
 800be62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800be64:	4a0a      	ldr	r2, [pc, #40]	; (800be90 <HAL_RCC_ClockConfig+0x364>)
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800be6a:	4b0a      	ldr	r3, [pc, #40]	; (800be94 <HAL_RCC_ClockConfig+0x368>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fc fd94 	bl	800899c <HAL_InitTick>
 800be74:	4603      	mov	r3, r0
 800be76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800be78:	7bfb      	ldrb	r3, [r7, #15]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3718      	adds	r7, #24
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	58024400 	.word	0x58024400
 800be88:	08014da0 	.word	0x08014da0
 800be8c:	24000018 	.word	0x24000018
 800be90:	24000014 	.word	0x24000014
 800be94:	2400001c 	.word	0x2400001c

0800be98 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800be98:	b480      	push	{r7}
 800be9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800be9c:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <HAL_RCC_EnableCSS+0x1c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a04      	ldr	r2, [pc, #16]	; (800beb4 <HAL_RCC_EnableCSS+0x1c>)
 800bea2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bea6:	6013      	str	r3, [r2, #0]
}
 800bea8:	bf00      	nop
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	58024400 	.word	0x58024400

0800beb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800beb8:	b480      	push	{r7}
 800beba:	b089      	sub	sp, #36	; 0x24
 800bebc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bebe:	4bb3      	ldr	r3, [pc, #716]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bec6:	2b18      	cmp	r3, #24
 800bec8:	f200 8155 	bhi.w	800c176 <HAL_RCC_GetSysClockFreq+0x2be>
 800becc:	a201      	add	r2, pc, #4	; (adr r2, 800bed4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800bece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed2:	bf00      	nop
 800bed4:	0800bf39 	.word	0x0800bf39
 800bed8:	0800c177 	.word	0x0800c177
 800bedc:	0800c177 	.word	0x0800c177
 800bee0:	0800c177 	.word	0x0800c177
 800bee4:	0800c177 	.word	0x0800c177
 800bee8:	0800c177 	.word	0x0800c177
 800beec:	0800c177 	.word	0x0800c177
 800bef0:	0800c177 	.word	0x0800c177
 800bef4:	0800bf5f 	.word	0x0800bf5f
 800bef8:	0800c177 	.word	0x0800c177
 800befc:	0800c177 	.word	0x0800c177
 800bf00:	0800c177 	.word	0x0800c177
 800bf04:	0800c177 	.word	0x0800c177
 800bf08:	0800c177 	.word	0x0800c177
 800bf0c:	0800c177 	.word	0x0800c177
 800bf10:	0800c177 	.word	0x0800c177
 800bf14:	0800bf65 	.word	0x0800bf65
 800bf18:	0800c177 	.word	0x0800c177
 800bf1c:	0800c177 	.word	0x0800c177
 800bf20:	0800c177 	.word	0x0800c177
 800bf24:	0800c177 	.word	0x0800c177
 800bf28:	0800c177 	.word	0x0800c177
 800bf2c:	0800c177 	.word	0x0800c177
 800bf30:	0800c177 	.word	0x0800c177
 800bf34:	0800bf6b 	.word	0x0800bf6b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf38:	4b94      	ldr	r3, [pc, #592]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f003 0320 	and.w	r3, r3, #32
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d009      	beq.n	800bf58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf44:	4b91      	ldr	r3, [pc, #580]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	08db      	lsrs	r3, r3, #3
 800bf4a:	f003 0303 	and.w	r3, r3, #3
 800bf4e:	4a90      	ldr	r2, [pc, #576]	; (800c190 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf50:	fa22 f303 	lsr.w	r3, r2, r3
 800bf54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800bf56:	e111      	b.n	800c17c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bf58:	4b8d      	ldr	r3, [pc, #564]	; (800c190 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf5a:	61bb      	str	r3, [r7, #24]
    break;
 800bf5c:	e10e      	b.n	800c17c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800bf5e:	4b8d      	ldr	r3, [pc, #564]	; (800c194 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bf60:	61bb      	str	r3, [r7, #24]
    break;
 800bf62:	e10b      	b.n	800c17c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800bf64:	4b8c      	ldr	r3, [pc, #560]	; (800c198 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bf66:	61bb      	str	r3, [r7, #24]
    break;
 800bf68:	e108      	b.n	800c17c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf6a:	4b88      	ldr	r3, [pc, #544]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6e:	f003 0303 	and.w	r3, r3, #3
 800bf72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800bf74:	4b85      	ldr	r3, [pc, #532]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf78:	091b      	lsrs	r3, r3, #4
 800bf7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bf80:	4b82      	ldr	r3, [pc, #520]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf84:	f003 0301 	and.w	r3, r3, #1
 800bf88:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bf8a:	4b80      	ldr	r3, [pc, #512]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf8e:	08db      	lsrs	r3, r3, #3
 800bf90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	fb02 f303 	mul.w	r3, r2, r3
 800bf9a:	ee07 3a90 	vmov	s15, r3
 800bf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f000 80e1 	beq.w	800c170 <HAL_RCC_GetSysClockFreq+0x2b8>
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	f000 8083 	beq.w	800c0bc <HAL_RCC_GetSysClockFreq+0x204>
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	2b02      	cmp	r3, #2
 800bfba:	f200 80a1 	bhi.w	800c100 <HAL_RCC_GetSysClockFreq+0x248>
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d003      	beq.n	800bfcc <HAL_RCC_GetSysClockFreq+0x114>
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d056      	beq.n	800c078 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bfca:	e099      	b.n	800c100 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfcc:	4b6f      	ldr	r3, [pc, #444]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 0320 	and.w	r3, r3, #32
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d02d      	beq.n	800c034 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bfd8:	4b6c      	ldr	r3, [pc, #432]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	08db      	lsrs	r3, r3, #3
 800bfde:	f003 0303 	and.w	r3, r3, #3
 800bfe2:	4a6b      	ldr	r2, [pc, #428]	; (800c190 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bfe4:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	ee07 3a90 	vmov	s15, r3
 800bff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	ee07 3a90 	vmov	s15, r3
 800bffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c002:	4b62      	ldr	r3, [pc, #392]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c00a:	ee07 3a90 	vmov	s15, r3
 800c00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c012:	ed97 6a02 	vldr	s12, [r7, #8]
 800c016:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c19c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c02e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800c032:	e087      	b.n	800c144 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	ee07 3a90 	vmov	s15, r3
 800c03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c03e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c1a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c046:	4b51      	ldr	r3, [pc, #324]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c04e:	ee07 3a90 	vmov	s15, r3
 800c052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c056:	ed97 6a02 	vldr	s12, [r7, #8]
 800c05a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c19c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c076:	e065      	b.n	800c144 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	ee07 3a90 	vmov	s15, r3
 800c07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c082:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c1a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c08a:	4b40      	ldr	r3, [pc, #256]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c092:	ee07 3a90 	vmov	s15, r3
 800c096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c09a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c09e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c19c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0ba:	e043      	b.n	800c144 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	ee07 3a90 	vmov	s15, r3
 800c0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c1a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ce:	4b2f      	ldr	r3, [pc, #188]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d6:	ee07 3a90 	vmov	s15, r3
 800c0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0de:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c19c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0fe:	e021      	b.n	800c144 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	ee07 3a90 	vmov	s15, r3
 800c106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c10a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c1a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c10e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c112:	4b1e      	ldr	r3, [pc, #120]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c11a:	ee07 3a90 	vmov	s15, r3
 800c11e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c122:	ed97 6a02 	vldr	s12, [r7, #8]
 800c126:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c19c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c12a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c12e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c13e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c142:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c144:	4b11      	ldr	r3, [pc, #68]	; (800c18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c148:	0a5b      	lsrs	r3, r3, #9
 800c14a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c14e:	3301      	adds	r3, #1
 800c150:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	ee07 3a90 	vmov	s15, r3
 800c158:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c15c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c168:	ee17 3a90 	vmov	r3, s15
 800c16c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c16e:	e005      	b.n	800c17c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c170:	2300      	movs	r3, #0
 800c172:	61bb      	str	r3, [r7, #24]
    break;
 800c174:	e002      	b.n	800c17c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c176:	4b07      	ldr	r3, [pc, #28]	; (800c194 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c178:	61bb      	str	r3, [r7, #24]
    break;
 800c17a:	bf00      	nop
  }

  return sysclockfreq;
 800c17c:	69bb      	ldr	r3, [r7, #24]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3724      	adds	r7, #36	; 0x24
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	58024400 	.word	0x58024400
 800c190:	03d09000 	.word	0x03d09000
 800c194:	003d0900 	.word	0x003d0900
 800c198:	017d7840 	.word	0x017d7840
 800c19c:	46000000 	.word	0x46000000
 800c1a0:	4c742400 	.word	0x4c742400
 800c1a4:	4a742400 	.word	0x4a742400
 800c1a8:	4bbebc20 	.word	0x4bbebc20

0800c1ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c1b2:	f7ff fe81 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	4b10      	ldr	r3, [pc, #64]	; (800c1fc <HAL_RCC_GetHCLKFreq+0x50>)
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	0a1b      	lsrs	r3, r3, #8
 800c1be:	f003 030f 	and.w	r3, r3, #15
 800c1c2:	490f      	ldr	r1, [pc, #60]	; (800c200 <HAL_RCC_GetHCLKFreq+0x54>)
 800c1c4:	5ccb      	ldrb	r3, [r1, r3]
 800c1c6:	f003 031f 	and.w	r3, r3, #31
 800c1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c1d0:	4b0a      	ldr	r3, [pc, #40]	; (800c1fc <HAL_RCC_GetHCLKFreq+0x50>)
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	f003 030f 	and.w	r3, r3, #15
 800c1d8:	4a09      	ldr	r2, [pc, #36]	; (800c200 <HAL_RCC_GetHCLKFreq+0x54>)
 800c1da:	5cd3      	ldrb	r3, [r2, r3]
 800c1dc:	f003 031f 	and.w	r3, r3, #31
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1e6:	4a07      	ldr	r2, [pc, #28]	; (800c204 <HAL_RCC_GetHCLKFreq+0x58>)
 800c1e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c1ea:	4a07      	ldr	r2, [pc, #28]	; (800c208 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c1f0:	4b04      	ldr	r3, [pc, #16]	; (800c204 <HAL_RCC_GetHCLKFreq+0x58>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	58024400 	.word	0x58024400
 800c200:	08014da0 	.word	0x08014da0
 800c204:	24000018 	.word	0x24000018
 800c208:	24000014 	.word	0x24000014

0800c20c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c210:	f7ff ffcc 	bl	800c1ac <HAL_RCC_GetHCLKFreq>
 800c214:	4602      	mov	r2, r0
 800c216:	4b06      	ldr	r3, [pc, #24]	; (800c230 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c218:	69db      	ldr	r3, [r3, #28]
 800c21a:	091b      	lsrs	r3, r3, #4
 800c21c:	f003 0307 	and.w	r3, r3, #7
 800c220:	4904      	ldr	r1, [pc, #16]	; (800c234 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c222:	5ccb      	ldrb	r3, [r1, r3]
 800c224:	f003 031f 	and.w	r3, r3, #31
 800c228:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	58024400 	.word	0x58024400
 800c234:	08014da0 	.word	0x08014da0

0800c238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c23c:	f7ff ffb6 	bl	800c1ac <HAL_RCC_GetHCLKFreq>
 800c240:	4602      	mov	r2, r0
 800c242:	4b06      	ldr	r3, [pc, #24]	; (800c25c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c244:	69db      	ldr	r3, [r3, #28]
 800c246:	0a1b      	lsrs	r3, r3, #8
 800c248:	f003 0307 	and.w	r3, r3, #7
 800c24c:	4904      	ldr	r1, [pc, #16]	; (800c260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c24e:	5ccb      	ldrb	r3, [r1, r3]
 800c250:	f003 031f 	and.w	r3, r3, #31
 800c254:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c258:	4618      	mov	r0, r3
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	58024400 	.word	0x58024400
 800c260:	08014da0 	.word	0x08014da0

0800c264 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800c268:	4b07      	ldr	r3, [pc, #28]	; (800c288 <HAL_RCC_NMI_IRQHandler+0x24>)
 800c26a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c26c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c274:	d105      	bne.n	800c282 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800c276:	f000 f809 	bl	800c28c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800c27a:	4b03      	ldr	r3, [pc, #12]	; (800c288 <HAL_RCC_NMI_IRQHandler+0x24>)
 800c27c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c280:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800c282:	bf00      	nop
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	58024400 	.word	0x58024400

0800c28c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800c290:	bf00      	nop
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr
	...

0800c29c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d03f      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2c0:	d02a      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c2c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2c6:	d824      	bhi.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c2c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2cc:	d018      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c2ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2d2:	d81e      	bhi.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d003      	beq.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c2d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2dc:	d007      	beq.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c2de:	e018      	b.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2e0:	4bab      	ldr	r3, [pc, #684]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e4:	4aaa      	ldr	r2, [pc, #680]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c2e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c2ec:	e015      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	2102      	movs	r1, #2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f001 feff 	bl	800e0f8 <RCCEx_PLL2_Config>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c2fe:	e00c      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	3324      	adds	r3, #36	; 0x24
 800c304:	2102      	movs	r1, #2
 800c306:	4618      	mov	r0, r3
 800c308:	f001 ffa8 	bl	800e25c <RCCEx_PLL3_Config>
 800c30c:	4603      	mov	r3, r0
 800c30e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c310:	e003      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	75fb      	strb	r3, [r7, #23]
      break;
 800c316:	e000      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c31a:	7dfb      	ldrb	r3, [r7, #23]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d109      	bne.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c320:	4b9b      	ldr	r3, [pc, #620]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c32c:	4998      	ldr	r1, [pc, #608]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c32e:	4313      	orrs	r3, r2
 800c330:	650b      	str	r3, [r1, #80]	; 0x50
 800c332:	e001      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c334:	7dfb      	ldrb	r3, [r7, #23]
 800c336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c340:	2b00      	cmp	r3, #0
 800c342:	d03d      	beq.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c348:	2b04      	cmp	r3, #4
 800c34a:	d826      	bhi.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c34c:	a201      	add	r2, pc, #4	; (adr r2, 800c354 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c352:	bf00      	nop
 800c354:	0800c369 	.word	0x0800c369
 800c358:	0800c377 	.word	0x0800c377
 800c35c:	0800c389 	.word	0x0800c389
 800c360:	0800c3a1 	.word	0x0800c3a1
 800c364:	0800c3a1 	.word	0x0800c3a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c368:	4b89      	ldr	r3, [pc, #548]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36c:	4a88      	ldr	r2, [pc, #544]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c36e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c372:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c374:	e015      	b.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	3304      	adds	r3, #4
 800c37a:	2100      	movs	r1, #0
 800c37c:	4618      	mov	r0, r3
 800c37e:	f001 febb 	bl	800e0f8 <RCCEx_PLL2_Config>
 800c382:	4603      	mov	r3, r0
 800c384:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c386:	e00c      	b.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3324      	adds	r3, #36	; 0x24
 800c38c:	2100      	movs	r1, #0
 800c38e:	4618      	mov	r0, r3
 800c390:	f001 ff64 	bl	800e25c <RCCEx_PLL3_Config>
 800c394:	4603      	mov	r3, r0
 800c396:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c398:	e003      	b.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	75fb      	strb	r3, [r7, #23]
      break;
 800c39e:	e000      	b.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c3a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d109      	bne.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c3a8:	4b79      	ldr	r3, [pc, #484]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3ac:	f023 0207 	bic.w	r2, r3, #7
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b4:	4976      	ldr	r1, [pc, #472]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	650b      	str	r3, [r1, #80]	; 0x50
 800c3ba:	e001      	b.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3bc:	7dfb      	ldrb	r3, [r7, #23]
 800c3be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d051      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c3d2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800c3d6:	d036      	beq.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c3d8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800c3dc:	d830      	bhi.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c3de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3e2:	d032      	beq.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800c3e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3e8:	d82a      	bhi.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c3ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3ee:	d02e      	beq.n	800c44e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800c3f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3f4:	d824      	bhi.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c3f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3fa:	d018      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c3fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c400:	d81e      	bhi.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c402:	2b00      	cmp	r3, #0
 800c404:	d003      	beq.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800c406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c40a:	d007      	beq.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800c40c:	e018      	b.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c40e:	4b60      	ldr	r3, [pc, #384]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c412:	4a5f      	ldr	r2, [pc, #380]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c418:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c41a:	e019      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	3304      	adds	r3, #4
 800c420:	2100      	movs	r1, #0
 800c422:	4618      	mov	r0, r3
 800c424:	f001 fe68 	bl	800e0f8 <RCCEx_PLL2_Config>
 800c428:	4603      	mov	r3, r0
 800c42a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c42c:	e010      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	3324      	adds	r3, #36	; 0x24
 800c432:	2100      	movs	r1, #0
 800c434:	4618      	mov	r0, r3
 800c436:	f001 ff11 	bl	800e25c <RCCEx_PLL3_Config>
 800c43a:	4603      	mov	r3, r0
 800c43c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c43e:	e007      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	75fb      	strb	r3, [r7, #23]
      break;
 800c444:	e004      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c446:	bf00      	nop
 800c448:	e002      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c44a:	bf00      	nop
 800c44c:	e000      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c44e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10a      	bne.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c456:	4b4e      	ldr	r3, [pc, #312]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c45a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c464:	494a      	ldr	r1, [pc, #296]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c466:	4313      	orrs	r3, r2
 800c468:	658b      	str	r3, [r1, #88]	; 0x58
 800c46a:	e001      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c46c:	7dfb      	ldrb	r3, [r7, #23]
 800c46e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d051      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c482:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c486:	d036      	beq.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800c488:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c48c:	d830      	bhi.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c48e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c492:	d032      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800c494:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c498:	d82a      	bhi.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c49a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c49e:	d02e      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x262>
 800c4a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c4a4:	d824      	bhi.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c4a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4aa:	d018      	beq.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x242>
 800c4ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4b0:	d81e      	bhi.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d003      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x222>
 800c4b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c4ba:	d007      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c4bc:	e018      	b.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4be:	4b34      	ldr	r3, [pc, #208]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c2:	4a33      	ldr	r2, [pc, #204]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c4ca:	e019      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f001 fe10 	bl	800e0f8 <RCCEx_PLL2_Config>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c4dc:	e010      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3324      	adds	r3, #36	; 0x24
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f001 feb9 	bl	800e25c <RCCEx_PLL3_Config>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c4ee:	e007      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c4f4:	e004      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c4f6:	bf00      	nop
 800c4f8:	e002      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c4fa:	bf00      	nop
 800c4fc:	e000      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c4fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c500:	7dfb      	ldrb	r3, [r7, #23]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d10a      	bne.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c506:	4b22      	ldr	r3, [pc, #136]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c50a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c514:	491e      	ldr	r1, [pc, #120]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c516:	4313      	orrs	r3, r2
 800c518:	658b      	str	r3, [r1, #88]	; 0x58
 800c51a:	e001      	b.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
 800c51e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d035      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c530:	2b30      	cmp	r3, #48	; 0x30
 800c532:	d01c      	beq.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c534:	2b30      	cmp	r3, #48	; 0x30
 800c536:	d817      	bhi.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800c538:	2b20      	cmp	r3, #32
 800c53a:	d00c      	beq.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800c53c:	2b20      	cmp	r3, #32
 800c53e:	d813      	bhi.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800c540:	2b00      	cmp	r3, #0
 800c542:	d016      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800c544:	2b10      	cmp	r3, #16
 800c546:	d10f      	bne.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c548:	4b11      	ldr	r3, [pc, #68]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54c:	4a10      	ldr	r2, [pc, #64]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c54e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800c554:	e00e      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	3304      	adds	r3, #4
 800c55a:	2102      	movs	r1, #2
 800c55c:	4618      	mov	r0, r3
 800c55e:	f001 fdcb 	bl	800e0f8 <RCCEx_PLL2_Config>
 800c562:	4603      	mov	r3, r0
 800c564:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800c566:	e005      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c568:	2301      	movs	r3, #1
 800c56a:	75fb      	strb	r3, [r7, #23]
      break;
 800c56c:	e002      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800c56e:	bf00      	nop
 800c570:	e000      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800c572:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c574:	7dfb      	ldrb	r3, [r7, #23]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10c      	bne.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c57a:	4b05      	ldr	r3, [pc, #20]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c57c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c57e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c586:	4902      	ldr	r1, [pc, #8]	; (800c590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c588:	4313      	orrs	r3, r2
 800c58a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c58c:	e004      	b.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800c58e:	bf00      	nop
 800c590:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c594:	7dfb      	ldrb	r3, [r7, #23]
 800c596:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d047      	beq.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5ac:	d030      	beq.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800c5ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5b2:	d82a      	bhi.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c5b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c5b8:	d02c      	beq.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800c5ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c5be:	d824      	bhi.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c5c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5c4:	d018      	beq.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c5c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5ca:	d81e      	bhi.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d003      	beq.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c5d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5d4:	d007      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c5d6:	e018      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5d8:	4bac      	ldr	r3, [pc, #688]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5dc:	4aab      	ldr	r2, [pc, #684]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c5de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c5e4:	e017      	b.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f001 fd83 	bl	800e0f8 <RCCEx_PLL2_Config>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c5f6:	e00e      	b.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	3324      	adds	r3, #36	; 0x24
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	4618      	mov	r0, r3
 800c600:	f001 fe2c 	bl	800e25c <RCCEx_PLL3_Config>
 800c604:	4603      	mov	r3, r0
 800c606:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c608:	e005      	b.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	75fb      	strb	r3, [r7, #23]
      break;
 800c60e:	e002      	b.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800c610:	bf00      	nop
 800c612:	e000      	b.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800c614:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c616:	7dfb      	ldrb	r3, [r7, #23]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d109      	bne.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c61c:	4b9b      	ldr	r3, [pc, #620]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c61e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c620:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c628:	4998      	ldr	r1, [pc, #608]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c62a:	4313      	orrs	r3, r2
 800c62c:	650b      	str	r3, [r1, #80]	; 0x50
 800c62e:	e001      	b.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c630:	7dfb      	ldrb	r3, [r7, #23]
 800c632:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d049      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c648:	d02e      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800c64a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c64e:	d828      	bhi.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c654:	d02a      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x410>
 800c656:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c65a:	d822      	bhi.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c65c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c660:	d026      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800c662:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c666:	d81c      	bhi.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c66c:	d010      	beq.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800c66e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c672:	d816      	bhi.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c674:	2b00      	cmp	r3, #0
 800c676:	d01d      	beq.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800c678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c67c:	d111      	bne.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	3304      	adds	r3, #4
 800c682:	2101      	movs	r1, #1
 800c684:	4618      	mov	r0, r3
 800c686:	f001 fd37 	bl	800e0f8 <RCCEx_PLL2_Config>
 800c68a:	4603      	mov	r3, r0
 800c68c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c68e:	e012      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3324      	adds	r3, #36	; 0x24
 800c694:	2101      	movs	r1, #1
 800c696:	4618      	mov	r0, r3
 800c698:	f001 fde0 	bl	800e25c <RCCEx_PLL3_Config>
 800c69c:	4603      	mov	r3, r0
 800c69e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c6a0:	e009      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	75fb      	strb	r3, [r7, #23]
      break;
 800c6a6:	e006      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c6a8:	bf00      	nop
 800c6aa:	e004      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c6ac:	bf00      	nop
 800c6ae:	e002      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c6b0:	bf00      	nop
 800c6b2:	e000      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c6b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d109      	bne.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c6bc:	4b73      	ldr	r3, [pc, #460]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c6be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6c8:	4970      	ldr	r1, [pc, #448]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	650b      	str	r3, [r1, #80]	; 0x50
 800c6ce:	e001      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d04b      	beq.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c6e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6ea:	d02e      	beq.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800c6ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6f0:	d828      	bhi.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6f6:	d02a      	beq.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800c6f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6fc:	d822      	bhi.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c6fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c702:	d026      	beq.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800c704:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c708:	d81c      	bhi.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c70a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c70e:	d010      	beq.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800c710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c714:	d816      	bhi.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c716:	2b00      	cmp	r3, #0
 800c718:	d01d      	beq.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800c71a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c71e:	d111      	bne.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	3304      	adds	r3, #4
 800c724:	2101      	movs	r1, #1
 800c726:	4618      	mov	r0, r3
 800c728:	f001 fce6 	bl	800e0f8 <RCCEx_PLL2_Config>
 800c72c:	4603      	mov	r3, r0
 800c72e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c730:	e012      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	3324      	adds	r3, #36	; 0x24
 800c736:	2101      	movs	r1, #1
 800c738:	4618      	mov	r0, r3
 800c73a:	f001 fd8f 	bl	800e25c <RCCEx_PLL3_Config>
 800c73e:	4603      	mov	r3, r0
 800c740:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c742:	e009      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c744:	2301      	movs	r3, #1
 800c746:	75fb      	strb	r3, [r7, #23]
      break;
 800c748:	e006      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c74a:	bf00      	nop
 800c74c:	e004      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c74e:	bf00      	nop
 800c750:	e002      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c752:	bf00      	nop
 800c754:	e000      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c756:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c758:	7dfb      	ldrb	r3, [r7, #23]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d10a      	bne.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c75e:	4b4b      	ldr	r3, [pc, #300]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c762:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c76c:	4947      	ldr	r1, [pc, #284]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c76e:	4313      	orrs	r3, r2
 800c770:	658b      	str	r3, [r1, #88]	; 0x58
 800c772:	e001      	b.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c774:	7dfb      	ldrb	r3, [r7, #23]
 800c776:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c780:	2b00      	cmp	r3, #0
 800c782:	d02f      	beq.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c78c:	d00e      	beq.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0x510>
 800c78e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c792:	d814      	bhi.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c794:	2b00      	cmp	r3, #0
 800c796:	d015      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800c798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c79c:	d10f      	bne.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c79e:	4b3b      	ldr	r3, [pc, #236]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a2:	4a3a      	ldr	r2, [pc, #232]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c7aa:	e00c      	b.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	2101      	movs	r1, #1
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f001 fca0 	bl	800e0f8 <RCCEx_PLL2_Config>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c7bc:	e003      	b.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	75fb      	strb	r3, [r7, #23]
      break;
 800c7c2:	e000      	b.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800c7c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d109      	bne.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c7cc:	4b2f      	ldr	r3, [pc, #188]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7d8:	492c      	ldr	r1, [pc, #176]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	650b      	str	r3, [r1, #80]	; 0x50
 800c7de:	e001      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
 800c7e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d032      	beq.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7f4:	2b03      	cmp	r3, #3
 800c7f6:	d81b      	bhi.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800c7f8:	a201      	add	r2, pc, #4	; (adr r2, 800c800 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800c7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fe:	bf00      	nop
 800c800:	0800c837 	.word	0x0800c837
 800c804:	0800c811 	.word	0x0800c811
 800c808:	0800c81f 	.word	0x0800c81f
 800c80c:	0800c837 	.word	0x0800c837
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c810:	4b1e      	ldr	r3, [pc, #120]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c814:	4a1d      	ldr	r2, [pc, #116]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c81a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c81c:	e00c      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3304      	adds	r3, #4
 800c822:	2102      	movs	r1, #2
 800c824:	4618      	mov	r0, r3
 800c826:	f001 fc67 	bl	800e0f8 <RCCEx_PLL2_Config>
 800c82a:	4603      	mov	r3, r0
 800c82c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c82e:	e003      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c830:	2301      	movs	r3, #1
 800c832:	75fb      	strb	r3, [r7, #23]
      break;
 800c834:	e000      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800c836:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c838:	7dfb      	ldrb	r3, [r7, #23]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d109      	bne.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c83e:	4b13      	ldr	r3, [pc, #76]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c842:	f023 0203 	bic.w	r2, r3, #3
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c84a:	4910      	ldr	r1, [pc, #64]	; (800c88c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c84c:	4313      	orrs	r3, r2
 800c84e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c850:	e001      	b.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c852:	7dfb      	ldrb	r3, [r7, #23]
 800c854:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f000 808a 	beq.w	800c978 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c864:	4b0a      	ldr	r3, [pc, #40]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a09      	ldr	r2, [pc, #36]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c86a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c86e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c870:	f7fc f8de 	bl	8008a30 <HAL_GetTick>
 800c874:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c876:	e00d      	b.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c878:	f7fc f8da 	bl	8008a30 <HAL_GetTick>
 800c87c:	4602      	mov	r2, r0
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	2b64      	cmp	r3, #100	; 0x64
 800c884:	d906      	bls.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800c886:	2303      	movs	r3, #3
 800c888:	75fb      	strb	r3, [r7, #23]
        break;
 800c88a:	e009      	b.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c88c:	58024400 	.word	0x58024400
 800c890:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c894:	4bb9      	ldr	r3, [pc, #740]	; (800cb7c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d0eb      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800c8a0:	7dfb      	ldrb	r3, [r7, #23]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d166      	bne.n	800c974 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c8a6:	4bb6      	ldr	r3, [pc, #728]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c8b0:	4053      	eors	r3, r2
 800c8b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d013      	beq.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c8ba:	4bb1      	ldr	r3, [pc, #708]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c8c4:	4bae      	ldr	r3, [pc, #696]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8c8:	4aad      	ldr	r2, [pc, #692]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c8d0:	4bab      	ldr	r3, [pc, #684]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8d4:	4aaa      	ldr	r2, [pc, #680]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c8dc:	4aa8      	ldr	r2, [pc, #672]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c8e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ec:	d115      	bne.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8ee:	f7fc f89f 	bl	8008a30 <HAL_GetTick>
 800c8f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c8f4:	e00b      	b.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8f6:	f7fc f89b 	bl	8008a30 <HAL_GetTick>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	1ad3      	subs	r3, r2, r3
 800c900:	f241 3288 	movw	r2, #5000	; 0x1388
 800c904:	4293      	cmp	r3, r2
 800c906:	d902      	bls.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800c908:	2303      	movs	r3, #3
 800c90a:	75fb      	strb	r3, [r7, #23]
            break;
 800c90c:	e005      	b.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c90e:	4b9c      	ldr	r3, [pc, #624]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c912:	f003 0302 	and.w	r3, r3, #2
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0ed      	beq.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d126      	bne.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c92a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c92e:	d10d      	bne.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800c930:	4b93      	ldr	r3, [pc, #588]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c93e:	0919      	lsrs	r1, r3, #4
 800c940:	4b90      	ldr	r3, [pc, #576]	; (800cb84 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800c942:	400b      	ands	r3, r1
 800c944:	498e      	ldr	r1, [pc, #568]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c946:	4313      	orrs	r3, r2
 800c948:	610b      	str	r3, [r1, #16]
 800c94a:	e005      	b.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800c94c:	4b8c      	ldr	r3, [pc, #560]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	4a8b      	ldr	r2, [pc, #556]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c952:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c956:	6113      	str	r3, [r2, #16]
 800c958:	4b89      	ldr	r3, [pc, #548]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c95a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c966:	4986      	ldr	r1, [pc, #536]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c968:	4313      	orrs	r3, r2
 800c96a:	670b      	str	r3, [r1, #112]	; 0x70
 800c96c:	e004      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c96e:	7dfb      	ldrb	r3, [r7, #23]
 800c970:	75bb      	strb	r3, [r7, #22]
 800c972:	e001      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c974:	7dfb      	ldrb	r3, [r7, #23]
 800c976:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f003 0301 	and.w	r3, r3, #1
 800c980:	2b00      	cmp	r3, #0
 800c982:	d07e      	beq.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c988:	2b28      	cmp	r3, #40	; 0x28
 800c98a:	d867      	bhi.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800c98c:	a201      	add	r2, pc, #4	; (adr r2, 800c994 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800c98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c992:	bf00      	nop
 800c994:	0800ca63 	.word	0x0800ca63
 800c998:	0800ca5d 	.word	0x0800ca5d
 800c99c:	0800ca5d 	.word	0x0800ca5d
 800c9a0:	0800ca5d 	.word	0x0800ca5d
 800c9a4:	0800ca5d 	.word	0x0800ca5d
 800c9a8:	0800ca5d 	.word	0x0800ca5d
 800c9ac:	0800ca5d 	.word	0x0800ca5d
 800c9b0:	0800ca5d 	.word	0x0800ca5d
 800c9b4:	0800ca39 	.word	0x0800ca39
 800c9b8:	0800ca5d 	.word	0x0800ca5d
 800c9bc:	0800ca5d 	.word	0x0800ca5d
 800c9c0:	0800ca5d 	.word	0x0800ca5d
 800c9c4:	0800ca5d 	.word	0x0800ca5d
 800c9c8:	0800ca5d 	.word	0x0800ca5d
 800c9cc:	0800ca5d 	.word	0x0800ca5d
 800c9d0:	0800ca5d 	.word	0x0800ca5d
 800c9d4:	0800ca4b 	.word	0x0800ca4b
 800c9d8:	0800ca5d 	.word	0x0800ca5d
 800c9dc:	0800ca5d 	.word	0x0800ca5d
 800c9e0:	0800ca5d 	.word	0x0800ca5d
 800c9e4:	0800ca5d 	.word	0x0800ca5d
 800c9e8:	0800ca5d 	.word	0x0800ca5d
 800c9ec:	0800ca5d 	.word	0x0800ca5d
 800c9f0:	0800ca5d 	.word	0x0800ca5d
 800c9f4:	0800ca63 	.word	0x0800ca63
 800c9f8:	0800ca5d 	.word	0x0800ca5d
 800c9fc:	0800ca5d 	.word	0x0800ca5d
 800ca00:	0800ca5d 	.word	0x0800ca5d
 800ca04:	0800ca5d 	.word	0x0800ca5d
 800ca08:	0800ca5d 	.word	0x0800ca5d
 800ca0c:	0800ca5d 	.word	0x0800ca5d
 800ca10:	0800ca5d 	.word	0x0800ca5d
 800ca14:	0800ca63 	.word	0x0800ca63
 800ca18:	0800ca5d 	.word	0x0800ca5d
 800ca1c:	0800ca5d 	.word	0x0800ca5d
 800ca20:	0800ca5d 	.word	0x0800ca5d
 800ca24:	0800ca5d 	.word	0x0800ca5d
 800ca28:	0800ca5d 	.word	0x0800ca5d
 800ca2c:	0800ca5d 	.word	0x0800ca5d
 800ca30:	0800ca5d 	.word	0x0800ca5d
 800ca34:	0800ca63 	.word	0x0800ca63
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	3304      	adds	r3, #4
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f001 fb5a 	bl	800e0f8 <RCCEx_PLL2_Config>
 800ca44:	4603      	mov	r3, r0
 800ca46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ca48:	e00c      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	3324      	adds	r3, #36	; 0x24
 800ca4e:	2101      	movs	r1, #1
 800ca50:	4618      	mov	r0, r3
 800ca52:	f001 fc03 	bl	800e25c <RCCEx_PLL3_Config>
 800ca56:	4603      	mov	r3, r0
 800ca58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ca5a:	e003      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ca60:	e000      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800ca62:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d109      	bne.n	800ca7e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ca6a:	4b45      	ldr	r3, [pc, #276]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ca6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca6e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca76:	4942      	ldr	r1, [pc, #264]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	654b      	str	r3, [r1, #84]	; 0x54
 800ca7c:	e001      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca7e:	7dfb      	ldrb	r3, [r7, #23]
 800ca80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 0302 	and.w	r3, r3, #2
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d037      	beq.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca92:	2b05      	cmp	r3, #5
 800ca94:	d820      	bhi.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800ca96:	a201      	add	r2, pc, #4	; (adr r2, 800ca9c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800ca98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca9c:	0800cadf 	.word	0x0800cadf
 800caa0:	0800cab5 	.word	0x0800cab5
 800caa4:	0800cac7 	.word	0x0800cac7
 800caa8:	0800cadf 	.word	0x0800cadf
 800caac:	0800cadf 	.word	0x0800cadf
 800cab0:	0800cadf 	.word	0x0800cadf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	3304      	adds	r3, #4
 800cab8:	2101      	movs	r1, #1
 800caba:	4618      	mov	r0, r3
 800cabc:	f001 fb1c 	bl	800e0f8 <RCCEx_PLL2_Config>
 800cac0:	4603      	mov	r3, r0
 800cac2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cac4:	e00c      	b.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3324      	adds	r3, #36	; 0x24
 800caca:	2101      	movs	r1, #1
 800cacc:	4618      	mov	r0, r3
 800cace:	f001 fbc5 	bl	800e25c <RCCEx_PLL3_Config>
 800cad2:	4603      	mov	r3, r0
 800cad4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cad6:	e003      	b.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	75fb      	strb	r3, [r7, #23]
      break;
 800cadc:	e000      	b.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800cade:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cae0:	7dfb      	ldrb	r3, [r7, #23]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d109      	bne.n	800cafa <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cae6:	4b26      	ldr	r3, [pc, #152]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800cae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caea:	f023 0207 	bic.w	r2, r3, #7
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf2:	4923      	ldr	r1, [pc, #140]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800caf4:	4313      	orrs	r3, r2
 800caf6:	654b      	str	r3, [r1, #84]	; 0x54
 800caf8:	e001      	b.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
 800cafc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 0304 	and.w	r3, r3, #4
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d040      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb10:	2b05      	cmp	r3, #5
 800cb12:	d821      	bhi.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800cb14:	a201      	add	r2, pc, #4	; (adr r2, 800cb1c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800cb16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1a:	bf00      	nop
 800cb1c:	0800cb5f 	.word	0x0800cb5f
 800cb20:	0800cb35 	.word	0x0800cb35
 800cb24:	0800cb47 	.word	0x0800cb47
 800cb28:	0800cb5f 	.word	0x0800cb5f
 800cb2c:	0800cb5f 	.word	0x0800cb5f
 800cb30:	0800cb5f 	.word	0x0800cb5f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	3304      	adds	r3, #4
 800cb38:	2101      	movs	r1, #1
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f001 fadc 	bl	800e0f8 <RCCEx_PLL2_Config>
 800cb40:	4603      	mov	r3, r0
 800cb42:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cb44:	e00c      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	3324      	adds	r3, #36	; 0x24
 800cb4a:	2101      	movs	r1, #1
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f001 fb85 	bl	800e25c <RCCEx_PLL3_Config>
 800cb52:	4603      	mov	r3, r0
 800cb54:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cb56:	e003      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	75fb      	strb	r3, [r7, #23]
      break;
 800cb5c:	e000      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800cb5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d110      	bne.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cb66:	4b06      	ldr	r3, [pc, #24]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800cb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb6a:	f023 0207 	bic.w	r2, r3, #7
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb74:	4902      	ldr	r1, [pc, #8]	; (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800cb76:	4313      	orrs	r3, r2
 800cb78:	658b      	str	r3, [r1, #88]	; 0x58
 800cb7a:	e007      	b.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800cb7c:	58024800 	.word	0x58024800
 800cb80:	58024400 	.word	0x58024400
 800cb84:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb88:	7dfb      	ldrb	r3, [r7, #23]
 800cb8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f003 0320 	and.w	r3, r3, #32
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d04b      	beq.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cba2:	d02e      	beq.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800cba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cba8:	d828      	bhi.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cbaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbae:	d02a      	beq.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800cbb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbb4:	d822      	bhi.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cbb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cbba:	d026      	beq.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800cbbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cbc0:	d81c      	bhi.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cbc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbc6:	d010      	beq.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800cbc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbcc:	d816      	bhi.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d01d      	beq.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800cbd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbd6:	d111      	bne.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3304      	adds	r3, #4
 800cbdc:	2100      	movs	r1, #0
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f001 fa8a 	bl	800e0f8 <RCCEx_PLL2_Config>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cbe8:	e012      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	3324      	adds	r3, #36	; 0x24
 800cbee:	2102      	movs	r1, #2
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f001 fb33 	bl	800e25c <RCCEx_PLL3_Config>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cbfa:	e009      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	75fb      	strb	r3, [r7, #23]
      break;
 800cc00:	e006      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cc02:	bf00      	nop
 800cc04:	e004      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cc06:	bf00      	nop
 800cc08:	e002      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cc0a:	bf00      	nop
 800cc0c:	e000      	b.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cc0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc10:	7dfb      	ldrb	r3, [r7, #23]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10a      	bne.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cc16:	4bb2      	ldr	r3, [pc, #712]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc24:	49ae      	ldr	r1, [pc, #696]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cc26:	4313      	orrs	r3, r2
 800cc28:	654b      	str	r3, [r1, #84]	; 0x54
 800cc2a:	e001      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc2c:	7dfb      	ldrb	r3, [r7, #23]
 800cc2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d04b      	beq.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cc46:	d02e      	beq.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800cc48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cc4c:	d828      	bhi.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cc4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc52:	d02a      	beq.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800cc54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc58:	d822      	bhi.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cc5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cc5e:	d026      	beq.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800cc60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cc64:	d81c      	bhi.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cc66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc6a:	d010      	beq.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800cc6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc70:	d816      	bhi.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d01d      	beq.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800cc76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc7a:	d111      	bne.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	3304      	adds	r3, #4
 800cc80:	2100      	movs	r1, #0
 800cc82:	4618      	mov	r0, r3
 800cc84:	f001 fa38 	bl	800e0f8 <RCCEx_PLL2_Config>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc8c:	e012      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3324      	adds	r3, #36	; 0x24
 800cc92:	2102      	movs	r1, #2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f001 fae1 	bl	800e25c <RCCEx_PLL3_Config>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc9e:	e009      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	75fb      	strb	r3, [r7, #23]
      break;
 800cca4:	e006      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800cca6:	bf00      	nop
 800cca8:	e004      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800ccaa:	bf00      	nop
 800ccac:	e002      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800ccae:	bf00      	nop
 800ccb0:	e000      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800ccb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ccb4:	7dfb      	ldrb	r3, [r7, #23]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10a      	bne.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ccba:	4b89      	ldr	r3, [pc, #548]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ccbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccbe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ccc8:	4985      	ldr	r1, [pc, #532]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ccca:	4313      	orrs	r3, r2
 800cccc:	658b      	str	r3, [r1, #88]	; 0x58
 800ccce:	e001      	b.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccd0:	7dfb      	ldrb	r3, [r7, #23]
 800ccd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d04b      	beq.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cce6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ccea:	d02e      	beq.n	800cd4a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800ccec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ccf0:	d828      	bhi.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800ccf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccf6:	d02a      	beq.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800ccf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccfc:	d822      	bhi.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800ccfe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cd02:	d026      	beq.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800cd04:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cd08:	d81c      	bhi.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800cd0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd0e:	d010      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800cd10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd14:	d816      	bhi.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d01d      	beq.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800cd1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd1e:	d111      	bne.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	3304      	adds	r3, #4
 800cd24:	2100      	movs	r1, #0
 800cd26:	4618      	mov	r0, r3
 800cd28:	f001 f9e6 	bl	800e0f8 <RCCEx_PLL2_Config>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cd30:	e012      	b.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	3324      	adds	r3, #36	; 0x24
 800cd36:	2102      	movs	r1, #2
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f001 fa8f 	bl	800e25c <RCCEx_PLL3_Config>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cd42:	e009      	b.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	75fb      	strb	r3, [r7, #23]
      break;
 800cd48:	e006      	b.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800cd4a:	bf00      	nop
 800cd4c:	e004      	b.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800cd4e:	bf00      	nop
 800cd50:	e002      	b.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800cd52:	bf00      	nop
 800cd54:	e000      	b.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800cd56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd58:	7dfb      	ldrb	r3, [r7, #23]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10a      	bne.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cd5e:	4b60      	ldr	r3, [pc, #384]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd6c:	495c      	ldr	r1, [pc, #368]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	658b      	str	r3, [r1, #88]	; 0x58
 800cd72:	e001      	b.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd74:	7dfb      	ldrb	r3, [r7, #23]
 800cd76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 0308 	and.w	r3, r3, #8
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d018      	beq.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd8c:	d10a      	bne.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	3324      	adds	r3, #36	; 0x24
 800cd92:	2102      	movs	r1, #2
 800cd94:	4618      	mov	r0, r3
 800cd96:	f001 fa61 	bl	800e25c <RCCEx_PLL3_Config>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d001      	beq.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800cda4:	4b4e      	ldr	r3, [pc, #312]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cda6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdb0:	494b      	ldr	r1, [pc, #300]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f003 0310 	and.w	r3, r3, #16
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d01a      	beq.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdcc:	d10a      	bne.n	800cde4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	3324      	adds	r3, #36	; 0x24
 800cdd2:	2102      	movs	r1, #2
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f001 fa41 	bl	800e25c <RCCEx_PLL3_Config>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d001      	beq.n	800cde4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cde4:	4b3e      	ldr	r3, [pc, #248]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cde6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdf2:	493b      	ldr	r1, [pc, #236]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d034      	beq.n	800ce6e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce0e:	d01d      	beq.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ce10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce14:	d817      	bhi.n	800ce46 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d003      	beq.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ce1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce1e:	d009      	beq.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ce20:	e011      	b.n	800ce46 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3304      	adds	r3, #4
 800ce26:	2100      	movs	r1, #0
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f001 f965 	bl	800e0f8 <RCCEx_PLL2_Config>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ce32:	e00c      	b.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	3324      	adds	r3, #36	; 0x24
 800ce38:	2102      	movs	r1, #2
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f001 fa0e 	bl	800e25c <RCCEx_PLL3_Config>
 800ce40:	4603      	mov	r3, r0
 800ce42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ce44:	e003      	b.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	75fb      	strb	r3, [r7, #23]
      break;
 800ce4a:	e000      	b.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800ce4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce4e:	7dfb      	ldrb	r3, [r7, #23]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d10a      	bne.n	800ce6a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ce54:	4b22      	ldr	r3, [pc, #136]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce62:	491f      	ldr	r1, [pc, #124]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce64:	4313      	orrs	r3, r2
 800ce66:	658b      	str	r3, [r1, #88]	; 0x58
 800ce68:	e001      	b.n	800ce6e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
 800ce6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d036      	beq.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce84:	d01c      	beq.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ce86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce8a:	d816      	bhi.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ce8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce90:	d003      	beq.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ce92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce96:	d007      	beq.n	800cea8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800ce98:	e00f      	b.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce9a:	4b11      	ldr	r3, [pc, #68]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9e:	4a10      	ldr	r2, [pc, #64]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cea4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800cea6:	e00c      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3324      	adds	r3, #36	; 0x24
 800ceac:	2101      	movs	r1, #1
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f001 f9d4 	bl	800e25c <RCCEx_PLL3_Config>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ceb8:	e003      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	75fb      	strb	r3, [r7, #23]
      break;
 800cebe:	e000      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800cec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10d      	bne.n	800cee4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cec8:	4b05      	ldr	r3, [pc, #20]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ceca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cecc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ced6:	4902      	ldr	r1, [pc, #8]	; (800cee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ced8:	4313      	orrs	r3, r2
 800ceda:	654b      	str	r3, [r1, #84]	; 0x54
 800cedc:	e004      	b.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800cede:	bf00      	nop
 800cee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
 800cee6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d029      	beq.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d003      	beq.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800cefc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf00:	d007      	beq.n	800cf12 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800cf02:	e00f      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf04:	4b61      	ldr	r3, [pc, #388]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf08:	4a60      	ldr	r2, [pc, #384]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800cf10:	e00b      	b.n	800cf2a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3304      	adds	r3, #4
 800cf16:	2102      	movs	r1, #2
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f001 f8ed 	bl	800e0f8 <RCCEx_PLL2_Config>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800cf22:	e002      	b.n	800cf2a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800cf24:	2301      	movs	r3, #1
 800cf26:	75fb      	strb	r3, [r7, #23]
      break;
 800cf28:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf2a:	7dfb      	ldrb	r3, [r7, #23]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d109      	bne.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cf30:	4b56      	ldr	r3, [pc, #344]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf3c:	4953      	ldr	r1, [pc, #332]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cf42:	e001      	b.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf44:	7dfb      	ldrb	r3, [r7, #23]
 800cf46:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00a      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	3324      	adds	r3, #36	; 0x24
 800cf58:	2102      	movs	r1, #2
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f001 f97e 	bl	800e25c <RCCEx_PLL3_Config>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d001      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800cf66:	2301      	movs	r3, #1
 800cf68:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d030      	beq.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf7e:	d017      	beq.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800cf80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf84:	d811      	bhi.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800cf86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf8a:	d013      	beq.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800cf8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf90:	d80b      	bhi.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d010      	beq.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800cf96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf9a:	d106      	bne.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf9c:	4b3b      	ldr	r3, [pc, #236]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa0:	4a3a      	ldr	r2, [pc, #232]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800cfa8:	e007      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	75fb      	strb	r3, [r7, #23]
      break;
 800cfae:	e004      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cfb0:	bf00      	nop
 800cfb2:	e002      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cfb4:	bf00      	nop
 800cfb6:	e000      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cfb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cfba:	7dfb      	ldrb	r3, [r7, #23]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d109      	bne.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cfc0:	4b32      	ldr	r3, [pc, #200]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfcc:	492f      	ldr	r1, [pc, #188]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	654b      	str	r3, [r1, #84]	; 0x54
 800cfd2:	e001      	b.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfd4:	7dfb      	ldrb	r3, [r7, #23]
 800cfd6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d008      	beq.n	800cff6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cfe4:	4b29      	ldr	r3, [pc, #164]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfe8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cff0:	4926      	ldr	r1, [pc, #152]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cff2:	4313      	orrs	r3, r2
 800cff4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d008      	beq.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d002:	4b22      	ldr	r3, [pc, #136]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d006:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d00e:	491f      	ldr	r1, [pc, #124]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d010:	4313      	orrs	r3, r2
 800d012:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00d      	beq.n	800d03c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d020:	4b1a      	ldr	r3, [pc, #104]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	4a19      	ldr	r2, [pc, #100]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d026:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d02a:	6113      	str	r3, [r2, #16]
 800d02c:	4b17      	ldr	r3, [pc, #92]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d02e:	691a      	ldr	r2, [r3, #16]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d036:	4915      	ldr	r1, [pc, #84]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d038:	4313      	orrs	r3, r2
 800d03a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	da08      	bge.n	800d056 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d044:	4b11      	ldr	r3, [pc, #68]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d048:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d050:	490e      	ldr	r1, [pc, #56]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d052:	4313      	orrs	r3, r2
 800d054:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d009      	beq.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d062:	4b0a      	ldr	r3, [pc, #40]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d066:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d070:	4906      	ldr	r1, [pc, #24]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d072:	4313      	orrs	r3, r2
 800d074:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d076:	7dbb      	ldrb	r3, [r7, #22]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d101      	bne.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800d07c:	2300      	movs	r3, #0
 800d07e:	e000      	b.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800d080:	2301      	movs	r3, #1
}
 800d082:	4618      	mov	r0, r3
 800d084:	3718      	adds	r7, #24
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	58024400 	.word	0x58024400

0800d090 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b090      	sub	sp, #64	; 0x40
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d09e:	f040 8089 	bne.w	800d1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800d0a2:	4b95      	ldr	r3, [pc, #596]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0a6:	f003 0307 	and.w	r3, r3, #7
 800d0aa:	633b      	str	r3, [r7, #48]	; 0x30
 800d0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ae:	2b04      	cmp	r3, #4
 800d0b0:	d87d      	bhi.n	800d1ae <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800d0b2:	a201      	add	r2, pc, #4	; (adr r2, 800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800d0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b8:	0800d0cd 	.word	0x0800d0cd
 800d0bc:	0800d0f1 	.word	0x0800d0f1
 800d0c0:	0800d115 	.word	0x0800d115
 800d0c4:	0800d1a9 	.word	0x0800d1a9
 800d0c8:	0800d139 	.word	0x0800d139

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0cc:	4b8a      	ldr	r3, [pc, #552]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0d8:	d107      	bne.n	800d0ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f000 feb8 	bl	800de54 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d0e8:	e3ed      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d0ee:	e3ea      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0f0:	4b81      	ldr	r3, [pc, #516]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0fc:	d107      	bne.n	800d10e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0fe:	f107 0318 	add.w	r3, r7, #24
 800d102:	4618      	mov	r0, r3
 800d104:	f000 fbfe 	bl	800d904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d10c:	e3db      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d112:	e3d8      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d114:	4b78      	ldr	r3, [pc, #480]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d11c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d120:	d107      	bne.n	800d132 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d122:	f107 030c 	add.w	r3, r7, #12
 800d126:	4618      	mov	r0, r3
 800d128:	f000 fd40 	bl	800dbac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d130:	e3c9      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d136:	e3c6      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d138:	4b6f      	ldr	r3, [pc, #444]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d13a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d13c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d140:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d142:	4b6d      	ldr	r3, [pc, #436]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f003 0304 	and.w	r3, r3, #4
 800d14a:	2b04      	cmp	r3, #4
 800d14c:	d10c      	bne.n	800d168 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800d14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d150:	2b00      	cmp	r3, #0
 800d152:	d109      	bne.n	800d168 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d154:	4b68      	ldr	r3, [pc, #416]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	08db      	lsrs	r3, r3, #3
 800d15a:	f003 0303 	and.w	r3, r3, #3
 800d15e:	4a67      	ldr	r2, [pc, #412]	; (800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800d160:	fa22 f303 	lsr.w	r3, r2, r3
 800d164:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d166:	e01e      	b.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d168:	4b63      	ldr	r3, [pc, #396]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d174:	d106      	bne.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800d176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d17c:	d102      	bne.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d17e:	4b60      	ldr	r3, [pc, #384]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d180:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d182:	e010      	b.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d184:	4b5c      	ldr	r3, [pc, #368]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d18c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d190:	d106      	bne.n	800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d198:	d102      	bne.n	800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d19a:	4b5a      	ldr	r3, [pc, #360]	; (800d304 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800d19c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d19e:	e002      	b.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d1a4:	e38f      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d1a6:	e38e      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d1a8:	4b57      	ldr	r3, [pc, #348]	; (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d1ac:	e38b      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d1b2:	e388      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1ba:	f040 80a7 	bne.w	800d30c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800d1be:	4b4e      	ldr	r3, [pc, #312]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800d1c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d1ce:	d054      	beq.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d1d6:	f200 808b 	bhi.w	800d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d1e0:	f000 8083 	beq.w	800d2ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800d1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d1ea:	f200 8081 	bhi.w	800d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1f4:	d02f      	beq.n	800d256 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1fc:	d878      	bhi.n	800d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d200:	2b00      	cmp	r3, #0
 800d202:	d004      	beq.n	800d20e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800d204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d20a:	d012      	beq.n	800d232 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800d20c:	e070      	b.n	800d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d20e:	4b3a      	ldr	r3, [pc, #232]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d21a:	d107      	bne.n	800d22c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d21c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d220:	4618      	mov	r0, r3
 800d222:	f000 fe17 	bl	800de54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d228:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d22a:	e34c      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d22c:	2300      	movs	r3, #0
 800d22e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d230:	e349      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d232:	4b31      	ldr	r3, [pc, #196]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d23a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d23e:	d107      	bne.n	800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d240:	f107 0318 	add.w	r3, r7, #24
 800d244:	4618      	mov	r0, r3
 800d246:	f000 fb5d 	bl	800d904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d24e:	e33a      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d254:	e337      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d256:	4b28      	ldr	r3, [pc, #160]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d25e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d262:	d107      	bne.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d264:	f107 030c 	add.w	r3, r7, #12
 800d268:	4618      	mov	r0, r3
 800d26a:	f000 fc9f 	bl	800dbac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d272:	e328      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d278:	e325      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d27a:	4b1f      	ldr	r3, [pc, #124]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d27c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d27e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d282:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d284:	4b1c      	ldr	r3, [pc, #112]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f003 0304 	and.w	r3, r3, #4
 800d28c:	2b04      	cmp	r3, #4
 800d28e:	d10c      	bne.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800d290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d292:	2b00      	cmp	r3, #0
 800d294:	d109      	bne.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d296:	4b18      	ldr	r3, [pc, #96]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	08db      	lsrs	r3, r3, #3
 800d29c:	f003 0303 	and.w	r3, r3, #3
 800d2a0:	4a16      	ldr	r2, [pc, #88]	; (800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800d2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2a8:	e01e      	b.n	800d2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d2aa:	4b13      	ldr	r3, [pc, #76]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2b6:	d106      	bne.n	800d2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800d2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d2be:	d102      	bne.n	800d2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d2c0:	4b0f      	ldr	r3, [pc, #60]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2c4:	e010      	b.n	800d2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d2c6:	4b0c      	ldr	r3, [pc, #48]	; (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2d2:	d106      	bne.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800d2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2da:	d102      	bne.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d2dc:	4b09      	ldr	r3, [pc, #36]	; (800d304 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800d2de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2e0:	e002      	b.n	800d2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d2e6:	e2ee      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d2e8:	e2ed      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d2ea:	4b07      	ldr	r3, [pc, #28]	; (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d2ee:	e2ea      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d2f4:	e2e7      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d2f6:	bf00      	nop
 800d2f8:	58024400 	.word	0x58024400
 800d2fc:	03d09000 	.word	0x03d09000
 800d300:	003d0900 	.word	0x003d0900
 800d304:	017d7840 	.word	0x017d7840
 800d308:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d312:	f040 809c 	bne.w	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800d316:	4b9e      	ldr	r3, [pc, #632]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d31a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800d31e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d326:	d054      	beq.n	800d3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d32e:	f200 808b 	bhi.w	800d448 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d338:	f000 8083 	beq.w	800d442 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d342:	f200 8081 	bhi.w	800d448 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d34c:	d02f      	beq.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d354:	d878      	bhi.n	800d448 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d004      	beq.n	800d366 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800d35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d362:	d012      	beq.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d364:	e070      	b.n	800d448 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d366:	4b8a      	ldr	r3, [pc, #552]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d36e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d372:	d107      	bne.n	800d384 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d378:	4618      	mov	r0, r3
 800d37a:	f000 fd6b 	bl	800de54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d380:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d382:	e2a0      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d384:	2300      	movs	r3, #0
 800d386:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d388:	e29d      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d38a:	4b81      	ldr	r3, [pc, #516]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d396:	d107      	bne.n	800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d398:	f107 0318 	add.w	r3, r7, #24
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 fab1 	bl	800d904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800d3a6:	e28e      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d3ac:	e28b      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d3ae:	4b78      	ldr	r3, [pc, #480]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3ba:	d107      	bne.n	800d3cc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3bc:	f107 030c 	add.w	r3, r7, #12
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f000 fbf3 	bl	800dbac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d3ca:	e27c      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d3d0:	e279      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d3d2:	4b6f      	ldr	r3, [pc, #444]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d3d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d3da:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d3dc:	4b6c      	ldr	r3, [pc, #432]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f003 0304 	and.w	r3, r3, #4
 800d3e4:	2b04      	cmp	r3, #4
 800d3e6:	d10c      	bne.n	800d402 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800d3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d109      	bne.n	800d402 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d3ee:	4b68      	ldr	r3, [pc, #416]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	08db      	lsrs	r3, r3, #3
 800d3f4:	f003 0303 	and.w	r3, r3, #3
 800d3f8:	4a66      	ldr	r2, [pc, #408]	; (800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800d3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d400:	e01e      	b.n	800d440 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d402:	4b63      	ldr	r3, [pc, #396]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d40a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d40e:	d106      	bne.n	800d41e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800d410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d416:	d102      	bne.n	800d41e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d418:	4b5f      	ldr	r3, [pc, #380]	; (800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800d41a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d41c:	e010      	b.n	800d440 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d41e:	4b5c      	ldr	r3, [pc, #368]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d42a:	d106      	bne.n	800d43a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800d42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d432:	d102      	bne.n	800d43a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d434:	4b59      	ldr	r3, [pc, #356]	; (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800d436:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d438:	e002      	b.n	800d440 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d43e:	e242      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d440:	e241      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d442:	4b57      	ldr	r3, [pc, #348]	; (800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800d444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d446:	e23e      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d448:	2300      	movs	r3, #0
 800d44a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d44c:	e23b      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d454:	f040 80a6 	bne.w	800d5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800d458:	4b4d      	ldr	r3, [pc, #308]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d45c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d460:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d468:	d054      	beq.n	800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800d46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d470:	f200 808b 	bhi.w	800d58a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d476:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d47a:	f000 8083 	beq.w	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800d47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d480:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d484:	f200 8081 	bhi.w	800d58a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d48e:	d02f      	beq.n	800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800d490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d496:	d878      	bhi.n	800d58a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d004      	beq.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800d49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4a4:	d012      	beq.n	800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800d4a6:	e070      	b.n	800d58a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d4a8:	4b39      	ldr	r3, [pc, #228]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d4b4:	d107      	bne.n	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d4b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f000 fcca 	bl	800de54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d4c4:	e1ff      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d4ca:	e1fc      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4cc:	4b30      	ldr	r3, [pc, #192]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d4d8:	d107      	bne.n	800d4ea <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4da:	f107 0318 	add.w	r3, r7, #24
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f000 fa10 	bl	800d904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d4e8:	e1ed      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d4ee:	e1ea      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d4f0:	4b27      	ldr	r3, [pc, #156]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4fc:	d107      	bne.n	800d50e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4fe:	f107 030c 	add.w	r3, r7, #12
 800d502:	4618      	mov	r0, r3
 800d504:	f000 fb52 	bl	800dbac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d50c:	e1db      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d512:	e1d8      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d514:	4b1e      	ldr	r3, [pc, #120]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d51c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d51e:	4b1c      	ldr	r3, [pc, #112]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f003 0304 	and.w	r3, r3, #4
 800d526:	2b04      	cmp	r3, #4
 800d528:	d10c      	bne.n	800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800d52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d109      	bne.n	800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d530:	4b17      	ldr	r3, [pc, #92]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	08db      	lsrs	r3, r3, #3
 800d536:	f003 0303 	and.w	r3, r3, #3
 800d53a:	4a16      	ldr	r2, [pc, #88]	; (800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d53c:	fa22 f303 	lsr.w	r3, r2, r3
 800d540:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d542:	e01e      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d544:	4b12      	ldr	r3, [pc, #72]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d54c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d550:	d106      	bne.n	800d560 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800d552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d558:	d102      	bne.n	800d560 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d55a:	4b0f      	ldr	r3, [pc, #60]	; (800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800d55c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d55e:	e010      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d560:	4b0b      	ldr	r3, [pc, #44]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d56c:	d106      	bne.n	800d57c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800d56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d574:	d102      	bne.n	800d57c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d576:	4b09      	ldr	r3, [pc, #36]	; (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800d578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d57a:	e002      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d580:	e1a1      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d582:	e1a0      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d584:	4b06      	ldr	r3, [pc, #24]	; (800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800d586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d588:	e19d      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d58e:	e19a      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d590:	58024400 	.word	0x58024400
 800d594:	03d09000 	.word	0x03d09000
 800d598:	003d0900 	.word	0x003d0900
 800d59c:	017d7840 	.word	0x017d7840
 800d5a0:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d5aa:	d173      	bne.n	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800d5ac:	4b9a      	ldr	r3, [pc, #616]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d5b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d5bc:	d02f      	beq.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800d5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d5c4:	d863      	bhi.n	800d68e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800d5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d004      	beq.n	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5d2:	d012      	beq.n	800d5fa <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800d5d4:	e05b      	b.n	800d68e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d5d6:	4b90      	ldr	r3, [pc, #576]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d5e2:	d107      	bne.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5e4:	f107 0318 	add.w	r3, r7, #24
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f000 f98b 	bl	800d904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d5f2:	e168      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d5f8:	e165      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d5fa:	4b87      	ldr	r3, [pc, #540]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d606:	d107      	bne.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d608:	f107 030c 	add.w	r3, r7, #12
 800d60c:	4618      	mov	r0, r3
 800d60e:	f000 facd 	bl	800dbac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d616:	e156      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d618:	2300      	movs	r3, #0
 800d61a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d61c:	e153      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d61e:	4b7e      	ldr	r3, [pc, #504]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d622:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d626:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d628:	4b7b      	ldr	r3, [pc, #492]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f003 0304 	and.w	r3, r3, #4
 800d630:	2b04      	cmp	r3, #4
 800d632:	d10c      	bne.n	800d64e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800d634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d636:	2b00      	cmp	r3, #0
 800d638:	d109      	bne.n	800d64e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d63a:	4b77      	ldr	r3, [pc, #476]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	08db      	lsrs	r3, r3, #3
 800d640:	f003 0303 	and.w	r3, r3, #3
 800d644:	4a75      	ldr	r2, [pc, #468]	; (800d81c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d646:	fa22 f303 	lsr.w	r3, r2, r3
 800d64a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d64c:	e01e      	b.n	800d68c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d64e:	4b72      	ldr	r3, [pc, #456]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d65a:	d106      	bne.n	800d66a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800d65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d65e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d662:	d102      	bne.n	800d66a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d664:	4b6e      	ldr	r3, [pc, #440]	; (800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800d666:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d668:	e010      	b.n	800d68c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d66a:	4b6b      	ldr	r3, [pc, #428]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d676:	d106      	bne.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d67a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d67e:	d102      	bne.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d680:	4b68      	ldr	r3, [pc, #416]	; (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800d682:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d684:	e002      	b.n	800d68c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d686:	2300      	movs	r3, #0
 800d688:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d68a:	e11c      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d68c:	e11b      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d692:	e118      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d69a:	d133      	bne.n	800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800d69c:	4b5e      	ldr	r3, [pc, #376]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d69e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d004      	beq.n	800d6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6b2:	d012      	beq.n	800d6da <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800d6b4:	e023      	b.n	800d6fe <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d6b6:	4b58      	ldr	r3, [pc, #352]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d6c2:	d107      	bne.n	800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d6c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f000 fbc3 	bl	800de54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d6d2:	e0f8      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d6d8:	e0f5      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d6da:	4b4f      	ldr	r3, [pc, #316]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d6e6:	d107      	bne.n	800d6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6e8:	f107 0318 	add.w	r3, r7, #24
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f000 f909 	bl	800d904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d6f6:	e0e6      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d6fc:	e0e3      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d6fe:	2300      	movs	r3, #0
 800d700:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d702:	e0e0      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d70a:	f040 808d 	bne.w	800d828 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800d70e:	4b42      	ldr	r3, [pc, #264]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d712:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d716:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d71e:	d06b      	beq.n	800d7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800d720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d726:	d874      	bhi.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d72e:	d056      	beq.n	800d7de <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800d730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d736:	d86c      	bhi.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d73e:	d03b      	beq.n	800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800d740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d742:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d746:	d864      	bhi.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d74e:	d021      	beq.n	800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d756:	d85c      	bhi.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d004      	beq.n	800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800d75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d764:	d004      	beq.n	800d770 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800d766:	e054      	b.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d768:	f000 f8b6 	bl	800d8d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d76c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800d76e:	e0aa      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d770:	4b29      	ldr	r3, [pc, #164]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d77c:	d107      	bne.n	800d78e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d77e:	f107 0318 	add.w	r3, r7, #24
 800d782:	4618      	mov	r0, r3
 800d784:	f000 f8be 	bl	800d904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d78c:	e09b      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d78e:	2300      	movs	r3, #0
 800d790:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d792:	e098      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d794:	4b20      	ldr	r3, [pc, #128]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d79c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7a0:	d107      	bne.n	800d7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7a2:	f107 030c 	add.w	r3, r7, #12
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f000 fa00 	bl	800dbac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d7b0:	e089      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7b6:	e086      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d7b8:	4b17      	ldr	r3, [pc, #92]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f003 0304 	and.w	r3, r3, #4
 800d7c0:	2b04      	cmp	r3, #4
 800d7c2:	d109      	bne.n	800d7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d7c4:	4b14      	ldr	r3, [pc, #80]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	08db      	lsrs	r3, r3, #3
 800d7ca:	f003 0303 	and.w	r3, r3, #3
 800d7ce:	4a13      	ldr	r2, [pc, #76]	; (800d81c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d7d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d7d6:	e076      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7dc:	e073      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d7de:	4b0e      	ldr	r3, [pc, #56]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7ea:	d102      	bne.n	800d7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800d7ec:	4b0c      	ldr	r3, [pc, #48]	; (800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800d7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d7f0:	e069      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7f6:	e066      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d7f8:	4b07      	ldr	r3, [pc, #28]	; (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d804:	d102      	bne.n	800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800d806:	4b07      	ldr	r3, [pc, #28]	; (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800d808:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d80a:	e05c      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d80c:	2300      	movs	r3, #0
 800d80e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d810:	e059      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800d812:	2300      	movs	r3, #0
 800d814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d816:	e056      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d818:	58024400 	.word	0x58024400
 800d81c:	03d09000 	.word	0x03d09000
 800d820:	003d0900 	.word	0x003d0900
 800d824:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d82e:	d148      	bne.n	800d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800d830:	4b27      	ldr	r3, [pc, #156]	; (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d838:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d840:	d02a      	beq.n	800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800d842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d848:	d838      	bhi.n	800d8bc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800d84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d004      	beq.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800d850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d856:	d00d      	beq.n	800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800d858:	e030      	b.n	800d8bc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d85a:	4b1d      	ldr	r3, [pc, #116]	; (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d866:	d102      	bne.n	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800d868:	4b1a      	ldr	r3, [pc, #104]	; (800d8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d86a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d86c:	e02b      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d872:	e028      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d874:	4b16      	ldr	r3, [pc, #88]	; (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d87c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d880:	d107      	bne.n	800d892 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d886:	4618      	mov	r0, r3
 800d888:	f000 fae4 	bl	800de54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d890:	e019      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d896:	e016      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d898:	4b0d      	ldr	r3, [pc, #52]	; (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d8a4:	d107      	bne.n	800d8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8a6:	f107 0318 	add.w	r3, r7, #24
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f000 f82a 	bl	800d904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d8b4:	e007      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d8ba:	e004      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d8c0:	e001      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800d8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3740      	adds	r7, #64	; 0x40
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	58024400 	.word	0x58024400
 800d8d4:	017d7840 	.word	0x017d7840

0800d8d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d8dc:	f7fe fc66 	bl	800c1ac <HAL_RCC_GetHCLKFreq>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	4b06      	ldr	r3, [pc, #24]	; (800d8fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d8e4:	6a1b      	ldr	r3, [r3, #32]
 800d8e6:	091b      	lsrs	r3, r3, #4
 800d8e8:	f003 0307 	and.w	r3, r3, #7
 800d8ec:	4904      	ldr	r1, [pc, #16]	; (800d900 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d8ee:	5ccb      	ldrb	r3, [r1, r3]
 800d8f0:	f003 031f 	and.w	r3, r3, #31
 800d8f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	58024400 	.word	0x58024400
 800d900:	08014da0 	.word	0x08014da0

0800d904 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d904:	b480      	push	{r7}
 800d906:	b089      	sub	sp, #36	; 0x24
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d90c:	4ba1      	ldr	r3, [pc, #644]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d910:	f003 0303 	and.w	r3, r3, #3
 800d914:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d916:	4b9f      	ldr	r3, [pc, #636]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d91a:	0b1b      	lsrs	r3, r3, #12
 800d91c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d920:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d922:	4b9c      	ldr	r3, [pc, #624]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d926:	091b      	lsrs	r3, r3, #4
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d92e:	4b99      	ldr	r3, [pc, #612]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d932:	08db      	lsrs	r3, r3, #3
 800d934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d938:	693a      	ldr	r2, [r7, #16]
 800d93a:	fb02 f303 	mul.w	r3, r2, r3
 800d93e:	ee07 3a90 	vmov	s15, r3
 800d942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d946:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f000 8111 	beq.w	800db74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	2b02      	cmp	r3, #2
 800d956:	f000 8083 	beq.w	800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	f200 80a1 	bhi.w	800daa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d003      	beq.n	800d970 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d056      	beq.n	800da1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d96e:	e099      	b.n	800daa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d970:	4b88      	ldr	r3, [pc, #544]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f003 0320 	and.w	r3, r3, #32
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d02d      	beq.n	800d9d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d97c:	4b85      	ldr	r3, [pc, #532]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	08db      	lsrs	r3, r3, #3
 800d982:	f003 0303 	and.w	r3, r3, #3
 800d986:	4a84      	ldr	r2, [pc, #528]	; (800db98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d988:	fa22 f303 	lsr.w	r3, r2, r3
 800d98c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	ee07 3a90 	vmov	s15, r3
 800d994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	ee07 3a90 	vmov	s15, r3
 800d99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9a6:	4b7b      	ldr	r3, [pc, #492]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ae:	ee07 3a90 	vmov	s15, r3
 800d9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800db9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d9d6:	e087      	b.n	800dae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	ee07 3a90 	vmov	s15, r3
 800d9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dba0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9ea:	4b6a      	ldr	r3, [pc, #424]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9f2:	ee07 3a90 	vmov	s15, r3
 800d9f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800db9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da1a:	e065      	b.n	800dae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	ee07 3a90 	vmov	s15, r3
 800da22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800da2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da2e:	4b59      	ldr	r3, [pc, #356]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da36:	ee07 3a90 	vmov	s15, r3
 800da3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800da42:	eddf 5a56 	vldr	s11, [pc, #344]	; 800db9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da5e:	e043      	b.n	800dae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	ee07 3a90 	vmov	s15, r3
 800da66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800dba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800da6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da72:	4b48      	ldr	r3, [pc, #288]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da7a:	ee07 3a90 	vmov	s15, r3
 800da7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da82:	ed97 6a03 	vldr	s12, [r7, #12]
 800da86:	eddf 5a45 	vldr	s11, [pc, #276]	; 800db9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800daa2:	e021      	b.n	800dae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	ee07 3a90 	vmov	s15, r3
 800daaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800dab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dab6:	4b37      	ldr	r3, [pc, #220]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dabe:	ee07 3a90 	vmov	s15, r3
 800dac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dac6:	ed97 6a03 	vldr	s12, [r7, #12]
 800daca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800db9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dae6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800dae8:	4b2a      	ldr	r3, [pc, #168]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800daea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daec:	0a5b      	lsrs	r3, r3, #9
 800daee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daf2:	ee07 3a90 	vmov	s15, r3
 800daf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dafa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dafe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db02:	edd7 6a07 	vldr	s13, [r7, #28]
 800db06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db0e:	ee17 2a90 	vmov	r2, s15
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800db16:	4b1f      	ldr	r3, [pc, #124]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1a:	0c1b      	lsrs	r3, r3, #16
 800db1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db20:	ee07 3a90 	vmov	s15, r3
 800db24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db30:	edd7 6a07 	vldr	s13, [r7, #28]
 800db34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db3c:	ee17 2a90 	vmov	r2, s15
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800db44:	4b13      	ldr	r3, [pc, #76]	; (800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db48:	0e1b      	lsrs	r3, r3, #24
 800db4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db4e:	ee07 3a90 	vmov	s15, r3
 800db52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800db62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db6a:	ee17 2a90 	vmov	r2, s15
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800db72:	e008      	b.n	800db86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	609a      	str	r2, [r3, #8]
}
 800db86:	bf00      	nop
 800db88:	3724      	adds	r7, #36	; 0x24
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr
 800db92:	bf00      	nop
 800db94:	58024400 	.word	0x58024400
 800db98:	03d09000 	.word	0x03d09000
 800db9c:	46000000 	.word	0x46000000
 800dba0:	4c742400 	.word	0x4c742400
 800dba4:	4a742400 	.word	0x4a742400
 800dba8:	4bbebc20 	.word	0x4bbebc20

0800dbac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b089      	sub	sp, #36	; 0x24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dbb4:	4ba1      	ldr	r3, [pc, #644]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb8:	f003 0303 	and.w	r3, r3, #3
 800dbbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800dbbe:	4b9f      	ldr	r3, [pc, #636]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbc2:	0d1b      	lsrs	r3, r3, #20
 800dbc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800dbca:	4b9c      	ldr	r3, [pc, #624]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbce:	0a1b      	lsrs	r3, r3, #8
 800dbd0:	f003 0301 	and.w	r3, r3, #1
 800dbd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800dbd6:	4b99      	ldr	r3, [pc, #612]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbda:	08db      	lsrs	r3, r3, #3
 800dbdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbe0:	693a      	ldr	r2, [r7, #16]
 800dbe2:	fb02 f303 	mul.w	r3, r2, r3
 800dbe6:	ee07 3a90 	vmov	s15, r3
 800dbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f000 8111 	beq.w	800de1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	f000 8083 	beq.w	800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	f200 80a1 	bhi.w	800dd4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d003      	beq.n	800dc18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d056      	beq.n	800dcc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dc16:	e099      	b.n	800dd4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc18:	4b88      	ldr	r3, [pc, #544]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f003 0320 	and.w	r3, r3, #32
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d02d      	beq.n	800dc80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dc24:	4b85      	ldr	r3, [pc, #532]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	08db      	lsrs	r3, r3, #3
 800dc2a:	f003 0303 	and.w	r3, r3, #3
 800dc2e:	4a84      	ldr	r2, [pc, #528]	; (800de40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dc30:	fa22 f303 	lsr.w	r3, r2, r3
 800dc34:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	ee07 3a90 	vmov	s15, r3
 800dc3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	ee07 3a90 	vmov	s15, r3
 800dc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc4e:	4b7b      	ldr	r3, [pc, #492]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc56:	ee07 3a90 	vmov	s15, r3
 800dc5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc62:	eddf 5a78 	vldr	s11, [pc, #480]	; 800de44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800dc7e:	e087      	b.n	800dd90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	ee07 3a90 	vmov	s15, r3
 800dc86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800de48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dc8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc92:	4b6a      	ldr	r3, [pc, #424]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc9a:	ee07 3a90 	vmov	s15, r3
 800dc9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dca2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dca6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800de44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dcc2:	e065      	b.n	800dd90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	ee07 3a90 	vmov	s15, r3
 800dcca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dcd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcd6:	4b59      	ldr	r3, [pc, #356]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcde:	ee07 3a90 	vmov	s15, r3
 800dce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dce6:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800de44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dd06:	e043      	b.n	800dd90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	ee07 3a90 	vmov	s15, r3
 800dd0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800de50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dd16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd1a:	4b48      	ldr	r3, [pc, #288]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd22:	ee07 3a90 	vmov	s15, r3
 800dd26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800de44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dd4a:	e021      	b.n	800dd90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	ee07 3a90 	vmov	s15, r3
 800dd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800de4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dd5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd5e:	4b37      	ldr	r3, [pc, #220]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd66:	ee07 3a90 	vmov	s15, r3
 800dd6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd72:	eddf 5a34 	vldr	s11, [pc, #208]	; 800de44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dd8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800dd90:	4b2a      	ldr	r3, [pc, #168]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd94:	0a5b      	lsrs	r3, r3, #9
 800dd96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd9a:	ee07 3a90 	vmov	s15, r3
 800dd9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dda2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dda6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddb6:	ee17 2a90 	vmov	r2, s15
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ddbe:	4b1f      	ldr	r3, [pc, #124]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddc2:	0c1b      	lsrs	r3, r3, #16
 800ddc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddc8:	ee07 3a90 	vmov	s15, r3
 800ddcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800dddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dde0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dde4:	ee17 2a90 	vmov	r2, s15
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ddec:	4b13      	ldr	r3, [pc, #76]	; (800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf0:	0e1b      	lsrs	r3, r3, #24
 800ddf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddf6:	ee07 3a90 	vmov	s15, r3
 800ddfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de06:	edd7 6a07 	vldr	s13, [r7, #28]
 800de0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de12:	ee17 2a90 	vmov	r2, s15
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800de1a:	e008      	b.n	800de2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2200      	movs	r2, #0
 800de20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	609a      	str	r2, [r3, #8]
}
 800de2e:	bf00      	nop
 800de30:	3724      	adds	r7, #36	; 0x24
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	58024400 	.word	0x58024400
 800de40:	03d09000 	.word	0x03d09000
 800de44:	46000000 	.word	0x46000000
 800de48:	4c742400 	.word	0x4c742400
 800de4c:	4a742400 	.word	0x4a742400
 800de50:	4bbebc20 	.word	0x4bbebc20

0800de54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800de54:	b480      	push	{r7}
 800de56:	b089      	sub	sp, #36	; 0x24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800de5c:	4ba0      	ldr	r3, [pc, #640]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de60:	f003 0303 	and.w	r3, r3, #3
 800de64:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800de66:	4b9e      	ldr	r3, [pc, #632]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de6a:	091b      	lsrs	r3, r3, #4
 800de6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de70:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800de72:	4b9b      	ldr	r3, [pc, #620]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de76:	f003 0301 	and.w	r3, r3, #1
 800de7a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800de7c:	4b98      	ldr	r3, [pc, #608]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de80:	08db      	lsrs	r3, r3, #3
 800de82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de86:	693a      	ldr	r2, [r7, #16]
 800de88:	fb02 f303 	mul.w	r3, r2, r3
 800de8c:	ee07 3a90 	vmov	s15, r3
 800de90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 8111 	beq.w	800e0c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	f000 8083 	beq.w	800dfae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	2b02      	cmp	r3, #2
 800deac:	f200 80a1 	bhi.w	800dff2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d003      	beq.n	800debe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d056      	beq.n	800df6a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800debc:	e099      	b.n	800dff2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800debe:	4b88      	ldr	r3, [pc, #544]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f003 0320 	and.w	r3, r3, #32
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d02d      	beq.n	800df26 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800deca:	4b85      	ldr	r3, [pc, #532]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	08db      	lsrs	r3, r3, #3
 800ded0:	f003 0303 	and.w	r3, r3, #3
 800ded4:	4a83      	ldr	r2, [pc, #524]	; (800e0e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ded6:	fa22 f303 	lsr.w	r3, r2, r3
 800deda:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	ee07 3a90 	vmov	s15, r3
 800dee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	ee07 3a90 	vmov	s15, r3
 800deec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800def0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800def4:	4b7a      	ldr	r3, [pc, #488]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800def6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800def8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800defc:	ee07 3a90 	vmov	s15, r3
 800df00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df04:	ed97 6a03 	vldr	s12, [r7, #12]
 800df08:	eddf 5a77 	vldr	s11, [pc, #476]	; 800e0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df20:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800df24:	e087      	b.n	800e036 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	ee07 3a90 	vmov	s15, r3
 800df2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800e0ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800df34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df38:	4b69      	ldr	r3, [pc, #420]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df40:	ee07 3a90 	vmov	s15, r3
 800df44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df48:	ed97 6a03 	vldr	s12, [r7, #12]
 800df4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800e0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800df68:	e065      	b.n	800e036 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	ee07 3a90 	vmov	s15, r3
 800df70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800e0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800df78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df7c:	4b58      	ldr	r3, [pc, #352]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df84:	ee07 3a90 	vmov	s15, r3
 800df88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800df90:	eddf 5a55 	vldr	s11, [pc, #340]	; 800e0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfa8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dfac:	e043      	b.n	800e036 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	ee07 3a90 	vmov	s15, r3
 800dfb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800e0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dfbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfc0:	4b47      	ldr	r3, [pc, #284]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dfc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfc8:	ee07 3a90 	vmov	s15, r3
 800dfcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfd0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfd4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dfd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dff0:	e021      	b.n	800e036 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	ee07 3a90 	vmov	s15, r3
 800dff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dffc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e0ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e004:	4b36      	ldr	r3, [pc, #216]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e00c:	ee07 3a90 	vmov	s15, r3
 800e010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e014:	ed97 6a03 	vldr	s12, [r7, #12]
 800e018:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e01c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e02c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e030:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e034:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800e036:	4b2a      	ldr	r3, [pc, #168]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e03a:	0a5b      	lsrs	r3, r3, #9
 800e03c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e040:	ee07 3a90 	vmov	s15, r3
 800e044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e04c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e050:	edd7 6a07 	vldr	s13, [r7, #28]
 800e054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e05c:	ee17 2a90 	vmov	r2, s15
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800e064:	4b1e      	ldr	r3, [pc, #120]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e068:	0c1b      	lsrs	r3, r3, #16
 800e06a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e06e:	ee07 3a90 	vmov	s15, r3
 800e072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e07a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e07e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e08a:	ee17 2a90 	vmov	r2, s15
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800e092:	4b13      	ldr	r3, [pc, #76]	; (800e0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e096:	0e1b      	lsrs	r3, r3, #24
 800e098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e09c:	ee07 3a90 	vmov	s15, r3
 800e0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e0ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0b8:	ee17 2a90 	vmov	r2, s15
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e0c0:	e008      	b.n	800e0d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	609a      	str	r2, [r3, #8]
}
 800e0d4:	bf00      	nop
 800e0d6:	3724      	adds	r7, #36	; 0x24
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr
 800e0e0:	58024400 	.word	0x58024400
 800e0e4:	03d09000 	.word	0x03d09000
 800e0e8:	46000000 	.word	0x46000000
 800e0ec:	4c742400 	.word	0x4c742400
 800e0f0:	4a742400 	.word	0x4a742400
 800e0f4:	4bbebc20 	.word	0x4bbebc20

0800e0f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e106:	4b53      	ldr	r3, [pc, #332]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e10a:	f003 0303 	and.w	r3, r3, #3
 800e10e:	2b03      	cmp	r3, #3
 800e110:	d101      	bne.n	800e116 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e099      	b.n	800e24a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e116:	4b4f      	ldr	r3, [pc, #316]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a4e      	ldr	r2, [pc, #312]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e11c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e122:	f7fa fc85 	bl	8008a30 <HAL_GetTick>
 800e126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e128:	e008      	b.n	800e13c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e12a:	f7fa fc81 	bl	8008a30 <HAL_GetTick>
 800e12e:	4602      	mov	r2, r0
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	1ad3      	subs	r3, r2, r3
 800e134:	2b02      	cmp	r3, #2
 800e136:	d901      	bls.n	800e13c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e138:	2303      	movs	r3, #3
 800e13a:	e086      	b.n	800e24a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e13c:	4b45      	ldr	r3, [pc, #276]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e144:	2b00      	cmp	r3, #0
 800e146:	d1f0      	bne.n	800e12a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e148:	4b42      	ldr	r3, [pc, #264]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e14c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	031b      	lsls	r3, r3, #12
 800e156:	493f      	ldr	r1, [pc, #252]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e158:	4313      	orrs	r3, r2
 800e15a:	628b      	str	r3, [r1, #40]	; 0x28
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	3b01      	subs	r3, #1
 800e162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	025b      	lsls	r3, r3, #9
 800e16e:	b29b      	uxth	r3, r3
 800e170:	431a      	orrs	r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	3b01      	subs	r3, #1
 800e178:	041b      	lsls	r3, r3, #16
 800e17a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e17e:	431a      	orrs	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	3b01      	subs	r3, #1
 800e186:	061b      	lsls	r3, r3, #24
 800e188:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e18c:	4931      	ldr	r1, [pc, #196]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e18e:	4313      	orrs	r3, r2
 800e190:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e192:	4b30      	ldr	r3, [pc, #192]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	695b      	ldr	r3, [r3, #20]
 800e19e:	492d      	ldr	r1, [pc, #180]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e1a4:	4b2b      	ldr	r3, [pc, #172]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a8:	f023 0220 	bic.w	r2, r3, #32
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	699b      	ldr	r3, [r3, #24]
 800e1b0:	4928      	ldr	r1, [pc, #160]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e1b6:	4b27      	ldr	r3, [pc, #156]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ba:	4a26      	ldr	r2, [pc, #152]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1bc:	f023 0310 	bic.w	r3, r3, #16
 800e1c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e1c2:	4b24      	ldr	r3, [pc, #144]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1c6:	4b24      	ldr	r3, [pc, #144]	; (800e258 <RCCEx_PLL2_Config+0x160>)
 800e1c8:	4013      	ands	r3, r2
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	69d2      	ldr	r2, [r2, #28]
 800e1ce:	00d2      	lsls	r2, r2, #3
 800e1d0:	4920      	ldr	r1, [pc, #128]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e1d6:	4b1f      	ldr	r3, [pc, #124]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1da:	4a1e      	ldr	r2, [pc, #120]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1dc:	f043 0310 	orr.w	r3, r3, #16
 800e1e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d106      	bne.n	800e1f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e1e8:	4b1a      	ldr	r3, [pc, #104]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ec:	4a19      	ldr	r2, [pc, #100]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e1f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e1f4:	e00f      	b.n	800e216 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d106      	bne.n	800e20a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e1fc:	4b15      	ldr	r3, [pc, #84]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e200:	4a14      	ldr	r2, [pc, #80]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e206:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e208:	e005      	b.n	800e216 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e20a:	4b12      	ldr	r3, [pc, #72]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20e:	4a11      	ldr	r2, [pc, #68]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e214:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e216:	4b0f      	ldr	r3, [pc, #60]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4a0e      	ldr	r2, [pc, #56]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e21c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e222:	f7fa fc05 	bl	8008a30 <HAL_GetTick>
 800e226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e228:	e008      	b.n	800e23c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e22a:	f7fa fc01 	bl	8008a30 <HAL_GetTick>
 800e22e:	4602      	mov	r2, r0
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	1ad3      	subs	r3, r2, r3
 800e234:	2b02      	cmp	r3, #2
 800e236:	d901      	bls.n	800e23c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e238:	2303      	movs	r3, #3
 800e23a:	e006      	b.n	800e24a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e23c:	4b05      	ldr	r3, [pc, #20]	; (800e254 <RCCEx_PLL2_Config+0x15c>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e244:	2b00      	cmp	r3, #0
 800e246:	d0f0      	beq.n	800e22a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e248:	7bfb      	ldrb	r3, [r7, #15]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	58024400 	.word	0x58024400
 800e258:	ffff0007 	.word	0xffff0007

0800e25c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e266:	2300      	movs	r3, #0
 800e268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e26a:	4b53      	ldr	r3, [pc, #332]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e26e:	f003 0303 	and.w	r3, r3, #3
 800e272:	2b03      	cmp	r3, #3
 800e274:	d101      	bne.n	800e27a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e276:	2301      	movs	r3, #1
 800e278:	e099      	b.n	800e3ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e27a:	4b4f      	ldr	r3, [pc, #316]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a4e      	ldr	r2, [pc, #312]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e286:	f7fa fbd3 	bl	8008a30 <HAL_GetTick>
 800e28a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e28c:	e008      	b.n	800e2a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e28e:	f7fa fbcf 	bl	8008a30 <HAL_GetTick>
 800e292:	4602      	mov	r2, r0
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	1ad3      	subs	r3, r2, r3
 800e298:	2b02      	cmp	r3, #2
 800e29a:	d901      	bls.n	800e2a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e29c:	2303      	movs	r3, #3
 800e29e:	e086      	b.n	800e3ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e2a0:	4b45      	ldr	r3, [pc, #276]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d1f0      	bne.n	800e28e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e2ac:	4b42      	ldr	r3, [pc, #264]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	051b      	lsls	r3, r3, #20
 800e2ba:	493f      	ldr	r1, [pc, #252]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	628b      	str	r3, [r1, #40]	; 0x28
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	3b01      	subs	r3, #1
 800e2c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	3b01      	subs	r3, #1
 800e2d0:	025b      	lsls	r3, r3, #9
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	431a      	orrs	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	3b01      	subs	r3, #1
 800e2dc:	041b      	lsls	r3, r3, #16
 800e2de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e2e2:	431a      	orrs	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	691b      	ldr	r3, [r3, #16]
 800e2e8:	3b01      	subs	r3, #1
 800e2ea:	061b      	lsls	r3, r3, #24
 800e2ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e2f0:	4931      	ldr	r1, [pc, #196]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e2f6:	4b30      	ldr	r3, [pc, #192]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	695b      	ldr	r3, [r3, #20]
 800e302:	492d      	ldr	r1, [pc, #180]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e304:	4313      	orrs	r3, r2
 800e306:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e308:	4b2b      	ldr	r3, [pc, #172]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	699b      	ldr	r3, [r3, #24]
 800e314:	4928      	ldr	r1, [pc, #160]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e316:	4313      	orrs	r3, r2
 800e318:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e31a:	4b27      	ldr	r3, [pc, #156]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e31e:	4a26      	ldr	r2, [pc, #152]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e326:	4b24      	ldr	r3, [pc, #144]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e32a:	4b24      	ldr	r3, [pc, #144]	; (800e3bc <RCCEx_PLL3_Config+0x160>)
 800e32c:	4013      	ands	r3, r2
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	69d2      	ldr	r2, [r2, #28]
 800e332:	00d2      	lsls	r2, r2, #3
 800e334:	4920      	ldr	r1, [pc, #128]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e336:	4313      	orrs	r3, r2
 800e338:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e33a:	4b1f      	ldr	r3, [pc, #124]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e33e:	4a1e      	ldr	r2, [pc, #120]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d106      	bne.n	800e35a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e34c:	4b1a      	ldr	r3, [pc, #104]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e350:	4a19      	ldr	r2, [pc, #100]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e356:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e358:	e00f      	b.n	800e37a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d106      	bne.n	800e36e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e360:	4b15      	ldr	r3, [pc, #84]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e364:	4a14      	ldr	r2, [pc, #80]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e366:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e36a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e36c:	e005      	b.n	800e37a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e36e:	4b12      	ldr	r3, [pc, #72]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e372:	4a11      	ldr	r2, [pc, #68]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e378:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e37a:	4b0f      	ldr	r3, [pc, #60]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a0e      	ldr	r2, [pc, #56]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e386:	f7fa fb53 	bl	8008a30 <HAL_GetTick>
 800e38a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e38c:	e008      	b.n	800e3a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e38e:	f7fa fb4f 	bl	8008a30 <HAL_GetTick>
 800e392:	4602      	mov	r2, r0
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	1ad3      	subs	r3, r2, r3
 800e398:	2b02      	cmp	r3, #2
 800e39a:	d901      	bls.n	800e3a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e39c:	2303      	movs	r3, #3
 800e39e:	e006      	b.n	800e3ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e3a0:	4b05      	ldr	r3, [pc, #20]	; (800e3b8 <RCCEx_PLL3_Config+0x15c>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d0f0      	beq.n	800e38e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	58024400 	.word	0x58024400
 800e3bc:	ffff0007 	.word	0xffff0007

0800e3c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d101      	bne.n	800e3d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	e0f1      	b.n	800e5b6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a78      	ldr	r2, [pc, #480]	; (800e5c0 <HAL_SPI_Init+0x200>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d00f      	beq.n	800e402 <HAL_SPI_Init+0x42>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4a77      	ldr	r2, [pc, #476]	; (800e5c4 <HAL_SPI_Init+0x204>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d00a      	beq.n	800e402 <HAL_SPI_Init+0x42>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a75      	ldr	r2, [pc, #468]	; (800e5c8 <HAL_SPI_Init+0x208>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d005      	beq.n	800e402 <HAL_SPI_Init+0x42>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	2b0f      	cmp	r3, #15
 800e3fc:	d901      	bls.n	800e402 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	e0d9      	b.n	800e5b6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f8e2 	bl	800e5cc <SPI_GetPacketSize>
 800e408:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a6c      	ldr	r2, [pc, #432]	; (800e5c0 <HAL_SPI_Init+0x200>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d00c      	beq.n	800e42e <HAL_SPI_Init+0x6e>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4a6a      	ldr	r2, [pc, #424]	; (800e5c4 <HAL_SPI_Init+0x204>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d007      	beq.n	800e42e <HAL_SPI_Init+0x6e>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a69      	ldr	r2, [pc, #420]	; (800e5c8 <HAL_SPI_Init+0x208>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d002      	beq.n	800e42e <HAL_SPI_Init+0x6e>
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2b08      	cmp	r3, #8
 800e42c:	d811      	bhi.n	800e452 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e432:	4a63      	ldr	r2, [pc, #396]	; (800e5c0 <HAL_SPI_Init+0x200>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d009      	beq.n	800e44c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a61      	ldr	r2, [pc, #388]	; (800e5c4 <HAL_SPI_Init+0x204>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d004      	beq.n	800e44c <HAL_SPI_Init+0x8c>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4a60      	ldr	r2, [pc, #384]	; (800e5c8 <HAL_SPI_Init+0x208>)
 800e448:	4293      	cmp	r3, r2
 800e44a:	d104      	bne.n	800e456 <HAL_SPI_Init+0x96>
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2b10      	cmp	r3, #16
 800e450:	d901      	bls.n	800e456 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e452:	2301      	movs	r3, #1
 800e454:	e0af      	b.n	800e5b6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d106      	bne.n	800e470 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f7f8 fdc4 	bl	8006ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2202      	movs	r2, #2
 800e474:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f022 0201 	bic.w	r2, r2, #1
 800e486:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	689b      	ldr	r3, [r3, #8]
 800e48e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e492:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	699b      	ldr	r3, [r3, #24]
 800e498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e49c:	d119      	bne.n	800e4d2 <HAL_SPI_Init+0x112>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4a6:	d103      	bne.n	800e4b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d008      	beq.n	800e4c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10c      	bne.n	800e4d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e4bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e4c0:	d107      	bne.n	800e4d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e4d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	69da      	ldr	r2, [r3, #28]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4da:	431a      	orrs	r2, r3
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	431a      	orrs	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4e4:	ea42 0103 	orr.w	r1, r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	68da      	ldr	r2, [r3, #12]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	430a      	orrs	r2, r1
 800e4f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4fc:	431a      	orrs	r2, r3
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e502:	431a      	orrs	r2, r3
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	699b      	ldr	r3, [r3, #24]
 800e508:	431a      	orrs	r2, r3
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	691b      	ldr	r3, [r3, #16]
 800e50e:	431a      	orrs	r2, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	695b      	ldr	r3, [r3, #20]
 800e514:	431a      	orrs	r2, r3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6a1b      	ldr	r3, [r3, #32]
 800e51a:	431a      	orrs	r2, r3
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	431a      	orrs	r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e526:	431a      	orrs	r2, r3
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	689b      	ldr	r3, [r3, #8]
 800e52c:	431a      	orrs	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e532:	ea42 0103 	orr.w	r1, r2, r3
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	430a      	orrs	r2, r1
 800e540:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d113      	bne.n	800e572 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	689b      	ldr	r3, [r3, #8]
 800e550:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e55c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e570:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f022 0201 	bic.w	r2, r2, #1
 800e580:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d00a      	beq.n	800e5a4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	430a      	orrs	r2, r1
 800e5a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e5b4:	2300      	movs	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	40013000 	.word	0x40013000
 800e5c4:	40003800 	.word	0x40003800
 800e5c8:	40003c00 	.word	0x40003c00

0800e5cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b085      	sub	sp, #20
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5d8:	095b      	lsrs	r3, r3, #5
 800e5da:	3301      	adds	r3, #1
 800e5dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	3307      	adds	r3, #7
 800e5ea:	08db      	lsrs	r3, r3, #3
 800e5ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	fb02 f303 	mul.w	r3, r2, r3
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3714      	adds	r7, #20
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e602:	b580      	push	{r7, lr}
 800e604:	b082      	sub	sp, #8
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d101      	bne.n	800e614 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e610:	2301      	movs	r3, #1
 800e612:	e049      	b.n	800e6a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d106      	bne.n	800e62e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2200      	movs	r2, #0
 800e624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7f9 fc0d 	bl	8007e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2202      	movs	r2, #2
 800e632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	3304      	adds	r3, #4
 800e63e:	4619      	mov	r1, r3
 800e640:	4610      	mov	r0, r2
 800e642:	f000 fc3d 	bl	800eec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2201      	movs	r2, #1
 800e652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2201      	movs	r2, #1
 800e65a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2201      	movs	r2, #1
 800e662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2201      	movs	r2, #1
 800e672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2201      	movs	r2, #1
 800e67a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2201      	movs	r2, #1
 800e682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2201      	movs	r2, #1
 800e68a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2201      	movs	r2, #1
 800e692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2201      	movs	r2, #1
 800e69a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b085      	sub	sp, #20
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d001      	beq.n	800e6c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e056      	b.n	800e776 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a2b      	ldr	r2, [pc, #172]	; (800e784 <HAL_TIM_Base_Start+0xd4>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d02c      	beq.n	800e734 <HAL_TIM_Base_Start+0x84>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6e2:	d027      	beq.n	800e734 <HAL_TIM_Base_Start+0x84>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a27      	ldr	r2, [pc, #156]	; (800e788 <HAL_TIM_Base_Start+0xd8>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d022      	beq.n	800e734 <HAL_TIM_Base_Start+0x84>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a26      	ldr	r2, [pc, #152]	; (800e78c <HAL_TIM_Base_Start+0xdc>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d01d      	beq.n	800e734 <HAL_TIM_Base_Start+0x84>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a24      	ldr	r2, [pc, #144]	; (800e790 <HAL_TIM_Base_Start+0xe0>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d018      	beq.n	800e734 <HAL_TIM_Base_Start+0x84>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a23      	ldr	r2, [pc, #140]	; (800e794 <HAL_TIM_Base_Start+0xe4>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d013      	beq.n	800e734 <HAL_TIM_Base_Start+0x84>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a21      	ldr	r2, [pc, #132]	; (800e798 <HAL_TIM_Base_Start+0xe8>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d00e      	beq.n	800e734 <HAL_TIM_Base_Start+0x84>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a20      	ldr	r2, [pc, #128]	; (800e79c <HAL_TIM_Base_Start+0xec>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d009      	beq.n	800e734 <HAL_TIM_Base_Start+0x84>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a1e      	ldr	r2, [pc, #120]	; (800e7a0 <HAL_TIM_Base_Start+0xf0>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d004      	beq.n	800e734 <HAL_TIM_Base_Start+0x84>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4a1d      	ldr	r2, [pc, #116]	; (800e7a4 <HAL_TIM_Base_Start+0xf4>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d115      	bne.n	800e760 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	689a      	ldr	r2, [r3, #8]
 800e73a:	4b1b      	ldr	r3, [pc, #108]	; (800e7a8 <HAL_TIM_Base_Start+0xf8>)
 800e73c:	4013      	ands	r3, r2
 800e73e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b06      	cmp	r3, #6
 800e744:	d015      	beq.n	800e772 <HAL_TIM_Base_Start+0xc2>
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e74c:	d011      	beq.n	800e772 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f042 0201 	orr.w	r2, r2, #1
 800e75c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e75e:	e008      	b.n	800e772 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f042 0201 	orr.w	r2, r2, #1
 800e76e:	601a      	str	r2, [r3, #0]
 800e770:	e000      	b.n	800e774 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e772:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e774:	2300      	movs	r3, #0
}
 800e776:	4618      	mov	r0, r3
 800e778:	3714      	adds	r7, #20
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr
 800e782:	bf00      	nop
 800e784:	40010000 	.word	0x40010000
 800e788:	40000400 	.word	0x40000400
 800e78c:	40000800 	.word	0x40000800
 800e790:	40000c00 	.word	0x40000c00
 800e794:	40010400 	.word	0x40010400
 800e798:	40001800 	.word	0x40001800
 800e79c:	40014000 	.word	0x40014000
 800e7a0:	4000e000 	.word	0x4000e000
 800e7a4:	4000e400 	.word	0x4000e400
 800e7a8:	00010007 	.word	0x00010007

0800e7ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d101      	bne.n	800e7be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e049      	b.n	800e852 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 f841 	bl	800e85a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2202      	movs	r2, #2
 800e7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	3304      	adds	r3, #4
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4610      	mov	r0, r2
 800e7ec:	f000 fb68 	bl	800eec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2201      	movs	r2, #1
 800e81c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2201      	movs	r2, #1
 800e824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2201      	movs	r2, #1
 800e844:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e850:	2300      	movs	r3, #0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e85a:	b480      	push	{r7}
 800e85c:	b083      	sub	sp, #12
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e862:	bf00      	nop
 800e864:	370c      	adds	r7, #12
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
	...

0800e870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d109      	bne.n	800e894 <HAL_TIM_PWM_Start+0x24>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e886:	b2db      	uxtb	r3, r3
 800e888:	2b01      	cmp	r3, #1
 800e88a:	bf14      	ite	ne
 800e88c:	2301      	movne	r3, #1
 800e88e:	2300      	moveq	r3, #0
 800e890:	b2db      	uxtb	r3, r3
 800e892:	e03c      	b.n	800e90e <HAL_TIM_PWM_Start+0x9e>
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	2b04      	cmp	r3, #4
 800e898:	d109      	bne.n	800e8ae <HAL_TIM_PWM_Start+0x3e>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	bf14      	ite	ne
 800e8a6:	2301      	movne	r3, #1
 800e8a8:	2300      	moveq	r3, #0
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	e02f      	b.n	800e90e <HAL_TIM_PWM_Start+0x9e>
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	2b08      	cmp	r3, #8
 800e8b2:	d109      	bne.n	800e8c8 <HAL_TIM_PWM_Start+0x58>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	bf14      	ite	ne
 800e8c0:	2301      	movne	r3, #1
 800e8c2:	2300      	moveq	r3, #0
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	e022      	b.n	800e90e <HAL_TIM_PWM_Start+0x9e>
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	2b0c      	cmp	r3, #12
 800e8cc:	d109      	bne.n	800e8e2 <HAL_TIM_PWM_Start+0x72>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	bf14      	ite	ne
 800e8da:	2301      	movne	r3, #1
 800e8dc:	2300      	moveq	r3, #0
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	e015      	b.n	800e90e <HAL_TIM_PWM_Start+0x9e>
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	2b10      	cmp	r3, #16
 800e8e6:	d109      	bne.n	800e8fc <HAL_TIM_PWM_Start+0x8c>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	bf14      	ite	ne
 800e8f4:	2301      	movne	r3, #1
 800e8f6:	2300      	moveq	r3, #0
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	e008      	b.n	800e90e <HAL_TIM_PWM_Start+0x9e>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e902:	b2db      	uxtb	r3, r3
 800e904:	2b01      	cmp	r3, #1
 800e906:	bf14      	ite	ne
 800e908:	2301      	movne	r3, #1
 800e90a:	2300      	moveq	r3, #0
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d001      	beq.n	800e916 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e912:	2301      	movs	r3, #1
 800e914:	e0ab      	b.n	800ea6e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d104      	bne.n	800e926 <HAL_TIM_PWM_Start+0xb6>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2202      	movs	r2, #2
 800e920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e924:	e023      	b.n	800e96e <HAL_TIM_PWM_Start+0xfe>
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	2b04      	cmp	r3, #4
 800e92a:	d104      	bne.n	800e936 <HAL_TIM_PWM_Start+0xc6>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2202      	movs	r2, #2
 800e930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e934:	e01b      	b.n	800e96e <HAL_TIM_PWM_Start+0xfe>
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	2b08      	cmp	r3, #8
 800e93a:	d104      	bne.n	800e946 <HAL_TIM_PWM_Start+0xd6>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2202      	movs	r2, #2
 800e940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e944:	e013      	b.n	800e96e <HAL_TIM_PWM_Start+0xfe>
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	2b0c      	cmp	r3, #12
 800e94a:	d104      	bne.n	800e956 <HAL_TIM_PWM_Start+0xe6>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2202      	movs	r2, #2
 800e950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e954:	e00b      	b.n	800e96e <HAL_TIM_PWM_Start+0xfe>
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	2b10      	cmp	r3, #16
 800e95a:	d104      	bne.n	800e966 <HAL_TIM_PWM_Start+0xf6>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2202      	movs	r2, #2
 800e960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e964:	e003      	b.n	800e96e <HAL_TIM_PWM_Start+0xfe>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2202      	movs	r2, #2
 800e96a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2201      	movs	r2, #1
 800e974:	6839      	ldr	r1, [r7, #0]
 800e976:	4618      	mov	r0, r3
 800e978:	f000 febc 	bl	800f6f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a3d      	ldr	r2, [pc, #244]	; (800ea78 <HAL_TIM_PWM_Start+0x208>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d013      	beq.n	800e9ae <HAL_TIM_PWM_Start+0x13e>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a3c      	ldr	r2, [pc, #240]	; (800ea7c <HAL_TIM_PWM_Start+0x20c>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d00e      	beq.n	800e9ae <HAL_TIM_PWM_Start+0x13e>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a3a      	ldr	r2, [pc, #232]	; (800ea80 <HAL_TIM_PWM_Start+0x210>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d009      	beq.n	800e9ae <HAL_TIM_PWM_Start+0x13e>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4a39      	ldr	r2, [pc, #228]	; (800ea84 <HAL_TIM_PWM_Start+0x214>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d004      	beq.n	800e9ae <HAL_TIM_PWM_Start+0x13e>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a37      	ldr	r2, [pc, #220]	; (800ea88 <HAL_TIM_PWM_Start+0x218>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d101      	bne.n	800e9b2 <HAL_TIM_PWM_Start+0x142>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e000      	b.n	800e9b4 <HAL_TIM_PWM_Start+0x144>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d007      	beq.n	800e9c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e9c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a2a      	ldr	r2, [pc, #168]	; (800ea78 <HAL_TIM_PWM_Start+0x208>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d02c      	beq.n	800ea2c <HAL_TIM_PWM_Start+0x1bc>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9da:	d027      	beq.n	800ea2c <HAL_TIM_PWM_Start+0x1bc>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a2a      	ldr	r2, [pc, #168]	; (800ea8c <HAL_TIM_PWM_Start+0x21c>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d022      	beq.n	800ea2c <HAL_TIM_PWM_Start+0x1bc>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a29      	ldr	r2, [pc, #164]	; (800ea90 <HAL_TIM_PWM_Start+0x220>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d01d      	beq.n	800ea2c <HAL_TIM_PWM_Start+0x1bc>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a27      	ldr	r2, [pc, #156]	; (800ea94 <HAL_TIM_PWM_Start+0x224>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d018      	beq.n	800ea2c <HAL_TIM_PWM_Start+0x1bc>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a1f      	ldr	r2, [pc, #124]	; (800ea7c <HAL_TIM_PWM_Start+0x20c>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d013      	beq.n	800ea2c <HAL_TIM_PWM_Start+0x1bc>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a23      	ldr	r2, [pc, #140]	; (800ea98 <HAL_TIM_PWM_Start+0x228>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d00e      	beq.n	800ea2c <HAL_TIM_PWM_Start+0x1bc>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a1b      	ldr	r2, [pc, #108]	; (800ea80 <HAL_TIM_PWM_Start+0x210>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d009      	beq.n	800ea2c <HAL_TIM_PWM_Start+0x1bc>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a1f      	ldr	r2, [pc, #124]	; (800ea9c <HAL_TIM_PWM_Start+0x22c>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d004      	beq.n	800ea2c <HAL_TIM_PWM_Start+0x1bc>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a1e      	ldr	r2, [pc, #120]	; (800eaa0 <HAL_TIM_PWM_Start+0x230>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d115      	bne.n	800ea58 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	689a      	ldr	r2, [r3, #8]
 800ea32:	4b1c      	ldr	r3, [pc, #112]	; (800eaa4 <HAL_TIM_PWM_Start+0x234>)
 800ea34:	4013      	ands	r3, r2
 800ea36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2b06      	cmp	r3, #6
 800ea3c:	d015      	beq.n	800ea6a <HAL_TIM_PWM_Start+0x1fa>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea44:	d011      	beq.n	800ea6a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f042 0201 	orr.w	r2, r2, #1
 800ea54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea56:	e008      	b.n	800ea6a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f042 0201 	orr.w	r2, r2, #1
 800ea66:	601a      	str	r2, [r3, #0]
 800ea68:	e000      	b.n	800ea6c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea6c:	2300      	movs	r3, #0
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	40010000 	.word	0x40010000
 800ea7c:	40010400 	.word	0x40010400
 800ea80:	40014000 	.word	0x40014000
 800ea84:	40014400 	.word	0x40014400
 800ea88:	40014800 	.word	0x40014800
 800ea8c:	40000400 	.word	0x40000400
 800ea90:	40000800 	.word	0x40000800
 800ea94:	40000c00 	.word	0x40000c00
 800ea98:	40001800 	.word	0x40001800
 800ea9c:	4000e000 	.word	0x4000e000
 800eaa0:	4000e400 	.word	0x4000e400
 800eaa4:	00010007 	.word	0x00010007

0800eaa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b086      	sub	sp, #24
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eab4:	2300      	movs	r3, #0
 800eab6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d101      	bne.n	800eac6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eac2:	2302      	movs	r3, #2
 800eac4:	e0ff      	b.n	800ecc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2201      	movs	r2, #1
 800eaca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2b14      	cmp	r3, #20
 800ead2:	f200 80f0 	bhi.w	800ecb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ead6:	a201      	add	r2, pc, #4	; (adr r2, 800eadc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ead8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eadc:	0800eb31 	.word	0x0800eb31
 800eae0:	0800ecb7 	.word	0x0800ecb7
 800eae4:	0800ecb7 	.word	0x0800ecb7
 800eae8:	0800ecb7 	.word	0x0800ecb7
 800eaec:	0800eb71 	.word	0x0800eb71
 800eaf0:	0800ecb7 	.word	0x0800ecb7
 800eaf4:	0800ecb7 	.word	0x0800ecb7
 800eaf8:	0800ecb7 	.word	0x0800ecb7
 800eafc:	0800ebb3 	.word	0x0800ebb3
 800eb00:	0800ecb7 	.word	0x0800ecb7
 800eb04:	0800ecb7 	.word	0x0800ecb7
 800eb08:	0800ecb7 	.word	0x0800ecb7
 800eb0c:	0800ebf3 	.word	0x0800ebf3
 800eb10:	0800ecb7 	.word	0x0800ecb7
 800eb14:	0800ecb7 	.word	0x0800ecb7
 800eb18:	0800ecb7 	.word	0x0800ecb7
 800eb1c:	0800ec35 	.word	0x0800ec35
 800eb20:	0800ecb7 	.word	0x0800ecb7
 800eb24:	0800ecb7 	.word	0x0800ecb7
 800eb28:	0800ecb7 	.word	0x0800ecb7
 800eb2c:	0800ec75 	.word	0x0800ec75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	68b9      	ldr	r1, [r7, #8]
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 fa68 	bl	800f00c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	699a      	ldr	r2, [r3, #24]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f042 0208 	orr.w	r2, r2, #8
 800eb4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	699a      	ldr	r2, [r3, #24]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f022 0204 	bic.w	r2, r2, #4
 800eb5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6999      	ldr	r1, [r3, #24]
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	691a      	ldr	r2, [r3, #16]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	430a      	orrs	r2, r1
 800eb6c:	619a      	str	r2, [r3, #24]
      break;
 800eb6e:	e0a5      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	68b9      	ldr	r1, [r7, #8]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f000 fad8 	bl	800f12c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	699a      	ldr	r2, [r3, #24]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	699a      	ldr	r2, [r3, #24]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	6999      	ldr	r1, [r3, #24]
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	691b      	ldr	r3, [r3, #16]
 800eba6:	021a      	lsls	r2, r3, #8
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	430a      	orrs	r2, r1
 800ebae:	619a      	str	r2, [r3, #24]
      break;
 800ebb0:	e084      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	68b9      	ldr	r1, [r7, #8]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f000 fb41 	bl	800f240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	69da      	ldr	r2, [r3, #28]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f042 0208 	orr.w	r2, r2, #8
 800ebcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	69da      	ldr	r2, [r3, #28]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f022 0204 	bic.w	r2, r2, #4
 800ebdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	69d9      	ldr	r1, [r3, #28]
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	691a      	ldr	r2, [r3, #16]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	430a      	orrs	r2, r1
 800ebee:	61da      	str	r2, [r3, #28]
      break;
 800ebf0:	e064      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68b9      	ldr	r1, [r7, #8]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 fba9 	bl	800f350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	69da      	ldr	r2, [r3, #28]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	69da      	ldr	r2, [r3, #28]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	69d9      	ldr	r1, [r3, #28]
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	691b      	ldr	r3, [r3, #16]
 800ec28:	021a      	lsls	r2, r3, #8
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	430a      	orrs	r2, r1
 800ec30:	61da      	str	r2, [r3, #28]
      break;
 800ec32:	e043      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	68b9      	ldr	r1, [r7, #8]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 fbf2 	bl	800f424 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f042 0208 	orr.w	r2, r2, #8
 800ec4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f022 0204 	bic.w	r2, r2, #4
 800ec5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	691a      	ldr	r2, [r3, #16]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	430a      	orrs	r2, r1
 800ec70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ec72:	e023      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	68b9      	ldr	r1, [r7, #8]
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f000 fc36 	bl	800f4ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	691b      	ldr	r3, [r3, #16]
 800ecaa:	021a      	lsls	r2, r3, #8
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	430a      	orrs	r2, r1
 800ecb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ecb4:	e002      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	75fb      	strb	r3, [r7, #23]
      break;
 800ecba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ecc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3718      	adds	r7, #24
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop

0800ecd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d101      	bne.n	800ecec <HAL_TIM_ConfigClockSource+0x1c>
 800ece8:	2302      	movs	r3, #2
 800ecea:	e0dc      	b.n	800eea6 <HAL_TIM_ConfigClockSource+0x1d6>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2202      	movs	r2, #2
 800ecf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed04:	68ba      	ldr	r2, [r7, #8]
 800ed06:	4b6a      	ldr	r3, [pc, #424]	; (800eeb0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ed08:	4013      	ands	r3, r2
 800ed0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	68ba      	ldr	r2, [r7, #8]
 800ed1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a64      	ldr	r2, [pc, #400]	; (800eeb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	f000 80a9 	beq.w	800ee7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ed28:	4a62      	ldr	r2, [pc, #392]	; (800eeb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	f200 80ae 	bhi.w	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ed30:	4a61      	ldr	r2, [pc, #388]	; (800eeb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	f000 80a1 	beq.w	800ee7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ed38:	4a5f      	ldr	r2, [pc, #380]	; (800eeb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	f200 80a6 	bhi.w	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ed40:	4a5e      	ldr	r2, [pc, #376]	; (800eebc <HAL_TIM_ConfigClockSource+0x1ec>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	f000 8099 	beq.w	800ee7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ed48:	4a5c      	ldr	r2, [pc, #368]	; (800eebc <HAL_TIM_ConfigClockSource+0x1ec>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	f200 809e 	bhi.w	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ed50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ed54:	f000 8091 	beq.w	800ee7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ed58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ed5c:	f200 8096 	bhi.w	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ed60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed64:	f000 8089 	beq.w	800ee7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ed68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed6c:	f200 808e 	bhi.w	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ed70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed74:	d03e      	beq.n	800edf4 <HAL_TIM_ConfigClockSource+0x124>
 800ed76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed7a:	f200 8087 	bhi.w	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ed7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed82:	f000 8086 	beq.w	800ee92 <HAL_TIM_ConfigClockSource+0x1c2>
 800ed86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed8a:	d87f      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ed8c:	2b70      	cmp	r3, #112	; 0x70
 800ed8e:	d01a      	beq.n	800edc6 <HAL_TIM_ConfigClockSource+0xf6>
 800ed90:	2b70      	cmp	r3, #112	; 0x70
 800ed92:	d87b      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ed94:	2b60      	cmp	r3, #96	; 0x60
 800ed96:	d050      	beq.n	800ee3a <HAL_TIM_ConfigClockSource+0x16a>
 800ed98:	2b60      	cmp	r3, #96	; 0x60
 800ed9a:	d877      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ed9c:	2b50      	cmp	r3, #80	; 0x50
 800ed9e:	d03c      	beq.n	800ee1a <HAL_TIM_ConfigClockSource+0x14a>
 800eda0:	2b50      	cmp	r3, #80	; 0x50
 800eda2:	d873      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800eda4:	2b40      	cmp	r3, #64	; 0x40
 800eda6:	d058      	beq.n	800ee5a <HAL_TIM_ConfigClockSource+0x18a>
 800eda8:	2b40      	cmp	r3, #64	; 0x40
 800edaa:	d86f      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800edac:	2b30      	cmp	r3, #48	; 0x30
 800edae:	d064      	beq.n	800ee7a <HAL_TIM_ConfigClockSource+0x1aa>
 800edb0:	2b30      	cmp	r3, #48	; 0x30
 800edb2:	d86b      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800edb4:	2b20      	cmp	r3, #32
 800edb6:	d060      	beq.n	800ee7a <HAL_TIM_ConfigClockSource+0x1aa>
 800edb8:	2b20      	cmp	r3, #32
 800edba:	d867      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d05c      	beq.n	800ee7a <HAL_TIM_ConfigClockSource+0x1aa>
 800edc0:	2b10      	cmp	r3, #16
 800edc2:	d05a      	beq.n	800ee7a <HAL_TIM_ConfigClockSource+0x1aa>
 800edc4:	e062      	b.n	800ee8c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6818      	ldr	r0, [r3, #0]
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	6899      	ldr	r1, [r3, #8]
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	685a      	ldr	r2, [r3, #4]
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	f000 fc6d 	bl	800f6b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ede8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	68ba      	ldr	r2, [r7, #8]
 800edf0:	609a      	str	r2, [r3, #8]
      break;
 800edf2:	e04f      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6818      	ldr	r0, [r3, #0]
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	6899      	ldr	r1, [r3, #8]
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	685a      	ldr	r2, [r3, #4]
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	f000 fc56 	bl	800f6b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	689a      	ldr	r2, [r3, #8]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ee16:	609a      	str	r2, [r3, #8]
      break;
 800ee18:	e03c      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6818      	ldr	r0, [r3, #0]
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	6859      	ldr	r1, [r3, #4]
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	461a      	mov	r2, r3
 800ee28:	f000 fbc6 	bl	800f5b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2150      	movs	r1, #80	; 0x50
 800ee32:	4618      	mov	r0, r3
 800ee34:	f000 fc20 	bl	800f678 <TIM_ITRx_SetConfig>
      break;
 800ee38:	e02c      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6818      	ldr	r0, [r3, #0]
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	6859      	ldr	r1, [r3, #4]
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	461a      	mov	r2, r3
 800ee48:	f000 fbe5 	bl	800f616 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	2160      	movs	r1, #96	; 0x60
 800ee52:	4618      	mov	r0, r3
 800ee54:	f000 fc10 	bl	800f678 <TIM_ITRx_SetConfig>
      break;
 800ee58:	e01c      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6818      	ldr	r0, [r3, #0]
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	6859      	ldr	r1, [r3, #4]
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	68db      	ldr	r3, [r3, #12]
 800ee66:	461a      	mov	r2, r3
 800ee68:	f000 fba6 	bl	800f5b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2140      	movs	r1, #64	; 0x40
 800ee72:	4618      	mov	r0, r3
 800ee74:	f000 fc00 	bl	800f678 <TIM_ITRx_SetConfig>
      break;
 800ee78:	e00c      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	4619      	mov	r1, r3
 800ee84:	4610      	mov	r0, r2
 800ee86:	f000 fbf7 	bl	800f678 <TIM_ITRx_SetConfig>
      break;
 800ee8a:	e003      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ee90:	e000      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ee92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2201      	movs	r2, #1
 800ee98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	ffceff88 	.word	0xffceff88
 800eeb4:	00100040 	.word	0x00100040
 800eeb8:	00100030 	.word	0x00100030
 800eebc:	00100020 	.word	0x00100020

0800eec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b085      	sub	sp, #20
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a44      	ldr	r2, [pc, #272]	; (800efe4 <TIM_Base_SetConfig+0x124>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d013      	beq.n	800ef00 <TIM_Base_SetConfig+0x40>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eede:	d00f      	beq.n	800ef00 <TIM_Base_SetConfig+0x40>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a41      	ldr	r2, [pc, #260]	; (800efe8 <TIM_Base_SetConfig+0x128>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d00b      	beq.n	800ef00 <TIM_Base_SetConfig+0x40>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4a40      	ldr	r2, [pc, #256]	; (800efec <TIM_Base_SetConfig+0x12c>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d007      	beq.n	800ef00 <TIM_Base_SetConfig+0x40>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	4a3f      	ldr	r2, [pc, #252]	; (800eff0 <TIM_Base_SetConfig+0x130>)
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d003      	beq.n	800ef00 <TIM_Base_SetConfig+0x40>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4a3e      	ldr	r2, [pc, #248]	; (800eff4 <TIM_Base_SetConfig+0x134>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d108      	bne.n	800ef12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	4313      	orrs	r3, r2
 800ef10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4a33      	ldr	r2, [pc, #204]	; (800efe4 <TIM_Base_SetConfig+0x124>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d027      	beq.n	800ef6a <TIM_Base_SetConfig+0xaa>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef20:	d023      	beq.n	800ef6a <TIM_Base_SetConfig+0xaa>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4a30      	ldr	r2, [pc, #192]	; (800efe8 <TIM_Base_SetConfig+0x128>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d01f      	beq.n	800ef6a <TIM_Base_SetConfig+0xaa>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4a2f      	ldr	r2, [pc, #188]	; (800efec <TIM_Base_SetConfig+0x12c>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d01b      	beq.n	800ef6a <TIM_Base_SetConfig+0xaa>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	4a2e      	ldr	r2, [pc, #184]	; (800eff0 <TIM_Base_SetConfig+0x130>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d017      	beq.n	800ef6a <TIM_Base_SetConfig+0xaa>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4a2d      	ldr	r2, [pc, #180]	; (800eff4 <TIM_Base_SetConfig+0x134>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d013      	beq.n	800ef6a <TIM_Base_SetConfig+0xaa>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4a2c      	ldr	r2, [pc, #176]	; (800eff8 <TIM_Base_SetConfig+0x138>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d00f      	beq.n	800ef6a <TIM_Base_SetConfig+0xaa>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4a2b      	ldr	r2, [pc, #172]	; (800effc <TIM_Base_SetConfig+0x13c>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d00b      	beq.n	800ef6a <TIM_Base_SetConfig+0xaa>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a2a      	ldr	r2, [pc, #168]	; (800f000 <TIM_Base_SetConfig+0x140>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d007      	beq.n	800ef6a <TIM_Base_SetConfig+0xaa>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4a29      	ldr	r2, [pc, #164]	; (800f004 <TIM_Base_SetConfig+0x144>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d003      	beq.n	800ef6a <TIM_Base_SetConfig+0xaa>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4a28      	ldr	r2, [pc, #160]	; (800f008 <TIM_Base_SetConfig+0x148>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d108      	bne.n	800ef7c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	68fa      	ldr	r2, [r7, #12]
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	695b      	ldr	r3, [r3, #20]
 800ef86:	4313      	orrs	r3, r2
 800ef88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	689a      	ldr	r2, [r3, #8]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	681a      	ldr	r2, [r3, #0]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4a10      	ldr	r2, [pc, #64]	; (800efe4 <TIM_Base_SetConfig+0x124>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d00f      	beq.n	800efc8 <TIM_Base_SetConfig+0x108>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4a12      	ldr	r2, [pc, #72]	; (800eff4 <TIM_Base_SetConfig+0x134>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d00b      	beq.n	800efc8 <TIM_Base_SetConfig+0x108>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4a11      	ldr	r2, [pc, #68]	; (800eff8 <TIM_Base_SetConfig+0x138>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d007      	beq.n	800efc8 <TIM_Base_SetConfig+0x108>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a10      	ldr	r2, [pc, #64]	; (800effc <TIM_Base_SetConfig+0x13c>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d003      	beq.n	800efc8 <TIM_Base_SetConfig+0x108>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4a0f      	ldr	r2, [pc, #60]	; (800f000 <TIM_Base_SetConfig+0x140>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d103      	bne.n	800efd0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	691a      	ldr	r2, [r3, #16]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2201      	movs	r2, #1
 800efd4:	615a      	str	r2, [r3, #20]
}
 800efd6:	bf00      	nop
 800efd8:	3714      	adds	r7, #20
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	40010000 	.word	0x40010000
 800efe8:	40000400 	.word	0x40000400
 800efec:	40000800 	.word	0x40000800
 800eff0:	40000c00 	.word	0x40000c00
 800eff4:	40010400 	.word	0x40010400
 800eff8:	40014000 	.word	0x40014000
 800effc:	40014400 	.word	0x40014400
 800f000:	40014800 	.word	0x40014800
 800f004:	4000e000 	.word	0x4000e000
 800f008:	4000e400 	.word	0x4000e400

0800f00c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b087      	sub	sp, #28
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a1b      	ldr	r3, [r3, #32]
 800f01a:	f023 0201 	bic.w	r2, r3, #1
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6a1b      	ldr	r3, [r3, #32]
 800f026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f034:	68fa      	ldr	r2, [r7, #12]
 800f036:	4b37      	ldr	r3, [pc, #220]	; (800f114 <TIM_OC1_SetConfig+0x108>)
 800f038:	4013      	ands	r3, r2
 800f03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f023 0303 	bic.w	r3, r3, #3
 800f042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	f023 0302 	bic.w	r3, r3, #2
 800f054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	689b      	ldr	r3, [r3, #8]
 800f05a:	697a      	ldr	r2, [r7, #20]
 800f05c:	4313      	orrs	r3, r2
 800f05e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4a2d      	ldr	r2, [pc, #180]	; (800f118 <TIM_OC1_SetConfig+0x10c>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d00f      	beq.n	800f088 <TIM_OC1_SetConfig+0x7c>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4a2c      	ldr	r2, [pc, #176]	; (800f11c <TIM_OC1_SetConfig+0x110>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d00b      	beq.n	800f088 <TIM_OC1_SetConfig+0x7c>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4a2b      	ldr	r2, [pc, #172]	; (800f120 <TIM_OC1_SetConfig+0x114>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d007      	beq.n	800f088 <TIM_OC1_SetConfig+0x7c>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	4a2a      	ldr	r2, [pc, #168]	; (800f124 <TIM_OC1_SetConfig+0x118>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d003      	beq.n	800f088 <TIM_OC1_SetConfig+0x7c>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	4a29      	ldr	r2, [pc, #164]	; (800f128 <TIM_OC1_SetConfig+0x11c>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d10c      	bne.n	800f0a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	f023 0308 	bic.w	r3, r3, #8
 800f08e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	697a      	ldr	r2, [r7, #20]
 800f096:	4313      	orrs	r3, r2
 800f098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	f023 0304 	bic.w	r3, r3, #4
 800f0a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	4a1c      	ldr	r2, [pc, #112]	; (800f118 <TIM_OC1_SetConfig+0x10c>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d00f      	beq.n	800f0ca <TIM_OC1_SetConfig+0xbe>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4a1b      	ldr	r2, [pc, #108]	; (800f11c <TIM_OC1_SetConfig+0x110>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d00b      	beq.n	800f0ca <TIM_OC1_SetConfig+0xbe>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4a1a      	ldr	r2, [pc, #104]	; (800f120 <TIM_OC1_SetConfig+0x114>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d007      	beq.n	800f0ca <TIM_OC1_SetConfig+0xbe>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4a19      	ldr	r2, [pc, #100]	; (800f124 <TIM_OC1_SetConfig+0x118>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d003      	beq.n	800f0ca <TIM_OC1_SetConfig+0xbe>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4a18      	ldr	r2, [pc, #96]	; (800f128 <TIM_OC1_SetConfig+0x11c>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d111      	bne.n	800f0ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	695b      	ldr	r3, [r3, #20]
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	699b      	ldr	r3, [r3, #24]
 800f0e8:	693a      	ldr	r2, [r7, #16]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	693a      	ldr	r2, [r7, #16]
 800f0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	68fa      	ldr	r2, [r7, #12]
 800f0f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	685a      	ldr	r2, [r3, #4]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	697a      	ldr	r2, [r7, #20]
 800f106:	621a      	str	r2, [r3, #32]
}
 800f108:	bf00      	nop
 800f10a:	371c      	adds	r7, #28
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr
 800f114:	fffeff8f 	.word	0xfffeff8f
 800f118:	40010000 	.word	0x40010000
 800f11c:	40010400 	.word	0x40010400
 800f120:	40014000 	.word	0x40014000
 800f124:	40014400 	.word	0x40014400
 800f128:	40014800 	.word	0x40014800

0800f12c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b087      	sub	sp, #28
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6a1b      	ldr	r3, [r3, #32]
 800f13a:	f023 0210 	bic.w	r2, r3, #16
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a1b      	ldr	r3, [r3, #32]
 800f146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	699b      	ldr	r3, [r3, #24]
 800f152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	4b34      	ldr	r3, [pc, #208]	; (800f228 <TIM_OC2_SetConfig+0xfc>)
 800f158:	4013      	ands	r3, r2
 800f15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	021b      	lsls	r3, r3, #8
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	4313      	orrs	r3, r2
 800f16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	f023 0320 	bic.w	r3, r3, #32
 800f176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	689b      	ldr	r3, [r3, #8]
 800f17c:	011b      	lsls	r3, r3, #4
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	4313      	orrs	r3, r2
 800f182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a29      	ldr	r2, [pc, #164]	; (800f22c <TIM_OC2_SetConfig+0x100>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d003      	beq.n	800f194 <TIM_OC2_SetConfig+0x68>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4a28      	ldr	r2, [pc, #160]	; (800f230 <TIM_OC2_SetConfig+0x104>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d10d      	bne.n	800f1b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f19a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	011b      	lsls	r3, r3, #4
 800f1a2:	697a      	ldr	r2, [r7, #20]
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a1e      	ldr	r2, [pc, #120]	; (800f22c <TIM_OC2_SetConfig+0x100>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d00f      	beq.n	800f1d8 <TIM_OC2_SetConfig+0xac>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a1d      	ldr	r2, [pc, #116]	; (800f230 <TIM_OC2_SetConfig+0x104>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d00b      	beq.n	800f1d8 <TIM_OC2_SetConfig+0xac>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a1c      	ldr	r2, [pc, #112]	; (800f234 <TIM_OC2_SetConfig+0x108>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d007      	beq.n	800f1d8 <TIM_OC2_SetConfig+0xac>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a1b      	ldr	r2, [pc, #108]	; (800f238 <TIM_OC2_SetConfig+0x10c>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d003      	beq.n	800f1d8 <TIM_OC2_SetConfig+0xac>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a1a      	ldr	r2, [pc, #104]	; (800f23c <TIM_OC2_SetConfig+0x110>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d113      	bne.n	800f200 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	695b      	ldr	r3, [r3, #20]
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	693a      	ldr	r2, [r7, #16]
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	699b      	ldr	r3, [r3, #24]
 800f1f8:	009b      	lsls	r3, r3, #2
 800f1fa:	693a      	ldr	r2, [r7, #16]
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	693a      	ldr	r2, [r7, #16]
 800f204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	68fa      	ldr	r2, [r7, #12]
 800f20a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	685a      	ldr	r2, [r3, #4]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	697a      	ldr	r2, [r7, #20]
 800f218:	621a      	str	r2, [r3, #32]
}
 800f21a:	bf00      	nop
 800f21c:	371c      	adds	r7, #28
 800f21e:	46bd      	mov	sp, r7
 800f220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f224:	4770      	bx	lr
 800f226:	bf00      	nop
 800f228:	feff8fff 	.word	0xfeff8fff
 800f22c:	40010000 	.word	0x40010000
 800f230:	40010400 	.word	0x40010400
 800f234:	40014000 	.word	0x40014000
 800f238:	40014400 	.word	0x40014400
 800f23c:	40014800 	.word	0x40014800

0800f240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f240:	b480      	push	{r7}
 800f242:	b087      	sub	sp, #28
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a1b      	ldr	r3, [r3, #32]
 800f24e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a1b      	ldr	r3, [r3, #32]
 800f25a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	69db      	ldr	r3, [r3, #28]
 800f266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f268:	68fa      	ldr	r2, [r7, #12]
 800f26a:	4b33      	ldr	r3, [pc, #204]	; (800f338 <TIM_OC3_SetConfig+0xf8>)
 800f26c:	4013      	ands	r3, r2
 800f26e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f023 0303 	bic.w	r3, r3, #3
 800f276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	4313      	orrs	r3, r2
 800f280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	021b      	lsls	r3, r3, #8
 800f290:	697a      	ldr	r2, [r7, #20]
 800f292:	4313      	orrs	r3, r2
 800f294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	4a28      	ldr	r2, [pc, #160]	; (800f33c <TIM_OC3_SetConfig+0xfc>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d003      	beq.n	800f2a6 <TIM_OC3_SetConfig+0x66>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	4a27      	ldr	r2, [pc, #156]	; (800f340 <TIM_OC3_SetConfig+0x100>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d10d      	bne.n	800f2c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	021b      	lsls	r3, r3, #8
 800f2b4:	697a      	ldr	r2, [r7, #20]
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	4a1d      	ldr	r2, [pc, #116]	; (800f33c <TIM_OC3_SetConfig+0xfc>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d00f      	beq.n	800f2ea <TIM_OC3_SetConfig+0xaa>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	4a1c      	ldr	r2, [pc, #112]	; (800f340 <TIM_OC3_SetConfig+0x100>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d00b      	beq.n	800f2ea <TIM_OC3_SetConfig+0xaa>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	4a1b      	ldr	r2, [pc, #108]	; (800f344 <TIM_OC3_SetConfig+0x104>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d007      	beq.n	800f2ea <TIM_OC3_SetConfig+0xaa>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a1a      	ldr	r2, [pc, #104]	; (800f348 <TIM_OC3_SetConfig+0x108>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d003      	beq.n	800f2ea <TIM_OC3_SetConfig+0xaa>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4a19      	ldr	r2, [pc, #100]	; (800f34c <TIM_OC3_SetConfig+0x10c>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d113      	bne.n	800f312 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	695b      	ldr	r3, [r3, #20]
 800f2fe:	011b      	lsls	r3, r3, #4
 800f300:	693a      	ldr	r2, [r7, #16]
 800f302:	4313      	orrs	r3, r2
 800f304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	699b      	ldr	r3, [r3, #24]
 800f30a:	011b      	lsls	r3, r3, #4
 800f30c:	693a      	ldr	r2, [r7, #16]
 800f30e:	4313      	orrs	r3, r2
 800f310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	693a      	ldr	r2, [r7, #16]
 800f316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	685a      	ldr	r2, [r3, #4]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	697a      	ldr	r2, [r7, #20]
 800f32a:	621a      	str	r2, [r3, #32]
}
 800f32c:	bf00      	nop
 800f32e:	371c      	adds	r7, #28
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr
 800f338:	fffeff8f 	.word	0xfffeff8f
 800f33c:	40010000 	.word	0x40010000
 800f340:	40010400 	.word	0x40010400
 800f344:	40014000 	.word	0x40014000
 800f348:	40014400 	.word	0x40014400
 800f34c:	40014800 	.word	0x40014800

0800f350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f350:	b480      	push	{r7}
 800f352:	b087      	sub	sp, #28
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6a1b      	ldr	r3, [r3, #32]
 800f35e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6a1b      	ldr	r3, [r3, #32]
 800f36a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	69db      	ldr	r3, [r3, #28]
 800f376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f378:	68fa      	ldr	r2, [r7, #12]
 800f37a:	4b24      	ldr	r3, [pc, #144]	; (800f40c <TIM_OC4_SetConfig+0xbc>)
 800f37c:	4013      	ands	r3, r2
 800f37e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	021b      	lsls	r3, r3, #8
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	4313      	orrs	r3, r2
 800f392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f39a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	689b      	ldr	r3, [r3, #8]
 800f3a0:	031b      	lsls	r3, r3, #12
 800f3a2:	693a      	ldr	r2, [r7, #16]
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	4a19      	ldr	r2, [pc, #100]	; (800f410 <TIM_OC4_SetConfig+0xc0>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d00f      	beq.n	800f3d0 <TIM_OC4_SetConfig+0x80>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4a18      	ldr	r2, [pc, #96]	; (800f414 <TIM_OC4_SetConfig+0xc4>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d00b      	beq.n	800f3d0 <TIM_OC4_SetConfig+0x80>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	4a17      	ldr	r2, [pc, #92]	; (800f418 <TIM_OC4_SetConfig+0xc8>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d007      	beq.n	800f3d0 <TIM_OC4_SetConfig+0x80>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	4a16      	ldr	r2, [pc, #88]	; (800f41c <TIM_OC4_SetConfig+0xcc>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d003      	beq.n	800f3d0 <TIM_OC4_SetConfig+0x80>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4a15      	ldr	r2, [pc, #84]	; (800f420 <TIM_OC4_SetConfig+0xd0>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d109      	bne.n	800f3e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f3d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	695b      	ldr	r3, [r3, #20]
 800f3dc:	019b      	lsls	r3, r3, #6
 800f3de:	697a      	ldr	r2, [r7, #20]
 800f3e0:	4313      	orrs	r3, r2
 800f3e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	697a      	ldr	r2, [r7, #20]
 800f3e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	685a      	ldr	r2, [r3, #4]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	693a      	ldr	r2, [r7, #16]
 800f3fc:	621a      	str	r2, [r3, #32]
}
 800f3fe:	bf00      	nop
 800f400:	371c      	adds	r7, #28
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr
 800f40a:	bf00      	nop
 800f40c:	feff8fff 	.word	0xfeff8fff
 800f410:	40010000 	.word	0x40010000
 800f414:	40010400 	.word	0x40010400
 800f418:	40014000 	.word	0x40014000
 800f41c:	40014400 	.word	0x40014400
 800f420:	40014800 	.word	0x40014800

0800f424 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f424:	b480      	push	{r7}
 800f426:	b087      	sub	sp, #28
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6a1b      	ldr	r3, [r3, #32]
 800f432:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6a1b      	ldr	r3, [r3, #32]
 800f43e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f44c:	68fa      	ldr	r2, [r7, #12]
 800f44e:	4b21      	ldr	r3, [pc, #132]	; (800f4d4 <TIM_OC5_SetConfig+0xb0>)
 800f450:	4013      	ands	r3, r2
 800f452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	4313      	orrs	r3, r2
 800f45c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f464:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	041b      	lsls	r3, r3, #16
 800f46c:	693a      	ldr	r2, [r7, #16]
 800f46e:	4313      	orrs	r3, r2
 800f470:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4a18      	ldr	r2, [pc, #96]	; (800f4d8 <TIM_OC5_SetConfig+0xb4>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d00f      	beq.n	800f49a <TIM_OC5_SetConfig+0x76>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4a17      	ldr	r2, [pc, #92]	; (800f4dc <TIM_OC5_SetConfig+0xb8>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d00b      	beq.n	800f49a <TIM_OC5_SetConfig+0x76>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4a16      	ldr	r2, [pc, #88]	; (800f4e0 <TIM_OC5_SetConfig+0xbc>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d007      	beq.n	800f49a <TIM_OC5_SetConfig+0x76>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4a15      	ldr	r2, [pc, #84]	; (800f4e4 <TIM_OC5_SetConfig+0xc0>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d003      	beq.n	800f49a <TIM_OC5_SetConfig+0x76>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4a14      	ldr	r2, [pc, #80]	; (800f4e8 <TIM_OC5_SetConfig+0xc4>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d109      	bne.n	800f4ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f4a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	695b      	ldr	r3, [r3, #20]
 800f4a6:	021b      	lsls	r3, r3, #8
 800f4a8:	697a      	ldr	r2, [r7, #20]
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	697a      	ldr	r2, [r7, #20]
 800f4b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	685a      	ldr	r2, [r3, #4]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	693a      	ldr	r2, [r7, #16]
 800f4c6:	621a      	str	r2, [r3, #32]
}
 800f4c8:	bf00      	nop
 800f4ca:	371c      	adds	r7, #28
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr
 800f4d4:	fffeff8f 	.word	0xfffeff8f
 800f4d8:	40010000 	.word	0x40010000
 800f4dc:	40010400 	.word	0x40010400
 800f4e0:	40014000 	.word	0x40014000
 800f4e4:	40014400 	.word	0x40014400
 800f4e8:	40014800 	.word	0x40014800

0800f4ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b087      	sub	sp, #28
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6a1b      	ldr	r3, [r3, #32]
 800f4fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6a1b      	ldr	r3, [r3, #32]
 800f506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	4b22      	ldr	r3, [pc, #136]	; (800f5a0 <TIM_OC6_SetConfig+0xb4>)
 800f518:	4013      	ands	r3, r2
 800f51a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	021b      	lsls	r3, r3, #8
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	4313      	orrs	r3, r2
 800f526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f52e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	689b      	ldr	r3, [r3, #8]
 800f534:	051b      	lsls	r3, r3, #20
 800f536:	693a      	ldr	r2, [r7, #16]
 800f538:	4313      	orrs	r3, r2
 800f53a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	4a19      	ldr	r2, [pc, #100]	; (800f5a4 <TIM_OC6_SetConfig+0xb8>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d00f      	beq.n	800f564 <TIM_OC6_SetConfig+0x78>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4a18      	ldr	r2, [pc, #96]	; (800f5a8 <TIM_OC6_SetConfig+0xbc>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d00b      	beq.n	800f564 <TIM_OC6_SetConfig+0x78>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a17      	ldr	r2, [pc, #92]	; (800f5ac <TIM_OC6_SetConfig+0xc0>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d007      	beq.n	800f564 <TIM_OC6_SetConfig+0x78>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4a16      	ldr	r2, [pc, #88]	; (800f5b0 <TIM_OC6_SetConfig+0xc4>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d003      	beq.n	800f564 <TIM_OC6_SetConfig+0x78>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4a15      	ldr	r2, [pc, #84]	; (800f5b4 <TIM_OC6_SetConfig+0xc8>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d109      	bne.n	800f578 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f56a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	695b      	ldr	r3, [r3, #20]
 800f570:	029b      	lsls	r3, r3, #10
 800f572:	697a      	ldr	r2, [r7, #20]
 800f574:	4313      	orrs	r3, r2
 800f576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	697a      	ldr	r2, [r7, #20]
 800f57c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	685a      	ldr	r2, [r3, #4]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	693a      	ldr	r2, [r7, #16]
 800f590:	621a      	str	r2, [r3, #32]
}
 800f592:	bf00      	nop
 800f594:	371c      	adds	r7, #28
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr
 800f59e:	bf00      	nop
 800f5a0:	feff8fff 	.word	0xfeff8fff
 800f5a4:	40010000 	.word	0x40010000
 800f5a8:	40010400 	.word	0x40010400
 800f5ac:	40014000 	.word	0x40014000
 800f5b0:	40014400 	.word	0x40014400
 800f5b4:	40014800 	.word	0x40014800

0800f5b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b087      	sub	sp, #28
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6a1b      	ldr	r3, [r3, #32]
 800f5c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	6a1b      	ldr	r3, [r3, #32]
 800f5ce:	f023 0201 	bic.w	r2, r3, #1
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f5e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	011b      	lsls	r3, r3, #4
 800f5e8:	693a      	ldr	r2, [r7, #16]
 800f5ea:	4313      	orrs	r3, r2
 800f5ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	f023 030a 	bic.w	r3, r3, #10
 800f5f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	697a      	ldr	r2, [r7, #20]
 800f608:	621a      	str	r2, [r3, #32]
}
 800f60a:	bf00      	nop
 800f60c:	371c      	adds	r7, #28
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr

0800f616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f616:	b480      	push	{r7}
 800f618:	b087      	sub	sp, #28
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	60f8      	str	r0, [r7, #12]
 800f61e:	60b9      	str	r1, [r7, #8]
 800f620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6a1b      	ldr	r3, [r3, #32]
 800f626:	f023 0210 	bic.w	r2, r3, #16
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	699b      	ldr	r3, [r3, #24]
 800f632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6a1b      	ldr	r3, [r3, #32]
 800f638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	031b      	lsls	r3, r3, #12
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	4313      	orrs	r3, r2
 800f64a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	011b      	lsls	r3, r3, #4
 800f658:	693a      	ldr	r2, [r7, #16]
 800f65a:	4313      	orrs	r3, r2
 800f65c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	697a      	ldr	r2, [r7, #20]
 800f662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	693a      	ldr	r2, [r7, #16]
 800f668:	621a      	str	r2, [r3, #32]
}
 800f66a:	bf00      	nop
 800f66c:	371c      	adds	r7, #28
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr
	...

0800f678 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f678:	b480      	push	{r7}
 800f67a:	b085      	sub	sp, #20
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f688:	68fa      	ldr	r2, [r7, #12]
 800f68a:	4b09      	ldr	r3, [pc, #36]	; (800f6b0 <TIM_ITRx_SetConfig+0x38>)
 800f68c:	4013      	ands	r3, r2
 800f68e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f690:	683a      	ldr	r2, [r7, #0]
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	4313      	orrs	r3, r2
 800f696:	f043 0307 	orr.w	r3, r3, #7
 800f69a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	609a      	str	r2, [r3, #8]
}
 800f6a2:	bf00      	nop
 800f6a4:	3714      	adds	r7, #20
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	ffcfff8f 	.word	0xffcfff8f

0800f6b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b087      	sub	sp, #28
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
 800f6c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f6ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	021a      	lsls	r2, r3, #8
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	431a      	orrs	r2, r3
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	4313      	orrs	r3, r2
 800f6dc:	697a      	ldr	r2, [r7, #20]
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	697a      	ldr	r2, [r7, #20]
 800f6e6:	609a      	str	r2, [r3, #8]
}
 800f6e8:	bf00      	nop
 800f6ea:	371c      	adds	r7, #28
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr

0800f6f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b087      	sub	sp, #28
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	60f8      	str	r0, [r7, #12]
 800f6fc:	60b9      	str	r1, [r7, #8]
 800f6fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	f003 031f 	and.w	r3, r3, #31
 800f706:	2201      	movs	r2, #1
 800f708:	fa02 f303 	lsl.w	r3, r2, r3
 800f70c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6a1a      	ldr	r2, [r3, #32]
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	43db      	mvns	r3, r3
 800f716:	401a      	ands	r2, r3
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6a1a      	ldr	r2, [r3, #32]
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	f003 031f 	and.w	r3, r3, #31
 800f726:	6879      	ldr	r1, [r7, #4]
 800f728:	fa01 f303 	lsl.w	r3, r1, r3
 800f72c:	431a      	orrs	r2, r3
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	621a      	str	r2, [r3, #32]
}
 800f732:	bf00      	nop
 800f734:	371c      	adds	r7, #28
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
	...

0800f740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f740:	b480      	push	{r7}
 800f742:	b085      	sub	sp, #20
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f750:	2b01      	cmp	r3, #1
 800f752:	d101      	bne.n	800f758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f754:	2302      	movs	r3, #2
 800f756:	e077      	b.n	800f848 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2201      	movs	r2, #1
 800f75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2202      	movs	r2, #2
 800f764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	689b      	ldr	r3, [r3, #8]
 800f776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a35      	ldr	r2, [pc, #212]	; (800f854 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d004      	beq.n	800f78c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4a34      	ldr	r2, [pc, #208]	; (800f858 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d108      	bne.n	800f79e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	4313      	orrs	r3, r2
 800f79c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a25      	ldr	r2, [pc, #148]	; (800f854 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d02c      	beq.n	800f81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7ca:	d027      	beq.n	800f81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4a22      	ldr	r2, [pc, #136]	; (800f85c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d022      	beq.n	800f81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a21      	ldr	r2, [pc, #132]	; (800f860 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d01d      	beq.n	800f81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4a1f      	ldr	r2, [pc, #124]	; (800f864 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d018      	beq.n	800f81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4a1a      	ldr	r2, [pc, #104]	; (800f858 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d013      	beq.n	800f81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	4a1b      	ldr	r2, [pc, #108]	; (800f868 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d00e      	beq.n	800f81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	4a1a      	ldr	r2, [pc, #104]	; (800f86c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d009      	beq.n	800f81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4a18      	ldr	r2, [pc, #96]	; (800f870 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d004      	beq.n	800f81c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	4a17      	ldr	r2, [pc, #92]	; (800f874 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	d10c      	bne.n	800f836 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f822:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	68ba      	ldr	r2, [r7, #8]
 800f82a:	4313      	orrs	r3, r2
 800f82c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	68ba      	ldr	r2, [r7, #8]
 800f834:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2201      	movs	r2, #1
 800f83a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2200      	movs	r2, #0
 800f842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f846:	2300      	movs	r3, #0
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3714      	adds	r7, #20
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr
 800f854:	40010000 	.word	0x40010000
 800f858:	40010400 	.word	0x40010400
 800f85c:	40000400 	.word	0x40000400
 800f860:	40000800 	.word	0x40000800
 800f864:	40000c00 	.word	0x40000c00
 800f868:	40001800 	.word	0x40001800
 800f86c:	40014000 	.word	0x40014000
 800f870:	4000e000 	.word	0x4000e000
 800f874:	4000e400 	.word	0x4000e400

0800f878 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f882:	2300      	movs	r3, #0
 800f884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d101      	bne.n	800f894 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f890:	2302      	movs	r3, #2
 800f892:	e087      	b.n	800f9a4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	689b      	ldr	r3, [r3, #8]
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	691b      	ldr	r3, [r3, #16]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	695b      	ldr	r3, [r3, #20]
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	699b      	ldr	r3, [r3, #24]
 800f908:	041b      	lsls	r3, r3, #16
 800f90a:	4313      	orrs	r3, r2
 800f90c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4a27      	ldr	r2, [pc, #156]	; (800f9b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d004      	beq.n	800f922 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a25      	ldr	r2, [pc, #148]	; (800f9b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d106      	bne.n	800f930 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	69db      	ldr	r3, [r3, #28]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	4a1e      	ldr	r2, [pc, #120]	; (800f9b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f936:	4293      	cmp	r3, r2
 800f938:	d004      	beq.n	800f944 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	4a1d      	ldr	r2, [pc, #116]	; (800f9b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d126      	bne.n	800f992 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f94e:	051b      	lsls	r3, r3, #20
 800f950:	4313      	orrs	r3, r2
 800f952:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	6a1b      	ldr	r3, [r3, #32]
 800f95e:	4313      	orrs	r3, r2
 800f960:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f96c:	4313      	orrs	r3, r2
 800f96e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4a0e      	ldr	r2, [pc, #56]	; (800f9b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d004      	beq.n	800f984 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	4a0d      	ldr	r2, [pc, #52]	; (800f9b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d106      	bne.n	800f992 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98e:	4313      	orrs	r3, r2
 800f990:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2200      	movs	r2, #0
 800f99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f9a2:	2300      	movs	r3, #0
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3714      	adds	r7, #20
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr
 800f9b0:	40010000 	.word	0x40010000
 800f9b4:	40010400 	.word	0x40010400

0800f9b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d101      	bne.n	800f9ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	e042      	b.n	800fa50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d106      	bne.n	800f9e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7f8 fe25 	bl	800862c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2224      	movs	r2, #36	; 0x24
 800f9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f022 0201 	bic.w	r2, r2, #1
 800f9f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 fd4a 	bl	8010494 <UART_SetConfig>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d101      	bne.n	800fa0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fa06:	2301      	movs	r3, #1
 800fa08:	e022      	b.n	800fa50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d002      	beq.n	800fa18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f001 fb9c 	bl	8011150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	685a      	ldr	r2, [r3, #4]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fa26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	689a      	ldr	r2, [r3, #8]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	681a      	ldr	r2, [r3, #0]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f042 0201 	orr.w	r2, r2, #1
 800fa46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f001 fc23 	bl	8011294 <UART_CheckIdleState>
 800fa4e:	4603      	mov	r3, r0
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b08a      	sub	sp, #40	; 0x28
 800fa5c:	af02      	add	r7, sp, #8
 800fa5e:	60f8      	str	r0, [r7, #12]
 800fa60:	60b9      	str	r1, [r7, #8]
 800fa62:	603b      	str	r3, [r7, #0]
 800fa64:	4613      	mov	r3, r2
 800fa66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa6e:	2b20      	cmp	r3, #32
 800fa70:	f040 8083 	bne.w	800fb7a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d002      	beq.n	800fa80 <HAL_UART_Transmit+0x28>
 800fa7a:	88fb      	ldrh	r3, [r7, #6]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d101      	bne.n	800fa84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fa80:	2301      	movs	r3, #1
 800fa82:	e07b      	b.n	800fb7c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d101      	bne.n	800fa92 <HAL_UART_Transmit+0x3a>
 800fa8e:	2302      	movs	r3, #2
 800fa90:	e074      	b.n	800fb7c <HAL_UART_Transmit+0x124>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2201      	movs	r2, #1
 800fa96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2221      	movs	r2, #33	; 0x21
 800faa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800faaa:	f7f8 ffc1 	bl	8008a30 <HAL_GetTick>
 800faae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	88fa      	ldrh	r2, [r7, #6]
 800fab4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	88fa      	ldrh	r2, [r7, #6]
 800fabc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fac8:	d108      	bne.n	800fadc <HAL_UART_Transmit+0x84>
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	691b      	ldr	r3, [r3, #16]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d104      	bne.n	800fadc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800fad2:	2300      	movs	r3, #0
 800fad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	61bb      	str	r3, [r7, #24]
 800fada:	e003      	b.n	800fae4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fae0:	2300      	movs	r3, #0
 800fae2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800faec:	e02c      	b.n	800fb48 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	9300      	str	r3, [sp, #0]
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	2200      	movs	r2, #0
 800faf6:	2180      	movs	r1, #128	; 0x80
 800faf8:	68f8      	ldr	r0, [r7, #12]
 800fafa:	f001 fc16 	bl	801132a <UART_WaitOnFlagUntilTimeout>
 800fafe:	4603      	mov	r3, r0
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d001      	beq.n	800fb08 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800fb04:	2303      	movs	r3, #3
 800fb06:	e039      	b.n	800fb7c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d10b      	bne.n	800fb26 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	881b      	ldrh	r3, [r3, #0]
 800fb12:	461a      	mov	r2, r3
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fb1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	3302      	adds	r3, #2
 800fb22:	61bb      	str	r3, [r7, #24]
 800fb24:	e007      	b.n	800fb36 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fb26:	69fb      	ldr	r3, [r7, #28]
 800fb28:	781a      	ldrb	r2, [r3, #0]
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	3301      	adds	r3, #1
 800fb34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	3b01      	subs	r3, #1
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d1cc      	bne.n	800faee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	9300      	str	r3, [sp, #0]
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	2140      	movs	r1, #64	; 0x40
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f001 fbe3 	bl	801132a <UART_WaitOnFlagUntilTimeout>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d001      	beq.n	800fb6e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800fb6a:	2303      	movs	r3, #3
 800fb6c:	e006      	b.n	800fb7c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2220      	movs	r2, #32
 800fb72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800fb76:	2300      	movs	r3, #0
 800fb78:	e000      	b.n	800fb7c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800fb7a:	2302      	movs	r3, #2
  }
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3720      	adds	r7, #32
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b08a      	sub	sp, #40	; 0x28
 800fb88:	af02      	add	r7, sp, #8
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	603b      	str	r3, [r7, #0]
 800fb90:	4613      	mov	r3, r2
 800fb92:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb9a:	2b20      	cmp	r3, #32
 800fb9c:	f040 80c0 	bne.w	800fd20 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d002      	beq.n	800fbac <HAL_UART_Receive+0x28>
 800fba6:	88fb      	ldrh	r3, [r7, #6]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d101      	bne.n	800fbb0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fbac:	2301      	movs	r3, #1
 800fbae:	e0b8      	b.n	800fd22 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d101      	bne.n	800fbbe <HAL_UART_Receive+0x3a>
 800fbba:	2302      	movs	r3, #2
 800fbbc:	e0b1      	b.n	800fd22 <HAL_UART_Receive+0x19e>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2222      	movs	r2, #34	; 0x22
 800fbd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fbdc:	f7f8 ff28 	bl	8008a30 <HAL_GetTick>
 800fbe0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	88fa      	ldrh	r2, [r7, #6]
 800fbe6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	88fa      	ldrh	r2, [r7, #6]
 800fbee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbfa:	d10e      	bne.n	800fc1a <HAL_UART_Receive+0x96>
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	691b      	ldr	r3, [r3, #16]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d105      	bne.n	800fc10 <HAL_UART_Receive+0x8c>
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fc0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc0e:	e02d      	b.n	800fc6c <HAL_UART_Receive+0xe8>
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	22ff      	movs	r2, #255	; 0xff
 800fc14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc18:	e028      	b.n	800fc6c <HAL_UART_Receive+0xe8>
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d10d      	bne.n	800fc3e <HAL_UART_Receive+0xba>
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	691b      	ldr	r3, [r3, #16]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d104      	bne.n	800fc34 <HAL_UART_Receive+0xb0>
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	22ff      	movs	r2, #255	; 0xff
 800fc2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc32:	e01b      	b.n	800fc6c <HAL_UART_Receive+0xe8>
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	227f      	movs	r2, #127	; 0x7f
 800fc38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc3c:	e016      	b.n	800fc6c <HAL_UART_Receive+0xe8>
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fc46:	d10d      	bne.n	800fc64 <HAL_UART_Receive+0xe0>
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	691b      	ldr	r3, [r3, #16]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d104      	bne.n	800fc5a <HAL_UART_Receive+0xd6>
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	227f      	movs	r2, #127	; 0x7f
 800fc54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc58:	e008      	b.n	800fc6c <HAL_UART_Receive+0xe8>
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	223f      	movs	r2, #63	; 0x3f
 800fc5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc62:	e003      	b.n	800fc6c <HAL_UART_Receive+0xe8>
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2200      	movs	r2, #0
 800fc68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc72:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	689b      	ldr	r3, [r3, #8]
 800fc78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc7c:	d108      	bne.n	800fc90 <HAL_UART_Receive+0x10c>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	691b      	ldr	r3, [r3, #16]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d104      	bne.n	800fc90 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800fc86:	2300      	movs	r3, #0
 800fc88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	61bb      	str	r3, [r7, #24]
 800fc8e:	e003      	b.n	800fc98 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fc94:	2300      	movs	r3, #0
 800fc96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fca0:	e032      	b.n	800fd08 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	9300      	str	r3, [sp, #0]
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	2120      	movs	r1, #32
 800fcac:	68f8      	ldr	r0, [r7, #12]
 800fcae:	f001 fb3c 	bl	801132a <UART_WaitOnFlagUntilTimeout>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d001      	beq.n	800fcbc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800fcb8:	2303      	movs	r3, #3
 800fcba:	e032      	b.n	800fd22 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800fcbc:	69fb      	ldr	r3, [r7, #28]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d10c      	bne.n	800fcdc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	8a7b      	ldrh	r3, [r7, #18]
 800fccc:	4013      	ands	r3, r2
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	69bb      	ldr	r3, [r7, #24]
 800fcd2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fcd4:	69bb      	ldr	r3, [r7, #24]
 800fcd6:	3302      	adds	r3, #2
 800fcd8:	61bb      	str	r3, [r7, #24]
 800fcda:	e00c      	b.n	800fcf6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce2:	b2da      	uxtb	r2, r3
 800fce4:	8a7b      	ldrh	r3, [r7, #18]
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	4013      	ands	r3, r2
 800fcea:	b2da      	uxtb	r2, r3
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	b29a      	uxth	r2, r3
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d1c6      	bne.n	800fca2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2220      	movs	r2, #32
 800fd18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	e000      	b.n	800fd22 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800fd20:	2302      	movs	r3, #2
  }
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3720      	adds	r7, #32
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
	...

0800fd2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b0ba      	sub	sp, #232	; 0xe8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	69db      	ldr	r3, [r3, #28]
 800fd3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	689b      	ldr	r3, [r3, #8]
 800fd4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fd52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800fd56:	f640 030f 	movw	r3, #2063	; 0x80f
 800fd5a:	4013      	ands	r3, r2
 800fd5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800fd60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d11b      	bne.n	800fda0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd6c:	f003 0320 	and.w	r3, r3, #32
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d015      	beq.n	800fda0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd78:	f003 0320 	and.w	r3, r3, #32
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d105      	bne.n	800fd8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fd80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fd84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d009      	beq.n	800fda0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	f000 835a 	beq.w	801044a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	4798      	blx	r3
      }
      return;
 800fd9e:	e354      	b.n	801044a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fda0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f000 811f 	beq.w	800ffe8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fdaa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fdae:	4b8b      	ldr	r3, [pc, #556]	; (800ffdc <HAL_UART_IRQHandler+0x2b0>)
 800fdb0:	4013      	ands	r3, r2
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d106      	bne.n	800fdc4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fdb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800fdba:	4b89      	ldr	r3, [pc, #548]	; (800ffe0 <HAL_UART_IRQHandler+0x2b4>)
 800fdbc:	4013      	ands	r3, r2
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f000 8112 	beq.w	800ffe8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fdc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdc8:	f003 0301 	and.w	r3, r3, #1
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d011      	beq.n	800fdf4 <HAL_UART_IRQHandler+0xc8>
 800fdd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fdd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d00b      	beq.n	800fdf4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	2201      	movs	r2, #1
 800fde2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdea:	f043 0201 	orr.w	r2, r3, #1
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fdf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdf8:	f003 0302 	and.w	r3, r3, #2
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d011      	beq.n	800fe24 <HAL_UART_IRQHandler+0xf8>
 800fe00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe04:	f003 0301 	and.w	r3, r3, #1
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d00b      	beq.n	800fe24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	2202      	movs	r2, #2
 800fe12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe1a:	f043 0204 	orr.w	r2, r3, #4
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe28:	f003 0304 	and.w	r3, r3, #4
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d011      	beq.n	800fe54 <HAL_UART_IRQHandler+0x128>
 800fe30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe34:	f003 0301 	and.w	r3, r3, #1
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00b      	beq.n	800fe54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	2204      	movs	r2, #4
 800fe42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe4a:	f043 0202 	orr.w	r2, r3, #2
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fe54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe58:	f003 0308 	and.w	r3, r3, #8
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d017      	beq.n	800fe90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fe60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe64:	f003 0320 	and.w	r3, r3, #32
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d105      	bne.n	800fe78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fe6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fe70:	4b5a      	ldr	r3, [pc, #360]	; (800ffdc <HAL_UART_IRQHandler+0x2b0>)
 800fe72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00b      	beq.n	800fe90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2208      	movs	r2, #8
 800fe7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe86:	f043 0208 	orr.w	r2, r3, #8
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fe90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d012      	beq.n	800fec2 <HAL_UART_IRQHandler+0x196>
 800fe9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fea0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d00c      	beq.n	800fec2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800feb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800feb8:	f043 0220 	orr.w	r2, r3, #32
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fec8:	2b00      	cmp	r3, #0
 800feca:	f000 82c0 	beq.w	801044e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fed2:	f003 0320 	and.w	r3, r3, #32
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d013      	beq.n	800ff02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800feda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fede:	f003 0320 	and.w	r3, r3, #32
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d105      	bne.n	800fef2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800feea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d007      	beq.n	800ff02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d003      	beq.n	800ff02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff16:	2b40      	cmp	r3, #64	; 0x40
 800ff18:	d005      	beq.n	800ff26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ff1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ff1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d04f      	beq.n	800ffc6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f001 fac8 	bl	80114bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	689b      	ldr	r3, [r3, #8]
 800ff32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff36:	2b40      	cmp	r3, #64	; 0x40
 800ff38:	d141      	bne.n	800ffbe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	3308      	adds	r3, #8
 800ff40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff48:	e853 3f00 	ldrex	r3, [r3]
 800ff4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ff50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ff54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	3308      	adds	r3, #8
 800ff62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ff66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ff6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ff72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ff76:	e841 2300 	strex	r3, r2, [r1]
 800ff7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ff7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d1d9      	bne.n	800ff3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d013      	beq.n	800ffb6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff92:	4a14      	ldr	r2, [pc, #80]	; (800ffe4 <HAL_UART_IRQHandler+0x2b8>)
 800ff94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7fa fdda 	bl	800ab54 <HAL_DMA_Abort_IT>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d017      	beq.n	800ffd6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ffb0:	4610      	mov	r0, r2
 800ffb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffb4:	e00f      	b.n	800ffd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 fa56 	bl	8010468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffbc:	e00b      	b.n	800ffd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 fa52 	bl	8010468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffc4:	e007      	b.n	800ffd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f000 fa4e 	bl	8010468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ffd4:	e23b      	b.n	801044e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffd6:	bf00      	nop
    return;
 800ffd8:	e239      	b.n	801044e <HAL_UART_IRQHandler+0x722>
 800ffda:	bf00      	nop
 800ffdc:	10000001 	.word	0x10000001
 800ffe0:	04000120 	.word	0x04000120
 800ffe4:	08011589 	.word	0x08011589

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	f040 81ce 	bne.w	801038e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fff6:	f003 0310 	and.w	r3, r3, #16
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f000 81c7 	beq.w	801038e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010004:	f003 0310 	and.w	r3, r3, #16
 8010008:	2b00      	cmp	r3, #0
 801000a:	f000 81c0 	beq.w	801038e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2210      	movs	r2, #16
 8010014:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010020:	2b40      	cmp	r3, #64	; 0x40
 8010022:	f040 813b 	bne.w	801029c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4a8b      	ldr	r2, [pc, #556]	; (801025c <HAL_UART_IRQHandler+0x530>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d059      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	4a89      	ldr	r2, [pc, #548]	; (8010260 <HAL_UART_IRQHandler+0x534>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d053      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	4a87      	ldr	r2, [pc, #540]	; (8010264 <HAL_UART_IRQHandler+0x538>)
 8010046:	4293      	cmp	r3, r2
 8010048:	d04d      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4a85      	ldr	r2, [pc, #532]	; (8010268 <HAL_UART_IRQHandler+0x53c>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d047      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4a83      	ldr	r2, [pc, #524]	; (801026c <HAL_UART_IRQHandler+0x540>)
 801005e:	4293      	cmp	r3, r2
 8010060:	d041      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	4a81      	ldr	r2, [pc, #516]	; (8010270 <HAL_UART_IRQHandler+0x544>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d03b      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4a7f      	ldr	r2, [pc, #508]	; (8010274 <HAL_UART_IRQHandler+0x548>)
 8010076:	4293      	cmp	r3, r2
 8010078:	d035      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4a7d      	ldr	r2, [pc, #500]	; (8010278 <HAL_UART_IRQHandler+0x54c>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d02f      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4a7b      	ldr	r2, [pc, #492]	; (801027c <HAL_UART_IRQHandler+0x550>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d029      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4a79      	ldr	r2, [pc, #484]	; (8010280 <HAL_UART_IRQHandler+0x554>)
 801009a:	4293      	cmp	r3, r2
 801009c:	d023      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4a77      	ldr	r2, [pc, #476]	; (8010284 <HAL_UART_IRQHandler+0x558>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d01d      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a75      	ldr	r2, [pc, #468]	; (8010288 <HAL_UART_IRQHandler+0x55c>)
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d017      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	4a73      	ldr	r2, [pc, #460]	; (801028c <HAL_UART_IRQHandler+0x560>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d011      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a71      	ldr	r2, [pc, #452]	; (8010290 <HAL_UART_IRQHandler+0x564>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d00b      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	4a6f      	ldr	r2, [pc, #444]	; (8010294 <HAL_UART_IRQHandler+0x568>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d005      	beq.n	80100e6 <HAL_UART_IRQHandler+0x3ba>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	4a6d      	ldr	r2, [pc, #436]	; (8010298 <HAL_UART_IRQHandler+0x56c>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d105      	bne.n	80100f2 <HAL_UART_IRQHandler+0x3c6>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	e004      	b.n	80100fc <HAL_UART_IRQHandler+0x3d0>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010100:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010104:	2b00      	cmp	r3, #0
 8010106:	f000 81a4 	beq.w	8010452 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010110:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010114:	429a      	cmp	r2, r3
 8010116:	f080 819c 	bcs.w	8010452 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010120:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010128:	69db      	ldr	r3, [r3, #28]
 801012a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801012e:	f000 8086 	beq.w	801023e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801013a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801013e:	e853 3f00 	ldrex	r3, [r3]
 8010142:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801014a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801014e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	461a      	mov	r2, r3
 8010158:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801015c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010160:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010164:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010168:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801016c:	e841 2300 	strex	r3, r2, [r1]
 8010170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010178:	2b00      	cmp	r3, #0
 801017a:	d1da      	bne.n	8010132 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	3308      	adds	r3, #8
 8010182:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010186:	e853 3f00 	ldrex	r3, [r3]
 801018a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801018c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801018e:	f023 0301 	bic.w	r3, r3, #1
 8010192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	3308      	adds	r3, #8
 801019c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80101a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80101a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80101a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80101ac:	e841 2300 	strex	r3, r2, [r1]
 80101b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80101b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d1e1      	bne.n	801017c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	3308      	adds	r3, #8
 80101be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101c2:	e853 3f00 	ldrex	r3, [r3]
 80101c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80101c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	3308      	adds	r3, #8
 80101d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80101dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80101de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80101e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80101e4:	e841 2300 	strex	r3, r2, [r1]
 80101e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80101ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d1e3      	bne.n	80101b8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2220      	movs	r2, #32
 80101f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010206:	e853 3f00 	ldrex	r3, [r3]
 801020a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801020c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801020e:	f023 0310 	bic.w	r3, r3, #16
 8010212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	461a      	mov	r2, r3
 801021c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010220:	65bb      	str	r3, [r7, #88]	; 0x58
 8010222:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010224:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010226:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010228:	e841 2300 	strex	r3, r2, [r1]
 801022c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801022e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010230:	2b00      	cmp	r3, #0
 8010232:	d1e4      	bne.n	80101fe <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010238:	4618      	mov	r0, r3
 801023a:	f7fa f96d 	bl	800a518 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801024a:	b29b      	uxth	r3, r3
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	b29b      	uxth	r3, r3
 8010250:	4619      	mov	r1, r3
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 f912 	bl	801047c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010258:	e0fb      	b.n	8010452 <HAL_UART_IRQHandler+0x726>
 801025a:	bf00      	nop
 801025c:	40020010 	.word	0x40020010
 8010260:	40020028 	.word	0x40020028
 8010264:	40020040 	.word	0x40020040
 8010268:	40020058 	.word	0x40020058
 801026c:	40020070 	.word	0x40020070
 8010270:	40020088 	.word	0x40020088
 8010274:	400200a0 	.word	0x400200a0
 8010278:	400200b8 	.word	0x400200b8
 801027c:	40020410 	.word	0x40020410
 8010280:	40020428 	.word	0x40020428
 8010284:	40020440 	.word	0x40020440
 8010288:	40020458 	.word	0x40020458
 801028c:	40020470 	.word	0x40020470
 8010290:	40020488 	.word	0x40020488
 8010294:	400204a0 	.word	0x400204a0
 8010298:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	1ad3      	subs	r3, r2, r3
 80102ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f000 80cc 	beq.w	8010456 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80102be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f000 80c7 	beq.w	8010456 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d0:	e853 3f00 	ldrex	r3, [r3]
 80102d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80102d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80102dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	461a      	mov	r2, r3
 80102e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80102ea:	647b      	str	r3, [r7, #68]	; 0x44
 80102ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80102f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102f2:	e841 2300 	strex	r3, r2, [r1]
 80102f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80102f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d1e4      	bne.n	80102c8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	3308      	adds	r3, #8
 8010304:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010308:	e853 3f00 	ldrex	r3, [r3]
 801030c:	623b      	str	r3, [r7, #32]
   return(result);
 801030e:	6a3a      	ldr	r2, [r7, #32]
 8010310:	4b54      	ldr	r3, [pc, #336]	; (8010464 <HAL_UART_IRQHandler+0x738>)
 8010312:	4013      	ands	r3, r2
 8010314:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	3308      	adds	r3, #8
 801031e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010322:	633a      	str	r2, [r7, #48]	; 0x30
 8010324:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801032a:	e841 2300 	strex	r3, r2, [r1]
 801032e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010332:	2b00      	cmp	r3, #0
 8010334:	d1e3      	bne.n	80102fe <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2220      	movs	r2, #32
 801033a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2200      	movs	r2, #0
 8010342:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2200      	movs	r2, #0
 8010348:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	e853 3f00 	ldrex	r3, [r3]
 8010356:	60fb      	str	r3, [r7, #12]
   return(result);
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f023 0310 	bic.w	r3, r3, #16
 801035e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	461a      	mov	r2, r3
 8010368:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801036c:	61fb      	str	r3, [r7, #28]
 801036e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010370:	69b9      	ldr	r1, [r7, #24]
 8010372:	69fa      	ldr	r2, [r7, #28]
 8010374:	e841 2300 	strex	r3, r2, [r1]
 8010378:	617b      	str	r3, [r7, #20]
   return(result);
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d1e4      	bne.n	801034a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010384:	4619      	mov	r1, r3
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f000 f878 	bl	801047c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801038c:	e063      	b.n	8010456 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801038e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010396:	2b00      	cmp	r3, #0
 8010398:	d00e      	beq.n	80103b8 <HAL_UART_IRQHandler+0x68c>
 801039a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801039e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d008      	beq.n	80103b8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80103ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f001 f92a 	bl	801160a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80103b6:	e051      	b.n	801045c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80103b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d014      	beq.n	80103ee <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80103c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d105      	bne.n	80103dc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80103d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d008      	beq.n	80103ee <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d03a      	beq.n	801045a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	4798      	blx	r3
    }
    return;
 80103ec:	e035      	b.n	801045a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80103ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d009      	beq.n	801040e <HAL_UART_IRQHandler+0x6e2>
 80103fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010402:	2b00      	cmp	r3, #0
 8010404:	d003      	beq.n	801040e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f001 f8d4 	bl	80115b4 <UART_EndTransmit_IT>
    return;
 801040c:	e026      	b.n	801045c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801040e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010416:	2b00      	cmp	r3, #0
 8010418:	d009      	beq.n	801042e <HAL_UART_IRQHandler+0x702>
 801041a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801041e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010422:	2b00      	cmp	r3, #0
 8010424:	d003      	beq.n	801042e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f001 f903 	bl	8011632 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801042c:	e016      	b.n	801045c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801042e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010436:	2b00      	cmp	r3, #0
 8010438:	d010      	beq.n	801045c <HAL_UART_IRQHandler+0x730>
 801043a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801043e:	2b00      	cmp	r3, #0
 8010440:	da0c      	bge.n	801045c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f001 f8eb 	bl	801161e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010448:	e008      	b.n	801045c <HAL_UART_IRQHandler+0x730>
      return;
 801044a:	bf00      	nop
 801044c:	e006      	b.n	801045c <HAL_UART_IRQHandler+0x730>
    return;
 801044e:	bf00      	nop
 8010450:	e004      	b.n	801045c <HAL_UART_IRQHandler+0x730>
      return;
 8010452:	bf00      	nop
 8010454:	e002      	b.n	801045c <HAL_UART_IRQHandler+0x730>
      return;
 8010456:	bf00      	nop
 8010458:	e000      	b.n	801045c <HAL_UART_IRQHandler+0x730>
    return;
 801045a:	bf00      	nop
  }
}
 801045c:	37e8      	adds	r7, #232	; 0xe8
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	effffffe 	.word	0xeffffffe

08010468 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010470:	bf00      	nop
 8010472:	370c      	adds	r7, #12
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801047c:	b480      	push	{r7}
 801047e:	b083      	sub	sp, #12
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	460b      	mov	r3, r1
 8010486:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010488:	bf00      	nop
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr

08010494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010494:	b5b0      	push	{r4, r5, r7, lr}
 8010496:	b08e      	sub	sp, #56	; 0x38
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	689a      	ldr	r2, [r3, #8]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	691b      	ldr	r3, [r3, #16]
 80104aa:	431a      	orrs	r2, r3
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	695b      	ldr	r3, [r3, #20]
 80104b0:	431a      	orrs	r2, r3
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	69db      	ldr	r3, [r3, #28]
 80104b6:	4313      	orrs	r3, r2
 80104b8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	4bbf      	ldr	r3, [pc, #764]	; (80107c0 <UART_SetConfig+0x32c>)
 80104c2:	4013      	ands	r3, r2
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	6812      	ldr	r2, [r2, #0]
 80104c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80104ca:	430b      	orrs	r3, r1
 80104cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	68da      	ldr	r2, [r3, #12]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	430a      	orrs	r2, r1
 80104e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	699b      	ldr	r3, [r3, #24]
 80104e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	4ab5      	ldr	r2, [pc, #724]	; (80107c4 <UART_SetConfig+0x330>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d004      	beq.n	80104fe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6a1b      	ldr	r3, [r3, #32]
 80104f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104fa:	4313      	orrs	r3, r2
 80104fc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	689a      	ldr	r2, [r3, #8]
 8010504:	4bb0      	ldr	r3, [pc, #704]	; (80107c8 <UART_SetConfig+0x334>)
 8010506:	4013      	ands	r3, r2
 8010508:	687a      	ldr	r2, [r7, #4]
 801050a:	6812      	ldr	r2, [r2, #0]
 801050c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801050e:	430b      	orrs	r3, r1
 8010510:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010518:	f023 010f 	bic.w	r1, r3, #15
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	430a      	orrs	r2, r1
 8010526:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4aa7      	ldr	r2, [pc, #668]	; (80107cc <UART_SetConfig+0x338>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d176      	bne.n	8010620 <UART_SetConfig+0x18c>
 8010532:	4ba7      	ldr	r3, [pc, #668]	; (80107d0 <UART_SetConfig+0x33c>)
 8010534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801053a:	2b28      	cmp	r3, #40	; 0x28
 801053c:	d86c      	bhi.n	8010618 <UART_SetConfig+0x184>
 801053e:	a201      	add	r2, pc, #4	; (adr r2, 8010544 <UART_SetConfig+0xb0>)
 8010540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010544:	080105e9 	.word	0x080105e9
 8010548:	08010619 	.word	0x08010619
 801054c:	08010619 	.word	0x08010619
 8010550:	08010619 	.word	0x08010619
 8010554:	08010619 	.word	0x08010619
 8010558:	08010619 	.word	0x08010619
 801055c:	08010619 	.word	0x08010619
 8010560:	08010619 	.word	0x08010619
 8010564:	080105f1 	.word	0x080105f1
 8010568:	08010619 	.word	0x08010619
 801056c:	08010619 	.word	0x08010619
 8010570:	08010619 	.word	0x08010619
 8010574:	08010619 	.word	0x08010619
 8010578:	08010619 	.word	0x08010619
 801057c:	08010619 	.word	0x08010619
 8010580:	08010619 	.word	0x08010619
 8010584:	080105f9 	.word	0x080105f9
 8010588:	08010619 	.word	0x08010619
 801058c:	08010619 	.word	0x08010619
 8010590:	08010619 	.word	0x08010619
 8010594:	08010619 	.word	0x08010619
 8010598:	08010619 	.word	0x08010619
 801059c:	08010619 	.word	0x08010619
 80105a0:	08010619 	.word	0x08010619
 80105a4:	08010601 	.word	0x08010601
 80105a8:	08010619 	.word	0x08010619
 80105ac:	08010619 	.word	0x08010619
 80105b0:	08010619 	.word	0x08010619
 80105b4:	08010619 	.word	0x08010619
 80105b8:	08010619 	.word	0x08010619
 80105bc:	08010619 	.word	0x08010619
 80105c0:	08010619 	.word	0x08010619
 80105c4:	08010609 	.word	0x08010609
 80105c8:	08010619 	.word	0x08010619
 80105cc:	08010619 	.word	0x08010619
 80105d0:	08010619 	.word	0x08010619
 80105d4:	08010619 	.word	0x08010619
 80105d8:	08010619 	.word	0x08010619
 80105dc:	08010619 	.word	0x08010619
 80105e0:	08010619 	.word	0x08010619
 80105e4:	08010611 	.word	0x08010611
 80105e8:	2301      	movs	r3, #1
 80105ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105ee:	e326      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80105f0:	2304      	movs	r3, #4
 80105f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105f6:	e322      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80105f8:	2308      	movs	r3, #8
 80105fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105fe:	e31e      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010600:	2310      	movs	r3, #16
 8010602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010606:	e31a      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010608:	2320      	movs	r3, #32
 801060a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801060e:	e316      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010610:	2340      	movs	r3, #64	; 0x40
 8010612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010616:	e312      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010618:	2380      	movs	r3, #128	; 0x80
 801061a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801061e:	e30e      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a6b      	ldr	r2, [pc, #428]	; (80107d4 <UART_SetConfig+0x340>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d130      	bne.n	801068c <UART_SetConfig+0x1f8>
 801062a:	4b69      	ldr	r3, [pc, #420]	; (80107d0 <UART_SetConfig+0x33c>)
 801062c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801062e:	f003 0307 	and.w	r3, r3, #7
 8010632:	2b05      	cmp	r3, #5
 8010634:	d826      	bhi.n	8010684 <UART_SetConfig+0x1f0>
 8010636:	a201      	add	r2, pc, #4	; (adr r2, 801063c <UART_SetConfig+0x1a8>)
 8010638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801063c:	08010655 	.word	0x08010655
 8010640:	0801065d 	.word	0x0801065d
 8010644:	08010665 	.word	0x08010665
 8010648:	0801066d 	.word	0x0801066d
 801064c:	08010675 	.word	0x08010675
 8010650:	0801067d 	.word	0x0801067d
 8010654:	2300      	movs	r3, #0
 8010656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801065a:	e2f0      	b.n	8010c3e <UART_SetConfig+0x7aa>
 801065c:	2304      	movs	r3, #4
 801065e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010662:	e2ec      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010664:	2308      	movs	r3, #8
 8010666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801066a:	e2e8      	b.n	8010c3e <UART_SetConfig+0x7aa>
 801066c:	2310      	movs	r3, #16
 801066e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010672:	e2e4      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010674:	2320      	movs	r3, #32
 8010676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801067a:	e2e0      	b.n	8010c3e <UART_SetConfig+0x7aa>
 801067c:	2340      	movs	r3, #64	; 0x40
 801067e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010682:	e2dc      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010684:	2380      	movs	r3, #128	; 0x80
 8010686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801068a:	e2d8      	b.n	8010c3e <UART_SetConfig+0x7aa>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4a51      	ldr	r2, [pc, #324]	; (80107d8 <UART_SetConfig+0x344>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d130      	bne.n	80106f8 <UART_SetConfig+0x264>
 8010696:	4b4e      	ldr	r3, [pc, #312]	; (80107d0 <UART_SetConfig+0x33c>)
 8010698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801069a:	f003 0307 	and.w	r3, r3, #7
 801069e:	2b05      	cmp	r3, #5
 80106a0:	d826      	bhi.n	80106f0 <UART_SetConfig+0x25c>
 80106a2:	a201      	add	r2, pc, #4	; (adr r2, 80106a8 <UART_SetConfig+0x214>)
 80106a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106a8:	080106c1 	.word	0x080106c1
 80106ac:	080106c9 	.word	0x080106c9
 80106b0:	080106d1 	.word	0x080106d1
 80106b4:	080106d9 	.word	0x080106d9
 80106b8:	080106e1 	.word	0x080106e1
 80106bc:	080106e9 	.word	0x080106e9
 80106c0:	2300      	movs	r3, #0
 80106c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106c6:	e2ba      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80106c8:	2304      	movs	r3, #4
 80106ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106ce:	e2b6      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80106d0:	2308      	movs	r3, #8
 80106d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106d6:	e2b2      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80106d8:	2310      	movs	r3, #16
 80106da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106de:	e2ae      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80106e0:	2320      	movs	r3, #32
 80106e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106e6:	e2aa      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80106e8:	2340      	movs	r3, #64	; 0x40
 80106ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106ee:	e2a6      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80106f0:	2380      	movs	r3, #128	; 0x80
 80106f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80106f6:	e2a2      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	4a37      	ldr	r2, [pc, #220]	; (80107dc <UART_SetConfig+0x348>)
 80106fe:	4293      	cmp	r3, r2
 8010700:	d130      	bne.n	8010764 <UART_SetConfig+0x2d0>
 8010702:	4b33      	ldr	r3, [pc, #204]	; (80107d0 <UART_SetConfig+0x33c>)
 8010704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010706:	f003 0307 	and.w	r3, r3, #7
 801070a:	2b05      	cmp	r3, #5
 801070c:	d826      	bhi.n	801075c <UART_SetConfig+0x2c8>
 801070e:	a201      	add	r2, pc, #4	; (adr r2, 8010714 <UART_SetConfig+0x280>)
 8010710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010714:	0801072d 	.word	0x0801072d
 8010718:	08010735 	.word	0x08010735
 801071c:	0801073d 	.word	0x0801073d
 8010720:	08010745 	.word	0x08010745
 8010724:	0801074d 	.word	0x0801074d
 8010728:	08010755 	.word	0x08010755
 801072c:	2300      	movs	r3, #0
 801072e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010732:	e284      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010734:	2304      	movs	r3, #4
 8010736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801073a:	e280      	b.n	8010c3e <UART_SetConfig+0x7aa>
 801073c:	2308      	movs	r3, #8
 801073e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010742:	e27c      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010744:	2310      	movs	r3, #16
 8010746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801074a:	e278      	b.n	8010c3e <UART_SetConfig+0x7aa>
 801074c:	2320      	movs	r3, #32
 801074e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010752:	e274      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010754:	2340      	movs	r3, #64	; 0x40
 8010756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801075a:	e270      	b.n	8010c3e <UART_SetConfig+0x7aa>
 801075c:	2380      	movs	r3, #128	; 0x80
 801075e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010762:	e26c      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	4a1d      	ldr	r2, [pc, #116]	; (80107e0 <UART_SetConfig+0x34c>)
 801076a:	4293      	cmp	r3, r2
 801076c:	d142      	bne.n	80107f4 <UART_SetConfig+0x360>
 801076e:	4b18      	ldr	r3, [pc, #96]	; (80107d0 <UART_SetConfig+0x33c>)
 8010770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010772:	f003 0307 	and.w	r3, r3, #7
 8010776:	2b05      	cmp	r3, #5
 8010778:	d838      	bhi.n	80107ec <UART_SetConfig+0x358>
 801077a:	a201      	add	r2, pc, #4	; (adr r2, 8010780 <UART_SetConfig+0x2ec>)
 801077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010780:	08010799 	.word	0x08010799
 8010784:	080107a1 	.word	0x080107a1
 8010788:	080107a9 	.word	0x080107a9
 801078c:	080107b1 	.word	0x080107b1
 8010790:	080107b9 	.word	0x080107b9
 8010794:	080107e5 	.word	0x080107e5
 8010798:	2300      	movs	r3, #0
 801079a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801079e:	e24e      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80107a0:	2304      	movs	r3, #4
 80107a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107a6:	e24a      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80107a8:	2308      	movs	r3, #8
 80107aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107ae:	e246      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80107b0:	2310      	movs	r3, #16
 80107b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107b6:	e242      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80107b8:	2320      	movs	r3, #32
 80107ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107be:	e23e      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80107c0:	cfff69f3 	.word	0xcfff69f3
 80107c4:	58000c00 	.word	0x58000c00
 80107c8:	11fff4ff 	.word	0x11fff4ff
 80107cc:	40011000 	.word	0x40011000
 80107d0:	58024400 	.word	0x58024400
 80107d4:	40004400 	.word	0x40004400
 80107d8:	40004800 	.word	0x40004800
 80107dc:	40004c00 	.word	0x40004c00
 80107e0:	40005000 	.word	0x40005000
 80107e4:	2340      	movs	r3, #64	; 0x40
 80107e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107ea:	e228      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80107ec:	2380      	movs	r3, #128	; 0x80
 80107ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107f2:	e224      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	4ab1      	ldr	r2, [pc, #708]	; (8010ac0 <UART_SetConfig+0x62c>)
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d176      	bne.n	80108ec <UART_SetConfig+0x458>
 80107fe:	4bb1      	ldr	r3, [pc, #708]	; (8010ac4 <UART_SetConfig+0x630>)
 8010800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010806:	2b28      	cmp	r3, #40	; 0x28
 8010808:	d86c      	bhi.n	80108e4 <UART_SetConfig+0x450>
 801080a:	a201      	add	r2, pc, #4	; (adr r2, 8010810 <UART_SetConfig+0x37c>)
 801080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010810:	080108b5 	.word	0x080108b5
 8010814:	080108e5 	.word	0x080108e5
 8010818:	080108e5 	.word	0x080108e5
 801081c:	080108e5 	.word	0x080108e5
 8010820:	080108e5 	.word	0x080108e5
 8010824:	080108e5 	.word	0x080108e5
 8010828:	080108e5 	.word	0x080108e5
 801082c:	080108e5 	.word	0x080108e5
 8010830:	080108bd 	.word	0x080108bd
 8010834:	080108e5 	.word	0x080108e5
 8010838:	080108e5 	.word	0x080108e5
 801083c:	080108e5 	.word	0x080108e5
 8010840:	080108e5 	.word	0x080108e5
 8010844:	080108e5 	.word	0x080108e5
 8010848:	080108e5 	.word	0x080108e5
 801084c:	080108e5 	.word	0x080108e5
 8010850:	080108c5 	.word	0x080108c5
 8010854:	080108e5 	.word	0x080108e5
 8010858:	080108e5 	.word	0x080108e5
 801085c:	080108e5 	.word	0x080108e5
 8010860:	080108e5 	.word	0x080108e5
 8010864:	080108e5 	.word	0x080108e5
 8010868:	080108e5 	.word	0x080108e5
 801086c:	080108e5 	.word	0x080108e5
 8010870:	080108cd 	.word	0x080108cd
 8010874:	080108e5 	.word	0x080108e5
 8010878:	080108e5 	.word	0x080108e5
 801087c:	080108e5 	.word	0x080108e5
 8010880:	080108e5 	.word	0x080108e5
 8010884:	080108e5 	.word	0x080108e5
 8010888:	080108e5 	.word	0x080108e5
 801088c:	080108e5 	.word	0x080108e5
 8010890:	080108d5 	.word	0x080108d5
 8010894:	080108e5 	.word	0x080108e5
 8010898:	080108e5 	.word	0x080108e5
 801089c:	080108e5 	.word	0x080108e5
 80108a0:	080108e5 	.word	0x080108e5
 80108a4:	080108e5 	.word	0x080108e5
 80108a8:	080108e5 	.word	0x080108e5
 80108ac:	080108e5 	.word	0x080108e5
 80108b0:	080108dd 	.word	0x080108dd
 80108b4:	2301      	movs	r3, #1
 80108b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108ba:	e1c0      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80108bc:	2304      	movs	r3, #4
 80108be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108c2:	e1bc      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80108c4:	2308      	movs	r3, #8
 80108c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108ca:	e1b8      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80108cc:	2310      	movs	r3, #16
 80108ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108d2:	e1b4      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80108d4:	2320      	movs	r3, #32
 80108d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108da:	e1b0      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80108dc:	2340      	movs	r3, #64	; 0x40
 80108de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108e2:	e1ac      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80108e4:	2380      	movs	r3, #128	; 0x80
 80108e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108ea:	e1a8      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4a75      	ldr	r2, [pc, #468]	; (8010ac8 <UART_SetConfig+0x634>)
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d130      	bne.n	8010958 <UART_SetConfig+0x4c4>
 80108f6:	4b73      	ldr	r3, [pc, #460]	; (8010ac4 <UART_SetConfig+0x630>)
 80108f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108fa:	f003 0307 	and.w	r3, r3, #7
 80108fe:	2b05      	cmp	r3, #5
 8010900:	d826      	bhi.n	8010950 <UART_SetConfig+0x4bc>
 8010902:	a201      	add	r2, pc, #4	; (adr r2, 8010908 <UART_SetConfig+0x474>)
 8010904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010908:	08010921 	.word	0x08010921
 801090c:	08010929 	.word	0x08010929
 8010910:	08010931 	.word	0x08010931
 8010914:	08010939 	.word	0x08010939
 8010918:	08010941 	.word	0x08010941
 801091c:	08010949 	.word	0x08010949
 8010920:	2300      	movs	r3, #0
 8010922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010926:	e18a      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010928:	2304      	movs	r3, #4
 801092a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801092e:	e186      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010930:	2308      	movs	r3, #8
 8010932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010936:	e182      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010938:	2310      	movs	r3, #16
 801093a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801093e:	e17e      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010940:	2320      	movs	r3, #32
 8010942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010946:	e17a      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010948:	2340      	movs	r3, #64	; 0x40
 801094a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801094e:	e176      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010950:	2380      	movs	r3, #128	; 0x80
 8010952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010956:	e172      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	4a5b      	ldr	r2, [pc, #364]	; (8010acc <UART_SetConfig+0x638>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d130      	bne.n	80109c4 <UART_SetConfig+0x530>
 8010962:	4b58      	ldr	r3, [pc, #352]	; (8010ac4 <UART_SetConfig+0x630>)
 8010964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010966:	f003 0307 	and.w	r3, r3, #7
 801096a:	2b05      	cmp	r3, #5
 801096c:	d826      	bhi.n	80109bc <UART_SetConfig+0x528>
 801096e:	a201      	add	r2, pc, #4	; (adr r2, 8010974 <UART_SetConfig+0x4e0>)
 8010970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010974:	0801098d 	.word	0x0801098d
 8010978:	08010995 	.word	0x08010995
 801097c:	0801099d 	.word	0x0801099d
 8010980:	080109a5 	.word	0x080109a5
 8010984:	080109ad 	.word	0x080109ad
 8010988:	080109b5 	.word	0x080109b5
 801098c:	2300      	movs	r3, #0
 801098e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010992:	e154      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010994:	2304      	movs	r3, #4
 8010996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801099a:	e150      	b.n	8010c3e <UART_SetConfig+0x7aa>
 801099c:	2308      	movs	r3, #8
 801099e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109a2:	e14c      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80109a4:	2310      	movs	r3, #16
 80109a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109aa:	e148      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80109ac:	2320      	movs	r3, #32
 80109ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109b2:	e144      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80109b4:	2340      	movs	r3, #64	; 0x40
 80109b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109ba:	e140      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80109bc:	2380      	movs	r3, #128	; 0x80
 80109be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109c2:	e13c      	b.n	8010c3e <UART_SetConfig+0x7aa>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4a41      	ldr	r2, [pc, #260]	; (8010ad0 <UART_SetConfig+0x63c>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	f040 8082 	bne.w	8010ad4 <UART_SetConfig+0x640>
 80109d0:	4b3c      	ldr	r3, [pc, #240]	; (8010ac4 <UART_SetConfig+0x630>)
 80109d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80109d8:	2b28      	cmp	r3, #40	; 0x28
 80109da:	d86d      	bhi.n	8010ab8 <UART_SetConfig+0x624>
 80109dc:	a201      	add	r2, pc, #4	; (adr r2, 80109e4 <UART_SetConfig+0x550>)
 80109de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e2:	bf00      	nop
 80109e4:	08010a89 	.word	0x08010a89
 80109e8:	08010ab9 	.word	0x08010ab9
 80109ec:	08010ab9 	.word	0x08010ab9
 80109f0:	08010ab9 	.word	0x08010ab9
 80109f4:	08010ab9 	.word	0x08010ab9
 80109f8:	08010ab9 	.word	0x08010ab9
 80109fc:	08010ab9 	.word	0x08010ab9
 8010a00:	08010ab9 	.word	0x08010ab9
 8010a04:	08010a91 	.word	0x08010a91
 8010a08:	08010ab9 	.word	0x08010ab9
 8010a0c:	08010ab9 	.word	0x08010ab9
 8010a10:	08010ab9 	.word	0x08010ab9
 8010a14:	08010ab9 	.word	0x08010ab9
 8010a18:	08010ab9 	.word	0x08010ab9
 8010a1c:	08010ab9 	.word	0x08010ab9
 8010a20:	08010ab9 	.word	0x08010ab9
 8010a24:	08010a99 	.word	0x08010a99
 8010a28:	08010ab9 	.word	0x08010ab9
 8010a2c:	08010ab9 	.word	0x08010ab9
 8010a30:	08010ab9 	.word	0x08010ab9
 8010a34:	08010ab9 	.word	0x08010ab9
 8010a38:	08010ab9 	.word	0x08010ab9
 8010a3c:	08010ab9 	.word	0x08010ab9
 8010a40:	08010ab9 	.word	0x08010ab9
 8010a44:	08010aa1 	.word	0x08010aa1
 8010a48:	08010ab9 	.word	0x08010ab9
 8010a4c:	08010ab9 	.word	0x08010ab9
 8010a50:	08010ab9 	.word	0x08010ab9
 8010a54:	08010ab9 	.word	0x08010ab9
 8010a58:	08010ab9 	.word	0x08010ab9
 8010a5c:	08010ab9 	.word	0x08010ab9
 8010a60:	08010ab9 	.word	0x08010ab9
 8010a64:	08010aa9 	.word	0x08010aa9
 8010a68:	08010ab9 	.word	0x08010ab9
 8010a6c:	08010ab9 	.word	0x08010ab9
 8010a70:	08010ab9 	.word	0x08010ab9
 8010a74:	08010ab9 	.word	0x08010ab9
 8010a78:	08010ab9 	.word	0x08010ab9
 8010a7c:	08010ab9 	.word	0x08010ab9
 8010a80:	08010ab9 	.word	0x08010ab9
 8010a84:	08010ab1 	.word	0x08010ab1
 8010a88:	2301      	movs	r3, #1
 8010a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a8e:	e0d6      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010a90:	2304      	movs	r3, #4
 8010a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a96:	e0d2      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010a98:	2308      	movs	r3, #8
 8010a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a9e:	e0ce      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010aa0:	2310      	movs	r3, #16
 8010aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aa6:	e0ca      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010aa8:	2320      	movs	r3, #32
 8010aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aae:	e0c6      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010ab0:	2340      	movs	r3, #64	; 0x40
 8010ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ab6:	e0c2      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010ab8:	2380      	movs	r3, #128	; 0x80
 8010aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010abe:	e0be      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010ac0:	40011400 	.word	0x40011400
 8010ac4:	58024400 	.word	0x58024400
 8010ac8:	40007800 	.word	0x40007800
 8010acc:	40007c00 	.word	0x40007c00
 8010ad0:	40011800 	.word	0x40011800
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4aad      	ldr	r2, [pc, #692]	; (8010d90 <UART_SetConfig+0x8fc>)
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d176      	bne.n	8010bcc <UART_SetConfig+0x738>
 8010ade:	4bad      	ldr	r3, [pc, #692]	; (8010d94 <UART_SetConfig+0x900>)
 8010ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ae6:	2b28      	cmp	r3, #40	; 0x28
 8010ae8:	d86c      	bhi.n	8010bc4 <UART_SetConfig+0x730>
 8010aea:	a201      	add	r2, pc, #4	; (adr r2, 8010af0 <UART_SetConfig+0x65c>)
 8010aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010af0:	08010b95 	.word	0x08010b95
 8010af4:	08010bc5 	.word	0x08010bc5
 8010af8:	08010bc5 	.word	0x08010bc5
 8010afc:	08010bc5 	.word	0x08010bc5
 8010b00:	08010bc5 	.word	0x08010bc5
 8010b04:	08010bc5 	.word	0x08010bc5
 8010b08:	08010bc5 	.word	0x08010bc5
 8010b0c:	08010bc5 	.word	0x08010bc5
 8010b10:	08010b9d 	.word	0x08010b9d
 8010b14:	08010bc5 	.word	0x08010bc5
 8010b18:	08010bc5 	.word	0x08010bc5
 8010b1c:	08010bc5 	.word	0x08010bc5
 8010b20:	08010bc5 	.word	0x08010bc5
 8010b24:	08010bc5 	.word	0x08010bc5
 8010b28:	08010bc5 	.word	0x08010bc5
 8010b2c:	08010bc5 	.word	0x08010bc5
 8010b30:	08010ba5 	.word	0x08010ba5
 8010b34:	08010bc5 	.word	0x08010bc5
 8010b38:	08010bc5 	.word	0x08010bc5
 8010b3c:	08010bc5 	.word	0x08010bc5
 8010b40:	08010bc5 	.word	0x08010bc5
 8010b44:	08010bc5 	.word	0x08010bc5
 8010b48:	08010bc5 	.word	0x08010bc5
 8010b4c:	08010bc5 	.word	0x08010bc5
 8010b50:	08010bad 	.word	0x08010bad
 8010b54:	08010bc5 	.word	0x08010bc5
 8010b58:	08010bc5 	.word	0x08010bc5
 8010b5c:	08010bc5 	.word	0x08010bc5
 8010b60:	08010bc5 	.word	0x08010bc5
 8010b64:	08010bc5 	.word	0x08010bc5
 8010b68:	08010bc5 	.word	0x08010bc5
 8010b6c:	08010bc5 	.word	0x08010bc5
 8010b70:	08010bb5 	.word	0x08010bb5
 8010b74:	08010bc5 	.word	0x08010bc5
 8010b78:	08010bc5 	.word	0x08010bc5
 8010b7c:	08010bc5 	.word	0x08010bc5
 8010b80:	08010bc5 	.word	0x08010bc5
 8010b84:	08010bc5 	.word	0x08010bc5
 8010b88:	08010bc5 	.word	0x08010bc5
 8010b8c:	08010bc5 	.word	0x08010bc5
 8010b90:	08010bbd 	.word	0x08010bbd
 8010b94:	2301      	movs	r3, #1
 8010b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b9a:	e050      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010b9c:	2304      	movs	r3, #4
 8010b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ba2:	e04c      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010ba4:	2308      	movs	r3, #8
 8010ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010baa:	e048      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010bac:	2310      	movs	r3, #16
 8010bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bb2:	e044      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010bb4:	2320      	movs	r3, #32
 8010bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bba:	e040      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010bbc:	2340      	movs	r3, #64	; 0x40
 8010bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bc2:	e03c      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010bc4:	2380      	movs	r3, #128	; 0x80
 8010bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bca:	e038      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4a71      	ldr	r2, [pc, #452]	; (8010d98 <UART_SetConfig+0x904>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d130      	bne.n	8010c38 <UART_SetConfig+0x7a4>
 8010bd6:	4b6f      	ldr	r3, [pc, #444]	; (8010d94 <UART_SetConfig+0x900>)
 8010bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bda:	f003 0307 	and.w	r3, r3, #7
 8010bde:	2b05      	cmp	r3, #5
 8010be0:	d826      	bhi.n	8010c30 <UART_SetConfig+0x79c>
 8010be2:	a201      	add	r2, pc, #4	; (adr r2, 8010be8 <UART_SetConfig+0x754>)
 8010be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010be8:	08010c01 	.word	0x08010c01
 8010bec:	08010c09 	.word	0x08010c09
 8010bf0:	08010c11 	.word	0x08010c11
 8010bf4:	08010c19 	.word	0x08010c19
 8010bf8:	08010c21 	.word	0x08010c21
 8010bfc:	08010c29 	.word	0x08010c29
 8010c00:	2302      	movs	r3, #2
 8010c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c06:	e01a      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010c08:	2304      	movs	r3, #4
 8010c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c0e:	e016      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010c10:	2308      	movs	r3, #8
 8010c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c16:	e012      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010c18:	2310      	movs	r3, #16
 8010c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c1e:	e00e      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010c20:	2320      	movs	r3, #32
 8010c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c26:	e00a      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010c28:	2340      	movs	r3, #64	; 0x40
 8010c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c2e:	e006      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010c30:	2380      	movs	r3, #128	; 0x80
 8010c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c36:	e002      	b.n	8010c3e <UART_SetConfig+0x7aa>
 8010c38:	2380      	movs	r3, #128	; 0x80
 8010c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	4a55      	ldr	r2, [pc, #340]	; (8010d98 <UART_SetConfig+0x904>)
 8010c44:	4293      	cmp	r3, r2
 8010c46:	f040 80f0 	bne.w	8010e2a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010c4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010c4e:	2b20      	cmp	r3, #32
 8010c50:	dc46      	bgt.n	8010ce0 <UART_SetConfig+0x84c>
 8010c52:	2b02      	cmp	r3, #2
 8010c54:	db75      	blt.n	8010d42 <UART_SetConfig+0x8ae>
 8010c56:	3b02      	subs	r3, #2
 8010c58:	2b1e      	cmp	r3, #30
 8010c5a:	d872      	bhi.n	8010d42 <UART_SetConfig+0x8ae>
 8010c5c:	a201      	add	r2, pc, #4	; (adr r2, 8010c64 <UART_SetConfig+0x7d0>)
 8010c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c62:	bf00      	nop
 8010c64:	08010ce7 	.word	0x08010ce7
 8010c68:	08010d43 	.word	0x08010d43
 8010c6c:	08010cef 	.word	0x08010cef
 8010c70:	08010d43 	.word	0x08010d43
 8010c74:	08010d43 	.word	0x08010d43
 8010c78:	08010d43 	.word	0x08010d43
 8010c7c:	08010cff 	.word	0x08010cff
 8010c80:	08010d43 	.word	0x08010d43
 8010c84:	08010d43 	.word	0x08010d43
 8010c88:	08010d43 	.word	0x08010d43
 8010c8c:	08010d43 	.word	0x08010d43
 8010c90:	08010d43 	.word	0x08010d43
 8010c94:	08010d43 	.word	0x08010d43
 8010c98:	08010d43 	.word	0x08010d43
 8010c9c:	08010d0f 	.word	0x08010d0f
 8010ca0:	08010d43 	.word	0x08010d43
 8010ca4:	08010d43 	.word	0x08010d43
 8010ca8:	08010d43 	.word	0x08010d43
 8010cac:	08010d43 	.word	0x08010d43
 8010cb0:	08010d43 	.word	0x08010d43
 8010cb4:	08010d43 	.word	0x08010d43
 8010cb8:	08010d43 	.word	0x08010d43
 8010cbc:	08010d43 	.word	0x08010d43
 8010cc0:	08010d43 	.word	0x08010d43
 8010cc4:	08010d43 	.word	0x08010d43
 8010cc8:	08010d43 	.word	0x08010d43
 8010ccc:	08010d43 	.word	0x08010d43
 8010cd0:	08010d43 	.word	0x08010d43
 8010cd4:	08010d43 	.word	0x08010d43
 8010cd8:	08010d43 	.word	0x08010d43
 8010cdc:	08010d35 	.word	0x08010d35
 8010ce0:	2b40      	cmp	r3, #64	; 0x40
 8010ce2:	d02a      	beq.n	8010d3a <UART_SetConfig+0x8a6>
 8010ce4:	e02d      	b.n	8010d42 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010ce6:	f7fc fdf7 	bl	800d8d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8010cea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010cec:	e02f      	b.n	8010d4e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010cee:	f107 0314 	add.w	r3, r7, #20
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fc fe06 	bl	800d904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010cf8:	69bb      	ldr	r3, [r7, #24]
 8010cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010cfc:	e027      	b.n	8010d4e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010cfe:	f107 0308 	add.w	r3, r7, #8
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7fc ff52 	bl	800dbac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d0c:	e01f      	b.n	8010d4e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d0e:	4b21      	ldr	r3, [pc, #132]	; (8010d94 <UART_SetConfig+0x900>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f003 0320 	and.w	r3, r3, #32
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d009      	beq.n	8010d2e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d1a:	4b1e      	ldr	r3, [pc, #120]	; (8010d94 <UART_SetConfig+0x900>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	08db      	lsrs	r3, r3, #3
 8010d20:	f003 0303 	and.w	r3, r3, #3
 8010d24:	4a1d      	ldr	r2, [pc, #116]	; (8010d9c <UART_SetConfig+0x908>)
 8010d26:	fa22 f303 	lsr.w	r3, r2, r3
 8010d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d2c:	e00f      	b.n	8010d4e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8010d2e:	4b1b      	ldr	r3, [pc, #108]	; (8010d9c <UART_SetConfig+0x908>)
 8010d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d32:	e00c      	b.n	8010d4e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010d34:	4b1a      	ldr	r3, [pc, #104]	; (8010da0 <UART_SetConfig+0x90c>)
 8010d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d38:	e009      	b.n	8010d4e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d40:	e005      	b.n	8010d4e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8010d42:	2300      	movs	r3, #0
 8010d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010d46:	2301      	movs	r3, #1
 8010d48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010d4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	f000 81e6 	beq.w	8011122 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d5a:	4a12      	ldr	r2, [pc, #72]	; (8010da4 <UART_SetConfig+0x910>)
 8010d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d60:	461a      	mov	r2, r3
 8010d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d68:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	685a      	ldr	r2, [r3, #4]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	4413      	add	r3, r2
 8010d74:	6a3a      	ldr	r2, [r7, #32]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d305      	bcc.n	8010d86 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010d80:	6a3a      	ldr	r2, [r7, #32]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d910      	bls.n	8010da8 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8010d86:	2301      	movs	r3, #1
 8010d88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010d8c:	e1c9      	b.n	8011122 <UART_SetConfig+0xc8e>
 8010d8e:	bf00      	nop
 8010d90:	40011c00 	.word	0x40011c00
 8010d94:	58024400 	.word	0x58024400
 8010d98:	58000c00 	.word	0x58000c00
 8010d9c:	03d09000 	.word	0x03d09000
 8010da0:	003d0900 	.word	0x003d0900
 8010da4:	08014db0 	.word	0x08014db0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010daa:	4618      	mov	r0, r3
 8010dac:	f04f 0100 	mov.w	r1, #0
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db4:	4ac1      	ldr	r2, [pc, #772]	; (80110bc <UART_SetConfig+0xc28>)
 8010db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dba:	b29a      	uxth	r2, r3
 8010dbc:	f04f 0300 	mov.w	r3, #0
 8010dc0:	f7ef fafe 	bl	80003c0 <__aeabi_uldivmod>
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	4610      	mov	r0, r2
 8010dca:	4619      	mov	r1, r3
 8010dcc:	f04f 0200 	mov.w	r2, #0
 8010dd0:	f04f 0300 	mov.w	r3, #0
 8010dd4:	020b      	lsls	r3, r1, #8
 8010dd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010dda:	0202      	lsls	r2, r0, #8
 8010ddc:	6879      	ldr	r1, [r7, #4]
 8010dde:	6849      	ldr	r1, [r1, #4]
 8010de0:	0849      	lsrs	r1, r1, #1
 8010de2:	4608      	mov	r0, r1
 8010de4:	f04f 0100 	mov.w	r1, #0
 8010de8:	1814      	adds	r4, r2, r0
 8010dea:	eb43 0501 	adc.w	r5, r3, r1
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	461a      	mov	r2, r3
 8010df4:	f04f 0300 	mov.w	r3, #0
 8010df8:	4620      	mov	r0, r4
 8010dfa:	4629      	mov	r1, r5
 8010dfc:	f7ef fae0 	bl	80003c0 <__aeabi_uldivmod>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4613      	mov	r3, r2
 8010e06:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010e0e:	d308      	bcc.n	8010e22 <UART_SetConfig+0x98e>
 8010e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e16:	d204      	bcs.n	8010e22 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e1e:	60da      	str	r2, [r3, #12]
 8010e20:	e17f      	b.n	8011122 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8010e22:	2301      	movs	r3, #1
 8010e24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010e28:	e17b      	b.n	8011122 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	69db      	ldr	r3, [r3, #28]
 8010e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e32:	f040 80bd 	bne.w	8010fb0 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8010e36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010e3a:	2b20      	cmp	r3, #32
 8010e3c:	dc48      	bgt.n	8010ed0 <UART_SetConfig+0xa3c>
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	db7b      	blt.n	8010f3a <UART_SetConfig+0xaa6>
 8010e42:	2b20      	cmp	r3, #32
 8010e44:	d879      	bhi.n	8010f3a <UART_SetConfig+0xaa6>
 8010e46:	a201      	add	r2, pc, #4	; (adr r2, 8010e4c <UART_SetConfig+0x9b8>)
 8010e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e4c:	08010ed7 	.word	0x08010ed7
 8010e50:	08010edf 	.word	0x08010edf
 8010e54:	08010f3b 	.word	0x08010f3b
 8010e58:	08010f3b 	.word	0x08010f3b
 8010e5c:	08010ee7 	.word	0x08010ee7
 8010e60:	08010f3b 	.word	0x08010f3b
 8010e64:	08010f3b 	.word	0x08010f3b
 8010e68:	08010f3b 	.word	0x08010f3b
 8010e6c:	08010ef7 	.word	0x08010ef7
 8010e70:	08010f3b 	.word	0x08010f3b
 8010e74:	08010f3b 	.word	0x08010f3b
 8010e78:	08010f3b 	.word	0x08010f3b
 8010e7c:	08010f3b 	.word	0x08010f3b
 8010e80:	08010f3b 	.word	0x08010f3b
 8010e84:	08010f3b 	.word	0x08010f3b
 8010e88:	08010f3b 	.word	0x08010f3b
 8010e8c:	08010f07 	.word	0x08010f07
 8010e90:	08010f3b 	.word	0x08010f3b
 8010e94:	08010f3b 	.word	0x08010f3b
 8010e98:	08010f3b 	.word	0x08010f3b
 8010e9c:	08010f3b 	.word	0x08010f3b
 8010ea0:	08010f3b 	.word	0x08010f3b
 8010ea4:	08010f3b 	.word	0x08010f3b
 8010ea8:	08010f3b 	.word	0x08010f3b
 8010eac:	08010f3b 	.word	0x08010f3b
 8010eb0:	08010f3b 	.word	0x08010f3b
 8010eb4:	08010f3b 	.word	0x08010f3b
 8010eb8:	08010f3b 	.word	0x08010f3b
 8010ebc:	08010f3b 	.word	0x08010f3b
 8010ec0:	08010f3b 	.word	0x08010f3b
 8010ec4:	08010f3b 	.word	0x08010f3b
 8010ec8:	08010f3b 	.word	0x08010f3b
 8010ecc:	08010f2d 	.word	0x08010f2d
 8010ed0:	2b40      	cmp	r3, #64	; 0x40
 8010ed2:	d02e      	beq.n	8010f32 <UART_SetConfig+0xa9e>
 8010ed4:	e031      	b.n	8010f3a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ed6:	f7fb f999 	bl	800c20c <HAL_RCC_GetPCLK1Freq>
 8010eda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010edc:	e033      	b.n	8010f46 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ede:	f7fb f9ab 	bl	800c238 <HAL_RCC_GetPCLK2Freq>
 8010ee2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010ee4:	e02f      	b.n	8010f46 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ee6:	f107 0314 	add.w	r3, r7, #20
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fc fd0a 	bl	800d904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010ef0:	69bb      	ldr	r3, [r7, #24]
 8010ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ef4:	e027      	b.n	8010f46 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ef6:	f107 0308 	add.w	r3, r7, #8
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fc fe56 	bl	800dbac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f04:	e01f      	b.n	8010f46 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f06:	4b6e      	ldr	r3, [pc, #440]	; (80110c0 <UART_SetConfig+0xc2c>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f003 0320 	and.w	r3, r3, #32
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d009      	beq.n	8010f26 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f12:	4b6b      	ldr	r3, [pc, #428]	; (80110c0 <UART_SetConfig+0xc2c>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	08db      	lsrs	r3, r3, #3
 8010f18:	f003 0303 	and.w	r3, r3, #3
 8010f1c:	4a69      	ldr	r2, [pc, #420]	; (80110c4 <UART_SetConfig+0xc30>)
 8010f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8010f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f24:	e00f      	b.n	8010f46 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8010f26:	4b67      	ldr	r3, [pc, #412]	; (80110c4 <UART_SetConfig+0xc30>)
 8010f28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f2a:	e00c      	b.n	8010f46 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f2c:	4b66      	ldr	r3, [pc, #408]	; (80110c8 <UART_SetConfig+0xc34>)
 8010f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f30:	e009      	b.n	8010f46 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f38:	e005      	b.n	8010f46 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010f3e:	2301      	movs	r3, #1
 8010f40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010f44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	f000 80ea 	beq.w	8011122 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f52:	4a5a      	ldr	r2, [pc, #360]	; (80110bc <UART_SetConfig+0xc28>)
 8010f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f58:	461a      	mov	r2, r3
 8010f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f60:	005a      	lsls	r2, r3, #1
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	085b      	lsrs	r3, r3, #1
 8010f68:	441a      	add	r2, r3
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f76:	2b0f      	cmp	r3, #15
 8010f78:	d916      	bls.n	8010fa8 <UART_SetConfig+0xb14>
 8010f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f80:	d212      	bcs.n	8010fa8 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	f023 030f 	bic.w	r3, r3, #15
 8010f8a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f8e:	085b      	lsrs	r3, r3, #1
 8010f90:	b29b      	uxth	r3, r3
 8010f92:	f003 0307 	and.w	r3, r3, #7
 8010f96:	b29a      	uxth	r2, r3
 8010f98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010fa4:	60da      	str	r2, [r3, #12]
 8010fa6:	e0bc      	b.n	8011122 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8010fa8:	2301      	movs	r3, #1
 8010faa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010fae:	e0b8      	b.n	8011122 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010fb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010fb4:	2b20      	cmp	r3, #32
 8010fb6:	dc4b      	bgt.n	8011050 <UART_SetConfig+0xbbc>
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	f2c0 8087 	blt.w	80110cc <UART_SetConfig+0xc38>
 8010fbe:	2b20      	cmp	r3, #32
 8010fc0:	f200 8084 	bhi.w	80110cc <UART_SetConfig+0xc38>
 8010fc4:	a201      	add	r2, pc, #4	; (adr r2, 8010fcc <UART_SetConfig+0xb38>)
 8010fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fca:	bf00      	nop
 8010fcc:	08011057 	.word	0x08011057
 8010fd0:	0801105f 	.word	0x0801105f
 8010fd4:	080110cd 	.word	0x080110cd
 8010fd8:	080110cd 	.word	0x080110cd
 8010fdc:	08011067 	.word	0x08011067
 8010fe0:	080110cd 	.word	0x080110cd
 8010fe4:	080110cd 	.word	0x080110cd
 8010fe8:	080110cd 	.word	0x080110cd
 8010fec:	08011077 	.word	0x08011077
 8010ff0:	080110cd 	.word	0x080110cd
 8010ff4:	080110cd 	.word	0x080110cd
 8010ff8:	080110cd 	.word	0x080110cd
 8010ffc:	080110cd 	.word	0x080110cd
 8011000:	080110cd 	.word	0x080110cd
 8011004:	080110cd 	.word	0x080110cd
 8011008:	080110cd 	.word	0x080110cd
 801100c:	08011087 	.word	0x08011087
 8011010:	080110cd 	.word	0x080110cd
 8011014:	080110cd 	.word	0x080110cd
 8011018:	080110cd 	.word	0x080110cd
 801101c:	080110cd 	.word	0x080110cd
 8011020:	080110cd 	.word	0x080110cd
 8011024:	080110cd 	.word	0x080110cd
 8011028:	080110cd 	.word	0x080110cd
 801102c:	080110cd 	.word	0x080110cd
 8011030:	080110cd 	.word	0x080110cd
 8011034:	080110cd 	.word	0x080110cd
 8011038:	080110cd 	.word	0x080110cd
 801103c:	080110cd 	.word	0x080110cd
 8011040:	080110cd 	.word	0x080110cd
 8011044:	080110cd 	.word	0x080110cd
 8011048:	080110cd 	.word	0x080110cd
 801104c:	080110ad 	.word	0x080110ad
 8011050:	2b40      	cmp	r3, #64	; 0x40
 8011052:	d02e      	beq.n	80110b2 <UART_SetConfig+0xc1e>
 8011054:	e03a      	b.n	80110cc <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011056:	f7fb f8d9 	bl	800c20c <HAL_RCC_GetPCLK1Freq>
 801105a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801105c:	e03c      	b.n	80110d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801105e:	f7fb f8eb 	bl	800c238 <HAL_RCC_GetPCLK2Freq>
 8011062:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011064:	e038      	b.n	80110d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011066:	f107 0314 	add.w	r3, r7, #20
 801106a:	4618      	mov	r0, r3
 801106c:	f7fc fc4a 	bl	800d904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011070:	69bb      	ldr	r3, [r7, #24]
 8011072:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011074:	e030      	b.n	80110d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011076:	f107 0308 	add.w	r3, r7, #8
 801107a:	4618      	mov	r0, r3
 801107c:	f7fc fd96 	bl	800dbac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011084:	e028      	b.n	80110d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011086:	4b0e      	ldr	r3, [pc, #56]	; (80110c0 <UART_SetConfig+0xc2c>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f003 0320 	and.w	r3, r3, #32
 801108e:	2b00      	cmp	r3, #0
 8011090:	d009      	beq.n	80110a6 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011092:	4b0b      	ldr	r3, [pc, #44]	; (80110c0 <UART_SetConfig+0xc2c>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	08db      	lsrs	r3, r3, #3
 8011098:	f003 0303 	and.w	r3, r3, #3
 801109c:	4a09      	ldr	r2, [pc, #36]	; (80110c4 <UART_SetConfig+0xc30>)
 801109e:	fa22 f303 	lsr.w	r3, r2, r3
 80110a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80110a4:	e018      	b.n	80110d8 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80110a6:	4b07      	ldr	r3, [pc, #28]	; (80110c4 <UART_SetConfig+0xc30>)
 80110a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80110aa:	e015      	b.n	80110d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80110ac:	4b06      	ldr	r3, [pc, #24]	; (80110c8 <UART_SetConfig+0xc34>)
 80110ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80110b0:	e012      	b.n	80110d8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80110b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80110b8:	e00e      	b.n	80110d8 <UART_SetConfig+0xc44>
 80110ba:	bf00      	nop
 80110bc:	08014db0 	.word	0x08014db0
 80110c0:	58024400 	.word	0x58024400
 80110c4:	03d09000 	.word	0x03d09000
 80110c8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80110cc:	2300      	movs	r3, #0
 80110ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80110d0:	2301      	movs	r3, #1
 80110d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80110d6:	bf00      	nop
    }

    if (pclk != 0U)
 80110d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d021      	beq.n	8011122 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e2:	4a1a      	ldr	r2, [pc, #104]	; (801114c <UART_SetConfig+0xcb8>)
 80110e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110e8:	461a      	mov	r2, r3
 80110ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	085b      	lsrs	r3, r3, #1
 80110f6:	441a      	add	r2, r3
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011100:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011104:	2b0f      	cmp	r3, #15
 8011106:	d909      	bls.n	801111c <UART_SetConfig+0xc88>
 8011108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801110a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801110e:	d205      	bcs.n	801111c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011112:	b29a      	uxth	r2, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	60da      	str	r2, [r3, #12]
 801111a:	e002      	b.n	8011122 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 801111c:	2301      	movs	r3, #1
 801111e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2201      	movs	r2, #1
 8011126:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2201      	movs	r2, #1
 801112e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2200      	movs	r2, #0
 8011136:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801113e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8011142:	4618      	mov	r0, r3
 8011144:	3738      	adds	r7, #56	; 0x38
 8011146:	46bd      	mov	sp, r7
 8011148:	bdb0      	pop	{r4, r5, r7, pc}
 801114a:	bf00      	nop
 801114c:	08014db0 	.word	0x08014db0

08011150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011150:	b480      	push	{r7}
 8011152:	b083      	sub	sp, #12
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801115c:	f003 0301 	and.w	r3, r3, #1
 8011160:	2b00      	cmp	r3, #0
 8011162:	d00a      	beq.n	801117a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	430a      	orrs	r2, r1
 8011178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801117e:	f003 0302 	and.w	r3, r3, #2
 8011182:	2b00      	cmp	r3, #0
 8011184:	d00a      	beq.n	801119c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	430a      	orrs	r2, r1
 801119a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a0:	f003 0304 	and.w	r3, r3, #4
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d00a      	beq.n	80111be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	430a      	orrs	r2, r1
 80111bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111c2:	f003 0308 	and.w	r3, r3, #8
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d00a      	beq.n	80111e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	430a      	orrs	r2, r1
 80111de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111e4:	f003 0310 	and.w	r3, r3, #16
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d00a      	beq.n	8011202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	689b      	ldr	r3, [r3, #8]
 80111f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	430a      	orrs	r2, r1
 8011200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011206:	f003 0320 	and.w	r3, r3, #32
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00a      	beq.n	8011224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	430a      	orrs	r2, r1
 8011222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801122c:	2b00      	cmp	r3, #0
 801122e:	d01a      	beq.n	8011266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	430a      	orrs	r2, r1
 8011244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801124a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801124e:	d10a      	bne.n	8011266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	430a      	orrs	r2, r1
 8011264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801126e:	2b00      	cmp	r3, #0
 8011270:	d00a      	beq.n	8011288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	430a      	orrs	r2, r1
 8011286:	605a      	str	r2, [r3, #4]
  }
}
 8011288:	bf00      	nop
 801128a:	370c      	adds	r7, #12
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr

08011294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b086      	sub	sp, #24
 8011298:	af02      	add	r7, sp, #8
 801129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2200      	movs	r2, #0
 80112a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80112a4:	f7f7 fbc4 	bl	8008a30 <HAL_GetTick>
 80112a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	f003 0308 	and.w	r3, r3, #8
 80112b4:	2b08      	cmp	r3, #8
 80112b6:	d10e      	bne.n	80112d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80112b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80112bc:	9300      	str	r3, [sp, #0]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2200      	movs	r2, #0
 80112c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 f82f 	bl	801132a <UART_WaitOnFlagUntilTimeout>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d001      	beq.n	80112d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80112d2:	2303      	movs	r3, #3
 80112d4:	e025      	b.n	8011322 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f003 0304 	and.w	r3, r3, #4
 80112e0:	2b04      	cmp	r3, #4
 80112e2:	d10e      	bne.n	8011302 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80112e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80112e8:	9300      	str	r3, [sp, #0]
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2200      	movs	r2, #0
 80112ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f000 f819 	bl	801132a <UART_WaitOnFlagUntilTimeout>
 80112f8:	4603      	mov	r3, r0
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d001      	beq.n	8011302 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80112fe:	2303      	movs	r3, #3
 8011300:	e00f      	b.n	8011322 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2220      	movs	r2, #32
 8011306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2220      	movs	r2, #32
 801130e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2200      	movs	r2, #0
 801131c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011320:	2300      	movs	r3, #0
}
 8011322:	4618      	mov	r0, r3
 8011324:	3710      	adds	r7, #16
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801132a:	b580      	push	{r7, lr}
 801132c:	b09c      	sub	sp, #112	; 0x70
 801132e:	af00      	add	r7, sp, #0
 8011330:	60f8      	str	r0, [r7, #12]
 8011332:	60b9      	str	r1, [r7, #8]
 8011334:	603b      	str	r3, [r7, #0]
 8011336:	4613      	mov	r3, r2
 8011338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801133a:	e0a9      	b.n	8011490 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801133c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801133e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011342:	f000 80a5 	beq.w	8011490 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011346:	f7f7 fb73 	bl	8008a30 <HAL_GetTick>
 801134a:	4602      	mov	r2, r0
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	1ad3      	subs	r3, r2, r3
 8011350:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011352:	429a      	cmp	r2, r3
 8011354:	d302      	bcc.n	801135c <UART_WaitOnFlagUntilTimeout+0x32>
 8011356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011358:	2b00      	cmp	r3, #0
 801135a:	d140      	bne.n	80113de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011364:	e853 3f00 	ldrex	r3, [r3]
 8011368:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801136a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801136c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011370:	667b      	str	r3, [r7, #100]	; 0x64
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	461a      	mov	r2, r3
 8011378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801137a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801137c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801137e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011380:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011382:	e841 2300 	strex	r3, r2, [r1]
 8011386:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801138a:	2b00      	cmp	r3, #0
 801138c:	d1e6      	bne.n	801135c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	3308      	adds	r3, #8
 8011394:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011398:	e853 3f00 	ldrex	r3, [r3]
 801139c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801139e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a0:	f023 0301 	bic.w	r3, r3, #1
 80113a4:	663b      	str	r3, [r7, #96]	; 0x60
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	3308      	adds	r3, #8
 80113ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80113ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80113b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80113b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113b6:	e841 2300 	strex	r3, r2, [r1]
 80113ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80113bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d1e5      	bne.n	801138e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2220      	movs	r2, #32
 80113c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2220      	movs	r2, #32
 80113ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	2200      	movs	r2, #0
 80113d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80113da:	2303      	movs	r3, #3
 80113dc:	e069      	b.n	80114b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	f003 0304 	and.w	r3, r3, #4
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d051      	beq.n	8011490 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	69db      	ldr	r3, [r3, #28]
 80113f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80113f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80113fa:	d149      	bne.n	8011490 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011404:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140e:	e853 3f00 	ldrex	r3, [r3]
 8011412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801141a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	461a      	mov	r2, r3
 8011422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011424:	637b      	str	r3, [r7, #52]	; 0x34
 8011426:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801142a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801142c:	e841 2300 	strex	r3, r2, [r1]
 8011430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011434:	2b00      	cmp	r3, #0
 8011436:	d1e6      	bne.n	8011406 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	3308      	adds	r3, #8
 801143e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	e853 3f00 	ldrex	r3, [r3]
 8011446:	613b      	str	r3, [r7, #16]
   return(result);
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	f023 0301 	bic.w	r3, r3, #1
 801144e:	66bb      	str	r3, [r7, #104]	; 0x68
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	3308      	adds	r3, #8
 8011456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011458:	623a      	str	r2, [r7, #32]
 801145a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801145c:	69f9      	ldr	r1, [r7, #28]
 801145e:	6a3a      	ldr	r2, [r7, #32]
 8011460:	e841 2300 	strex	r3, r2, [r1]
 8011464:	61bb      	str	r3, [r7, #24]
   return(result);
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d1e5      	bne.n	8011438 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	2220      	movs	r2, #32
 8011470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	2220      	movs	r2, #32
 8011478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	2220      	movs	r2, #32
 8011480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2200      	movs	r2, #0
 8011488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801148c:	2303      	movs	r3, #3
 801148e:	e010      	b.n	80114b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	69da      	ldr	r2, [r3, #28]
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	4013      	ands	r3, r2
 801149a:	68ba      	ldr	r2, [r7, #8]
 801149c:	429a      	cmp	r2, r3
 801149e:	bf0c      	ite	eq
 80114a0:	2301      	moveq	r3, #1
 80114a2:	2300      	movne	r3, #0
 80114a4:	b2db      	uxtb	r3, r3
 80114a6:	461a      	mov	r2, r3
 80114a8:	79fb      	ldrb	r3, [r7, #7]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	f43f af46 	beq.w	801133c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3770      	adds	r7, #112	; 0x70
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
	...

080114bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80114bc:	b480      	push	{r7}
 80114be:	b095      	sub	sp, #84	; 0x54
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114cc:	e853 3f00 	ldrex	r3, [r3]
 80114d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80114d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80114d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	461a      	mov	r2, r3
 80114e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114e2:	643b      	str	r3, [r7, #64]	; 0x40
 80114e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80114e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80114ea:	e841 2300 	strex	r3, r2, [r1]
 80114ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80114f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d1e6      	bne.n	80114c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	3308      	adds	r3, #8
 80114fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114fe:	6a3b      	ldr	r3, [r7, #32]
 8011500:	e853 3f00 	ldrex	r3, [r3]
 8011504:	61fb      	str	r3, [r7, #28]
   return(result);
 8011506:	69fa      	ldr	r2, [r7, #28]
 8011508:	4b1e      	ldr	r3, [pc, #120]	; (8011584 <UART_EndRxTransfer+0xc8>)
 801150a:	4013      	ands	r3, r2
 801150c:	64bb      	str	r3, [r7, #72]	; 0x48
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	3308      	adds	r3, #8
 8011514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011516:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011518:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801151a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801151c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801151e:	e841 2300 	strex	r3, r2, [r1]
 8011522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1e5      	bne.n	80114f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801152e:	2b01      	cmp	r3, #1
 8011530:	d118      	bne.n	8011564 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	e853 3f00 	ldrex	r3, [r3]
 801153e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	f023 0310 	bic.w	r3, r3, #16
 8011546:	647b      	str	r3, [r7, #68]	; 0x44
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	461a      	mov	r2, r3
 801154e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011550:	61bb      	str	r3, [r7, #24]
 8011552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011554:	6979      	ldr	r1, [r7, #20]
 8011556:	69ba      	ldr	r2, [r7, #24]
 8011558:	e841 2300 	strex	r3, r2, [r1]
 801155c:	613b      	str	r3, [r7, #16]
   return(result);
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d1e6      	bne.n	8011532 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2220      	movs	r2, #32
 8011568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2200      	movs	r2, #0
 8011570:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	671a      	str	r2, [r3, #112]	; 0x70
}
 8011578:	bf00      	nop
 801157a:	3754      	adds	r7, #84	; 0x54
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr
 8011584:	effffffe 	.word	0xeffffffe

08011588 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b084      	sub	sp, #16
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	2200      	movs	r2, #0
 801159a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2200      	movs	r2, #0
 80115a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80115a6:	68f8      	ldr	r0, [r7, #12]
 80115a8:	f7fe ff5e 	bl	8010468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115ac:	bf00      	nop
 80115ae:	3710      	adds	r7, #16
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b088      	sub	sp, #32
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	e853 3f00 	ldrex	r3, [r3]
 80115c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115d0:	61fb      	str	r3, [r7, #28]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	461a      	mov	r2, r3
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	61bb      	str	r3, [r7, #24]
 80115dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115de:	6979      	ldr	r1, [r7, #20]
 80115e0:	69ba      	ldr	r2, [r7, #24]
 80115e2:	e841 2300 	strex	r3, r2, [r1]
 80115e6:	613b      	str	r3, [r7, #16]
   return(result);
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d1e6      	bne.n	80115bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2220      	movs	r2, #32
 80115f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2200      	movs	r2, #0
 80115fa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f7f5 fdb1 	bl	8007164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011602:	bf00      	nop
 8011604:	3720      	adds	r7, #32
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801160a:	b480      	push	{r7}
 801160c:	b083      	sub	sp, #12
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011612:	bf00      	nop
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr

0801161e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801161e:	b480      	push	{r7}
 8011620:	b083      	sub	sp, #12
 8011622:	af00      	add	r7, sp, #0
 8011624:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011626:	bf00      	nop
 8011628:	370c      	adds	r7, #12
 801162a:	46bd      	mov	sp, r7
 801162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011630:	4770      	bx	lr

08011632 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011632:	b480      	push	{r7}
 8011634:	b083      	sub	sp, #12
 8011636:	af00      	add	r7, sp, #0
 8011638:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801163a:	bf00      	nop
 801163c:	370c      	adds	r7, #12
 801163e:	46bd      	mov	sp, r7
 8011640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011644:	4770      	bx	lr

08011646 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011646:	b480      	push	{r7}
 8011648:	b085      	sub	sp, #20
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011654:	2b01      	cmp	r3, #1
 8011656:	d101      	bne.n	801165c <HAL_UARTEx_DisableFifoMode+0x16>
 8011658:	2302      	movs	r3, #2
 801165a:	e027      	b.n	80116ac <HAL_UARTEx_DisableFifoMode+0x66>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2201      	movs	r2, #1
 8011660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2224      	movs	r2, #36	; 0x24
 8011668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f022 0201 	bic.w	r2, r2, #1
 8011682:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801168a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2200      	movs	r2, #0
 8011690:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	68fa      	ldr	r2, [r7, #12]
 8011698:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2220      	movs	r2, #32
 801169e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2200      	movs	r2, #0
 80116a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80116aa:	2300      	movs	r3, #0
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3714      	adds	r7, #20
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr

080116b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b084      	sub	sp, #16
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d101      	bne.n	80116d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80116cc:	2302      	movs	r3, #2
 80116ce:	e02d      	b.n	801172c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2201      	movs	r2, #1
 80116d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2224      	movs	r2, #36	; 0x24
 80116dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f022 0201 	bic.w	r2, r2, #1
 80116f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	689b      	ldr	r3, [r3, #8]
 80116fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	683a      	ldr	r2, [r7, #0]
 8011708:	430a      	orrs	r2, r1
 801170a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f000 f84f 	bl	80117b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	68fa      	ldr	r2, [r7, #12]
 8011718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2220      	movs	r2, #32
 801171e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2200      	movs	r2, #0
 8011726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801172a:	2300      	movs	r3, #0
}
 801172c:	4618      	mov	r0, r3
 801172e:	3710      	adds	r7, #16
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}

08011734 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b084      	sub	sp, #16
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011744:	2b01      	cmp	r3, #1
 8011746:	d101      	bne.n	801174c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011748:	2302      	movs	r3, #2
 801174a:	e02d      	b.n	80117a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2201      	movs	r2, #1
 8011750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2224      	movs	r2, #36	; 0x24
 8011758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	681a      	ldr	r2, [r3, #0]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	f022 0201 	bic.w	r2, r2, #1
 8011772:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	689b      	ldr	r3, [r3, #8]
 801177a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	683a      	ldr	r2, [r7, #0]
 8011784:	430a      	orrs	r2, r1
 8011786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f000 f811 	bl	80117b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	68fa      	ldr	r2, [r7, #12]
 8011794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2220      	movs	r2, #32
 801179a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2200      	movs	r2, #0
 80117a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80117a6:	2300      	movs	r3, #0
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	3710      	adds	r7, #16
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80117b0:	b480      	push	{r7}
 80117b2:	b085      	sub	sp, #20
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d108      	bne.n	80117d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2201      	movs	r2, #1
 80117c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2201      	movs	r2, #1
 80117cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80117d0:	e031      	b.n	8011836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80117d2:	2310      	movs	r3, #16
 80117d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80117d6:	2310      	movs	r3, #16
 80117d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	689b      	ldr	r3, [r3, #8]
 80117e0:	0e5b      	lsrs	r3, r3, #25
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	f003 0307 	and.w	r3, r3, #7
 80117e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	689b      	ldr	r3, [r3, #8]
 80117f0:	0f5b      	lsrs	r3, r3, #29
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	f003 0307 	and.w	r3, r3, #7
 80117f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80117fa:	7bbb      	ldrb	r3, [r7, #14]
 80117fc:	7b3a      	ldrb	r2, [r7, #12]
 80117fe:	4911      	ldr	r1, [pc, #68]	; (8011844 <UARTEx_SetNbDataToProcess+0x94>)
 8011800:	5c8a      	ldrb	r2, [r1, r2]
 8011802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011806:	7b3a      	ldrb	r2, [r7, #12]
 8011808:	490f      	ldr	r1, [pc, #60]	; (8011848 <UARTEx_SetNbDataToProcess+0x98>)
 801180a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801180c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011810:	b29a      	uxth	r2, r3
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011818:	7bfb      	ldrb	r3, [r7, #15]
 801181a:	7b7a      	ldrb	r2, [r7, #13]
 801181c:	4909      	ldr	r1, [pc, #36]	; (8011844 <UARTEx_SetNbDataToProcess+0x94>)
 801181e:	5c8a      	ldrb	r2, [r1, r2]
 8011820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011824:	7b7a      	ldrb	r2, [r7, #13]
 8011826:	4908      	ldr	r1, [pc, #32]	; (8011848 <UARTEx_SetNbDataToProcess+0x98>)
 8011828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801182a:	fb93 f3f2 	sdiv	r3, r3, r2
 801182e:	b29a      	uxth	r2, r3
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011836:	bf00      	nop
 8011838:	3714      	adds	r7, #20
 801183a:	46bd      	mov	sp, r7
 801183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011840:	4770      	bx	lr
 8011842:	bf00      	nop
 8011844:	08014dc8 	.word	0x08014dc8
 8011848:	08014dd0 	.word	0x08014dd0

0801184c <__errno>:
 801184c:	4b01      	ldr	r3, [pc, #4]	; (8011854 <__errno+0x8>)
 801184e:	6818      	ldr	r0, [r3, #0]
 8011850:	4770      	bx	lr
 8011852:	bf00      	nop
 8011854:	24000024 	.word	0x24000024

08011858 <__libc_init_array>:
 8011858:	b570      	push	{r4, r5, r6, lr}
 801185a:	4d0d      	ldr	r5, [pc, #52]	; (8011890 <__libc_init_array+0x38>)
 801185c:	4c0d      	ldr	r4, [pc, #52]	; (8011894 <__libc_init_array+0x3c>)
 801185e:	1b64      	subs	r4, r4, r5
 8011860:	10a4      	asrs	r4, r4, #2
 8011862:	2600      	movs	r6, #0
 8011864:	42a6      	cmp	r6, r4
 8011866:	d109      	bne.n	801187c <__libc_init_array+0x24>
 8011868:	4d0b      	ldr	r5, [pc, #44]	; (8011898 <__libc_init_array+0x40>)
 801186a:	4c0c      	ldr	r4, [pc, #48]	; (801189c <__libc_init_array+0x44>)
 801186c:	f003 fa8a 	bl	8014d84 <_init>
 8011870:	1b64      	subs	r4, r4, r5
 8011872:	10a4      	asrs	r4, r4, #2
 8011874:	2600      	movs	r6, #0
 8011876:	42a6      	cmp	r6, r4
 8011878:	d105      	bne.n	8011886 <__libc_init_array+0x2e>
 801187a:	bd70      	pop	{r4, r5, r6, pc}
 801187c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011880:	4798      	blx	r3
 8011882:	3601      	adds	r6, #1
 8011884:	e7ee      	b.n	8011864 <__libc_init_array+0xc>
 8011886:	f855 3b04 	ldr.w	r3, [r5], #4
 801188a:	4798      	blx	r3
 801188c:	3601      	adds	r6, #1
 801188e:	e7f2      	b.n	8011876 <__libc_init_array+0x1e>
 8011890:	080153a0 	.word	0x080153a0
 8011894:	080153a0 	.word	0x080153a0
 8011898:	080153a0 	.word	0x080153a0
 801189c:	080153a4 	.word	0x080153a4

080118a0 <memcpy>:
 80118a0:	440a      	add	r2, r1
 80118a2:	4291      	cmp	r1, r2
 80118a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80118a8:	d100      	bne.n	80118ac <memcpy+0xc>
 80118aa:	4770      	bx	lr
 80118ac:	b510      	push	{r4, lr}
 80118ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118b6:	4291      	cmp	r1, r2
 80118b8:	d1f9      	bne.n	80118ae <memcpy+0xe>
 80118ba:	bd10      	pop	{r4, pc}

080118bc <memset>:
 80118bc:	4402      	add	r2, r0
 80118be:	4603      	mov	r3, r0
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d100      	bne.n	80118c6 <memset+0xa>
 80118c4:	4770      	bx	lr
 80118c6:	f803 1b01 	strb.w	r1, [r3], #1
 80118ca:	e7f9      	b.n	80118c0 <memset+0x4>

080118cc <__cvt>:
 80118cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ce:	ed2d 8b02 	vpush	{d8}
 80118d2:	eeb0 8b40 	vmov.f64	d8, d0
 80118d6:	b085      	sub	sp, #20
 80118d8:	4617      	mov	r7, r2
 80118da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80118dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80118de:	ee18 2a90 	vmov	r2, s17
 80118e2:	f025 0520 	bic.w	r5, r5, #32
 80118e6:	2a00      	cmp	r2, #0
 80118e8:	bfb6      	itet	lt
 80118ea:	222d      	movlt	r2, #45	; 0x2d
 80118ec:	2200      	movge	r2, #0
 80118ee:	eeb1 8b40 	vneglt.f64	d8, d0
 80118f2:	2d46      	cmp	r5, #70	; 0x46
 80118f4:	460c      	mov	r4, r1
 80118f6:	701a      	strb	r2, [r3, #0]
 80118f8:	d004      	beq.n	8011904 <__cvt+0x38>
 80118fa:	2d45      	cmp	r5, #69	; 0x45
 80118fc:	d100      	bne.n	8011900 <__cvt+0x34>
 80118fe:	3401      	adds	r4, #1
 8011900:	2102      	movs	r1, #2
 8011902:	e000      	b.n	8011906 <__cvt+0x3a>
 8011904:	2103      	movs	r1, #3
 8011906:	ab03      	add	r3, sp, #12
 8011908:	9301      	str	r3, [sp, #4]
 801190a:	ab02      	add	r3, sp, #8
 801190c:	9300      	str	r3, [sp, #0]
 801190e:	4622      	mov	r2, r4
 8011910:	4633      	mov	r3, r6
 8011912:	eeb0 0b48 	vmov.f64	d0, d8
 8011916:	f000 fcab 	bl	8012270 <_dtoa_r>
 801191a:	2d47      	cmp	r5, #71	; 0x47
 801191c:	d109      	bne.n	8011932 <__cvt+0x66>
 801191e:	07fb      	lsls	r3, r7, #31
 8011920:	d407      	bmi.n	8011932 <__cvt+0x66>
 8011922:	9b03      	ldr	r3, [sp, #12]
 8011924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011926:	1a1b      	subs	r3, r3, r0
 8011928:	6013      	str	r3, [r2, #0]
 801192a:	b005      	add	sp, #20
 801192c:	ecbd 8b02 	vpop	{d8}
 8011930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011932:	2d46      	cmp	r5, #70	; 0x46
 8011934:	eb00 0204 	add.w	r2, r0, r4
 8011938:	d10c      	bne.n	8011954 <__cvt+0x88>
 801193a:	7803      	ldrb	r3, [r0, #0]
 801193c:	2b30      	cmp	r3, #48	; 0x30
 801193e:	d107      	bne.n	8011950 <__cvt+0x84>
 8011940:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011948:	bf1c      	itt	ne
 801194a:	f1c4 0401 	rsbne	r4, r4, #1
 801194e:	6034      	strne	r4, [r6, #0]
 8011950:	6833      	ldr	r3, [r6, #0]
 8011952:	441a      	add	r2, r3
 8011954:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801195c:	bf08      	it	eq
 801195e:	9203      	streq	r2, [sp, #12]
 8011960:	2130      	movs	r1, #48	; 0x30
 8011962:	9b03      	ldr	r3, [sp, #12]
 8011964:	4293      	cmp	r3, r2
 8011966:	d2dc      	bcs.n	8011922 <__cvt+0x56>
 8011968:	1c5c      	adds	r4, r3, #1
 801196a:	9403      	str	r4, [sp, #12]
 801196c:	7019      	strb	r1, [r3, #0]
 801196e:	e7f8      	b.n	8011962 <__cvt+0x96>

08011970 <__exponent>:
 8011970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011972:	4603      	mov	r3, r0
 8011974:	2900      	cmp	r1, #0
 8011976:	bfb8      	it	lt
 8011978:	4249      	neglt	r1, r1
 801197a:	f803 2b02 	strb.w	r2, [r3], #2
 801197e:	bfb4      	ite	lt
 8011980:	222d      	movlt	r2, #45	; 0x2d
 8011982:	222b      	movge	r2, #43	; 0x2b
 8011984:	2909      	cmp	r1, #9
 8011986:	7042      	strb	r2, [r0, #1]
 8011988:	dd2a      	ble.n	80119e0 <__exponent+0x70>
 801198a:	f10d 0407 	add.w	r4, sp, #7
 801198e:	46a4      	mov	ip, r4
 8011990:	270a      	movs	r7, #10
 8011992:	46a6      	mov	lr, r4
 8011994:	460a      	mov	r2, r1
 8011996:	fb91 f6f7 	sdiv	r6, r1, r7
 801199a:	fb07 1516 	mls	r5, r7, r6, r1
 801199e:	3530      	adds	r5, #48	; 0x30
 80119a0:	2a63      	cmp	r2, #99	; 0x63
 80119a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80119a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80119aa:	4631      	mov	r1, r6
 80119ac:	dcf1      	bgt.n	8011992 <__exponent+0x22>
 80119ae:	3130      	adds	r1, #48	; 0x30
 80119b0:	f1ae 0502 	sub.w	r5, lr, #2
 80119b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80119b8:	1c44      	adds	r4, r0, #1
 80119ba:	4629      	mov	r1, r5
 80119bc:	4561      	cmp	r1, ip
 80119be:	d30a      	bcc.n	80119d6 <__exponent+0x66>
 80119c0:	f10d 0209 	add.w	r2, sp, #9
 80119c4:	eba2 020e 	sub.w	r2, r2, lr
 80119c8:	4565      	cmp	r5, ip
 80119ca:	bf88      	it	hi
 80119cc:	2200      	movhi	r2, #0
 80119ce:	4413      	add	r3, r2
 80119d0:	1a18      	subs	r0, r3, r0
 80119d2:	b003      	add	sp, #12
 80119d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80119de:	e7ed      	b.n	80119bc <__exponent+0x4c>
 80119e0:	2330      	movs	r3, #48	; 0x30
 80119e2:	3130      	adds	r1, #48	; 0x30
 80119e4:	7083      	strb	r3, [r0, #2]
 80119e6:	70c1      	strb	r1, [r0, #3]
 80119e8:	1d03      	adds	r3, r0, #4
 80119ea:	e7f1      	b.n	80119d0 <__exponent+0x60>
 80119ec:	0000      	movs	r0, r0
	...

080119f0 <_printf_float>:
 80119f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f4:	b08b      	sub	sp, #44	; 0x2c
 80119f6:	460c      	mov	r4, r1
 80119f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80119fc:	4616      	mov	r6, r2
 80119fe:	461f      	mov	r7, r3
 8011a00:	4605      	mov	r5, r0
 8011a02:	f001 f9b7 	bl	8012d74 <_localeconv_r>
 8011a06:	f8d0 b000 	ldr.w	fp, [r0]
 8011a0a:	4658      	mov	r0, fp
 8011a0c:	f7ee fc80 	bl	8000310 <strlen>
 8011a10:	2300      	movs	r3, #0
 8011a12:	9308      	str	r3, [sp, #32]
 8011a14:	f8d8 3000 	ldr.w	r3, [r8]
 8011a18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011a1c:	6822      	ldr	r2, [r4, #0]
 8011a1e:	3307      	adds	r3, #7
 8011a20:	f023 0307 	bic.w	r3, r3, #7
 8011a24:	f103 0108 	add.w	r1, r3, #8
 8011a28:	f8c8 1000 	str.w	r1, [r8]
 8011a2c:	4682      	mov	sl, r0
 8011a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011a32:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011a36:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011c98 <_printf_float+0x2a8>
 8011a3a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011a3e:	eeb0 6bc0 	vabs.f64	d6, d0
 8011a42:	eeb4 6b47 	vcmp.f64	d6, d7
 8011a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4a:	dd24      	ble.n	8011a96 <_printf_float+0xa6>
 8011a4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a54:	d502      	bpl.n	8011a5c <_printf_float+0x6c>
 8011a56:	232d      	movs	r3, #45	; 0x2d
 8011a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a5c:	4b90      	ldr	r3, [pc, #576]	; (8011ca0 <_printf_float+0x2b0>)
 8011a5e:	4891      	ldr	r0, [pc, #580]	; (8011ca4 <_printf_float+0x2b4>)
 8011a60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011a64:	bf94      	ite	ls
 8011a66:	4698      	movls	r8, r3
 8011a68:	4680      	movhi	r8, r0
 8011a6a:	2303      	movs	r3, #3
 8011a6c:	6123      	str	r3, [r4, #16]
 8011a6e:	f022 0204 	bic.w	r2, r2, #4
 8011a72:	2300      	movs	r3, #0
 8011a74:	6022      	str	r2, [r4, #0]
 8011a76:	9304      	str	r3, [sp, #16]
 8011a78:	9700      	str	r7, [sp, #0]
 8011a7a:	4633      	mov	r3, r6
 8011a7c:	aa09      	add	r2, sp, #36	; 0x24
 8011a7e:	4621      	mov	r1, r4
 8011a80:	4628      	mov	r0, r5
 8011a82:	f000 f9d3 	bl	8011e2c <_printf_common>
 8011a86:	3001      	adds	r0, #1
 8011a88:	f040 808a 	bne.w	8011ba0 <_printf_float+0x1b0>
 8011a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a90:	b00b      	add	sp, #44	; 0x2c
 8011a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a96:	eeb4 0b40 	vcmp.f64	d0, d0
 8011a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9e:	d709      	bvc.n	8011ab4 <_printf_float+0xc4>
 8011aa0:	ee10 3a90 	vmov	r3, s1
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	bfbc      	itt	lt
 8011aa8:	232d      	movlt	r3, #45	; 0x2d
 8011aaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011aae:	487e      	ldr	r0, [pc, #504]	; (8011ca8 <_printf_float+0x2b8>)
 8011ab0:	4b7e      	ldr	r3, [pc, #504]	; (8011cac <_printf_float+0x2bc>)
 8011ab2:	e7d5      	b.n	8011a60 <_printf_float+0x70>
 8011ab4:	6863      	ldr	r3, [r4, #4]
 8011ab6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011aba:	9104      	str	r1, [sp, #16]
 8011abc:	1c59      	adds	r1, r3, #1
 8011abe:	d13c      	bne.n	8011b3a <_printf_float+0x14a>
 8011ac0:	2306      	movs	r3, #6
 8011ac2:	6063      	str	r3, [r4, #4]
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	9303      	str	r3, [sp, #12]
 8011ac8:	ab08      	add	r3, sp, #32
 8011aca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011ace:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011ad2:	ab07      	add	r3, sp, #28
 8011ad4:	6861      	ldr	r1, [r4, #4]
 8011ad6:	9300      	str	r3, [sp, #0]
 8011ad8:	6022      	str	r2, [r4, #0]
 8011ada:	f10d 031b 	add.w	r3, sp, #27
 8011ade:	4628      	mov	r0, r5
 8011ae0:	f7ff fef4 	bl	80118cc <__cvt>
 8011ae4:	9b04      	ldr	r3, [sp, #16]
 8011ae6:	9907      	ldr	r1, [sp, #28]
 8011ae8:	2b47      	cmp	r3, #71	; 0x47
 8011aea:	4680      	mov	r8, r0
 8011aec:	d108      	bne.n	8011b00 <_printf_float+0x110>
 8011aee:	1cc8      	adds	r0, r1, #3
 8011af0:	db02      	blt.n	8011af8 <_printf_float+0x108>
 8011af2:	6863      	ldr	r3, [r4, #4]
 8011af4:	4299      	cmp	r1, r3
 8011af6:	dd41      	ble.n	8011b7c <_printf_float+0x18c>
 8011af8:	f1a9 0902 	sub.w	r9, r9, #2
 8011afc:	fa5f f989 	uxtb.w	r9, r9
 8011b00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011b04:	d820      	bhi.n	8011b48 <_printf_float+0x158>
 8011b06:	3901      	subs	r1, #1
 8011b08:	464a      	mov	r2, r9
 8011b0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011b0e:	9107      	str	r1, [sp, #28]
 8011b10:	f7ff ff2e 	bl	8011970 <__exponent>
 8011b14:	9a08      	ldr	r2, [sp, #32]
 8011b16:	9004      	str	r0, [sp, #16]
 8011b18:	1813      	adds	r3, r2, r0
 8011b1a:	2a01      	cmp	r2, #1
 8011b1c:	6123      	str	r3, [r4, #16]
 8011b1e:	dc02      	bgt.n	8011b26 <_printf_float+0x136>
 8011b20:	6822      	ldr	r2, [r4, #0]
 8011b22:	07d2      	lsls	r2, r2, #31
 8011b24:	d501      	bpl.n	8011b2a <_printf_float+0x13a>
 8011b26:	3301      	adds	r3, #1
 8011b28:	6123      	str	r3, [r4, #16]
 8011b2a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d0a2      	beq.n	8011a78 <_printf_float+0x88>
 8011b32:	232d      	movs	r3, #45	; 0x2d
 8011b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b38:	e79e      	b.n	8011a78 <_printf_float+0x88>
 8011b3a:	9904      	ldr	r1, [sp, #16]
 8011b3c:	2947      	cmp	r1, #71	; 0x47
 8011b3e:	d1c1      	bne.n	8011ac4 <_printf_float+0xd4>
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d1bf      	bne.n	8011ac4 <_printf_float+0xd4>
 8011b44:	2301      	movs	r3, #1
 8011b46:	e7bc      	b.n	8011ac2 <_printf_float+0xd2>
 8011b48:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011b4c:	d118      	bne.n	8011b80 <_printf_float+0x190>
 8011b4e:	2900      	cmp	r1, #0
 8011b50:	6863      	ldr	r3, [r4, #4]
 8011b52:	dd0b      	ble.n	8011b6c <_printf_float+0x17c>
 8011b54:	6121      	str	r1, [r4, #16]
 8011b56:	b913      	cbnz	r3, 8011b5e <_printf_float+0x16e>
 8011b58:	6822      	ldr	r2, [r4, #0]
 8011b5a:	07d0      	lsls	r0, r2, #31
 8011b5c:	d502      	bpl.n	8011b64 <_printf_float+0x174>
 8011b5e:	3301      	adds	r3, #1
 8011b60:	440b      	add	r3, r1
 8011b62:	6123      	str	r3, [r4, #16]
 8011b64:	2300      	movs	r3, #0
 8011b66:	65a1      	str	r1, [r4, #88]	; 0x58
 8011b68:	9304      	str	r3, [sp, #16]
 8011b6a:	e7de      	b.n	8011b2a <_printf_float+0x13a>
 8011b6c:	b913      	cbnz	r3, 8011b74 <_printf_float+0x184>
 8011b6e:	6822      	ldr	r2, [r4, #0]
 8011b70:	07d2      	lsls	r2, r2, #31
 8011b72:	d501      	bpl.n	8011b78 <_printf_float+0x188>
 8011b74:	3302      	adds	r3, #2
 8011b76:	e7f4      	b.n	8011b62 <_printf_float+0x172>
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e7f2      	b.n	8011b62 <_printf_float+0x172>
 8011b7c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011b80:	9b08      	ldr	r3, [sp, #32]
 8011b82:	4299      	cmp	r1, r3
 8011b84:	db05      	blt.n	8011b92 <_printf_float+0x1a2>
 8011b86:	6823      	ldr	r3, [r4, #0]
 8011b88:	6121      	str	r1, [r4, #16]
 8011b8a:	07d8      	lsls	r0, r3, #31
 8011b8c:	d5ea      	bpl.n	8011b64 <_printf_float+0x174>
 8011b8e:	1c4b      	adds	r3, r1, #1
 8011b90:	e7e7      	b.n	8011b62 <_printf_float+0x172>
 8011b92:	2900      	cmp	r1, #0
 8011b94:	bfd4      	ite	le
 8011b96:	f1c1 0202 	rsble	r2, r1, #2
 8011b9a:	2201      	movgt	r2, #1
 8011b9c:	4413      	add	r3, r2
 8011b9e:	e7e0      	b.n	8011b62 <_printf_float+0x172>
 8011ba0:	6823      	ldr	r3, [r4, #0]
 8011ba2:	055a      	lsls	r2, r3, #21
 8011ba4:	d407      	bmi.n	8011bb6 <_printf_float+0x1c6>
 8011ba6:	6923      	ldr	r3, [r4, #16]
 8011ba8:	4642      	mov	r2, r8
 8011baa:	4631      	mov	r1, r6
 8011bac:	4628      	mov	r0, r5
 8011bae:	47b8      	blx	r7
 8011bb0:	3001      	adds	r0, #1
 8011bb2:	d12a      	bne.n	8011c0a <_printf_float+0x21a>
 8011bb4:	e76a      	b.n	8011a8c <_printf_float+0x9c>
 8011bb6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011bba:	f240 80e2 	bls.w	8011d82 <_printf_float+0x392>
 8011bbe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011bc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bca:	d133      	bne.n	8011c34 <_printf_float+0x244>
 8011bcc:	4a38      	ldr	r2, [pc, #224]	; (8011cb0 <_printf_float+0x2c0>)
 8011bce:	2301      	movs	r3, #1
 8011bd0:	4631      	mov	r1, r6
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	47b8      	blx	r7
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	f43f af58 	beq.w	8011a8c <_printf_float+0x9c>
 8011bdc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	db02      	blt.n	8011bea <_printf_float+0x1fa>
 8011be4:	6823      	ldr	r3, [r4, #0]
 8011be6:	07d8      	lsls	r0, r3, #31
 8011be8:	d50f      	bpl.n	8011c0a <_printf_float+0x21a>
 8011bea:	4653      	mov	r3, sl
 8011bec:	465a      	mov	r2, fp
 8011bee:	4631      	mov	r1, r6
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	47b8      	blx	r7
 8011bf4:	3001      	adds	r0, #1
 8011bf6:	f43f af49 	beq.w	8011a8c <_printf_float+0x9c>
 8011bfa:	f04f 0800 	mov.w	r8, #0
 8011bfe:	f104 091a 	add.w	r9, r4, #26
 8011c02:	9b08      	ldr	r3, [sp, #32]
 8011c04:	3b01      	subs	r3, #1
 8011c06:	4543      	cmp	r3, r8
 8011c08:	dc09      	bgt.n	8011c1e <_printf_float+0x22e>
 8011c0a:	6823      	ldr	r3, [r4, #0]
 8011c0c:	079b      	lsls	r3, r3, #30
 8011c0e:	f100 8108 	bmi.w	8011e22 <_printf_float+0x432>
 8011c12:	68e0      	ldr	r0, [r4, #12]
 8011c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c16:	4298      	cmp	r0, r3
 8011c18:	bfb8      	it	lt
 8011c1a:	4618      	movlt	r0, r3
 8011c1c:	e738      	b.n	8011a90 <_printf_float+0xa0>
 8011c1e:	2301      	movs	r3, #1
 8011c20:	464a      	mov	r2, r9
 8011c22:	4631      	mov	r1, r6
 8011c24:	4628      	mov	r0, r5
 8011c26:	47b8      	blx	r7
 8011c28:	3001      	adds	r0, #1
 8011c2a:	f43f af2f 	beq.w	8011a8c <_printf_float+0x9c>
 8011c2e:	f108 0801 	add.w	r8, r8, #1
 8011c32:	e7e6      	b.n	8011c02 <_printf_float+0x212>
 8011c34:	9b07      	ldr	r3, [sp, #28]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	dc3c      	bgt.n	8011cb4 <_printf_float+0x2c4>
 8011c3a:	4a1d      	ldr	r2, [pc, #116]	; (8011cb0 <_printf_float+0x2c0>)
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	4631      	mov	r1, r6
 8011c40:	4628      	mov	r0, r5
 8011c42:	47b8      	blx	r7
 8011c44:	3001      	adds	r0, #1
 8011c46:	f43f af21 	beq.w	8011a8c <_printf_float+0x9c>
 8011c4a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	d102      	bne.n	8011c58 <_printf_float+0x268>
 8011c52:	6823      	ldr	r3, [r4, #0]
 8011c54:	07d9      	lsls	r1, r3, #31
 8011c56:	d5d8      	bpl.n	8011c0a <_printf_float+0x21a>
 8011c58:	4653      	mov	r3, sl
 8011c5a:	465a      	mov	r2, fp
 8011c5c:	4631      	mov	r1, r6
 8011c5e:	4628      	mov	r0, r5
 8011c60:	47b8      	blx	r7
 8011c62:	3001      	adds	r0, #1
 8011c64:	f43f af12 	beq.w	8011a8c <_printf_float+0x9c>
 8011c68:	f04f 0900 	mov.w	r9, #0
 8011c6c:	f104 0a1a 	add.w	sl, r4, #26
 8011c70:	9b07      	ldr	r3, [sp, #28]
 8011c72:	425b      	negs	r3, r3
 8011c74:	454b      	cmp	r3, r9
 8011c76:	dc01      	bgt.n	8011c7c <_printf_float+0x28c>
 8011c78:	9b08      	ldr	r3, [sp, #32]
 8011c7a:	e795      	b.n	8011ba8 <_printf_float+0x1b8>
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	4652      	mov	r2, sl
 8011c80:	4631      	mov	r1, r6
 8011c82:	4628      	mov	r0, r5
 8011c84:	47b8      	blx	r7
 8011c86:	3001      	adds	r0, #1
 8011c88:	f43f af00 	beq.w	8011a8c <_printf_float+0x9c>
 8011c8c:	f109 0901 	add.w	r9, r9, #1
 8011c90:	e7ee      	b.n	8011c70 <_printf_float+0x280>
 8011c92:	bf00      	nop
 8011c94:	f3af 8000 	nop.w
 8011c98:	ffffffff 	.word	0xffffffff
 8011c9c:	7fefffff 	.word	0x7fefffff
 8011ca0:	08014ddc 	.word	0x08014ddc
 8011ca4:	08014de0 	.word	0x08014de0
 8011ca8:	08014de8 	.word	0x08014de8
 8011cac:	08014de4 	.word	0x08014de4
 8011cb0:	08014dec 	.word	0x08014dec
 8011cb4:	9a08      	ldr	r2, [sp, #32]
 8011cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	bfa8      	it	ge
 8011cbc:	461a      	movge	r2, r3
 8011cbe:	2a00      	cmp	r2, #0
 8011cc0:	4691      	mov	r9, r2
 8011cc2:	dc38      	bgt.n	8011d36 <_printf_float+0x346>
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	9305      	str	r3, [sp, #20]
 8011cc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ccc:	f104 021a 	add.w	r2, r4, #26
 8011cd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011cd2:	9905      	ldr	r1, [sp, #20]
 8011cd4:	9304      	str	r3, [sp, #16]
 8011cd6:	eba3 0309 	sub.w	r3, r3, r9
 8011cda:	428b      	cmp	r3, r1
 8011cdc:	dc33      	bgt.n	8011d46 <_printf_float+0x356>
 8011cde:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	db3c      	blt.n	8011d60 <_printf_float+0x370>
 8011ce6:	6823      	ldr	r3, [r4, #0]
 8011ce8:	07da      	lsls	r2, r3, #31
 8011cea:	d439      	bmi.n	8011d60 <_printf_float+0x370>
 8011cec:	9a08      	ldr	r2, [sp, #32]
 8011cee:	9b04      	ldr	r3, [sp, #16]
 8011cf0:	9907      	ldr	r1, [sp, #28]
 8011cf2:	1ad3      	subs	r3, r2, r3
 8011cf4:	eba2 0901 	sub.w	r9, r2, r1
 8011cf8:	4599      	cmp	r9, r3
 8011cfa:	bfa8      	it	ge
 8011cfc:	4699      	movge	r9, r3
 8011cfe:	f1b9 0f00 	cmp.w	r9, #0
 8011d02:	dc35      	bgt.n	8011d70 <_printf_float+0x380>
 8011d04:	f04f 0800 	mov.w	r8, #0
 8011d08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d0c:	f104 0a1a 	add.w	sl, r4, #26
 8011d10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011d14:	1a9b      	subs	r3, r3, r2
 8011d16:	eba3 0309 	sub.w	r3, r3, r9
 8011d1a:	4543      	cmp	r3, r8
 8011d1c:	f77f af75 	ble.w	8011c0a <_printf_float+0x21a>
 8011d20:	2301      	movs	r3, #1
 8011d22:	4652      	mov	r2, sl
 8011d24:	4631      	mov	r1, r6
 8011d26:	4628      	mov	r0, r5
 8011d28:	47b8      	blx	r7
 8011d2a:	3001      	adds	r0, #1
 8011d2c:	f43f aeae 	beq.w	8011a8c <_printf_float+0x9c>
 8011d30:	f108 0801 	add.w	r8, r8, #1
 8011d34:	e7ec      	b.n	8011d10 <_printf_float+0x320>
 8011d36:	4613      	mov	r3, r2
 8011d38:	4631      	mov	r1, r6
 8011d3a:	4642      	mov	r2, r8
 8011d3c:	4628      	mov	r0, r5
 8011d3e:	47b8      	blx	r7
 8011d40:	3001      	adds	r0, #1
 8011d42:	d1bf      	bne.n	8011cc4 <_printf_float+0x2d4>
 8011d44:	e6a2      	b.n	8011a8c <_printf_float+0x9c>
 8011d46:	2301      	movs	r3, #1
 8011d48:	4631      	mov	r1, r6
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	9204      	str	r2, [sp, #16]
 8011d4e:	47b8      	blx	r7
 8011d50:	3001      	adds	r0, #1
 8011d52:	f43f ae9b 	beq.w	8011a8c <_printf_float+0x9c>
 8011d56:	9b05      	ldr	r3, [sp, #20]
 8011d58:	9a04      	ldr	r2, [sp, #16]
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	9305      	str	r3, [sp, #20]
 8011d5e:	e7b7      	b.n	8011cd0 <_printf_float+0x2e0>
 8011d60:	4653      	mov	r3, sl
 8011d62:	465a      	mov	r2, fp
 8011d64:	4631      	mov	r1, r6
 8011d66:	4628      	mov	r0, r5
 8011d68:	47b8      	blx	r7
 8011d6a:	3001      	adds	r0, #1
 8011d6c:	d1be      	bne.n	8011cec <_printf_float+0x2fc>
 8011d6e:	e68d      	b.n	8011a8c <_printf_float+0x9c>
 8011d70:	9a04      	ldr	r2, [sp, #16]
 8011d72:	464b      	mov	r3, r9
 8011d74:	4442      	add	r2, r8
 8011d76:	4631      	mov	r1, r6
 8011d78:	4628      	mov	r0, r5
 8011d7a:	47b8      	blx	r7
 8011d7c:	3001      	adds	r0, #1
 8011d7e:	d1c1      	bne.n	8011d04 <_printf_float+0x314>
 8011d80:	e684      	b.n	8011a8c <_printf_float+0x9c>
 8011d82:	9a08      	ldr	r2, [sp, #32]
 8011d84:	2a01      	cmp	r2, #1
 8011d86:	dc01      	bgt.n	8011d8c <_printf_float+0x39c>
 8011d88:	07db      	lsls	r3, r3, #31
 8011d8a:	d537      	bpl.n	8011dfc <_printf_float+0x40c>
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	4642      	mov	r2, r8
 8011d90:	4631      	mov	r1, r6
 8011d92:	4628      	mov	r0, r5
 8011d94:	47b8      	blx	r7
 8011d96:	3001      	adds	r0, #1
 8011d98:	f43f ae78 	beq.w	8011a8c <_printf_float+0x9c>
 8011d9c:	4653      	mov	r3, sl
 8011d9e:	465a      	mov	r2, fp
 8011da0:	4631      	mov	r1, r6
 8011da2:	4628      	mov	r0, r5
 8011da4:	47b8      	blx	r7
 8011da6:	3001      	adds	r0, #1
 8011da8:	f43f ae70 	beq.w	8011a8c <_printf_float+0x9c>
 8011dac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011db0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db8:	d01b      	beq.n	8011df2 <_printf_float+0x402>
 8011dba:	9b08      	ldr	r3, [sp, #32]
 8011dbc:	f108 0201 	add.w	r2, r8, #1
 8011dc0:	3b01      	subs	r3, #1
 8011dc2:	4631      	mov	r1, r6
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	47b8      	blx	r7
 8011dc8:	3001      	adds	r0, #1
 8011dca:	d10e      	bne.n	8011dea <_printf_float+0x3fa>
 8011dcc:	e65e      	b.n	8011a8c <_printf_float+0x9c>
 8011dce:	2301      	movs	r3, #1
 8011dd0:	464a      	mov	r2, r9
 8011dd2:	4631      	mov	r1, r6
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	47b8      	blx	r7
 8011dd8:	3001      	adds	r0, #1
 8011dda:	f43f ae57 	beq.w	8011a8c <_printf_float+0x9c>
 8011dde:	f108 0801 	add.w	r8, r8, #1
 8011de2:	9b08      	ldr	r3, [sp, #32]
 8011de4:	3b01      	subs	r3, #1
 8011de6:	4543      	cmp	r3, r8
 8011de8:	dcf1      	bgt.n	8011dce <_printf_float+0x3de>
 8011dea:	9b04      	ldr	r3, [sp, #16]
 8011dec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011df0:	e6db      	b.n	8011baa <_printf_float+0x1ba>
 8011df2:	f04f 0800 	mov.w	r8, #0
 8011df6:	f104 091a 	add.w	r9, r4, #26
 8011dfa:	e7f2      	b.n	8011de2 <_printf_float+0x3f2>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	4642      	mov	r2, r8
 8011e00:	e7df      	b.n	8011dc2 <_printf_float+0x3d2>
 8011e02:	2301      	movs	r3, #1
 8011e04:	464a      	mov	r2, r9
 8011e06:	4631      	mov	r1, r6
 8011e08:	4628      	mov	r0, r5
 8011e0a:	47b8      	blx	r7
 8011e0c:	3001      	adds	r0, #1
 8011e0e:	f43f ae3d 	beq.w	8011a8c <_printf_float+0x9c>
 8011e12:	f108 0801 	add.w	r8, r8, #1
 8011e16:	68e3      	ldr	r3, [r4, #12]
 8011e18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e1a:	1a5b      	subs	r3, r3, r1
 8011e1c:	4543      	cmp	r3, r8
 8011e1e:	dcf0      	bgt.n	8011e02 <_printf_float+0x412>
 8011e20:	e6f7      	b.n	8011c12 <_printf_float+0x222>
 8011e22:	f04f 0800 	mov.w	r8, #0
 8011e26:	f104 0919 	add.w	r9, r4, #25
 8011e2a:	e7f4      	b.n	8011e16 <_printf_float+0x426>

08011e2c <_printf_common>:
 8011e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e30:	4616      	mov	r6, r2
 8011e32:	4699      	mov	r9, r3
 8011e34:	688a      	ldr	r2, [r1, #8]
 8011e36:	690b      	ldr	r3, [r1, #16]
 8011e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	bfb8      	it	lt
 8011e40:	4613      	movlt	r3, r2
 8011e42:	6033      	str	r3, [r6, #0]
 8011e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e48:	4607      	mov	r7, r0
 8011e4a:	460c      	mov	r4, r1
 8011e4c:	b10a      	cbz	r2, 8011e52 <_printf_common+0x26>
 8011e4e:	3301      	adds	r3, #1
 8011e50:	6033      	str	r3, [r6, #0]
 8011e52:	6823      	ldr	r3, [r4, #0]
 8011e54:	0699      	lsls	r1, r3, #26
 8011e56:	bf42      	ittt	mi
 8011e58:	6833      	ldrmi	r3, [r6, #0]
 8011e5a:	3302      	addmi	r3, #2
 8011e5c:	6033      	strmi	r3, [r6, #0]
 8011e5e:	6825      	ldr	r5, [r4, #0]
 8011e60:	f015 0506 	ands.w	r5, r5, #6
 8011e64:	d106      	bne.n	8011e74 <_printf_common+0x48>
 8011e66:	f104 0a19 	add.w	sl, r4, #25
 8011e6a:	68e3      	ldr	r3, [r4, #12]
 8011e6c:	6832      	ldr	r2, [r6, #0]
 8011e6e:	1a9b      	subs	r3, r3, r2
 8011e70:	42ab      	cmp	r3, r5
 8011e72:	dc26      	bgt.n	8011ec2 <_printf_common+0x96>
 8011e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e78:	1e13      	subs	r3, r2, #0
 8011e7a:	6822      	ldr	r2, [r4, #0]
 8011e7c:	bf18      	it	ne
 8011e7e:	2301      	movne	r3, #1
 8011e80:	0692      	lsls	r2, r2, #26
 8011e82:	d42b      	bmi.n	8011edc <_printf_common+0xb0>
 8011e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e88:	4649      	mov	r1, r9
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	47c0      	blx	r8
 8011e8e:	3001      	adds	r0, #1
 8011e90:	d01e      	beq.n	8011ed0 <_printf_common+0xa4>
 8011e92:	6823      	ldr	r3, [r4, #0]
 8011e94:	68e5      	ldr	r5, [r4, #12]
 8011e96:	6832      	ldr	r2, [r6, #0]
 8011e98:	f003 0306 	and.w	r3, r3, #6
 8011e9c:	2b04      	cmp	r3, #4
 8011e9e:	bf08      	it	eq
 8011ea0:	1aad      	subeq	r5, r5, r2
 8011ea2:	68a3      	ldr	r3, [r4, #8]
 8011ea4:	6922      	ldr	r2, [r4, #16]
 8011ea6:	bf0c      	ite	eq
 8011ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011eac:	2500      	movne	r5, #0
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	bfc4      	itt	gt
 8011eb2:	1a9b      	subgt	r3, r3, r2
 8011eb4:	18ed      	addgt	r5, r5, r3
 8011eb6:	2600      	movs	r6, #0
 8011eb8:	341a      	adds	r4, #26
 8011eba:	42b5      	cmp	r5, r6
 8011ebc:	d11a      	bne.n	8011ef4 <_printf_common+0xc8>
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	e008      	b.n	8011ed4 <_printf_common+0xa8>
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	4652      	mov	r2, sl
 8011ec6:	4649      	mov	r1, r9
 8011ec8:	4638      	mov	r0, r7
 8011eca:	47c0      	blx	r8
 8011ecc:	3001      	adds	r0, #1
 8011ece:	d103      	bne.n	8011ed8 <_printf_common+0xac>
 8011ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed8:	3501      	adds	r5, #1
 8011eda:	e7c6      	b.n	8011e6a <_printf_common+0x3e>
 8011edc:	18e1      	adds	r1, r4, r3
 8011ede:	1c5a      	adds	r2, r3, #1
 8011ee0:	2030      	movs	r0, #48	; 0x30
 8011ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ee6:	4422      	add	r2, r4
 8011ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011ef0:	3302      	adds	r3, #2
 8011ef2:	e7c7      	b.n	8011e84 <_printf_common+0x58>
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	4622      	mov	r2, r4
 8011ef8:	4649      	mov	r1, r9
 8011efa:	4638      	mov	r0, r7
 8011efc:	47c0      	blx	r8
 8011efe:	3001      	adds	r0, #1
 8011f00:	d0e6      	beq.n	8011ed0 <_printf_common+0xa4>
 8011f02:	3601      	adds	r6, #1
 8011f04:	e7d9      	b.n	8011eba <_printf_common+0x8e>
	...

08011f08 <_printf_i>:
 8011f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f0c:	460c      	mov	r4, r1
 8011f0e:	4691      	mov	r9, r2
 8011f10:	7e27      	ldrb	r7, [r4, #24]
 8011f12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011f14:	2f78      	cmp	r7, #120	; 0x78
 8011f16:	4680      	mov	r8, r0
 8011f18:	469a      	mov	sl, r3
 8011f1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f1e:	d807      	bhi.n	8011f30 <_printf_i+0x28>
 8011f20:	2f62      	cmp	r7, #98	; 0x62
 8011f22:	d80a      	bhi.n	8011f3a <_printf_i+0x32>
 8011f24:	2f00      	cmp	r7, #0
 8011f26:	f000 80d8 	beq.w	80120da <_printf_i+0x1d2>
 8011f2a:	2f58      	cmp	r7, #88	; 0x58
 8011f2c:	f000 80a3 	beq.w	8012076 <_printf_i+0x16e>
 8011f30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f38:	e03a      	b.n	8011fb0 <_printf_i+0xa8>
 8011f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f3e:	2b15      	cmp	r3, #21
 8011f40:	d8f6      	bhi.n	8011f30 <_printf_i+0x28>
 8011f42:	a001      	add	r0, pc, #4	; (adr r0, 8011f48 <_printf_i+0x40>)
 8011f44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011f48:	08011fa1 	.word	0x08011fa1
 8011f4c:	08011fb5 	.word	0x08011fb5
 8011f50:	08011f31 	.word	0x08011f31
 8011f54:	08011f31 	.word	0x08011f31
 8011f58:	08011f31 	.word	0x08011f31
 8011f5c:	08011f31 	.word	0x08011f31
 8011f60:	08011fb5 	.word	0x08011fb5
 8011f64:	08011f31 	.word	0x08011f31
 8011f68:	08011f31 	.word	0x08011f31
 8011f6c:	08011f31 	.word	0x08011f31
 8011f70:	08011f31 	.word	0x08011f31
 8011f74:	080120c1 	.word	0x080120c1
 8011f78:	08011fe5 	.word	0x08011fe5
 8011f7c:	080120a3 	.word	0x080120a3
 8011f80:	08011f31 	.word	0x08011f31
 8011f84:	08011f31 	.word	0x08011f31
 8011f88:	080120e3 	.word	0x080120e3
 8011f8c:	08011f31 	.word	0x08011f31
 8011f90:	08011fe5 	.word	0x08011fe5
 8011f94:	08011f31 	.word	0x08011f31
 8011f98:	08011f31 	.word	0x08011f31
 8011f9c:	080120ab 	.word	0x080120ab
 8011fa0:	680b      	ldr	r3, [r1, #0]
 8011fa2:	1d1a      	adds	r2, r3, #4
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	600a      	str	r2, [r1, #0]
 8011fa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	e0a3      	b.n	80120fc <_printf_i+0x1f4>
 8011fb4:	6825      	ldr	r5, [r4, #0]
 8011fb6:	6808      	ldr	r0, [r1, #0]
 8011fb8:	062e      	lsls	r6, r5, #24
 8011fba:	f100 0304 	add.w	r3, r0, #4
 8011fbe:	d50a      	bpl.n	8011fd6 <_printf_i+0xce>
 8011fc0:	6805      	ldr	r5, [r0, #0]
 8011fc2:	600b      	str	r3, [r1, #0]
 8011fc4:	2d00      	cmp	r5, #0
 8011fc6:	da03      	bge.n	8011fd0 <_printf_i+0xc8>
 8011fc8:	232d      	movs	r3, #45	; 0x2d
 8011fca:	426d      	negs	r5, r5
 8011fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fd0:	485e      	ldr	r0, [pc, #376]	; (801214c <_printf_i+0x244>)
 8011fd2:	230a      	movs	r3, #10
 8011fd4:	e019      	b.n	801200a <_printf_i+0x102>
 8011fd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011fda:	6805      	ldr	r5, [r0, #0]
 8011fdc:	600b      	str	r3, [r1, #0]
 8011fde:	bf18      	it	ne
 8011fe0:	b22d      	sxthne	r5, r5
 8011fe2:	e7ef      	b.n	8011fc4 <_printf_i+0xbc>
 8011fe4:	680b      	ldr	r3, [r1, #0]
 8011fe6:	6825      	ldr	r5, [r4, #0]
 8011fe8:	1d18      	adds	r0, r3, #4
 8011fea:	6008      	str	r0, [r1, #0]
 8011fec:	0628      	lsls	r0, r5, #24
 8011fee:	d501      	bpl.n	8011ff4 <_printf_i+0xec>
 8011ff0:	681d      	ldr	r5, [r3, #0]
 8011ff2:	e002      	b.n	8011ffa <_printf_i+0xf2>
 8011ff4:	0669      	lsls	r1, r5, #25
 8011ff6:	d5fb      	bpl.n	8011ff0 <_printf_i+0xe8>
 8011ff8:	881d      	ldrh	r5, [r3, #0]
 8011ffa:	4854      	ldr	r0, [pc, #336]	; (801214c <_printf_i+0x244>)
 8011ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8011ffe:	bf0c      	ite	eq
 8012000:	2308      	moveq	r3, #8
 8012002:	230a      	movne	r3, #10
 8012004:	2100      	movs	r1, #0
 8012006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801200a:	6866      	ldr	r6, [r4, #4]
 801200c:	60a6      	str	r6, [r4, #8]
 801200e:	2e00      	cmp	r6, #0
 8012010:	bfa2      	ittt	ge
 8012012:	6821      	ldrge	r1, [r4, #0]
 8012014:	f021 0104 	bicge.w	r1, r1, #4
 8012018:	6021      	strge	r1, [r4, #0]
 801201a:	b90d      	cbnz	r5, 8012020 <_printf_i+0x118>
 801201c:	2e00      	cmp	r6, #0
 801201e:	d04d      	beq.n	80120bc <_printf_i+0x1b4>
 8012020:	4616      	mov	r6, r2
 8012022:	fbb5 f1f3 	udiv	r1, r5, r3
 8012026:	fb03 5711 	mls	r7, r3, r1, r5
 801202a:	5dc7      	ldrb	r7, [r0, r7]
 801202c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012030:	462f      	mov	r7, r5
 8012032:	42bb      	cmp	r3, r7
 8012034:	460d      	mov	r5, r1
 8012036:	d9f4      	bls.n	8012022 <_printf_i+0x11a>
 8012038:	2b08      	cmp	r3, #8
 801203a:	d10b      	bne.n	8012054 <_printf_i+0x14c>
 801203c:	6823      	ldr	r3, [r4, #0]
 801203e:	07df      	lsls	r7, r3, #31
 8012040:	d508      	bpl.n	8012054 <_printf_i+0x14c>
 8012042:	6923      	ldr	r3, [r4, #16]
 8012044:	6861      	ldr	r1, [r4, #4]
 8012046:	4299      	cmp	r1, r3
 8012048:	bfde      	ittt	le
 801204a:	2330      	movle	r3, #48	; 0x30
 801204c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012050:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012054:	1b92      	subs	r2, r2, r6
 8012056:	6122      	str	r2, [r4, #16]
 8012058:	f8cd a000 	str.w	sl, [sp]
 801205c:	464b      	mov	r3, r9
 801205e:	aa03      	add	r2, sp, #12
 8012060:	4621      	mov	r1, r4
 8012062:	4640      	mov	r0, r8
 8012064:	f7ff fee2 	bl	8011e2c <_printf_common>
 8012068:	3001      	adds	r0, #1
 801206a:	d14c      	bne.n	8012106 <_printf_i+0x1fe>
 801206c:	f04f 30ff 	mov.w	r0, #4294967295
 8012070:	b004      	add	sp, #16
 8012072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012076:	4835      	ldr	r0, [pc, #212]	; (801214c <_printf_i+0x244>)
 8012078:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801207c:	6823      	ldr	r3, [r4, #0]
 801207e:	680e      	ldr	r6, [r1, #0]
 8012080:	061f      	lsls	r7, r3, #24
 8012082:	f856 5b04 	ldr.w	r5, [r6], #4
 8012086:	600e      	str	r6, [r1, #0]
 8012088:	d514      	bpl.n	80120b4 <_printf_i+0x1ac>
 801208a:	07d9      	lsls	r1, r3, #31
 801208c:	bf44      	itt	mi
 801208e:	f043 0320 	orrmi.w	r3, r3, #32
 8012092:	6023      	strmi	r3, [r4, #0]
 8012094:	b91d      	cbnz	r5, 801209e <_printf_i+0x196>
 8012096:	6823      	ldr	r3, [r4, #0]
 8012098:	f023 0320 	bic.w	r3, r3, #32
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	2310      	movs	r3, #16
 80120a0:	e7b0      	b.n	8012004 <_printf_i+0xfc>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	f043 0320 	orr.w	r3, r3, #32
 80120a8:	6023      	str	r3, [r4, #0]
 80120aa:	2378      	movs	r3, #120	; 0x78
 80120ac:	4828      	ldr	r0, [pc, #160]	; (8012150 <_printf_i+0x248>)
 80120ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80120b2:	e7e3      	b.n	801207c <_printf_i+0x174>
 80120b4:	065e      	lsls	r6, r3, #25
 80120b6:	bf48      	it	mi
 80120b8:	b2ad      	uxthmi	r5, r5
 80120ba:	e7e6      	b.n	801208a <_printf_i+0x182>
 80120bc:	4616      	mov	r6, r2
 80120be:	e7bb      	b.n	8012038 <_printf_i+0x130>
 80120c0:	680b      	ldr	r3, [r1, #0]
 80120c2:	6826      	ldr	r6, [r4, #0]
 80120c4:	6960      	ldr	r0, [r4, #20]
 80120c6:	1d1d      	adds	r5, r3, #4
 80120c8:	600d      	str	r5, [r1, #0]
 80120ca:	0635      	lsls	r5, r6, #24
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	d501      	bpl.n	80120d4 <_printf_i+0x1cc>
 80120d0:	6018      	str	r0, [r3, #0]
 80120d2:	e002      	b.n	80120da <_printf_i+0x1d2>
 80120d4:	0671      	lsls	r1, r6, #25
 80120d6:	d5fb      	bpl.n	80120d0 <_printf_i+0x1c8>
 80120d8:	8018      	strh	r0, [r3, #0]
 80120da:	2300      	movs	r3, #0
 80120dc:	6123      	str	r3, [r4, #16]
 80120de:	4616      	mov	r6, r2
 80120e0:	e7ba      	b.n	8012058 <_printf_i+0x150>
 80120e2:	680b      	ldr	r3, [r1, #0]
 80120e4:	1d1a      	adds	r2, r3, #4
 80120e6:	600a      	str	r2, [r1, #0]
 80120e8:	681e      	ldr	r6, [r3, #0]
 80120ea:	6862      	ldr	r2, [r4, #4]
 80120ec:	2100      	movs	r1, #0
 80120ee:	4630      	mov	r0, r6
 80120f0:	f7ee f916 	bl	8000320 <memchr>
 80120f4:	b108      	cbz	r0, 80120fa <_printf_i+0x1f2>
 80120f6:	1b80      	subs	r0, r0, r6
 80120f8:	6060      	str	r0, [r4, #4]
 80120fa:	6863      	ldr	r3, [r4, #4]
 80120fc:	6123      	str	r3, [r4, #16]
 80120fe:	2300      	movs	r3, #0
 8012100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012104:	e7a8      	b.n	8012058 <_printf_i+0x150>
 8012106:	6923      	ldr	r3, [r4, #16]
 8012108:	4632      	mov	r2, r6
 801210a:	4649      	mov	r1, r9
 801210c:	4640      	mov	r0, r8
 801210e:	47d0      	blx	sl
 8012110:	3001      	adds	r0, #1
 8012112:	d0ab      	beq.n	801206c <_printf_i+0x164>
 8012114:	6823      	ldr	r3, [r4, #0]
 8012116:	079b      	lsls	r3, r3, #30
 8012118:	d413      	bmi.n	8012142 <_printf_i+0x23a>
 801211a:	68e0      	ldr	r0, [r4, #12]
 801211c:	9b03      	ldr	r3, [sp, #12]
 801211e:	4298      	cmp	r0, r3
 8012120:	bfb8      	it	lt
 8012122:	4618      	movlt	r0, r3
 8012124:	e7a4      	b.n	8012070 <_printf_i+0x168>
 8012126:	2301      	movs	r3, #1
 8012128:	4632      	mov	r2, r6
 801212a:	4649      	mov	r1, r9
 801212c:	4640      	mov	r0, r8
 801212e:	47d0      	blx	sl
 8012130:	3001      	adds	r0, #1
 8012132:	d09b      	beq.n	801206c <_printf_i+0x164>
 8012134:	3501      	adds	r5, #1
 8012136:	68e3      	ldr	r3, [r4, #12]
 8012138:	9903      	ldr	r1, [sp, #12]
 801213a:	1a5b      	subs	r3, r3, r1
 801213c:	42ab      	cmp	r3, r5
 801213e:	dcf2      	bgt.n	8012126 <_printf_i+0x21e>
 8012140:	e7eb      	b.n	801211a <_printf_i+0x212>
 8012142:	2500      	movs	r5, #0
 8012144:	f104 0619 	add.w	r6, r4, #25
 8012148:	e7f5      	b.n	8012136 <_printf_i+0x22e>
 801214a:	bf00      	nop
 801214c:	08014dee 	.word	0x08014dee
 8012150:	08014dff 	.word	0x08014dff

08012154 <quorem>:
 8012154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012158:	6903      	ldr	r3, [r0, #16]
 801215a:	690c      	ldr	r4, [r1, #16]
 801215c:	42a3      	cmp	r3, r4
 801215e:	4607      	mov	r7, r0
 8012160:	f2c0 8081 	blt.w	8012266 <quorem+0x112>
 8012164:	3c01      	subs	r4, #1
 8012166:	f101 0814 	add.w	r8, r1, #20
 801216a:	f100 0514 	add.w	r5, r0, #20
 801216e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012172:	9301      	str	r3, [sp, #4]
 8012174:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801217c:	3301      	adds	r3, #1
 801217e:	429a      	cmp	r2, r3
 8012180:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012184:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012188:	fbb2 f6f3 	udiv	r6, r2, r3
 801218c:	d331      	bcc.n	80121f2 <quorem+0x9e>
 801218e:	f04f 0e00 	mov.w	lr, #0
 8012192:	4640      	mov	r0, r8
 8012194:	46ac      	mov	ip, r5
 8012196:	46f2      	mov	sl, lr
 8012198:	f850 2b04 	ldr.w	r2, [r0], #4
 801219c:	b293      	uxth	r3, r2
 801219e:	fb06 e303 	mla	r3, r6, r3, lr
 80121a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	ebaa 0303 	sub.w	r3, sl, r3
 80121ac:	0c12      	lsrs	r2, r2, #16
 80121ae:	f8dc a000 	ldr.w	sl, [ip]
 80121b2:	fb06 e202 	mla	r2, r6, r2, lr
 80121b6:	fa13 f38a 	uxtah	r3, r3, sl
 80121ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80121be:	fa1f fa82 	uxth.w	sl, r2
 80121c2:	f8dc 2000 	ldr.w	r2, [ip]
 80121c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80121ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121d4:	4581      	cmp	r9, r0
 80121d6:	f84c 3b04 	str.w	r3, [ip], #4
 80121da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80121de:	d2db      	bcs.n	8012198 <quorem+0x44>
 80121e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80121e4:	b92b      	cbnz	r3, 80121f2 <quorem+0x9e>
 80121e6:	9b01      	ldr	r3, [sp, #4]
 80121e8:	3b04      	subs	r3, #4
 80121ea:	429d      	cmp	r5, r3
 80121ec:	461a      	mov	r2, r3
 80121ee:	d32e      	bcc.n	801224e <quorem+0xfa>
 80121f0:	613c      	str	r4, [r7, #16]
 80121f2:	4638      	mov	r0, r7
 80121f4:	f001 f848 	bl	8013288 <__mcmp>
 80121f8:	2800      	cmp	r0, #0
 80121fa:	db24      	blt.n	8012246 <quorem+0xf2>
 80121fc:	3601      	adds	r6, #1
 80121fe:	4628      	mov	r0, r5
 8012200:	f04f 0c00 	mov.w	ip, #0
 8012204:	f858 2b04 	ldr.w	r2, [r8], #4
 8012208:	f8d0 e000 	ldr.w	lr, [r0]
 801220c:	b293      	uxth	r3, r2
 801220e:	ebac 0303 	sub.w	r3, ip, r3
 8012212:	0c12      	lsrs	r2, r2, #16
 8012214:	fa13 f38e 	uxtah	r3, r3, lr
 8012218:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801221c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012220:	b29b      	uxth	r3, r3
 8012222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012226:	45c1      	cmp	r9, r8
 8012228:	f840 3b04 	str.w	r3, [r0], #4
 801222c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012230:	d2e8      	bcs.n	8012204 <quorem+0xb0>
 8012232:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801223a:	b922      	cbnz	r2, 8012246 <quorem+0xf2>
 801223c:	3b04      	subs	r3, #4
 801223e:	429d      	cmp	r5, r3
 8012240:	461a      	mov	r2, r3
 8012242:	d30a      	bcc.n	801225a <quorem+0x106>
 8012244:	613c      	str	r4, [r7, #16]
 8012246:	4630      	mov	r0, r6
 8012248:	b003      	add	sp, #12
 801224a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801224e:	6812      	ldr	r2, [r2, #0]
 8012250:	3b04      	subs	r3, #4
 8012252:	2a00      	cmp	r2, #0
 8012254:	d1cc      	bne.n	80121f0 <quorem+0x9c>
 8012256:	3c01      	subs	r4, #1
 8012258:	e7c7      	b.n	80121ea <quorem+0x96>
 801225a:	6812      	ldr	r2, [r2, #0]
 801225c:	3b04      	subs	r3, #4
 801225e:	2a00      	cmp	r2, #0
 8012260:	d1f0      	bne.n	8012244 <quorem+0xf0>
 8012262:	3c01      	subs	r4, #1
 8012264:	e7eb      	b.n	801223e <quorem+0xea>
 8012266:	2000      	movs	r0, #0
 8012268:	e7ee      	b.n	8012248 <quorem+0xf4>
 801226a:	0000      	movs	r0, r0
 801226c:	0000      	movs	r0, r0
	...

08012270 <_dtoa_r>:
 8012270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012274:	ec59 8b10 	vmov	r8, r9, d0
 8012278:	b095      	sub	sp, #84	; 0x54
 801227a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801227c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801227e:	9107      	str	r1, [sp, #28]
 8012280:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012284:	4606      	mov	r6, r0
 8012286:	9209      	str	r2, [sp, #36]	; 0x24
 8012288:	9310      	str	r3, [sp, #64]	; 0x40
 801228a:	b975      	cbnz	r5, 80122aa <_dtoa_r+0x3a>
 801228c:	2010      	movs	r0, #16
 801228e:	f000 fd75 	bl	8012d7c <malloc>
 8012292:	4602      	mov	r2, r0
 8012294:	6270      	str	r0, [r6, #36]	; 0x24
 8012296:	b920      	cbnz	r0, 80122a2 <_dtoa_r+0x32>
 8012298:	4bab      	ldr	r3, [pc, #684]	; (8012548 <_dtoa_r+0x2d8>)
 801229a:	21ea      	movs	r1, #234	; 0xea
 801229c:	48ab      	ldr	r0, [pc, #684]	; (801254c <_dtoa_r+0x2dc>)
 801229e:	f001 f9bd 	bl	801361c <__assert_func>
 80122a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80122a6:	6005      	str	r5, [r0, #0]
 80122a8:	60c5      	str	r5, [r0, #12]
 80122aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80122ac:	6819      	ldr	r1, [r3, #0]
 80122ae:	b151      	cbz	r1, 80122c6 <_dtoa_r+0x56>
 80122b0:	685a      	ldr	r2, [r3, #4]
 80122b2:	604a      	str	r2, [r1, #4]
 80122b4:	2301      	movs	r3, #1
 80122b6:	4093      	lsls	r3, r2
 80122b8:	608b      	str	r3, [r1, #8]
 80122ba:	4630      	mov	r0, r6
 80122bc:	f000 fda6 	bl	8012e0c <_Bfree>
 80122c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80122c2:	2200      	movs	r2, #0
 80122c4:	601a      	str	r2, [r3, #0]
 80122c6:	f1b9 0300 	subs.w	r3, r9, #0
 80122ca:	bfbb      	ittet	lt
 80122cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80122d0:	9303      	strlt	r3, [sp, #12]
 80122d2:	2300      	movge	r3, #0
 80122d4:	2201      	movlt	r2, #1
 80122d6:	bfac      	ite	ge
 80122d8:	6023      	strge	r3, [r4, #0]
 80122da:	6022      	strlt	r2, [r4, #0]
 80122dc:	4b9c      	ldr	r3, [pc, #624]	; (8012550 <_dtoa_r+0x2e0>)
 80122de:	9c03      	ldr	r4, [sp, #12]
 80122e0:	43a3      	bics	r3, r4
 80122e2:	d11a      	bne.n	801231a <_dtoa_r+0xaa>
 80122e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80122e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80122ea:	6013      	str	r3, [r2, #0]
 80122ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80122f0:	ea53 0308 	orrs.w	r3, r3, r8
 80122f4:	f000 8512 	beq.w	8012d1c <_dtoa_r+0xaac>
 80122f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80122fa:	b953      	cbnz	r3, 8012312 <_dtoa_r+0xa2>
 80122fc:	4b95      	ldr	r3, [pc, #596]	; (8012554 <_dtoa_r+0x2e4>)
 80122fe:	e01f      	b.n	8012340 <_dtoa_r+0xd0>
 8012300:	4b95      	ldr	r3, [pc, #596]	; (8012558 <_dtoa_r+0x2e8>)
 8012302:	9300      	str	r3, [sp, #0]
 8012304:	3308      	adds	r3, #8
 8012306:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012308:	6013      	str	r3, [r2, #0]
 801230a:	9800      	ldr	r0, [sp, #0]
 801230c:	b015      	add	sp, #84	; 0x54
 801230e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012312:	4b90      	ldr	r3, [pc, #576]	; (8012554 <_dtoa_r+0x2e4>)
 8012314:	9300      	str	r3, [sp, #0]
 8012316:	3303      	adds	r3, #3
 8012318:	e7f5      	b.n	8012306 <_dtoa_r+0x96>
 801231a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801231e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012326:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801232a:	d10b      	bne.n	8012344 <_dtoa_r+0xd4>
 801232c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801232e:	2301      	movs	r3, #1
 8012330:	6013      	str	r3, [r2, #0]
 8012332:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012334:	2b00      	cmp	r3, #0
 8012336:	f000 84ee 	beq.w	8012d16 <_dtoa_r+0xaa6>
 801233a:	4888      	ldr	r0, [pc, #544]	; (801255c <_dtoa_r+0x2ec>)
 801233c:	6018      	str	r0, [r3, #0]
 801233e:	1e43      	subs	r3, r0, #1
 8012340:	9300      	str	r3, [sp, #0]
 8012342:	e7e2      	b.n	801230a <_dtoa_r+0x9a>
 8012344:	a913      	add	r1, sp, #76	; 0x4c
 8012346:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801234a:	aa12      	add	r2, sp, #72	; 0x48
 801234c:	4630      	mov	r0, r6
 801234e:	f001 f83f 	bl	80133d0 <__d2b>
 8012352:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012356:	4605      	mov	r5, r0
 8012358:	9812      	ldr	r0, [sp, #72]	; 0x48
 801235a:	2900      	cmp	r1, #0
 801235c:	d047      	beq.n	80123ee <_dtoa_r+0x17e>
 801235e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012360:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012364:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012368:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801236c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012370:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012374:	2400      	movs	r4, #0
 8012376:	ec43 2b16 	vmov	d6, r2, r3
 801237a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801237e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8012530 <_dtoa_r+0x2c0>
 8012382:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012386:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8012538 <_dtoa_r+0x2c8>
 801238a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801238e:	eeb0 7b46 	vmov.f64	d7, d6
 8012392:	ee06 1a90 	vmov	s13, r1
 8012396:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801239a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8012540 <_dtoa_r+0x2d0>
 801239e:	eea5 7b06 	vfma.f64	d7, d5, d6
 80123a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80123a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80123aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ae:	ee16 ba90 	vmov	fp, s13
 80123b2:	9411      	str	r4, [sp, #68]	; 0x44
 80123b4:	d508      	bpl.n	80123c8 <_dtoa_r+0x158>
 80123b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80123ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80123be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c2:	bf18      	it	ne
 80123c4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80123c8:	f1bb 0f16 	cmp.w	fp, #22
 80123cc:	d832      	bhi.n	8012434 <_dtoa_r+0x1c4>
 80123ce:	4b64      	ldr	r3, [pc, #400]	; (8012560 <_dtoa_r+0x2f0>)
 80123d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80123d4:	ed93 7b00 	vldr	d7, [r3]
 80123d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80123dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e4:	d501      	bpl.n	80123ea <_dtoa_r+0x17a>
 80123e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80123ea:	2300      	movs	r3, #0
 80123ec:	e023      	b.n	8012436 <_dtoa_r+0x1c6>
 80123ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80123f0:	4401      	add	r1, r0
 80123f2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80123f6:	2b20      	cmp	r3, #32
 80123f8:	bfc3      	ittte	gt
 80123fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80123fe:	fa04 f303 	lslgt.w	r3, r4, r3
 8012402:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012406:	f1c3 0320 	rsble	r3, r3, #32
 801240a:	bfc6      	itte	gt
 801240c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012410:	ea43 0308 	orrgt.w	r3, r3, r8
 8012414:	fa08 f303 	lslle.w	r3, r8, r3
 8012418:	ee07 3a90 	vmov	s15, r3
 801241c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012420:	3901      	subs	r1, #1
 8012422:	ed8d 7b00 	vstr	d7, [sp]
 8012426:	9c01      	ldr	r4, [sp, #4]
 8012428:	e9dd 2300 	ldrd	r2, r3, [sp]
 801242c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012430:	2401      	movs	r4, #1
 8012432:	e7a0      	b.n	8012376 <_dtoa_r+0x106>
 8012434:	2301      	movs	r3, #1
 8012436:	930f      	str	r3, [sp, #60]	; 0x3c
 8012438:	1a43      	subs	r3, r0, r1
 801243a:	1e5a      	subs	r2, r3, #1
 801243c:	bf45      	ittet	mi
 801243e:	f1c3 0301 	rsbmi	r3, r3, #1
 8012442:	9305      	strmi	r3, [sp, #20]
 8012444:	2300      	movpl	r3, #0
 8012446:	2300      	movmi	r3, #0
 8012448:	9206      	str	r2, [sp, #24]
 801244a:	bf54      	ite	pl
 801244c:	9305      	strpl	r3, [sp, #20]
 801244e:	9306      	strmi	r3, [sp, #24]
 8012450:	f1bb 0f00 	cmp.w	fp, #0
 8012454:	db18      	blt.n	8012488 <_dtoa_r+0x218>
 8012456:	9b06      	ldr	r3, [sp, #24]
 8012458:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801245c:	445b      	add	r3, fp
 801245e:	9306      	str	r3, [sp, #24]
 8012460:	2300      	movs	r3, #0
 8012462:	9a07      	ldr	r2, [sp, #28]
 8012464:	2a09      	cmp	r2, #9
 8012466:	d849      	bhi.n	80124fc <_dtoa_r+0x28c>
 8012468:	2a05      	cmp	r2, #5
 801246a:	bfc4      	itt	gt
 801246c:	3a04      	subgt	r2, #4
 801246e:	9207      	strgt	r2, [sp, #28]
 8012470:	9a07      	ldr	r2, [sp, #28]
 8012472:	f1a2 0202 	sub.w	r2, r2, #2
 8012476:	bfcc      	ite	gt
 8012478:	2400      	movgt	r4, #0
 801247a:	2401      	movle	r4, #1
 801247c:	2a03      	cmp	r2, #3
 801247e:	d848      	bhi.n	8012512 <_dtoa_r+0x2a2>
 8012480:	e8df f002 	tbb	[pc, r2]
 8012484:	3a2c2e0b 	.word	0x3a2c2e0b
 8012488:	9b05      	ldr	r3, [sp, #20]
 801248a:	2200      	movs	r2, #0
 801248c:	eba3 030b 	sub.w	r3, r3, fp
 8012490:	9305      	str	r3, [sp, #20]
 8012492:	920e      	str	r2, [sp, #56]	; 0x38
 8012494:	f1cb 0300 	rsb	r3, fp, #0
 8012498:	e7e3      	b.n	8012462 <_dtoa_r+0x1f2>
 801249a:	2200      	movs	r2, #0
 801249c:	9208      	str	r2, [sp, #32]
 801249e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124a0:	2a00      	cmp	r2, #0
 80124a2:	dc39      	bgt.n	8012518 <_dtoa_r+0x2a8>
 80124a4:	f04f 0a01 	mov.w	sl, #1
 80124a8:	46d1      	mov	r9, sl
 80124aa:	4652      	mov	r2, sl
 80124ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80124b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80124b2:	2100      	movs	r1, #0
 80124b4:	6079      	str	r1, [r7, #4]
 80124b6:	2004      	movs	r0, #4
 80124b8:	f100 0c14 	add.w	ip, r0, #20
 80124bc:	4594      	cmp	ip, r2
 80124be:	6879      	ldr	r1, [r7, #4]
 80124c0:	d92f      	bls.n	8012522 <_dtoa_r+0x2b2>
 80124c2:	4630      	mov	r0, r6
 80124c4:	930c      	str	r3, [sp, #48]	; 0x30
 80124c6:	f000 fc61 	bl	8012d8c <_Balloc>
 80124ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124cc:	9000      	str	r0, [sp, #0]
 80124ce:	4602      	mov	r2, r0
 80124d0:	2800      	cmp	r0, #0
 80124d2:	d149      	bne.n	8012568 <_dtoa_r+0x2f8>
 80124d4:	4b23      	ldr	r3, [pc, #140]	; (8012564 <_dtoa_r+0x2f4>)
 80124d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80124da:	e6df      	b.n	801229c <_dtoa_r+0x2c>
 80124dc:	2201      	movs	r2, #1
 80124de:	e7dd      	b.n	801249c <_dtoa_r+0x22c>
 80124e0:	2200      	movs	r2, #0
 80124e2:	9208      	str	r2, [sp, #32]
 80124e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124e6:	eb0b 0a02 	add.w	sl, fp, r2
 80124ea:	f10a 0901 	add.w	r9, sl, #1
 80124ee:	464a      	mov	r2, r9
 80124f0:	2a01      	cmp	r2, #1
 80124f2:	bfb8      	it	lt
 80124f4:	2201      	movlt	r2, #1
 80124f6:	e7db      	b.n	80124b0 <_dtoa_r+0x240>
 80124f8:	2201      	movs	r2, #1
 80124fa:	e7f2      	b.n	80124e2 <_dtoa_r+0x272>
 80124fc:	2401      	movs	r4, #1
 80124fe:	2200      	movs	r2, #0
 8012500:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012504:	f04f 3aff 	mov.w	sl, #4294967295
 8012508:	2100      	movs	r1, #0
 801250a:	46d1      	mov	r9, sl
 801250c:	2212      	movs	r2, #18
 801250e:	9109      	str	r1, [sp, #36]	; 0x24
 8012510:	e7ce      	b.n	80124b0 <_dtoa_r+0x240>
 8012512:	2201      	movs	r2, #1
 8012514:	9208      	str	r2, [sp, #32]
 8012516:	e7f5      	b.n	8012504 <_dtoa_r+0x294>
 8012518:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801251c:	46d1      	mov	r9, sl
 801251e:	4652      	mov	r2, sl
 8012520:	e7c6      	b.n	80124b0 <_dtoa_r+0x240>
 8012522:	3101      	adds	r1, #1
 8012524:	6079      	str	r1, [r7, #4]
 8012526:	0040      	lsls	r0, r0, #1
 8012528:	e7c6      	b.n	80124b8 <_dtoa_r+0x248>
 801252a:	bf00      	nop
 801252c:	f3af 8000 	nop.w
 8012530:	636f4361 	.word	0x636f4361
 8012534:	3fd287a7 	.word	0x3fd287a7
 8012538:	8b60c8b3 	.word	0x8b60c8b3
 801253c:	3fc68a28 	.word	0x3fc68a28
 8012540:	509f79fb 	.word	0x509f79fb
 8012544:	3fd34413 	.word	0x3fd34413
 8012548:	08014e1d 	.word	0x08014e1d
 801254c:	08014e34 	.word	0x08014e34
 8012550:	7ff00000 	.word	0x7ff00000
 8012554:	08014e19 	.word	0x08014e19
 8012558:	08014e10 	.word	0x08014e10
 801255c:	08014ded 	.word	0x08014ded
 8012560:	08014f30 	.word	0x08014f30
 8012564:	08014e93 	.word	0x08014e93
 8012568:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801256a:	9900      	ldr	r1, [sp, #0]
 801256c:	6011      	str	r1, [r2, #0]
 801256e:	f1b9 0f0e 	cmp.w	r9, #14
 8012572:	d872      	bhi.n	801265a <_dtoa_r+0x3ea>
 8012574:	2c00      	cmp	r4, #0
 8012576:	d070      	beq.n	801265a <_dtoa_r+0x3ea>
 8012578:	f1bb 0f00 	cmp.w	fp, #0
 801257c:	f340 80a6 	ble.w	80126cc <_dtoa_r+0x45c>
 8012580:	49ca      	ldr	r1, [pc, #808]	; (80128ac <_dtoa_r+0x63c>)
 8012582:	f00b 020f 	and.w	r2, fp, #15
 8012586:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801258a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801258e:	ed92 7b00 	vldr	d7, [r2]
 8012592:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012596:	f000 808d 	beq.w	80126b4 <_dtoa_r+0x444>
 801259a:	4ac5      	ldr	r2, [pc, #788]	; (80128b0 <_dtoa_r+0x640>)
 801259c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80125a0:	ed92 6b08 	vldr	d6, [r2, #32]
 80125a4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80125a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80125ac:	f001 010f 	and.w	r1, r1, #15
 80125b0:	2203      	movs	r2, #3
 80125b2:	48bf      	ldr	r0, [pc, #764]	; (80128b0 <_dtoa_r+0x640>)
 80125b4:	2900      	cmp	r1, #0
 80125b6:	d17f      	bne.n	80126b8 <_dtoa_r+0x448>
 80125b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80125bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80125c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80125c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80125c6:	2900      	cmp	r1, #0
 80125c8:	f000 80b2 	beq.w	8012730 <_dtoa_r+0x4c0>
 80125cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80125d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80125d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125dc:	f140 80a8 	bpl.w	8012730 <_dtoa_r+0x4c0>
 80125e0:	f1b9 0f00 	cmp.w	r9, #0
 80125e4:	f000 80a4 	beq.w	8012730 <_dtoa_r+0x4c0>
 80125e8:	f1ba 0f00 	cmp.w	sl, #0
 80125ec:	dd31      	ble.n	8012652 <_dtoa_r+0x3e2>
 80125ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80125f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80125f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80125fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 80125fe:	3201      	adds	r2, #1
 8012600:	4650      	mov	r0, sl
 8012602:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012606:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801260a:	ee07 2a90 	vmov	s15, r2
 801260e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012612:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012616:	ed8d 5b02 	vstr	d5, [sp, #8]
 801261a:	9c03      	ldr	r4, [sp, #12]
 801261c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012620:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8012624:	2800      	cmp	r0, #0
 8012626:	f040 8086 	bne.w	8012736 <_dtoa_r+0x4c6>
 801262a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801262e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012632:	ec42 1b17 	vmov	d7, r1, r2
 8012636:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801263e:	f300 8272 	bgt.w	8012b26 <_dtoa_r+0x8b6>
 8012642:	eeb1 7b47 	vneg.f64	d7, d7
 8012646:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801264e:	f100 8267 	bmi.w	8012b20 <_dtoa_r+0x8b0>
 8012652:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8012656:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801265a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801265c:	2a00      	cmp	r2, #0
 801265e:	f2c0 8129 	blt.w	80128b4 <_dtoa_r+0x644>
 8012662:	f1bb 0f0e 	cmp.w	fp, #14
 8012666:	f300 8125 	bgt.w	80128b4 <_dtoa_r+0x644>
 801266a:	4b90      	ldr	r3, [pc, #576]	; (80128ac <_dtoa_r+0x63c>)
 801266c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012670:	ed93 6b00 	vldr	d6, [r3]
 8012674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012676:	2b00      	cmp	r3, #0
 8012678:	f280 80c3 	bge.w	8012802 <_dtoa_r+0x592>
 801267c:	f1b9 0f00 	cmp.w	r9, #0
 8012680:	f300 80bf 	bgt.w	8012802 <_dtoa_r+0x592>
 8012684:	f040 824c 	bne.w	8012b20 <_dtoa_r+0x8b0>
 8012688:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801268c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012690:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012694:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269c:	464c      	mov	r4, r9
 801269e:	464f      	mov	r7, r9
 80126a0:	f280 8222 	bge.w	8012ae8 <_dtoa_r+0x878>
 80126a4:	f8dd 8000 	ldr.w	r8, [sp]
 80126a8:	2331      	movs	r3, #49	; 0x31
 80126aa:	f808 3b01 	strb.w	r3, [r8], #1
 80126ae:	f10b 0b01 	add.w	fp, fp, #1
 80126b2:	e21e      	b.n	8012af2 <_dtoa_r+0x882>
 80126b4:	2202      	movs	r2, #2
 80126b6:	e77c      	b.n	80125b2 <_dtoa_r+0x342>
 80126b8:	07cc      	lsls	r4, r1, #31
 80126ba:	d504      	bpl.n	80126c6 <_dtoa_r+0x456>
 80126bc:	ed90 6b00 	vldr	d6, [r0]
 80126c0:	3201      	adds	r2, #1
 80126c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80126c6:	1049      	asrs	r1, r1, #1
 80126c8:	3008      	adds	r0, #8
 80126ca:	e773      	b.n	80125b4 <_dtoa_r+0x344>
 80126cc:	d02e      	beq.n	801272c <_dtoa_r+0x4bc>
 80126ce:	f1cb 0100 	rsb	r1, fp, #0
 80126d2:	4a76      	ldr	r2, [pc, #472]	; (80128ac <_dtoa_r+0x63c>)
 80126d4:	f001 000f 	and.w	r0, r1, #15
 80126d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80126dc:	ed92 7b00 	vldr	d7, [r2]
 80126e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80126e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80126e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80126ec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80126f0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80126f4:	486e      	ldr	r0, [pc, #440]	; (80128b0 <_dtoa_r+0x640>)
 80126f6:	1109      	asrs	r1, r1, #4
 80126f8:	2400      	movs	r4, #0
 80126fa:	2202      	movs	r2, #2
 80126fc:	b939      	cbnz	r1, 801270e <_dtoa_r+0x49e>
 80126fe:	2c00      	cmp	r4, #0
 8012700:	f43f af60 	beq.w	80125c4 <_dtoa_r+0x354>
 8012704:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801270c:	e75a      	b.n	80125c4 <_dtoa_r+0x354>
 801270e:	07cf      	lsls	r7, r1, #31
 8012710:	d509      	bpl.n	8012726 <_dtoa_r+0x4b6>
 8012712:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8012716:	ed90 7b00 	vldr	d7, [r0]
 801271a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801271e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012722:	3201      	adds	r2, #1
 8012724:	2401      	movs	r4, #1
 8012726:	1049      	asrs	r1, r1, #1
 8012728:	3008      	adds	r0, #8
 801272a:	e7e7      	b.n	80126fc <_dtoa_r+0x48c>
 801272c:	2202      	movs	r2, #2
 801272e:	e749      	b.n	80125c4 <_dtoa_r+0x354>
 8012730:	465f      	mov	r7, fp
 8012732:	4648      	mov	r0, r9
 8012734:	e765      	b.n	8012602 <_dtoa_r+0x392>
 8012736:	ec42 1b17 	vmov	d7, r1, r2
 801273a:	4a5c      	ldr	r2, [pc, #368]	; (80128ac <_dtoa_r+0x63c>)
 801273c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012740:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012744:	9a00      	ldr	r2, [sp, #0]
 8012746:	1814      	adds	r4, r2, r0
 8012748:	9a08      	ldr	r2, [sp, #32]
 801274a:	b352      	cbz	r2, 80127a2 <_dtoa_r+0x532>
 801274c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012750:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012754:	f8dd 8000 	ldr.w	r8, [sp]
 8012758:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801275c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012760:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012764:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012768:	ee14 2a90 	vmov	r2, s9
 801276c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012770:	3230      	adds	r2, #48	; 0x30
 8012772:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012776:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277e:	f808 2b01 	strb.w	r2, [r8], #1
 8012782:	d439      	bmi.n	80127f8 <_dtoa_r+0x588>
 8012784:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012788:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012790:	d472      	bmi.n	8012878 <_dtoa_r+0x608>
 8012792:	45a0      	cmp	r8, r4
 8012794:	f43f af5d 	beq.w	8012652 <_dtoa_r+0x3e2>
 8012798:	ee27 7b03 	vmul.f64	d7, d7, d3
 801279c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80127a0:	e7e0      	b.n	8012764 <_dtoa_r+0x4f4>
 80127a2:	f8dd 8000 	ldr.w	r8, [sp]
 80127a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80127aa:	4621      	mov	r1, r4
 80127ac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80127b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80127b4:	ee14 2a90 	vmov	r2, s9
 80127b8:	3230      	adds	r2, #48	; 0x30
 80127ba:	f808 2b01 	strb.w	r2, [r8], #1
 80127be:	45a0      	cmp	r8, r4
 80127c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80127c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80127c8:	d118      	bne.n	80127fc <_dtoa_r+0x58c>
 80127ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80127ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 80127d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80127d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127da:	dc4d      	bgt.n	8012878 <_dtoa_r+0x608>
 80127dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80127e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80127e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e8:	f57f af33 	bpl.w	8012652 <_dtoa_r+0x3e2>
 80127ec:	4688      	mov	r8, r1
 80127ee:	3901      	subs	r1, #1
 80127f0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80127f4:	2b30      	cmp	r3, #48	; 0x30
 80127f6:	d0f9      	beq.n	80127ec <_dtoa_r+0x57c>
 80127f8:	46bb      	mov	fp, r7
 80127fa:	e02a      	b.n	8012852 <_dtoa_r+0x5e2>
 80127fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012800:	e7d6      	b.n	80127b0 <_dtoa_r+0x540>
 8012802:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012806:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801280a:	f8dd 8000 	ldr.w	r8, [sp]
 801280e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012812:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012816:	ee15 3a10 	vmov	r3, s10
 801281a:	3330      	adds	r3, #48	; 0x30
 801281c:	f808 3b01 	strb.w	r3, [r8], #1
 8012820:	9b00      	ldr	r3, [sp, #0]
 8012822:	eba8 0303 	sub.w	r3, r8, r3
 8012826:	4599      	cmp	r9, r3
 8012828:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801282c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012830:	d133      	bne.n	801289a <_dtoa_r+0x62a>
 8012832:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012836:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801283a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801283e:	dc1a      	bgt.n	8012876 <_dtoa_r+0x606>
 8012840:	eeb4 7b46 	vcmp.f64	d7, d6
 8012844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012848:	d103      	bne.n	8012852 <_dtoa_r+0x5e2>
 801284a:	ee15 3a10 	vmov	r3, s10
 801284e:	07d9      	lsls	r1, r3, #31
 8012850:	d411      	bmi.n	8012876 <_dtoa_r+0x606>
 8012852:	4629      	mov	r1, r5
 8012854:	4630      	mov	r0, r6
 8012856:	f000 fad9 	bl	8012e0c <_Bfree>
 801285a:	2300      	movs	r3, #0
 801285c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801285e:	f888 3000 	strb.w	r3, [r8]
 8012862:	f10b 0301 	add.w	r3, fp, #1
 8012866:	6013      	str	r3, [r2, #0]
 8012868:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801286a:	2b00      	cmp	r3, #0
 801286c:	f43f ad4d 	beq.w	801230a <_dtoa_r+0x9a>
 8012870:	f8c3 8000 	str.w	r8, [r3]
 8012874:	e549      	b.n	801230a <_dtoa_r+0x9a>
 8012876:	465f      	mov	r7, fp
 8012878:	4643      	mov	r3, r8
 801287a:	4698      	mov	r8, r3
 801287c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012880:	2a39      	cmp	r2, #57	; 0x39
 8012882:	d106      	bne.n	8012892 <_dtoa_r+0x622>
 8012884:	9a00      	ldr	r2, [sp, #0]
 8012886:	429a      	cmp	r2, r3
 8012888:	d1f7      	bne.n	801287a <_dtoa_r+0x60a>
 801288a:	9900      	ldr	r1, [sp, #0]
 801288c:	2230      	movs	r2, #48	; 0x30
 801288e:	3701      	adds	r7, #1
 8012890:	700a      	strb	r2, [r1, #0]
 8012892:	781a      	ldrb	r2, [r3, #0]
 8012894:	3201      	adds	r2, #1
 8012896:	701a      	strb	r2, [r3, #0]
 8012898:	e7ae      	b.n	80127f8 <_dtoa_r+0x588>
 801289a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801289e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80128a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a6:	d1b2      	bne.n	801280e <_dtoa_r+0x59e>
 80128a8:	e7d3      	b.n	8012852 <_dtoa_r+0x5e2>
 80128aa:	bf00      	nop
 80128ac:	08014f30 	.word	0x08014f30
 80128b0:	08014f08 	.word	0x08014f08
 80128b4:	9908      	ldr	r1, [sp, #32]
 80128b6:	2900      	cmp	r1, #0
 80128b8:	f000 80d1 	beq.w	8012a5e <_dtoa_r+0x7ee>
 80128bc:	9907      	ldr	r1, [sp, #28]
 80128be:	2901      	cmp	r1, #1
 80128c0:	f300 80b4 	bgt.w	8012a2c <_dtoa_r+0x7bc>
 80128c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80128c6:	2900      	cmp	r1, #0
 80128c8:	f000 80ac 	beq.w	8012a24 <_dtoa_r+0x7b4>
 80128cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80128d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80128d4:	461c      	mov	r4, r3
 80128d6:	930a      	str	r3, [sp, #40]	; 0x28
 80128d8:	9b05      	ldr	r3, [sp, #20]
 80128da:	4413      	add	r3, r2
 80128dc:	9305      	str	r3, [sp, #20]
 80128de:	9b06      	ldr	r3, [sp, #24]
 80128e0:	2101      	movs	r1, #1
 80128e2:	4413      	add	r3, r2
 80128e4:	4630      	mov	r0, r6
 80128e6:	9306      	str	r3, [sp, #24]
 80128e8:	f000 fb4c 	bl	8012f84 <__i2b>
 80128ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128ee:	4607      	mov	r7, r0
 80128f0:	f1b8 0f00 	cmp.w	r8, #0
 80128f4:	dd0d      	ble.n	8012912 <_dtoa_r+0x6a2>
 80128f6:	9a06      	ldr	r2, [sp, #24]
 80128f8:	2a00      	cmp	r2, #0
 80128fa:	dd0a      	ble.n	8012912 <_dtoa_r+0x6a2>
 80128fc:	4542      	cmp	r2, r8
 80128fe:	9905      	ldr	r1, [sp, #20]
 8012900:	bfa8      	it	ge
 8012902:	4642      	movge	r2, r8
 8012904:	1a89      	subs	r1, r1, r2
 8012906:	9105      	str	r1, [sp, #20]
 8012908:	9906      	ldr	r1, [sp, #24]
 801290a:	eba8 0802 	sub.w	r8, r8, r2
 801290e:	1a8a      	subs	r2, r1, r2
 8012910:	9206      	str	r2, [sp, #24]
 8012912:	b303      	cbz	r3, 8012956 <_dtoa_r+0x6e6>
 8012914:	9a08      	ldr	r2, [sp, #32]
 8012916:	2a00      	cmp	r2, #0
 8012918:	f000 80a6 	beq.w	8012a68 <_dtoa_r+0x7f8>
 801291c:	2c00      	cmp	r4, #0
 801291e:	dd13      	ble.n	8012948 <_dtoa_r+0x6d8>
 8012920:	4639      	mov	r1, r7
 8012922:	4622      	mov	r2, r4
 8012924:	4630      	mov	r0, r6
 8012926:	930c      	str	r3, [sp, #48]	; 0x30
 8012928:	f000 fbe8 	bl	80130fc <__pow5mult>
 801292c:	462a      	mov	r2, r5
 801292e:	4601      	mov	r1, r0
 8012930:	4607      	mov	r7, r0
 8012932:	4630      	mov	r0, r6
 8012934:	f000 fb3c 	bl	8012fb0 <__multiply>
 8012938:	4629      	mov	r1, r5
 801293a:	900a      	str	r0, [sp, #40]	; 0x28
 801293c:	4630      	mov	r0, r6
 801293e:	f000 fa65 	bl	8012e0c <_Bfree>
 8012942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012944:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012946:	4615      	mov	r5, r2
 8012948:	1b1a      	subs	r2, r3, r4
 801294a:	d004      	beq.n	8012956 <_dtoa_r+0x6e6>
 801294c:	4629      	mov	r1, r5
 801294e:	4630      	mov	r0, r6
 8012950:	f000 fbd4 	bl	80130fc <__pow5mult>
 8012954:	4605      	mov	r5, r0
 8012956:	2101      	movs	r1, #1
 8012958:	4630      	mov	r0, r6
 801295a:	f000 fb13 	bl	8012f84 <__i2b>
 801295e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012960:	2b00      	cmp	r3, #0
 8012962:	4604      	mov	r4, r0
 8012964:	f340 8082 	ble.w	8012a6c <_dtoa_r+0x7fc>
 8012968:	461a      	mov	r2, r3
 801296a:	4601      	mov	r1, r0
 801296c:	4630      	mov	r0, r6
 801296e:	f000 fbc5 	bl	80130fc <__pow5mult>
 8012972:	9b07      	ldr	r3, [sp, #28]
 8012974:	2b01      	cmp	r3, #1
 8012976:	4604      	mov	r4, r0
 8012978:	dd7b      	ble.n	8012a72 <_dtoa_r+0x802>
 801297a:	2300      	movs	r3, #0
 801297c:	930a      	str	r3, [sp, #40]	; 0x28
 801297e:	6922      	ldr	r2, [r4, #16]
 8012980:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012984:	6910      	ldr	r0, [r2, #16]
 8012986:	f000 faad 	bl	8012ee4 <__hi0bits>
 801298a:	f1c0 0020 	rsb	r0, r0, #32
 801298e:	9b06      	ldr	r3, [sp, #24]
 8012990:	4418      	add	r0, r3
 8012992:	f010 001f 	ands.w	r0, r0, #31
 8012996:	f000 808d 	beq.w	8012ab4 <_dtoa_r+0x844>
 801299a:	f1c0 0220 	rsb	r2, r0, #32
 801299e:	2a04      	cmp	r2, #4
 80129a0:	f340 8086 	ble.w	8012ab0 <_dtoa_r+0x840>
 80129a4:	f1c0 001c 	rsb	r0, r0, #28
 80129a8:	9b05      	ldr	r3, [sp, #20]
 80129aa:	4403      	add	r3, r0
 80129ac:	9305      	str	r3, [sp, #20]
 80129ae:	9b06      	ldr	r3, [sp, #24]
 80129b0:	4403      	add	r3, r0
 80129b2:	4480      	add	r8, r0
 80129b4:	9306      	str	r3, [sp, #24]
 80129b6:	9b05      	ldr	r3, [sp, #20]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	dd05      	ble.n	80129c8 <_dtoa_r+0x758>
 80129bc:	4629      	mov	r1, r5
 80129be:	461a      	mov	r2, r3
 80129c0:	4630      	mov	r0, r6
 80129c2:	f000 fbf5 	bl	80131b0 <__lshift>
 80129c6:	4605      	mov	r5, r0
 80129c8:	9b06      	ldr	r3, [sp, #24]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	dd05      	ble.n	80129da <_dtoa_r+0x76a>
 80129ce:	4621      	mov	r1, r4
 80129d0:	461a      	mov	r2, r3
 80129d2:	4630      	mov	r0, r6
 80129d4:	f000 fbec 	bl	80131b0 <__lshift>
 80129d8:	4604      	mov	r4, r0
 80129da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d06b      	beq.n	8012ab8 <_dtoa_r+0x848>
 80129e0:	4621      	mov	r1, r4
 80129e2:	4628      	mov	r0, r5
 80129e4:	f000 fc50 	bl	8013288 <__mcmp>
 80129e8:	2800      	cmp	r0, #0
 80129ea:	da65      	bge.n	8012ab8 <_dtoa_r+0x848>
 80129ec:	2300      	movs	r3, #0
 80129ee:	4629      	mov	r1, r5
 80129f0:	220a      	movs	r2, #10
 80129f2:	4630      	mov	r0, r6
 80129f4:	f000 fa2c 	bl	8012e50 <__multadd>
 80129f8:	9b08      	ldr	r3, [sp, #32]
 80129fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80129fe:	4605      	mov	r5, r0
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f000 8192 	beq.w	8012d2a <_dtoa_r+0xaba>
 8012a06:	4639      	mov	r1, r7
 8012a08:	2300      	movs	r3, #0
 8012a0a:	220a      	movs	r2, #10
 8012a0c:	4630      	mov	r0, r6
 8012a0e:	f000 fa1f 	bl	8012e50 <__multadd>
 8012a12:	f1ba 0f00 	cmp.w	sl, #0
 8012a16:	4607      	mov	r7, r0
 8012a18:	f300 808e 	bgt.w	8012b38 <_dtoa_r+0x8c8>
 8012a1c:	9b07      	ldr	r3, [sp, #28]
 8012a1e:	2b02      	cmp	r3, #2
 8012a20:	dc51      	bgt.n	8012ac6 <_dtoa_r+0x856>
 8012a22:	e089      	b.n	8012b38 <_dtoa_r+0x8c8>
 8012a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012a2a:	e751      	b.n	80128d0 <_dtoa_r+0x660>
 8012a2c:	f109 34ff 	add.w	r4, r9, #4294967295
 8012a30:	42a3      	cmp	r3, r4
 8012a32:	bfbf      	itttt	lt
 8012a34:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8012a36:	1ae3      	sublt	r3, r4, r3
 8012a38:	18d2      	addlt	r2, r2, r3
 8012a3a:	4613      	movlt	r3, r2
 8012a3c:	bfb7      	itett	lt
 8012a3e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012a40:	1b1c      	subge	r4, r3, r4
 8012a42:	4623      	movlt	r3, r4
 8012a44:	2400      	movlt	r4, #0
 8012a46:	f1b9 0f00 	cmp.w	r9, #0
 8012a4a:	bfb5      	itete	lt
 8012a4c:	9a05      	ldrlt	r2, [sp, #20]
 8012a4e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8012a52:	eba2 0809 	sublt.w	r8, r2, r9
 8012a56:	464a      	movge	r2, r9
 8012a58:	bfb8      	it	lt
 8012a5a:	2200      	movlt	r2, #0
 8012a5c:	e73b      	b.n	80128d6 <_dtoa_r+0x666>
 8012a5e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012a62:	9f08      	ldr	r7, [sp, #32]
 8012a64:	461c      	mov	r4, r3
 8012a66:	e743      	b.n	80128f0 <_dtoa_r+0x680>
 8012a68:	461a      	mov	r2, r3
 8012a6a:	e76f      	b.n	801294c <_dtoa_r+0x6dc>
 8012a6c:	9b07      	ldr	r3, [sp, #28]
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	dc18      	bgt.n	8012aa4 <_dtoa_r+0x834>
 8012a72:	9b02      	ldr	r3, [sp, #8]
 8012a74:	b9b3      	cbnz	r3, 8012aa4 <_dtoa_r+0x834>
 8012a76:	9b03      	ldr	r3, [sp, #12]
 8012a78:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012a7c:	b9a2      	cbnz	r2, 8012aa8 <_dtoa_r+0x838>
 8012a7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012a82:	0d12      	lsrs	r2, r2, #20
 8012a84:	0512      	lsls	r2, r2, #20
 8012a86:	b18a      	cbz	r2, 8012aac <_dtoa_r+0x83c>
 8012a88:	9b05      	ldr	r3, [sp, #20]
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	9305      	str	r3, [sp, #20]
 8012a8e:	9b06      	ldr	r3, [sp, #24]
 8012a90:	3301      	adds	r3, #1
 8012a92:	9306      	str	r3, [sp, #24]
 8012a94:	2301      	movs	r3, #1
 8012a96:	930a      	str	r3, [sp, #40]	; 0x28
 8012a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	f47f af6f 	bne.w	801297e <_dtoa_r+0x70e>
 8012aa0:	2001      	movs	r0, #1
 8012aa2:	e774      	b.n	801298e <_dtoa_r+0x71e>
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	e7f6      	b.n	8012a96 <_dtoa_r+0x826>
 8012aa8:	9b02      	ldr	r3, [sp, #8]
 8012aaa:	e7f4      	b.n	8012a96 <_dtoa_r+0x826>
 8012aac:	920a      	str	r2, [sp, #40]	; 0x28
 8012aae:	e7f3      	b.n	8012a98 <_dtoa_r+0x828>
 8012ab0:	d081      	beq.n	80129b6 <_dtoa_r+0x746>
 8012ab2:	4610      	mov	r0, r2
 8012ab4:	301c      	adds	r0, #28
 8012ab6:	e777      	b.n	80129a8 <_dtoa_r+0x738>
 8012ab8:	f1b9 0f00 	cmp.w	r9, #0
 8012abc:	dc37      	bgt.n	8012b2e <_dtoa_r+0x8be>
 8012abe:	9b07      	ldr	r3, [sp, #28]
 8012ac0:	2b02      	cmp	r3, #2
 8012ac2:	dd34      	ble.n	8012b2e <_dtoa_r+0x8be>
 8012ac4:	46ca      	mov	sl, r9
 8012ac6:	f1ba 0f00 	cmp.w	sl, #0
 8012aca:	d10d      	bne.n	8012ae8 <_dtoa_r+0x878>
 8012acc:	4621      	mov	r1, r4
 8012ace:	4653      	mov	r3, sl
 8012ad0:	2205      	movs	r2, #5
 8012ad2:	4630      	mov	r0, r6
 8012ad4:	f000 f9bc 	bl	8012e50 <__multadd>
 8012ad8:	4601      	mov	r1, r0
 8012ada:	4604      	mov	r4, r0
 8012adc:	4628      	mov	r0, r5
 8012ade:	f000 fbd3 	bl	8013288 <__mcmp>
 8012ae2:	2800      	cmp	r0, #0
 8012ae4:	f73f adde 	bgt.w	80126a4 <_dtoa_r+0x434>
 8012ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aea:	f8dd 8000 	ldr.w	r8, [sp]
 8012aee:	ea6f 0b03 	mvn.w	fp, r3
 8012af2:	f04f 0900 	mov.w	r9, #0
 8012af6:	4621      	mov	r1, r4
 8012af8:	4630      	mov	r0, r6
 8012afa:	f000 f987 	bl	8012e0c <_Bfree>
 8012afe:	2f00      	cmp	r7, #0
 8012b00:	f43f aea7 	beq.w	8012852 <_dtoa_r+0x5e2>
 8012b04:	f1b9 0f00 	cmp.w	r9, #0
 8012b08:	d005      	beq.n	8012b16 <_dtoa_r+0x8a6>
 8012b0a:	45b9      	cmp	r9, r7
 8012b0c:	d003      	beq.n	8012b16 <_dtoa_r+0x8a6>
 8012b0e:	4649      	mov	r1, r9
 8012b10:	4630      	mov	r0, r6
 8012b12:	f000 f97b 	bl	8012e0c <_Bfree>
 8012b16:	4639      	mov	r1, r7
 8012b18:	4630      	mov	r0, r6
 8012b1a:	f000 f977 	bl	8012e0c <_Bfree>
 8012b1e:	e698      	b.n	8012852 <_dtoa_r+0x5e2>
 8012b20:	2400      	movs	r4, #0
 8012b22:	4627      	mov	r7, r4
 8012b24:	e7e0      	b.n	8012ae8 <_dtoa_r+0x878>
 8012b26:	46bb      	mov	fp, r7
 8012b28:	4604      	mov	r4, r0
 8012b2a:	4607      	mov	r7, r0
 8012b2c:	e5ba      	b.n	80126a4 <_dtoa_r+0x434>
 8012b2e:	9b08      	ldr	r3, [sp, #32]
 8012b30:	46ca      	mov	sl, r9
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	f000 8100 	beq.w	8012d38 <_dtoa_r+0xac8>
 8012b38:	f1b8 0f00 	cmp.w	r8, #0
 8012b3c:	dd05      	ble.n	8012b4a <_dtoa_r+0x8da>
 8012b3e:	4639      	mov	r1, r7
 8012b40:	4642      	mov	r2, r8
 8012b42:	4630      	mov	r0, r6
 8012b44:	f000 fb34 	bl	80131b0 <__lshift>
 8012b48:	4607      	mov	r7, r0
 8012b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d05d      	beq.n	8012c0c <_dtoa_r+0x99c>
 8012b50:	6879      	ldr	r1, [r7, #4]
 8012b52:	4630      	mov	r0, r6
 8012b54:	f000 f91a 	bl	8012d8c <_Balloc>
 8012b58:	4680      	mov	r8, r0
 8012b5a:	b928      	cbnz	r0, 8012b68 <_dtoa_r+0x8f8>
 8012b5c:	4b82      	ldr	r3, [pc, #520]	; (8012d68 <_dtoa_r+0xaf8>)
 8012b5e:	4602      	mov	r2, r0
 8012b60:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012b64:	f7ff bb9a 	b.w	801229c <_dtoa_r+0x2c>
 8012b68:	693a      	ldr	r2, [r7, #16]
 8012b6a:	3202      	adds	r2, #2
 8012b6c:	0092      	lsls	r2, r2, #2
 8012b6e:	f107 010c 	add.w	r1, r7, #12
 8012b72:	300c      	adds	r0, #12
 8012b74:	f7fe fe94 	bl	80118a0 <memcpy>
 8012b78:	2201      	movs	r2, #1
 8012b7a:	4641      	mov	r1, r8
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f000 fb17 	bl	80131b0 <__lshift>
 8012b82:	9b00      	ldr	r3, [sp, #0]
 8012b84:	3301      	adds	r3, #1
 8012b86:	9305      	str	r3, [sp, #20]
 8012b88:	9b00      	ldr	r3, [sp, #0]
 8012b8a:	4453      	add	r3, sl
 8012b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8012b8e:	9b02      	ldr	r3, [sp, #8]
 8012b90:	f003 0301 	and.w	r3, r3, #1
 8012b94:	46b9      	mov	r9, r7
 8012b96:	9308      	str	r3, [sp, #32]
 8012b98:	4607      	mov	r7, r0
 8012b9a:	9b05      	ldr	r3, [sp, #20]
 8012b9c:	4621      	mov	r1, r4
 8012b9e:	3b01      	subs	r3, #1
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	9302      	str	r3, [sp, #8]
 8012ba4:	f7ff fad6 	bl	8012154 <quorem>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	3330      	adds	r3, #48	; 0x30
 8012bac:	9006      	str	r0, [sp, #24]
 8012bae:	4649      	mov	r1, r9
 8012bb0:	4628      	mov	r0, r5
 8012bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8012bb4:	f000 fb68 	bl	8013288 <__mcmp>
 8012bb8:	463a      	mov	r2, r7
 8012bba:	4682      	mov	sl, r0
 8012bbc:	4621      	mov	r1, r4
 8012bbe:	4630      	mov	r0, r6
 8012bc0:	f000 fb7e 	bl	80132c0 <__mdiff>
 8012bc4:	68c2      	ldr	r2, [r0, #12]
 8012bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bc8:	4680      	mov	r8, r0
 8012bca:	bb0a      	cbnz	r2, 8012c10 <_dtoa_r+0x9a0>
 8012bcc:	4601      	mov	r1, r0
 8012bce:	4628      	mov	r0, r5
 8012bd0:	f000 fb5a 	bl	8013288 <__mcmp>
 8012bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bd6:	4602      	mov	r2, r0
 8012bd8:	4641      	mov	r1, r8
 8012bda:	4630      	mov	r0, r6
 8012bdc:	920e      	str	r2, [sp, #56]	; 0x38
 8012bde:	930a      	str	r3, [sp, #40]	; 0x28
 8012be0:	f000 f914 	bl	8012e0c <_Bfree>
 8012be4:	9b07      	ldr	r3, [sp, #28]
 8012be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012be8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012bec:	ea43 0102 	orr.w	r1, r3, r2
 8012bf0:	9b08      	ldr	r3, [sp, #32]
 8012bf2:	430b      	orrs	r3, r1
 8012bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bf6:	d10d      	bne.n	8012c14 <_dtoa_r+0x9a4>
 8012bf8:	2b39      	cmp	r3, #57	; 0x39
 8012bfa:	d029      	beq.n	8012c50 <_dtoa_r+0x9e0>
 8012bfc:	f1ba 0f00 	cmp.w	sl, #0
 8012c00:	dd01      	ble.n	8012c06 <_dtoa_r+0x996>
 8012c02:	9b06      	ldr	r3, [sp, #24]
 8012c04:	3331      	adds	r3, #49	; 0x31
 8012c06:	9a02      	ldr	r2, [sp, #8]
 8012c08:	7013      	strb	r3, [r2, #0]
 8012c0a:	e774      	b.n	8012af6 <_dtoa_r+0x886>
 8012c0c:	4638      	mov	r0, r7
 8012c0e:	e7b8      	b.n	8012b82 <_dtoa_r+0x912>
 8012c10:	2201      	movs	r2, #1
 8012c12:	e7e1      	b.n	8012bd8 <_dtoa_r+0x968>
 8012c14:	f1ba 0f00 	cmp.w	sl, #0
 8012c18:	db06      	blt.n	8012c28 <_dtoa_r+0x9b8>
 8012c1a:	9907      	ldr	r1, [sp, #28]
 8012c1c:	ea41 0a0a 	orr.w	sl, r1, sl
 8012c20:	9908      	ldr	r1, [sp, #32]
 8012c22:	ea5a 0101 	orrs.w	r1, sl, r1
 8012c26:	d120      	bne.n	8012c6a <_dtoa_r+0x9fa>
 8012c28:	2a00      	cmp	r2, #0
 8012c2a:	ddec      	ble.n	8012c06 <_dtoa_r+0x996>
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	2201      	movs	r2, #1
 8012c30:	4630      	mov	r0, r6
 8012c32:	9305      	str	r3, [sp, #20]
 8012c34:	f000 fabc 	bl	80131b0 <__lshift>
 8012c38:	4621      	mov	r1, r4
 8012c3a:	4605      	mov	r5, r0
 8012c3c:	f000 fb24 	bl	8013288 <__mcmp>
 8012c40:	2800      	cmp	r0, #0
 8012c42:	9b05      	ldr	r3, [sp, #20]
 8012c44:	dc02      	bgt.n	8012c4c <_dtoa_r+0x9dc>
 8012c46:	d1de      	bne.n	8012c06 <_dtoa_r+0x996>
 8012c48:	07da      	lsls	r2, r3, #31
 8012c4a:	d5dc      	bpl.n	8012c06 <_dtoa_r+0x996>
 8012c4c:	2b39      	cmp	r3, #57	; 0x39
 8012c4e:	d1d8      	bne.n	8012c02 <_dtoa_r+0x992>
 8012c50:	9a02      	ldr	r2, [sp, #8]
 8012c52:	2339      	movs	r3, #57	; 0x39
 8012c54:	7013      	strb	r3, [r2, #0]
 8012c56:	4643      	mov	r3, r8
 8012c58:	4698      	mov	r8, r3
 8012c5a:	3b01      	subs	r3, #1
 8012c5c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012c60:	2a39      	cmp	r2, #57	; 0x39
 8012c62:	d051      	beq.n	8012d08 <_dtoa_r+0xa98>
 8012c64:	3201      	adds	r2, #1
 8012c66:	701a      	strb	r2, [r3, #0]
 8012c68:	e745      	b.n	8012af6 <_dtoa_r+0x886>
 8012c6a:	2a00      	cmp	r2, #0
 8012c6c:	dd03      	ble.n	8012c76 <_dtoa_r+0xa06>
 8012c6e:	2b39      	cmp	r3, #57	; 0x39
 8012c70:	d0ee      	beq.n	8012c50 <_dtoa_r+0x9e0>
 8012c72:	3301      	adds	r3, #1
 8012c74:	e7c7      	b.n	8012c06 <_dtoa_r+0x996>
 8012c76:	9a05      	ldr	r2, [sp, #20]
 8012c78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012c7a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012c7e:	428a      	cmp	r2, r1
 8012c80:	d02b      	beq.n	8012cda <_dtoa_r+0xa6a>
 8012c82:	4629      	mov	r1, r5
 8012c84:	2300      	movs	r3, #0
 8012c86:	220a      	movs	r2, #10
 8012c88:	4630      	mov	r0, r6
 8012c8a:	f000 f8e1 	bl	8012e50 <__multadd>
 8012c8e:	45b9      	cmp	r9, r7
 8012c90:	4605      	mov	r5, r0
 8012c92:	f04f 0300 	mov.w	r3, #0
 8012c96:	f04f 020a 	mov.w	r2, #10
 8012c9a:	4649      	mov	r1, r9
 8012c9c:	4630      	mov	r0, r6
 8012c9e:	d107      	bne.n	8012cb0 <_dtoa_r+0xa40>
 8012ca0:	f000 f8d6 	bl	8012e50 <__multadd>
 8012ca4:	4681      	mov	r9, r0
 8012ca6:	4607      	mov	r7, r0
 8012ca8:	9b05      	ldr	r3, [sp, #20]
 8012caa:	3301      	adds	r3, #1
 8012cac:	9305      	str	r3, [sp, #20]
 8012cae:	e774      	b.n	8012b9a <_dtoa_r+0x92a>
 8012cb0:	f000 f8ce 	bl	8012e50 <__multadd>
 8012cb4:	4639      	mov	r1, r7
 8012cb6:	4681      	mov	r9, r0
 8012cb8:	2300      	movs	r3, #0
 8012cba:	220a      	movs	r2, #10
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f000 f8c7 	bl	8012e50 <__multadd>
 8012cc2:	4607      	mov	r7, r0
 8012cc4:	e7f0      	b.n	8012ca8 <_dtoa_r+0xa38>
 8012cc6:	f1ba 0f00 	cmp.w	sl, #0
 8012cca:	9a00      	ldr	r2, [sp, #0]
 8012ccc:	bfcc      	ite	gt
 8012cce:	46d0      	movgt	r8, sl
 8012cd0:	f04f 0801 	movle.w	r8, #1
 8012cd4:	4490      	add	r8, r2
 8012cd6:	f04f 0900 	mov.w	r9, #0
 8012cda:	4629      	mov	r1, r5
 8012cdc:	2201      	movs	r2, #1
 8012cde:	4630      	mov	r0, r6
 8012ce0:	9302      	str	r3, [sp, #8]
 8012ce2:	f000 fa65 	bl	80131b0 <__lshift>
 8012ce6:	4621      	mov	r1, r4
 8012ce8:	4605      	mov	r5, r0
 8012cea:	f000 facd 	bl	8013288 <__mcmp>
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	dcb1      	bgt.n	8012c56 <_dtoa_r+0x9e6>
 8012cf2:	d102      	bne.n	8012cfa <_dtoa_r+0xa8a>
 8012cf4:	9b02      	ldr	r3, [sp, #8]
 8012cf6:	07db      	lsls	r3, r3, #31
 8012cf8:	d4ad      	bmi.n	8012c56 <_dtoa_r+0x9e6>
 8012cfa:	4643      	mov	r3, r8
 8012cfc:	4698      	mov	r8, r3
 8012cfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d02:	2a30      	cmp	r2, #48	; 0x30
 8012d04:	d0fa      	beq.n	8012cfc <_dtoa_r+0xa8c>
 8012d06:	e6f6      	b.n	8012af6 <_dtoa_r+0x886>
 8012d08:	9a00      	ldr	r2, [sp, #0]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d1a4      	bne.n	8012c58 <_dtoa_r+0x9e8>
 8012d0e:	f10b 0b01 	add.w	fp, fp, #1
 8012d12:	2331      	movs	r3, #49	; 0x31
 8012d14:	e778      	b.n	8012c08 <_dtoa_r+0x998>
 8012d16:	4b15      	ldr	r3, [pc, #84]	; (8012d6c <_dtoa_r+0xafc>)
 8012d18:	f7ff bb12 	b.w	8012340 <_dtoa_r+0xd0>
 8012d1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f47f aaee 	bne.w	8012300 <_dtoa_r+0x90>
 8012d24:	4b12      	ldr	r3, [pc, #72]	; (8012d70 <_dtoa_r+0xb00>)
 8012d26:	f7ff bb0b 	b.w	8012340 <_dtoa_r+0xd0>
 8012d2a:	f1ba 0f00 	cmp.w	sl, #0
 8012d2e:	dc03      	bgt.n	8012d38 <_dtoa_r+0xac8>
 8012d30:	9b07      	ldr	r3, [sp, #28]
 8012d32:	2b02      	cmp	r3, #2
 8012d34:	f73f aec7 	bgt.w	8012ac6 <_dtoa_r+0x856>
 8012d38:	f8dd 8000 	ldr.w	r8, [sp]
 8012d3c:	4621      	mov	r1, r4
 8012d3e:	4628      	mov	r0, r5
 8012d40:	f7ff fa08 	bl	8012154 <quorem>
 8012d44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012d48:	f808 3b01 	strb.w	r3, [r8], #1
 8012d4c:	9a00      	ldr	r2, [sp, #0]
 8012d4e:	eba8 0202 	sub.w	r2, r8, r2
 8012d52:	4592      	cmp	sl, r2
 8012d54:	ddb7      	ble.n	8012cc6 <_dtoa_r+0xa56>
 8012d56:	4629      	mov	r1, r5
 8012d58:	2300      	movs	r3, #0
 8012d5a:	220a      	movs	r2, #10
 8012d5c:	4630      	mov	r0, r6
 8012d5e:	f000 f877 	bl	8012e50 <__multadd>
 8012d62:	4605      	mov	r5, r0
 8012d64:	e7ea      	b.n	8012d3c <_dtoa_r+0xacc>
 8012d66:	bf00      	nop
 8012d68:	08014e93 	.word	0x08014e93
 8012d6c:	08014dec 	.word	0x08014dec
 8012d70:	08014e10 	.word	0x08014e10

08012d74 <_localeconv_r>:
 8012d74:	4800      	ldr	r0, [pc, #0]	; (8012d78 <_localeconv_r+0x4>)
 8012d76:	4770      	bx	lr
 8012d78:	24000178 	.word	0x24000178

08012d7c <malloc>:
 8012d7c:	4b02      	ldr	r3, [pc, #8]	; (8012d88 <malloc+0xc>)
 8012d7e:	4601      	mov	r1, r0
 8012d80:	6818      	ldr	r0, [r3, #0]
 8012d82:	f000 bbe1 	b.w	8013548 <_malloc_r>
 8012d86:	bf00      	nop
 8012d88:	24000024 	.word	0x24000024

08012d8c <_Balloc>:
 8012d8c:	b570      	push	{r4, r5, r6, lr}
 8012d8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d90:	4604      	mov	r4, r0
 8012d92:	460d      	mov	r5, r1
 8012d94:	b976      	cbnz	r6, 8012db4 <_Balloc+0x28>
 8012d96:	2010      	movs	r0, #16
 8012d98:	f7ff fff0 	bl	8012d7c <malloc>
 8012d9c:	4602      	mov	r2, r0
 8012d9e:	6260      	str	r0, [r4, #36]	; 0x24
 8012da0:	b920      	cbnz	r0, 8012dac <_Balloc+0x20>
 8012da2:	4b18      	ldr	r3, [pc, #96]	; (8012e04 <_Balloc+0x78>)
 8012da4:	4818      	ldr	r0, [pc, #96]	; (8012e08 <_Balloc+0x7c>)
 8012da6:	2166      	movs	r1, #102	; 0x66
 8012da8:	f000 fc38 	bl	801361c <__assert_func>
 8012dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012db0:	6006      	str	r6, [r0, #0]
 8012db2:	60c6      	str	r6, [r0, #12]
 8012db4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012db6:	68f3      	ldr	r3, [r6, #12]
 8012db8:	b183      	cbz	r3, 8012ddc <_Balloc+0x50>
 8012dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012dbc:	68db      	ldr	r3, [r3, #12]
 8012dbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012dc2:	b9b8      	cbnz	r0, 8012df4 <_Balloc+0x68>
 8012dc4:	2101      	movs	r1, #1
 8012dc6:	fa01 f605 	lsl.w	r6, r1, r5
 8012dca:	1d72      	adds	r2, r6, #5
 8012dcc:	0092      	lsls	r2, r2, #2
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f000 fb5a 	bl	8013488 <_calloc_r>
 8012dd4:	b160      	cbz	r0, 8012df0 <_Balloc+0x64>
 8012dd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012dda:	e00e      	b.n	8012dfa <_Balloc+0x6e>
 8012ddc:	2221      	movs	r2, #33	; 0x21
 8012dde:	2104      	movs	r1, #4
 8012de0:	4620      	mov	r0, r4
 8012de2:	f000 fb51 	bl	8013488 <_calloc_r>
 8012de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012de8:	60f0      	str	r0, [r6, #12]
 8012dea:	68db      	ldr	r3, [r3, #12]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d1e4      	bne.n	8012dba <_Balloc+0x2e>
 8012df0:	2000      	movs	r0, #0
 8012df2:	bd70      	pop	{r4, r5, r6, pc}
 8012df4:	6802      	ldr	r2, [r0, #0]
 8012df6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012e00:	e7f7      	b.n	8012df2 <_Balloc+0x66>
 8012e02:	bf00      	nop
 8012e04:	08014e1d 	.word	0x08014e1d
 8012e08:	08014ea4 	.word	0x08014ea4

08012e0c <_Bfree>:
 8012e0c:	b570      	push	{r4, r5, r6, lr}
 8012e0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e10:	4605      	mov	r5, r0
 8012e12:	460c      	mov	r4, r1
 8012e14:	b976      	cbnz	r6, 8012e34 <_Bfree+0x28>
 8012e16:	2010      	movs	r0, #16
 8012e18:	f7ff ffb0 	bl	8012d7c <malloc>
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	6268      	str	r0, [r5, #36]	; 0x24
 8012e20:	b920      	cbnz	r0, 8012e2c <_Bfree+0x20>
 8012e22:	4b09      	ldr	r3, [pc, #36]	; (8012e48 <_Bfree+0x3c>)
 8012e24:	4809      	ldr	r0, [pc, #36]	; (8012e4c <_Bfree+0x40>)
 8012e26:	218a      	movs	r1, #138	; 0x8a
 8012e28:	f000 fbf8 	bl	801361c <__assert_func>
 8012e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e30:	6006      	str	r6, [r0, #0]
 8012e32:	60c6      	str	r6, [r0, #12]
 8012e34:	b13c      	cbz	r4, 8012e46 <_Bfree+0x3a>
 8012e36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012e38:	6862      	ldr	r2, [r4, #4]
 8012e3a:	68db      	ldr	r3, [r3, #12]
 8012e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e40:	6021      	str	r1, [r4, #0]
 8012e42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e46:	bd70      	pop	{r4, r5, r6, pc}
 8012e48:	08014e1d 	.word	0x08014e1d
 8012e4c:	08014ea4 	.word	0x08014ea4

08012e50 <__multadd>:
 8012e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e54:	690e      	ldr	r6, [r1, #16]
 8012e56:	4607      	mov	r7, r0
 8012e58:	4698      	mov	r8, r3
 8012e5a:	460c      	mov	r4, r1
 8012e5c:	f101 0014 	add.w	r0, r1, #20
 8012e60:	2300      	movs	r3, #0
 8012e62:	6805      	ldr	r5, [r0, #0]
 8012e64:	b2a9      	uxth	r1, r5
 8012e66:	fb02 8101 	mla	r1, r2, r1, r8
 8012e6a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012e6e:	0c2d      	lsrs	r5, r5, #16
 8012e70:	fb02 c505 	mla	r5, r2, r5, ip
 8012e74:	b289      	uxth	r1, r1
 8012e76:	3301      	adds	r3, #1
 8012e78:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012e7c:	429e      	cmp	r6, r3
 8012e7e:	f840 1b04 	str.w	r1, [r0], #4
 8012e82:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012e86:	dcec      	bgt.n	8012e62 <__multadd+0x12>
 8012e88:	f1b8 0f00 	cmp.w	r8, #0
 8012e8c:	d022      	beq.n	8012ed4 <__multadd+0x84>
 8012e8e:	68a3      	ldr	r3, [r4, #8]
 8012e90:	42b3      	cmp	r3, r6
 8012e92:	dc19      	bgt.n	8012ec8 <__multadd+0x78>
 8012e94:	6861      	ldr	r1, [r4, #4]
 8012e96:	4638      	mov	r0, r7
 8012e98:	3101      	adds	r1, #1
 8012e9a:	f7ff ff77 	bl	8012d8c <_Balloc>
 8012e9e:	4605      	mov	r5, r0
 8012ea0:	b928      	cbnz	r0, 8012eae <__multadd+0x5e>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	4b0d      	ldr	r3, [pc, #52]	; (8012edc <__multadd+0x8c>)
 8012ea6:	480e      	ldr	r0, [pc, #56]	; (8012ee0 <__multadd+0x90>)
 8012ea8:	21b5      	movs	r1, #181	; 0xb5
 8012eaa:	f000 fbb7 	bl	801361c <__assert_func>
 8012eae:	6922      	ldr	r2, [r4, #16]
 8012eb0:	3202      	adds	r2, #2
 8012eb2:	f104 010c 	add.w	r1, r4, #12
 8012eb6:	0092      	lsls	r2, r2, #2
 8012eb8:	300c      	adds	r0, #12
 8012eba:	f7fe fcf1 	bl	80118a0 <memcpy>
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	4638      	mov	r0, r7
 8012ec2:	f7ff ffa3 	bl	8012e0c <_Bfree>
 8012ec6:	462c      	mov	r4, r5
 8012ec8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012ecc:	3601      	adds	r6, #1
 8012ece:	f8c3 8014 	str.w	r8, [r3, #20]
 8012ed2:	6126      	str	r6, [r4, #16]
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eda:	bf00      	nop
 8012edc:	08014e93 	.word	0x08014e93
 8012ee0:	08014ea4 	.word	0x08014ea4

08012ee4 <__hi0bits>:
 8012ee4:	0c03      	lsrs	r3, r0, #16
 8012ee6:	041b      	lsls	r3, r3, #16
 8012ee8:	b9d3      	cbnz	r3, 8012f20 <__hi0bits+0x3c>
 8012eea:	0400      	lsls	r0, r0, #16
 8012eec:	2310      	movs	r3, #16
 8012eee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012ef2:	bf04      	itt	eq
 8012ef4:	0200      	lsleq	r0, r0, #8
 8012ef6:	3308      	addeq	r3, #8
 8012ef8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012efc:	bf04      	itt	eq
 8012efe:	0100      	lsleq	r0, r0, #4
 8012f00:	3304      	addeq	r3, #4
 8012f02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012f06:	bf04      	itt	eq
 8012f08:	0080      	lsleq	r0, r0, #2
 8012f0a:	3302      	addeq	r3, #2
 8012f0c:	2800      	cmp	r0, #0
 8012f0e:	db05      	blt.n	8012f1c <__hi0bits+0x38>
 8012f10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012f14:	f103 0301 	add.w	r3, r3, #1
 8012f18:	bf08      	it	eq
 8012f1a:	2320      	moveq	r3, #32
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	4770      	bx	lr
 8012f20:	2300      	movs	r3, #0
 8012f22:	e7e4      	b.n	8012eee <__hi0bits+0xa>

08012f24 <__lo0bits>:
 8012f24:	6803      	ldr	r3, [r0, #0]
 8012f26:	f013 0207 	ands.w	r2, r3, #7
 8012f2a:	4601      	mov	r1, r0
 8012f2c:	d00b      	beq.n	8012f46 <__lo0bits+0x22>
 8012f2e:	07da      	lsls	r2, r3, #31
 8012f30:	d424      	bmi.n	8012f7c <__lo0bits+0x58>
 8012f32:	0798      	lsls	r0, r3, #30
 8012f34:	bf49      	itett	mi
 8012f36:	085b      	lsrmi	r3, r3, #1
 8012f38:	089b      	lsrpl	r3, r3, #2
 8012f3a:	2001      	movmi	r0, #1
 8012f3c:	600b      	strmi	r3, [r1, #0]
 8012f3e:	bf5c      	itt	pl
 8012f40:	600b      	strpl	r3, [r1, #0]
 8012f42:	2002      	movpl	r0, #2
 8012f44:	4770      	bx	lr
 8012f46:	b298      	uxth	r0, r3
 8012f48:	b9b0      	cbnz	r0, 8012f78 <__lo0bits+0x54>
 8012f4a:	0c1b      	lsrs	r3, r3, #16
 8012f4c:	2010      	movs	r0, #16
 8012f4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012f52:	bf04      	itt	eq
 8012f54:	0a1b      	lsreq	r3, r3, #8
 8012f56:	3008      	addeq	r0, #8
 8012f58:	071a      	lsls	r2, r3, #28
 8012f5a:	bf04      	itt	eq
 8012f5c:	091b      	lsreq	r3, r3, #4
 8012f5e:	3004      	addeq	r0, #4
 8012f60:	079a      	lsls	r2, r3, #30
 8012f62:	bf04      	itt	eq
 8012f64:	089b      	lsreq	r3, r3, #2
 8012f66:	3002      	addeq	r0, #2
 8012f68:	07da      	lsls	r2, r3, #31
 8012f6a:	d403      	bmi.n	8012f74 <__lo0bits+0x50>
 8012f6c:	085b      	lsrs	r3, r3, #1
 8012f6e:	f100 0001 	add.w	r0, r0, #1
 8012f72:	d005      	beq.n	8012f80 <__lo0bits+0x5c>
 8012f74:	600b      	str	r3, [r1, #0]
 8012f76:	4770      	bx	lr
 8012f78:	4610      	mov	r0, r2
 8012f7a:	e7e8      	b.n	8012f4e <__lo0bits+0x2a>
 8012f7c:	2000      	movs	r0, #0
 8012f7e:	4770      	bx	lr
 8012f80:	2020      	movs	r0, #32
 8012f82:	4770      	bx	lr

08012f84 <__i2b>:
 8012f84:	b510      	push	{r4, lr}
 8012f86:	460c      	mov	r4, r1
 8012f88:	2101      	movs	r1, #1
 8012f8a:	f7ff feff 	bl	8012d8c <_Balloc>
 8012f8e:	4602      	mov	r2, r0
 8012f90:	b928      	cbnz	r0, 8012f9e <__i2b+0x1a>
 8012f92:	4b05      	ldr	r3, [pc, #20]	; (8012fa8 <__i2b+0x24>)
 8012f94:	4805      	ldr	r0, [pc, #20]	; (8012fac <__i2b+0x28>)
 8012f96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012f9a:	f000 fb3f 	bl	801361c <__assert_func>
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	6144      	str	r4, [r0, #20]
 8012fa2:	6103      	str	r3, [r0, #16]
 8012fa4:	bd10      	pop	{r4, pc}
 8012fa6:	bf00      	nop
 8012fa8:	08014e93 	.word	0x08014e93
 8012fac:	08014ea4 	.word	0x08014ea4

08012fb0 <__multiply>:
 8012fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fb4:	4614      	mov	r4, r2
 8012fb6:	690a      	ldr	r2, [r1, #16]
 8012fb8:	6923      	ldr	r3, [r4, #16]
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	bfb8      	it	lt
 8012fbe:	460b      	movlt	r3, r1
 8012fc0:	460d      	mov	r5, r1
 8012fc2:	bfbc      	itt	lt
 8012fc4:	4625      	movlt	r5, r4
 8012fc6:	461c      	movlt	r4, r3
 8012fc8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012fcc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012fd0:	68ab      	ldr	r3, [r5, #8]
 8012fd2:	6869      	ldr	r1, [r5, #4]
 8012fd4:	eb0a 0709 	add.w	r7, sl, r9
 8012fd8:	42bb      	cmp	r3, r7
 8012fda:	b085      	sub	sp, #20
 8012fdc:	bfb8      	it	lt
 8012fde:	3101      	addlt	r1, #1
 8012fe0:	f7ff fed4 	bl	8012d8c <_Balloc>
 8012fe4:	b930      	cbnz	r0, 8012ff4 <__multiply+0x44>
 8012fe6:	4602      	mov	r2, r0
 8012fe8:	4b42      	ldr	r3, [pc, #264]	; (80130f4 <__multiply+0x144>)
 8012fea:	4843      	ldr	r0, [pc, #268]	; (80130f8 <__multiply+0x148>)
 8012fec:	f240 115d 	movw	r1, #349	; 0x15d
 8012ff0:	f000 fb14 	bl	801361c <__assert_func>
 8012ff4:	f100 0614 	add.w	r6, r0, #20
 8012ff8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012ffc:	4633      	mov	r3, r6
 8012ffe:	2200      	movs	r2, #0
 8013000:	4543      	cmp	r3, r8
 8013002:	d31e      	bcc.n	8013042 <__multiply+0x92>
 8013004:	f105 0c14 	add.w	ip, r5, #20
 8013008:	f104 0314 	add.w	r3, r4, #20
 801300c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013010:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013014:	9202      	str	r2, [sp, #8]
 8013016:	ebac 0205 	sub.w	r2, ip, r5
 801301a:	3a15      	subs	r2, #21
 801301c:	f022 0203 	bic.w	r2, r2, #3
 8013020:	3204      	adds	r2, #4
 8013022:	f105 0115 	add.w	r1, r5, #21
 8013026:	458c      	cmp	ip, r1
 8013028:	bf38      	it	cc
 801302a:	2204      	movcc	r2, #4
 801302c:	9201      	str	r2, [sp, #4]
 801302e:	9a02      	ldr	r2, [sp, #8]
 8013030:	9303      	str	r3, [sp, #12]
 8013032:	429a      	cmp	r2, r3
 8013034:	d808      	bhi.n	8013048 <__multiply+0x98>
 8013036:	2f00      	cmp	r7, #0
 8013038:	dc55      	bgt.n	80130e6 <__multiply+0x136>
 801303a:	6107      	str	r7, [r0, #16]
 801303c:	b005      	add	sp, #20
 801303e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013042:	f843 2b04 	str.w	r2, [r3], #4
 8013046:	e7db      	b.n	8013000 <__multiply+0x50>
 8013048:	f8b3 a000 	ldrh.w	sl, [r3]
 801304c:	f1ba 0f00 	cmp.w	sl, #0
 8013050:	d020      	beq.n	8013094 <__multiply+0xe4>
 8013052:	f105 0e14 	add.w	lr, r5, #20
 8013056:	46b1      	mov	r9, r6
 8013058:	2200      	movs	r2, #0
 801305a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801305e:	f8d9 b000 	ldr.w	fp, [r9]
 8013062:	b2a1      	uxth	r1, r4
 8013064:	fa1f fb8b 	uxth.w	fp, fp
 8013068:	fb0a b101 	mla	r1, sl, r1, fp
 801306c:	4411      	add	r1, r2
 801306e:	f8d9 2000 	ldr.w	r2, [r9]
 8013072:	0c24      	lsrs	r4, r4, #16
 8013074:	0c12      	lsrs	r2, r2, #16
 8013076:	fb0a 2404 	mla	r4, sl, r4, r2
 801307a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801307e:	b289      	uxth	r1, r1
 8013080:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013084:	45f4      	cmp	ip, lr
 8013086:	f849 1b04 	str.w	r1, [r9], #4
 801308a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801308e:	d8e4      	bhi.n	801305a <__multiply+0xaa>
 8013090:	9901      	ldr	r1, [sp, #4]
 8013092:	5072      	str	r2, [r6, r1]
 8013094:	9a03      	ldr	r2, [sp, #12]
 8013096:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801309a:	3304      	adds	r3, #4
 801309c:	f1b9 0f00 	cmp.w	r9, #0
 80130a0:	d01f      	beq.n	80130e2 <__multiply+0x132>
 80130a2:	6834      	ldr	r4, [r6, #0]
 80130a4:	f105 0114 	add.w	r1, r5, #20
 80130a8:	46b6      	mov	lr, r6
 80130aa:	f04f 0a00 	mov.w	sl, #0
 80130ae:	880a      	ldrh	r2, [r1, #0]
 80130b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80130b4:	fb09 b202 	mla	r2, r9, r2, fp
 80130b8:	4492      	add	sl, r2
 80130ba:	b2a4      	uxth	r4, r4
 80130bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80130c0:	f84e 4b04 	str.w	r4, [lr], #4
 80130c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80130c8:	f8be 2000 	ldrh.w	r2, [lr]
 80130cc:	0c24      	lsrs	r4, r4, #16
 80130ce:	fb09 2404 	mla	r4, r9, r4, r2
 80130d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80130d6:	458c      	cmp	ip, r1
 80130d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80130dc:	d8e7      	bhi.n	80130ae <__multiply+0xfe>
 80130de:	9a01      	ldr	r2, [sp, #4]
 80130e0:	50b4      	str	r4, [r6, r2]
 80130e2:	3604      	adds	r6, #4
 80130e4:	e7a3      	b.n	801302e <__multiply+0x7e>
 80130e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d1a5      	bne.n	801303a <__multiply+0x8a>
 80130ee:	3f01      	subs	r7, #1
 80130f0:	e7a1      	b.n	8013036 <__multiply+0x86>
 80130f2:	bf00      	nop
 80130f4:	08014e93 	.word	0x08014e93
 80130f8:	08014ea4 	.word	0x08014ea4

080130fc <__pow5mult>:
 80130fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013100:	4615      	mov	r5, r2
 8013102:	f012 0203 	ands.w	r2, r2, #3
 8013106:	4606      	mov	r6, r0
 8013108:	460f      	mov	r7, r1
 801310a:	d007      	beq.n	801311c <__pow5mult+0x20>
 801310c:	4c25      	ldr	r4, [pc, #148]	; (80131a4 <__pow5mult+0xa8>)
 801310e:	3a01      	subs	r2, #1
 8013110:	2300      	movs	r3, #0
 8013112:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013116:	f7ff fe9b 	bl	8012e50 <__multadd>
 801311a:	4607      	mov	r7, r0
 801311c:	10ad      	asrs	r5, r5, #2
 801311e:	d03d      	beq.n	801319c <__pow5mult+0xa0>
 8013120:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013122:	b97c      	cbnz	r4, 8013144 <__pow5mult+0x48>
 8013124:	2010      	movs	r0, #16
 8013126:	f7ff fe29 	bl	8012d7c <malloc>
 801312a:	4602      	mov	r2, r0
 801312c:	6270      	str	r0, [r6, #36]	; 0x24
 801312e:	b928      	cbnz	r0, 801313c <__pow5mult+0x40>
 8013130:	4b1d      	ldr	r3, [pc, #116]	; (80131a8 <__pow5mult+0xac>)
 8013132:	481e      	ldr	r0, [pc, #120]	; (80131ac <__pow5mult+0xb0>)
 8013134:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013138:	f000 fa70 	bl	801361c <__assert_func>
 801313c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013140:	6004      	str	r4, [r0, #0]
 8013142:	60c4      	str	r4, [r0, #12]
 8013144:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013148:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801314c:	b94c      	cbnz	r4, 8013162 <__pow5mult+0x66>
 801314e:	f240 2171 	movw	r1, #625	; 0x271
 8013152:	4630      	mov	r0, r6
 8013154:	f7ff ff16 	bl	8012f84 <__i2b>
 8013158:	2300      	movs	r3, #0
 801315a:	f8c8 0008 	str.w	r0, [r8, #8]
 801315e:	4604      	mov	r4, r0
 8013160:	6003      	str	r3, [r0, #0]
 8013162:	f04f 0900 	mov.w	r9, #0
 8013166:	07eb      	lsls	r3, r5, #31
 8013168:	d50a      	bpl.n	8013180 <__pow5mult+0x84>
 801316a:	4639      	mov	r1, r7
 801316c:	4622      	mov	r2, r4
 801316e:	4630      	mov	r0, r6
 8013170:	f7ff ff1e 	bl	8012fb0 <__multiply>
 8013174:	4639      	mov	r1, r7
 8013176:	4680      	mov	r8, r0
 8013178:	4630      	mov	r0, r6
 801317a:	f7ff fe47 	bl	8012e0c <_Bfree>
 801317e:	4647      	mov	r7, r8
 8013180:	106d      	asrs	r5, r5, #1
 8013182:	d00b      	beq.n	801319c <__pow5mult+0xa0>
 8013184:	6820      	ldr	r0, [r4, #0]
 8013186:	b938      	cbnz	r0, 8013198 <__pow5mult+0x9c>
 8013188:	4622      	mov	r2, r4
 801318a:	4621      	mov	r1, r4
 801318c:	4630      	mov	r0, r6
 801318e:	f7ff ff0f 	bl	8012fb0 <__multiply>
 8013192:	6020      	str	r0, [r4, #0]
 8013194:	f8c0 9000 	str.w	r9, [r0]
 8013198:	4604      	mov	r4, r0
 801319a:	e7e4      	b.n	8013166 <__pow5mult+0x6a>
 801319c:	4638      	mov	r0, r7
 801319e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131a2:	bf00      	nop
 80131a4:	08014ff8 	.word	0x08014ff8
 80131a8:	08014e1d 	.word	0x08014e1d
 80131ac:	08014ea4 	.word	0x08014ea4

080131b0 <__lshift>:
 80131b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131b4:	460c      	mov	r4, r1
 80131b6:	6849      	ldr	r1, [r1, #4]
 80131b8:	6923      	ldr	r3, [r4, #16]
 80131ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80131be:	68a3      	ldr	r3, [r4, #8]
 80131c0:	4607      	mov	r7, r0
 80131c2:	4691      	mov	r9, r2
 80131c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80131c8:	f108 0601 	add.w	r6, r8, #1
 80131cc:	42b3      	cmp	r3, r6
 80131ce:	db0b      	blt.n	80131e8 <__lshift+0x38>
 80131d0:	4638      	mov	r0, r7
 80131d2:	f7ff fddb 	bl	8012d8c <_Balloc>
 80131d6:	4605      	mov	r5, r0
 80131d8:	b948      	cbnz	r0, 80131ee <__lshift+0x3e>
 80131da:	4602      	mov	r2, r0
 80131dc:	4b28      	ldr	r3, [pc, #160]	; (8013280 <__lshift+0xd0>)
 80131de:	4829      	ldr	r0, [pc, #164]	; (8013284 <__lshift+0xd4>)
 80131e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80131e4:	f000 fa1a 	bl	801361c <__assert_func>
 80131e8:	3101      	adds	r1, #1
 80131ea:	005b      	lsls	r3, r3, #1
 80131ec:	e7ee      	b.n	80131cc <__lshift+0x1c>
 80131ee:	2300      	movs	r3, #0
 80131f0:	f100 0114 	add.w	r1, r0, #20
 80131f4:	f100 0210 	add.w	r2, r0, #16
 80131f8:	4618      	mov	r0, r3
 80131fa:	4553      	cmp	r3, sl
 80131fc:	db33      	blt.n	8013266 <__lshift+0xb6>
 80131fe:	6920      	ldr	r0, [r4, #16]
 8013200:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013204:	f104 0314 	add.w	r3, r4, #20
 8013208:	f019 091f 	ands.w	r9, r9, #31
 801320c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013210:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013214:	d02b      	beq.n	801326e <__lshift+0xbe>
 8013216:	f1c9 0e20 	rsb	lr, r9, #32
 801321a:	468a      	mov	sl, r1
 801321c:	2200      	movs	r2, #0
 801321e:	6818      	ldr	r0, [r3, #0]
 8013220:	fa00 f009 	lsl.w	r0, r0, r9
 8013224:	4302      	orrs	r2, r0
 8013226:	f84a 2b04 	str.w	r2, [sl], #4
 801322a:	f853 2b04 	ldr.w	r2, [r3], #4
 801322e:	459c      	cmp	ip, r3
 8013230:	fa22 f20e 	lsr.w	r2, r2, lr
 8013234:	d8f3      	bhi.n	801321e <__lshift+0x6e>
 8013236:	ebac 0304 	sub.w	r3, ip, r4
 801323a:	3b15      	subs	r3, #21
 801323c:	f023 0303 	bic.w	r3, r3, #3
 8013240:	3304      	adds	r3, #4
 8013242:	f104 0015 	add.w	r0, r4, #21
 8013246:	4584      	cmp	ip, r0
 8013248:	bf38      	it	cc
 801324a:	2304      	movcc	r3, #4
 801324c:	50ca      	str	r2, [r1, r3]
 801324e:	b10a      	cbz	r2, 8013254 <__lshift+0xa4>
 8013250:	f108 0602 	add.w	r6, r8, #2
 8013254:	3e01      	subs	r6, #1
 8013256:	4638      	mov	r0, r7
 8013258:	612e      	str	r6, [r5, #16]
 801325a:	4621      	mov	r1, r4
 801325c:	f7ff fdd6 	bl	8012e0c <_Bfree>
 8013260:	4628      	mov	r0, r5
 8013262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013266:	f842 0f04 	str.w	r0, [r2, #4]!
 801326a:	3301      	adds	r3, #1
 801326c:	e7c5      	b.n	80131fa <__lshift+0x4a>
 801326e:	3904      	subs	r1, #4
 8013270:	f853 2b04 	ldr.w	r2, [r3], #4
 8013274:	f841 2f04 	str.w	r2, [r1, #4]!
 8013278:	459c      	cmp	ip, r3
 801327a:	d8f9      	bhi.n	8013270 <__lshift+0xc0>
 801327c:	e7ea      	b.n	8013254 <__lshift+0xa4>
 801327e:	bf00      	nop
 8013280:	08014e93 	.word	0x08014e93
 8013284:	08014ea4 	.word	0x08014ea4

08013288 <__mcmp>:
 8013288:	b530      	push	{r4, r5, lr}
 801328a:	6902      	ldr	r2, [r0, #16]
 801328c:	690c      	ldr	r4, [r1, #16]
 801328e:	1b12      	subs	r2, r2, r4
 8013290:	d10e      	bne.n	80132b0 <__mcmp+0x28>
 8013292:	f100 0314 	add.w	r3, r0, #20
 8013296:	3114      	adds	r1, #20
 8013298:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801329c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80132a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80132a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80132a8:	42a5      	cmp	r5, r4
 80132aa:	d003      	beq.n	80132b4 <__mcmp+0x2c>
 80132ac:	d305      	bcc.n	80132ba <__mcmp+0x32>
 80132ae:	2201      	movs	r2, #1
 80132b0:	4610      	mov	r0, r2
 80132b2:	bd30      	pop	{r4, r5, pc}
 80132b4:	4283      	cmp	r3, r0
 80132b6:	d3f3      	bcc.n	80132a0 <__mcmp+0x18>
 80132b8:	e7fa      	b.n	80132b0 <__mcmp+0x28>
 80132ba:	f04f 32ff 	mov.w	r2, #4294967295
 80132be:	e7f7      	b.n	80132b0 <__mcmp+0x28>

080132c0 <__mdiff>:
 80132c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132c4:	460c      	mov	r4, r1
 80132c6:	4606      	mov	r6, r0
 80132c8:	4611      	mov	r1, r2
 80132ca:	4620      	mov	r0, r4
 80132cc:	4617      	mov	r7, r2
 80132ce:	f7ff ffdb 	bl	8013288 <__mcmp>
 80132d2:	1e05      	subs	r5, r0, #0
 80132d4:	d110      	bne.n	80132f8 <__mdiff+0x38>
 80132d6:	4629      	mov	r1, r5
 80132d8:	4630      	mov	r0, r6
 80132da:	f7ff fd57 	bl	8012d8c <_Balloc>
 80132de:	b930      	cbnz	r0, 80132ee <__mdiff+0x2e>
 80132e0:	4b39      	ldr	r3, [pc, #228]	; (80133c8 <__mdiff+0x108>)
 80132e2:	4602      	mov	r2, r0
 80132e4:	f240 2132 	movw	r1, #562	; 0x232
 80132e8:	4838      	ldr	r0, [pc, #224]	; (80133cc <__mdiff+0x10c>)
 80132ea:	f000 f997 	bl	801361c <__assert_func>
 80132ee:	2301      	movs	r3, #1
 80132f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f8:	bfa4      	itt	ge
 80132fa:	463b      	movge	r3, r7
 80132fc:	4627      	movge	r7, r4
 80132fe:	4630      	mov	r0, r6
 8013300:	6879      	ldr	r1, [r7, #4]
 8013302:	bfa6      	itte	ge
 8013304:	461c      	movge	r4, r3
 8013306:	2500      	movge	r5, #0
 8013308:	2501      	movlt	r5, #1
 801330a:	f7ff fd3f 	bl	8012d8c <_Balloc>
 801330e:	b920      	cbnz	r0, 801331a <__mdiff+0x5a>
 8013310:	4b2d      	ldr	r3, [pc, #180]	; (80133c8 <__mdiff+0x108>)
 8013312:	4602      	mov	r2, r0
 8013314:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013318:	e7e6      	b.n	80132e8 <__mdiff+0x28>
 801331a:	693e      	ldr	r6, [r7, #16]
 801331c:	60c5      	str	r5, [r0, #12]
 801331e:	6925      	ldr	r5, [r4, #16]
 8013320:	f107 0114 	add.w	r1, r7, #20
 8013324:	f104 0914 	add.w	r9, r4, #20
 8013328:	f100 0e14 	add.w	lr, r0, #20
 801332c:	f107 0210 	add.w	r2, r7, #16
 8013330:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013334:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013338:	46f2      	mov	sl, lr
 801333a:	2700      	movs	r7, #0
 801333c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013340:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013344:	fa1f f883 	uxth.w	r8, r3
 8013348:	fa17 f78b 	uxtah	r7, r7, fp
 801334c:	0c1b      	lsrs	r3, r3, #16
 801334e:	eba7 0808 	sub.w	r8, r7, r8
 8013352:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013356:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801335a:	fa1f f888 	uxth.w	r8, r8
 801335e:	141f      	asrs	r7, r3, #16
 8013360:	454d      	cmp	r5, r9
 8013362:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013366:	f84a 3b04 	str.w	r3, [sl], #4
 801336a:	d8e7      	bhi.n	801333c <__mdiff+0x7c>
 801336c:	1b2b      	subs	r3, r5, r4
 801336e:	3b15      	subs	r3, #21
 8013370:	f023 0303 	bic.w	r3, r3, #3
 8013374:	3304      	adds	r3, #4
 8013376:	3415      	adds	r4, #21
 8013378:	42a5      	cmp	r5, r4
 801337a:	bf38      	it	cc
 801337c:	2304      	movcc	r3, #4
 801337e:	4419      	add	r1, r3
 8013380:	4473      	add	r3, lr
 8013382:	469e      	mov	lr, r3
 8013384:	460d      	mov	r5, r1
 8013386:	4565      	cmp	r5, ip
 8013388:	d30e      	bcc.n	80133a8 <__mdiff+0xe8>
 801338a:	f10c 0203 	add.w	r2, ip, #3
 801338e:	1a52      	subs	r2, r2, r1
 8013390:	f022 0203 	bic.w	r2, r2, #3
 8013394:	3903      	subs	r1, #3
 8013396:	458c      	cmp	ip, r1
 8013398:	bf38      	it	cc
 801339a:	2200      	movcc	r2, #0
 801339c:	441a      	add	r2, r3
 801339e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80133a2:	b17b      	cbz	r3, 80133c4 <__mdiff+0x104>
 80133a4:	6106      	str	r6, [r0, #16]
 80133a6:	e7a5      	b.n	80132f4 <__mdiff+0x34>
 80133a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80133ac:	fa17 f488 	uxtah	r4, r7, r8
 80133b0:	1422      	asrs	r2, r4, #16
 80133b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80133b6:	b2a4      	uxth	r4, r4
 80133b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80133bc:	f84e 4b04 	str.w	r4, [lr], #4
 80133c0:	1417      	asrs	r7, r2, #16
 80133c2:	e7e0      	b.n	8013386 <__mdiff+0xc6>
 80133c4:	3e01      	subs	r6, #1
 80133c6:	e7ea      	b.n	801339e <__mdiff+0xde>
 80133c8:	08014e93 	.word	0x08014e93
 80133cc:	08014ea4 	.word	0x08014ea4

080133d0 <__d2b>:
 80133d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133d4:	4689      	mov	r9, r1
 80133d6:	2101      	movs	r1, #1
 80133d8:	ec57 6b10 	vmov	r6, r7, d0
 80133dc:	4690      	mov	r8, r2
 80133de:	f7ff fcd5 	bl	8012d8c <_Balloc>
 80133e2:	4604      	mov	r4, r0
 80133e4:	b930      	cbnz	r0, 80133f4 <__d2b+0x24>
 80133e6:	4602      	mov	r2, r0
 80133e8:	4b25      	ldr	r3, [pc, #148]	; (8013480 <__d2b+0xb0>)
 80133ea:	4826      	ldr	r0, [pc, #152]	; (8013484 <__d2b+0xb4>)
 80133ec:	f240 310a 	movw	r1, #778	; 0x30a
 80133f0:	f000 f914 	bl	801361c <__assert_func>
 80133f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80133f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80133fc:	bb35      	cbnz	r5, 801344c <__d2b+0x7c>
 80133fe:	2e00      	cmp	r6, #0
 8013400:	9301      	str	r3, [sp, #4]
 8013402:	d028      	beq.n	8013456 <__d2b+0x86>
 8013404:	4668      	mov	r0, sp
 8013406:	9600      	str	r6, [sp, #0]
 8013408:	f7ff fd8c 	bl	8012f24 <__lo0bits>
 801340c:	9900      	ldr	r1, [sp, #0]
 801340e:	b300      	cbz	r0, 8013452 <__d2b+0x82>
 8013410:	9a01      	ldr	r2, [sp, #4]
 8013412:	f1c0 0320 	rsb	r3, r0, #32
 8013416:	fa02 f303 	lsl.w	r3, r2, r3
 801341a:	430b      	orrs	r3, r1
 801341c:	40c2      	lsrs	r2, r0
 801341e:	6163      	str	r3, [r4, #20]
 8013420:	9201      	str	r2, [sp, #4]
 8013422:	9b01      	ldr	r3, [sp, #4]
 8013424:	61a3      	str	r3, [r4, #24]
 8013426:	2b00      	cmp	r3, #0
 8013428:	bf14      	ite	ne
 801342a:	2202      	movne	r2, #2
 801342c:	2201      	moveq	r2, #1
 801342e:	6122      	str	r2, [r4, #16]
 8013430:	b1d5      	cbz	r5, 8013468 <__d2b+0x98>
 8013432:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013436:	4405      	add	r5, r0
 8013438:	f8c9 5000 	str.w	r5, [r9]
 801343c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013440:	f8c8 0000 	str.w	r0, [r8]
 8013444:	4620      	mov	r0, r4
 8013446:	b003      	add	sp, #12
 8013448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801344c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013450:	e7d5      	b.n	80133fe <__d2b+0x2e>
 8013452:	6161      	str	r1, [r4, #20]
 8013454:	e7e5      	b.n	8013422 <__d2b+0x52>
 8013456:	a801      	add	r0, sp, #4
 8013458:	f7ff fd64 	bl	8012f24 <__lo0bits>
 801345c:	9b01      	ldr	r3, [sp, #4]
 801345e:	6163      	str	r3, [r4, #20]
 8013460:	2201      	movs	r2, #1
 8013462:	6122      	str	r2, [r4, #16]
 8013464:	3020      	adds	r0, #32
 8013466:	e7e3      	b.n	8013430 <__d2b+0x60>
 8013468:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801346c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013470:	f8c9 0000 	str.w	r0, [r9]
 8013474:	6918      	ldr	r0, [r3, #16]
 8013476:	f7ff fd35 	bl	8012ee4 <__hi0bits>
 801347a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801347e:	e7df      	b.n	8013440 <__d2b+0x70>
 8013480:	08014e93 	.word	0x08014e93
 8013484:	08014ea4 	.word	0x08014ea4

08013488 <_calloc_r>:
 8013488:	b513      	push	{r0, r1, r4, lr}
 801348a:	434a      	muls	r2, r1
 801348c:	4611      	mov	r1, r2
 801348e:	9201      	str	r2, [sp, #4]
 8013490:	f000 f85a 	bl	8013548 <_malloc_r>
 8013494:	4604      	mov	r4, r0
 8013496:	b118      	cbz	r0, 80134a0 <_calloc_r+0x18>
 8013498:	9a01      	ldr	r2, [sp, #4]
 801349a:	2100      	movs	r1, #0
 801349c:	f7fe fa0e 	bl	80118bc <memset>
 80134a0:	4620      	mov	r0, r4
 80134a2:	b002      	add	sp, #8
 80134a4:	bd10      	pop	{r4, pc}
	...

080134a8 <_free_r>:
 80134a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134aa:	2900      	cmp	r1, #0
 80134ac:	d048      	beq.n	8013540 <_free_r+0x98>
 80134ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134b2:	9001      	str	r0, [sp, #4]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	f1a1 0404 	sub.w	r4, r1, #4
 80134ba:	bfb8      	it	lt
 80134bc:	18e4      	addlt	r4, r4, r3
 80134be:	f000 f8ef 	bl	80136a0 <__malloc_lock>
 80134c2:	4a20      	ldr	r2, [pc, #128]	; (8013544 <_free_r+0x9c>)
 80134c4:	9801      	ldr	r0, [sp, #4]
 80134c6:	6813      	ldr	r3, [r2, #0]
 80134c8:	4615      	mov	r5, r2
 80134ca:	b933      	cbnz	r3, 80134da <_free_r+0x32>
 80134cc:	6063      	str	r3, [r4, #4]
 80134ce:	6014      	str	r4, [r2, #0]
 80134d0:	b003      	add	sp, #12
 80134d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134d6:	f000 b8e9 	b.w	80136ac <__malloc_unlock>
 80134da:	42a3      	cmp	r3, r4
 80134dc:	d90b      	bls.n	80134f6 <_free_r+0x4e>
 80134de:	6821      	ldr	r1, [r4, #0]
 80134e0:	1862      	adds	r2, r4, r1
 80134e2:	4293      	cmp	r3, r2
 80134e4:	bf04      	itt	eq
 80134e6:	681a      	ldreq	r2, [r3, #0]
 80134e8:	685b      	ldreq	r3, [r3, #4]
 80134ea:	6063      	str	r3, [r4, #4]
 80134ec:	bf04      	itt	eq
 80134ee:	1852      	addeq	r2, r2, r1
 80134f0:	6022      	streq	r2, [r4, #0]
 80134f2:	602c      	str	r4, [r5, #0]
 80134f4:	e7ec      	b.n	80134d0 <_free_r+0x28>
 80134f6:	461a      	mov	r2, r3
 80134f8:	685b      	ldr	r3, [r3, #4]
 80134fa:	b10b      	cbz	r3, 8013500 <_free_r+0x58>
 80134fc:	42a3      	cmp	r3, r4
 80134fe:	d9fa      	bls.n	80134f6 <_free_r+0x4e>
 8013500:	6811      	ldr	r1, [r2, #0]
 8013502:	1855      	adds	r5, r2, r1
 8013504:	42a5      	cmp	r5, r4
 8013506:	d10b      	bne.n	8013520 <_free_r+0x78>
 8013508:	6824      	ldr	r4, [r4, #0]
 801350a:	4421      	add	r1, r4
 801350c:	1854      	adds	r4, r2, r1
 801350e:	42a3      	cmp	r3, r4
 8013510:	6011      	str	r1, [r2, #0]
 8013512:	d1dd      	bne.n	80134d0 <_free_r+0x28>
 8013514:	681c      	ldr	r4, [r3, #0]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	6053      	str	r3, [r2, #4]
 801351a:	4421      	add	r1, r4
 801351c:	6011      	str	r1, [r2, #0]
 801351e:	e7d7      	b.n	80134d0 <_free_r+0x28>
 8013520:	d902      	bls.n	8013528 <_free_r+0x80>
 8013522:	230c      	movs	r3, #12
 8013524:	6003      	str	r3, [r0, #0]
 8013526:	e7d3      	b.n	80134d0 <_free_r+0x28>
 8013528:	6825      	ldr	r5, [r4, #0]
 801352a:	1961      	adds	r1, r4, r5
 801352c:	428b      	cmp	r3, r1
 801352e:	bf04      	itt	eq
 8013530:	6819      	ldreq	r1, [r3, #0]
 8013532:	685b      	ldreq	r3, [r3, #4]
 8013534:	6063      	str	r3, [r4, #4]
 8013536:	bf04      	itt	eq
 8013538:	1949      	addeq	r1, r1, r5
 801353a:	6021      	streq	r1, [r4, #0]
 801353c:	6054      	str	r4, [r2, #4]
 801353e:	e7c7      	b.n	80134d0 <_free_r+0x28>
 8013540:	b003      	add	sp, #12
 8013542:	bd30      	pop	{r4, r5, pc}
 8013544:	2400026c 	.word	0x2400026c

08013548 <_malloc_r>:
 8013548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801354a:	1ccd      	adds	r5, r1, #3
 801354c:	f025 0503 	bic.w	r5, r5, #3
 8013550:	3508      	adds	r5, #8
 8013552:	2d0c      	cmp	r5, #12
 8013554:	bf38      	it	cc
 8013556:	250c      	movcc	r5, #12
 8013558:	2d00      	cmp	r5, #0
 801355a:	4606      	mov	r6, r0
 801355c:	db01      	blt.n	8013562 <_malloc_r+0x1a>
 801355e:	42a9      	cmp	r1, r5
 8013560:	d903      	bls.n	801356a <_malloc_r+0x22>
 8013562:	230c      	movs	r3, #12
 8013564:	6033      	str	r3, [r6, #0]
 8013566:	2000      	movs	r0, #0
 8013568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801356a:	f000 f899 	bl	80136a0 <__malloc_lock>
 801356e:	4921      	ldr	r1, [pc, #132]	; (80135f4 <_malloc_r+0xac>)
 8013570:	680a      	ldr	r2, [r1, #0]
 8013572:	4614      	mov	r4, r2
 8013574:	b99c      	cbnz	r4, 801359e <_malloc_r+0x56>
 8013576:	4f20      	ldr	r7, [pc, #128]	; (80135f8 <_malloc_r+0xb0>)
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	b923      	cbnz	r3, 8013586 <_malloc_r+0x3e>
 801357c:	4621      	mov	r1, r4
 801357e:	4630      	mov	r0, r6
 8013580:	f000 f83c 	bl	80135fc <_sbrk_r>
 8013584:	6038      	str	r0, [r7, #0]
 8013586:	4629      	mov	r1, r5
 8013588:	4630      	mov	r0, r6
 801358a:	f000 f837 	bl	80135fc <_sbrk_r>
 801358e:	1c43      	adds	r3, r0, #1
 8013590:	d123      	bne.n	80135da <_malloc_r+0x92>
 8013592:	230c      	movs	r3, #12
 8013594:	6033      	str	r3, [r6, #0]
 8013596:	4630      	mov	r0, r6
 8013598:	f000 f888 	bl	80136ac <__malloc_unlock>
 801359c:	e7e3      	b.n	8013566 <_malloc_r+0x1e>
 801359e:	6823      	ldr	r3, [r4, #0]
 80135a0:	1b5b      	subs	r3, r3, r5
 80135a2:	d417      	bmi.n	80135d4 <_malloc_r+0x8c>
 80135a4:	2b0b      	cmp	r3, #11
 80135a6:	d903      	bls.n	80135b0 <_malloc_r+0x68>
 80135a8:	6023      	str	r3, [r4, #0]
 80135aa:	441c      	add	r4, r3
 80135ac:	6025      	str	r5, [r4, #0]
 80135ae:	e004      	b.n	80135ba <_malloc_r+0x72>
 80135b0:	6863      	ldr	r3, [r4, #4]
 80135b2:	42a2      	cmp	r2, r4
 80135b4:	bf0c      	ite	eq
 80135b6:	600b      	streq	r3, [r1, #0]
 80135b8:	6053      	strne	r3, [r2, #4]
 80135ba:	4630      	mov	r0, r6
 80135bc:	f000 f876 	bl	80136ac <__malloc_unlock>
 80135c0:	f104 000b 	add.w	r0, r4, #11
 80135c4:	1d23      	adds	r3, r4, #4
 80135c6:	f020 0007 	bic.w	r0, r0, #7
 80135ca:	1ac2      	subs	r2, r0, r3
 80135cc:	d0cc      	beq.n	8013568 <_malloc_r+0x20>
 80135ce:	1a1b      	subs	r3, r3, r0
 80135d0:	50a3      	str	r3, [r4, r2]
 80135d2:	e7c9      	b.n	8013568 <_malloc_r+0x20>
 80135d4:	4622      	mov	r2, r4
 80135d6:	6864      	ldr	r4, [r4, #4]
 80135d8:	e7cc      	b.n	8013574 <_malloc_r+0x2c>
 80135da:	1cc4      	adds	r4, r0, #3
 80135dc:	f024 0403 	bic.w	r4, r4, #3
 80135e0:	42a0      	cmp	r0, r4
 80135e2:	d0e3      	beq.n	80135ac <_malloc_r+0x64>
 80135e4:	1a21      	subs	r1, r4, r0
 80135e6:	4630      	mov	r0, r6
 80135e8:	f000 f808 	bl	80135fc <_sbrk_r>
 80135ec:	3001      	adds	r0, #1
 80135ee:	d1dd      	bne.n	80135ac <_malloc_r+0x64>
 80135f0:	e7cf      	b.n	8013592 <_malloc_r+0x4a>
 80135f2:	bf00      	nop
 80135f4:	2400026c 	.word	0x2400026c
 80135f8:	24000270 	.word	0x24000270

080135fc <_sbrk_r>:
 80135fc:	b538      	push	{r3, r4, r5, lr}
 80135fe:	4d06      	ldr	r5, [pc, #24]	; (8013618 <_sbrk_r+0x1c>)
 8013600:	2300      	movs	r3, #0
 8013602:	4604      	mov	r4, r0
 8013604:	4608      	mov	r0, r1
 8013606:	602b      	str	r3, [r5, #0]
 8013608:	f7f3 fe4c 	bl	80072a4 <_sbrk>
 801360c:	1c43      	adds	r3, r0, #1
 801360e:	d102      	bne.n	8013616 <_sbrk_r+0x1a>
 8013610:	682b      	ldr	r3, [r5, #0]
 8013612:	b103      	cbz	r3, 8013616 <_sbrk_r+0x1a>
 8013614:	6023      	str	r3, [r4, #0]
 8013616:	bd38      	pop	{r3, r4, r5, pc}
 8013618:	24000e60 	.word	0x24000e60

0801361c <__assert_func>:
 801361c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801361e:	4614      	mov	r4, r2
 8013620:	461a      	mov	r2, r3
 8013622:	4b09      	ldr	r3, [pc, #36]	; (8013648 <__assert_func+0x2c>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	4605      	mov	r5, r0
 8013628:	68d8      	ldr	r0, [r3, #12]
 801362a:	b14c      	cbz	r4, 8013640 <__assert_func+0x24>
 801362c:	4b07      	ldr	r3, [pc, #28]	; (801364c <__assert_func+0x30>)
 801362e:	9100      	str	r1, [sp, #0]
 8013630:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013634:	4906      	ldr	r1, [pc, #24]	; (8013650 <__assert_func+0x34>)
 8013636:	462b      	mov	r3, r5
 8013638:	f000 f80e 	bl	8013658 <fiprintf>
 801363c:	f000 fa64 	bl	8013b08 <abort>
 8013640:	4b04      	ldr	r3, [pc, #16]	; (8013654 <__assert_func+0x38>)
 8013642:	461c      	mov	r4, r3
 8013644:	e7f3      	b.n	801362e <__assert_func+0x12>
 8013646:	bf00      	nop
 8013648:	24000024 	.word	0x24000024
 801364c:	08015004 	.word	0x08015004
 8013650:	08015011 	.word	0x08015011
 8013654:	0801503f 	.word	0x0801503f

08013658 <fiprintf>:
 8013658:	b40e      	push	{r1, r2, r3}
 801365a:	b503      	push	{r0, r1, lr}
 801365c:	4601      	mov	r1, r0
 801365e:	ab03      	add	r3, sp, #12
 8013660:	4805      	ldr	r0, [pc, #20]	; (8013678 <fiprintf+0x20>)
 8013662:	f853 2b04 	ldr.w	r2, [r3], #4
 8013666:	6800      	ldr	r0, [r0, #0]
 8013668:	9301      	str	r3, [sp, #4]
 801366a:	f000 f84f 	bl	801370c <_vfiprintf_r>
 801366e:	b002      	add	sp, #8
 8013670:	f85d eb04 	ldr.w	lr, [sp], #4
 8013674:	b003      	add	sp, #12
 8013676:	4770      	bx	lr
 8013678:	24000024 	.word	0x24000024

0801367c <__ascii_mbtowc>:
 801367c:	b082      	sub	sp, #8
 801367e:	b901      	cbnz	r1, 8013682 <__ascii_mbtowc+0x6>
 8013680:	a901      	add	r1, sp, #4
 8013682:	b142      	cbz	r2, 8013696 <__ascii_mbtowc+0x1a>
 8013684:	b14b      	cbz	r3, 801369a <__ascii_mbtowc+0x1e>
 8013686:	7813      	ldrb	r3, [r2, #0]
 8013688:	600b      	str	r3, [r1, #0]
 801368a:	7812      	ldrb	r2, [r2, #0]
 801368c:	1e10      	subs	r0, r2, #0
 801368e:	bf18      	it	ne
 8013690:	2001      	movne	r0, #1
 8013692:	b002      	add	sp, #8
 8013694:	4770      	bx	lr
 8013696:	4610      	mov	r0, r2
 8013698:	e7fb      	b.n	8013692 <__ascii_mbtowc+0x16>
 801369a:	f06f 0001 	mvn.w	r0, #1
 801369e:	e7f8      	b.n	8013692 <__ascii_mbtowc+0x16>

080136a0 <__malloc_lock>:
 80136a0:	4801      	ldr	r0, [pc, #4]	; (80136a8 <__malloc_lock+0x8>)
 80136a2:	f000 bbf1 	b.w	8013e88 <__retarget_lock_acquire_recursive>
 80136a6:	bf00      	nop
 80136a8:	24000e68 	.word	0x24000e68

080136ac <__malloc_unlock>:
 80136ac:	4801      	ldr	r0, [pc, #4]	; (80136b4 <__malloc_unlock+0x8>)
 80136ae:	f000 bbec 	b.w	8013e8a <__retarget_lock_release_recursive>
 80136b2:	bf00      	nop
 80136b4:	24000e68 	.word	0x24000e68

080136b8 <__sfputc_r>:
 80136b8:	6893      	ldr	r3, [r2, #8]
 80136ba:	3b01      	subs	r3, #1
 80136bc:	2b00      	cmp	r3, #0
 80136be:	b410      	push	{r4}
 80136c0:	6093      	str	r3, [r2, #8]
 80136c2:	da08      	bge.n	80136d6 <__sfputc_r+0x1e>
 80136c4:	6994      	ldr	r4, [r2, #24]
 80136c6:	42a3      	cmp	r3, r4
 80136c8:	db01      	blt.n	80136ce <__sfputc_r+0x16>
 80136ca:	290a      	cmp	r1, #10
 80136cc:	d103      	bne.n	80136d6 <__sfputc_r+0x1e>
 80136ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136d2:	f000 b94b 	b.w	801396c <__swbuf_r>
 80136d6:	6813      	ldr	r3, [r2, #0]
 80136d8:	1c58      	adds	r0, r3, #1
 80136da:	6010      	str	r0, [r2, #0]
 80136dc:	7019      	strb	r1, [r3, #0]
 80136de:	4608      	mov	r0, r1
 80136e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136e4:	4770      	bx	lr

080136e6 <__sfputs_r>:
 80136e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136e8:	4606      	mov	r6, r0
 80136ea:	460f      	mov	r7, r1
 80136ec:	4614      	mov	r4, r2
 80136ee:	18d5      	adds	r5, r2, r3
 80136f0:	42ac      	cmp	r4, r5
 80136f2:	d101      	bne.n	80136f8 <__sfputs_r+0x12>
 80136f4:	2000      	movs	r0, #0
 80136f6:	e007      	b.n	8013708 <__sfputs_r+0x22>
 80136f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136fc:	463a      	mov	r2, r7
 80136fe:	4630      	mov	r0, r6
 8013700:	f7ff ffda 	bl	80136b8 <__sfputc_r>
 8013704:	1c43      	adds	r3, r0, #1
 8013706:	d1f3      	bne.n	80136f0 <__sfputs_r+0xa>
 8013708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801370c <_vfiprintf_r>:
 801370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013710:	460d      	mov	r5, r1
 8013712:	b09d      	sub	sp, #116	; 0x74
 8013714:	4614      	mov	r4, r2
 8013716:	4698      	mov	r8, r3
 8013718:	4606      	mov	r6, r0
 801371a:	b118      	cbz	r0, 8013724 <_vfiprintf_r+0x18>
 801371c:	6983      	ldr	r3, [r0, #24]
 801371e:	b90b      	cbnz	r3, 8013724 <_vfiprintf_r+0x18>
 8013720:	f000 fb14 	bl	8013d4c <__sinit>
 8013724:	4b89      	ldr	r3, [pc, #548]	; (801394c <_vfiprintf_r+0x240>)
 8013726:	429d      	cmp	r5, r3
 8013728:	d11b      	bne.n	8013762 <_vfiprintf_r+0x56>
 801372a:	6875      	ldr	r5, [r6, #4]
 801372c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801372e:	07d9      	lsls	r1, r3, #31
 8013730:	d405      	bmi.n	801373e <_vfiprintf_r+0x32>
 8013732:	89ab      	ldrh	r3, [r5, #12]
 8013734:	059a      	lsls	r2, r3, #22
 8013736:	d402      	bmi.n	801373e <_vfiprintf_r+0x32>
 8013738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801373a:	f000 fba5 	bl	8013e88 <__retarget_lock_acquire_recursive>
 801373e:	89ab      	ldrh	r3, [r5, #12]
 8013740:	071b      	lsls	r3, r3, #28
 8013742:	d501      	bpl.n	8013748 <_vfiprintf_r+0x3c>
 8013744:	692b      	ldr	r3, [r5, #16]
 8013746:	b9eb      	cbnz	r3, 8013784 <_vfiprintf_r+0x78>
 8013748:	4629      	mov	r1, r5
 801374a:	4630      	mov	r0, r6
 801374c:	f000 f96e 	bl	8013a2c <__swsetup_r>
 8013750:	b1c0      	cbz	r0, 8013784 <_vfiprintf_r+0x78>
 8013752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013754:	07dc      	lsls	r4, r3, #31
 8013756:	d50e      	bpl.n	8013776 <_vfiprintf_r+0x6a>
 8013758:	f04f 30ff 	mov.w	r0, #4294967295
 801375c:	b01d      	add	sp, #116	; 0x74
 801375e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013762:	4b7b      	ldr	r3, [pc, #492]	; (8013950 <_vfiprintf_r+0x244>)
 8013764:	429d      	cmp	r5, r3
 8013766:	d101      	bne.n	801376c <_vfiprintf_r+0x60>
 8013768:	68b5      	ldr	r5, [r6, #8]
 801376a:	e7df      	b.n	801372c <_vfiprintf_r+0x20>
 801376c:	4b79      	ldr	r3, [pc, #484]	; (8013954 <_vfiprintf_r+0x248>)
 801376e:	429d      	cmp	r5, r3
 8013770:	bf08      	it	eq
 8013772:	68f5      	ldreq	r5, [r6, #12]
 8013774:	e7da      	b.n	801372c <_vfiprintf_r+0x20>
 8013776:	89ab      	ldrh	r3, [r5, #12]
 8013778:	0598      	lsls	r0, r3, #22
 801377a:	d4ed      	bmi.n	8013758 <_vfiprintf_r+0x4c>
 801377c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801377e:	f000 fb84 	bl	8013e8a <__retarget_lock_release_recursive>
 8013782:	e7e9      	b.n	8013758 <_vfiprintf_r+0x4c>
 8013784:	2300      	movs	r3, #0
 8013786:	9309      	str	r3, [sp, #36]	; 0x24
 8013788:	2320      	movs	r3, #32
 801378a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801378e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013792:	2330      	movs	r3, #48	; 0x30
 8013794:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013958 <_vfiprintf_r+0x24c>
 8013798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801379c:	f04f 0901 	mov.w	r9, #1
 80137a0:	4623      	mov	r3, r4
 80137a2:	469a      	mov	sl, r3
 80137a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137a8:	b10a      	cbz	r2, 80137ae <_vfiprintf_r+0xa2>
 80137aa:	2a25      	cmp	r2, #37	; 0x25
 80137ac:	d1f9      	bne.n	80137a2 <_vfiprintf_r+0x96>
 80137ae:	ebba 0b04 	subs.w	fp, sl, r4
 80137b2:	d00b      	beq.n	80137cc <_vfiprintf_r+0xc0>
 80137b4:	465b      	mov	r3, fp
 80137b6:	4622      	mov	r2, r4
 80137b8:	4629      	mov	r1, r5
 80137ba:	4630      	mov	r0, r6
 80137bc:	f7ff ff93 	bl	80136e6 <__sfputs_r>
 80137c0:	3001      	adds	r0, #1
 80137c2:	f000 80aa 	beq.w	801391a <_vfiprintf_r+0x20e>
 80137c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137c8:	445a      	add	r2, fp
 80137ca:	9209      	str	r2, [sp, #36]	; 0x24
 80137cc:	f89a 3000 	ldrb.w	r3, [sl]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f000 80a2 	beq.w	801391a <_vfiprintf_r+0x20e>
 80137d6:	2300      	movs	r3, #0
 80137d8:	f04f 32ff 	mov.w	r2, #4294967295
 80137dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137e0:	f10a 0a01 	add.w	sl, sl, #1
 80137e4:	9304      	str	r3, [sp, #16]
 80137e6:	9307      	str	r3, [sp, #28]
 80137e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137ec:	931a      	str	r3, [sp, #104]	; 0x68
 80137ee:	4654      	mov	r4, sl
 80137f0:	2205      	movs	r2, #5
 80137f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137f6:	4858      	ldr	r0, [pc, #352]	; (8013958 <_vfiprintf_r+0x24c>)
 80137f8:	f7ec fd92 	bl	8000320 <memchr>
 80137fc:	9a04      	ldr	r2, [sp, #16]
 80137fe:	b9d8      	cbnz	r0, 8013838 <_vfiprintf_r+0x12c>
 8013800:	06d1      	lsls	r1, r2, #27
 8013802:	bf44      	itt	mi
 8013804:	2320      	movmi	r3, #32
 8013806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801380a:	0713      	lsls	r3, r2, #28
 801380c:	bf44      	itt	mi
 801380e:	232b      	movmi	r3, #43	; 0x2b
 8013810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013814:	f89a 3000 	ldrb.w	r3, [sl]
 8013818:	2b2a      	cmp	r3, #42	; 0x2a
 801381a:	d015      	beq.n	8013848 <_vfiprintf_r+0x13c>
 801381c:	9a07      	ldr	r2, [sp, #28]
 801381e:	4654      	mov	r4, sl
 8013820:	2000      	movs	r0, #0
 8013822:	f04f 0c0a 	mov.w	ip, #10
 8013826:	4621      	mov	r1, r4
 8013828:	f811 3b01 	ldrb.w	r3, [r1], #1
 801382c:	3b30      	subs	r3, #48	; 0x30
 801382e:	2b09      	cmp	r3, #9
 8013830:	d94e      	bls.n	80138d0 <_vfiprintf_r+0x1c4>
 8013832:	b1b0      	cbz	r0, 8013862 <_vfiprintf_r+0x156>
 8013834:	9207      	str	r2, [sp, #28]
 8013836:	e014      	b.n	8013862 <_vfiprintf_r+0x156>
 8013838:	eba0 0308 	sub.w	r3, r0, r8
 801383c:	fa09 f303 	lsl.w	r3, r9, r3
 8013840:	4313      	orrs	r3, r2
 8013842:	9304      	str	r3, [sp, #16]
 8013844:	46a2      	mov	sl, r4
 8013846:	e7d2      	b.n	80137ee <_vfiprintf_r+0xe2>
 8013848:	9b03      	ldr	r3, [sp, #12]
 801384a:	1d19      	adds	r1, r3, #4
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	9103      	str	r1, [sp, #12]
 8013850:	2b00      	cmp	r3, #0
 8013852:	bfbb      	ittet	lt
 8013854:	425b      	neglt	r3, r3
 8013856:	f042 0202 	orrlt.w	r2, r2, #2
 801385a:	9307      	strge	r3, [sp, #28]
 801385c:	9307      	strlt	r3, [sp, #28]
 801385e:	bfb8      	it	lt
 8013860:	9204      	strlt	r2, [sp, #16]
 8013862:	7823      	ldrb	r3, [r4, #0]
 8013864:	2b2e      	cmp	r3, #46	; 0x2e
 8013866:	d10c      	bne.n	8013882 <_vfiprintf_r+0x176>
 8013868:	7863      	ldrb	r3, [r4, #1]
 801386a:	2b2a      	cmp	r3, #42	; 0x2a
 801386c:	d135      	bne.n	80138da <_vfiprintf_r+0x1ce>
 801386e:	9b03      	ldr	r3, [sp, #12]
 8013870:	1d1a      	adds	r2, r3, #4
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	9203      	str	r2, [sp, #12]
 8013876:	2b00      	cmp	r3, #0
 8013878:	bfb8      	it	lt
 801387a:	f04f 33ff 	movlt.w	r3, #4294967295
 801387e:	3402      	adds	r4, #2
 8013880:	9305      	str	r3, [sp, #20]
 8013882:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013968 <_vfiprintf_r+0x25c>
 8013886:	7821      	ldrb	r1, [r4, #0]
 8013888:	2203      	movs	r2, #3
 801388a:	4650      	mov	r0, sl
 801388c:	f7ec fd48 	bl	8000320 <memchr>
 8013890:	b140      	cbz	r0, 80138a4 <_vfiprintf_r+0x198>
 8013892:	2340      	movs	r3, #64	; 0x40
 8013894:	eba0 000a 	sub.w	r0, r0, sl
 8013898:	fa03 f000 	lsl.w	r0, r3, r0
 801389c:	9b04      	ldr	r3, [sp, #16]
 801389e:	4303      	orrs	r3, r0
 80138a0:	3401      	adds	r4, #1
 80138a2:	9304      	str	r3, [sp, #16]
 80138a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138a8:	482c      	ldr	r0, [pc, #176]	; (801395c <_vfiprintf_r+0x250>)
 80138aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138ae:	2206      	movs	r2, #6
 80138b0:	f7ec fd36 	bl	8000320 <memchr>
 80138b4:	2800      	cmp	r0, #0
 80138b6:	d03f      	beq.n	8013938 <_vfiprintf_r+0x22c>
 80138b8:	4b29      	ldr	r3, [pc, #164]	; (8013960 <_vfiprintf_r+0x254>)
 80138ba:	bb1b      	cbnz	r3, 8013904 <_vfiprintf_r+0x1f8>
 80138bc:	9b03      	ldr	r3, [sp, #12]
 80138be:	3307      	adds	r3, #7
 80138c0:	f023 0307 	bic.w	r3, r3, #7
 80138c4:	3308      	adds	r3, #8
 80138c6:	9303      	str	r3, [sp, #12]
 80138c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138ca:	443b      	add	r3, r7
 80138cc:	9309      	str	r3, [sp, #36]	; 0x24
 80138ce:	e767      	b.n	80137a0 <_vfiprintf_r+0x94>
 80138d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80138d4:	460c      	mov	r4, r1
 80138d6:	2001      	movs	r0, #1
 80138d8:	e7a5      	b.n	8013826 <_vfiprintf_r+0x11a>
 80138da:	2300      	movs	r3, #0
 80138dc:	3401      	adds	r4, #1
 80138de:	9305      	str	r3, [sp, #20]
 80138e0:	4619      	mov	r1, r3
 80138e2:	f04f 0c0a 	mov.w	ip, #10
 80138e6:	4620      	mov	r0, r4
 80138e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138ec:	3a30      	subs	r2, #48	; 0x30
 80138ee:	2a09      	cmp	r2, #9
 80138f0:	d903      	bls.n	80138fa <_vfiprintf_r+0x1ee>
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d0c5      	beq.n	8013882 <_vfiprintf_r+0x176>
 80138f6:	9105      	str	r1, [sp, #20]
 80138f8:	e7c3      	b.n	8013882 <_vfiprintf_r+0x176>
 80138fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80138fe:	4604      	mov	r4, r0
 8013900:	2301      	movs	r3, #1
 8013902:	e7f0      	b.n	80138e6 <_vfiprintf_r+0x1da>
 8013904:	ab03      	add	r3, sp, #12
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	462a      	mov	r2, r5
 801390a:	4b16      	ldr	r3, [pc, #88]	; (8013964 <_vfiprintf_r+0x258>)
 801390c:	a904      	add	r1, sp, #16
 801390e:	4630      	mov	r0, r6
 8013910:	f7fe f86e 	bl	80119f0 <_printf_float>
 8013914:	4607      	mov	r7, r0
 8013916:	1c78      	adds	r0, r7, #1
 8013918:	d1d6      	bne.n	80138c8 <_vfiprintf_r+0x1bc>
 801391a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801391c:	07d9      	lsls	r1, r3, #31
 801391e:	d405      	bmi.n	801392c <_vfiprintf_r+0x220>
 8013920:	89ab      	ldrh	r3, [r5, #12]
 8013922:	059a      	lsls	r2, r3, #22
 8013924:	d402      	bmi.n	801392c <_vfiprintf_r+0x220>
 8013926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013928:	f000 faaf 	bl	8013e8a <__retarget_lock_release_recursive>
 801392c:	89ab      	ldrh	r3, [r5, #12]
 801392e:	065b      	lsls	r3, r3, #25
 8013930:	f53f af12 	bmi.w	8013758 <_vfiprintf_r+0x4c>
 8013934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013936:	e711      	b.n	801375c <_vfiprintf_r+0x50>
 8013938:	ab03      	add	r3, sp, #12
 801393a:	9300      	str	r3, [sp, #0]
 801393c:	462a      	mov	r2, r5
 801393e:	4b09      	ldr	r3, [pc, #36]	; (8013964 <_vfiprintf_r+0x258>)
 8013940:	a904      	add	r1, sp, #16
 8013942:	4630      	mov	r0, r6
 8013944:	f7fe fae0 	bl	8011f08 <_printf_i>
 8013948:	e7e4      	b.n	8013914 <_vfiprintf_r+0x208>
 801394a:	bf00      	nop
 801394c:	0801517c 	.word	0x0801517c
 8013950:	0801519c 	.word	0x0801519c
 8013954:	0801515c 	.word	0x0801515c
 8013958:	0801504a 	.word	0x0801504a
 801395c:	08015054 	.word	0x08015054
 8013960:	080119f1 	.word	0x080119f1
 8013964:	080136e7 	.word	0x080136e7
 8013968:	08015050 	.word	0x08015050

0801396c <__swbuf_r>:
 801396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801396e:	460e      	mov	r6, r1
 8013970:	4614      	mov	r4, r2
 8013972:	4605      	mov	r5, r0
 8013974:	b118      	cbz	r0, 801397e <__swbuf_r+0x12>
 8013976:	6983      	ldr	r3, [r0, #24]
 8013978:	b90b      	cbnz	r3, 801397e <__swbuf_r+0x12>
 801397a:	f000 f9e7 	bl	8013d4c <__sinit>
 801397e:	4b21      	ldr	r3, [pc, #132]	; (8013a04 <__swbuf_r+0x98>)
 8013980:	429c      	cmp	r4, r3
 8013982:	d12b      	bne.n	80139dc <__swbuf_r+0x70>
 8013984:	686c      	ldr	r4, [r5, #4]
 8013986:	69a3      	ldr	r3, [r4, #24]
 8013988:	60a3      	str	r3, [r4, #8]
 801398a:	89a3      	ldrh	r3, [r4, #12]
 801398c:	071a      	lsls	r2, r3, #28
 801398e:	d52f      	bpl.n	80139f0 <__swbuf_r+0x84>
 8013990:	6923      	ldr	r3, [r4, #16]
 8013992:	b36b      	cbz	r3, 80139f0 <__swbuf_r+0x84>
 8013994:	6923      	ldr	r3, [r4, #16]
 8013996:	6820      	ldr	r0, [r4, #0]
 8013998:	1ac0      	subs	r0, r0, r3
 801399a:	6963      	ldr	r3, [r4, #20]
 801399c:	b2f6      	uxtb	r6, r6
 801399e:	4283      	cmp	r3, r0
 80139a0:	4637      	mov	r7, r6
 80139a2:	dc04      	bgt.n	80139ae <__swbuf_r+0x42>
 80139a4:	4621      	mov	r1, r4
 80139a6:	4628      	mov	r0, r5
 80139a8:	f000 f93c 	bl	8013c24 <_fflush_r>
 80139ac:	bb30      	cbnz	r0, 80139fc <__swbuf_r+0x90>
 80139ae:	68a3      	ldr	r3, [r4, #8]
 80139b0:	3b01      	subs	r3, #1
 80139b2:	60a3      	str	r3, [r4, #8]
 80139b4:	6823      	ldr	r3, [r4, #0]
 80139b6:	1c5a      	adds	r2, r3, #1
 80139b8:	6022      	str	r2, [r4, #0]
 80139ba:	701e      	strb	r6, [r3, #0]
 80139bc:	6963      	ldr	r3, [r4, #20]
 80139be:	3001      	adds	r0, #1
 80139c0:	4283      	cmp	r3, r0
 80139c2:	d004      	beq.n	80139ce <__swbuf_r+0x62>
 80139c4:	89a3      	ldrh	r3, [r4, #12]
 80139c6:	07db      	lsls	r3, r3, #31
 80139c8:	d506      	bpl.n	80139d8 <__swbuf_r+0x6c>
 80139ca:	2e0a      	cmp	r6, #10
 80139cc:	d104      	bne.n	80139d8 <__swbuf_r+0x6c>
 80139ce:	4621      	mov	r1, r4
 80139d0:	4628      	mov	r0, r5
 80139d2:	f000 f927 	bl	8013c24 <_fflush_r>
 80139d6:	b988      	cbnz	r0, 80139fc <__swbuf_r+0x90>
 80139d8:	4638      	mov	r0, r7
 80139da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139dc:	4b0a      	ldr	r3, [pc, #40]	; (8013a08 <__swbuf_r+0x9c>)
 80139de:	429c      	cmp	r4, r3
 80139e0:	d101      	bne.n	80139e6 <__swbuf_r+0x7a>
 80139e2:	68ac      	ldr	r4, [r5, #8]
 80139e4:	e7cf      	b.n	8013986 <__swbuf_r+0x1a>
 80139e6:	4b09      	ldr	r3, [pc, #36]	; (8013a0c <__swbuf_r+0xa0>)
 80139e8:	429c      	cmp	r4, r3
 80139ea:	bf08      	it	eq
 80139ec:	68ec      	ldreq	r4, [r5, #12]
 80139ee:	e7ca      	b.n	8013986 <__swbuf_r+0x1a>
 80139f0:	4621      	mov	r1, r4
 80139f2:	4628      	mov	r0, r5
 80139f4:	f000 f81a 	bl	8013a2c <__swsetup_r>
 80139f8:	2800      	cmp	r0, #0
 80139fa:	d0cb      	beq.n	8013994 <__swbuf_r+0x28>
 80139fc:	f04f 37ff 	mov.w	r7, #4294967295
 8013a00:	e7ea      	b.n	80139d8 <__swbuf_r+0x6c>
 8013a02:	bf00      	nop
 8013a04:	0801517c 	.word	0x0801517c
 8013a08:	0801519c 	.word	0x0801519c
 8013a0c:	0801515c 	.word	0x0801515c

08013a10 <__ascii_wctomb>:
 8013a10:	b149      	cbz	r1, 8013a26 <__ascii_wctomb+0x16>
 8013a12:	2aff      	cmp	r2, #255	; 0xff
 8013a14:	bf85      	ittet	hi
 8013a16:	238a      	movhi	r3, #138	; 0x8a
 8013a18:	6003      	strhi	r3, [r0, #0]
 8013a1a:	700a      	strbls	r2, [r1, #0]
 8013a1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013a20:	bf98      	it	ls
 8013a22:	2001      	movls	r0, #1
 8013a24:	4770      	bx	lr
 8013a26:	4608      	mov	r0, r1
 8013a28:	4770      	bx	lr
	...

08013a2c <__swsetup_r>:
 8013a2c:	4b32      	ldr	r3, [pc, #200]	; (8013af8 <__swsetup_r+0xcc>)
 8013a2e:	b570      	push	{r4, r5, r6, lr}
 8013a30:	681d      	ldr	r5, [r3, #0]
 8013a32:	4606      	mov	r6, r0
 8013a34:	460c      	mov	r4, r1
 8013a36:	b125      	cbz	r5, 8013a42 <__swsetup_r+0x16>
 8013a38:	69ab      	ldr	r3, [r5, #24]
 8013a3a:	b913      	cbnz	r3, 8013a42 <__swsetup_r+0x16>
 8013a3c:	4628      	mov	r0, r5
 8013a3e:	f000 f985 	bl	8013d4c <__sinit>
 8013a42:	4b2e      	ldr	r3, [pc, #184]	; (8013afc <__swsetup_r+0xd0>)
 8013a44:	429c      	cmp	r4, r3
 8013a46:	d10f      	bne.n	8013a68 <__swsetup_r+0x3c>
 8013a48:	686c      	ldr	r4, [r5, #4]
 8013a4a:	89a3      	ldrh	r3, [r4, #12]
 8013a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a50:	0719      	lsls	r1, r3, #28
 8013a52:	d42c      	bmi.n	8013aae <__swsetup_r+0x82>
 8013a54:	06dd      	lsls	r5, r3, #27
 8013a56:	d411      	bmi.n	8013a7c <__swsetup_r+0x50>
 8013a58:	2309      	movs	r3, #9
 8013a5a:	6033      	str	r3, [r6, #0]
 8013a5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013a60:	81a3      	strh	r3, [r4, #12]
 8013a62:	f04f 30ff 	mov.w	r0, #4294967295
 8013a66:	e03e      	b.n	8013ae6 <__swsetup_r+0xba>
 8013a68:	4b25      	ldr	r3, [pc, #148]	; (8013b00 <__swsetup_r+0xd4>)
 8013a6a:	429c      	cmp	r4, r3
 8013a6c:	d101      	bne.n	8013a72 <__swsetup_r+0x46>
 8013a6e:	68ac      	ldr	r4, [r5, #8]
 8013a70:	e7eb      	b.n	8013a4a <__swsetup_r+0x1e>
 8013a72:	4b24      	ldr	r3, [pc, #144]	; (8013b04 <__swsetup_r+0xd8>)
 8013a74:	429c      	cmp	r4, r3
 8013a76:	bf08      	it	eq
 8013a78:	68ec      	ldreq	r4, [r5, #12]
 8013a7a:	e7e6      	b.n	8013a4a <__swsetup_r+0x1e>
 8013a7c:	0758      	lsls	r0, r3, #29
 8013a7e:	d512      	bpl.n	8013aa6 <__swsetup_r+0x7a>
 8013a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a82:	b141      	cbz	r1, 8013a96 <__swsetup_r+0x6a>
 8013a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a88:	4299      	cmp	r1, r3
 8013a8a:	d002      	beq.n	8013a92 <__swsetup_r+0x66>
 8013a8c:	4630      	mov	r0, r6
 8013a8e:	f7ff fd0b 	bl	80134a8 <_free_r>
 8013a92:	2300      	movs	r3, #0
 8013a94:	6363      	str	r3, [r4, #52]	; 0x34
 8013a96:	89a3      	ldrh	r3, [r4, #12]
 8013a98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013a9c:	81a3      	strh	r3, [r4, #12]
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	6063      	str	r3, [r4, #4]
 8013aa2:	6923      	ldr	r3, [r4, #16]
 8013aa4:	6023      	str	r3, [r4, #0]
 8013aa6:	89a3      	ldrh	r3, [r4, #12]
 8013aa8:	f043 0308 	orr.w	r3, r3, #8
 8013aac:	81a3      	strh	r3, [r4, #12]
 8013aae:	6923      	ldr	r3, [r4, #16]
 8013ab0:	b94b      	cbnz	r3, 8013ac6 <__swsetup_r+0x9a>
 8013ab2:	89a3      	ldrh	r3, [r4, #12]
 8013ab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013abc:	d003      	beq.n	8013ac6 <__swsetup_r+0x9a>
 8013abe:	4621      	mov	r1, r4
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f000 fa07 	bl	8013ed4 <__smakebuf_r>
 8013ac6:	89a0      	ldrh	r0, [r4, #12]
 8013ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013acc:	f010 0301 	ands.w	r3, r0, #1
 8013ad0:	d00a      	beq.n	8013ae8 <__swsetup_r+0xbc>
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	60a3      	str	r3, [r4, #8]
 8013ad6:	6963      	ldr	r3, [r4, #20]
 8013ad8:	425b      	negs	r3, r3
 8013ada:	61a3      	str	r3, [r4, #24]
 8013adc:	6923      	ldr	r3, [r4, #16]
 8013ade:	b943      	cbnz	r3, 8013af2 <__swsetup_r+0xc6>
 8013ae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013ae4:	d1ba      	bne.n	8013a5c <__swsetup_r+0x30>
 8013ae6:	bd70      	pop	{r4, r5, r6, pc}
 8013ae8:	0781      	lsls	r1, r0, #30
 8013aea:	bf58      	it	pl
 8013aec:	6963      	ldrpl	r3, [r4, #20]
 8013aee:	60a3      	str	r3, [r4, #8]
 8013af0:	e7f4      	b.n	8013adc <__swsetup_r+0xb0>
 8013af2:	2000      	movs	r0, #0
 8013af4:	e7f7      	b.n	8013ae6 <__swsetup_r+0xba>
 8013af6:	bf00      	nop
 8013af8:	24000024 	.word	0x24000024
 8013afc:	0801517c 	.word	0x0801517c
 8013b00:	0801519c 	.word	0x0801519c
 8013b04:	0801515c 	.word	0x0801515c

08013b08 <abort>:
 8013b08:	b508      	push	{r3, lr}
 8013b0a:	2006      	movs	r0, #6
 8013b0c:	f000 fa4a 	bl	8013fa4 <raise>
 8013b10:	2001      	movs	r0, #1
 8013b12:	f7f3 fb4f 	bl	80071b4 <_exit>
	...

08013b18 <__sflush_r>:
 8013b18:	898a      	ldrh	r2, [r1, #12]
 8013b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b1e:	4605      	mov	r5, r0
 8013b20:	0710      	lsls	r0, r2, #28
 8013b22:	460c      	mov	r4, r1
 8013b24:	d458      	bmi.n	8013bd8 <__sflush_r+0xc0>
 8013b26:	684b      	ldr	r3, [r1, #4]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	dc05      	bgt.n	8013b38 <__sflush_r+0x20>
 8013b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	dc02      	bgt.n	8013b38 <__sflush_r+0x20>
 8013b32:	2000      	movs	r0, #0
 8013b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b3a:	2e00      	cmp	r6, #0
 8013b3c:	d0f9      	beq.n	8013b32 <__sflush_r+0x1a>
 8013b3e:	2300      	movs	r3, #0
 8013b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013b44:	682f      	ldr	r7, [r5, #0]
 8013b46:	602b      	str	r3, [r5, #0]
 8013b48:	d032      	beq.n	8013bb0 <__sflush_r+0x98>
 8013b4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013b4c:	89a3      	ldrh	r3, [r4, #12]
 8013b4e:	075a      	lsls	r2, r3, #29
 8013b50:	d505      	bpl.n	8013b5e <__sflush_r+0x46>
 8013b52:	6863      	ldr	r3, [r4, #4]
 8013b54:	1ac0      	subs	r0, r0, r3
 8013b56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b58:	b10b      	cbz	r3, 8013b5e <__sflush_r+0x46>
 8013b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b5c:	1ac0      	subs	r0, r0, r3
 8013b5e:	2300      	movs	r3, #0
 8013b60:	4602      	mov	r2, r0
 8013b62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b64:	6a21      	ldr	r1, [r4, #32]
 8013b66:	4628      	mov	r0, r5
 8013b68:	47b0      	blx	r6
 8013b6a:	1c43      	adds	r3, r0, #1
 8013b6c:	89a3      	ldrh	r3, [r4, #12]
 8013b6e:	d106      	bne.n	8013b7e <__sflush_r+0x66>
 8013b70:	6829      	ldr	r1, [r5, #0]
 8013b72:	291d      	cmp	r1, #29
 8013b74:	d82c      	bhi.n	8013bd0 <__sflush_r+0xb8>
 8013b76:	4a2a      	ldr	r2, [pc, #168]	; (8013c20 <__sflush_r+0x108>)
 8013b78:	40ca      	lsrs	r2, r1
 8013b7a:	07d6      	lsls	r6, r2, #31
 8013b7c:	d528      	bpl.n	8013bd0 <__sflush_r+0xb8>
 8013b7e:	2200      	movs	r2, #0
 8013b80:	6062      	str	r2, [r4, #4]
 8013b82:	04d9      	lsls	r1, r3, #19
 8013b84:	6922      	ldr	r2, [r4, #16]
 8013b86:	6022      	str	r2, [r4, #0]
 8013b88:	d504      	bpl.n	8013b94 <__sflush_r+0x7c>
 8013b8a:	1c42      	adds	r2, r0, #1
 8013b8c:	d101      	bne.n	8013b92 <__sflush_r+0x7a>
 8013b8e:	682b      	ldr	r3, [r5, #0]
 8013b90:	b903      	cbnz	r3, 8013b94 <__sflush_r+0x7c>
 8013b92:	6560      	str	r0, [r4, #84]	; 0x54
 8013b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b96:	602f      	str	r7, [r5, #0]
 8013b98:	2900      	cmp	r1, #0
 8013b9a:	d0ca      	beq.n	8013b32 <__sflush_r+0x1a>
 8013b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ba0:	4299      	cmp	r1, r3
 8013ba2:	d002      	beq.n	8013baa <__sflush_r+0x92>
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	f7ff fc7f 	bl	80134a8 <_free_r>
 8013baa:	2000      	movs	r0, #0
 8013bac:	6360      	str	r0, [r4, #52]	; 0x34
 8013bae:	e7c1      	b.n	8013b34 <__sflush_r+0x1c>
 8013bb0:	6a21      	ldr	r1, [r4, #32]
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	47b0      	blx	r6
 8013bb8:	1c41      	adds	r1, r0, #1
 8013bba:	d1c7      	bne.n	8013b4c <__sflush_r+0x34>
 8013bbc:	682b      	ldr	r3, [r5, #0]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d0c4      	beq.n	8013b4c <__sflush_r+0x34>
 8013bc2:	2b1d      	cmp	r3, #29
 8013bc4:	d001      	beq.n	8013bca <__sflush_r+0xb2>
 8013bc6:	2b16      	cmp	r3, #22
 8013bc8:	d101      	bne.n	8013bce <__sflush_r+0xb6>
 8013bca:	602f      	str	r7, [r5, #0]
 8013bcc:	e7b1      	b.n	8013b32 <__sflush_r+0x1a>
 8013bce:	89a3      	ldrh	r3, [r4, #12]
 8013bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bd4:	81a3      	strh	r3, [r4, #12]
 8013bd6:	e7ad      	b.n	8013b34 <__sflush_r+0x1c>
 8013bd8:	690f      	ldr	r7, [r1, #16]
 8013bda:	2f00      	cmp	r7, #0
 8013bdc:	d0a9      	beq.n	8013b32 <__sflush_r+0x1a>
 8013bde:	0793      	lsls	r3, r2, #30
 8013be0:	680e      	ldr	r6, [r1, #0]
 8013be2:	bf08      	it	eq
 8013be4:	694b      	ldreq	r3, [r1, #20]
 8013be6:	600f      	str	r7, [r1, #0]
 8013be8:	bf18      	it	ne
 8013bea:	2300      	movne	r3, #0
 8013bec:	eba6 0807 	sub.w	r8, r6, r7
 8013bf0:	608b      	str	r3, [r1, #8]
 8013bf2:	f1b8 0f00 	cmp.w	r8, #0
 8013bf6:	dd9c      	ble.n	8013b32 <__sflush_r+0x1a>
 8013bf8:	6a21      	ldr	r1, [r4, #32]
 8013bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013bfc:	4643      	mov	r3, r8
 8013bfe:	463a      	mov	r2, r7
 8013c00:	4628      	mov	r0, r5
 8013c02:	47b0      	blx	r6
 8013c04:	2800      	cmp	r0, #0
 8013c06:	dc06      	bgt.n	8013c16 <__sflush_r+0xfe>
 8013c08:	89a3      	ldrh	r3, [r4, #12]
 8013c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c0e:	81a3      	strh	r3, [r4, #12]
 8013c10:	f04f 30ff 	mov.w	r0, #4294967295
 8013c14:	e78e      	b.n	8013b34 <__sflush_r+0x1c>
 8013c16:	4407      	add	r7, r0
 8013c18:	eba8 0800 	sub.w	r8, r8, r0
 8013c1c:	e7e9      	b.n	8013bf2 <__sflush_r+0xda>
 8013c1e:	bf00      	nop
 8013c20:	20400001 	.word	0x20400001

08013c24 <_fflush_r>:
 8013c24:	b538      	push	{r3, r4, r5, lr}
 8013c26:	690b      	ldr	r3, [r1, #16]
 8013c28:	4605      	mov	r5, r0
 8013c2a:	460c      	mov	r4, r1
 8013c2c:	b913      	cbnz	r3, 8013c34 <_fflush_r+0x10>
 8013c2e:	2500      	movs	r5, #0
 8013c30:	4628      	mov	r0, r5
 8013c32:	bd38      	pop	{r3, r4, r5, pc}
 8013c34:	b118      	cbz	r0, 8013c3e <_fflush_r+0x1a>
 8013c36:	6983      	ldr	r3, [r0, #24]
 8013c38:	b90b      	cbnz	r3, 8013c3e <_fflush_r+0x1a>
 8013c3a:	f000 f887 	bl	8013d4c <__sinit>
 8013c3e:	4b14      	ldr	r3, [pc, #80]	; (8013c90 <_fflush_r+0x6c>)
 8013c40:	429c      	cmp	r4, r3
 8013c42:	d11b      	bne.n	8013c7c <_fflush_r+0x58>
 8013c44:	686c      	ldr	r4, [r5, #4]
 8013c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d0ef      	beq.n	8013c2e <_fflush_r+0xa>
 8013c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013c50:	07d0      	lsls	r0, r2, #31
 8013c52:	d404      	bmi.n	8013c5e <_fflush_r+0x3a>
 8013c54:	0599      	lsls	r1, r3, #22
 8013c56:	d402      	bmi.n	8013c5e <_fflush_r+0x3a>
 8013c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c5a:	f000 f915 	bl	8013e88 <__retarget_lock_acquire_recursive>
 8013c5e:	4628      	mov	r0, r5
 8013c60:	4621      	mov	r1, r4
 8013c62:	f7ff ff59 	bl	8013b18 <__sflush_r>
 8013c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c68:	07da      	lsls	r2, r3, #31
 8013c6a:	4605      	mov	r5, r0
 8013c6c:	d4e0      	bmi.n	8013c30 <_fflush_r+0xc>
 8013c6e:	89a3      	ldrh	r3, [r4, #12]
 8013c70:	059b      	lsls	r3, r3, #22
 8013c72:	d4dd      	bmi.n	8013c30 <_fflush_r+0xc>
 8013c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c76:	f000 f908 	bl	8013e8a <__retarget_lock_release_recursive>
 8013c7a:	e7d9      	b.n	8013c30 <_fflush_r+0xc>
 8013c7c:	4b05      	ldr	r3, [pc, #20]	; (8013c94 <_fflush_r+0x70>)
 8013c7e:	429c      	cmp	r4, r3
 8013c80:	d101      	bne.n	8013c86 <_fflush_r+0x62>
 8013c82:	68ac      	ldr	r4, [r5, #8]
 8013c84:	e7df      	b.n	8013c46 <_fflush_r+0x22>
 8013c86:	4b04      	ldr	r3, [pc, #16]	; (8013c98 <_fflush_r+0x74>)
 8013c88:	429c      	cmp	r4, r3
 8013c8a:	bf08      	it	eq
 8013c8c:	68ec      	ldreq	r4, [r5, #12]
 8013c8e:	e7da      	b.n	8013c46 <_fflush_r+0x22>
 8013c90:	0801517c 	.word	0x0801517c
 8013c94:	0801519c 	.word	0x0801519c
 8013c98:	0801515c 	.word	0x0801515c

08013c9c <std>:
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	b510      	push	{r4, lr}
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8013ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013caa:	6083      	str	r3, [r0, #8]
 8013cac:	8181      	strh	r1, [r0, #12]
 8013cae:	6643      	str	r3, [r0, #100]	; 0x64
 8013cb0:	81c2      	strh	r2, [r0, #14]
 8013cb2:	6183      	str	r3, [r0, #24]
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	2208      	movs	r2, #8
 8013cb8:	305c      	adds	r0, #92	; 0x5c
 8013cba:	f7fd fdff 	bl	80118bc <memset>
 8013cbe:	4b05      	ldr	r3, [pc, #20]	; (8013cd4 <std+0x38>)
 8013cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8013cc2:	4b05      	ldr	r3, [pc, #20]	; (8013cd8 <std+0x3c>)
 8013cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013cc6:	4b05      	ldr	r3, [pc, #20]	; (8013cdc <std+0x40>)
 8013cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013cca:	4b05      	ldr	r3, [pc, #20]	; (8013ce0 <std+0x44>)
 8013ccc:	6224      	str	r4, [r4, #32]
 8013cce:	6323      	str	r3, [r4, #48]	; 0x30
 8013cd0:	bd10      	pop	{r4, pc}
 8013cd2:	bf00      	nop
 8013cd4:	08013fdd 	.word	0x08013fdd
 8013cd8:	08013fff 	.word	0x08013fff
 8013cdc:	08014037 	.word	0x08014037
 8013ce0:	0801405b 	.word	0x0801405b

08013ce4 <_cleanup_r>:
 8013ce4:	4901      	ldr	r1, [pc, #4]	; (8013cec <_cleanup_r+0x8>)
 8013ce6:	f000 b8af 	b.w	8013e48 <_fwalk_reent>
 8013cea:	bf00      	nop
 8013cec:	08013c25 	.word	0x08013c25

08013cf0 <__sfmoreglue>:
 8013cf0:	b570      	push	{r4, r5, r6, lr}
 8013cf2:	1e4a      	subs	r2, r1, #1
 8013cf4:	2568      	movs	r5, #104	; 0x68
 8013cf6:	4355      	muls	r5, r2
 8013cf8:	460e      	mov	r6, r1
 8013cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013cfe:	f7ff fc23 	bl	8013548 <_malloc_r>
 8013d02:	4604      	mov	r4, r0
 8013d04:	b140      	cbz	r0, 8013d18 <__sfmoreglue+0x28>
 8013d06:	2100      	movs	r1, #0
 8013d08:	e9c0 1600 	strd	r1, r6, [r0]
 8013d0c:	300c      	adds	r0, #12
 8013d0e:	60a0      	str	r0, [r4, #8]
 8013d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013d14:	f7fd fdd2 	bl	80118bc <memset>
 8013d18:	4620      	mov	r0, r4
 8013d1a:	bd70      	pop	{r4, r5, r6, pc}

08013d1c <__sfp_lock_acquire>:
 8013d1c:	4801      	ldr	r0, [pc, #4]	; (8013d24 <__sfp_lock_acquire+0x8>)
 8013d1e:	f000 b8b3 	b.w	8013e88 <__retarget_lock_acquire_recursive>
 8013d22:	bf00      	nop
 8013d24:	24000e6c 	.word	0x24000e6c

08013d28 <__sfp_lock_release>:
 8013d28:	4801      	ldr	r0, [pc, #4]	; (8013d30 <__sfp_lock_release+0x8>)
 8013d2a:	f000 b8ae 	b.w	8013e8a <__retarget_lock_release_recursive>
 8013d2e:	bf00      	nop
 8013d30:	24000e6c 	.word	0x24000e6c

08013d34 <__sinit_lock_acquire>:
 8013d34:	4801      	ldr	r0, [pc, #4]	; (8013d3c <__sinit_lock_acquire+0x8>)
 8013d36:	f000 b8a7 	b.w	8013e88 <__retarget_lock_acquire_recursive>
 8013d3a:	bf00      	nop
 8013d3c:	24000e67 	.word	0x24000e67

08013d40 <__sinit_lock_release>:
 8013d40:	4801      	ldr	r0, [pc, #4]	; (8013d48 <__sinit_lock_release+0x8>)
 8013d42:	f000 b8a2 	b.w	8013e8a <__retarget_lock_release_recursive>
 8013d46:	bf00      	nop
 8013d48:	24000e67 	.word	0x24000e67

08013d4c <__sinit>:
 8013d4c:	b510      	push	{r4, lr}
 8013d4e:	4604      	mov	r4, r0
 8013d50:	f7ff fff0 	bl	8013d34 <__sinit_lock_acquire>
 8013d54:	69a3      	ldr	r3, [r4, #24]
 8013d56:	b11b      	cbz	r3, 8013d60 <__sinit+0x14>
 8013d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d5c:	f7ff bff0 	b.w	8013d40 <__sinit_lock_release>
 8013d60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013d64:	6523      	str	r3, [r4, #80]	; 0x50
 8013d66:	4b13      	ldr	r3, [pc, #76]	; (8013db4 <__sinit+0x68>)
 8013d68:	4a13      	ldr	r2, [pc, #76]	; (8013db8 <__sinit+0x6c>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013d6e:	42a3      	cmp	r3, r4
 8013d70:	bf04      	itt	eq
 8013d72:	2301      	moveq	r3, #1
 8013d74:	61a3      	streq	r3, [r4, #24]
 8013d76:	4620      	mov	r0, r4
 8013d78:	f000 f820 	bl	8013dbc <__sfp>
 8013d7c:	6060      	str	r0, [r4, #4]
 8013d7e:	4620      	mov	r0, r4
 8013d80:	f000 f81c 	bl	8013dbc <__sfp>
 8013d84:	60a0      	str	r0, [r4, #8]
 8013d86:	4620      	mov	r0, r4
 8013d88:	f000 f818 	bl	8013dbc <__sfp>
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	60e0      	str	r0, [r4, #12]
 8013d90:	2104      	movs	r1, #4
 8013d92:	6860      	ldr	r0, [r4, #4]
 8013d94:	f7ff ff82 	bl	8013c9c <std>
 8013d98:	68a0      	ldr	r0, [r4, #8]
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	2109      	movs	r1, #9
 8013d9e:	f7ff ff7d 	bl	8013c9c <std>
 8013da2:	68e0      	ldr	r0, [r4, #12]
 8013da4:	2202      	movs	r2, #2
 8013da6:	2112      	movs	r1, #18
 8013da8:	f7ff ff78 	bl	8013c9c <std>
 8013dac:	2301      	movs	r3, #1
 8013dae:	61a3      	str	r3, [r4, #24]
 8013db0:	e7d2      	b.n	8013d58 <__sinit+0xc>
 8013db2:	bf00      	nop
 8013db4:	08014dd8 	.word	0x08014dd8
 8013db8:	08013ce5 	.word	0x08013ce5

08013dbc <__sfp>:
 8013dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dbe:	4607      	mov	r7, r0
 8013dc0:	f7ff ffac 	bl	8013d1c <__sfp_lock_acquire>
 8013dc4:	4b1e      	ldr	r3, [pc, #120]	; (8013e40 <__sfp+0x84>)
 8013dc6:	681e      	ldr	r6, [r3, #0]
 8013dc8:	69b3      	ldr	r3, [r6, #24]
 8013dca:	b913      	cbnz	r3, 8013dd2 <__sfp+0x16>
 8013dcc:	4630      	mov	r0, r6
 8013dce:	f7ff ffbd 	bl	8013d4c <__sinit>
 8013dd2:	3648      	adds	r6, #72	; 0x48
 8013dd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013dd8:	3b01      	subs	r3, #1
 8013dda:	d503      	bpl.n	8013de4 <__sfp+0x28>
 8013ddc:	6833      	ldr	r3, [r6, #0]
 8013dde:	b30b      	cbz	r3, 8013e24 <__sfp+0x68>
 8013de0:	6836      	ldr	r6, [r6, #0]
 8013de2:	e7f7      	b.n	8013dd4 <__sfp+0x18>
 8013de4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013de8:	b9d5      	cbnz	r5, 8013e20 <__sfp+0x64>
 8013dea:	4b16      	ldr	r3, [pc, #88]	; (8013e44 <__sfp+0x88>)
 8013dec:	60e3      	str	r3, [r4, #12]
 8013dee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013df2:	6665      	str	r5, [r4, #100]	; 0x64
 8013df4:	f000 f847 	bl	8013e86 <__retarget_lock_init_recursive>
 8013df8:	f7ff ff96 	bl	8013d28 <__sfp_lock_release>
 8013dfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013e00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013e04:	6025      	str	r5, [r4, #0]
 8013e06:	61a5      	str	r5, [r4, #24]
 8013e08:	2208      	movs	r2, #8
 8013e0a:	4629      	mov	r1, r5
 8013e0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013e10:	f7fd fd54 	bl	80118bc <memset>
 8013e14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013e18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e20:	3468      	adds	r4, #104	; 0x68
 8013e22:	e7d9      	b.n	8013dd8 <__sfp+0x1c>
 8013e24:	2104      	movs	r1, #4
 8013e26:	4638      	mov	r0, r7
 8013e28:	f7ff ff62 	bl	8013cf0 <__sfmoreglue>
 8013e2c:	4604      	mov	r4, r0
 8013e2e:	6030      	str	r0, [r6, #0]
 8013e30:	2800      	cmp	r0, #0
 8013e32:	d1d5      	bne.n	8013de0 <__sfp+0x24>
 8013e34:	f7ff ff78 	bl	8013d28 <__sfp_lock_release>
 8013e38:	230c      	movs	r3, #12
 8013e3a:	603b      	str	r3, [r7, #0]
 8013e3c:	e7ee      	b.n	8013e1c <__sfp+0x60>
 8013e3e:	bf00      	nop
 8013e40:	08014dd8 	.word	0x08014dd8
 8013e44:	ffff0001 	.word	0xffff0001

08013e48 <_fwalk_reent>:
 8013e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e4c:	4606      	mov	r6, r0
 8013e4e:	4688      	mov	r8, r1
 8013e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e54:	2700      	movs	r7, #0
 8013e56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e5a:	f1b9 0901 	subs.w	r9, r9, #1
 8013e5e:	d505      	bpl.n	8013e6c <_fwalk_reent+0x24>
 8013e60:	6824      	ldr	r4, [r4, #0]
 8013e62:	2c00      	cmp	r4, #0
 8013e64:	d1f7      	bne.n	8013e56 <_fwalk_reent+0xe>
 8013e66:	4638      	mov	r0, r7
 8013e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e6c:	89ab      	ldrh	r3, [r5, #12]
 8013e6e:	2b01      	cmp	r3, #1
 8013e70:	d907      	bls.n	8013e82 <_fwalk_reent+0x3a>
 8013e72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e76:	3301      	adds	r3, #1
 8013e78:	d003      	beq.n	8013e82 <_fwalk_reent+0x3a>
 8013e7a:	4629      	mov	r1, r5
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	47c0      	blx	r8
 8013e80:	4307      	orrs	r7, r0
 8013e82:	3568      	adds	r5, #104	; 0x68
 8013e84:	e7e9      	b.n	8013e5a <_fwalk_reent+0x12>

08013e86 <__retarget_lock_init_recursive>:
 8013e86:	4770      	bx	lr

08013e88 <__retarget_lock_acquire_recursive>:
 8013e88:	4770      	bx	lr

08013e8a <__retarget_lock_release_recursive>:
 8013e8a:	4770      	bx	lr

08013e8c <__swhatbuf_r>:
 8013e8c:	b570      	push	{r4, r5, r6, lr}
 8013e8e:	460e      	mov	r6, r1
 8013e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e94:	2900      	cmp	r1, #0
 8013e96:	b096      	sub	sp, #88	; 0x58
 8013e98:	4614      	mov	r4, r2
 8013e9a:	461d      	mov	r5, r3
 8013e9c:	da07      	bge.n	8013eae <__swhatbuf_r+0x22>
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	602b      	str	r3, [r5, #0]
 8013ea2:	89b3      	ldrh	r3, [r6, #12]
 8013ea4:	061a      	lsls	r2, r3, #24
 8013ea6:	d410      	bmi.n	8013eca <__swhatbuf_r+0x3e>
 8013ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013eac:	e00e      	b.n	8013ecc <__swhatbuf_r+0x40>
 8013eae:	466a      	mov	r2, sp
 8013eb0:	f000 f8fa 	bl	80140a8 <_fstat_r>
 8013eb4:	2800      	cmp	r0, #0
 8013eb6:	dbf2      	blt.n	8013e9e <__swhatbuf_r+0x12>
 8013eb8:	9a01      	ldr	r2, [sp, #4]
 8013eba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013ebe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013ec2:	425a      	negs	r2, r3
 8013ec4:	415a      	adcs	r2, r3
 8013ec6:	602a      	str	r2, [r5, #0]
 8013ec8:	e7ee      	b.n	8013ea8 <__swhatbuf_r+0x1c>
 8013eca:	2340      	movs	r3, #64	; 0x40
 8013ecc:	2000      	movs	r0, #0
 8013ece:	6023      	str	r3, [r4, #0]
 8013ed0:	b016      	add	sp, #88	; 0x58
 8013ed2:	bd70      	pop	{r4, r5, r6, pc}

08013ed4 <__smakebuf_r>:
 8013ed4:	898b      	ldrh	r3, [r1, #12]
 8013ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ed8:	079d      	lsls	r5, r3, #30
 8013eda:	4606      	mov	r6, r0
 8013edc:	460c      	mov	r4, r1
 8013ede:	d507      	bpl.n	8013ef0 <__smakebuf_r+0x1c>
 8013ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ee4:	6023      	str	r3, [r4, #0]
 8013ee6:	6123      	str	r3, [r4, #16]
 8013ee8:	2301      	movs	r3, #1
 8013eea:	6163      	str	r3, [r4, #20]
 8013eec:	b002      	add	sp, #8
 8013eee:	bd70      	pop	{r4, r5, r6, pc}
 8013ef0:	ab01      	add	r3, sp, #4
 8013ef2:	466a      	mov	r2, sp
 8013ef4:	f7ff ffca 	bl	8013e8c <__swhatbuf_r>
 8013ef8:	9900      	ldr	r1, [sp, #0]
 8013efa:	4605      	mov	r5, r0
 8013efc:	4630      	mov	r0, r6
 8013efe:	f7ff fb23 	bl	8013548 <_malloc_r>
 8013f02:	b948      	cbnz	r0, 8013f18 <__smakebuf_r+0x44>
 8013f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f08:	059a      	lsls	r2, r3, #22
 8013f0a:	d4ef      	bmi.n	8013eec <__smakebuf_r+0x18>
 8013f0c:	f023 0303 	bic.w	r3, r3, #3
 8013f10:	f043 0302 	orr.w	r3, r3, #2
 8013f14:	81a3      	strh	r3, [r4, #12]
 8013f16:	e7e3      	b.n	8013ee0 <__smakebuf_r+0xc>
 8013f18:	4b0d      	ldr	r3, [pc, #52]	; (8013f50 <__smakebuf_r+0x7c>)
 8013f1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f1c:	89a3      	ldrh	r3, [r4, #12]
 8013f1e:	6020      	str	r0, [r4, #0]
 8013f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f24:	81a3      	strh	r3, [r4, #12]
 8013f26:	9b00      	ldr	r3, [sp, #0]
 8013f28:	6163      	str	r3, [r4, #20]
 8013f2a:	9b01      	ldr	r3, [sp, #4]
 8013f2c:	6120      	str	r0, [r4, #16]
 8013f2e:	b15b      	cbz	r3, 8013f48 <__smakebuf_r+0x74>
 8013f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f34:	4630      	mov	r0, r6
 8013f36:	f000 f8c9 	bl	80140cc <_isatty_r>
 8013f3a:	b128      	cbz	r0, 8013f48 <__smakebuf_r+0x74>
 8013f3c:	89a3      	ldrh	r3, [r4, #12]
 8013f3e:	f023 0303 	bic.w	r3, r3, #3
 8013f42:	f043 0301 	orr.w	r3, r3, #1
 8013f46:	81a3      	strh	r3, [r4, #12]
 8013f48:	89a0      	ldrh	r0, [r4, #12]
 8013f4a:	4305      	orrs	r5, r0
 8013f4c:	81a5      	strh	r5, [r4, #12]
 8013f4e:	e7cd      	b.n	8013eec <__smakebuf_r+0x18>
 8013f50:	08013ce5 	.word	0x08013ce5

08013f54 <_raise_r>:
 8013f54:	291f      	cmp	r1, #31
 8013f56:	b538      	push	{r3, r4, r5, lr}
 8013f58:	4604      	mov	r4, r0
 8013f5a:	460d      	mov	r5, r1
 8013f5c:	d904      	bls.n	8013f68 <_raise_r+0x14>
 8013f5e:	2316      	movs	r3, #22
 8013f60:	6003      	str	r3, [r0, #0]
 8013f62:	f04f 30ff 	mov.w	r0, #4294967295
 8013f66:	bd38      	pop	{r3, r4, r5, pc}
 8013f68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013f6a:	b112      	cbz	r2, 8013f72 <_raise_r+0x1e>
 8013f6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f70:	b94b      	cbnz	r3, 8013f86 <_raise_r+0x32>
 8013f72:	4620      	mov	r0, r4
 8013f74:	f000 f830 	bl	8013fd8 <_getpid_r>
 8013f78:	462a      	mov	r2, r5
 8013f7a:	4601      	mov	r1, r0
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f82:	f000 b817 	b.w	8013fb4 <_kill_r>
 8013f86:	2b01      	cmp	r3, #1
 8013f88:	d00a      	beq.n	8013fa0 <_raise_r+0x4c>
 8013f8a:	1c59      	adds	r1, r3, #1
 8013f8c:	d103      	bne.n	8013f96 <_raise_r+0x42>
 8013f8e:	2316      	movs	r3, #22
 8013f90:	6003      	str	r3, [r0, #0]
 8013f92:	2001      	movs	r0, #1
 8013f94:	e7e7      	b.n	8013f66 <_raise_r+0x12>
 8013f96:	2400      	movs	r4, #0
 8013f98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	4798      	blx	r3
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	e7e0      	b.n	8013f66 <_raise_r+0x12>

08013fa4 <raise>:
 8013fa4:	4b02      	ldr	r3, [pc, #8]	; (8013fb0 <raise+0xc>)
 8013fa6:	4601      	mov	r1, r0
 8013fa8:	6818      	ldr	r0, [r3, #0]
 8013faa:	f7ff bfd3 	b.w	8013f54 <_raise_r>
 8013fae:	bf00      	nop
 8013fb0:	24000024 	.word	0x24000024

08013fb4 <_kill_r>:
 8013fb4:	b538      	push	{r3, r4, r5, lr}
 8013fb6:	4d07      	ldr	r5, [pc, #28]	; (8013fd4 <_kill_r+0x20>)
 8013fb8:	2300      	movs	r3, #0
 8013fba:	4604      	mov	r4, r0
 8013fbc:	4608      	mov	r0, r1
 8013fbe:	4611      	mov	r1, r2
 8013fc0:	602b      	str	r3, [r5, #0]
 8013fc2:	f7f3 f8e7 	bl	8007194 <_kill>
 8013fc6:	1c43      	adds	r3, r0, #1
 8013fc8:	d102      	bne.n	8013fd0 <_kill_r+0x1c>
 8013fca:	682b      	ldr	r3, [r5, #0]
 8013fcc:	b103      	cbz	r3, 8013fd0 <_kill_r+0x1c>
 8013fce:	6023      	str	r3, [r4, #0]
 8013fd0:	bd38      	pop	{r3, r4, r5, pc}
 8013fd2:	bf00      	nop
 8013fd4:	24000e60 	.word	0x24000e60

08013fd8 <_getpid_r>:
 8013fd8:	f7f3 b8d4 	b.w	8007184 <_getpid>

08013fdc <__sread>:
 8013fdc:	b510      	push	{r4, lr}
 8013fde:	460c      	mov	r4, r1
 8013fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fe4:	f000 f894 	bl	8014110 <_read_r>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	bfab      	itete	ge
 8013fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013fee:	89a3      	ldrhlt	r3, [r4, #12]
 8013ff0:	181b      	addge	r3, r3, r0
 8013ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013ff6:	bfac      	ite	ge
 8013ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013ffa:	81a3      	strhlt	r3, [r4, #12]
 8013ffc:	bd10      	pop	{r4, pc}

08013ffe <__swrite>:
 8013ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014002:	461f      	mov	r7, r3
 8014004:	898b      	ldrh	r3, [r1, #12]
 8014006:	05db      	lsls	r3, r3, #23
 8014008:	4605      	mov	r5, r0
 801400a:	460c      	mov	r4, r1
 801400c:	4616      	mov	r6, r2
 801400e:	d505      	bpl.n	801401c <__swrite+0x1e>
 8014010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014014:	2302      	movs	r3, #2
 8014016:	2200      	movs	r2, #0
 8014018:	f000 f868 	bl	80140ec <_lseek_r>
 801401c:	89a3      	ldrh	r3, [r4, #12]
 801401e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014026:	81a3      	strh	r3, [r4, #12]
 8014028:	4632      	mov	r2, r6
 801402a:	463b      	mov	r3, r7
 801402c:	4628      	mov	r0, r5
 801402e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014032:	f000 b817 	b.w	8014064 <_write_r>

08014036 <__sseek>:
 8014036:	b510      	push	{r4, lr}
 8014038:	460c      	mov	r4, r1
 801403a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801403e:	f000 f855 	bl	80140ec <_lseek_r>
 8014042:	1c43      	adds	r3, r0, #1
 8014044:	89a3      	ldrh	r3, [r4, #12]
 8014046:	bf15      	itete	ne
 8014048:	6560      	strne	r0, [r4, #84]	; 0x54
 801404a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801404e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014052:	81a3      	strheq	r3, [r4, #12]
 8014054:	bf18      	it	ne
 8014056:	81a3      	strhne	r3, [r4, #12]
 8014058:	bd10      	pop	{r4, pc}

0801405a <__sclose>:
 801405a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801405e:	f000 b813 	b.w	8014088 <_close_r>
	...

08014064 <_write_r>:
 8014064:	b538      	push	{r3, r4, r5, lr}
 8014066:	4d07      	ldr	r5, [pc, #28]	; (8014084 <_write_r+0x20>)
 8014068:	4604      	mov	r4, r0
 801406a:	4608      	mov	r0, r1
 801406c:	4611      	mov	r1, r2
 801406e:	2200      	movs	r2, #0
 8014070:	602a      	str	r2, [r5, #0]
 8014072:	461a      	mov	r2, r3
 8014074:	f7f3 f8c5 	bl	8007202 <_write>
 8014078:	1c43      	adds	r3, r0, #1
 801407a:	d102      	bne.n	8014082 <_write_r+0x1e>
 801407c:	682b      	ldr	r3, [r5, #0]
 801407e:	b103      	cbz	r3, 8014082 <_write_r+0x1e>
 8014080:	6023      	str	r3, [r4, #0]
 8014082:	bd38      	pop	{r3, r4, r5, pc}
 8014084:	24000e60 	.word	0x24000e60

08014088 <_close_r>:
 8014088:	b538      	push	{r3, r4, r5, lr}
 801408a:	4d06      	ldr	r5, [pc, #24]	; (80140a4 <_close_r+0x1c>)
 801408c:	2300      	movs	r3, #0
 801408e:	4604      	mov	r4, r0
 8014090:	4608      	mov	r0, r1
 8014092:	602b      	str	r3, [r5, #0]
 8014094:	f7f3 f8d1 	bl	800723a <_close>
 8014098:	1c43      	adds	r3, r0, #1
 801409a:	d102      	bne.n	80140a2 <_close_r+0x1a>
 801409c:	682b      	ldr	r3, [r5, #0]
 801409e:	b103      	cbz	r3, 80140a2 <_close_r+0x1a>
 80140a0:	6023      	str	r3, [r4, #0]
 80140a2:	bd38      	pop	{r3, r4, r5, pc}
 80140a4:	24000e60 	.word	0x24000e60

080140a8 <_fstat_r>:
 80140a8:	b538      	push	{r3, r4, r5, lr}
 80140aa:	4d07      	ldr	r5, [pc, #28]	; (80140c8 <_fstat_r+0x20>)
 80140ac:	2300      	movs	r3, #0
 80140ae:	4604      	mov	r4, r0
 80140b0:	4608      	mov	r0, r1
 80140b2:	4611      	mov	r1, r2
 80140b4:	602b      	str	r3, [r5, #0]
 80140b6:	f7f3 f8cc 	bl	8007252 <_fstat>
 80140ba:	1c43      	adds	r3, r0, #1
 80140bc:	d102      	bne.n	80140c4 <_fstat_r+0x1c>
 80140be:	682b      	ldr	r3, [r5, #0]
 80140c0:	b103      	cbz	r3, 80140c4 <_fstat_r+0x1c>
 80140c2:	6023      	str	r3, [r4, #0]
 80140c4:	bd38      	pop	{r3, r4, r5, pc}
 80140c6:	bf00      	nop
 80140c8:	24000e60 	.word	0x24000e60

080140cc <_isatty_r>:
 80140cc:	b538      	push	{r3, r4, r5, lr}
 80140ce:	4d06      	ldr	r5, [pc, #24]	; (80140e8 <_isatty_r+0x1c>)
 80140d0:	2300      	movs	r3, #0
 80140d2:	4604      	mov	r4, r0
 80140d4:	4608      	mov	r0, r1
 80140d6:	602b      	str	r3, [r5, #0]
 80140d8:	f7f3 f8cb 	bl	8007272 <_isatty>
 80140dc:	1c43      	adds	r3, r0, #1
 80140de:	d102      	bne.n	80140e6 <_isatty_r+0x1a>
 80140e0:	682b      	ldr	r3, [r5, #0]
 80140e2:	b103      	cbz	r3, 80140e6 <_isatty_r+0x1a>
 80140e4:	6023      	str	r3, [r4, #0]
 80140e6:	bd38      	pop	{r3, r4, r5, pc}
 80140e8:	24000e60 	.word	0x24000e60

080140ec <_lseek_r>:
 80140ec:	b538      	push	{r3, r4, r5, lr}
 80140ee:	4d07      	ldr	r5, [pc, #28]	; (801410c <_lseek_r+0x20>)
 80140f0:	4604      	mov	r4, r0
 80140f2:	4608      	mov	r0, r1
 80140f4:	4611      	mov	r1, r2
 80140f6:	2200      	movs	r2, #0
 80140f8:	602a      	str	r2, [r5, #0]
 80140fa:	461a      	mov	r2, r3
 80140fc:	f7f3 f8c4 	bl	8007288 <_lseek>
 8014100:	1c43      	adds	r3, r0, #1
 8014102:	d102      	bne.n	801410a <_lseek_r+0x1e>
 8014104:	682b      	ldr	r3, [r5, #0]
 8014106:	b103      	cbz	r3, 801410a <_lseek_r+0x1e>
 8014108:	6023      	str	r3, [r4, #0]
 801410a:	bd38      	pop	{r3, r4, r5, pc}
 801410c:	24000e60 	.word	0x24000e60

08014110 <_read_r>:
 8014110:	b538      	push	{r3, r4, r5, lr}
 8014112:	4d07      	ldr	r5, [pc, #28]	; (8014130 <_read_r+0x20>)
 8014114:	4604      	mov	r4, r0
 8014116:	4608      	mov	r0, r1
 8014118:	4611      	mov	r1, r2
 801411a:	2200      	movs	r2, #0
 801411c:	602a      	str	r2, [r5, #0]
 801411e:	461a      	mov	r2, r3
 8014120:	f7f3 f852 	bl	80071c8 <_read>
 8014124:	1c43      	adds	r3, r0, #1
 8014126:	d102      	bne.n	801412e <_read_r+0x1e>
 8014128:	682b      	ldr	r3, [r5, #0]
 801412a:	b103      	cbz	r3, 801412e <_read_r+0x1e>
 801412c:	6023      	str	r3, [r4, #0]
 801412e:	bd38      	pop	{r3, r4, r5, pc}
 8014130:	24000e60 	.word	0x24000e60
 8014134:	00000000 	.word	0x00000000

08014138 <cos>:
 8014138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801413a:	eeb0 7b40 	vmov.f64	d7, d0
 801413e:	ee17 3a90 	vmov	r3, s15
 8014142:	4a1f      	ldr	r2, [pc, #124]	; (80141c0 <cos+0x88>)
 8014144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014148:	4293      	cmp	r3, r2
 801414a:	dc04      	bgt.n	8014156 <cos+0x1e>
 801414c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80141b8 <cos+0x80>
 8014150:	f000 f9ce 	bl	80144f0 <__kernel_cos>
 8014154:	e004      	b.n	8014160 <cos+0x28>
 8014156:	4a1b      	ldr	r2, [pc, #108]	; (80141c4 <cos+0x8c>)
 8014158:	4293      	cmp	r3, r2
 801415a:	dd04      	ble.n	8014166 <cos+0x2e>
 801415c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8014160:	b005      	add	sp, #20
 8014162:	f85d fb04 	ldr.w	pc, [sp], #4
 8014166:	4668      	mov	r0, sp
 8014168:	f000 f882 	bl	8014270 <__ieee754_rem_pio2>
 801416c:	f000 0003 	and.w	r0, r0, #3
 8014170:	2801      	cmp	r0, #1
 8014172:	d007      	beq.n	8014184 <cos+0x4c>
 8014174:	2802      	cmp	r0, #2
 8014176:	d00e      	beq.n	8014196 <cos+0x5e>
 8014178:	b9a0      	cbnz	r0, 80141a4 <cos+0x6c>
 801417a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801417e:	ed9d 0b00 	vldr	d0, [sp]
 8014182:	e7e5      	b.n	8014150 <cos+0x18>
 8014184:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014188:	ed9d 0b00 	vldr	d0, [sp]
 801418c:	f000 fc9c 	bl	8014ac8 <__kernel_sin>
 8014190:	eeb1 0b40 	vneg.f64	d0, d0
 8014194:	e7e4      	b.n	8014160 <cos+0x28>
 8014196:	ed9d 1b02 	vldr	d1, [sp, #8]
 801419a:	ed9d 0b00 	vldr	d0, [sp]
 801419e:	f000 f9a7 	bl	80144f0 <__kernel_cos>
 80141a2:	e7f5      	b.n	8014190 <cos+0x58>
 80141a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80141a8:	ed9d 0b00 	vldr	d0, [sp]
 80141ac:	2001      	movs	r0, #1
 80141ae:	f000 fc8b 	bl	8014ac8 <__kernel_sin>
 80141b2:	e7d5      	b.n	8014160 <cos+0x28>
 80141b4:	f3af 8000 	nop.w
	...
 80141c0:	3fe921fb 	.word	0x3fe921fb
 80141c4:	7fefffff 	.word	0x7fefffff

080141c8 <fabs>:
 80141c8:	ec51 0b10 	vmov	r0, r1, d0
 80141cc:	ee10 2a10 	vmov	r2, s0
 80141d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80141d4:	ec43 2b10 	vmov	d0, r2, r3
 80141d8:	4770      	bx	lr
 80141da:	0000      	movs	r0, r0
 80141dc:	0000      	movs	r0, r0
	...

080141e0 <sin>:
 80141e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141e2:	eeb0 7b40 	vmov.f64	d7, d0
 80141e6:	ee17 3a90 	vmov	r3, s15
 80141ea:	4a1f      	ldr	r2, [pc, #124]	; (8014268 <sin+0x88>)
 80141ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80141f0:	4293      	cmp	r3, r2
 80141f2:	dc05      	bgt.n	8014200 <sin+0x20>
 80141f4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8014260 <sin+0x80>
 80141f8:	2000      	movs	r0, #0
 80141fa:	f000 fc65 	bl	8014ac8 <__kernel_sin>
 80141fe:	e004      	b.n	801420a <sin+0x2a>
 8014200:	4a1a      	ldr	r2, [pc, #104]	; (801426c <sin+0x8c>)
 8014202:	4293      	cmp	r3, r2
 8014204:	dd04      	ble.n	8014210 <sin+0x30>
 8014206:	ee30 0b40 	vsub.f64	d0, d0, d0
 801420a:	b005      	add	sp, #20
 801420c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014210:	4668      	mov	r0, sp
 8014212:	f000 f82d 	bl	8014270 <__ieee754_rem_pio2>
 8014216:	f000 0003 	and.w	r0, r0, #3
 801421a:	2801      	cmp	r0, #1
 801421c:	d008      	beq.n	8014230 <sin+0x50>
 801421e:	2802      	cmp	r0, #2
 8014220:	d00d      	beq.n	801423e <sin+0x5e>
 8014222:	b9b0      	cbnz	r0, 8014252 <sin+0x72>
 8014224:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014228:	ed9d 0b00 	vldr	d0, [sp]
 801422c:	2001      	movs	r0, #1
 801422e:	e7e4      	b.n	80141fa <sin+0x1a>
 8014230:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014234:	ed9d 0b00 	vldr	d0, [sp]
 8014238:	f000 f95a 	bl	80144f0 <__kernel_cos>
 801423c:	e7e5      	b.n	801420a <sin+0x2a>
 801423e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014242:	ed9d 0b00 	vldr	d0, [sp]
 8014246:	2001      	movs	r0, #1
 8014248:	f000 fc3e 	bl	8014ac8 <__kernel_sin>
 801424c:	eeb1 0b40 	vneg.f64	d0, d0
 8014250:	e7db      	b.n	801420a <sin+0x2a>
 8014252:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014256:	ed9d 0b00 	vldr	d0, [sp]
 801425a:	f000 f949 	bl	80144f0 <__kernel_cos>
 801425e:	e7f5      	b.n	801424c <sin+0x6c>
	...
 8014268:	3fe921fb 	.word	0x3fe921fb
 801426c:	7fefffff 	.word	0x7fefffff

08014270 <__ieee754_rem_pio2>:
 8014270:	b570      	push	{r4, r5, r6, lr}
 8014272:	eeb0 7b40 	vmov.f64	d7, d0
 8014276:	ee17 5a90 	vmov	r5, s15
 801427a:	4b97      	ldr	r3, [pc, #604]	; (80144d8 <__ieee754_rem_pio2+0x268>)
 801427c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014280:	429e      	cmp	r6, r3
 8014282:	b088      	sub	sp, #32
 8014284:	4604      	mov	r4, r0
 8014286:	dc07      	bgt.n	8014298 <__ieee754_rem_pio2+0x28>
 8014288:	2200      	movs	r2, #0
 801428a:	2300      	movs	r3, #0
 801428c:	ed84 0b00 	vstr	d0, [r4]
 8014290:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014294:	2000      	movs	r0, #0
 8014296:	e01b      	b.n	80142d0 <__ieee754_rem_pio2+0x60>
 8014298:	4b90      	ldr	r3, [pc, #576]	; (80144dc <__ieee754_rem_pio2+0x26c>)
 801429a:	429e      	cmp	r6, r3
 801429c:	dc3b      	bgt.n	8014316 <__ieee754_rem_pio2+0xa6>
 801429e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80142a2:	2d00      	cmp	r5, #0
 80142a4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8014498 <__ieee754_rem_pio2+0x228>
 80142a8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80142ac:	dd19      	ble.n	80142e2 <__ieee754_rem_pio2+0x72>
 80142ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 80142b2:	429e      	cmp	r6, r3
 80142b4:	d00e      	beq.n	80142d4 <__ieee754_rem_pio2+0x64>
 80142b6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80144a0 <__ieee754_rem_pio2+0x230>
 80142ba:	ee37 5b46 	vsub.f64	d5, d7, d6
 80142be:	ee37 7b45 	vsub.f64	d7, d7, d5
 80142c2:	ed84 5b00 	vstr	d5, [r4]
 80142c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80142ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80142ce:	2001      	movs	r0, #1
 80142d0:	b008      	add	sp, #32
 80142d2:	bd70      	pop	{r4, r5, r6, pc}
 80142d4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80144a8 <__ieee754_rem_pio2+0x238>
 80142d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80142dc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80144b0 <__ieee754_rem_pio2+0x240>
 80142e0:	e7eb      	b.n	80142ba <__ieee754_rem_pio2+0x4a>
 80142e2:	429e      	cmp	r6, r3
 80142e4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80142e8:	d00e      	beq.n	8014308 <__ieee754_rem_pio2+0x98>
 80142ea:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80144a0 <__ieee754_rem_pio2+0x230>
 80142ee:	ee37 5b06 	vadd.f64	d5, d7, d6
 80142f2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80142f6:	ed84 5b00 	vstr	d5, [r4]
 80142fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80142fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014302:	ed84 7b02 	vstr	d7, [r4, #8]
 8014306:	e7e3      	b.n	80142d0 <__ieee754_rem_pio2+0x60>
 8014308:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80144a8 <__ieee754_rem_pio2+0x238>
 801430c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014310:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80144b0 <__ieee754_rem_pio2+0x240>
 8014314:	e7eb      	b.n	80142ee <__ieee754_rem_pio2+0x7e>
 8014316:	4b72      	ldr	r3, [pc, #456]	; (80144e0 <__ieee754_rem_pio2+0x270>)
 8014318:	429e      	cmp	r6, r3
 801431a:	dc6e      	bgt.n	80143fa <__ieee754_rem_pio2+0x18a>
 801431c:	f7ff ff54 	bl	80141c8 <fabs>
 8014320:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014324:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80144b8 <__ieee754_rem_pio2+0x248>
 8014328:	eea0 7b06 	vfma.f64	d7, d0, d6
 801432c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014330:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014334:	ee17 0a90 	vmov	r0, s15
 8014338:	eeb1 4b45 	vneg.f64	d4, d5
 801433c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8014498 <__ieee754_rem_pio2+0x228>
 8014340:	eea5 0b47 	vfms.f64	d0, d5, d7
 8014344:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80144a0 <__ieee754_rem_pio2+0x230>
 8014348:	281f      	cmp	r0, #31
 801434a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801434e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014352:	dc08      	bgt.n	8014366 <__ieee754_rem_pio2+0xf6>
 8014354:	4b63      	ldr	r3, [pc, #396]	; (80144e4 <__ieee754_rem_pio2+0x274>)
 8014356:	1e42      	subs	r2, r0, #1
 8014358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801435c:	42b3      	cmp	r3, r6
 801435e:	d002      	beq.n	8014366 <__ieee754_rem_pio2+0xf6>
 8014360:	ed84 6b00 	vstr	d6, [r4]
 8014364:	e024      	b.n	80143b0 <__ieee754_rem_pio2+0x140>
 8014366:	ee16 3a90 	vmov	r3, s13
 801436a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801436e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8014372:	2b10      	cmp	r3, #16
 8014374:	ea4f 5226 	mov.w	r2, r6, asr #20
 8014378:	ddf2      	ble.n	8014360 <__ieee754_rem_pio2+0xf0>
 801437a:	eeb0 6b40 	vmov.f64	d6, d0
 801437e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80144a8 <__ieee754_rem_pio2+0x238>
 8014382:	eea4 6b03 	vfma.f64	d6, d4, d3
 8014386:	ee30 7b46 	vsub.f64	d7, d0, d6
 801438a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801438e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80144b0 <__ieee754_rem_pio2+0x240>
 8014392:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8014396:	ee36 3b47 	vsub.f64	d3, d6, d7
 801439a:	ee13 3a90 	vmov	r3, s7
 801439e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80143a2:	1ad3      	subs	r3, r2, r3
 80143a4:	2b31      	cmp	r3, #49	; 0x31
 80143a6:	dc17      	bgt.n	80143d8 <__ieee754_rem_pio2+0x168>
 80143a8:	eeb0 0b46 	vmov.f64	d0, d6
 80143ac:	ed84 3b00 	vstr	d3, [r4]
 80143b0:	ed94 6b00 	vldr	d6, [r4]
 80143b4:	2d00      	cmp	r5, #0
 80143b6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80143ba:	ee30 7b47 	vsub.f64	d7, d0, d7
 80143be:	ed84 7b02 	vstr	d7, [r4, #8]
 80143c2:	da85      	bge.n	80142d0 <__ieee754_rem_pio2+0x60>
 80143c4:	eeb1 6b46 	vneg.f64	d6, d6
 80143c8:	ed84 6b00 	vstr	d6, [r4]
 80143cc:	eeb1 7b47 	vneg.f64	d7, d7
 80143d0:	4240      	negs	r0, r0
 80143d2:	ed84 7b02 	vstr	d7, [r4, #8]
 80143d6:	e77b      	b.n	80142d0 <__ieee754_rem_pio2+0x60>
 80143d8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80144c0 <__ieee754_rem_pio2+0x250>
 80143dc:	eeb0 0b46 	vmov.f64	d0, d6
 80143e0:	eea4 0b03 	vfma.f64	d0, d4, d3
 80143e4:	ee36 7b40 	vsub.f64	d7, d6, d0
 80143e8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80144c8 <__ieee754_rem_pio2+0x258>
 80143ec:	eea4 7b03 	vfma.f64	d7, d4, d3
 80143f0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80143f4:	ee30 6b47 	vsub.f64	d6, d0, d7
 80143f8:	e7b2      	b.n	8014360 <__ieee754_rem_pio2+0xf0>
 80143fa:	4b3b      	ldr	r3, [pc, #236]	; (80144e8 <__ieee754_rem_pio2+0x278>)
 80143fc:	429e      	cmp	r6, r3
 80143fe:	dd06      	ble.n	801440e <__ieee754_rem_pio2+0x19e>
 8014400:	ee30 7b40 	vsub.f64	d7, d0, d0
 8014404:	ed80 7b02 	vstr	d7, [r0, #8]
 8014408:	ed80 7b00 	vstr	d7, [r0]
 801440c:	e742      	b.n	8014294 <__ieee754_rem_pio2+0x24>
 801440e:	1532      	asrs	r2, r6, #20
 8014410:	ee10 0a10 	vmov	r0, s0
 8014414:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8014418:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801441c:	ec41 0b17 	vmov	d7, r0, r1
 8014420:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8014424:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80144d0 <__ieee754_rem_pio2+0x260>
 8014428:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801442c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014430:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014434:	ee27 7b05 	vmul.f64	d7, d7, d5
 8014438:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801443c:	a902      	add	r1, sp, #8
 801443e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8014442:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014446:	ed8d 6b04 	vstr	d6, [sp, #16]
 801444a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801444e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014452:	2603      	movs	r6, #3
 8014454:	4608      	mov	r0, r1
 8014456:	ed91 7b04 	vldr	d7, [r1, #16]
 801445a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014462:	4633      	mov	r3, r6
 8014464:	f1a1 0108 	sub.w	r1, r1, #8
 8014468:	f106 36ff 	add.w	r6, r6, #4294967295
 801446c:	d0f3      	beq.n	8014456 <__ieee754_rem_pio2+0x1e6>
 801446e:	491f      	ldr	r1, [pc, #124]	; (80144ec <__ieee754_rem_pio2+0x27c>)
 8014470:	9101      	str	r1, [sp, #4]
 8014472:	2102      	movs	r1, #2
 8014474:	9100      	str	r1, [sp, #0]
 8014476:	4621      	mov	r1, r4
 8014478:	f000 f8a6 	bl	80145c8 <__kernel_rem_pio2>
 801447c:	2d00      	cmp	r5, #0
 801447e:	f6bf af27 	bge.w	80142d0 <__ieee754_rem_pio2+0x60>
 8014482:	ed94 7b00 	vldr	d7, [r4]
 8014486:	eeb1 7b47 	vneg.f64	d7, d7
 801448a:	ed84 7b00 	vstr	d7, [r4]
 801448e:	ed94 7b02 	vldr	d7, [r4, #8]
 8014492:	e79b      	b.n	80143cc <__ieee754_rem_pio2+0x15c>
 8014494:	f3af 8000 	nop.w
 8014498:	54400000 	.word	0x54400000
 801449c:	3ff921fb 	.word	0x3ff921fb
 80144a0:	1a626331 	.word	0x1a626331
 80144a4:	3dd0b461 	.word	0x3dd0b461
 80144a8:	1a600000 	.word	0x1a600000
 80144ac:	3dd0b461 	.word	0x3dd0b461
 80144b0:	2e037073 	.word	0x2e037073
 80144b4:	3ba3198a 	.word	0x3ba3198a
 80144b8:	6dc9c883 	.word	0x6dc9c883
 80144bc:	3fe45f30 	.word	0x3fe45f30
 80144c0:	2e000000 	.word	0x2e000000
 80144c4:	3ba3198a 	.word	0x3ba3198a
 80144c8:	252049c1 	.word	0x252049c1
 80144cc:	397b839a 	.word	0x397b839a
 80144d0:	00000000 	.word	0x00000000
 80144d4:	41700000 	.word	0x41700000
 80144d8:	3fe921fb 	.word	0x3fe921fb
 80144dc:	4002d97b 	.word	0x4002d97b
 80144e0:	413921fb 	.word	0x413921fb
 80144e4:	080151bc 	.word	0x080151bc
 80144e8:	7fefffff 	.word	0x7fefffff
 80144ec:	0801523c 	.word	0x0801523c

080144f0 <__kernel_cos>:
 80144f0:	ee10 1a90 	vmov	r1, s1
 80144f4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80144f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80144fc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8014500:	da05      	bge.n	801450e <__kernel_cos+0x1e>
 8014502:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8014506:	ee17 3a90 	vmov	r3, s15
 801450a:	2b00      	cmp	r3, #0
 801450c:	d03d      	beq.n	801458a <__kernel_cos+0x9a>
 801450e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8014512:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014590 <__kernel_cos+0xa0>
 8014516:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014598 <__kernel_cos+0xa8>
 801451a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801451e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80145a0 <__kernel_cos+0xb0>
 8014522:	eea6 7b03 	vfma.f64	d7, d6, d3
 8014526:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80145a8 <__kernel_cos+0xb8>
 801452a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801452e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80145b0 <__kernel_cos+0xc0>
 8014532:	4b23      	ldr	r3, [pc, #140]	; (80145c0 <__kernel_cos+0xd0>)
 8014534:	eea6 7b03 	vfma.f64	d7, d6, d3
 8014538:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80145b8 <__kernel_cos+0xc8>
 801453c:	4299      	cmp	r1, r3
 801453e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8014542:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014546:	ee26 5b03 	vmul.f64	d5, d6, d3
 801454a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801454e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8014552:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014556:	dc04      	bgt.n	8014562 <__kernel_cos+0x72>
 8014558:	ee37 6b46 	vsub.f64	d6, d7, d6
 801455c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8014560:	4770      	bx	lr
 8014562:	4b18      	ldr	r3, [pc, #96]	; (80145c4 <__kernel_cos+0xd4>)
 8014564:	4299      	cmp	r1, r3
 8014566:	dc0d      	bgt.n	8014584 <__kernel_cos+0x94>
 8014568:	2200      	movs	r2, #0
 801456a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801456e:	ec43 2b15 	vmov	d5, r2, r3
 8014572:	ee34 0b45 	vsub.f64	d0, d4, d5
 8014576:	ee37 7b45 	vsub.f64	d7, d7, d5
 801457a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801457e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014582:	4770      	bx	lr
 8014584:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8014588:	e7f3      	b.n	8014572 <__kernel_cos+0x82>
 801458a:	eeb0 0b44 	vmov.f64	d0, d4
 801458e:	4770      	bx	lr
 8014590:	be8838d4 	.word	0xbe8838d4
 8014594:	bda8fae9 	.word	0xbda8fae9
 8014598:	bdb4b1c4 	.word	0xbdb4b1c4
 801459c:	3e21ee9e 	.word	0x3e21ee9e
 80145a0:	809c52ad 	.word	0x809c52ad
 80145a4:	be927e4f 	.word	0xbe927e4f
 80145a8:	19cb1590 	.word	0x19cb1590
 80145ac:	3efa01a0 	.word	0x3efa01a0
 80145b0:	16c15177 	.word	0x16c15177
 80145b4:	bf56c16c 	.word	0xbf56c16c
 80145b8:	5555554c 	.word	0x5555554c
 80145bc:	3fa55555 	.word	0x3fa55555
 80145c0:	3fd33332 	.word	0x3fd33332
 80145c4:	3fe90000 	.word	0x3fe90000

080145c8 <__kernel_rem_pio2>:
 80145c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145cc:	ed2d 8b06 	vpush	{d8-d10}
 80145d0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80145d4:	469b      	mov	fp, r3
 80145d6:	460f      	mov	r7, r1
 80145d8:	4bcf      	ldr	r3, [pc, #828]	; (8014918 <__kernel_rem_pio2+0x350>)
 80145da:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80145dc:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80145e0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80145e4:	9000      	str	r0, [sp, #0]
 80145e6:	f112 0f14 	cmn.w	r2, #20
 80145ea:	bfa8      	it	ge
 80145ec:	2318      	movge	r3, #24
 80145ee:	f10b 31ff 	add.w	r1, fp, #4294967295
 80145f2:	bfb8      	it	lt
 80145f4:	2300      	movlt	r3, #0
 80145f6:	f06f 0417 	mvn.w	r4, #23
 80145fa:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8014900 <__kernel_rem_pio2+0x338>
 80145fe:	bfa4      	itt	ge
 8014600:	f1a2 0a03 	subge.w	sl, r2, #3
 8014604:	fb9a f3f3 	sdivge	r3, sl, r3
 8014608:	fb03 4404 	mla	r4, r3, r4, r4
 801460c:	1a5d      	subs	r5, r3, r1
 801460e:	4414      	add	r4, r2
 8014610:	eb09 0601 	add.w	r6, r9, r1
 8014614:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8014618:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 801461c:	2200      	movs	r2, #0
 801461e:	42b2      	cmp	r2, r6
 8014620:	dd12      	ble.n	8014648 <__kernel_rem_pio2+0x80>
 8014622:	aa18      	add	r2, sp, #96	; 0x60
 8014624:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8014628:	460e      	mov	r6, r1
 801462a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 801462e:	f1cb 0a01 	rsb	sl, fp, #1
 8014632:	eb0a 0006 	add.w	r0, sl, r6
 8014636:	4581      	cmp	r9, r0
 8014638:	db25      	blt.n	8014686 <__kernel_rem_pio2+0xbe>
 801463a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8014900 <__kernel_rem_pio2+0x338>
 801463e:	f8dd e000 	ldr.w	lr, [sp]
 8014642:	4615      	mov	r5, r2
 8014644:	2000      	movs	r0, #0
 8014646:	e015      	b.n	8014674 <__kernel_rem_pio2+0xac>
 8014648:	42d5      	cmn	r5, r2
 801464a:	d409      	bmi.n	8014660 <__kernel_rem_pio2+0x98>
 801464c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8014650:	ee07 0a90 	vmov	s15, r0
 8014654:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014658:	eca8 7b02 	vstmia	r8!, {d7}
 801465c:	3201      	adds	r2, #1
 801465e:	e7de      	b.n	801461e <__kernel_rem_pio2+0x56>
 8014660:	eeb0 7b46 	vmov.f64	d7, d6
 8014664:	e7f8      	b.n	8014658 <__kernel_rem_pio2+0x90>
 8014666:	ecbe 5b02 	vldmia	lr!, {d5}
 801466a:	ed95 6b00 	vldr	d6, [r5]
 801466e:	3001      	adds	r0, #1
 8014670:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014674:	4288      	cmp	r0, r1
 8014676:	f1a5 0508 	sub.w	r5, r5, #8
 801467a:	ddf4      	ble.n	8014666 <__kernel_rem_pio2+0x9e>
 801467c:	eca8 7b02 	vstmia	r8!, {d7}
 8014680:	3208      	adds	r2, #8
 8014682:	3601      	adds	r6, #1
 8014684:	e7d5      	b.n	8014632 <__kernel_rem_pio2+0x6a>
 8014686:	aa04      	add	r2, sp, #16
 8014688:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8014908 <__kernel_rem_pio2+0x340>
 801468c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8014910 <__kernel_rem_pio2+0x348>
 8014690:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8014694:	9201      	str	r2, [sp, #4]
 8014696:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 801469a:	464e      	mov	r6, r9
 801469c:	ab90      	add	r3, sp, #576	; 0x240
 801469e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80146a2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80146a6:	ab04      	add	r3, sp, #16
 80146a8:	4618      	mov	r0, r3
 80146aa:	4632      	mov	r2, r6
 80146ac:	2a00      	cmp	r2, #0
 80146ae:	dc4e      	bgt.n	801474e <__kernel_rem_pio2+0x186>
 80146b0:	4620      	mov	r0, r4
 80146b2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80146b6:	f000 fad3 	bl	8014c60 <scalbn>
 80146ba:	eeb0 8b40 	vmov.f64	d8, d0
 80146be:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80146c2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80146c6:	f000 fa57 	bl	8014b78 <floor>
 80146ca:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80146ce:	eea0 8b47 	vfms.f64	d8, d0, d7
 80146d2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80146d6:	2c00      	cmp	r4, #0
 80146d8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80146dc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80146e0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80146e4:	ee17 8a90 	vmov	r8, s15
 80146e8:	dd46      	ble.n	8014778 <__kernel_rem_pio2+0x1b0>
 80146ea:	1e70      	subs	r0, r6, #1
 80146ec:	aa04      	add	r2, sp, #16
 80146ee:	f1c4 0c18 	rsb	ip, r4, #24
 80146f2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80146f6:	fa45 f20c 	asr.w	r2, r5, ip
 80146fa:	4490      	add	r8, r2
 80146fc:	fa02 f20c 	lsl.w	r2, r2, ip
 8014700:	1aad      	subs	r5, r5, r2
 8014702:	aa04      	add	r2, sp, #16
 8014704:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8014708:	f1c4 0217 	rsb	r2, r4, #23
 801470c:	4115      	asrs	r5, r2
 801470e:	2d00      	cmp	r5, #0
 8014710:	dd41      	ble.n	8014796 <__kernel_rem_pio2+0x1ce>
 8014712:	f04f 0c00 	mov.w	ip, #0
 8014716:	f108 0801 	add.w	r8, r8, #1
 801471a:	4660      	mov	r0, ip
 801471c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8014720:	4566      	cmp	r6, ip
 8014722:	dc69      	bgt.n	80147f8 <__kernel_rem_pio2+0x230>
 8014724:	2c00      	cmp	r4, #0
 8014726:	dd03      	ble.n	8014730 <__kernel_rem_pio2+0x168>
 8014728:	2c01      	cmp	r4, #1
 801472a:	d076      	beq.n	801481a <__kernel_rem_pio2+0x252>
 801472c:	2c02      	cmp	r4, #2
 801472e:	d07f      	beq.n	8014830 <__kernel_rem_pio2+0x268>
 8014730:	2d02      	cmp	r5, #2
 8014732:	d130      	bne.n	8014796 <__kernel_rem_pio2+0x1ce>
 8014734:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014738:	ee30 8b48 	vsub.f64	d8, d0, d8
 801473c:	b358      	cbz	r0, 8014796 <__kernel_rem_pio2+0x1ce>
 801473e:	4620      	mov	r0, r4
 8014740:	9102      	str	r1, [sp, #8]
 8014742:	f000 fa8d 	bl	8014c60 <scalbn>
 8014746:	9902      	ldr	r1, [sp, #8]
 8014748:	ee38 8b40 	vsub.f64	d8, d8, d0
 801474c:	e023      	b.n	8014796 <__kernel_rem_pio2+0x1ce>
 801474e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8014752:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8014756:	3a01      	subs	r2, #1
 8014758:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801475c:	ad68      	add	r5, sp, #416	; 0x1a0
 801475e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8014762:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014766:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 801476a:	eca0 0a01 	vstmia	r0!, {s0}
 801476e:	ed95 0b00 	vldr	d0, [r5]
 8014772:	ee37 0b00 	vadd.f64	d0, d7, d0
 8014776:	e799      	b.n	80146ac <__kernel_rem_pio2+0xe4>
 8014778:	d105      	bne.n	8014786 <__kernel_rem_pio2+0x1be>
 801477a:	1e72      	subs	r2, r6, #1
 801477c:	a804      	add	r0, sp, #16
 801477e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8014782:	15ed      	asrs	r5, r5, #23
 8014784:	e7c3      	b.n	801470e <__kernel_rem_pio2+0x146>
 8014786:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801478a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014792:	da2f      	bge.n	80147f4 <__kernel_rem_pio2+0x22c>
 8014794:	2500      	movs	r5, #0
 8014796:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801479e:	f040 8087 	bne.w	80148b0 <__kernel_rem_pio2+0x2e8>
 80147a2:	1e73      	subs	r3, r6, #1
 80147a4:	4618      	mov	r0, r3
 80147a6:	f04f 0c00 	mov.w	ip, #0
 80147aa:	4548      	cmp	r0, r9
 80147ac:	da47      	bge.n	801483e <__kernel_rem_pio2+0x276>
 80147ae:	f1bc 0f00 	cmp.w	ip, #0
 80147b2:	d070      	beq.n	8014896 <__kernel_rem_pio2+0x2ce>
 80147b4:	aa04      	add	r2, sp, #16
 80147b6:	3c18      	subs	r4, #24
 80147b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80147bc:	2a00      	cmp	r2, #0
 80147be:	d075      	beq.n	80148ac <__kernel_rem_pio2+0x2e4>
 80147c0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80147c4:	4620      	mov	r0, r4
 80147c6:	9300      	str	r3, [sp, #0]
 80147c8:	f000 fa4a 	bl	8014c60 <scalbn>
 80147cc:	9b00      	ldr	r3, [sp, #0]
 80147ce:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8014908 <__kernel_rem_pio2+0x340>
 80147d2:	461a      	mov	r2, r3
 80147d4:	2a00      	cmp	r2, #0
 80147d6:	f280 80ac 	bge.w	8014932 <__kernel_rem_pio2+0x36a>
 80147da:	4619      	mov	r1, r3
 80147dc:	2000      	movs	r0, #0
 80147de:	2900      	cmp	r1, #0
 80147e0:	f2c0 80cd 	blt.w	801497e <__kernel_rem_pio2+0x3b6>
 80147e4:	aa68      	add	r2, sp, #416	; 0x1a0
 80147e6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80147ea:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8014900 <__kernel_rem_pio2+0x338>
 80147ee:	4e4b      	ldr	r6, [pc, #300]	; (801491c <__kernel_rem_pio2+0x354>)
 80147f0:	2200      	movs	r2, #0
 80147f2:	e0b8      	b.n	8014966 <__kernel_rem_pio2+0x39e>
 80147f4:	2502      	movs	r5, #2
 80147f6:	e78c      	b.n	8014712 <__kernel_rem_pio2+0x14a>
 80147f8:	681a      	ldr	r2, [r3, #0]
 80147fa:	b948      	cbnz	r0, 8014810 <__kernel_rem_pio2+0x248>
 80147fc:	b11a      	cbz	r2, 8014806 <__kernel_rem_pio2+0x23e>
 80147fe:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8014802:	601a      	str	r2, [r3, #0]
 8014804:	2201      	movs	r2, #1
 8014806:	f10c 0c01 	add.w	ip, ip, #1
 801480a:	3304      	adds	r3, #4
 801480c:	4610      	mov	r0, r2
 801480e:	e787      	b.n	8014720 <__kernel_rem_pio2+0x158>
 8014810:	ebae 0202 	sub.w	r2, lr, r2
 8014814:	601a      	str	r2, [r3, #0]
 8014816:	4602      	mov	r2, r0
 8014818:	e7f5      	b.n	8014806 <__kernel_rem_pio2+0x23e>
 801481a:	1e72      	subs	r2, r6, #1
 801481c:	ab04      	add	r3, sp, #16
 801481e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014822:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014826:	f10d 0c10 	add.w	ip, sp, #16
 801482a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 801482e:	e77f      	b.n	8014730 <__kernel_rem_pio2+0x168>
 8014830:	1e72      	subs	r2, r6, #1
 8014832:	ab04      	add	r3, sp, #16
 8014834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014838:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801483c:	e7f3      	b.n	8014826 <__kernel_rem_pio2+0x25e>
 801483e:	aa04      	add	r2, sp, #16
 8014840:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8014844:	3801      	subs	r0, #1
 8014846:	ea4c 0c02 	orr.w	ip, ip, r2
 801484a:	e7ae      	b.n	80147aa <__kernel_rem_pio2+0x1e2>
 801484c:	3001      	adds	r0, #1
 801484e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014852:	2a00      	cmp	r2, #0
 8014854:	d0fa      	beq.n	801484c <__kernel_rem_pio2+0x284>
 8014856:	eb06 020b 	add.w	r2, r6, fp
 801485a:	ad18      	add	r5, sp, #96	; 0x60
 801485c:	1c73      	adds	r3, r6, #1
 801485e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8014862:	4406      	add	r6, r0
 8014864:	429e      	cmp	r6, r3
 8014866:	f6ff af19 	blt.w	801469c <__kernel_rem_pio2+0xd4>
 801486a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801486e:	9d00      	ldr	r5, [sp, #0]
 8014870:	ee07 0a90 	vmov	s15, r0
 8014874:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014878:	2000      	movs	r0, #0
 801487a:	eca2 7b02 	vstmia	r2!, {d7}
 801487e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014900 <__kernel_rem_pio2+0x338>
 8014882:	4694      	mov	ip, r2
 8014884:	4288      	cmp	r0, r1
 8014886:	dd09      	ble.n	801489c <__kernel_rem_pio2+0x2d4>
 8014888:	a868      	add	r0, sp, #416	; 0x1a0
 801488a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 801488e:	ed80 7b00 	vstr	d7, [r0]
 8014892:	3301      	adds	r3, #1
 8014894:	e7e6      	b.n	8014864 <__kernel_rem_pio2+0x29c>
 8014896:	9b01      	ldr	r3, [sp, #4]
 8014898:	2001      	movs	r0, #1
 801489a:	e7d8      	b.n	801484e <__kernel_rem_pio2+0x286>
 801489c:	ecb5 5b02 	vldmia	r5!, {d5}
 80148a0:	ed3c 6b02 	vldmdb	ip!, {d6}
 80148a4:	3001      	adds	r0, #1
 80148a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80148aa:	e7eb      	b.n	8014884 <__kernel_rem_pio2+0x2bc>
 80148ac:	3b01      	subs	r3, #1
 80148ae:	e781      	b.n	80147b4 <__kernel_rem_pio2+0x1ec>
 80148b0:	4260      	negs	r0, r4
 80148b2:	eeb0 0b48 	vmov.f64	d0, d8
 80148b6:	f000 f9d3 	bl	8014c60 <scalbn>
 80148ba:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8014910 <__kernel_rem_pio2+0x348>
 80148be:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80148c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148c6:	db2b      	blt.n	8014920 <__kernel_rem_pio2+0x358>
 80148c8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8014908 <__kernel_rem_pio2+0x340>
 80148cc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80148d0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80148d4:	aa04      	add	r2, sp, #16
 80148d6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80148da:	eea5 0b46 	vfms.f64	d0, d5, d6
 80148de:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80148e2:	a904      	add	r1, sp, #16
 80148e4:	ee10 3a10 	vmov	r3, s0
 80148e8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80148ec:	ee17 2a10 	vmov	r2, s14
 80148f0:	1c73      	adds	r3, r6, #1
 80148f2:	3418      	adds	r4, #24
 80148f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80148f8:	e762      	b.n	80147c0 <__kernel_rem_pio2+0x1f8>
 80148fa:	bf00      	nop
 80148fc:	f3af 8000 	nop.w
	...
 801490c:	3e700000 	.word	0x3e700000
 8014910:	00000000 	.word	0x00000000
 8014914:	41700000 	.word	0x41700000
 8014918:	08015388 	.word	0x08015388
 801491c:	08015348 	.word	0x08015348
 8014920:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014924:	aa04      	add	r2, sp, #16
 8014926:	ee10 3a10 	vmov	r3, s0
 801492a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801492e:	4633      	mov	r3, r6
 8014930:	e746      	b.n	80147c0 <__kernel_rem_pio2+0x1f8>
 8014932:	a804      	add	r0, sp, #16
 8014934:	a968      	add	r1, sp, #416	; 0x1a0
 8014936:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801493a:	9000      	str	r0, [sp, #0]
 801493c:	ee07 0a90 	vmov	s15, r0
 8014940:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014944:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014948:	3a01      	subs	r2, #1
 801494a:	ee27 7b00 	vmul.f64	d7, d7, d0
 801494e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8014952:	ed81 7b00 	vstr	d7, [r1]
 8014956:	e73d      	b.n	80147d4 <__kernel_rem_pio2+0x20c>
 8014958:	ecb6 5b02 	vldmia	r6!, {d5}
 801495c:	ecb4 6b02 	vldmia	r4!, {d6}
 8014960:	3201      	adds	r2, #1
 8014962:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014966:	454a      	cmp	r2, r9
 8014968:	dc01      	bgt.n	801496e <__kernel_rem_pio2+0x3a6>
 801496a:	4290      	cmp	r0, r2
 801496c:	daf4      	bge.n	8014958 <__kernel_rem_pio2+0x390>
 801496e:	aa40      	add	r2, sp, #256	; 0x100
 8014970:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014974:	ed82 7b00 	vstr	d7, [r2]
 8014978:	3901      	subs	r1, #1
 801497a:	3001      	adds	r0, #1
 801497c:	e72f      	b.n	80147de <__kernel_rem_pio2+0x216>
 801497e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8014980:	2a02      	cmp	r2, #2
 8014982:	dc0a      	bgt.n	801499a <__kernel_rem_pio2+0x3d2>
 8014984:	2a00      	cmp	r2, #0
 8014986:	dc5a      	bgt.n	8014a3e <__kernel_rem_pio2+0x476>
 8014988:	d039      	beq.n	80149fe <__kernel_rem_pio2+0x436>
 801498a:	f008 0007 	and.w	r0, r8, #7
 801498e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8014992:	ecbd 8b06 	vpop	{d8-d10}
 8014996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801499a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 801499c:	2a03      	cmp	r2, #3
 801499e:	d1f4      	bne.n	801498a <__kernel_rem_pio2+0x3c2>
 80149a0:	aa40      	add	r2, sp, #256	; 0x100
 80149a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80149a6:	4611      	mov	r1, r2
 80149a8:	4618      	mov	r0, r3
 80149aa:	2800      	cmp	r0, #0
 80149ac:	f1a1 0108 	sub.w	r1, r1, #8
 80149b0:	dc52      	bgt.n	8014a58 <__kernel_rem_pio2+0x490>
 80149b2:	4619      	mov	r1, r3
 80149b4:	2901      	cmp	r1, #1
 80149b6:	f1a2 0208 	sub.w	r2, r2, #8
 80149ba:	dc5d      	bgt.n	8014a78 <__kernel_rem_pio2+0x4b0>
 80149bc:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8014ac0 <__kernel_rem_pio2+0x4f8>
 80149c0:	2b01      	cmp	r3, #1
 80149c2:	dc69      	bgt.n	8014a98 <__kernel_rem_pio2+0x4d0>
 80149c4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80149c8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80149cc:	2d00      	cmp	r5, #0
 80149ce:	d16c      	bne.n	8014aaa <__kernel_rem_pio2+0x4e2>
 80149d0:	ed87 5b00 	vstr	d5, [r7]
 80149d4:	ed87 6b02 	vstr	d6, [r7, #8]
 80149d8:	ed87 7b04 	vstr	d7, [r7, #16]
 80149dc:	e7d5      	b.n	801498a <__kernel_rem_pio2+0x3c2>
 80149de:	aa40      	add	r2, sp, #256	; 0x100
 80149e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80149e4:	ed92 6b00 	vldr	d6, [r2]
 80149e8:	3b01      	subs	r3, #1
 80149ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	daf5      	bge.n	80149de <__kernel_rem_pio2+0x416>
 80149f2:	b10d      	cbz	r5, 80149f8 <__kernel_rem_pio2+0x430>
 80149f4:	eeb1 7b47 	vneg.f64	d7, d7
 80149f8:	ed87 7b00 	vstr	d7, [r7]
 80149fc:	e7c5      	b.n	801498a <__kernel_rem_pio2+0x3c2>
 80149fe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8014ac0 <__kernel_rem_pio2+0x4f8>
 8014a02:	e7f4      	b.n	80149ee <__kernel_rem_pio2+0x426>
 8014a04:	a940      	add	r1, sp, #256	; 0x100
 8014a06:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014a0a:	ed91 7b00 	vldr	d7, [r1]
 8014a0e:	3a01      	subs	r2, #1
 8014a10:	ee36 6b07 	vadd.f64	d6, d6, d7
 8014a14:	2a00      	cmp	r2, #0
 8014a16:	daf5      	bge.n	8014a04 <__kernel_rem_pio2+0x43c>
 8014a18:	b1ad      	cbz	r5, 8014a46 <__kernel_rem_pio2+0x47e>
 8014a1a:	eeb1 7b46 	vneg.f64	d7, d6
 8014a1e:	ed87 7b00 	vstr	d7, [r7]
 8014a22:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8014a26:	a942      	add	r1, sp, #264	; 0x108
 8014a28:	2201      	movs	r2, #1
 8014a2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014a2e:	4293      	cmp	r3, r2
 8014a30:	da0c      	bge.n	8014a4c <__kernel_rem_pio2+0x484>
 8014a32:	b10d      	cbz	r5, 8014a38 <__kernel_rem_pio2+0x470>
 8014a34:	eeb1 7b47 	vneg.f64	d7, d7
 8014a38:	ed87 7b02 	vstr	d7, [r7, #8]
 8014a3c:	e7a5      	b.n	801498a <__kernel_rem_pio2+0x3c2>
 8014a3e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014ac0 <__kernel_rem_pio2+0x4f8>
 8014a42:	461a      	mov	r2, r3
 8014a44:	e7e6      	b.n	8014a14 <__kernel_rem_pio2+0x44c>
 8014a46:	eeb0 7b46 	vmov.f64	d7, d6
 8014a4a:	e7e8      	b.n	8014a1e <__kernel_rem_pio2+0x456>
 8014a4c:	ecb1 6b02 	vldmia	r1!, {d6}
 8014a50:	3201      	adds	r2, #1
 8014a52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014a56:	e7ea      	b.n	8014a2e <__kernel_rem_pio2+0x466>
 8014a58:	ed91 7b00 	vldr	d7, [r1]
 8014a5c:	ed91 5b02 	vldr	d5, [r1, #8]
 8014a60:	3801      	subs	r0, #1
 8014a62:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014a66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014a6a:	ed81 6b00 	vstr	d6, [r1]
 8014a6e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014a72:	ed81 7b02 	vstr	d7, [r1, #8]
 8014a76:	e798      	b.n	80149aa <__kernel_rem_pio2+0x3e2>
 8014a78:	ed92 7b00 	vldr	d7, [r2]
 8014a7c:	ed92 5b02 	vldr	d5, [r2, #8]
 8014a80:	3901      	subs	r1, #1
 8014a82:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014a86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014a8a:	ed82 6b00 	vstr	d6, [r2]
 8014a8e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014a92:	ed82 7b02 	vstr	d7, [r2, #8]
 8014a96:	e78d      	b.n	80149b4 <__kernel_rem_pio2+0x3ec>
 8014a98:	aa40      	add	r2, sp, #256	; 0x100
 8014a9a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014a9e:	ed92 6b00 	vldr	d6, [r2]
 8014aa2:	3b01      	subs	r3, #1
 8014aa4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014aa8:	e78a      	b.n	80149c0 <__kernel_rem_pio2+0x3f8>
 8014aaa:	eeb1 5b45 	vneg.f64	d5, d5
 8014aae:	eeb1 6b46 	vneg.f64	d6, d6
 8014ab2:	ed87 5b00 	vstr	d5, [r7]
 8014ab6:	eeb1 7b47 	vneg.f64	d7, d7
 8014aba:	ed87 6b02 	vstr	d6, [r7, #8]
 8014abe:	e78b      	b.n	80149d8 <__kernel_rem_pio2+0x410>
	...

08014ac8 <__kernel_sin>:
 8014ac8:	ee10 3a90 	vmov	r3, s1
 8014acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014ad0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014ad4:	da04      	bge.n	8014ae0 <__kernel_sin+0x18>
 8014ad6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8014ada:	ee17 3a90 	vmov	r3, s15
 8014ade:	b35b      	cbz	r3, 8014b38 <__kernel_sin+0x70>
 8014ae0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8014ae4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8014ae8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8014b40 <__kernel_sin+0x78>
 8014aec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014b48 <__kernel_sin+0x80>
 8014af0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8014af4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014b50 <__kernel_sin+0x88>
 8014af8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014afc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014b58 <__kernel_sin+0x90>
 8014b00:	eea7 4b06 	vfma.f64	d4, d7, d6
 8014b04:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014b60 <__kernel_sin+0x98>
 8014b08:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014b0c:	b930      	cbnz	r0, 8014b1c <__kernel_sin+0x54>
 8014b0e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014b68 <__kernel_sin+0xa0>
 8014b12:	eea6 4b07 	vfma.f64	d4, d6, d7
 8014b16:	eea4 0b05 	vfma.f64	d0, d4, d5
 8014b1a:	4770      	bx	lr
 8014b1c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8014b20:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8014b24:	eea1 7b04 	vfma.f64	d7, d1, d4
 8014b28:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8014b2c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8014b70 <__kernel_sin+0xa8>
 8014b30:	eea5 1b07 	vfma.f64	d1, d5, d7
 8014b34:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014b38:	4770      	bx	lr
 8014b3a:	bf00      	nop
 8014b3c:	f3af 8000 	nop.w
 8014b40:	5acfd57c 	.word	0x5acfd57c
 8014b44:	3de5d93a 	.word	0x3de5d93a
 8014b48:	8a2b9ceb 	.word	0x8a2b9ceb
 8014b4c:	be5ae5e6 	.word	0xbe5ae5e6
 8014b50:	57b1fe7d 	.word	0x57b1fe7d
 8014b54:	3ec71de3 	.word	0x3ec71de3
 8014b58:	19c161d5 	.word	0x19c161d5
 8014b5c:	bf2a01a0 	.word	0xbf2a01a0
 8014b60:	1110f8a6 	.word	0x1110f8a6
 8014b64:	3f811111 	.word	0x3f811111
 8014b68:	55555549 	.word	0x55555549
 8014b6c:	bfc55555 	.word	0xbfc55555
 8014b70:	55555549 	.word	0x55555549
 8014b74:	3fc55555 	.word	0x3fc55555

08014b78 <floor>:
 8014b78:	ee10 1a90 	vmov	r1, s1
 8014b7c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014b80:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8014b84:	2b13      	cmp	r3, #19
 8014b86:	b530      	push	{r4, r5, lr}
 8014b88:	ee10 0a10 	vmov	r0, s0
 8014b8c:	ee10 5a10 	vmov	r5, s0
 8014b90:	dc31      	bgt.n	8014bf6 <floor+0x7e>
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	da15      	bge.n	8014bc2 <floor+0x4a>
 8014b96:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014c50 <floor+0xd8>
 8014b9a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014b9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba6:	dd07      	ble.n	8014bb8 <floor+0x40>
 8014ba8:	2900      	cmp	r1, #0
 8014baa:	da4e      	bge.n	8014c4a <floor+0xd2>
 8014bac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014bb0:	4318      	orrs	r0, r3
 8014bb2:	d001      	beq.n	8014bb8 <floor+0x40>
 8014bb4:	4928      	ldr	r1, [pc, #160]	; (8014c58 <floor+0xe0>)
 8014bb6:	2000      	movs	r0, #0
 8014bb8:	460b      	mov	r3, r1
 8014bba:	4602      	mov	r2, r0
 8014bbc:	ec43 2b10 	vmov	d0, r2, r3
 8014bc0:	e020      	b.n	8014c04 <floor+0x8c>
 8014bc2:	4a26      	ldr	r2, [pc, #152]	; (8014c5c <floor+0xe4>)
 8014bc4:	411a      	asrs	r2, r3
 8014bc6:	ea01 0402 	and.w	r4, r1, r2
 8014bca:	4304      	orrs	r4, r0
 8014bcc:	d01a      	beq.n	8014c04 <floor+0x8c>
 8014bce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014c50 <floor+0xd8>
 8014bd2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014bd6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bde:	ddeb      	ble.n	8014bb8 <floor+0x40>
 8014be0:	2900      	cmp	r1, #0
 8014be2:	bfbe      	ittt	lt
 8014be4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8014be8:	fa40 f303 	asrlt.w	r3, r0, r3
 8014bec:	18c9      	addlt	r1, r1, r3
 8014bee:	ea21 0102 	bic.w	r1, r1, r2
 8014bf2:	2000      	movs	r0, #0
 8014bf4:	e7e0      	b.n	8014bb8 <floor+0x40>
 8014bf6:	2b33      	cmp	r3, #51	; 0x33
 8014bf8:	dd05      	ble.n	8014c06 <floor+0x8e>
 8014bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014bfe:	d101      	bne.n	8014c04 <floor+0x8c>
 8014c00:	ee30 0b00 	vadd.f64	d0, d0, d0
 8014c04:	bd30      	pop	{r4, r5, pc}
 8014c06:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8014c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8014c0e:	40e2      	lsrs	r2, r4
 8014c10:	4202      	tst	r2, r0
 8014c12:	d0f7      	beq.n	8014c04 <floor+0x8c>
 8014c14:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014c50 <floor+0xd8>
 8014c18:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014c1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c24:	ddc8      	ble.n	8014bb8 <floor+0x40>
 8014c26:	2900      	cmp	r1, #0
 8014c28:	da02      	bge.n	8014c30 <floor+0xb8>
 8014c2a:	2b14      	cmp	r3, #20
 8014c2c:	d103      	bne.n	8014c36 <floor+0xbe>
 8014c2e:	3101      	adds	r1, #1
 8014c30:	ea20 0002 	bic.w	r0, r0, r2
 8014c34:	e7c0      	b.n	8014bb8 <floor+0x40>
 8014c36:	2401      	movs	r4, #1
 8014c38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014c3c:	fa04 f303 	lsl.w	r3, r4, r3
 8014c40:	4418      	add	r0, r3
 8014c42:	42a8      	cmp	r0, r5
 8014c44:	bf38      	it	cc
 8014c46:	1909      	addcc	r1, r1, r4
 8014c48:	e7f2      	b.n	8014c30 <floor+0xb8>
 8014c4a:	2000      	movs	r0, #0
 8014c4c:	4601      	mov	r1, r0
 8014c4e:	e7b3      	b.n	8014bb8 <floor+0x40>
 8014c50:	8800759c 	.word	0x8800759c
 8014c54:	7e37e43c 	.word	0x7e37e43c
 8014c58:	bff00000 	.word	0xbff00000
 8014c5c:	000fffff 	.word	0x000fffff

08014c60 <scalbn>:
 8014c60:	b082      	sub	sp, #8
 8014c62:	ed8d 0b00 	vstr	d0, [sp]
 8014c66:	9b01      	ldr	r3, [sp, #4]
 8014c68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014c6c:	b9a2      	cbnz	r2, 8014c98 <scalbn+0x38>
 8014c6e:	9a00      	ldr	r2, [sp, #0]
 8014c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014c74:	4313      	orrs	r3, r2
 8014c76:	d03a      	beq.n	8014cee <scalbn+0x8e>
 8014c78:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8014d50 <scalbn+0xf0>
 8014c7c:	4b40      	ldr	r3, [pc, #256]	; (8014d80 <scalbn+0x120>)
 8014c7e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014c82:	4298      	cmp	r0, r3
 8014c84:	ed8d 7b00 	vstr	d7, [sp]
 8014c88:	da11      	bge.n	8014cae <scalbn+0x4e>
 8014c8a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8014d58 <scalbn+0xf8>
 8014c8e:	ed9d 6b00 	vldr	d6, [sp]
 8014c92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014c96:	e007      	b.n	8014ca8 <scalbn+0x48>
 8014c98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014c9c:	428a      	cmp	r2, r1
 8014c9e:	d10a      	bne.n	8014cb6 <scalbn+0x56>
 8014ca0:	ed9d 7b00 	vldr	d7, [sp]
 8014ca4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014ca8:	ed8d 7b00 	vstr	d7, [sp]
 8014cac:	e01f      	b.n	8014cee <scalbn+0x8e>
 8014cae:	9b01      	ldr	r3, [sp, #4]
 8014cb0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014cb4:	3a36      	subs	r2, #54	; 0x36
 8014cb6:	4402      	add	r2, r0
 8014cb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014cbc:	428a      	cmp	r2, r1
 8014cbe:	dd0a      	ble.n	8014cd6 <scalbn+0x76>
 8014cc0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8014d60 <scalbn+0x100>
 8014cc4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8014d68 <scalbn+0x108>
 8014cc8:	eeb0 6b47 	vmov.f64	d6, d7
 8014ccc:	9b01      	ldr	r3, [sp, #4]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	fe27 7b05 	vselge.f64	d7, d7, d5
 8014cd4:	e7dd      	b.n	8014c92 <scalbn+0x32>
 8014cd6:	2a00      	cmp	r2, #0
 8014cd8:	dd0d      	ble.n	8014cf6 <scalbn+0x96>
 8014cda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014cde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014ce2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014ce6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014cea:	e9cd 0100 	strd	r0, r1, [sp]
 8014cee:	ed9d 0b00 	vldr	d0, [sp]
 8014cf2:	b002      	add	sp, #8
 8014cf4:	4770      	bx	lr
 8014cf6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014cfa:	da18      	bge.n	8014d2e <scalbn+0xce>
 8014cfc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014d00:	4298      	cmp	r0, r3
 8014d02:	9b01      	ldr	r3, [sp, #4]
 8014d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014d08:	dd09      	ble.n	8014d1e <scalbn+0xbe>
 8014d0a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8014d60 <scalbn+0x100>
 8014d0e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8014d68 <scalbn+0x108>
 8014d12:	eeb0 6b47 	vmov.f64	d6, d7
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8014d1c:	e7b9      	b.n	8014c92 <scalbn+0x32>
 8014d1e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014d58 <scalbn+0xf8>
 8014d22:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8014d70 <scalbn+0x110>
 8014d26:	eeb0 6b47 	vmov.f64	d6, d7
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	e7f4      	b.n	8014d18 <scalbn+0xb8>
 8014d2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014d36:	3236      	adds	r2, #54	; 0x36
 8014d38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014d3c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014d40:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8014d78 <scalbn+0x118>
 8014d44:	ec41 0b17 	vmov	d7, r0, r1
 8014d48:	e7a3      	b.n	8014c92 <scalbn+0x32>
 8014d4a:	bf00      	nop
 8014d4c:	f3af 8000 	nop.w
 8014d50:	00000000 	.word	0x00000000
 8014d54:	43500000 	.word	0x43500000
 8014d58:	c2f8f359 	.word	0xc2f8f359
 8014d5c:	01a56e1f 	.word	0x01a56e1f
 8014d60:	8800759c 	.word	0x8800759c
 8014d64:	7e37e43c 	.word	0x7e37e43c
 8014d68:	8800759c 	.word	0x8800759c
 8014d6c:	fe37e43c 	.word	0xfe37e43c
 8014d70:	c2f8f359 	.word	0xc2f8f359
 8014d74:	81a56e1f 	.word	0x81a56e1f
 8014d78:	00000000 	.word	0x00000000
 8014d7c:	3c900000 	.word	0x3c900000
 8014d80:	ffff3cb0 	.word	0xffff3cb0

08014d84 <_init>:
 8014d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d86:	bf00      	nop
 8014d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d8a:	bc08      	pop	{r3}
 8014d8c:	469e      	mov	lr, r3
 8014d8e:	4770      	bx	lr

08014d90 <_fini>:
 8014d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d92:	bf00      	nop
 8014d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d96:	bc08      	pop	{r3}
 8014d98:	469e      	mov	lr, r3
 8014d9a:	4770      	bx	lr
