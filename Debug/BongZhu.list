
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f414  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800f6e8  0800f6e8  0001f6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fce0  0800fce0  0001fce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fce8  0800fce8  0001fce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fcec  0800fcec  0001fcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800fcf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c60  240001e0  0800fed0  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e40  0800fed0  00020e40  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038284  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005823  00000000  00000000  00058492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a88  00000000  00000000  0005dcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018a0  00000000  00000000  0005f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003976c  00000000  00000000  00060fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002637a  00000000  00000000  0009a74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016de61  00000000  00000000  000c0ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0022e927  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007ee0  00000000  00000000  0022e97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f6cc 	.word	0x0800f6cc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	0800f6cc 	.word	0x0800f6cc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include "AMT21.h"

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->prev_position = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	821a      	strh	r2, [r3, #16]
	dev->k0 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	749a      	strb	r2, [r3, #18]
	dev->k1 = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	74da      	strb	r2, [r3, #19]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f005 faf5 	bl	8005d0c <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
			//1, 100);
	HAL_UART_Transmit(dev->uartHandle, &(dev->address),
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 010a 	add.w	r1, r3, #10
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	f009 fe82 	bl	800a438 <HAL_UART_Transmit>
				1, 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6858      	ldr	r0, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	891b      	ldrh	r3, [r3, #8]
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	f005 fae4 	bl	8005d0c <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 010c 	add.w	r1, r3, #12
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2202      	movs	r2, #2
 8000752:	f009 ff07 	bl	800a564 <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x4000) == 0x4000;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	749a      	strb	r2, [r3, #18]
	dev->k1 = (dev->uart_buf & 0x8000) == 0x8000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	0bdb      	lsrs	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	74da      	strb	r2, [r3, #19]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AMT21_check_value>:
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = dev->uart_buf & 0x3FFF;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	899b      	ldrh	r3, [r3, #12]
 8000794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000798:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = dev->uart_buf & 0x0001;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	899b      	ldrh	r3, [r3, #12]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 1) & 0x0001;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	899b      	ldrh	r3, [r3, #12]
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	737b      	strb	r3, [r7, #13]
 80007ba:	e020      	b.n	80007fe <AMT21_check_value+0x76>
		dev->uart_buf = dev->uart_buf >> 2;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d8:	4053      	eors	r3, r2
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007f2:	4053      	eors	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007f8:	7b7b      	ldrb	r3, [r7, #13]
 80007fa:	3301      	adds	r3, #1
 80007fc:	737b      	strb	r3, [r7, #13]
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	2b05      	cmp	r3, #5
 8000802:	d9db      	bls.n	80007bc <AMT21_check_value+0x34>
	}
	k0_check = !k0_check;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73bb      	strb	r3, [r7, #14]
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7c9b      	ldrb	r3, [r3, #18]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	429a      	cmp	r2, r3
 8000828:	d109      	bne.n	800083e <AMT21_check_value+0xb6>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7cdb      	ldrb	r3, [r3, #19]
 800082e:	7bba      	ldrb	r2, [r7, #14]
 8000830:	429a      	cmp	r2, r3
 8000832:	d104      	bne.n	800083e <AMT21_check_value+0xb6>
		dev->position = position_temp;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	897a      	ldrh	r2, [r7, #10]
 8000838:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <AMT21_check_value+0xb8>
	} else {
		return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
	}
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <AMT21_unwrap>:

int32_t AMT21_unwrap(int32_t pulse, int32_t prev_pulse) {
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	int32_t dPulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
	if (pulse - prev_pulse > 8191) {
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000864:	db06      	blt.n	8000874 <AMT21_unwrap+0x28>
		dPulse = -(16383 - (pulse-prev_pulse));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <AMT21_unwrap+0x5c>)
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e011      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else if ( pulse -  prev_pulse < -8191) {
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc07      	bgt.n	8000890 <AMT21_unwrap+0x44>
		dPulse = 16383 - (prev_pulse - pulse);
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	1ad2      	subs	r2, r2, r3
 8000886:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e003      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else {
		dPulse =  pulse -  prev_pulse;
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	60fb      	str	r3, [r7, #12]
	}
	return dPulse;
 8000898:	68fb      	ldr	r3, [r7, #12]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	ffffc001 	.word	0xffffc001

080008ac <KalmanFilter_initialise>:
 *  Created on: Jan 28, 2022
 *      Author: fame
 */
#include "KalmanFilter.h"

void KalmanFilter_initialise(KalmanFilter *dev, float x1,float x2,float p11,float p12,float p21,float p22, float R, float Q){
 80008ac:	b480      	push	{r7}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6278      	str	r0, [r7, #36]	; 0x24
 80008b4:	ed87 0a08 	vstr	s0, [r7, #32]
 80008b8:	edc7 0a07 	vstr	s1, [r7, #28]
 80008bc:	ed87 1a06 	vstr	s2, [r7, #24]
 80008c0:	edc7 1a05 	vstr	s3, [r7, #20]
 80008c4:	ed87 2a04 	vstr	s4, [r7, #16]
 80008c8:	edc7 2a03 	vstr	s5, [r7, #12]
 80008cc:	ed87 3a02 	vstr	s6, [r7, #8]
 80008d0:	edc7 3a01 	vstr	s7, [r7, #4]
	/* Parameter */
	dev->R = R;
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	601a      	str	r2, [r3, #0]
	dev->Q = Q;
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	605a      	str	r2, [r3, #4]

	/* KF "memory" */
	dev->x1 = x1;
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	6a3a      	ldr	r2, [r7, #32]
 80008e4:	609a      	str	r2, [r3, #8]
	dev->x2 = x2;
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	69fa      	ldr	r2, [r7, #28]
 80008ea:	60da      	str	r2, [r3, #12]
	dev->p11 = p11;
 80008ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	611a      	str	r2, [r3, #16]
	dev->p12 = p12;
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	615a      	str	r2, [r3, #20]
	dev->p21 = p21;
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	619a      	str	r2, [r3, #24]
	dev->p22 = p22;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	61da      	str	r2, [r3, #28]
}
 8000904:	bf00      	nop
 8000906:	372c      	adds	r7, #44	; 0x2c
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <PIDController_initialise>:
 *  Created on: Jan 21, 2022
 *      Author: fame
 */
#include "PID.h"

void PIDController_initialise(PIDController *pid, float Kp, float Ki, float Kd){
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	ed87 0a02 	vstr	s0, [r7, #8]
 800091c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000920:	ed87 1a00 	vstr	s2, [r7]
	pid->Kp = Kp;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	609a      	str	r2, [r3, #8]
	pid->out = 0;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f04f 0200 	mov.w	r2, #0
 800093c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <PIDController_update>:

float PIDController_update(PIDController *pid, float setpoint, float measurement) {
 800094c:	b480      	push	{r7}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	ed87 0a02 	vstr	s0, [r7, #8]
 8000958:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measurement;
 800095c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000960:	edd7 7a01 	vldr	s15, [r7, #4]
 8000964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000968:	edc7 7a05 	vstr	s15, [r7, #20]
	/*
	 * P term
	 */
	pid->proportional_term = pid->Kp * error;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	ed93 7a00 	vldr	s14, [r3]
 8000972:	edd7 7a05 	vldr	s15, [r7, #20]
 8000976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	edc3 7a07 	vstr	s15, [r3, #28]

	/*
	 * I term
	 */
	pid->integrator += error;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	ed93 7a08 	vldr	s14, [r3, #32]
 8000986:	edd7 7a05 	vldr	s15, [r7, #20]
 800098a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->integral_term = pid->Ki * pid->integrator;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	ed93 7a01 	vldr	s14, [r3, #4]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	edd3 7a08 	vldr	s15, [r3, #32]
 80009a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	/*
	 * D term
	 */
	pid->derivative_term = pid->Kd * (error - pid->prevError);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80009b6:	edd7 6a05 	vldr	s13, [r7, #20]
 80009ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80009be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	pid->prevError = error;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
	/*
	 * Calculate a final value
	 */
	pid->out = pid->proportional_term + pid->integral_term + pid->derivative_term;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	ed93 7a07 	vldr	s14, [r3, #28]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80009da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80009e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	if (pid->out > 2500){
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80009f4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000a3c <PIDController_update+0xf0>
 80009f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a00:	dd03      	ble.n	8000a0a <PIDController_update+0xbe>
		pid->out = 2500;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <PIDController_update+0xf4>)
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
 8000a08:	e00c      	b.n	8000a24 <PIDController_update+0xd8>
	}
	else if(pid->out < -2500){
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000a10:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000a44 <PIDController_update+0xf8>
 8000a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1c:	d502      	bpl.n	8000a24 <PIDController_update+0xd8>
		pid->out = -2500;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <PIDController_update+0xfc>)
 8000a22:	631a      	str	r2, [r3, #48]	; 0x30
	}
	return pid->out;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	ee07 3a90 	vmov	s15, r3
}
 8000a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a30:	371c      	adds	r7, #28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	451c4000 	.word	0x451c4000
 8000a40:	451c4000 	.word	0x451c4000
 8000a44:	c51c4000 	.word	0xc51c4000
 8000a48:	c51c4000 	.word	0xc51c4000

08000a4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2224      	movs	r2, #36	; 0x24
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00b fc19 	bl	800c29c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a6c:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <MX_ADC1_Init+0xe8>)
 8000a6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac8:	4819      	ldr	r0, [pc, #100]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aca:	f002 fef3 	bl	80038b4 <HAL_ADC_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 fde0 	bl	8001698 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4813      	ldr	r0, [pc, #76]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ae4:	f003 ff2c 	bl	8004940 <HAL_ADCEx_MultiModeConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000aee:	f000 fdd3 	bl	8001698 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_ADC1_Init+0xec>)
 8000af4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af6:	2306      	movs	r3, #6
 8000af8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000afe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b02:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b04:	2304      	movs	r3, #4
 8000b06:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000b18:	f003 f8d4 	bl	8003cc4 <HAL_ADC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000b22:	f000 fdb9 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3730      	adds	r7, #48	; 0x30
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24000340 	.word	0x24000340
 8000b34:	40022000 	.word	0x40022000
 8000b38:	2a000400 	.word	0x2a000400

08000b3c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2224      	movs	r2, #36	; 0x24
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00b fba7 	bl	800c29c <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b50:	4a30      	ldr	r2, [pc, #192]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b52:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b66:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b68:	2204      	movs	r2, #4
 8000b6a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bba:	4815      	ldr	r0, [pc, #84]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000bbc:	f002 fe7a 	bl	80038b4 <HAL_ADC_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000bc6:	f000 fd67 	bl	8001698 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_ADC3_Init+0xdc>)
 8000bcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bd6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bda:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_ADC3_Init+0xd4>)
 8000bfa:	f003 f863 	bl	8003cc4 <HAL_ADC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000c04:	f000 fd48 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	240003b0 	.word	0x240003b0
 8000c14:	58026000 	.word	0x58026000
 8000c18:	c7520000 	.word	0xc7520000

08000c1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <HAL_ADC_MspInit+0xa8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12a      	bne.n	8000c94 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c44:	4a20      	ldr	r2, [pc, #128]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c46:	f043 0320 	orr.w	r3, r3, #32
 8000c4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480f      	ldr	r0, [pc, #60]	; (8000ccc <HAL_ADC_MspInit+0xb0>)
 8000c8e:	f004 fe95 	bl	80059bc <HAL_GPIO_Init>
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c92:	e013      	b.n	8000cbc <HAL_ADC_MspInit+0xa0>
  else if(adcHandle->Instance==ADC3)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_ADC_MspInit+0xb4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10e      	bne.n	8000cbc <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_ADC_MspInit+0xac>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40022000 	.word	0x40022000
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58020800 	.word	0x58020800
 8000cd0:	58026000 	.word	0x58026000

08000cd4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <MX_CRC_Init+0x54>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_CRC_Init+0x50>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_CRC_Init+0x50>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cec:	221d      	movs	r2, #29
 8000cee:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cf2:	2210      	movs	r2, #16
 8000cf4:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cf8:	22c4      	movs	r2, #196	; 0xc4
 8000cfa:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_CRC_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_CRC_Init+0x50>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_CRC_Init+0x50>)
 8000d10:	f004 f808 	bl	8004d24 <HAL_CRC_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000d1a:	f000 fcbd 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	24000420 	.word	0x24000420
 8000d28:	58024c00 	.word	0x58024c00

08000d2c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <HAL_CRC_MspInit+0x3c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10e      	bne.n	8000d5c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_CRC_MspInit+0x40>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_CRC_MspInit+0x40>)
 8000d46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_CRC_MspInit+0x40>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	58024c00 	.word	0x58024c00
 8000d6c:	58024400 	.word	0x58024400

08000d70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4b62      	ldr	r3, [pc, #392]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a60      	ldr	r2, [pc, #384]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b5e      	ldr	r3, [pc, #376]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a59      	ldr	r2, [pc, #356]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b56      	ldr	r3, [pc, #344]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b53      	ldr	r3, [pc, #332]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a51      	ldr	r2, [pc, #324]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b4f      	ldr	r3, [pc, #316]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	4a4a      	ldr	r2, [pc, #296]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df0:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	4a42      	ldr	r2, [pc, #264]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0e:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1c:	4b3c      	ldr	r3, [pc, #240]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	4a3b      	ldr	r2, [pc, #236]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2c:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <MX_GPIO_Init+0x1a0>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR1_Pin|DIR2_Pin|OE_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000e40:	4834      	ldr	r0, [pc, #208]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e42:	f004 ff63 	bl	8005d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 8000e4c:	4832      	ldr	r0, [pc, #200]	; (8000f18 <MX_GPIO_Init+0x1a8>)
 8000e4e:	f004 ff5d 	bl	8005d0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e52:	2200      	movs	r2, #0
 8000e54:	f644 7111 	movw	r1, #20241	; 0x4f11
 8000e58:	4830      	ldr	r0, [pc, #192]	; (8000f1c <MX_GPIO_Init+0x1ac>)
 8000e5a:	f004 ff57 	bl	8005d0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000e64:	482e      	ldr	r0, [pc, #184]	; (8000f20 <MX_GPIO_Init+0x1b0>)
 8000e66:	f004 ff51 	bl	8005d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	21f0      	movs	r1, #240	; 0xf0
 8000e6e:	482d      	ldr	r0, [pc, #180]	; (8000f24 <MX_GPIO_Init+0x1b4>)
 8000e70:	f004 ff4c 	bl	8005d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|OE_Pin;
 8000e74:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4821      	ldr	r0, [pc, #132]	; (8000f14 <MX_GPIO_Init+0x1a4>)
 8000e8e:	f004 fd95 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8000e92:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8000e96:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	481b      	ldr	r0, [pc, #108]	; (8000f18 <MX_GPIO_Init+0x1a8>)
 8000eac:	f004 fd86 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000eb0:	f644 7311 	movw	r3, #20241	; 0x4f11
 8000eb4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <MX_GPIO_Init+0x1ac>)
 8000eca:	f004 fd77 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 8000ece:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480e      	ldr	r0, [pc, #56]	; (8000f20 <MX_GPIO_Init+0x1b0>)
 8000ee8:	f004 fd68 	bl	80059bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8000eec:	23f0      	movs	r3, #240	; 0xf0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	4808      	ldr	r0, [pc, #32]	; (8000f24 <MX_GPIO_Init+0x1b4>)
 8000f04:	f004 fd5a 	bl	80059bc <HAL_GPIO_Init>

}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58021000 	.word	0x58021000
 8000f18:	58020800 	.word	0x58020800
 8000f1c:	58020c00 	.word	0x58020c00
 8000f20:	58020000 	.word	0x58020000
 8000f24:	58020400 	.word	0x58020400

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b08b      	sub	sp, #44	; 0x2c
 8000f2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f002 f9e9 	bl	8003304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 faf7 	bl	8001524 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f36:	f000 fb6f 	bl	8001618 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3a:	f7ff ff19 	bl	8000d70 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f3e:	f7ff fd85 	bl	8000a4c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000f42:	f7ff fdfb 	bl	8000b3c <MX_ADC3_Init>
  MX_SPI3_Init();
 8000f46:	f000 fcf1 	bl	800192c <MX_SPI3_Init>
  MX_TIM1_Init();
 8000f4a:	f000 ff49 	bl	8001de0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f4e:	f000 fff5 	bl	8001f3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f52:	f001 f86b 	bl	800202c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f56:	f001 f8e1 	bl	800211c <MX_TIM4_Init>
  MX_TIM12_Init();
 8000f5a:	f001 f957 	bl	800220c <MX_TIM12_Init>
  MX_TIM13_Init();
 8000f5e:	f001 f9b9 	bl	80022d4 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000f62:	f001 f9db 	bl	800231c <MX_TIM14_Init>
  MX_TIM15_Init();
 8000f66:	f001 fa27 	bl	80023b8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000f6a:	f001 fac9 	bl	8002500 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000f6e:	f001 fb41 	bl	80025f4 <MX_TIM17_Init>
  MX_UART4_Init();
 8000f72:	f001 ff1b 	bl	8002dac <MX_UART4_Init>
  MX_UART5_Init();
 8000f76:	f001 ff65 	bl	8002e44 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000f7a:	f001 ffaf 	bl	8002edc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f7e:	f001 fff9 	bl	8002f74 <MX_USART3_UART_Init>
  MX_TIM23_Init();
 8000f82:	f001 fbb3 	bl	80026ec <MX_TIM23_Init>
  MX_CRC_Init();
 8000f86:	f7ff fea5 	bl	8000cd4 <MX_CRC_Init>
  MX_TIM24_Init();
 8000f8a:	f001 fbff 	bl	800278c <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
//	uint32_t timestamp1 = 0;
	uint32_t timestamp2 = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
	uint8_t j_num = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	76fb      	strb	r3, [r7, #27]

//	ARMsProtocol_FUNC_Init();
//	HAL_TIM_Base_Start_IT(&htim24);
	int32_t encoder_unwrap_value[5] = { 0 };
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
//	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 1);
//	servo_initialise(&servo_motor, &htim17, TIM_CHANNEL_1);
	/*
	 * Encoder Initialise
	 */
	AMT21_initialise(&encoders[0], &huart2, 0x2C, USART2_DE_GPIO_Port,
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4bc6      	ldr	r3, [pc, #792]	; (80012c4 <main+0x39c>)
 8000faa:	222c      	movs	r2, #44	; 0x2c
 8000fac:	49c6      	ldr	r1, [pc, #792]	; (80012c8 <main+0x3a0>)
 8000fae:	48c7      	ldr	r0, [pc, #796]	; (80012cc <main+0x3a4>)
 8000fb0:	f7ff fb82 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[1], &huart2, 0x70, USART2_DE_GPIO_Port,
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4bc2      	ldr	r3, [pc, #776]	; (80012c4 <main+0x39c>)
 8000fba:	2270      	movs	r2, #112	; 0x70
 8000fbc:	49c2      	ldr	r1, [pc, #776]	; (80012c8 <main+0x3a0>)
 8000fbe:	48c4      	ldr	r0, [pc, #784]	; (80012d0 <main+0x3a8>)
 8000fc0:	f7ff fb7a 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[2], &huart2, 0x54, USART2_DE_GPIO_Port,
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	4bbe      	ldr	r3, [pc, #760]	; (80012c4 <main+0x39c>)
 8000fca:	2254      	movs	r2, #84	; 0x54
 8000fcc:	49be      	ldr	r1, [pc, #760]	; (80012c8 <main+0x3a0>)
 8000fce:	48c1      	ldr	r0, [pc, #772]	; (80012d4 <main+0x3ac>)
 8000fd0:	f7ff fb72 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[4], &huart2, 0xE8, USART2_DE_GPIO_Port,
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4bba      	ldr	r3, [pc, #744]	; (80012c4 <main+0x39c>)
 8000fda:	22e8      	movs	r2, #232	; 0xe8
 8000fdc:	49ba      	ldr	r1, [pc, #744]	; (80012c8 <main+0x3a0>)
 8000fde:	48be      	ldr	r0, [pc, #760]	; (80012d8 <main+0x3b0>)
 8000fe0:	f7ff fb6a 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[3], &huart2, 0xB4, USART2_DE_GPIO_Port,
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	4bb6      	ldr	r3, [pc, #728]	; (80012c4 <main+0x39c>)
 8000fea:	22b4      	movs	r2, #180	; 0xb4
 8000fec:	49b6      	ldr	r1, [pc, #728]	; (80012c8 <main+0x3a0>)
 8000fee:	48bb      	ldr	r0, [pc, #748]	; (80012dc <main+0x3b4>)
 8000ff0:	f7ff fb62 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	/*
	 * Stepper Initialise
	 */
	stepper_initialise(&steppers[0], &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port,
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4bb8      	ldr	r3, [pc, #736]	; (80012e0 <main+0x3b8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	49b8      	ldr	r1, [pc, #736]	; (80012e4 <main+0x3bc>)
 8001002:	48b9      	ldr	r0, [pc, #740]	; (80012e8 <main+0x3c0>)
 8001004:	f000 fb4e 	bl	80016a4 <stepper_initialise>
	DIR1_Pin, 1);//swap 0 -> 1
	stepper_initialise(&steppers[1], &htim2, TIM_CHANNEL_1, DIR2_GPIO_Port,
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	2310      	movs	r3, #16
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	4bb3      	ldr	r3, [pc, #716]	; (80012e0 <main+0x3b8>)
 8001012:	2200      	movs	r2, #0
 8001014:	49b5      	ldr	r1, [pc, #724]	; (80012ec <main+0x3c4>)
 8001016:	48b6      	ldr	r0, [pc, #728]	; (80012f0 <main+0x3c8>)
 8001018:	f000 fb44 	bl	80016a4 <stepper_initialise>
	DIR2_Pin, 1);
	stepper_initialise(&steppers[2], &htim3, TIM_CHANNEL_1, DIR3_GPIO_Port,
 800101c:	2300      	movs	r3, #0
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	4bb3      	ldr	r3, [pc, #716]	; (80012f4 <main+0x3cc>)
 8001028:	2200      	movs	r2, #0
 800102a:	49b3      	ldr	r1, [pc, #716]	; (80012f8 <main+0x3d0>)
 800102c:	48b3      	ldr	r0, [pc, #716]	; (80012fc <main+0x3d4>)
 800102e:	f000 fb39 	bl	80016a4 <stepper_initialise>
	DIR3_Pin, 0);//swap 1 -> 0
	stepper_initialise(&steppers[4], &htim4, TIM_CHANNEL_1, DIR4_GPIO_Port,
 8001032:	2300      	movs	r3, #0
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	4bad      	ldr	r3, [pc, #692]	; (80012f4 <main+0x3cc>)
 800103e:	2200      	movs	r2, #0
 8001040:	49af      	ldr	r1, [pc, #700]	; (8001300 <main+0x3d8>)
 8001042:	48b0      	ldr	r0, [pc, #704]	; (8001304 <main+0x3dc>)
 8001044:	f000 fb2e 	bl	80016a4 <stepper_initialise>
	DIR4_Pin, 0);
	stepper_initialise(&steppers[3], &htim15, TIM_CHANNEL_1, DIR5_GPIO_Port,
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4ba8      	ldr	r3, [pc, #672]	; (80012f4 <main+0x3cc>)
 8001054:	2200      	movs	r2, #0
 8001056:	49ac      	ldr	r1, [pc, #688]	; (8001308 <main+0x3e0>)
 8001058:	48ac      	ldr	r0, [pc, #688]	; (800130c <main+0x3e4>)
 800105a:	f000 fb23 	bl	80016a4 <stepper_initialise>
	DIR5_Pin, 1);
	/*
	 * Kalman Filter Initialise
	 */
	KalmanFilter_initialise(&kalman_filter[0], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 800105e:	eddf 3aac 	vldr	s7, [pc, #688]	; 8001310 <main+0x3e8>
 8001062:	ed9f 3aac 	vldr	s6, [pc, #688]	; 8001314 <main+0x3ec>
 8001066:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800106a:	ed9f 2aab 	vldr	s4, [pc, #684]	; 8001318 <main+0x3f0>
 800106e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8001318 <main+0x3f0>
 8001072:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001076:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8001318 <main+0x3f0>
 800107a:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8001318 <main+0x3f0>
 800107e:	48a7      	ldr	r0, [pc, #668]	; (800131c <main+0x3f4>)
 8001080:	f7ff fc14 	bl	80008ac <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[1], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 8001084:	eddf 3aa2 	vldr	s7, [pc, #648]	; 8001310 <main+0x3e8>
 8001088:	ed9f 3aa2 	vldr	s6, [pc, #648]	; 8001314 <main+0x3ec>
 800108c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8001090:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 8001318 <main+0x3f0>
 8001094:	eddf 1aa0 	vldr	s3, [pc, #640]	; 8001318 <main+0x3f0>
 8001098:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800109c:	eddf 0a9e 	vldr	s1, [pc, #632]	; 8001318 <main+0x3f0>
 80010a0:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8001318 <main+0x3f0>
 80010a4:	489e      	ldr	r0, [pc, #632]	; (8001320 <main+0x3f8>)
 80010a6:	f7ff fc01 	bl	80008ac <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[2], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 80010aa:	eddf 3a99 	vldr	s7, [pc, #612]	; 8001310 <main+0x3e8>
 80010ae:	ed9f 3a99 	vldr	s6, [pc, #612]	; 8001314 <main+0x3ec>
 80010b2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80010b6:	ed9f 2a98 	vldr	s4, [pc, #608]	; 8001318 <main+0x3f0>
 80010ba:	eddf 1a97 	vldr	s3, [pc, #604]	; 8001318 <main+0x3f0>
 80010be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80010c2:	eddf 0a95 	vldr	s1, [pc, #596]	; 8001318 <main+0x3f0>
 80010c6:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8001318 <main+0x3f0>
 80010ca:	4896      	ldr	r0, [pc, #600]	; (8001324 <main+0x3fc>)
 80010cc:	f7ff fbee 	bl	80008ac <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[3], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 80010d0:	eddf 3a8f 	vldr	s7, [pc, #572]	; 8001310 <main+0x3e8>
 80010d4:	ed9f 3a8f 	vldr	s6, [pc, #572]	; 8001314 <main+0x3ec>
 80010d8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80010dc:	ed9f 2a8e 	vldr	s4, [pc, #568]	; 8001318 <main+0x3f0>
 80010e0:	eddf 1a8d 	vldr	s3, [pc, #564]	; 8001318 <main+0x3f0>
 80010e4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80010e8:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8001318 <main+0x3f0>
 80010ec:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8001318 <main+0x3f0>
 80010f0:	488d      	ldr	r0, [pc, #564]	; (8001328 <main+0x400>)
 80010f2:	f7ff fbdb 	bl	80008ac <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[4], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 80010f6:	eddf 3a86 	vldr	s7, [pc, #536]	; 8001310 <main+0x3e8>
 80010fa:	ed9f 3a86 	vldr	s6, [pc, #536]	; 8001314 <main+0x3ec>
 80010fe:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8001102:	ed9f 2a85 	vldr	s4, [pc, #532]	; 8001318 <main+0x3f0>
 8001106:	eddf 1a84 	vldr	s3, [pc, #528]	; 8001318 <main+0x3f0>
 800110a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800110e:	eddf 0a82 	vldr	s1, [pc, #520]	; 8001318 <main+0x3f0>
 8001112:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8001318 <main+0x3f0>
 8001116:	4885      	ldr	r0, [pc, #532]	; (800132c <main+0x404>)
 8001118:	f7ff fbc8 	bl	80008ac <KalmanFilter_initialise>
	/*
	 * Position Pid Initialise
	 */
	PIDController_initialise(&position_pid_controller[0], 1500, 0, 0);
 800111c:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 8001318 <main+0x3f0>
 8001120:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8001318 <main+0x3f0>
 8001124:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8001330 <main+0x408>
 8001128:	4882      	ldr	r0, [pc, #520]	; (8001334 <main+0x40c>)
 800112a:	f7ff fbf1 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[1], 1500, 0, 0);
 800112e:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8001318 <main+0x3f0>
 8001132:	eddf 0a79 	vldr	s1, [pc, #484]	; 8001318 <main+0x3f0>
 8001136:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8001330 <main+0x408>
 800113a:	487f      	ldr	r0, [pc, #508]	; (8001338 <main+0x410>)
 800113c:	f7ff fbe8 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[2], 1500, 0, 0);
 8001140:	ed9f 1a75 	vldr	s2, [pc, #468]	; 8001318 <main+0x3f0>
 8001144:	eddf 0a74 	vldr	s1, [pc, #464]	; 8001318 <main+0x3f0>
 8001148:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8001330 <main+0x408>
 800114c:	487b      	ldr	r0, [pc, #492]	; (800133c <main+0x414>)
 800114e:	f7ff fbdf 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[3], 1500, 0, 0);
 8001152:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8001318 <main+0x3f0>
 8001156:	eddf 0a70 	vldr	s1, [pc, #448]	; 8001318 <main+0x3f0>
 800115a:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8001330 <main+0x408>
 800115e:	4878      	ldr	r0, [pc, #480]	; (8001340 <main+0x418>)
 8001160:	f7ff fbd6 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[4], 1500, 0, 0);
 8001164:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8001318 <main+0x3f0>
 8001168:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8001318 <main+0x3f0>
 800116c:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8001330 <main+0x408>
 8001170:	4874      	ldr	r0, [pc, #464]	; (8001344 <main+0x41c>)
 8001172:	f7ff fbcd 	bl	8000910 <PIDController_initialise>
	/*
	 * Velocity Pid Initialise
	 */
	PIDController_initialise(&velocity_pid_controller[0], 0, 0, 0);
 8001176:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8001318 <main+0x3f0>
 800117a:	eddf 0a67 	vldr	s1, [pc, #412]	; 8001318 <main+0x3f0>
 800117e:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8001318 <main+0x3f0>
 8001182:	4871      	ldr	r0, [pc, #452]	; (8001348 <main+0x420>)
 8001184:	f7ff fbc4 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[1], 0, 0, 0);
 8001188:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8001318 <main+0x3f0>
 800118c:	eddf 0a62 	vldr	s1, [pc, #392]	; 8001318 <main+0x3f0>
 8001190:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8001318 <main+0x3f0>
 8001194:	486d      	ldr	r0, [pc, #436]	; (800134c <main+0x424>)
 8001196:	f7ff fbbb 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[2], 0, 0, 0);
 800119a:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8001318 <main+0x3f0>
 800119e:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8001318 <main+0x3f0>
 80011a2:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8001318 <main+0x3f0>
 80011a6:	486a      	ldr	r0, [pc, #424]	; (8001350 <main+0x428>)
 80011a8:	f7ff fbb2 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[3], 0, 0, 0);
 80011ac:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8001318 <main+0x3f0>
 80011b0:	eddf 0a59 	vldr	s1, [pc, #356]	; 8001318 <main+0x3f0>
 80011b4:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8001318 <main+0x3f0>
 80011b8:	4866      	ldr	r0, [pc, #408]	; (8001354 <main+0x42c>)
 80011ba:	f7ff fba9 	bl	8000910 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[4], 0, 0, 0);
 80011be:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8001318 <main+0x3f0>
 80011c2:	eddf 0a55 	vldr	s1, [pc, #340]	; 8001318 <main+0x3f0>
 80011c6:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001318 <main+0x3f0>
 80011ca:	4863      	ldr	r0, [pc, #396]	; (8001358 <main+0x430>)
 80011cc:	f7ff fba0 	bl	8000910 <PIDController_initialise>

	HAL_TIM_Base_Start(&htim24);
 80011d0:	4862      	ldr	r0, [pc, #392]	; (800135c <main+0x434>)
 80011d2:	f007 ff5d 	bl	8009090 <HAL_TIM_Base_Start>
//					delta_khe[i] = 0;
//				}
////			ARMsProtocol_FUNC_Interface();
//			}
//		}
		if (HAL_GetTick() - timestamp2 >= 1) {
 80011d6:	f002 f91b 	bl	8003410 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	4293      	cmp	r3, r2
 80011e0:	d0f9      	beq.n	80011d6 <main+0x2ae>
			timestamp2 = HAL_GetTick();
 80011e2:	f002 f915 	bl	8003410 <HAL_GetTick>
 80011e6:	61f8      	str	r0, [r7, #28]
			HAL_StatusTypeDef rep = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	76bb      	strb	r3, [r7, #26]
			encoder_unwrap_value[j_num] = 0;
 80011ec:	7efb      	ldrb	r3, [r7, #27]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	f107 0220 	add.w	r2, r7, #32
 80011f4:	4413      	add	r3, r2
 80011f6:	2200      	movs	r2, #0
 80011f8:	f843 2c1c 	str.w	r2, [r3, #-28]
			while (1) {
				AMT21_read_value(&(encoders[j_num]));
 80011fc:	7efa      	ldrb	r2, [r7, #27]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4a31      	ldr	r2, [pc, #196]	; (80012cc <main+0x3a4>)
 8001208:	4413      	add	r3, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fa7d 	bl	800070a <AMT21_read_value>
				rep = AMT21_check_value(&(encoders[j_num]));
 8001210:	7efa      	ldrb	r2, [r7, #27]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4a2c      	ldr	r2, [pc, #176]	; (80012cc <main+0x3a4>)
 800121c:	4413      	add	r3, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fab2 	bl	8000788 <AMT21_check_value>
 8001224:	4603      	mov	r3, r0
 8001226:	76bb      	strb	r3, [r7, #26]
				if (rep == HAL_OK) {
 8001228:	7ebb      	ldrb	r3, [r7, #26]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1e6      	bne.n	80011fc <main+0x2d4>
					encoder_unwrap_value[j_num] = AMT21_unwrap(
							(int32_t) encoders[j_num].position,
 800122e:	7efa      	ldrb	r2, [r7, #27]
 8001230:	4926      	ldr	r1, [pc, #152]	; (80012cc <main+0x3a4>)
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	330e      	adds	r3, #14
 800123e:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 8001240:	4618      	mov	r0, r3
							(int32_t) encoders[j_num].prev_position);
 8001242:	7efa      	ldrb	r2, [r7, #27]
 8001244:	4921      	ldr	r1, [pc, #132]	; (80012cc <main+0x3a4>)
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	3310      	adds	r3, #16
 8001252:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 8001254:	7efc      	ldrb	r4, [r7, #27]
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff faf8 	bl	800084c <AMT21_unwrap>
 800125c:	4602      	mov	r2, r0
 800125e:	00a3      	lsls	r3, r4, #2
 8001260:	f107 0120 	add.w	r1, r7, #32
 8001264:	440b      	add	r3, r1
 8001266:	f843 2c1c 	str.w	r2, [r3, #-28]
					encoders[j_num].prev_position = encoders[j_num].position;
 800126a:	7ef9      	ldrb	r1, [r7, #27]
 800126c:	7efa      	ldrb	r2, [r7, #27]
 800126e:	4817      	ldr	r0, [pc, #92]	; (80012cc <main+0x3a4>)
 8001270:	460b      	mov	r3, r1
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4403      	add	r3, r0
 800127a:	330e      	adds	r3, #14
 800127c:	8818      	ldrh	r0, [r3, #0]
 800127e:	4913      	ldr	r1, [pc, #76]	; (80012cc <main+0x3a4>)
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	3310      	adds	r3, #16
 800128c:	4602      	mov	r2, r0
 800128e:	801a      	strh	r2, [r3, #0]
					break;
 8001290:	bf00      	nop
				}
			}
			if ((j_num == 0)|(j_num == 2)|(j_num == 3)){
 8001292:	7efb      	ldrb	r3, [r7, #27]
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2da      	uxtb	r2, r3
 800129e:	7efb      	ldrb	r3, [r7, #27]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	bf0c      	ite	eq
 80012a4:	2301      	moveq	r3, #1
 80012a6:	2300      	movne	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	7efb      	ldrb	r3, [r7, #27]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	bf0c      	ite	eq
 80012b6:	2301      	moveq	r3, #1
 80012b8:	2300      	movne	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d05d      	beq.n	800137e <main+0x456>
 80012c2:	e04d      	b.n	8001360 <main+0x438>
 80012c4:	58020c00 	.word	0x58020c00
 80012c8:	24000d9c 	.word	0x24000d9c
 80012cc:	240004c8 	.word	0x240004c8
 80012d0:	240004dc 	.word	0x240004dc
 80012d4:	240004f0 	.word	0x240004f0
 80012d8:	24000518 	.word	0x24000518
 80012dc:	24000504 	.word	0x24000504
 80012e0:	58021000 	.word	0x58021000
 80012e4:	24000a24 	.word	0x24000a24
 80012e8:	24000444 	.word	0x24000444
 80012ec:	24000a70 	.word	0x24000a70
 80012f0:	2400045c 	.word	0x2400045c
 80012f4:	58020800 	.word	0x58020800
 80012f8:	2400098c 	.word	0x2400098c
 80012fc:	24000474 	.word	0x24000474
 8001300:	240008a8 	.word	0x240008a8
 8001304:	240004a4 	.word	0x240004a4
 8001308:	240008f4 	.word	0x240008f4
 800130c:	2400048c 	.word	0x2400048c
 8001310:	3aa3d70a 	.word	0x3aa3d70a
 8001314:	44fa0000 	.word	0x44fa0000
 8001318:	00000000 	.word	0x00000000
 800131c:	24000630 	.word	0x24000630
 8001320:	24000650 	.word	0x24000650
 8001324:	24000670 	.word	0x24000670
 8001328:	24000690 	.word	0x24000690
 800132c:	240006b0 	.word	0x240006b0
 8001330:	44bb8000 	.word	0x44bb8000
 8001334:	240006d0 	.word	0x240006d0
 8001338:	24000704 	.word	0x24000704
 800133c:	24000738 	.word	0x24000738
 8001340:	2400076c 	.word	0x2400076c
 8001344:	240007a0 	.word	0x240007a0
 8001348:	2400052c 	.word	0x2400052c
 800134c:	24000560 	.word	0x24000560
 8001350:	24000594 	.word	0x24000594
 8001354:	240005c8 	.word	0x240005c8
 8001358:	240005fc 	.word	0x240005fc
 800135c:	2400085c 	.word	0x2400085c
				encoder_unwrap_value[j_num] = encoder_unwrap_value[j_num] * -1;
 8001360:	7efb      	ldrb	r3, [r7, #27]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	f107 0220 	add.w	r2, r7, #32
 8001368:	4413      	add	r3, r2
 800136a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800136e:	7efb      	ldrb	r3, [r7, #27]
 8001370:	4252      	negs	r2, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	f107 0120 	add.w	r1, r7, #32
 8001378:	440b      	add	r3, r1
 800137a:	f843 2c1c 	str.w	r2, [r3, #-28]
			}
			encoder_config[j_num] = encoder_config[j_num]
 800137e:	7efb      	ldrb	r3, [r7, #27]
 8001380:	4a63      	ldr	r2, [pc, #396]	; (8001510 <main+0x5e8>)
 8001382:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
					+ encoder_unwrap_value[j_num];
 8001386:	7efb      	ldrb	r3, [r7, #27]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	f107 0220 	add.w	r2, r7, #32
 800138e:	4413      	add	r3, r2
 8001390:	f853 2c1c 	ldr.w	r2, [r3, #-28]
			encoder_config[j_num] = encoder_config[j_num]
 8001394:	7efb      	ldrb	r3, [r7, #27]
					+ encoder_unwrap_value[j_num];
 8001396:	440a      	add	r2, r1
			encoder_config[j_num] = encoder_config[j_num]
 8001398:	495d      	ldr	r1, [pc, #372]	; (8001510 <main+0x5e8>)
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//			KalmanFilter_Update(&kalman_filter[j_num], encoder_config[j_num]);

			motor_config[0] = ((2*M_PI * encoder_config[0])/16384.0f) * (25.0f/9.0f);
 800139e:	4b5c      	ldr	r3, [pc, #368]	; (8001510 <main+0x5e8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013aa:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80014f0 <main+0x5c8>
 80013ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013b2:	ed9f 5b51 	vldr	d5, [pc, #324]	; 80014f8 <main+0x5d0>
 80013b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013ba:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8001500 <main+0x5d8>
 80013be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013c6:	4b53      	ldr	r3, [pc, #332]	; (8001514 <main+0x5ec>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
			motor_config[1] = ((2*M_PI * encoder_config[1])/16384.0f) * 27.0;
 80013cc:	4b50      	ldr	r3, [pc, #320]	; (8001510 <main+0x5e8>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013d8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80014f0 <main+0x5c8>
 80013dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013e0:	ed9f 5b45 	vldr	d5, [pc, #276]	; 80014f8 <main+0x5d0>
 80013e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013e8:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 80013ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013f4:	4b47      	ldr	r3, [pc, #284]	; (8001514 <main+0x5ec>)
 80013f6:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_config[2] = 22.5 * sin((2*M_PI * encoder_config[2])/16384.0f);
 80013fa:	4b45      	ldr	r3, [pc, #276]	; (8001510 <main+0x5e8>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001406:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80014f0 <main+0x5c8>
 800140a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800140e:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 80014f8 <main+0x5d0>
 8001412:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001416:	eeb0 0b46 	vmov.f64	d0, d6
 800141a:	f00d fb85 	bl	800eb28 <sin>
 800141e:	eeb0 7b40 	vmov.f64	d7, d0
 8001422:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8001508 <main+0x5e0>
 8001426:	ee27 7b06 	vmul.f64	d7, d7, d6
 800142a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800142e:	4b39      	ldr	r3, [pc, #228]	; (8001514 <main+0x5ec>)
 8001430:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_config[3] = (2*M_PI * encoder_config[3])/16384.0f; //checked
 8001434:	4b36      	ldr	r3, [pc, #216]	; (8001510 <main+0x5e8>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001440:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80014f0 <main+0x5c8>
 8001444:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001448:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80014f8 <main+0x5d0>
 800144c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001450:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <main+0x5ec>)
 8001456:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_config[4] = (2*M_PI * encoder_config[4])/16384.0f; //checked
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <main+0x5e8>)
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001466:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80014f0 <main+0x5c8>
 800146a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800146e:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80014f8 <main+0x5d0>
 8001472:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001476:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <main+0x5ec>)
 800147c:	edc3 7a04 	vstr	s15, [r3, #16]
			/*
			 * Position Controller
			 */
			PIDController_update(&position_pid_controller[j_num],
 8001480:	7efb      	ldrb	r3, [r7, #27]
 8001482:	2234      	movs	r2, #52	; 0x34
 8001484:	fb02 f303 	mul.w	r3, r2, r3
 8001488:	4a23      	ldr	r2, [pc, #140]	; (8001518 <main+0x5f0>)
 800148a:	441a      	add	r2, r3
 800148c:	7efb      	ldrb	r3, [r7, #27]
 800148e:	4923      	ldr	r1, [pc, #140]	; (800151c <main+0x5f4>)
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	7efb      	ldrb	r3, [r7, #27]
 800149a:	491e      	ldr	r1, [pc, #120]	; (8001514 <main+0x5ec>)
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	ed93 7a00 	vldr	s14, [r3]
 80014a4:	eef0 0a47 	vmov.f32	s1, s14
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	4610      	mov	r0, r2
 80014ae:	f7ff fa4d 	bl	800094c <PIDController_update>
					desired_position[j_num], motor_config[j_num]);
			stepper_set_speed(&steppers[j_num],
 80014b2:	7efa      	ldrb	r2, [r7, #27]
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4a18      	ldr	r2, [pc, #96]	; (8001520 <main+0x5f8>)
 80014be:	441a      	add	r2, r3
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	4915      	ldr	r1, [pc, #84]	; (8001518 <main+0x5f0>)
 80014c4:	2034      	movs	r0, #52	; 0x34
 80014c6:	fb00 f303 	mul.w	r3, r0, r3
 80014ca:	440b      	add	r3, r1
 80014cc:	3330      	adds	r3, #48	; 0x30
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	eeb0 0a67 	vmov.f32	s0, s15
 80014d6:	4610      	mov	r0, r2
 80014d8:	f000 f9a0 	bl	800181c <stepper_set_speed>
					position_pid_controller[j_num].out);
			j_num++;
 80014dc:	7efb      	ldrb	r3, [r7, #27]
 80014de:	3301      	adds	r3, #1
 80014e0:	76fb      	strb	r3, [r7, #27]
			if (j_num == 5) {
 80014e2:	7efb      	ldrb	r3, [r7, #27]
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	f47f ae76 	bne.w	80011d6 <main+0x2ae>
				j_num = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	76fb      	strb	r3, [r7, #27]
		if (HAL_GetTick() - timestamp2 >= 1) {
 80014ee:	e672      	b.n	80011d6 <main+0x2ae>
 80014f0:	54442d18 	.word	0x54442d18
 80014f4:	401921fb 	.word	0x401921fb
 80014f8:	00000000 	.word	0x00000000
 80014fc:	40d00000 	.word	0x40d00000
 8001500:	80000000 	.word	0x80000000
 8001504:	400638e3 	.word	0x400638e3
 8001508:	00000000 	.word	0x00000000
 800150c:	40368000 	.word	0x40368000
 8001510:	24000210 	.word	0x24000210
 8001514:	24000224 	.word	0x24000224
 8001518:	240006d0 	.word	0x240006d0
 800151c:	240001fc 	.word	0x240001fc
 8001520:	24000444 	.word	0x24000444

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b09c      	sub	sp, #112	; 0x70
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152e:	224c      	movs	r2, #76	; 0x4c
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f00a feb2 	bl	800c29c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2220      	movs	r2, #32
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f00a feac 	bl	800c29c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001544:	2002      	movs	r0, #2
 8001546:	f004 fbfb 	bl	8005d40 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <SystemClock_Config+0xec>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	4a2f      	ldr	r2, [pc, #188]	; (8001610 <SystemClock_Config+0xec>)
 8001554:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001558:	6193      	str	r3, [r2, #24]
 800155a:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <SystemClock_Config+0xec>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001566:	bf00      	nop
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <SystemClock_Config+0xec>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001574:	d1f8      	bne.n	8001568 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <SystemClock_Config+0xf0>)
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	f023 0303 	bic.w	r3, r3, #3
 800157e:	4a25      	ldr	r2, [pc, #148]	; (8001614 <SystemClock_Config+0xf0>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001586:	2301      	movs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001590:	2302      	movs	r3, #2
 8001592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001594:	2302      	movs	r3, #2
 8001596:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001598:	2302      	movs	r3, #2
 800159a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800159c:	232c      	movs	r3, #44	; 0x2c
 800159e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80015a0:	2301      	movs	r3, #1
 80015a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80015a4:	2303      	movs	r3, #3
 80015a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015ac:	230c      	movs	r3, #12
 80015ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 fbf9 	bl	8005db4 <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80015c8:	f000 f866 	bl	8001698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	233f      	movs	r3, #63	; 0x3f
 80015ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d0:	2303      	movs	r3, #3
 80015d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015d8:	2308      	movs	r3, #8
 80015da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015dc:	2340      	movs	r3, #64	; 0x40
 80015de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015e0:	2340      	movs	r3, #64	; 0x40
 80015e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015ea:	2340      	movs	r3, #64	; 0x40
 80015ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2103      	movs	r1, #3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 ff8a 	bl	800650c <HAL_RCC_ClockConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80015fe:	f000 f84b 	bl	8001698 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001602:	f005 f939 	bl	8006878 <HAL_RCC_EnableCSS>
}
 8001606:	bf00      	nop
 8001608:	3770      	adds	r7, #112	; 0x70
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	58024800 	.word	0x58024800
 8001614:	58024400 	.word	0x58024400

08001618 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0ae      	sub	sp, #184	; 0xb8
 800161c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	22b4      	movs	r2, #180	; 0xb4
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f00a fe39 	bl	800c29c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800162a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800162e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001630:	2302      	movs	r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001634:	230f      	movs	r3, #15
 8001636:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001638:	2302      	movs	r3, #2
 800163a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800163c:	2302      	movs	r3, #2
 800163e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001644:	23c0      	movs	r3, #192	; 0xc0
 8001646:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 800164c:	f640 3386 	movw	r3, #2950	; 0xb86
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	4618      	mov	r0, r3
 800165c:	f005 fb0e 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001666:	f000 f817 	bl	8001698 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	37b8      	adds	r7, #184	; 0xb8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 1);
 800167c:	1d39      	adds	r1, r7, #4
 800167e:	2301      	movs	r3, #1
 8001680:	2201      	movs	r2, #1
 8001682:	4804      	ldr	r0, [pc, #16]	; (8001694 <__io_putchar+0x20>)
 8001684:	f008 fed8 	bl	800a438 <HAL_UART_Transmit>

	return ch;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	24000bec 	.word	0x24000bec

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016a0:	e7fe      	b.n	80016a0 <Error_Handler+0x8>
	...

080016a4 <stepper_initialise>:
 */

#include "motor.h"

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		uint32_t tim_channel, GPIO_TypeDef *dir_port, uint16_t dir_pin, uint8_t dir_mode) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	605a      	str	r2, [r3, #4]
	dev->dir_port = dir_port;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	609a      	str	r2, [r3, #8]
	dev->dir_pin = dir_pin;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8b3a      	ldrh	r2, [r7, #24]
 80016c8:	819a      	strh	r2, [r3, #12]
	/*
	 * dir mode set direction of stepper
	 */
	dev->dir_mode = dir_mode;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	7f3a      	ldrb	r2, [r7, #28]
 80016ce:	755a      	strb	r2, [r3, #21]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6898      	ldr	r0, [r3, #8]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	899b      	ldrh	r3, [r3, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	4619      	mov	r1, r3
 80016dc:	f004 fb16 	bl	8005d0c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4619      	mov	r1, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f007 fdb0 	bl	8009250 <HAL_TIM_PWM_Start>
	dev->freq = 1;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80016f6:	611a      	str	r2, [r3, #16]
	stepper_set_speed(dev, 0);
 80016f8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800170c <stepper_initialise+0x68>
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f88d 	bl	800181c <stepper_set_speed>
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	00000000 	.word	0x00000000

08001710 <set_pwm>:
	dev->degree = 1;
	servo_set_degree(dev, 0);
}

void set_pwm(TIM_HandleTypeDef *tim_pwm, uint32_t tim_channel, float freq,
		float duty_cycle) {
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	ed87 0a01 	vstr	s0, [r7, #4]
 800171e:	edc7 0a00 	vstr	s1, [r7]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	if (freq > MAX_FREQUENCY){
 8001722:	edd7 7a01 	vldr	s15, [r7, #4]
 8001726:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800180c <set_pwm+0xfc>
 800172a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	dd02      	ble.n	800173a <set_pwm+0x2a>
		freq = MAX_FREQUENCY;
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <set_pwm+0x100>)
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	e00a      	b.n	8001750 <set_pwm+0x40>
	}
	else if ((freq * -1) > MAX_FREQUENCY){
 800173a:	edd7 7a01 	vldr	s15, [r7, #4]
 800173e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001814 <set_pwm+0x104>
 8001742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174a:	d501      	bpl.n	8001750 <set_pwm+0x40>
		freq = MAX_FREQUENCY;
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <set_pwm+0x100>)
 800174e:	607b      	str	r3, [r7, #4]
	}
	uint16_t ARR_value = 50000 / freq; //500000 come from 275MHz/550
 8001750:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001818 <set_pwm+0x108>
 8001754:	ed97 7a01 	vldr	s14, [r7, #4]
 8001758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001760:	ee17 3a90 	vmov	r3, s15
 8001764:	82bb      	strh	r3, [r7, #20]
	uint16_t CCRx_value = (ARR_value * duty_cycle);
 8001766:	8abb      	ldrh	r3, [r7, #20]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001770:	edd7 7a00 	vldr	s15, [r7]
 8001774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800177c:	ee17 3a90 	vmov	r3, s15
 8001780:	82fb      	strh	r3, [r7, #22]
	if (duty_cycle == 1.0) {
 8001782:	edd7 7a00 	vldr	s15, [r7]
 8001786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800178a:	eef4 7a47 	vcmp.f32	s15, s14
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d101      	bne.n	8001798 <set_pwm+0x88>
		CCRx_value = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	82fb      	strh	r3, [r7, #22]
	}
	__HAL_TIM_SET_AUTORELOAD(tim_pwm, ARR_value);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	8aba      	ldrh	r2, [r7, #20]
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
 80017a0:	8aba      	ldrh	r2, [r7, #20]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d104      	bne.n	80017b6 <set_pwm+0xa6>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	8afa      	ldrh	r2, [r7, #22]
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017b4:	e023      	b.n	80017fe <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d104      	bne.n	80017c6 <set_pwm+0xb6>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	8afb      	ldrh	r3, [r7, #22]
 80017c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017c4:	e01b      	b.n	80017fe <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d104      	bne.n	80017d6 <set_pwm+0xc6>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	8afb      	ldrh	r3, [r7, #22]
 80017d2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80017d4:	e013      	b.n	80017fe <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b0c      	cmp	r3, #12
 80017da:	d104      	bne.n	80017e6 <set_pwm+0xd6>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	8afb      	ldrh	r3, [r7, #22]
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80017e4:	e00b      	b.n	80017fe <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d104      	bne.n	80017f6 <set_pwm+0xe6>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	8afb      	ldrh	r3, [r7, #22]
 80017f2:	6593      	str	r3, [r2, #88]	; 0x58
}
 80017f4:	e003      	b.n	80017fe <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	8afb      	ldrh	r3, [r7, #22]
 80017fc:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80017fe:	bf00      	nop
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	46c35000 	.word	0x46c35000
 8001810:	46c35000 	.word	0x46c35000
 8001814:	c6c35000 	.word	0xc6c35000
 8001818:	47435000 	.word	0x47435000

0800181c <stepper_set_speed>:
		set_pwm(dev->timHandle, dev->tim_channel, 50, cyc);
		dev->degree = degree;
	}
}

void stepper_set_speed(Stepper_Motor *dev, float freq) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	ed87 0a00 	vstr	s0, [r7]
	 stepper_set_speed does set your stepper to your given value.

	 :param freq can be -9999.9999 to 9999.9999. signed value use to set stepper direction.
	 :return: None
	 */
	if (freq != dev->freq) {
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	edd3 7a04 	vldr	s15, [r3, #16]
 800182e:	ed97 7a00 	vldr	s14, [r7]
 8001832:	eeb4 7a67 	vcmp.f32	s14, s15
 8001836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183a:	d070      	beq.n	800191e <stepper_set_speed+0x102>
		if (freq > MIN_FREQUENCY) {
 800183c:	edd7 7a00 	vldr	s15, [r7]
 8001840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184c:	dd25      	ble.n	800189a <stepper_set_speed+0x7e>
			if (dev->dir_mode == 0){
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7d5b      	ldrb	r3, [r3, #21]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d108      	bne.n	8001868 <stepper_set_speed+0x4c>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6898      	ldr	r0, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	899b      	ldrh	r3, [r3, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	4619      	mov	r1, r3
 8001862:	f004 fa53 	bl	8005d0c <HAL_GPIO_WritePin>
 8001866:	e00b      	b.n	8001880 <stepper_set_speed+0x64>
			}
			else if (dev->dir_mode == 1){
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7d5b      	ldrb	r3, [r3, #21]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <stepper_set_speed+0x64>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6898      	ldr	r0, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	899b      	ldrh	r3, [r3, #12]
 8001878:	2201      	movs	r2, #1
 800187a:	4619      	mov	r1, r3
 800187c:	f004 fa46 	bl	8005d0c <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, freq, 0.50);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800188c:	ed97 0a00 	vldr	s0, [r7]
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f7ff ff3c 	bl	8001710 <set_pwm>
 8001898:	e03e      	b.n	8001918 <stepper_set_speed+0xfc>
		} else if (freq < (-1 * MIN_FREQUENCY)) {
 800189a:	edd7 7a00 	vldr	s15, [r7]
 800189e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80018a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	d529      	bpl.n	8001900 <stepper_set_speed+0xe4>
			if (dev->dir_mode == 0){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7d5b      	ldrb	r3, [r3, #21]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d108      	bne.n	80018c6 <stepper_set_speed+0xaa>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6898      	ldr	r0, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	899b      	ldrh	r3, [r3, #12]
 80018bc:	2201      	movs	r2, #1
 80018be:	4619      	mov	r1, r3
 80018c0:	f004 fa24 	bl	8005d0c <HAL_GPIO_WritePin>
 80018c4:	e00b      	b.n	80018de <stepper_set_speed+0xc2>
			}
			else if (dev->dir_mode == 1){
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7d5b      	ldrb	r3, [r3, #21]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d107      	bne.n	80018de <stepper_set_speed+0xc2>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6898      	ldr	r0, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	899b      	ldrh	r3, [r3, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	f004 fa17 	bl	8005d0c <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, (-1*freq), 0.50);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	edd7 7a00 	vldr	s15, [r7]
 80018ea:	eef1 7a67 	vneg.f32	s15, s15
 80018ee:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80018f2:	eeb0 0a67 	vmov.f32	s0, s15
 80018f6:	4619      	mov	r1, r3
 80018f8:	4610      	mov	r0, r2
 80018fa:	f7ff ff09 	bl	8001710 <set_pwm>
 80018fe:	e00b      	b.n	8001918 <stepper_set_speed+0xfc>
		} else {
			set_pwm(dev->timHandle, dev->tim_channel, 100, 1.0);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800190c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001928 <stepper_set_speed+0x10c>
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f7ff fefc 	bl	8001710 <set_pwm>
		}
		dev->freq = freq;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	611a      	str	r2, [r3, #16]
	}
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	42c80000 	.word	0x42c80000

0800192c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001932:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <MX_SPI3_Init+0xa8>)
 8001934:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001938:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800193c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800193e:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001946:	2203      	movs	r2, #3
 8001948:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <MX_SPI3_Init+0xa4>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001952:	2200      	movs	r2, #0
 8001954:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001958:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800195c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <MX_SPI3_Init+0xa4>)
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001972:	2200      	movs	r2, #0
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001978:	2200      	movs	r2, #0
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_SPI3_Init+0xa4>)
 800197e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001982:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001986:	2200      	movs	r2, #0
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_SPI3_Init+0xa4>)
 800198c:	2200      	movs	r2, #0
 800198e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001992:	2200      	movs	r2, #0
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_SPI3_Init+0xa4>)
 8001998:	2200      	movs	r2, #0
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_SPI3_Init+0xa4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_SPI3_Init+0xa4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_SPI3_Init+0xa4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_SPI3_Init+0xa4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_SPI3_Init+0xa4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_SPI3_Init+0xa4>)
 80019bc:	f007 f9f0 	bl	8008da0 <HAL_SPI_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80019c6:	f7ff fe67 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	240007d4 	.word	0x240007d4
 80019d4:	40003c00 	.word	0x40003c00

080019d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b0b6      	sub	sp, #216	; 0xd8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	22b4      	movs	r2, #180	; 0xb4
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00a fc4f 	bl	800c29c <memset>
  if(spiHandle->Instance==SPI3)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a25      	ldr	r2, [pc, #148]	; (8001a98 <HAL_SPI_MspInit+0xc0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d142      	bne.n	8001a8e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	4618      	mov	r0, r3
 8001a18:	f005 f930 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001a22:	f7ff fe39 	bl	8001698 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4a:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a62:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a7c:	2306      	movs	r3, #6
 8001a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_SPI_MspInit+0xc8>)
 8001a8a:	f003 ff97 	bl	80059bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	37d8      	adds	r7, #216	; 0xd8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40003c00 	.word	0x40003c00
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	58020800 	.word	0x58020800

08001aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_MspInit+0x30>)
 8001aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x30>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x30>)
 8001abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	58024400 	.word	0x58024400

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001adc:	f005 f8b2 	bl	8006c44 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <NMI_Handler+0x8>

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f001 fc5e 	bl	80033e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <USART3_IRQHandler+0x10>)
 8001b36:	f008 fde9 	bl	800a70c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	24000bec 	.word	0x24000bec

08001b44 <HAL_UART_TxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	__HAL_UART_FLUSH_DRREGISTER(huart);
	ARMsProtocol_FUNC_Rx_Callback(huart);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	//__HAL_UART_FLUSH_DRREGISTER(huart);
	ARMsProtocol_Data.Tx_flag = 0;
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_UART_TxCpltCallback+0x1c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	24000250 	.word	0x24000250

08001b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_kill>:

int _kill(int pid, int sig)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b7e:	f00a fb55 	bl	800c22c <__errno>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2216      	movs	r2, #22
 8001b86:	601a      	str	r2, [r3, #0]
	return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_exit>:

void _exit (int status)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ffe7 	bl	8001b74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ba6:	e7fe      	b.n	8001ba6 <_exit+0x12>

08001ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e00a      	b.n	8001bd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bba:	f3af 8000 	nop.w
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	60ba      	str	r2, [r7, #8]
 8001bc6:	b2ca      	uxtb	r2, r1
 8001bc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf0      	blt.n	8001bba <_read+0x12>
	}

return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e009      	b.n	8001c08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fd39 	bl	8001674 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbf1      	blt.n	8001bf4 <_write+0x12>
	}
	return len;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_close>:

int _close(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return -1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c42:	605a      	str	r2, [r3, #4]
	return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_isatty>:

int _isatty(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	return 1;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <_sbrk+0x5c>)
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <_sbrk+0x60>)
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <_sbrk+0x64>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <_sbrk+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d207      	bcs.n	8001cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb4:	f00a faba 	bl	800c22c <__errno>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	220c      	movs	r2, #12
 8001cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e009      	b.n	8001cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <_sbrk+0x64>)
 8001cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	24050000 	.word	0x24050000
 8001ce4:	00000400 	.word	0x00000400
 8001ce8:	24000238 	.word	0x24000238
 8001cec:	24000e40 	.word	0x24000e40

08001cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <SystemInit+0xd0>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	4a31      	ldr	r2, [pc, #196]	; (8001dc0 <SystemInit+0xd0>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <SystemInit+0xd4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	2b06      	cmp	r3, #6
 8001d0e:	d807      	bhi.n	8001d20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d10:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <SystemInit+0xd4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 030f 	bic.w	r3, r3, #15
 8001d18:	4a2a      	ldr	r2, [pc, #168]	; (8001dc4 <SystemInit+0xd4>)
 8001d1a:	f043 0307 	orr.w	r3, r3, #7
 8001d1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <SystemInit+0xd8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a28      	ldr	r2, [pc, #160]	; (8001dc8 <SystemInit+0xd8>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <SystemInit+0xd8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <SystemInit+0xd8>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4924      	ldr	r1, [pc, #144]	; (8001dc8 <SystemInit+0xd8>)
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <SystemInit+0xdc>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <SystemInit+0xd4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d007      	beq.n	8001d5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <SystemInit+0xd4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 030f 	bic.w	r3, r3, #15
 8001d52:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <SystemInit+0xd4>)
 8001d54:	f043 0307 	orr.w	r3, r3, #7
 8001d58:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <SystemInit+0xd8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <SystemInit+0xd8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <SystemInit+0xd8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <SystemInit+0xd8>)
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <SystemInit+0xe0>)
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <SystemInit+0xd8>)
 8001d74:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <SystemInit+0xe4>)
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <SystemInit+0xd8>)
 8001d7a:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <SystemInit+0xe8>)
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <SystemInit+0xd8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <SystemInit+0xd8>)
 8001d86:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <SystemInit+0xe8>)
 8001d88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <SystemInit+0xd8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <SystemInit+0xd8>)
 8001d92:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <SystemInit+0xe8>)
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <SystemInit+0xd8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <SystemInit+0xd8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <SystemInit+0xd8>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <SystemInit+0xd8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <SystemInit+0xec>)
 8001db0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001db4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00
 8001dc4:	52002000 	.word	0x52002000
 8001dc8:	58024400 	.word	0x58024400
 8001dcc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001dd0:	02020200 	.word	0x02020200
 8001dd4:	01ff0000 	.word	0x01ff0000
 8001dd8:	01010280 	.word	0x01010280
 8001ddc:	52004000 	.word	0x52004000

08001de0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b09c      	sub	sp, #112	; 0x70
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	615a      	str	r2, [r3, #20]
 8001e12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2234      	movs	r2, #52	; 0x34
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00a fa3e 	bl	800c29c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e20:	4b44      	ldr	r3, [pc, #272]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001e22:	4a45      	ldr	r2, [pc, #276]	; (8001f38 <MX_TIM1_Init+0x158>)
 8001e24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5500-1;
 8001e26:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001e28:	f241 527b 	movw	r2, #5499	; 0x157b
 8001e2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2e:	4b41      	ldr	r3, [pc, #260]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001e34:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001e36:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3c:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e42:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e48:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e4e:	4839      	ldr	r0, [pc, #228]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001e50:	f007 f8c7 	bl	8008fe2 <HAL_TIM_Base_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001e5a:	f7ff fc1d 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e62:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4832      	ldr	r0, [pc, #200]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001e6c:	f007 fc20 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001e76:	f7ff fc0f 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e7a:	482e      	ldr	r0, [pc, #184]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001e7c:	f007 f986 	bl	800918c <HAL_TIM_PWM_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001e86:	f7ff fc07 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4825      	ldr	r0, [pc, #148]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001e9e:	f008 f93f 	bl	800a120 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001ea8:	f7ff fbf6 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eac:	2360      	movs	r3, #96	; 0x60
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4818      	ldr	r0, [pc, #96]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001ed2:	f007 fad9 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001edc:	f7ff fbdc 	bl	8001698 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4807      	ldr	r0, [pc, #28]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001f16:	f008 f99f 	bl	800a258 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001f20:	f7ff fbba 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f24:	4803      	ldr	r0, [pc, #12]	; (8001f34 <MX_TIM1_Init+0x154>)
 8001f26:	f000 fdc3 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 8001f2a:	bf00      	nop
 8001f2c:	3770      	adds	r7, #112	; 0x70
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	24000a24 	.word	0x24000a24
 8001f38:	40010000 	.word	0x40010000

08001f3c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08e      	sub	sp, #56	; 0x38
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]
 8001f6a:	615a      	str	r2, [r3, #20]
 8001f6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <MX_TIM2_Init+0xec>)
 8001f70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5500- 1;
 8001f76:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <MX_TIM2_Init+0xec>)
 8001f78:	f241 527b 	movw	r2, #5499	; 0x157b
 8001f7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <MX_TIM2_Init+0xec>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001f84:	4b28      	ldr	r3, [pc, #160]	; (8002028 <MX_TIM2_Init+0xec>)
 8001f86:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8c:	4b26      	ldr	r3, [pc, #152]	; (8002028 <MX_TIM2_Init+0xec>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f92:	4b25      	ldr	r3, [pc, #148]	; (8002028 <MX_TIM2_Init+0xec>)
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f98:	4823      	ldr	r0, [pc, #140]	; (8002028 <MX_TIM2_Init+0xec>)
 8001f9a:	f007 f822 	bl	8008fe2 <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001fa4:	f7ff fb78 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	481c      	ldr	r0, [pc, #112]	; (8002028 <MX_TIM2_Init+0xec>)
 8001fb6:	f007 fb7b 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001fc0:	f7ff fb6a 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fc4:	4818      	ldr	r0, [pc, #96]	; (8002028 <MX_TIM2_Init+0xec>)
 8001fc6:	f007 f8e1 	bl	800918c <HAL_TIM_PWM_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001fd0:	f7ff fb62 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4811      	ldr	r0, [pc, #68]	; (8002028 <MX_TIM2_Init+0xec>)
 8001fe4:	f008 f89c 	bl	800a120 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001fee:	f7ff fb53 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff2:	2360      	movs	r3, #96	; 0x60
 8001ff4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002002:	463b      	mov	r3, r7
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_TIM2_Init+0xec>)
 800200a:	f007 fa3d 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002014:	f7ff fb40 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <MX_TIM2_Init+0xec>)
 800201a:	f000 fd49 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 800201e:	bf00      	nop
 8002020:	3738      	adds	r7, #56	; 0x38
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	24000a70 	.word	0x24000a70

0800202c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08e      	sub	sp, #56	; 0x38
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204c:	463b      	mov	r3, r7
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	615a      	str	r2, [r3, #20]
 800205c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <MX_TIM3_Init+0xe8>)
 8002060:	4a2d      	ldr	r2, [pc, #180]	; (8002118 <MX_TIM3_Init+0xec>)
 8002062:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5500 - 1;
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <MX_TIM3_Init+0xe8>)
 8002066:	f241 527b 	movw	r2, #5499	; 0x157b
 800206a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206c:	4b29      	ldr	r3, [pc, #164]	; (8002114 <MX_TIM3_Init+0xe8>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <MX_TIM3_Init+0xe8>)
 8002074:	f242 7210 	movw	r2, #10000	; 0x2710
 8002078:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <MX_TIM3_Init+0xe8>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <MX_TIM3_Init+0xe8>)
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002086:	4823      	ldr	r0, [pc, #140]	; (8002114 <MX_TIM3_Init+0xe8>)
 8002088:	f006 ffab 	bl	8008fe2 <HAL_TIM_Base_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002092:	f7ff fb01 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800209c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020a0:	4619      	mov	r1, r3
 80020a2:	481c      	ldr	r0, [pc, #112]	; (8002114 <MX_TIM3_Init+0xe8>)
 80020a4:	f007 fb04 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80020ae:	f7ff faf3 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020b2:	4818      	ldr	r0, [pc, #96]	; (8002114 <MX_TIM3_Init+0xe8>)
 80020b4:	f007 f86a 	bl	800918c <HAL_TIM_PWM_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80020be:	f7ff faeb 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020ca:	f107 031c 	add.w	r3, r7, #28
 80020ce:	4619      	mov	r1, r3
 80020d0:	4810      	ldr	r0, [pc, #64]	; (8002114 <MX_TIM3_Init+0xe8>)
 80020d2:	f008 f825 	bl	800a120 <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80020dc:	f7ff fadc 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e0:	2360      	movs	r3, #96	; 0x60
 80020e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f0:	463b      	mov	r3, r7
 80020f2:	2200      	movs	r2, #0
 80020f4:	4619      	mov	r1, r3
 80020f6:	4807      	ldr	r0, [pc, #28]	; (8002114 <MX_TIM3_Init+0xe8>)
 80020f8:	f007 f9c6 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002102:	f7ff fac9 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002106:	4803      	ldr	r0, [pc, #12]	; (8002114 <MX_TIM3_Init+0xe8>)
 8002108:	f000 fcd2 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 800210c:	bf00      	nop
 800210e:	3738      	adds	r7, #56	; 0x38
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	2400098c 	.word	0x2400098c
 8002118:	40000400 	.word	0x40000400

0800211c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	; 0x38
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800213c:	463b      	mov	r3, r7
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	611a      	str	r2, [r3, #16]
 800214a:	615a      	str	r2, [r3, #20]
 800214c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <MX_TIM4_Init+0xe8>)
 8002150:	4a2d      	ldr	r2, [pc, #180]	; (8002208 <MX_TIM4_Init+0xec>)
 8002152:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5500-1;
 8002154:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <MX_TIM4_Init+0xe8>)
 8002156:	f241 527b 	movw	r2, #5499	; 0x157b
 800215a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b29      	ldr	r3, [pc, #164]	; (8002204 <MX_TIM4_Init+0xe8>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8002162:	4b28      	ldr	r3, [pc, #160]	; (8002204 <MX_TIM4_Init+0xe8>)
 8002164:	f242 7210 	movw	r2, #10000	; 0x2710
 8002168:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <MX_TIM4_Init+0xe8>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <MX_TIM4_Init+0xe8>)
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002176:	4823      	ldr	r0, [pc, #140]	; (8002204 <MX_TIM4_Init+0xe8>)
 8002178:	f006 ff33 	bl	8008fe2 <HAL_TIM_Base_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8002182:	f7ff fa89 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800218c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002190:	4619      	mov	r1, r3
 8002192:	481c      	ldr	r0, [pc, #112]	; (8002204 <MX_TIM4_Init+0xe8>)
 8002194:	f007 fa8c 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800219e:	f7ff fa7b 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021a2:	4818      	ldr	r0, [pc, #96]	; (8002204 <MX_TIM4_Init+0xe8>)
 80021a4:	f006 fff2 	bl	800918c <HAL_TIM_PWM_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80021ae:	f7ff fa73 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	4619      	mov	r1, r3
 80021c0:	4810      	ldr	r0, [pc, #64]	; (8002204 <MX_TIM4_Init+0xe8>)
 80021c2:	f007 ffad 	bl	800a120 <HAL_TIMEx_MasterConfigSynchronization>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80021cc:	f7ff fa64 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021d0:	2360      	movs	r3, #96	; 0x60
 80021d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e0:	463b      	mov	r3, r7
 80021e2:	2200      	movs	r2, #0
 80021e4:	4619      	mov	r1, r3
 80021e6:	4807      	ldr	r0, [pc, #28]	; (8002204 <MX_TIM4_Init+0xe8>)
 80021e8:	f007 f94e 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80021f2:	f7ff fa51 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021f6:	4803      	ldr	r0, [pc, #12]	; (8002204 <MX_TIM4_Init+0xe8>)
 80021f8:	f000 fc5a 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 80021fc:	bf00      	nop
 80021fe:	3738      	adds	r7, #56	; 0x38
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	240008a8 	.word	0x240008a8
 8002208:	40000800 	.word	0x40000800

0800220c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002212:	f107 0320 	add.w	r3, r7, #32
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	611a      	str	r2, [r3, #16]
 800222e:	615a      	str	r2, [r3, #20]
 8002230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <MX_TIM12_Init+0xc0>)
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <MX_TIM12_Init+0xc4>)
 8002236:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 550 - 1;
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <MX_TIM12_Init+0xc0>)
 800223a:	f240 2225 	movw	r2, #549	; 0x225
 800223e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <MX_TIM12_Init+0xc0>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1 - 1;
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <MX_TIM12_Init+0xc0>)
 8002248:	2200      	movs	r2, #0
 800224a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <MX_TIM12_Init+0xc0>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <MX_TIM12_Init+0xc0>)
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002258:	481c      	ldr	r0, [pc, #112]	; (80022cc <MX_TIM12_Init+0xc0>)
 800225a:	f006 fec2 	bl	8008fe2 <HAL_TIM_Base_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002264:	f7ff fa18 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800226e:	f107 0320 	add.w	r3, r7, #32
 8002272:	4619      	mov	r1, r3
 8002274:	4815      	ldr	r0, [pc, #84]	; (80022cc <MX_TIM12_Init+0xc0>)
 8002276:	f007 fa1b 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002280:	f7ff fa0a 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002284:	4811      	ldr	r0, [pc, #68]	; (80022cc <MX_TIM12_Init+0xc0>)
 8002286:	f006 ff81 	bl	800918c <HAL_TIM_PWM_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002290:	f7ff fa02 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002294:	2360      	movs	r3, #96	; 0x60
 8002296:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 8002298:	f240 13f3 	movw	r3, #499	; 0x1f3
 800229c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	4619      	mov	r1, r3
 80022ac:	4807      	ldr	r0, [pc, #28]	; (80022cc <MX_TIM12_Init+0xc0>)
 80022ae:	f007 f8eb 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80022b8:	f7ff f9ee 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80022bc:	4803      	ldr	r0, [pc, #12]	; (80022cc <MX_TIM12_Init+0xc0>)
 80022be:	f000 fbf7 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 80022c2:	bf00      	nop
 80022c4:	3730      	adds	r7, #48	; 0x30
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	24000b54 	.word	0x24000b54
 80022d0:	40001800 	.word	0x40001800

080022d4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <MX_TIM13_Init+0x40>)
 80022da:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <MX_TIM13_Init+0x44>)
 80022dc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550 - 1;
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <MX_TIM13_Init+0x40>)
 80022e0:	f240 2225 	movw	r2, #549	; 0x225
 80022e4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <MX_TIM13_Init+0x40>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1-1;
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <MX_TIM13_Init+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <MX_TIM13_Init+0x40>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <MX_TIM13_Init+0x40>)
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80022fe:	4805      	ldr	r0, [pc, #20]	; (8002314 <MX_TIM13_Init+0x40>)
 8002300:	f006 fe6f 	bl	8008fe2 <HAL_TIM_Base_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800230a:	f7ff f9c5 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	240009d8 	.word	0x240009d8
 8002318:	40001c00 	.word	0x40001c00

0800231c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	615a      	str	r2, [r3, #20]
 8002332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <MX_TIM14_Init+0x94>)
 8002336:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <MX_TIM14_Init+0x98>)
 8002338:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <MX_TIM14_Init+0x94>)
 800233c:	f240 2225 	movw	r2, #549	; 0x225
 8002340:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <MX_TIM14_Init+0x94>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1-1;
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <MX_TIM14_Init+0x94>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <MX_TIM14_Init+0x94>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <MX_TIM14_Init+0x94>)
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800235a:	4815      	ldr	r0, [pc, #84]	; (80023b0 <MX_TIM14_Init+0x94>)
 800235c:	f006 fe41 	bl	8008fe2 <HAL_TIM_Base_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002366:	f7ff f997 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800236a:	4811      	ldr	r0, [pc, #68]	; (80023b0 <MX_TIM14_Init+0x94>)
 800236c:	f006 ff0e 	bl	800918c <HAL_TIM_PWM_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002376:	f7ff f98f 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800237a:	2360      	movs	r3, #96	; 0x60
 800237c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800237e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2200      	movs	r2, #0
 8002390:	4619      	mov	r1, r3
 8002392:	4807      	ldr	r0, [pc, #28]	; (80023b0 <MX_TIM14_Init+0x94>)
 8002394:	f007 f878 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800239e:	f7ff f97b 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80023a2:	4803      	ldr	r0, [pc, #12]	; (80023b0 <MX_TIM14_Init+0x94>)
 80023a4:	f000 fb84 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 80023a8:	bf00      	nop
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	24000b08 	.word	0x24000b08
 80023b4:	40002000 	.word	0x40002000

080023b8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b09c      	sub	sp, #112	; 0x70
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
 80023e8:	615a      	str	r2, [r3, #20]
 80023ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	2234      	movs	r2, #52	; 0x34
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f009 ff52 	bl	800c29c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80023f8:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <MX_TIM15_Init+0x140>)
 80023fa:	4a40      	ldr	r2, [pc, #256]	; (80024fc <MX_TIM15_Init+0x144>)
 80023fc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 5500 - 1;
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <MX_TIM15_Init+0x140>)
 8002400:	f241 527b 	movw	r2, #5499	; 0x157b
 8002404:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002406:	4b3c      	ldr	r3, [pc, #240]	; (80024f8 <MX_TIM15_Init+0x140>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 800240c:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <MX_TIM15_Init+0x140>)
 800240e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002412:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002414:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <MX_TIM15_Init+0x140>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800241a:	4b37      	ldr	r3, [pc, #220]	; (80024f8 <MX_TIM15_Init+0x140>)
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002420:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <MX_TIM15_Init+0x140>)
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002426:	4834      	ldr	r0, [pc, #208]	; (80024f8 <MX_TIM15_Init+0x140>)
 8002428:	f006 fddb 	bl	8008fe2 <HAL_TIM_Base_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8002432:	f7ff f931 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800243c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002440:	4619      	mov	r1, r3
 8002442:	482d      	ldr	r0, [pc, #180]	; (80024f8 <MX_TIM15_Init+0x140>)
 8002444:	f007 f934 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 800244e:	f7ff f923 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002452:	4829      	ldr	r0, [pc, #164]	; (80024f8 <MX_TIM15_Init+0x140>)
 8002454:	f006 fe9a 	bl	800918c <HAL_TIM_PWM_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 800245e:	f7ff f91b 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800246a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800246e:	4619      	mov	r1, r3
 8002470:	4821      	ldr	r0, [pc, #132]	; (80024f8 <MX_TIM15_Init+0x140>)
 8002472:	f007 fe55 	bl	800a120 <HAL_TIMEx_MasterConfigSynchronization>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 800247c:	f7ff f90c 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002480:	2360      	movs	r3, #96	; 0x60
 8002482:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002488:	2300      	movs	r3, #0
 800248a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800248c:	2300      	movs	r3, #0
 800248e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800249c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024a0:	2200      	movs	r2, #0
 80024a2:	4619      	mov	r1, r3
 80024a4:	4814      	ldr	r0, [pc, #80]	; (80024f8 <MX_TIM15_Init+0x140>)
 80024a6:	f006 ffef 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80024b0:	f7ff f8f2 	bl	8001698 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4807      	ldr	r0, [pc, #28]	; (80024f8 <MX_TIM15_Init+0x140>)
 80024dc:	f007 febc 	bl	800a258 <HAL_TIMEx_ConfigBreakDeadTime>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80024e6:	f7ff f8d7 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <MX_TIM15_Init+0x140>)
 80024ec:	f000 fae0 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 80024f0:	bf00      	nop
 80024f2:	3770      	adds	r7, #112	; 0x70
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	240008f4 	.word	0x240008f4
 80024fc:	40014000 	.word	0x40014000

08002500 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b094      	sub	sp, #80	; 0x50
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002506:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	615a      	str	r2, [r3, #20]
 8002518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800251a:	463b      	mov	r3, r7
 800251c:	2234      	movs	r2, #52	; 0x34
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f009 febb 	bl	800c29c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002526:	4b31      	ldr	r3, [pc, #196]	; (80025ec <MX_TIM16_Init+0xec>)
 8002528:	4a31      	ldr	r2, [pc, #196]	; (80025f0 <MX_TIM16_Init+0xf0>)
 800252a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 800252c:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <MX_TIM16_Init+0xec>)
 800252e:	f240 2225 	movw	r2, #549	; 0x225
 8002532:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <MX_TIM16_Init+0xec>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1-1;
 800253a:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <MX_TIM16_Init+0xec>)
 800253c:	2200      	movs	r2, #0
 800253e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <MX_TIM16_Init+0xec>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <MX_TIM16_Init+0xec>)
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <MX_TIM16_Init+0xec>)
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002552:	4826      	ldr	r0, [pc, #152]	; (80025ec <MX_TIM16_Init+0xec>)
 8002554:	f006 fd45 	bl	8008fe2 <HAL_TIM_Base_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800255e:	f7ff f89b 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002562:	4822      	ldr	r0, [pc, #136]	; (80025ec <MX_TIM16_Init+0xec>)
 8002564:	f006 fe12 	bl	800918c <HAL_TIM_PWM_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800256e:	f7ff f893 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002572:	2360      	movs	r3, #96	; 0x60
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8002576:	f240 13f3 	movw	r3, #499	; 0x1f3
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800257c:	2300      	movs	r3, #0
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002580:	2300      	movs	r3, #0
 8002582:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002588:	2300      	movs	r3, #0
 800258a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002590:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002594:	2200      	movs	r2, #0
 8002596:	4619      	mov	r1, r3
 8002598:	4814      	ldr	r0, [pc, #80]	; (80025ec <MX_TIM16_Init+0xec>)
 800259a:	f006 ff75 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80025a4:	f7ff f878 	bl	8001698 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80025ca:	463b      	mov	r3, r7
 80025cc:	4619      	mov	r1, r3
 80025ce:	4807      	ldr	r0, [pc, #28]	; (80025ec <MX_TIM16_Init+0xec>)
 80025d0:	f007 fe42 	bl	800a258 <HAL_TIMEx_ConfigBreakDeadTime>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80025da:	f7ff f85d 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80025de:	4803      	ldr	r0, [pc, #12]	; (80025ec <MX_TIM16_Init+0xec>)
 80025e0:	f000 fa66 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 80025e4:	bf00      	nop
 80025e6:	3750      	adds	r7, #80	; 0x50
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	24000ba0 	.word	0x24000ba0
 80025f0:	40014400 	.word	0x40014400

080025f4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b094      	sub	sp, #80	; 0x50
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	611a      	str	r2, [r3, #16]
 800260a:	615a      	str	r2, [r3, #20]
 800260c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800260e:	463b      	mov	r3, r7
 8002610:	2234      	movs	r2, #52	; 0x34
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f009 fe41 	bl	800c29c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800261a:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <MX_TIM17_Init+0xf0>)
 800261c:	4a32      	ldr	r2, [pc, #200]	; (80026e8 <MX_TIM17_Init+0xf4>)
 800261e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <MX_TIM17_Init+0xf0>)
 8002622:	f240 2225 	movw	r2, #549	; 0x225
 8002626:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002628:	4b2e      	ldr	r3, [pc, #184]	; (80026e4 <MX_TIM17_Init+0xf0>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 800262e:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <MX_TIM17_Init+0xf0>)
 8002630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002634:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002636:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <MX_TIM17_Init+0xf0>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800263c:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <MX_TIM17_Init+0xf0>)
 800263e:	2200      	movs	r2, #0
 8002640:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002642:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <MX_TIM17_Init+0xf0>)
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002648:	4826      	ldr	r0, [pc, #152]	; (80026e4 <MX_TIM17_Init+0xf0>)
 800264a:	f006 fcca 	bl	8008fe2 <HAL_TIM_Base_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8002654:	f7ff f820 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002658:	4822      	ldr	r0, [pc, #136]	; (80026e4 <MX_TIM17_Init+0xf0>)
 800265a:	f006 fd97 	bl	800918c <HAL_TIM_PWM_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8002664:	f7ff f818 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002668:	2360      	movs	r3, #96	; 0x60
 800266a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 800266c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002672:	2300      	movs	r3, #0
 8002674:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002676:	2300      	movs	r3, #0
 8002678:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002686:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800268a:	2200      	movs	r2, #0
 800268c:	4619      	mov	r1, r3
 800268e:	4815      	ldr	r0, [pc, #84]	; (80026e4 <MX_TIM17_Init+0xf0>)
 8002690:	f006 fefa 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800269a:	f7fe fffd 	bl	8001698 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80026c0:	463b      	mov	r3, r7
 80026c2:	4619      	mov	r1, r3
 80026c4:	4807      	ldr	r0, [pc, #28]	; (80026e4 <MX_TIM17_Init+0xf0>)
 80026c6:	f007 fdc7 	bl	800a258 <HAL_TIMEx_ConfigBreakDeadTime>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 80026d0:	f7fe ffe2 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80026d4:	4803      	ldr	r0, [pc, #12]	; (80026e4 <MX_TIM17_Init+0xf0>)
 80026d6:	f000 f9eb 	bl	8002ab0 <HAL_TIM_MspPostInit>

}
 80026da:	bf00      	nop
 80026dc:	3750      	adds	r7, #80	; 0x50
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	24000940 	.word	0x24000940
 80026e8:	40014800 	.word	0x40014800

080026ec <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f2:	f107 0310 	add.w	r3, r7, #16
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800270a:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <MX_TIM23_Init+0x98>)
 800270c:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <MX_TIM23_Init+0x9c>)
 800270e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8002710:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <MX_TIM23_Init+0x98>)
 8002712:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002716:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <MX_TIM23_Init+0x98>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <MX_TIM23_Init+0x98>)
 8002720:	f04f 32ff 	mov.w	r2, #4294967295
 8002724:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <MX_TIM23_Init+0x98>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272c:	4b15      	ldr	r3, [pc, #84]	; (8002784 <MX_TIM23_Init+0x98>)
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8002732:	4814      	ldr	r0, [pc, #80]	; (8002784 <MX_TIM23_Init+0x98>)
 8002734:	f006 fc55 	bl	8008fe2 <HAL_TIM_Base_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800273e:	f7fe ffab 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002746:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8002748:	f107 0310 	add.w	r3, r7, #16
 800274c:	4619      	mov	r1, r3
 800274e:	480d      	ldr	r0, [pc, #52]	; (8002784 <MX_TIM23_Init+0x98>)
 8002750:	f006 ffae 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 800275a:	f7fe ff9d 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	4619      	mov	r1, r3
 800276a:	4806      	ldr	r0, [pc, #24]	; (8002784 <MX_TIM23_Init+0x98>)
 800276c:	f007 fcd8 	bl	800a120 <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8002776:	f7fe ff8f 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800277a:	bf00      	nop
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	24000abc 	.word	0x24000abc
 8002788:	4000e000 	.word	0x4000e000

0800278c <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <MX_TIM24_Init+0x94>)
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <MX_TIM24_Init+0x98>)
 80027ae:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <MX_TIM24_Init+0x94>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <MX_TIM24_Init+0x94>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <MX_TIM24_Init+0x94>)
 80027be:	f04f 32ff 	mov.w	r2, #4294967295
 80027c2:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <MX_TIM24_Init+0x94>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <MX_TIM24_Init+0x94>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80027d0:	4813      	ldr	r0, [pc, #76]	; (8002820 <MX_TIM24_Init+0x94>)
 80027d2:	f006 fc06 	bl	8008fe2 <HAL_TIM_Base_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 80027dc:	f7fe ff5c 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 80027e6:	f107 0310 	add.w	r3, r7, #16
 80027ea:	4619      	mov	r1, r3
 80027ec:	480c      	ldr	r0, [pc, #48]	; (8002820 <MX_TIM24_Init+0x94>)
 80027ee:	f006 ff5f 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 80027f8:	f7fe ff4e 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	4619      	mov	r1, r3
 8002808:	4805      	ldr	r0, [pc, #20]	; (8002820 <MX_TIM24_Init+0x94>)
 800280a:	f007 fc89 	bl	800a120 <HAL_TIMEx_MasterConfigSynchronization>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 8002814:	f7fe ff40 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8002818:	bf00      	nop
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	2400085c 	.word	0x2400085c
 8002824:	4000e400 	.word	0x4000e400

08002828 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b094      	sub	sp, #80	; 0x50
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a8d      	ldr	r2, [pc, #564]	; (8002a7c <HAL_TIM_Base_MspInit+0x254>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10f      	bne.n	800286a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800284a:	4b8d      	ldr	r3, [pc, #564]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 800284c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002850:	4a8b      	ldr	r2, [pc, #556]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800285a:	4b89      	ldr	r3, [pc, #548]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 800285c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	63bb      	str	r3, [r7, #56]	; 0x38
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8002868:	e104      	b.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002872:	d10f      	bne.n	8002894 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002874:	4b82      	ldr	r3, [pc, #520]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800287a:	4a81      	ldr	r2, [pc, #516]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002884:	4b7e      	ldr	r3, [pc, #504]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	637b      	str	r3, [r7, #52]	; 0x34
 8002890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002892:	e0ef      	b.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM3)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a7a      	ldr	r2, [pc, #488]	; (8002a84 <HAL_TIM_Base_MspInit+0x25c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10f      	bne.n	80028be <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800289e:	4b78      	ldr	r3, [pc, #480]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80028a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028a4:	4a76      	ldr	r2, [pc, #472]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028ae:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80028b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80028bc:	e0da      	b.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM4)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a71      	ldr	r2, [pc, #452]	; (8002a88 <HAL_TIM_Base_MspInit+0x260>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d10f      	bne.n	80028e8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028c8:	4b6d      	ldr	r3, [pc, #436]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80028ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ce:	4a6c      	ldr	r2, [pc, #432]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028d8:	4b69      	ldr	r3, [pc, #420]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80028da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80028e6:	e0c5      	b.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM12)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a67      	ldr	r2, [pc, #412]	; (8002a8c <HAL_TIM_Base_MspInit+0x264>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10f      	bne.n	8002912 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028f2:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80028f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028f8:	4a61      	ldr	r2, [pc, #388]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80028fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002902:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002910:	e0b0      	b.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM13)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a5e      	ldr	r2, [pc, #376]	; (8002a90 <HAL_TIM_Base_MspInit+0x268>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10f      	bne.n	800293c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800291c:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 800291e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002922:	4a57      	ldr	r2, [pc, #348]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002928:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800292c:	4b54      	ldr	r3, [pc, #336]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 800292e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800293a:	e09b      	b.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM14)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a54      	ldr	r2, [pc, #336]	; (8002a94 <HAL_TIM_Base_MspInit+0x26c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10f      	bne.n	8002966 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002946:	4b4e      	ldr	r3, [pc, #312]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800294c:	4a4c      	ldr	r2, [pc, #304]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002956:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	623b      	str	r3, [r7, #32]
 8002962:	6a3b      	ldr	r3, [r7, #32]
}
 8002964:	e086      	b.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM15)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <HAL_TIM_Base_MspInit+0x270>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d12e      	bne.n	80029ce <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002970:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002976:	4a42      	ldr	r2, [pc, #264]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002980:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	4b3c      	ldr	r3, [pc, #240]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002994:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800299e:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80029a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029ac:	2308      	movs	r3, #8
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b8:	2300      	movs	r3, #0
 80029ba:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80029bc:	2304      	movs	r3, #4
 80029be:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029c4:	4619      	mov	r1, r3
 80029c6:	4835      	ldr	r0, [pc, #212]	; (8002a9c <HAL_TIM_Base_MspInit+0x274>)
 80029c8:	f002 fff8 	bl	80059bc <HAL_GPIO_Init>
}
 80029cc:	e052      	b.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM16)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <HAL_TIM_Base_MspInit+0x278>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d10f      	bne.n	80029f8 <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80029d8:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80029da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029de:	4a28      	ldr	r2, [pc, #160]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 80029ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
}
 80029f6:	e03d      	b.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM17)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a29      	ldr	r2, [pc, #164]	; (8002aa4 <HAL_TIM_Base_MspInit+0x27c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10f      	bne.n	8002a22 <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a08:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]
}
 8002a20:	e028      	b.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM23)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <HAL_TIM_Base_MspInit+0x280>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d10f      	bne.n	8002a4c <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002a2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a38:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002a3c:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002a3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
}
 8002a4a:	e013      	b.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM24)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a16      	ldr	r2, [pc, #88]	; (8002aac <HAL_TIM_Base_MspInit+0x284>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10e      	bne.n	8002a74 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002a58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002a5c:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002a5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a62:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_TIM_Base_MspInit+0x258>)
 8002a68:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
}
 8002a74:	bf00      	nop
 8002a76:	3750      	adds	r7, #80	; 0x50
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	58024400 	.word	0x58024400
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40001800 	.word	0x40001800
 8002a90:	40001c00 	.word	0x40001c00
 8002a94:	40002000 	.word	0x40002000
 8002a98:	40014000 	.word	0x40014000
 8002a9c:	58020000 	.word	0x58020000
 8002aa0:	40014400 	.word	0x40014400
 8002aa4:	40014800 	.word	0x40014800
 8002aa8:	4000e000 	.word	0x4000e000
 8002aac:	4000e400 	.word	0x4000e400

08002ab0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b090      	sub	sp, #64	; 0x40
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4aa9      	ldr	r2, [pc, #676]	; (8002d74 <HAL_TIM_MspPostInit+0x2c4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d120      	bne.n	8002b14 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ad2:	4ba9      	ldr	r3, [pc, #676]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad8:	4aa7      	ldr	r2, [pc, #668]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002ada:	f043 0310 	orr.w	r3, r3, #16
 8002ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae2:	4ba5      	ldr	r3, [pc, #660]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	489b      	ldr	r0, [pc, #620]	; (8002d7c <HAL_TIM_MspPostInit+0x2cc>)
 8002b0e:	f002 ff55 	bl	80059bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002b12:	e12a      	b.n	8002d6a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d11f      	bne.n	8002b5e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	4b96      	ldr	r3, [pc, #600]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b24:	4a94      	ldr	r2, [pc, #592]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b2e:	4b92      	ldr	r3, [pc, #584]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b54:	4619      	mov	r1, r3
 8002b56:	488a      	ldr	r0, [pc, #552]	; (8002d80 <HAL_TIM_MspPostInit+0x2d0>)
 8002b58:	f002 ff30 	bl	80059bc <HAL_GPIO_Init>
}
 8002b5c:	e105      	b.n	8002d6a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM3)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a88      	ldr	r2, [pc, #544]	; (8002d84 <HAL_TIM_MspPostInit+0x2d4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d11f      	bne.n	8002ba8 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b68:	4b83      	ldr	r3, [pc, #524]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6e:	4a82      	ldr	r2, [pc, #520]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b78:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b86:	2340      	movs	r3, #64	; 0x40
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b92:	2300      	movs	r3, #0
 8002b94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b96:	2302      	movs	r3, #2
 8002b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4879      	ldr	r0, [pc, #484]	; (8002d88 <HAL_TIM_MspPostInit+0x2d8>)
 8002ba2:	f002 ff0b 	bl	80059bc <HAL_GPIO_Init>
}
 8002ba6:	e0e0      	b.n	8002d6a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM4)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a77      	ldr	r2, [pc, #476]	; (8002d8c <HAL_TIM_MspPostInit+0x2dc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d120      	bne.n	8002bf4 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb2:	4b71      	ldr	r3, [pc, #452]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb8:	4a6f      	ldr	r2, [pc, #444]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002bba:	f043 0308 	orr.w	r3, r3, #8
 8002bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bc2:	4b6d      	ldr	r3, [pc, #436]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002be2:	2302      	movs	r3, #2
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bea:	4619      	mov	r1, r3
 8002bec:	4868      	ldr	r0, [pc, #416]	; (8002d90 <HAL_TIM_MspPostInit+0x2e0>)
 8002bee:	f002 fee5 	bl	80059bc <HAL_GPIO_Init>
}
 8002bf2:	e0ba      	b.n	8002d6a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM12)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a66      	ldr	r2, [pc, #408]	; (8002d94 <HAL_TIM_MspPostInit+0x2e4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d120      	bne.n	8002c40 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	4b5e      	ldr	r3, [pc, #376]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c04:	4a5c      	ldr	r2, [pc, #368]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002c06:	f043 0302 	orr.w	r3, r3, #2
 8002c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c0e:	4b5a      	ldr	r3, [pc, #360]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c36:	4619      	mov	r1, r3
 8002c38:	4857      	ldr	r0, [pc, #348]	; (8002d98 <HAL_TIM_MspPostInit+0x2e8>)
 8002c3a:	f002 febf 	bl	80059bc <HAL_GPIO_Init>
}
 8002c3e:	e094      	b.n	8002d6a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM14)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a55      	ldr	r2, [pc, #340]	; (8002d9c <HAL_TIM_MspPostInit+0x2ec>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d11f      	bne.n	8002c8a <HAL_TIM_MspPostInit+0x1da>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	4b4b      	ldr	r3, [pc, #300]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c50:	4a49      	ldr	r2, [pc, #292]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	2300      	movs	r3, #0
 8002c76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002c78:	2309      	movs	r3, #9
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c80:	4619      	mov	r1, r3
 8002c82:	483f      	ldr	r0, [pc, #252]	; (8002d80 <HAL_TIM_MspPostInit+0x2d0>)
 8002c84:	f002 fe9a 	bl	80059bc <HAL_GPIO_Init>
}
 8002c88:	e06f      	b.n	8002d6a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM15)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a44      	ldr	r2, [pc, #272]	; (8002da0 <HAL_TIM_MspPostInit+0x2f0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d11f      	bne.n	8002cd4 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c94:	4b38      	ldr	r3, [pc, #224]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9a:	4a37      	ldr	r2, [pc, #220]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002c9c:	f043 0310 	orr.w	r3, r3, #16
 8002ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca4:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cca:	4619      	mov	r1, r3
 8002ccc:	482b      	ldr	r0, [pc, #172]	; (8002d7c <HAL_TIM_MspPostInit+0x2cc>)
 8002cce:	f002 fe75 	bl	80059bc <HAL_GPIO_Init>
}
 8002cd2:	e04a      	b.n	8002d6a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM16)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a32      	ldr	r2, [pc, #200]	; (8002da4 <HAL_TIM_MspPostInit+0x2f4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d120      	bne.n	8002d20 <HAL_TIM_MspPostInit+0x270>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce4:	4a24      	ldr	r2, [pc, #144]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cee:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d16:	4619      	mov	r1, r3
 8002d18:	481f      	ldr	r0, [pc, #124]	; (8002d98 <HAL_TIM_MspPostInit+0x2e8>)
 8002d1a:	f002 fe4f 	bl	80059bc <HAL_GPIO_Init>
}
 8002d1e:	e024      	b.n	8002d6a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM17)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a20      	ldr	r2, [pc, #128]	; (8002da8 <HAL_TIM_MspPostInit+0x2f8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d11f      	bne.n	8002d6a <HAL_TIM_MspPostInit+0x2ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d30:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002d32:	f043 0302 	orr.w	r3, r3, #2
 8002d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HAL_TIM_MspPostInit+0x2c8>)
 8002d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2300      	movs	r3, #0
 8002d58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d62:	4619      	mov	r1, r3
 8002d64:	480c      	ldr	r0, [pc, #48]	; (8002d98 <HAL_TIM_MspPostInit+0x2e8>)
 8002d66:	f002 fe29 	bl	80059bc <HAL_GPIO_Init>
}
 8002d6a:	bf00      	nop
 8002d6c:	3740      	adds	r7, #64	; 0x40
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40010000 	.word	0x40010000
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	58021000 	.word	0x58021000
 8002d80:	58020000 	.word	0x58020000
 8002d84:	40000400 	.word	0x40000400
 8002d88:	58020800 	.word	0x58020800
 8002d8c:	40000800 	.word	0x40000800
 8002d90:	58020c00 	.word	0x58020c00
 8002d94:	40001800 	.word	0x40001800
 8002d98:	58020400 	.word	0x58020400
 8002d9c:	40002000 	.word	0x40002000
 8002da0:	40014000 	.word	0x40014000
 8002da4:	40014400 	.word	0x40014400
 8002da8:	40014800 	.word	0x40014800

08002dac <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002db0:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <MX_UART4_Init+0x90>)
 8002db2:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <MX_UART4_Init+0x94>)
 8002db4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002db6:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <MX_UART4_Init+0x90>)
 8002db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dbc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002dbe:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <MX_UART4_Init+0x90>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <MX_UART4_Init+0x90>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002dca:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <MX_UART4_Init+0x90>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <MX_UART4_Init+0x90>)
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd6:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <MX_UART4_Init+0x90>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ddc:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <MX_UART4_Init+0x90>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <MX_UART4_Init+0x90>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <MX_UART4_Init+0x90>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <MX_UART4_Init+0x90>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002df4:	4811      	ldr	r0, [pc, #68]	; (8002e3c <MX_UART4_Init+0x90>)
 8002df6:	f007 facf 	bl	800a398 <HAL_UART_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002e00:	f7fe fc4a 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e04:	2100      	movs	r1, #0
 8002e06:	480d      	ldr	r0, [pc, #52]	; (8002e3c <MX_UART4_Init+0x90>)
 8002e08:	f009 f946 	bl	800c098 <HAL_UARTEx_SetTxFifoThreshold>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002e12:	f7fe fc41 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e16:	2100      	movs	r1, #0
 8002e18:	4808      	ldr	r0, [pc, #32]	; (8002e3c <MX_UART4_Init+0x90>)
 8002e1a:	f009 f97b 	bl	800c114 <HAL_UARTEx_SetRxFifoThreshold>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002e24:	f7fe fc38 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002e28:	4804      	ldr	r0, [pc, #16]	; (8002e3c <MX_UART4_Init+0x90>)
 8002e2a:	f009 f8fc 	bl	800c026 <HAL_UARTEx_DisableFifoMode>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002e34:	f7fe fc30 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	24000d0c 	.word	0x24000d0c
 8002e40:	40004c00 	.word	0x40004c00

08002e44 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002e48:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e4a:	4a23      	ldr	r2, [pc, #140]	; (8002ed8 <MX_UART5_Init+0x94>)
 8002e4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002e4e:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e56:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e8c:	4811      	ldr	r0, [pc, #68]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002e8e:	f007 fa83 	bl	800a398 <HAL_UART_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002e98:	f7fe fbfe 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	480d      	ldr	r0, [pc, #52]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002ea0:	f009 f8fa 	bl	800c098 <HAL_UARTEx_SetTxFifoThreshold>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002eaa:	f7fe fbf5 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002eb2:	f009 f92f 	bl	800c114 <HAL_UARTEx_SetRxFifoThreshold>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002ebc:	f7fe fbec 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002ec0:	4804      	ldr	r0, [pc, #16]	; (8002ed4 <MX_UART5_Init+0x90>)
 8002ec2:	f009 f8b0 	bl	800c026 <HAL_UARTEx_DisableFifoMode>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002ecc:	f7fe fbe4 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	24000c7c 	.word	0x24000c7c
 8002ed8:	40005000 	.word	0x40005000

08002edc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ee0:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002ee2:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <MX_USART2_UART_Init+0x94>)
 8002ee4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eee:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002efa:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f00:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002f02:	220c      	movs	r2, #12
 8002f04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f0c:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f24:	4811      	ldr	r0, [pc, #68]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002f26:	f007 fa37 	bl	800a398 <HAL_UART_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002f30:	f7fe fbb2 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f34:	2100      	movs	r1, #0
 8002f36:	480d      	ldr	r0, [pc, #52]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002f38:	f009 f8ae 	bl	800c098 <HAL_UARTEx_SetTxFifoThreshold>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002f42:	f7fe fba9 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f46:	2100      	movs	r1, #0
 8002f48:	4808      	ldr	r0, [pc, #32]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002f4a:	f009 f8e3 	bl	800c114 <HAL_UARTEx_SetRxFifoThreshold>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002f54:	f7fe fba0 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002f58:	4804      	ldr	r0, [pc, #16]	; (8002f6c <MX_USART2_UART_Init+0x90>)
 8002f5a:	f009 f864 	bl	800c026 <HAL_UARTEx_DisableFifoMode>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002f64:	f7fe fb98 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	24000d9c 	.word	0x24000d9c
 8002f70:	40004400 	.word	0x40004400

08002f74 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002f7a:	4a23      	ldr	r2, [pc, #140]	; (8003008 <MX_USART3_UART_Init+0x94>)
 8002f7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f7e:	4b21      	ldr	r3, [pc, #132]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa4:	4b17      	ldr	r3, [pc, #92]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fbc:	4811      	ldr	r0, [pc, #68]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002fbe:	f007 f9eb 	bl	800a398 <HAL_UART_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002fc8:	f7fe fb66 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fcc:	2100      	movs	r1, #0
 8002fce:	480d      	ldr	r0, [pc, #52]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002fd0:	f009 f862 	bl	800c098 <HAL_UARTEx_SetTxFifoThreshold>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002fda:	f7fe fb5d 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4808      	ldr	r0, [pc, #32]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002fe2:	f009 f897 	bl	800c114 <HAL_UARTEx_SetRxFifoThreshold>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002fec:	f7fe fb54 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ff0:	4804      	ldr	r0, [pc, #16]	; (8003004 <MX_USART3_UART_Init+0x90>)
 8002ff2:	f009 f818 	bl	800c026 <HAL_UARTEx_DisableFifoMode>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ffc:	f7fe fb4c 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}
 8003004:	24000bec 	.word	0x24000bec
 8003008:	40004800 	.word	0x40004800

0800300c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b0bc      	sub	sp, #240	; 0xf0
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003028:	22b4      	movs	r2, #180	; 0xb4
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f009 f935 	bl	800c29c <memset>
  if(uartHandle->Instance==UART4)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a96      	ldr	r2, [pc, #600]	; (8003290 <HAL_UART_MspInit+0x284>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d143      	bne.n	80030c4 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800303c:	2302      	movs	r3, #2
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800304a:	4618      	mov	r0, r3
 800304c:	f003 fe16 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003056:	f7fe fb1f 	bl	8001698 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800305a:	4b8e      	ldr	r3, [pc, #568]	; (8003294 <HAL_UART_MspInit+0x288>)
 800305c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003060:	4a8c      	ldr	r2, [pc, #560]	; (8003294 <HAL_UART_MspInit+0x288>)
 8003062:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003066:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800306a:	4b8a      	ldr	r3, [pc, #552]	; (8003294 <HAL_UART_MspInit+0x288>)
 800306c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003078:	4b86      	ldr	r3, [pc, #536]	; (8003294 <HAL_UART_MspInit+0x288>)
 800307a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307e:	4a85      	ldr	r2, [pc, #532]	; (8003294 <HAL_UART_MspInit+0x288>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003088:	4b82      	ldr	r3, [pc, #520]	; (8003294 <HAL_UART_MspInit+0x288>)
 800308a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003096:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800309a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80030b0:	2306      	movs	r3, #6
 80030b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030ba:	4619      	mov	r1, r3
 80030bc:	4876      	ldr	r0, [pc, #472]	; (8003298 <HAL_UART_MspInit+0x28c>)
 80030be:	f002 fc7d 	bl	80059bc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80030c2:	e0e0      	b.n	8003286 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==UART5)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a74      	ldr	r2, [pc, #464]	; (800329c <HAL_UART_MspInit+0x290>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d143      	bne.n	8003156 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80030ce:	2302      	movs	r3, #2
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 fdcd 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80030e8:	f7fe fad6 	bl	8001698 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80030ec:	4b69      	ldr	r3, [pc, #420]	; (8003294 <HAL_UART_MspInit+0x288>)
 80030ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030f2:	4a68      	ldr	r2, [pc, #416]	; (8003294 <HAL_UART_MspInit+0x288>)
 80030f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030fc:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_UART_MspInit+0x288>)
 80030fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310a:	4b62      	ldr	r3, [pc, #392]	; (8003294 <HAL_UART_MspInit+0x288>)
 800310c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003110:	4a60      	ldr	r2, [pc, #384]	; (8003294 <HAL_UART_MspInit+0x288>)
 8003112:	f043 0302 	orr.w	r3, r3, #2
 8003116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800311a:	4b5e      	ldr	r3, [pc, #376]	; (8003294 <HAL_UART_MspInit+0x288>)
 800311c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003128:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800312c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	2300      	movs	r3, #0
 800313e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003142:	230e      	movs	r3, #14
 8003144:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003148:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800314c:	4619      	mov	r1, r3
 800314e:	4854      	ldr	r0, [pc, #336]	; (80032a0 <HAL_UART_MspInit+0x294>)
 8003150:	f002 fc34 	bl	80059bc <HAL_GPIO_Init>
}
 8003154:	e097      	b.n	8003286 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a52      	ldr	r2, [pc, #328]	; (80032a4 <HAL_UART_MspInit+0x298>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d142      	bne.n	80031e6 <HAL_UART_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003160:	2302      	movs	r3, #2
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800316a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800316e:	4618      	mov	r0, r3
 8003170:	f003 fd84 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_UART_MspInit+0x172>
      Error_Handler();
 800317a:	f7fe fa8d 	bl	8001698 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800317e:	4b45      	ldr	r3, [pc, #276]	; (8003294 <HAL_UART_MspInit+0x288>)
 8003180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003184:	4a43      	ldr	r2, [pc, #268]	; (8003294 <HAL_UART_MspInit+0x288>)
 8003186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800318e:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_UART_MspInit+0x288>)
 8003190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800319c:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <HAL_UART_MspInit+0x288>)
 800319e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a2:	4a3c      	ldr	r2, [pc, #240]	; (8003294 <HAL_UART_MspInit+0x288>)
 80031a4:	f043 0308 	orr.w	r3, r3, #8
 80031a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ac:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_UART_MspInit+0x288>)
 80031ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80031ba:	2360      	movs	r3, #96	; 0x60
 80031bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	2302      	movs	r3, #2
 80031c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031d2:	2307      	movs	r3, #7
 80031d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80031dc:	4619      	mov	r1, r3
 80031de:	4832      	ldr	r0, [pc, #200]	; (80032a8 <HAL_UART_MspInit+0x29c>)
 80031e0:	f002 fbec 	bl	80059bc <HAL_GPIO_Init>
}
 80031e4:	e04f      	b.n	8003286 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART3)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a30      	ldr	r2, [pc, #192]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d14a      	bne.n	8003286 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031f0:	2302      	movs	r3, #2
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 fd3c 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_UART_MspInit+0x202>
      Error_Handler();
 800320a:	f7fe fa45 	bl	8001698 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800320e:	4b21      	ldr	r3, [pc, #132]	; (8003294 <HAL_UART_MspInit+0x288>)
 8003210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003214:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <HAL_UART_MspInit+0x288>)
 8003216:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800321a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_UART_MspInit+0x288>)
 8003220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_UART_MspInit+0x288>)
 800322e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_UART_MspInit+0x288>)
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <HAL_UART_MspInit+0x288>)
 800323e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800324a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800324e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325e:	2300      	movs	r3, #0
 8003260:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003264:	2307      	movs	r3, #7
 8003266:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800326e:	4619      	mov	r1, r3
 8003270:	480b      	ldr	r0, [pc, #44]	; (80032a0 <HAL_UART_MspInit+0x294>)
 8003272:	f002 fba3 	bl	80059bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003276:	2200      	movs	r2, #0
 8003278:	2100      	movs	r1, #0
 800327a:	2027      	movs	r0, #39	; 0x27
 800327c:	f001 fd1d 	bl	8004cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003280:	2027      	movs	r0, #39	; 0x27
 8003282:	f001 fd34 	bl	8004cee <HAL_NVIC_EnableIRQ>
}
 8003286:	bf00      	nop
 8003288:	37f0      	adds	r7, #240	; 0xf0
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40004c00 	.word	0x40004c00
 8003294:	58024400 	.word	0x58024400
 8003298:	58020000 	.word	0x58020000
 800329c:	40005000 	.word	0x40005000
 80032a0:	58020400 	.word	0x58020400
 80032a4:	40004400 	.word	0x40004400
 80032a8:	58020c00 	.word	0x58020c00
 80032ac:	40004800 	.word	0x40004800

080032b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80032b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032b4:	f7fe fd1c 	bl	8001cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032b8:	480c      	ldr	r0, [pc, #48]	; (80032ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032ba:	490d      	ldr	r1, [pc, #52]	; (80032f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032bc:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032c0:	e002      	b.n	80032c8 <LoopCopyDataInit>

080032c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032c6:	3304      	adds	r3, #4

080032c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032cc:	d3f9      	bcc.n	80032c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032d0:	4c0a      	ldr	r4, [pc, #40]	; (80032fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032d4:	e001      	b.n	80032da <LoopFillZerobss>

080032d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032d8:	3204      	adds	r2, #4

080032da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032dc:	d3fb      	bcc.n	80032d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032de:	f008 ffab 	bl	800c238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032e2:	f7fd fe21 	bl	8000f28 <main>
  bx  lr
 80032e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032e8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80032ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80032f0:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80032f4:	0800fcf0 	.word	0x0800fcf0
  ldr r2, =_sbss
 80032f8:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80032fc:	24000e40 	.word	0x24000e40

08003300 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003300:	e7fe      	b.n	8003300 <ADC3_IRQHandler>
	...

08003304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800330a:	2003      	movs	r0, #3
 800330c:	f001 fcca 	bl	8004ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003310:	f003 fac2 	bl	8006898 <HAL_RCC_GetSysClockFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <HAL_Init+0x68>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	4913      	ldr	r1, [pc, #76]	; (8003370 <HAL_Init+0x6c>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
 800332c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800332e:	4b0f      	ldr	r3, [pc, #60]	; (800336c <HAL_Init+0x68>)
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <HAL_Init+0x6c>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <HAL_Init+0x70>)
 8003346:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003348:	4a0b      	ldr	r2, [pc, #44]	; (8003378 <HAL_Init+0x74>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800334e:	2000      	movs	r0, #0
 8003350:	f000 f814 	bl	800337c <HAL_InitTick>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e002      	b.n	8003364 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800335e:	f7fe fba1 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	58024400 	.word	0x58024400
 8003370:	0800f6e8 	.word	0x0800f6e8
 8003374:	24000004 	.word	0x24000004
 8003378:	24000000 	.word	0x24000000

0800337c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003384:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_InitTick+0x60>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e021      	b.n	80033d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_InitTick+0x64>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b11      	ldr	r3, [pc, #68]	; (80033dc <HAL_InitTick+0x60>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800339e:	fbb3 f3f1 	udiv	r3, r3, r1
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 fcaf 	bl	8004d0a <HAL_SYSTICK_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e00e      	b.n	80033d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b0f      	cmp	r3, #15
 80033ba:	d80a      	bhi.n	80033d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033bc:	2200      	movs	r2, #0
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295
 80033c4:	f001 fc79 	bl	8004cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033c8:	4a06      	ldr	r2, [pc, #24]	; (80033e4 <HAL_InitTick+0x68>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	2400000c 	.word	0x2400000c
 80033e0:	24000000 	.word	0x24000000
 80033e4:	24000008 	.word	0x24000008

080033e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_IncTick+0x20>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_IncTick+0x24>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_IncTick+0x24>)
 80033fa:	6013      	str	r3, [r2, #0]
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	2400000c 	.word	0x2400000c
 800340c:	24000e2c 	.word	0x24000e2c

08003410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return uwTick;
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HAL_GetTick+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	24000e2c 	.word	0x24000e2c

08003428 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	609a      	str	r2, [r3, #8]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	609a      	str	r2, [r3, #8]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3360      	adds	r3, #96	; 0x60
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <LL_ADC_SetOffset+0x60>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d10b      	bne.n	80034cc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80034ca:	e00b      	b.n	80034e4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	430b      	orrs	r3, r1
 80034de:	431a      	orrs	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	601a      	str	r2, [r3, #0]
}
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	58026000 	.word	0x58026000

080034f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3360      	adds	r3, #96	; 0x60
 8003502:	461a      	mov	r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	431a      	orrs	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	611a      	str	r2, [r3, #16]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3360      	adds	r3, #96	; 0x60
 800356c:	461a      	mov	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	431a      	orrs	r2, r3
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	601a      	str	r2, [r3, #0]
  }
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	58026000 	.word	0x58026000

08003598 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <LL_ADC_SetOffsetSaturation+0x40>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d10e      	bne.n	80035ca <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3360      	adds	r3, #96	; 0x60
 80035b0:	461a      	mov	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	58026000 	.word	0x58026000

080035dc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a0c      	ldr	r2, [pc, #48]	; (800361c <LL_ADC_SetOffsetSign+0x40>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10e      	bne.n	800360e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3360      	adds	r3, #96	; 0x60
 80035f4:	461a      	mov	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	431a      	orrs	r2, r3
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	58026000 	.word	0x58026000

08003620 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3360      	adds	r3, #96	; 0x60
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4a0c      	ldr	r2, [pc, #48]	; (8003670 <LL_ADC_SetOffsetState+0x50>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d108      	bne.n	8003654 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	431a      	orrs	r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003652:	e007      	b.n	8003664 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	431a      	orrs	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	601a      	str	r2, [r3, #0]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	58026000 	.word	0x58026000

08003674 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3330      	adds	r3, #48	; 0x30
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	4413      	add	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	211f      	movs	r1, #31
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	401a      	ands	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	0e9b      	lsrs	r3, r3, #26
 80036ac:	f003 011f 	and.w	r1, r3, #31
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	431a      	orrs	r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3314      	adds	r3, #20
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	0e5b      	lsrs	r3, r3, #25
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	4413      	add	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	0d1b      	lsrs	r3, r3, #20
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2107      	movs	r1, #7
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	401a      	ands	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	0d1b      	lsrs	r3, r3, #20
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	431a      	orrs	r2, r3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4a1a      	ldr	r2, [pc, #104]	; (800379c <LL_ADC_SetChannelSingleDiff+0x78>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d115      	bne.n	8003764 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003744:	43db      	mvns	r3, r3
 8003746:	401a      	ands	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f003 0318 	and.w	r3, r3, #24
 800374e:	4914      	ldr	r1, [pc, #80]	; (80037a0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003750:	40d9      	lsrs	r1, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	400b      	ands	r3, r1
 8003756:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800375a:	431a      	orrs	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003762:	e014      	b.n	800378e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0318 	and.w	r3, r3, #24
 800377a:	4909      	ldr	r1, [pc, #36]	; (80037a0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800377c:	40d9      	lsrs	r1, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	400b      	ands	r3, r1
 8003782:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003786:	431a      	orrs	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	58026000 	.word	0x58026000
 80037a0:	000fffff 	.word	0x000fffff

080037a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6093      	str	r3, [r2, #8]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	5fffffc0 	.word	0x5fffffc0

080037c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037dc:	d101      	bne.n	80037e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <LL_ADC_EnableInternalRegulator+0x24>)
 80037fe:	4013      	ands	r3, r2
 8003800:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	6fffffc0 	.word	0x6fffffc0

08003818 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800382c:	d101      	bne.n	8003832 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <LL_ADC_IsEnabled+0x18>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <LL_ADC_IsEnabled+0x1a>
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d101      	bne.n	800387e <LL_ADC_REG_IsConversionOngoing+0x18>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b08      	cmp	r3, #8
 800389e:	d101      	bne.n	80038a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e1ee      	b.n	8003cac <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7fd f99d 	bl	8000c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff67 	bl	80037c8 <LL_ADC_IsDeepPowerDownEnabled>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff4d 	bl	80037a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff82 	bl	8003818 <LL_ADC_IsInternalRegulatorEnabled>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d114      	bne.n	8003944 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ff66 	bl	80037f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003924:	4b8e      	ldr	r3, [pc, #568]	; (8003b60 <HAL_ADC_Init+0x2ac>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	099b      	lsrs	r3, r3, #6
 800392a:	4a8e      	ldr	r2, [pc, #568]	; (8003b64 <HAL_ADC_Init+0x2b0>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	3301      	adds	r3, #1
 8003934:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003936:	e002      	b.n	800393e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	3b01      	subs	r3, #1
 800393c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f9      	bne.n	8003938 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff65 	bl	8003818 <LL_ADC_IsInternalRegulatorEnabled>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10d      	bne.n	8003970 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003958:	f043 0210 	orr.w	r2, r3, #16
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003964:	f043 0201 	orr.w	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff76 	bl	8003866 <LL_ADC_REG_IsConversionOngoing>
 800397a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 8188 	bne.w	8003c9a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f040 8184 	bne.w	8003c9a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003996:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800399a:	f043 0202 	orr.w	r2, r3, #2
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff ff4a 	bl	8003840 <LL_ADC_IsEnabled>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d136      	bne.n	8003a20 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6c      	ldr	r2, [pc, #432]	; (8003b68 <HAL_ADC_Init+0x2b4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_ADC_Init+0x112>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a6a      	ldr	r2, [pc, #424]	; (8003b6c <HAL_ADC_Init+0x2b8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10e      	bne.n	80039e4 <HAL_ADC_Init+0x130>
 80039c6:	4868      	ldr	r0, [pc, #416]	; (8003b68 <HAL_ADC_Init+0x2b4>)
 80039c8:	f7ff ff3a 	bl	8003840 <LL_ADC_IsEnabled>
 80039cc:	4604      	mov	r4, r0
 80039ce:	4867      	ldr	r0, [pc, #412]	; (8003b6c <HAL_ADC_Init+0x2b8>)
 80039d0:	f7ff ff36 	bl	8003840 <LL_ADC_IsEnabled>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4323      	orrs	r3, r4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e008      	b.n	80039f6 <HAL_ADC_Init+0x142>
 80039e4:	4862      	ldr	r0, [pc, #392]	; (8003b70 <HAL_ADC_Init+0x2bc>)
 80039e6:	f7ff ff2b 	bl	8003840 <LL_ADC_IsEnabled>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d012      	beq.n	8003a20 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a5a      	ldr	r2, [pc, #360]	; (8003b68 <HAL_ADC_Init+0x2b4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_ADC_Init+0x15a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a58      	ldr	r2, [pc, #352]	; (8003b6c <HAL_ADC_Init+0x2b8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_Init+0x15e>
 8003a0e:	4a59      	ldr	r2, [pc, #356]	; (8003b74 <HAL_ADC_Init+0x2c0>)
 8003a10:	e000      	b.n	8003a14 <HAL_ADC_Init+0x160>
 8003a12:	4a59      	ldr	r2, [pc, #356]	; (8003b78 <HAL_ADC_Init+0x2c4>)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f7ff fd04 	bl	8003428 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a52      	ldr	r2, [pc, #328]	; (8003b70 <HAL_ADC_Init+0x2bc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d129      	bne.n	8003a7e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	7e5b      	ldrb	r3, [r3, #25]
 8003a2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003a34:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003a3a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d013      	beq.n	8003a6c <HAL_ADC_Init+0x1b8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b0c      	cmp	r3, #12
 8003a4a:	d00d      	beq.n	8003a68 <HAL_ADC_Init+0x1b4>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b1c      	cmp	r3, #28
 8003a52:	d007      	beq.n	8003a64 <HAL_ADC_Init+0x1b0>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b18      	cmp	r3, #24
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_Init+0x1ac>
 8003a5c:	2318      	movs	r3, #24
 8003a5e:	e006      	b.n	8003a6e <HAL_ADC_Init+0x1ba>
 8003a60:	2300      	movs	r3, #0
 8003a62:	e004      	b.n	8003a6e <HAL_ADC_Init+0x1ba>
 8003a64:	2310      	movs	r3, #16
 8003a66:	e002      	b.n	8003a6e <HAL_ADC_Init+0x1ba>
 8003a68:	2308      	movs	r3, #8
 8003a6a:	e000      	b.n	8003a6e <HAL_ADC_Init+0x1ba>
 8003a6c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003a6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a76:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	e00e      	b.n	8003a9c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	7e5b      	ldrb	r3, [r3, #25]
 8003a82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a88:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003a8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d106      	bne.n	8003ab4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	045b      	lsls	r3, r3, #17
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a26      	ldr	r2, [pc, #152]	; (8003b70 <HAL_ADC_Init+0x2bc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d115      	bne.n	8003b06 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <HAL_ADC_Init+0x2c8>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	69b9      	ldr	r1, [r7, #24]
 8003aea:	430b      	orrs	r3, r1
 8003aec:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	611a      	str	r2, [r3, #16]
 8003b04:	e009      	b.n	8003b1a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <HAL_ADC_Init+0x2cc>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	69b9      	ldr	r1, [r7, #24]
 8003b16:	430b      	orrs	r3, r1
 8003b18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fea1 	bl	8003866 <LL_ADC_REG_IsConversionOngoing>
 8003b24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff feae 	bl	800388c <LL_ADC_INJ_IsConversionOngoing>
 8003b30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 808e 	bne.w	8003c56 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f040 808a 	bne.w	8003c56 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <HAL_ADC_Init+0x2bc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d11b      	bne.n	8003b84 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7e1b      	ldrb	r3, [r3, #24]
 8003b50:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b58:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e018      	b.n	8003b92 <HAL_ADC_Init+0x2de>
 8003b60:	24000000 	.word	0x24000000
 8003b64:	053e2d63 	.word	0x053e2d63
 8003b68:	40022000 	.word	0x40022000
 8003b6c:	40022100 	.word	0x40022100
 8003b70:	58026000 	.word	0x58026000
 8003b74:	40022300 	.word	0x40022300
 8003b78:	58026300 	.word	0x58026300
 8003b7c:	fff04007 	.word	0xfff04007
 8003b80:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7e1b      	ldrb	r3, [r3, #24]
 8003b88:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	4b46      	ldr	r3, [pc, #280]	; (8003cb4 <HAL_ADC_Init+0x400>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d137      	bne.n	8003c20 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a3f      	ldr	r2, [pc, #252]	; (8003cb8 <HAL_ADC_Init+0x404>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d116      	bne.n	8003bee <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <HAL_ADC_Init+0x408>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003bde:	430a      	orrs	r2, r1
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	611a      	str	r2, [r3, #16]
 8003bec:	e020      	b.n	8003c30 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <HAL_ADC_Init+0x40c>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	0411      	lsls	r1, r2, #16
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c04:	4311      	orrs	r1, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c10:	430a      	orrs	r2, r1
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	611a      	str	r2, [r3, #16]
 8003c1e:	e007      	b.n	8003c30 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_ADC_Init+0x404>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d002      	beq.n	8003c56 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fd63 	bl	800471c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d10c      	bne.n	8003c78 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	f023 010f 	bic.w	r1, r3, #15
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	1e5a      	subs	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
 8003c76:	e007      	b.n	8003c88 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 020f 	bic.w	r2, r2, #15
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8c:	f023 0303 	bic.w	r3, r3, #3
 8003c90:	f043 0201 	orr.w	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	661a      	str	r2, [r3, #96]	; 0x60
 8003c98:	e007      	b.n	8003caa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9e:	f043 0210 	orr.w	r2, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003caa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3724      	adds	r7, #36	; 0x24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd90      	pop	{r4, r7, pc}
 8003cb4:	ffffbffc 	.word	0xffffbffc
 8003cb8:	58026000 	.word	0x58026000
 8003cbc:	fc00f81f 	.word	0xfc00f81f
 8003cc0:	fc00f81e 	.word	0xfc00f81e

08003cc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b0b9      	sub	sp, #228	; 0xe4
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cde:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4ab3      	ldr	r2, [pc, #716]	; (8003fb4 <HAL_ADC_ConfigChannel+0x2f0>)
 8003ce6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d102      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x34>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	f000 bcfa 	b.w	80046ec <HAL_ADC_ConfigChannel+0xa28>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fdae 	bl	8003866 <LL_ADC_REG_IsConversionOngoing>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 84de 	bne.w	80046ce <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4aa8      	ldr	r2, [pc, #672]	; (8003fb8 <HAL_ADC_ConfigChannel+0x2f4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d033      	beq.n	8003d84 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d108      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x76>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	0e9b      	lsrs	r3, r3, #26
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2201      	movs	r2, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	e01d      	b.n	8003d76 <HAL_ADC_ConfigChannel+0xb2>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d46:	fa93 f3a3 	rbit	r3, r3
 8003d4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003d5e:	2320      	movs	r3, #32
 8003d60:	e004      	b.n	8003d6c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003d62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2201      	movs	r2, #1
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	69d1      	ldr	r1, [r2, #28]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	430b      	orrs	r3, r1
 8003d82:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	f7ff fc6f 	bl	8003674 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fd63 	bl	8003866 <LL_ADC_REG_IsConversionOngoing>
 8003da0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fd6f 	bl	800388c <LL_ADC_INJ_IsConversionOngoing>
 8003dae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f040 8270 	bne.w	800429c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f040 826b 	bne.w	800429c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f7ff fc7a 	bl	80036cc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a76      	ldr	r2, [pc, #472]	; (8003fb8 <HAL_ADC_ConfigChannel+0x2f4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d10d      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	08db      	lsrs	r3, r3, #3
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dfc:	e032      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dfe:	4b6f      	ldr	r3, [pc, #444]	; (8003fbc <HAL_ADC_ConfigChannel+0x2f8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e0a:	d10b      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x160>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	089b      	lsrs	r3, r3, #2
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	e01d      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x19c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10b      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x186>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	e00a      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x19c>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d048      	beq.n	8003efe <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6919      	ldr	r1, [r3, #16]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e7c:	f7ff fb08 	bl	8003490 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a4c      	ldr	r2, [pc, #304]	; (8003fb8 <HAL_ADC_ConfigChannel+0x2f4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d119      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6919      	ldr	r1, [r3, #16]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	461a      	mov	r2, r3
 8003e98:	f7ff fba0 	bl	80035dc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	6919      	ldr	r1, [r3, #16]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d102      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x1f0>
 8003eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb2:	e000      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x1f2>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f7ff fb6e 	bl	8003598 <LL_ADC_SetOffsetSaturation>
 8003ebc:	e1ee      	b.n	800429c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6919      	ldr	r1, [r3, #16]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d102      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x212>
 8003ed0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ed4:	e000      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x214>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f7ff fb3b 	bl	8003554 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6919      	ldr	r1, [r3, #16]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	7e1b      	ldrb	r3, [r3, #24]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d102      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x230>
 8003eee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ef2:	e000      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x232>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f7ff fb12 	bl	8003520 <LL_ADC_SetDataRightShift>
 8003efc:	e1ce      	b.n	800429c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <HAL_ADC_ConfigChannel+0x2f4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	f040 8181 	bne.w	800420c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff faef 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x272>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fae4 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	0e9b      	lsrs	r3, r3, #26
 8003f30:	f003 021f 	and.w	r2, r3, #31
 8003f34:	e01e      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x2b0>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fad9 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f4c:	fa93 f3a3 	rbit	r3, r3
 8003f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003f54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003f5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e004      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003f68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x2c8>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	0e9b      	lsrs	r3, r3, #26
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	e01e      	b.n	8003fca <HAL_ADC_ConfigChannel+0x306>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003fa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003fa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d107      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	e00a      	b.n	8003fca <HAL_ADC_ConfigChannel+0x306>
 8003fb4:	47ff0000 	.word	0x47ff0000
 8003fb8:	58026000 	.word	0x58026000
 8003fbc:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003fc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fc4:	fab3 f383 	clz	r3, r3
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d106      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fb22 	bl	8003620 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fa86 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x344>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fa7b 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 8003ffe:	4603      	mov	r3, r0
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	f003 021f 	and.w	r2, r3, #31
 8004006:	e01e      	b.n	8004046 <HAL_ADC_ConfigChannel+0x382>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fa70 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 8004014:	4603      	mov	r3, r0
 8004016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004026:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800402a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800402e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004036:	2320      	movs	r3, #32
 8004038:	e004      	b.n	8004044 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800403a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800404e:	2b00      	cmp	r3, #0
 8004050:	d105      	bne.n	800405e <HAL_ADC_ConfigChannel+0x39a>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	0e9b      	lsrs	r3, r3, #26
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	e018      	b.n	8004090 <HAL_ADC_ConfigChannel+0x3cc>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004076:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800407a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004082:	2320      	movs	r3, #32
 8004084:	e004      	b.n	8004090 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004086:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	429a      	cmp	r2, r3
 8004092:	d106      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2200      	movs	r2, #0
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fabf 	bl	8003620 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fa23 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x40a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2102      	movs	r1, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fa18 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 80040c4:	4603      	mov	r3, r0
 80040c6:	0e9b      	lsrs	r3, r3, #26
 80040c8:	f003 021f 	and.w	r2, r3, #31
 80040cc:	e01e      	b.n	800410c <HAL_ADC_ConfigChannel+0x448>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2102      	movs	r1, #2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fa0d 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 80040da:	4603      	mov	r3, r0
 80040dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80040ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80040f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80040fc:	2320      	movs	r3, #32
 80040fe:	e004      	b.n	800410a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004104:	fab3 f383 	clz	r3, r3
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x460>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	0e9b      	lsrs	r3, r3, #26
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	e014      	b.n	800414e <HAL_ADC_ConfigChannel+0x48a>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004140:	2320      	movs	r3, #32
 8004142:	e004      	b.n	800414e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004144:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004148:	fab3 f383 	clz	r3, r3
 800414c:	b2db      	uxtb	r3, r3
 800414e:	429a      	cmp	r2, r3
 8004150:	d106      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	2102      	movs	r1, #2
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fa60 	bl	8003620 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2103      	movs	r1, #3
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff f9c4 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 800416c:	4603      	mov	r3, r0
 800416e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_ADC_ConfigChannel+0x4c8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2103      	movs	r1, #3
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff f9b9 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 8004182:	4603      	mov	r3, r0
 8004184:	0e9b      	lsrs	r3, r3, #26
 8004186:	f003 021f 	and.w	r2, r3, #31
 800418a:	e017      	b.n	80041bc <HAL_ADC_ConfigChannel+0x4f8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2103      	movs	r1, #3
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff f9ae 	bl	80034f4 <LL_ADC_GetOffsetChannel>
 8004198:	4603      	mov	r3, r0
 800419a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80041a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80041ae:	2320      	movs	r3, #32
 80041b0:	e003      	b.n	80041ba <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80041b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b4:	fab3 f383 	clz	r3, r3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x510>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	0e9b      	lsrs	r3, r3, #26
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	e011      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x534>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041dc:	fa93 f3a3 	rbit	r3, r3
 80041e0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80041e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80041e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80041ec:	2320      	movs	r3, #32
 80041ee:	e003      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80041f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041f2:	fab3 f383 	clz	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d14f      	bne.n	800429c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2200      	movs	r2, #0
 8004202:	2103      	movs	r1, #3
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fa0b 	bl	8003620 <LL_ADC_SetOffsetState>
 800420a:	e047      	b.n	800429c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	069b      	lsls	r3, r3, #26
 800421c:	429a      	cmp	r2, r3
 800421e:	d107      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800422e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004236:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	069b      	lsls	r3, r3, #26
 8004240:	429a      	cmp	r2, r3
 8004242:	d107      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004252:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800425a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	069b      	lsls	r3, r3, #26
 8004264:	429a      	cmp	r2, r3
 8004266:	d107      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004276:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800427e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	069b      	lsls	r3, r3, #26
 8004288:	429a      	cmp	r2, r3
 800428a:	d107      	bne.n	800429c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800429a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff facd 	bl	8003840 <LL_ADC_IsEnabled>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f040 8219 	bne.w	80046e0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f7ff fa32 	bl	8003724 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4aa1      	ldr	r2, [pc, #644]	; (800454c <HAL_ADC_ConfigChannel+0x888>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	f040 812e 	bne.w	8004528 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10b      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x630>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0e9b      	lsrs	r3, r3, #26
 80042e2:	3301      	adds	r3, #1
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	2b09      	cmp	r3, #9
 80042ea:	bf94      	ite	ls
 80042ec:	2301      	movls	r3, #1
 80042ee:	2300      	movhi	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e019      	b.n	8004328 <HAL_ADC_ConfigChannel+0x664>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004304:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e003      	b.n	8004318 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2b09      	cmp	r3, #9
 8004320:	bf94      	ite	ls
 8004322:	2301      	movls	r3, #1
 8004324:	2300      	movhi	r3, #0
 8004326:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004328:	2b00      	cmp	r3, #0
 800432a:	d079      	beq.n	8004420 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004334:	2b00      	cmp	r3, #0
 8004336:	d107      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x684>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0e9b      	lsrs	r3, r3, #26
 800433e:	3301      	adds	r3, #1
 8004340:	069b      	lsls	r3, r3, #26
 8004342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004346:	e015      	b.n	8004374 <HAL_ADC_ConfigChannel+0x6b0>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004350:	fa93 f3a3 	rbit	r3, r3
 8004354:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004358:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800435a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004360:	2320      	movs	r3, #32
 8004362:	e003      	b.n	800436c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	3301      	adds	r3, #1
 800436e:	069b      	lsls	r3, r3, #26
 8004370:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x6d0>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	0e9b      	lsrs	r3, r3, #26
 8004386:	3301      	adds	r3, #1
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	2101      	movs	r1, #1
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	e017      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x700>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80043a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80043a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80043ac:	2320      	movs	r3, #32
 80043ae:	e003      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80043b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	3301      	adds	r3, #1
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	2101      	movs	r1, #1
 80043c0:	fa01 f303 	lsl.w	r3, r1, r3
 80043c4:	ea42 0103 	orr.w	r1, r2, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <HAL_ADC_ConfigChannel+0x726>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	0e9b      	lsrs	r3, r3, #26
 80043da:	3301      	adds	r3, #1
 80043dc:	f003 021f 	and.w	r2, r3, #31
 80043e0:	4613      	mov	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	051b      	lsls	r3, r3, #20
 80043e8:	e018      	b.n	800441c <HAL_ADC_ConfigChannel+0x758>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004402:	2320      	movs	r3, #32
 8004404:	e003      	b.n	800440e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	fab3 f383 	clz	r3, r3
 800440c:	b2db      	uxtb	r3, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f003 021f 	and.w	r2, r3, #31
 8004414:	4613      	mov	r3, r2
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	4413      	add	r3, r2
 800441a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800441c:	430b      	orrs	r3, r1
 800441e:	e07e      	b.n	800451e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004428:	2b00      	cmp	r3, #0
 800442a:	d107      	bne.n	800443c <HAL_ADC_ConfigChannel+0x778>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0e9b      	lsrs	r3, r3, #26
 8004432:	3301      	adds	r3, #1
 8004434:	069b      	lsls	r3, r3, #26
 8004436:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800443a:	e015      	b.n	8004468 <HAL_ADC_ConfigChannel+0x7a4>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e003      	b.n	8004460 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	3301      	adds	r3, #1
 8004462:	069b      	lsls	r3, r3, #26
 8004464:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x7c4>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	0e9b      	lsrs	r3, r3, #26
 800447a:	3301      	adds	r3, #1
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	2101      	movs	r1, #1
 8004482:	fa01 f303 	lsl.w	r3, r1, r3
 8004486:	e017      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x7f4>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	fa93 f3a3 	rbit	r3, r3
 8004494:	61bb      	str	r3, [r7, #24]
  return result;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80044a0:	2320      	movs	r3, #32
 80044a2:	e003      	b.n	80044ac <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	fab3 f383 	clz	r3, r3
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	3301      	adds	r3, #1
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2101      	movs	r1, #1
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	ea42 0103 	orr.w	r1, r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10d      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x820>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	0e9b      	lsrs	r3, r3, #26
 80044ce:	3301      	adds	r3, #1
 80044d0:	f003 021f 	and.w	r2, r3, #31
 80044d4:	4613      	mov	r3, r2
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4413      	add	r3, r2
 80044da:	3b1e      	subs	r3, #30
 80044dc:	051b      	lsls	r3, r3, #20
 80044de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044e2:	e01b      	b.n	800451c <HAL_ADC_ConfigChannel+0x858>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	fa93 f3a3 	rbit	r3, r3
 80044f0:	60fb      	str	r3, [r7, #12]
  return result;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80044fc:	2320      	movs	r3, #32
 80044fe:	e003      	b.n	8004508 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	fab3 f383 	clz	r3, r3
 8004506:	b2db      	uxtb	r3, r3
 8004508:	3301      	adds	r3, #1
 800450a:	f003 021f 	and.w	r2, r3, #31
 800450e:	4613      	mov	r3, r2
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	4413      	add	r3, r2
 8004514:	3b1e      	subs	r3, #30
 8004516:	051b      	lsls	r3, r3, #20
 8004518:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800451c:	430b      	orrs	r3, r1
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	6892      	ldr	r2, [r2, #8]
 8004522:	4619      	mov	r1, r3
 8004524:	f7ff f8d2 	bl	80036cc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f280 80d7 	bge.w	80046e0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a06      	ldr	r2, [pc, #24]	; (8004550 <HAL_ADC_ConfigChannel+0x88c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_ADC_ConfigChannel+0x882>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a04      	ldr	r2, [pc, #16]	; (8004554 <HAL_ADC_ConfigChannel+0x890>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10a      	bne.n	800455c <HAL_ADC_ConfigChannel+0x898>
 8004546:	4b04      	ldr	r3, [pc, #16]	; (8004558 <HAL_ADC_ConfigChannel+0x894>)
 8004548:	e009      	b.n	800455e <HAL_ADC_ConfigChannel+0x89a>
 800454a:	bf00      	nop
 800454c:	47ff0000 	.word	0x47ff0000
 8004550:	40022000 	.word	0x40022000
 8004554:	40022100 	.word	0x40022100
 8004558:	40022300 	.word	0x40022300
 800455c:	4b65      	ldr	r3, [pc, #404]	; (80046f4 <HAL_ADC_ConfigChannel+0xa30>)
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe ff88 	bl	8003474 <LL_ADC_GetCommonPathInternalCh>
 8004564:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a62      	ldr	r2, [pc, #392]	; (80046f8 <HAL_ADC_ConfigChannel+0xa34>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d004      	beq.n	800457c <HAL_ADC_ConfigChannel+0x8b8>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a61      	ldr	r2, [pc, #388]	; (80046fc <HAL_ADC_ConfigChannel+0xa38>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d10e      	bne.n	800459a <HAL_ADC_ConfigChannel+0x8d6>
 800457c:	485e      	ldr	r0, [pc, #376]	; (80046f8 <HAL_ADC_ConfigChannel+0xa34>)
 800457e:	f7ff f95f 	bl	8003840 <LL_ADC_IsEnabled>
 8004582:	4604      	mov	r4, r0
 8004584:	485d      	ldr	r0, [pc, #372]	; (80046fc <HAL_ADC_ConfigChannel+0xa38>)
 8004586:	f7ff f95b 	bl	8003840 <LL_ADC_IsEnabled>
 800458a:	4603      	mov	r3, r0
 800458c:	4323      	orrs	r3, r4
 800458e:	2b00      	cmp	r3, #0
 8004590:	bf0c      	ite	eq
 8004592:	2301      	moveq	r3, #1
 8004594:	2300      	movne	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	e008      	b.n	80045ac <HAL_ADC_ConfigChannel+0x8e8>
 800459a:	4859      	ldr	r0, [pc, #356]	; (8004700 <HAL_ADC_ConfigChannel+0xa3c>)
 800459c:	f7ff f950 	bl	8003840 <LL_ADC_IsEnabled>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8084 	beq.w	80046ba <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a53      	ldr	r2, [pc, #332]	; (8004704 <HAL_ADC_ConfigChannel+0xa40>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d132      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x95e>
 80045bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d12c      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a4c      	ldr	r2, [pc, #304]	; (8004700 <HAL_ADC_ConfigChannel+0xa3c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	f040 8086 	bne.w	80046e0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a47      	ldr	r2, [pc, #284]	; (80046f8 <HAL_ADC_ConfigChannel+0xa34>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d004      	beq.n	80045e8 <HAL_ADC_ConfigChannel+0x924>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a46      	ldr	r2, [pc, #280]	; (80046fc <HAL_ADC_ConfigChannel+0xa38>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x928>
 80045e8:	4a47      	ldr	r2, [pc, #284]	; (8004708 <HAL_ADC_ConfigChannel+0xa44>)
 80045ea:	e000      	b.n	80045ee <HAL_ADC_ConfigChannel+0x92a>
 80045ec:	4a41      	ldr	r2, [pc, #260]	; (80046f4 <HAL_ADC_ConfigChannel+0xa30>)
 80045ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f7fe ff28 	bl	800344e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045fe:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_ADC_ConfigChannel+0xa48>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	099b      	lsrs	r3, r3, #6
 8004604:	4a42      	ldr	r2, [pc, #264]	; (8004710 <HAL_ADC_ConfigChannel+0xa4c>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	099b      	lsrs	r3, r3, #6
 800460c:	3301      	adds	r3, #1
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004612:	e002      	b.n	800461a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	3b01      	subs	r3, #1
 8004618:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f9      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004620:	e05e      	b.n	80046e0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a3b      	ldr	r2, [pc, #236]	; (8004714 <HAL_ADC_ConfigChannel+0xa50>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d120      	bne.n	800466e <HAL_ADC_ConfigChannel+0x9aa>
 800462c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11a      	bne.n	800466e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a30      	ldr	r2, [pc, #192]	; (8004700 <HAL_ADC_ConfigChannel+0xa3c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d14e      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2c      	ldr	r2, [pc, #176]	; (80046f8 <HAL_ADC_ConfigChannel+0xa34>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_ADC_ConfigChannel+0x992>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2a      	ldr	r2, [pc, #168]	; (80046fc <HAL_ADC_ConfigChannel+0xa38>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_ADC_ConfigChannel+0x996>
 8004656:	4a2c      	ldr	r2, [pc, #176]	; (8004708 <HAL_ADC_ConfigChannel+0xa44>)
 8004658:	e000      	b.n	800465c <HAL_ADC_ConfigChannel+0x998>
 800465a:	4a26      	ldr	r2, [pc, #152]	; (80046f4 <HAL_ADC_ConfigChannel+0xa30>)
 800465c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004660:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004664:	4619      	mov	r1, r3
 8004666:	4610      	mov	r0, r2
 8004668:	f7fe fef1 	bl	800344e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800466c:	e038      	b.n	80046e0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a29      	ldr	r2, [pc, #164]	; (8004718 <HAL_ADC_ConfigChannel+0xa54>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d133      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0xa1c>
 8004678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800467c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d12d      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1d      	ldr	r2, [pc, #116]	; (8004700 <HAL_ADC_ConfigChannel+0xa3c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d128      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <HAL_ADC_ConfigChannel+0xa34>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_ADC_ConfigChannel+0x9de>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a17      	ldr	r2, [pc, #92]	; (80046fc <HAL_ADC_ConfigChannel+0xa38>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d101      	bne.n	80046a6 <HAL_ADC_ConfigChannel+0x9e2>
 80046a2:	4a19      	ldr	r2, [pc, #100]	; (8004708 <HAL_ADC_ConfigChannel+0xa44>)
 80046a4:	e000      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x9e4>
 80046a6:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <HAL_ADC_ConfigChannel+0xa30>)
 80046a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f7fe fecb 	bl	800344e <LL_ADC_SetCommonPathInternalCh>
 80046b8:	e012      	b.n	80046e0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046be:	f043 0220 	orr.w	r2, r3, #32
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80046cc:	e008      	b.n	80046e0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80046e8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	37e4      	adds	r7, #228	; 0xe4
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd90      	pop	{r4, r7, pc}
 80046f4:	58026300 	.word	0x58026300
 80046f8:	40022000 	.word	0x40022000
 80046fc:	40022100 	.word	0x40022100
 8004700:	58026000 	.word	0x58026000
 8004704:	c7520000 	.word	0xc7520000
 8004708:	40022300 	.word	0x40022300
 800470c:	24000000 	.word	0x24000000
 8004710:	053e2d63 	.word	0x053e2d63
 8004714:	c3210000 	.word	0xc3210000
 8004718:	cb840000 	.word	0xcb840000

0800471c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a6b      	ldr	r2, [pc, #428]	; (80048d8 <ADC_ConfigureBoostMode+0x1bc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d004      	beq.n	8004738 <ADC_ConfigureBoostMode+0x1c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a6a      	ldr	r2, [pc, #424]	; (80048dc <ADC_ConfigureBoostMode+0x1c0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d109      	bne.n	800474c <ADC_ConfigureBoostMode+0x30>
 8004738:	4b69      	ldr	r3, [pc, #420]	; (80048e0 <ADC_ConfigureBoostMode+0x1c4>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e008      	b.n	800475e <ADC_ConfigureBoostMode+0x42>
 800474c:	4b65      	ldr	r3, [pc, #404]	; (80048e4 <ADC_ConfigureBoostMode+0x1c8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01c      	beq.n	800479c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004762:	f002 fa13 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8004766:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004770:	d010      	beq.n	8004794 <ADC_ConfigureBoostMode+0x78>
 8004772:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004776:	d871      	bhi.n	800485c <ADC_ConfigureBoostMode+0x140>
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d002      	beq.n	8004784 <ADC_ConfigureBoostMode+0x68>
 800477e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004782:	d16b      	bne.n	800485c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004790:	60fb      	str	r3, [r7, #12]
        break;
 8004792:	e066      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	60fb      	str	r3, [r7, #12]
        break;
 800479a:	e062      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800479c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80047a0:	f003 f966 	bl	8007a70 <HAL_RCCEx_GetPeriphCLKFreq>
 80047a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80047ae:	d051      	beq.n	8004854 <ADC_ConfigureBoostMode+0x138>
 80047b0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80047b4:	d854      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047b6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80047ba:	d047      	beq.n	800484c <ADC_ConfigureBoostMode+0x130>
 80047bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80047c0:	d84e      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047c2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80047c6:	d03d      	beq.n	8004844 <ADC_ConfigureBoostMode+0x128>
 80047c8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80047cc:	d848      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047d2:	d033      	beq.n	800483c <ADC_ConfigureBoostMode+0x120>
 80047d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047d8:	d842      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047da:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80047de:	d029      	beq.n	8004834 <ADC_ConfigureBoostMode+0x118>
 80047e0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80047e4:	d83c      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047e6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80047ea:	d01a      	beq.n	8004822 <ADC_ConfigureBoostMode+0x106>
 80047ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80047f0:	d836      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047f2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80047f6:	d014      	beq.n	8004822 <ADC_ConfigureBoostMode+0x106>
 80047f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80047fc:	d830      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 80047fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004802:	d00e      	beq.n	8004822 <ADC_ConfigureBoostMode+0x106>
 8004804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004808:	d82a      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 800480a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800480e:	d008      	beq.n	8004822 <ADC_ConfigureBoostMode+0x106>
 8004810:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004814:	d824      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x144>
 8004816:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800481a:	d002      	beq.n	8004822 <ADC_ConfigureBoostMode+0x106>
 800481c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004820:	d11e      	bne.n	8004860 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	0c9b      	lsrs	r3, r3, #18
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	60fb      	str	r3, [r7, #12]
        break;
 8004832:	e016      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	60fb      	str	r3, [r7, #12]
        break;
 800483a:	e012      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	60fb      	str	r3, [r7, #12]
        break;
 8004842:	e00e      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	099b      	lsrs	r3, r3, #6
 8004848:	60fb      	str	r3, [r7, #12]
        break;
 800484a:	e00a      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	09db      	lsrs	r3, r3, #7
 8004850:	60fb      	str	r3, [r7, #12]
        break;
 8004852:	e006      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	60fb      	str	r3, [r7, #12]
        break;
 800485a:	e002      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
        break;
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004860:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <ADC_ConfigureBoostMode+0x1cc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d808      	bhi.n	8004882 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800487e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004880:	e025      	b.n	80048ce <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a19      	ldr	r2, [pc, #100]	; (80048ec <ADC_ConfigureBoostMode+0x1d0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d80a      	bhi.n	80048a0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800489c:	609a      	str	r2, [r3, #8]
}
 800489e:	e016      	b.n	80048ce <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <ADC_ConfigureBoostMode+0x1d4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d80a      	bhi.n	80048be <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	e007      	b.n	80048ce <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80048cc:	609a      	str	r2, [r3, #8]
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40022000 	.word	0x40022000
 80048dc:	40022100 	.word	0x40022100
 80048e0:	40022300 	.word	0x40022300
 80048e4:	58026300 	.word	0x58026300
 80048e8:	005f5e10 	.word	0x005f5e10
 80048ec:	00bebc20 	.word	0x00bebc20
 80048f0:	017d7840 	.word	0x017d7840

080048f4 <LL_ADC_IsEnabled>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <LL_ADC_IsEnabled+0x18>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <LL_ADC_IsEnabled+0x1a>
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <LL_ADC_REG_IsConversionOngoing>:
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b04      	cmp	r3, #4
 800492c:	d101      	bne.n	8004932 <LL_ADC_REG_IsConversionOngoing+0x18>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b0a3      	sub	sp, #140	; 0x8c
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800495a:	2302      	movs	r3, #2
 800495c:	e0c1      	b.n	8004ae2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800496a:	2300      	movs	r3, #0
 800496c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a5e      	ldr	r2, [pc, #376]	; (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d102      	bne.n	800497e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004978:	4b5d      	ldr	r3, [pc, #372]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e001      	b.n	8004982 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498c:	f043 0220 	orr.w	r2, r3, #32
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0a0      	b.n	8004ae2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff ffb9 	bl	800491a <LL_ADC_REG_IsConversionOngoing>
 80049a8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff ffb2 	bl	800491a <LL_ADC_REG_IsConversionOngoing>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 8081 	bne.w	8004ac0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80049be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d17c      	bne.n	8004ac0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a48      	ldr	r2, [pc, #288]	; (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a46      	ldr	r2, [pc, #280]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d101      	bne.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80049da:	4b46      	ldr	r3, [pc, #280]	; (8004af4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80049dc:	e000      	b.n	80049e0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80049de:	4b46      	ldr	r3, [pc, #280]	; (8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80049e0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d039      	beq.n	8004a5e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80049ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3a      	ldr	r2, [pc, #232]	; (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a39      	ldr	r2, [pc, #228]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d10e      	bne.n	8004a2e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004a10:	4836      	ldr	r0, [pc, #216]	; (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a12:	f7ff ff6f 	bl	80048f4 <LL_ADC_IsEnabled>
 8004a16:	4604      	mov	r4, r0
 8004a18:	4835      	ldr	r0, [pc, #212]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a1a:	f7ff ff6b 	bl	80048f4 <LL_ADC_IsEnabled>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	4323      	orrs	r3, r4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bf0c      	ite	eq
 8004a26:	2301      	moveq	r3, #1
 8004a28:	2300      	movne	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	e008      	b.n	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004a2e:	4833      	ldr	r0, [pc, #204]	; (8004afc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a30:	f7ff ff60 	bl	80048f4 <LL_ADC_IsEnabled>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf0c      	ite	eq
 8004a3a:	2301      	moveq	r3, #1
 8004a3c:	2300      	movne	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d047      	beq.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	4b2d      	ldr	r3, [pc, #180]	; (8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	6811      	ldr	r1, [r2, #0]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	6892      	ldr	r2, [r2, #8]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	431a      	orrs	r2, r3
 8004a58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a5a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a5c:	e03a      	b.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004a5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a68:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d004      	beq.n	8004a7e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d10e      	bne.n	8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004a7e:	481b      	ldr	r0, [pc, #108]	; (8004aec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a80:	f7ff ff38 	bl	80048f4 <LL_ADC_IsEnabled>
 8004a84:	4604      	mov	r4, r0
 8004a86:	481a      	ldr	r0, [pc, #104]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a88:	f7ff ff34 	bl	80048f4 <LL_ADC_IsEnabled>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4323      	orrs	r3, r4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e008      	b.n	8004aae <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004a9c:	4817      	ldr	r0, [pc, #92]	; (8004afc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a9e:	f7ff ff29 	bl	80048f4 <LL_ADC_IsEnabled>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d010      	beq.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004abc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004abe:	e009      	b.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004ad2:	e000      	b.n	8004ad6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ad4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004ade:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	378c      	adds	r7, #140	; 0x8c
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd90      	pop	{r4, r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40022000 	.word	0x40022000
 8004af0:	40022100 	.word	0x40022100
 8004af4:	40022300 	.word	0x40022300
 8004af8:	58026300 	.word	0x58026300
 8004afc:	58026000 	.word	0x58026000
 8004b00:	fffff0e0 	.word	0xfffff0e0

08004b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <__NVIC_SetPriorityGrouping+0x40>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b20:	4013      	ands	r3, r2
 8004b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <__NVIC_SetPriorityGrouping+0x44>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b32:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <__NVIC_SetPriorityGrouping+0x40>)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	60d3      	str	r3, [r2, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000ed00 	.word	0xe000ed00
 8004b48:	05fa0000 	.word	0x05fa0000

08004b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <__NVIC_GetPriorityGrouping+0x18>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	f003 0307 	and.w	r3, r3, #7
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	db0b      	blt.n	8004b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	f003 021f 	and.w	r2, r3, #31
 8004b80:	4907      	ldr	r1, [pc, #28]	; (8004ba0 <__NVIC_EnableIRQ+0x38>)
 8004b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2001      	movs	r0, #1
 8004b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	e000e100 	.word	0xe000e100

08004ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db0a      	blt.n	8004bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	490c      	ldr	r1, [pc, #48]	; (8004bf0 <__NVIC_SetPriority+0x4c>)
 8004bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc2:	0112      	lsls	r2, r2, #4
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bcc:	e00a      	b.n	8004be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4908      	ldr	r1, [pc, #32]	; (8004bf4 <__NVIC_SetPriority+0x50>)
 8004bd4:	88fb      	ldrh	r3, [r7, #6]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	3b04      	subs	r3, #4
 8004bdc:	0112      	lsls	r2, r2, #4
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	440b      	add	r3, r1
 8004be2:	761a      	strb	r2, [r3, #24]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	e000e100 	.word	0xe000e100
 8004bf4:	e000ed00 	.word	0xe000ed00

08004bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	; 0x24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f1c3 0307 	rsb	r3, r3, #7
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	bf28      	it	cs
 8004c16:	2304      	movcs	r3, #4
 8004c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d902      	bls.n	8004c28 <NVIC_EncodePriority+0x30>
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	3b03      	subs	r3, #3
 8004c26:	e000      	b.n	8004c2a <NVIC_EncodePriority+0x32>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43da      	mvns	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c40:	f04f 31ff 	mov.w	r1, #4294967295
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	43d9      	mvns	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	4313      	orrs	r3, r2
         );
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3724      	adds	r7, #36	; 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c70:	d301      	bcc.n	8004c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c72:	2301      	movs	r3, #1
 8004c74:	e00f      	b.n	8004c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c76:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <SysTick_Config+0x40>)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c7e:	210f      	movs	r1, #15
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	f7ff ff8e 	bl	8004ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <SysTick_Config+0x40>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c8e:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <SysTick_Config+0x40>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000e010 	.word	0xe000e010

08004ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff29 	bl	8004b04 <__NVIC_SetPriorityGrouping>
}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b086      	sub	sp, #24
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cc8:	f7ff ff40 	bl	8004b4c <__NVIC_GetPriorityGrouping>
 8004ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	6978      	ldr	r0, [r7, #20]
 8004cd4:	f7ff ff90 	bl	8004bf8 <NVIC_EncodePriority>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff ff5f 	bl	8004ba4 <__NVIC_SetPriority>
}
 8004ce6:	bf00      	nop
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ff33 	bl	8004b68 <__NVIC_EnableIRQ>
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff ffa4 	bl	8004c60 <SysTick_Config>
 8004d18:	4603      	mov	r3, r0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e054      	b.n	8004de0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	7f5b      	ldrb	r3, [r3, #29]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fb fff0 	bl	8000d2c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	791b      	ldrb	r3, [r3, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10c      	bne.n	8004d74 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a22      	ldr	r2, [pc, #136]	; (8004de8 <HAL_CRC_Init+0xc4>)
 8004d60:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0218 	bic.w	r2, r2, #24
 8004d70:	609a      	str	r2, [r3, #8]
 8004d72:	e00c      	b.n	8004d8e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6899      	ldr	r1, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f834 	bl	8004dec <HAL_CRCEx_Polynomial_Set>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e028      	b.n	8004de0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	795b      	ldrb	r3, [r3, #5]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d105      	bne.n	8004da2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9e:	611a      	str	r2, [r3, #16]
 8004da0:	e004      	b.n	8004dac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6912      	ldr	r2, [r2, #16]
 8004daa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699a      	ldr	r2, [r3, #24]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	04c11db7 	.word	0x04c11db7

08004dec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004dfc:	231f      	movs	r3, #31
 8004dfe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004e00:	bf00      	nop
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1e5a      	subs	r2, r3, #1
 8004e06:	613a      	str	r2, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d009      	beq.n	8004e20 <HAL_CRCEx_Polynomial_Set+0x34>
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0f0      	beq.n	8004e02 <HAL_CRCEx_Polynomial_Set+0x16>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b18      	cmp	r3, #24
 8004e24:	d846      	bhi.n	8004eb4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004ebb 	.word	0x08004ebb
 8004e30:	08004eb5 	.word	0x08004eb5
 8004e34:	08004eb5 	.word	0x08004eb5
 8004e38:	08004eb5 	.word	0x08004eb5
 8004e3c:	08004eb5 	.word	0x08004eb5
 8004e40:	08004eb5 	.word	0x08004eb5
 8004e44:	08004eb5 	.word	0x08004eb5
 8004e48:	08004eb5 	.word	0x08004eb5
 8004e4c:	08004ea9 	.word	0x08004ea9
 8004e50:	08004eb5 	.word	0x08004eb5
 8004e54:	08004eb5 	.word	0x08004eb5
 8004e58:	08004eb5 	.word	0x08004eb5
 8004e5c:	08004eb5 	.word	0x08004eb5
 8004e60:	08004eb5 	.word	0x08004eb5
 8004e64:	08004eb5 	.word	0x08004eb5
 8004e68:	08004eb5 	.word	0x08004eb5
 8004e6c:	08004e9d 	.word	0x08004e9d
 8004e70:	08004eb5 	.word	0x08004eb5
 8004e74:	08004eb5 	.word	0x08004eb5
 8004e78:	08004eb5 	.word	0x08004eb5
 8004e7c:	08004eb5 	.word	0x08004eb5
 8004e80:	08004eb5 	.word	0x08004eb5
 8004e84:	08004eb5 	.word	0x08004eb5
 8004e88:	08004eb5 	.word	0x08004eb5
 8004e8c:	08004e91 	.word	0x08004e91
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d913      	bls.n	8004ebe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e9a:	e010      	b.n	8004ebe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b07      	cmp	r3, #7
 8004ea0:	d90f      	bls.n	8004ec2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ea6:	e00c      	b.n	8004ec2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b0f      	cmp	r3, #15
 8004eac:	d90b      	bls.n	8004ec6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004eb2:	e008      	b.n	8004ec6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb8:	e006      	b.n	8004ec8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004eba:	bf00      	nop
 8004ebc:	e004      	b.n	8004ec8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004ebe:	bf00      	nop
 8004ec0:	e002      	b.n	8004ec8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004ec2:	bf00      	nop
 8004ec4:	e000      	b.n	8004ec8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004ec6:	bf00      	nop
  }
  if (status == HAL_OK)
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10d      	bne.n	8004eea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f023 0118 	bic.w	r1, r3, #24
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004f00:	f7fe fa86 	bl	8003410 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e2dc      	b.n	80054ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d008      	beq.n	8004f2e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2280      	movs	r2, #128	; 0x80
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e2cd      	b.n	80054ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a76      	ldr	r2, [pc, #472]	; (800510c <HAL_DMA_Abort+0x214>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d04a      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a74      	ldr	r2, [pc, #464]	; (8005110 <HAL_DMA_Abort+0x218>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d045      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a73      	ldr	r2, [pc, #460]	; (8005114 <HAL_DMA_Abort+0x21c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d040      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a71      	ldr	r2, [pc, #452]	; (8005118 <HAL_DMA_Abort+0x220>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d03b      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a70      	ldr	r2, [pc, #448]	; (800511c <HAL_DMA_Abort+0x224>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d036      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a6e      	ldr	r2, [pc, #440]	; (8005120 <HAL_DMA_Abort+0x228>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d031      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a6d      	ldr	r2, [pc, #436]	; (8005124 <HAL_DMA_Abort+0x22c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d02c      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a6b      	ldr	r2, [pc, #428]	; (8005128 <HAL_DMA_Abort+0x230>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d027      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a6a      	ldr	r2, [pc, #424]	; (800512c <HAL_DMA_Abort+0x234>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d022      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a68      	ldr	r2, [pc, #416]	; (8005130 <HAL_DMA_Abort+0x238>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01d      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a67      	ldr	r2, [pc, #412]	; (8005134 <HAL_DMA_Abort+0x23c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d018      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a65      	ldr	r2, [pc, #404]	; (8005138 <HAL_DMA_Abort+0x240>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d013      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a64      	ldr	r2, [pc, #400]	; (800513c <HAL_DMA_Abort+0x244>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00e      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a62      	ldr	r2, [pc, #392]	; (8005140 <HAL_DMA_Abort+0x248>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d009      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a61      	ldr	r2, [pc, #388]	; (8005144 <HAL_DMA_Abort+0x24c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d004      	beq.n	8004fce <HAL_DMA_Abort+0xd6>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a5f      	ldr	r2, [pc, #380]	; (8005148 <HAL_DMA_Abort+0x250>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_DMA_Abort+0xda>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <HAL_DMA_Abort+0xdc>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d013      	beq.n	8005000 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 021e 	bic.w	r2, r2, #30
 8004fe6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	e00a      	b.n	8005016 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 020e 	bic.w	r2, r2, #14
 800500e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a3c      	ldr	r2, [pc, #240]	; (800510c <HAL_DMA_Abort+0x214>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d072      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a3a      	ldr	r2, [pc, #232]	; (8005110 <HAL_DMA_Abort+0x218>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d06d      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a39      	ldr	r2, [pc, #228]	; (8005114 <HAL_DMA_Abort+0x21c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d068      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a37      	ldr	r2, [pc, #220]	; (8005118 <HAL_DMA_Abort+0x220>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d063      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a36      	ldr	r2, [pc, #216]	; (800511c <HAL_DMA_Abort+0x224>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d05e      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a34      	ldr	r2, [pc, #208]	; (8005120 <HAL_DMA_Abort+0x228>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d059      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a33      	ldr	r2, [pc, #204]	; (8005124 <HAL_DMA_Abort+0x22c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d054      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a31      	ldr	r2, [pc, #196]	; (8005128 <HAL_DMA_Abort+0x230>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d04f      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a30      	ldr	r2, [pc, #192]	; (800512c <HAL_DMA_Abort+0x234>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d04a      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a2e      	ldr	r2, [pc, #184]	; (8005130 <HAL_DMA_Abort+0x238>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d045      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a2d      	ldr	r2, [pc, #180]	; (8005134 <HAL_DMA_Abort+0x23c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d040      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a2b      	ldr	r2, [pc, #172]	; (8005138 <HAL_DMA_Abort+0x240>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d03b      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a2a      	ldr	r2, [pc, #168]	; (800513c <HAL_DMA_Abort+0x244>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d036      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a28      	ldr	r2, [pc, #160]	; (8005140 <HAL_DMA_Abort+0x248>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d031      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a27      	ldr	r2, [pc, #156]	; (8005144 <HAL_DMA_Abort+0x24c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d02c      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a25      	ldr	r2, [pc, #148]	; (8005148 <HAL_DMA_Abort+0x250>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d027      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a24      	ldr	r2, [pc, #144]	; (800514c <HAL_DMA_Abort+0x254>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d022      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a22      	ldr	r2, [pc, #136]	; (8005150 <HAL_DMA_Abort+0x258>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01d      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a21      	ldr	r2, [pc, #132]	; (8005154 <HAL_DMA_Abort+0x25c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d018      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1f      	ldr	r2, [pc, #124]	; (8005158 <HAL_DMA_Abort+0x260>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1e      	ldr	r2, [pc, #120]	; (800515c <HAL_DMA_Abort+0x264>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <HAL_DMA_Abort+0x268>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1b      	ldr	r2, [pc, #108]	; (8005164 <HAL_DMA_Abort+0x26c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_DMA_Abort+0x20e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a19      	ldr	r2, [pc, #100]	; (8005168 <HAL_DMA_Abort+0x270>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d132      	bne.n	800516c <HAL_DMA_Abort+0x274>
 8005106:	2301      	movs	r3, #1
 8005108:	e031      	b.n	800516e <HAL_DMA_Abort+0x276>
 800510a:	bf00      	nop
 800510c:	40020010 	.word	0x40020010
 8005110:	40020028 	.word	0x40020028
 8005114:	40020040 	.word	0x40020040
 8005118:	40020058 	.word	0x40020058
 800511c:	40020070 	.word	0x40020070
 8005120:	40020088 	.word	0x40020088
 8005124:	400200a0 	.word	0x400200a0
 8005128:	400200b8 	.word	0x400200b8
 800512c:	40020410 	.word	0x40020410
 8005130:	40020428 	.word	0x40020428
 8005134:	40020440 	.word	0x40020440
 8005138:	40020458 	.word	0x40020458
 800513c:	40020470 	.word	0x40020470
 8005140:	40020488 	.word	0x40020488
 8005144:	400204a0 	.word	0x400204a0
 8005148:	400204b8 	.word	0x400204b8
 800514c:	58025408 	.word	0x58025408
 8005150:	5802541c 	.word	0x5802541c
 8005154:	58025430 	.word	0x58025430
 8005158:	58025444 	.word	0x58025444
 800515c:	58025458 	.word	0x58025458
 8005160:	5802546c 	.word	0x5802546c
 8005164:	58025480 	.word	0x58025480
 8005168:	58025494 	.word	0x58025494
 800516c:	2300      	movs	r3, #0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005180:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a6d      	ldr	r2, [pc, #436]	; (800533c <HAL_DMA_Abort+0x444>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d04a      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a6b      	ldr	r2, [pc, #428]	; (8005340 <HAL_DMA_Abort+0x448>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d045      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a6a      	ldr	r2, [pc, #424]	; (8005344 <HAL_DMA_Abort+0x44c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d040      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a68      	ldr	r2, [pc, #416]	; (8005348 <HAL_DMA_Abort+0x450>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d03b      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a67      	ldr	r2, [pc, #412]	; (800534c <HAL_DMA_Abort+0x454>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d036      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a65      	ldr	r2, [pc, #404]	; (8005350 <HAL_DMA_Abort+0x458>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d031      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a64      	ldr	r2, [pc, #400]	; (8005354 <HAL_DMA_Abort+0x45c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d02c      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a62      	ldr	r2, [pc, #392]	; (8005358 <HAL_DMA_Abort+0x460>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d027      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a61      	ldr	r2, [pc, #388]	; (800535c <HAL_DMA_Abort+0x464>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d022      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a5f      	ldr	r2, [pc, #380]	; (8005360 <HAL_DMA_Abort+0x468>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01d      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a5e      	ldr	r2, [pc, #376]	; (8005364 <HAL_DMA_Abort+0x46c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d018      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a5c      	ldr	r2, [pc, #368]	; (8005368 <HAL_DMA_Abort+0x470>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a5b      	ldr	r2, [pc, #364]	; (800536c <HAL_DMA_Abort+0x474>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00e      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a59      	ldr	r2, [pc, #356]	; (8005370 <HAL_DMA_Abort+0x478>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d009      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a58      	ldr	r2, [pc, #352]	; (8005374 <HAL_DMA_Abort+0x47c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d004      	beq.n	8005222 <HAL_DMA_Abort+0x32a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a56      	ldr	r2, [pc, #344]	; (8005378 <HAL_DMA_Abort+0x480>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d108      	bne.n	8005234 <HAL_DMA_Abort+0x33c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0201 	bic.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e007      	b.n	8005244 <HAL_DMA_Abort+0x34c>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0201 	bic.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005244:	e013      	b.n	800526e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005246:	f7fe f8e3 	bl	8003410 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b05      	cmp	r3, #5
 8005252:	d90c      	bls.n	800526e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2203      	movs	r2, #3
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e12d      	b.n	80054ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e5      	bne.n	8005246 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a2f      	ldr	r2, [pc, #188]	; (800533c <HAL_DMA_Abort+0x444>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d04a      	beq.n	800531a <HAL_DMA_Abort+0x422>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a2d      	ldr	r2, [pc, #180]	; (8005340 <HAL_DMA_Abort+0x448>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d045      	beq.n	800531a <HAL_DMA_Abort+0x422>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a2c      	ldr	r2, [pc, #176]	; (8005344 <HAL_DMA_Abort+0x44c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d040      	beq.n	800531a <HAL_DMA_Abort+0x422>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <HAL_DMA_Abort+0x450>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d03b      	beq.n	800531a <HAL_DMA_Abort+0x422>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a29      	ldr	r2, [pc, #164]	; (800534c <HAL_DMA_Abort+0x454>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d036      	beq.n	800531a <HAL_DMA_Abort+0x422>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a27      	ldr	r2, [pc, #156]	; (8005350 <HAL_DMA_Abort+0x458>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d031      	beq.n	800531a <HAL_DMA_Abort+0x422>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a26      	ldr	r2, [pc, #152]	; (8005354 <HAL_DMA_Abort+0x45c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d02c      	beq.n	800531a <HAL_DMA_Abort+0x422>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a24      	ldr	r2, [pc, #144]	; (8005358 <HAL_DMA_Abort+0x460>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d027      	beq.n	800531a <HAL_DMA_Abort+0x422>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a23      	ldr	r2, [pc, #140]	; (800535c <HAL_DMA_Abort+0x464>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d022      	beq.n	800531a <HAL_DMA_Abort+0x422>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a21      	ldr	r2, [pc, #132]	; (8005360 <HAL_DMA_Abort+0x468>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01d      	beq.n	800531a <HAL_DMA_Abort+0x422>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a20      	ldr	r2, [pc, #128]	; (8005364 <HAL_DMA_Abort+0x46c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d018      	beq.n	800531a <HAL_DMA_Abort+0x422>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <HAL_DMA_Abort+0x470>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <HAL_DMA_Abort+0x422>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1d      	ldr	r2, [pc, #116]	; (800536c <HAL_DMA_Abort+0x474>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_DMA_Abort+0x422>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <HAL_DMA_Abort+0x478>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_DMA_Abort+0x422>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1a      	ldr	r2, [pc, #104]	; (8005374 <HAL_DMA_Abort+0x47c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_DMA_Abort+0x422>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a18      	ldr	r2, [pc, #96]	; (8005378 <HAL_DMA_Abort+0x480>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d101      	bne.n	800531e <HAL_DMA_Abort+0x426>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <HAL_DMA_Abort+0x428>
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02b      	beq.n	800537c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005328:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	223f      	movs	r2, #63	; 0x3f
 8005334:	409a      	lsls	r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	609a      	str	r2, [r3, #8]
 800533a:	e02a      	b.n	8005392 <HAL_DMA_Abort+0x49a>
 800533c:	40020010 	.word	0x40020010
 8005340:	40020028 	.word	0x40020028
 8005344:	40020040 	.word	0x40020040
 8005348:	40020058 	.word	0x40020058
 800534c:	40020070 	.word	0x40020070
 8005350:	40020088 	.word	0x40020088
 8005354:	400200a0 	.word	0x400200a0
 8005358:	400200b8 	.word	0x400200b8
 800535c:	40020410 	.word	0x40020410
 8005360:	40020428 	.word	0x40020428
 8005364:	40020440 	.word	0x40020440
 8005368:	40020458 	.word	0x40020458
 800536c:	40020470 	.word	0x40020470
 8005370:	40020488 	.word	0x40020488
 8005374:	400204a0 	.word	0x400204a0
 8005378:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005380:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	2201      	movs	r2, #1
 800538c:	409a      	lsls	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a4f      	ldr	r2, [pc, #316]	; (80054d4 <HAL_DMA_Abort+0x5dc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d072      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a4d      	ldr	r2, [pc, #308]	; (80054d8 <HAL_DMA_Abort+0x5e0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d06d      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a4c      	ldr	r2, [pc, #304]	; (80054dc <HAL_DMA_Abort+0x5e4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d068      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a4a      	ldr	r2, [pc, #296]	; (80054e0 <HAL_DMA_Abort+0x5e8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d063      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a49      	ldr	r2, [pc, #292]	; (80054e4 <HAL_DMA_Abort+0x5ec>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d05e      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a47      	ldr	r2, [pc, #284]	; (80054e8 <HAL_DMA_Abort+0x5f0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d059      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a46      	ldr	r2, [pc, #280]	; (80054ec <HAL_DMA_Abort+0x5f4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d054      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a44      	ldr	r2, [pc, #272]	; (80054f0 <HAL_DMA_Abort+0x5f8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d04f      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a43      	ldr	r2, [pc, #268]	; (80054f4 <HAL_DMA_Abort+0x5fc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d04a      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a41      	ldr	r2, [pc, #260]	; (80054f8 <HAL_DMA_Abort+0x600>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d045      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a40      	ldr	r2, [pc, #256]	; (80054fc <HAL_DMA_Abort+0x604>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d040      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3e      	ldr	r2, [pc, #248]	; (8005500 <HAL_DMA_Abort+0x608>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d03b      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a3d      	ldr	r2, [pc, #244]	; (8005504 <HAL_DMA_Abort+0x60c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d036      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a3b      	ldr	r2, [pc, #236]	; (8005508 <HAL_DMA_Abort+0x610>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d031      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a3a      	ldr	r2, [pc, #232]	; (800550c <HAL_DMA_Abort+0x614>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d02c      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a38      	ldr	r2, [pc, #224]	; (8005510 <HAL_DMA_Abort+0x618>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d027      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a37      	ldr	r2, [pc, #220]	; (8005514 <HAL_DMA_Abort+0x61c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d022      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a35      	ldr	r2, [pc, #212]	; (8005518 <HAL_DMA_Abort+0x620>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01d      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a34      	ldr	r2, [pc, #208]	; (800551c <HAL_DMA_Abort+0x624>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a32      	ldr	r2, [pc, #200]	; (8005520 <HAL_DMA_Abort+0x628>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a31      	ldr	r2, [pc, #196]	; (8005524 <HAL_DMA_Abort+0x62c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2f      	ldr	r2, [pc, #188]	; (8005528 <HAL_DMA_Abort+0x630>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d009      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2e      	ldr	r2, [pc, #184]	; (800552c <HAL_DMA_Abort+0x634>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <HAL_DMA_Abort+0x58a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2c      	ldr	r2, [pc, #176]	; (8005530 <HAL_DMA_Abort+0x638>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d101      	bne.n	8005486 <HAL_DMA_Abort+0x58e>
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <HAL_DMA_Abort+0x590>
 8005486:	2300      	movs	r3, #0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d015      	beq.n	80054b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005494:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40020010 	.word	0x40020010
 80054d8:	40020028 	.word	0x40020028
 80054dc:	40020040 	.word	0x40020040
 80054e0:	40020058 	.word	0x40020058
 80054e4:	40020070 	.word	0x40020070
 80054e8:	40020088 	.word	0x40020088
 80054ec:	400200a0 	.word	0x400200a0
 80054f0:	400200b8 	.word	0x400200b8
 80054f4:	40020410 	.word	0x40020410
 80054f8:	40020428 	.word	0x40020428
 80054fc:	40020440 	.word	0x40020440
 8005500:	40020458 	.word	0x40020458
 8005504:	40020470 	.word	0x40020470
 8005508:	40020488 	.word	0x40020488
 800550c:	400204a0 	.word	0x400204a0
 8005510:	400204b8 	.word	0x400204b8
 8005514:	58025408 	.word	0x58025408
 8005518:	5802541c 	.word	0x5802541c
 800551c:	58025430 	.word	0x58025430
 8005520:	58025444 	.word	0x58025444
 8005524:	58025458 	.word	0x58025458
 8005528:	5802546c 	.word	0x5802546c
 800552c:	58025480 	.word	0x58025480
 8005530:	58025494 	.word	0x58025494

08005534 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e205      	b.n	8005952 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d004      	beq.n	800555c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2280      	movs	r2, #128	; 0x80
 8005556:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e1fa      	b.n	8005952 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a8c      	ldr	r2, [pc, #560]	; (8005794 <HAL_DMA_Abort_IT+0x260>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d04a      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a8b      	ldr	r2, [pc, #556]	; (8005798 <HAL_DMA_Abort_IT+0x264>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d045      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a89      	ldr	r2, [pc, #548]	; (800579c <HAL_DMA_Abort_IT+0x268>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d040      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a88      	ldr	r2, [pc, #544]	; (80057a0 <HAL_DMA_Abort_IT+0x26c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d03b      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a86      	ldr	r2, [pc, #536]	; (80057a4 <HAL_DMA_Abort_IT+0x270>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d036      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a85      	ldr	r2, [pc, #532]	; (80057a8 <HAL_DMA_Abort_IT+0x274>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d031      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a83      	ldr	r2, [pc, #524]	; (80057ac <HAL_DMA_Abort_IT+0x278>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d02c      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a82      	ldr	r2, [pc, #520]	; (80057b0 <HAL_DMA_Abort_IT+0x27c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d027      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a80      	ldr	r2, [pc, #512]	; (80057b4 <HAL_DMA_Abort_IT+0x280>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d022      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a7f      	ldr	r2, [pc, #508]	; (80057b8 <HAL_DMA_Abort_IT+0x284>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d01d      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a7d      	ldr	r2, [pc, #500]	; (80057bc <HAL_DMA_Abort_IT+0x288>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d018      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a7c      	ldr	r2, [pc, #496]	; (80057c0 <HAL_DMA_Abort_IT+0x28c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d013      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a7a      	ldr	r2, [pc, #488]	; (80057c4 <HAL_DMA_Abort_IT+0x290>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00e      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a79      	ldr	r2, [pc, #484]	; (80057c8 <HAL_DMA_Abort_IT+0x294>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d009      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a77      	ldr	r2, [pc, #476]	; (80057cc <HAL_DMA_Abort_IT+0x298>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d004      	beq.n	80055fc <HAL_DMA_Abort_IT+0xc8>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a76      	ldr	r2, [pc, #472]	; (80057d0 <HAL_DMA_Abort_IT+0x29c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d101      	bne.n	8005600 <HAL_DMA_Abort_IT+0xcc>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <HAL_DMA_Abort_IT+0xce>
 8005600:	2300      	movs	r3, #0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d065      	beq.n	80056d2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2204      	movs	r2, #4
 800560a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a60      	ldr	r2, [pc, #384]	; (8005794 <HAL_DMA_Abort_IT+0x260>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d04a      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5e      	ldr	r2, [pc, #376]	; (8005798 <HAL_DMA_Abort_IT+0x264>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d045      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5d      	ldr	r2, [pc, #372]	; (800579c <HAL_DMA_Abort_IT+0x268>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d040      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a5b      	ldr	r2, [pc, #364]	; (80057a0 <HAL_DMA_Abort_IT+0x26c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d03b      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a5a      	ldr	r2, [pc, #360]	; (80057a4 <HAL_DMA_Abort_IT+0x270>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d036      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a58      	ldr	r2, [pc, #352]	; (80057a8 <HAL_DMA_Abort_IT+0x274>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d031      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a57      	ldr	r2, [pc, #348]	; (80057ac <HAL_DMA_Abort_IT+0x278>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d02c      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a55      	ldr	r2, [pc, #340]	; (80057b0 <HAL_DMA_Abort_IT+0x27c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d027      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a54      	ldr	r2, [pc, #336]	; (80057b4 <HAL_DMA_Abort_IT+0x280>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d022      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a52      	ldr	r2, [pc, #328]	; (80057b8 <HAL_DMA_Abort_IT+0x284>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01d      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a51      	ldr	r2, [pc, #324]	; (80057bc <HAL_DMA_Abort_IT+0x288>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d018      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a4f      	ldr	r2, [pc, #316]	; (80057c0 <HAL_DMA_Abort_IT+0x28c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a4e      	ldr	r2, [pc, #312]	; (80057c4 <HAL_DMA_Abort_IT+0x290>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00e      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a4c      	ldr	r2, [pc, #304]	; (80057c8 <HAL_DMA_Abort_IT+0x294>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a4b      	ldr	r2, [pc, #300]	; (80057cc <HAL_DMA_Abort_IT+0x298>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_DMA_Abort_IT+0x17a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a49      	ldr	r2, [pc, #292]	; (80057d0 <HAL_DMA_Abort_IT+0x29c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d108      	bne.n	80056c0 <HAL_DMA_Abort_IT+0x18c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0201 	bic.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e147      	b.n	8005950 <HAL_DMA_Abort_IT+0x41c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	e13e      	b.n	8005950 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 020e 	bic.w	r2, r2, #14
 80056e0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a2b      	ldr	r2, [pc, #172]	; (8005794 <HAL_DMA_Abort_IT+0x260>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d04a      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a29      	ldr	r2, [pc, #164]	; (8005798 <HAL_DMA_Abort_IT+0x264>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d045      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a28      	ldr	r2, [pc, #160]	; (800579c <HAL_DMA_Abort_IT+0x268>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d040      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a26      	ldr	r2, [pc, #152]	; (80057a0 <HAL_DMA_Abort_IT+0x26c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d03b      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a25      	ldr	r2, [pc, #148]	; (80057a4 <HAL_DMA_Abort_IT+0x270>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d036      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a23      	ldr	r2, [pc, #140]	; (80057a8 <HAL_DMA_Abort_IT+0x274>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d031      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a22      	ldr	r2, [pc, #136]	; (80057ac <HAL_DMA_Abort_IT+0x278>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d02c      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a20      	ldr	r2, [pc, #128]	; (80057b0 <HAL_DMA_Abort_IT+0x27c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d027      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1f      	ldr	r2, [pc, #124]	; (80057b4 <HAL_DMA_Abort_IT+0x280>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <HAL_DMA_Abort_IT+0x284>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01d      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <HAL_DMA_Abort_IT+0x288>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d018      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <HAL_DMA_Abort_IT+0x28c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a19      	ldr	r2, [pc, #100]	; (80057c4 <HAL_DMA_Abort_IT+0x290>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <HAL_DMA_Abort_IT+0x294>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a16      	ldr	r2, [pc, #88]	; (80057cc <HAL_DMA_Abort_IT+0x298>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_DMA_Abort_IT+0x24e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <HAL_DMA_Abort_IT+0x29c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d128      	bne.n	80057d4 <HAL_DMA_Abort_IT+0x2a0>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e027      	b.n	80057e4 <HAL_DMA_Abort_IT+0x2b0>
 8005794:	40020010 	.word	0x40020010
 8005798:	40020028 	.word	0x40020028
 800579c:	40020040 	.word	0x40020040
 80057a0:	40020058 	.word	0x40020058
 80057a4:	40020070 	.word	0x40020070
 80057a8:	40020088 	.word	0x40020088
 80057ac:	400200a0 	.word	0x400200a0
 80057b0:	400200b8 	.word	0x400200b8
 80057b4:	40020410 	.word	0x40020410
 80057b8:	40020428 	.word	0x40020428
 80057bc:	40020440 	.word	0x40020440
 80057c0:	40020458 	.word	0x40020458
 80057c4:	40020470 	.word	0x40020470
 80057c8:	40020488 	.word	0x40020488
 80057cc:	400204a0 	.word	0x400204a0
 80057d0:	400204b8 	.word	0x400204b8
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a5c      	ldr	r2, [pc, #368]	; (800595c <HAL_DMA_Abort_IT+0x428>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d072      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a5b      	ldr	r2, [pc, #364]	; (8005960 <HAL_DMA_Abort_IT+0x42c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d06d      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a59      	ldr	r2, [pc, #356]	; (8005964 <HAL_DMA_Abort_IT+0x430>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d068      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a58      	ldr	r2, [pc, #352]	; (8005968 <HAL_DMA_Abort_IT+0x434>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d063      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a56      	ldr	r2, [pc, #344]	; (800596c <HAL_DMA_Abort_IT+0x438>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d05e      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a55      	ldr	r2, [pc, #340]	; (8005970 <HAL_DMA_Abort_IT+0x43c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d059      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a53      	ldr	r2, [pc, #332]	; (8005974 <HAL_DMA_Abort_IT+0x440>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d054      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a52      	ldr	r2, [pc, #328]	; (8005978 <HAL_DMA_Abort_IT+0x444>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d04f      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a50      	ldr	r2, [pc, #320]	; (800597c <HAL_DMA_Abort_IT+0x448>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d04a      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a4f      	ldr	r2, [pc, #316]	; (8005980 <HAL_DMA_Abort_IT+0x44c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d045      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a4d      	ldr	r2, [pc, #308]	; (8005984 <HAL_DMA_Abort_IT+0x450>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d040      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a4c      	ldr	r2, [pc, #304]	; (8005988 <HAL_DMA_Abort_IT+0x454>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d03b      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a4a      	ldr	r2, [pc, #296]	; (800598c <HAL_DMA_Abort_IT+0x458>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d036      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a49      	ldr	r2, [pc, #292]	; (8005990 <HAL_DMA_Abort_IT+0x45c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d031      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a47      	ldr	r2, [pc, #284]	; (8005994 <HAL_DMA_Abort_IT+0x460>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d02c      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a46      	ldr	r2, [pc, #280]	; (8005998 <HAL_DMA_Abort_IT+0x464>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d027      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a44      	ldr	r2, [pc, #272]	; (800599c <HAL_DMA_Abort_IT+0x468>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d022      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a43      	ldr	r2, [pc, #268]	; (80059a0 <HAL_DMA_Abort_IT+0x46c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d01d      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a41      	ldr	r2, [pc, #260]	; (80059a4 <HAL_DMA_Abort_IT+0x470>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d018      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a40      	ldr	r2, [pc, #256]	; (80059a8 <HAL_DMA_Abort_IT+0x474>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d013      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a3e      	ldr	r2, [pc, #248]	; (80059ac <HAL_DMA_Abort_IT+0x478>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00e      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a3d      	ldr	r2, [pc, #244]	; (80059b0 <HAL_DMA_Abort_IT+0x47c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d009      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a3b      	ldr	r2, [pc, #236]	; (80059b4 <HAL_DMA_Abort_IT+0x480>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d004      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x3a0>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a3a      	ldr	r2, [pc, #232]	; (80059b8 <HAL_DMA_Abort_IT+0x484>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d101      	bne.n	80058d8 <HAL_DMA_Abort_IT+0x3a4>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <HAL_DMA_Abort_IT+0x3a6>
 80058d8:	2300      	movs	r3, #0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d028      	beq.n	8005930 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	2201      	movs	r2, #1
 80058fe:	409a      	lsls	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800590c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00c      	beq.n	8005930 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005924:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800592e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40020010 	.word	0x40020010
 8005960:	40020028 	.word	0x40020028
 8005964:	40020040 	.word	0x40020040
 8005968:	40020058 	.word	0x40020058
 800596c:	40020070 	.word	0x40020070
 8005970:	40020088 	.word	0x40020088
 8005974:	400200a0 	.word	0x400200a0
 8005978:	400200b8 	.word	0x400200b8
 800597c:	40020410 	.word	0x40020410
 8005980:	40020428 	.word	0x40020428
 8005984:	40020440 	.word	0x40020440
 8005988:	40020458 	.word	0x40020458
 800598c:	40020470 	.word	0x40020470
 8005990:	40020488 	.word	0x40020488
 8005994:	400204a0 	.word	0x400204a0
 8005998:	400204b8 	.word	0x400204b8
 800599c:	58025408 	.word	0x58025408
 80059a0:	5802541c 	.word	0x5802541c
 80059a4:	58025430 	.word	0x58025430
 80059a8:	58025444 	.word	0x58025444
 80059ac:	58025458 	.word	0x58025458
 80059b0:	5802546c 	.word	0x5802546c
 80059b4:	58025480 	.word	0x58025480
 80059b8:	58025494 	.word	0x58025494

080059bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059bc:	b480      	push	{r7}
 80059be:	b089      	sub	sp, #36	; 0x24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059ca:	4b86      	ldr	r3, [pc, #536]	; (8005be4 <HAL_GPIO_Init+0x228>)
 80059cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059ce:	e18c      	b.n	8005cea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	2101      	movs	r1, #1
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	fa01 f303 	lsl.w	r3, r1, r3
 80059dc:	4013      	ands	r3, r2
 80059de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 817e 	beq.w	8005ce4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d005      	beq.n	8005a00 <HAL_GPIO_Init+0x44>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d130      	bne.n	8005a62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4013      	ands	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a36:	2201      	movs	r2, #1
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4013      	ands	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	091b      	lsrs	r3, r3, #4
 8005a4c:	f003 0201 	and.w	r2, r3, #1
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d017      	beq.n	8005a9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	2203      	movs	r2, #3
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	4013      	ands	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d123      	bne.n	8005af2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	08da      	lsrs	r2, r3, #3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3208      	adds	r2, #8
 8005ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	220f      	movs	r2, #15
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	08da      	lsrs	r2, r3, #3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3208      	adds	r2, #8
 8005aec:	69b9      	ldr	r1, [r7, #24]
 8005aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	2203      	movs	r2, #3
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	43db      	mvns	r3, r3
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	4013      	ands	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f003 0203 	and.w	r2, r3, #3
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80d8 	beq.w	8005ce4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b34:	4b2c      	ldr	r3, [pc, #176]	; (8005be8 <HAL_GPIO_Init+0x22c>)
 8005b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b3a:	4a2b      	ldr	r2, [pc, #172]	; (8005be8 <HAL_GPIO_Init+0x22c>)
 8005b3c:	f043 0302 	orr.w	r3, r3, #2
 8005b40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b44:	4b28      	ldr	r3, [pc, #160]	; (8005be8 <HAL_GPIO_Init+0x22c>)
 8005b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b52:	4a26      	ldr	r2, [pc, #152]	; (8005bec <HAL_GPIO_Init+0x230>)
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	3302      	adds	r3, #2
 8005b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	220f      	movs	r2, #15
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4013      	ands	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1d      	ldr	r2, [pc, #116]	; (8005bf0 <HAL_GPIO_Init+0x234>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d04a      	beq.n	8005c14 <HAL_GPIO_Init+0x258>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <HAL_GPIO_Init+0x238>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d02b      	beq.n	8005bde <HAL_GPIO_Init+0x222>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a1b      	ldr	r2, [pc, #108]	; (8005bf8 <HAL_GPIO_Init+0x23c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d025      	beq.n	8005bda <HAL_GPIO_Init+0x21e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1a      	ldr	r2, [pc, #104]	; (8005bfc <HAL_GPIO_Init+0x240>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01f      	beq.n	8005bd6 <HAL_GPIO_Init+0x21a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <HAL_GPIO_Init+0x244>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d019      	beq.n	8005bd2 <HAL_GPIO_Init+0x216>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <HAL_GPIO_Init+0x248>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <HAL_GPIO_Init+0x212>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <HAL_GPIO_Init+0x24c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00d      	beq.n	8005bca <HAL_GPIO_Init+0x20e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <HAL_GPIO_Init+0x250>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d007      	beq.n	8005bc6 <HAL_GPIO_Init+0x20a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <HAL_GPIO_Init+0x254>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d101      	bne.n	8005bc2 <HAL_GPIO_Init+0x206>
 8005bbe:	2309      	movs	r3, #9
 8005bc0:	e029      	b.n	8005c16 <HAL_GPIO_Init+0x25a>
 8005bc2:	230a      	movs	r3, #10
 8005bc4:	e027      	b.n	8005c16 <HAL_GPIO_Init+0x25a>
 8005bc6:	2307      	movs	r3, #7
 8005bc8:	e025      	b.n	8005c16 <HAL_GPIO_Init+0x25a>
 8005bca:	2306      	movs	r3, #6
 8005bcc:	e023      	b.n	8005c16 <HAL_GPIO_Init+0x25a>
 8005bce:	2305      	movs	r3, #5
 8005bd0:	e021      	b.n	8005c16 <HAL_GPIO_Init+0x25a>
 8005bd2:	2304      	movs	r3, #4
 8005bd4:	e01f      	b.n	8005c16 <HAL_GPIO_Init+0x25a>
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e01d      	b.n	8005c16 <HAL_GPIO_Init+0x25a>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e01b      	b.n	8005c16 <HAL_GPIO_Init+0x25a>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e019      	b.n	8005c16 <HAL_GPIO_Init+0x25a>
 8005be2:	bf00      	nop
 8005be4:	58000080 	.word	0x58000080
 8005be8:	58024400 	.word	0x58024400
 8005bec:	58000400 	.word	0x58000400
 8005bf0:	58020000 	.word	0x58020000
 8005bf4:	58020400 	.word	0x58020400
 8005bf8:	58020800 	.word	0x58020800
 8005bfc:	58020c00 	.word	0x58020c00
 8005c00:	58021000 	.word	0x58021000
 8005c04:	58021400 	.word	0x58021400
 8005c08:	58021800 	.word	0x58021800
 8005c0c:	58021c00 	.word	0x58021c00
 8005c10:	58022400 	.word	0x58022400
 8005c14:	2300      	movs	r3, #0
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	f002 0203 	and.w	r2, r2, #3
 8005c1c:	0092      	lsls	r2, r2, #2
 8005c1e:	4093      	lsls	r3, r2
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c26:	4938      	ldr	r1, [pc, #224]	; (8005d08 <HAL_GPIO_Init+0x34c>)
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	089b      	lsrs	r3, r3, #2
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4013      	ands	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	4013      	ands	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f47f ae6b 	bne.w	80059d0 <HAL_GPIO_Init+0x14>
  }
}
 8005cfa:	bf00      	nop
 8005cfc:	bf00      	nop
 8005cfe:	3724      	adds	r7, #36	; 0x24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	58000400 	.word	0x58000400

08005d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	807b      	strh	r3, [r7, #2]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d1c:	787b      	ldrb	r3, [r7, #1]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d22:	887a      	ldrh	r2, [r7, #2]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d28:	e003      	b.n	8005d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d2a:	887b      	ldrh	r3, [r7, #2]
 8005d2c:	041a      	lsls	r2, r3, #16
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	619a      	str	r2, [r3, #24]
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d48:	4b19      	ldr	r3, [pc, #100]	; (8005db0 <HAL_PWREx_ConfigSupply+0x70>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d00a      	beq.n	8005d6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d54:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <HAL_PWREx_ConfigSupply+0x70>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d001      	beq.n	8005d66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e01f      	b.n	8005da6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e01d      	b.n	8005da6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <HAL_PWREx_ConfigSupply+0x70>)
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f023 0207 	bic.w	r2, r3, #7
 8005d72:	490f      	ldr	r1, [pc, #60]	; (8005db0 <HAL_PWREx_ConfigSupply+0x70>)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d7a:	f7fd fb49 	bl	8003410 <HAL_GetTick>
 8005d7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d80:	e009      	b.n	8005d96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d82:	f7fd fb45 	bl	8003410 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d90:	d901      	bls.n	8005d96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e007      	b.n	8005da6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d96:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <HAL_PWREx_ConfigSupply+0x70>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da2:	d1ee      	bne.n	8005d82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	58024800 	.word	0x58024800

08005db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08c      	sub	sp, #48	; 0x30
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e397      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8087 	beq.w	8005ee2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dd4:	4b9e      	ldr	r3, [pc, #632]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dde:	4b9c      	ldr	r3, [pc, #624]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	2b10      	cmp	r3, #16
 8005de8:	d007      	beq.n	8005dfa <HAL_RCC_OscConfig+0x46>
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	2b18      	cmp	r3, #24
 8005dee:	d110      	bne.n	8005e12 <HAL_RCC_OscConfig+0x5e>
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d10b      	bne.n	8005e12 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dfa:	4b95      	ldr	r3, [pc, #596]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d06c      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x12c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d168      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e371      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1a:	d106      	bne.n	8005e2a <HAL_RCC_OscConfig+0x76>
 8005e1c:	4b8c      	ldr	r3, [pc, #560]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a8b      	ldr	r2, [pc, #556]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	e02e      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10c      	bne.n	8005e4c <HAL_RCC_OscConfig+0x98>
 8005e32:	4b87      	ldr	r3, [pc, #540]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a86      	ldr	r2, [pc, #536]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b84      	ldr	r3, [pc, #528]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a83      	ldr	r2, [pc, #524]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e01d      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e54:	d10c      	bne.n	8005e70 <HAL_RCC_OscConfig+0xbc>
 8005e56:	4b7e      	ldr	r3, [pc, #504]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7d      	ldr	r2, [pc, #500]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	4b7b      	ldr	r3, [pc, #492]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a7a      	ldr	r2, [pc, #488]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e00b      	b.n	8005e88 <HAL_RCC_OscConfig+0xd4>
 8005e70:	4b77      	ldr	r3, [pc, #476]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a76      	ldr	r2, [pc, #472]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	4b74      	ldr	r3, [pc, #464]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a73      	ldr	r2, [pc, #460]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d013      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fd fabe 	bl	8003410 <HAL_GetTick>
 8005e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e98:	f7fd faba 	bl	8003410 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b64      	cmp	r3, #100	; 0x64
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e325      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005eaa:	4b69      	ldr	r3, [pc, #420]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0xe4>
 8005eb6:	e014      	b.n	8005ee2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb8:	f7fd faaa 	bl	8003410 <HAL_GetTick>
 8005ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ec0:	f7fd faa6 	bl	8003410 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b64      	cmp	r3, #100	; 0x64
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e311      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ed2:	4b5f      	ldr	r3, [pc, #380]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x10c>
 8005ede:	e000      	b.n	8005ee2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 808a 	beq.w	8006004 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ef0:	4b57      	ldr	r3, [pc, #348]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005efa:	4b55      	ldr	r3, [pc, #340]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <HAL_RCC_OscConfig+0x162>
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	2b18      	cmp	r3, #24
 8005f0a:	d137      	bne.n	8005f7c <HAL_RCC_OscConfig+0x1c8>
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d132      	bne.n	8005f7c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f16:	4b4e      	ldr	r3, [pc, #312]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <HAL_RCC_OscConfig+0x17a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e2e3      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f2e:	4b48      	ldr	r3, [pc, #288]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f023 0219 	bic.w	r2, r3, #25
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	4945      	ldr	r1, [pc, #276]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f40:	f7fd fa66 	bl	8003410 <HAL_GetTick>
 8005f44:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f48:	f7fd fa62 	bl	8003410 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e2cd      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f5a:	4b3d      	ldr	r3, [pc, #244]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0f0      	beq.n	8005f48 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f66:	4b3a      	ldr	r3, [pc, #232]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	061b      	lsls	r3, r3, #24
 8005f74:	4936      	ldr	r1, [pc, #216]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f7a:	e043      	b.n	8006004 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d026      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f84:	4b32      	ldr	r3, [pc, #200]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f023 0219 	bic.w	r2, r3, #25
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	492f      	ldr	r1, [pc, #188]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f96:	f7fd fa3b 	bl	8003410 <HAL_GetTick>
 8005f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f9e:	f7fd fa37 	bl	8003410 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e2a2      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0f0      	beq.n	8005f9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fbc:	4b24      	ldr	r3, [pc, #144]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	061b      	lsls	r3, r3, #24
 8005fca:	4921      	ldr	r1, [pc, #132]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	604b      	str	r3, [r1, #4]
 8005fd0:	e018      	b.n	8006004 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fd2:	4b1f      	ldr	r3, [pc, #124]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1e      	ldr	r2, [pc, #120]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fde:	f7fd fa17 	bl	8003410 <HAL_GetTick>
 8005fe2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fe6:	f7fd fa13 	bl	8003410 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e27e      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ff8:	4b15      	ldr	r3, [pc, #84]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f0      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b00      	cmp	r3, #0
 800600e:	d06d      	beq.n	80060ec <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006010:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006018:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b08      	cmp	r3, #8
 8006024:	d007      	beq.n	8006036 <HAL_RCC_OscConfig+0x282>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b18      	cmp	r3, #24
 800602a:	d11e      	bne.n	800606a <HAL_RCC_OscConfig+0x2b6>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b01      	cmp	r3, #1
 8006034:	d119      	bne.n	800606a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <HAL_RCC_OscConfig+0x29c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <HAL_RCC_OscConfig+0x2a0>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	2b80      	cmp	r3, #128	; 0x80
 8006048:	d004      	beq.n	8006054 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e253      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
 800604e:	bf00      	nop
 8006050:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006054:	4ba3      	ldr	r3, [pc, #652]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	061b      	lsls	r3, r3, #24
 8006062:	49a0      	ldr	r1, [pc, #640]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006064:	4313      	orrs	r3, r2
 8006066:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006068:	e040      	b.n	80060ec <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d023      	beq.n	80060ba <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006072:	4b9c      	ldr	r3, [pc, #624]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a9b      	ldr	r2, [pc, #620]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607e:	f7fd f9c7 	bl	8003410 <HAL_GetTick>
 8006082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006086:	f7fd f9c3 	bl	8003410 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e22e      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006098:	4b92      	ldr	r3, [pc, #584]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f0      	beq.n	8006086 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060a4:	4b8f      	ldr	r3, [pc, #572]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	061b      	lsls	r3, r3, #24
 80060b2:	498c      	ldr	r1, [pc, #560]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60cb      	str	r3, [r1, #12]
 80060b8:	e018      	b.n	80060ec <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80060ba:	4b8a      	ldr	r3, [pc, #552]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a89      	ldr	r2, [pc, #548]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 80060c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c6:	f7fd f9a3 	bl	8003410 <HAL_GetTick>
 80060ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060ce:	f7fd f99f 	bl	8003410 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e20a      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060e0:	4b80      	ldr	r3, [pc, #512]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1f0      	bne.n	80060ce <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d036      	beq.n	8006166 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d019      	beq.n	8006134 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006100:	4b78      	ldr	r3, [pc, #480]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006104:	4a77      	ldr	r2, [pc, #476]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610c:	f7fd f980 	bl	8003410 <HAL_GetTick>
 8006110:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006114:	f7fd f97c 	bl	8003410 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e1e7      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006126:	4b6f      	ldr	r3, [pc, #444]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0f0      	beq.n	8006114 <HAL_RCC_OscConfig+0x360>
 8006132:	e018      	b.n	8006166 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006134:	4b6b      	ldr	r3, [pc, #428]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006138:	4a6a      	ldr	r2, [pc, #424]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006140:	f7fd f966 	bl	8003410 <HAL_GetTick>
 8006144:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006148:	f7fd f962 	bl	8003410 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e1cd      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800615a:	4b62      	ldr	r3, [pc, #392]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 800615c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f0      	bne.n	8006148 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d036      	beq.n	80061e0 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d019      	beq.n	80061ae <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800617a:	4b5a      	ldr	r3, [pc, #360]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a59      	ldr	r2, [pc, #356]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006184:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006186:	f7fd f943 	bl	8003410 <HAL_GetTick>
 800618a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800618e:	f7fd f93f 	bl	8003410 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e1aa      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061a0:	4b50      	ldr	r3, [pc, #320]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0f0      	beq.n	800618e <HAL_RCC_OscConfig+0x3da>
 80061ac:	e018      	b.n	80061e0 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061ae:	4b4d      	ldr	r3, [pc, #308]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a4c      	ldr	r2, [pc, #304]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 80061b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061ba:	f7fd f929 	bl	8003410 <HAL_GetTick>
 80061be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061c0:	e008      	b.n	80061d4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061c2:	f7fd f925 	bl	8003410 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e190      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061d4:	4b43      	ldr	r3, [pc, #268]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f0      	bne.n	80061c2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 8085 	beq.w	80062f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061ee:	4b3e      	ldr	r3, [pc, #248]	; (80062e8 <HAL_RCC_OscConfig+0x534>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a3d      	ldr	r2, [pc, #244]	; (80062e8 <HAL_RCC_OscConfig+0x534>)
 80061f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061fa:	f7fd f909 	bl	8003410 <HAL_GetTick>
 80061fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006202:	f7fd f905 	bl	8003410 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b64      	cmp	r3, #100	; 0x64
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e170      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006214:	4b34      	ldr	r3, [pc, #208]	; (80062e8 <HAL_RCC_OscConfig+0x534>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f0      	beq.n	8006202 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d106      	bne.n	8006236 <HAL_RCC_OscConfig+0x482>
 8006228:	4b2e      	ldr	r3, [pc, #184]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 800622a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622c:	4a2d      	ldr	r2, [pc, #180]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 800622e:	f043 0301 	orr.w	r3, r3, #1
 8006232:	6713      	str	r3, [r2, #112]	; 0x70
 8006234:	e02d      	b.n	8006292 <HAL_RCC_OscConfig+0x4de>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10c      	bne.n	8006258 <HAL_RCC_OscConfig+0x4a4>
 800623e:	4b29      	ldr	r3, [pc, #164]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	4a28      	ldr	r2, [pc, #160]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	6713      	str	r3, [r2, #112]	; 0x70
 800624a:	4b26      	ldr	r3, [pc, #152]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	4a25      	ldr	r2, [pc, #148]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006250:	f023 0304 	bic.w	r3, r3, #4
 8006254:	6713      	str	r3, [r2, #112]	; 0x70
 8006256:	e01c      	b.n	8006292 <HAL_RCC_OscConfig+0x4de>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b05      	cmp	r3, #5
 800625e:	d10c      	bne.n	800627a <HAL_RCC_OscConfig+0x4c6>
 8006260:	4b20      	ldr	r3, [pc, #128]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006266:	f043 0304 	orr.w	r3, r3, #4
 800626a:	6713      	str	r3, [r2, #112]	; 0x70
 800626c:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	4a1c      	ldr	r2, [pc, #112]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	6713      	str	r3, [r2, #112]	; 0x70
 8006278:	e00b      	b.n	8006292 <HAL_RCC_OscConfig+0x4de>
 800627a:	4b1a      	ldr	r3, [pc, #104]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	4a19      	ldr	r2, [pc, #100]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	6713      	str	r3, [r2, #112]	; 0x70
 8006286:	4b17      	ldr	r3, [pc, #92]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 8006288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628a:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 800628c:	f023 0304 	bic.w	r3, r3, #4
 8006290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d015      	beq.n	80062c6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629a:	f7fd f8b9 	bl	8003410 <HAL_GetTick>
 800629e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062a0:	e00a      	b.n	80062b8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a2:	f7fd f8b5 	bl	8003410 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e11e      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062b8:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <HAL_RCC_OscConfig+0x530>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0ee      	beq.n	80062a2 <HAL_RCC_OscConfig+0x4ee>
 80062c4:	e018      	b.n	80062f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c6:	f7fd f8a3 	bl	8003410 <HAL_GetTick>
 80062ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062cc:	e00e      	b.n	80062ec <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062ce:	f7fd f89f 	bl	8003410 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062dc:	4293      	cmp	r3, r2
 80062de:	d905      	bls.n	80062ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e108      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
 80062e4:	58024400 	.word	0x58024400
 80062e8:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062ec:	4b84      	ldr	r3, [pc, #528]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80062ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1ea      	bne.n	80062ce <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 80f9 	beq.w	80064f4 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006302:	4b7f      	ldr	r3, [pc, #508]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800630a:	2b18      	cmp	r3, #24
 800630c:	f000 80b4 	beq.w	8006478 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	2b02      	cmp	r3, #2
 8006316:	f040 8095 	bne.w	8006444 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631a:	4b79      	ldr	r3, [pc, #484]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a78      	ldr	r2, [pc, #480]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 8006320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006326:	f7fd f873 	bl	8003410 <HAL_GetTick>
 800632a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800632e:	f7fd f86f 	bl	8003410 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e0da      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006340:	4b6f      	ldr	r3, [pc, #444]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f0      	bne.n	800632e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800634c:	4b6c      	ldr	r3, [pc, #432]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 800634e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006350:	4b6c      	ldr	r3, [pc, #432]	; (8006504 <HAL_RCC_OscConfig+0x750>)
 8006352:	4013      	ands	r3, r2
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800635c:	0112      	lsls	r2, r2, #4
 800635e:	430a      	orrs	r2, r1
 8006360:	4967      	ldr	r1, [pc, #412]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 8006362:	4313      	orrs	r3, r2
 8006364:	628b      	str	r3, [r1, #40]	; 0x28
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	3b01      	subs	r3, #1
 800636c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006374:	3b01      	subs	r3, #1
 8006376:	025b      	lsls	r3, r3, #9
 8006378:	b29b      	uxth	r3, r3
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	3b01      	subs	r3, #1
 8006382:	041b      	lsls	r3, r3, #16
 8006384:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638e:	3b01      	subs	r3, #1
 8006390:	061b      	lsls	r3, r3, #24
 8006392:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006396:	495a      	ldr	r1, [pc, #360]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 8006398:	4313      	orrs	r3, r2
 800639a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800639c:	4b58      	ldr	r3, [pc, #352]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4a57      	ldr	r2, [pc, #348]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063a8:	4b55      	ldr	r3, [pc, #340]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ac:	4b56      	ldr	r3, [pc, #344]	; (8006508 <HAL_RCC_OscConfig+0x754>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063b4:	00d2      	lsls	r2, r2, #3
 80063b6:	4952      	ldr	r1, [pc, #328]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063bc:	4b50      	ldr	r3, [pc, #320]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	f023 020c 	bic.w	r2, r3, #12
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	494d      	ldr	r1, [pc, #308]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063ce:	4b4c      	ldr	r3, [pc, #304]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	f023 0202 	bic.w	r2, r3, #2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	4949      	ldr	r1, [pc, #292]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063e0:	4b47      	ldr	r3, [pc, #284]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	4a46      	ldr	r2, [pc, #280]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ec:	4b44      	ldr	r3, [pc, #272]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	4a43      	ldr	r2, [pc, #268]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063f8:	4b41      	ldr	r3, [pc, #260]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4a40      	ldr	r2, [pc, #256]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 80063fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006404:	4b3e      	ldr	r3, [pc, #248]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4a3d      	ldr	r2, [pc, #244]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 800640a:	f043 0301 	orr.w	r3, r3, #1
 800640e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006410:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a3a      	ldr	r2, [pc, #232]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 8006416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800641a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641c:	f7fc fff8 	bl	8003410 <HAL_GetTick>
 8006420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006424:	f7fc fff4 	bl	8003410 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e05f      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006436:	4b32      	ldr	r3, [pc, #200]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0f0      	beq.n	8006424 <HAL_RCC_OscConfig+0x670>
 8006442:	e057      	b.n	80064f4 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006444:	4b2e      	ldr	r3, [pc, #184]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2d      	ldr	r2, [pc, #180]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 800644a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800644e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7fc ffde 	bl	8003410 <HAL_GetTick>
 8006454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006458:	f7fc ffda 	bl	8003410 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e045      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800646a:	4b25      	ldr	r3, [pc, #148]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f0      	bne.n	8006458 <HAL_RCC_OscConfig+0x6a4>
 8006476:	e03d      	b.n	80064f4 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006478:	4b21      	ldr	r3, [pc, #132]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800647e:	4b20      	ldr	r3, [pc, #128]	; (8006500 <HAL_RCC_OscConfig+0x74c>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	2b01      	cmp	r3, #1
 800648a:	d031      	beq.n	80064f0 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f003 0203 	and.w	r2, r3, #3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d12a      	bne.n	80064f0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d122      	bne.n	80064f0 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d11a      	bne.n	80064f0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	0a5b      	lsrs	r3, r3, #9
 80064be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d111      	bne.n	80064f0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	0c1b      	lsrs	r3, r3, #16
 80064d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064da:	429a      	cmp	r2, r3
 80064dc:	d108      	bne.n	80064f0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	0e1b      	lsrs	r3, r3, #24
 80064e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d001      	beq.n	80064f4 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3730      	adds	r7, #48	; 0x30
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	58024400 	.word	0x58024400
 8006504:	fffffc0c 	.word	0xfffffc0c
 8006508:	ffff0007 	.word	0xffff0007

0800650c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e19c      	b.n	800685a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006520:	4b8a      	ldr	r3, [pc, #552]	; (800674c <HAL_RCC_ClockConfig+0x240>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d910      	bls.n	8006550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652e:	4b87      	ldr	r3, [pc, #540]	; (800674c <HAL_RCC_ClockConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 020f 	bic.w	r2, r3, #15
 8006536:	4985      	ldr	r1, [pc, #532]	; (800674c <HAL_RCC_ClockConfig+0x240>)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	4313      	orrs	r3, r2
 800653c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800653e:	4b83      	ldr	r3, [pc, #524]	; (800674c <HAL_RCC_ClockConfig+0x240>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d001      	beq.n	8006550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e184      	b.n	800685a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	d010      	beq.n	800657e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	4b7b      	ldr	r3, [pc, #492]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006568:	429a      	cmp	r2, r3
 800656a:	d908      	bls.n	800657e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800656c:	4b78      	ldr	r3, [pc, #480]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	4975      	ldr	r1, [pc, #468]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 800657a:	4313      	orrs	r3, r2
 800657c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d010      	beq.n	80065ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695a      	ldr	r2, [r3, #20]
 800658e:	4b70      	ldr	r3, [pc, #448]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006596:	429a      	cmp	r2, r3
 8006598:	d908      	bls.n	80065ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800659a:	4b6d      	ldr	r3, [pc, #436]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	496a      	ldr	r1, [pc, #424]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0310 	and.w	r3, r3, #16
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d010      	beq.n	80065da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	699a      	ldr	r2, [r3, #24]
 80065bc:	4b64      	ldr	r3, [pc, #400]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d908      	bls.n	80065da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065c8:	4b61      	ldr	r3, [pc, #388]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	495e      	ldr	r1, [pc, #376]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d010      	beq.n	8006608 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69da      	ldr	r2, [r3, #28]
 80065ea:	4b59      	ldr	r3, [pc, #356]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d908      	bls.n	8006608 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065f6:	4b56      	ldr	r3, [pc, #344]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	4953      	ldr	r1, [pc, #332]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 8006604:	4313      	orrs	r3, r2
 8006606:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d010      	beq.n	8006636 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	4b4d      	ldr	r3, [pc, #308]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	429a      	cmp	r2, r3
 8006622:	d908      	bls.n	8006636 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006624:	4b4a      	ldr	r3, [pc, #296]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f023 020f 	bic.w	r2, r3, #15
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4947      	ldr	r1, [pc, #284]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 8006632:	4313      	orrs	r3, r2
 8006634:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d055      	beq.n	80066ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006642:	4b43      	ldr	r3, [pc, #268]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	4940      	ldr	r1, [pc, #256]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 8006650:	4313      	orrs	r3, r2
 8006652:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d107      	bne.n	800666c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800665c:	4b3c      	ldr	r3, [pc, #240]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d121      	bne.n	80066ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e0f6      	b.n	800685a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2b03      	cmp	r3, #3
 8006672:	d107      	bne.n	8006684 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006674:	4b36      	ldr	r3, [pc, #216]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d115      	bne.n	80066ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0ea      	b.n	800685a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d107      	bne.n	800669c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800668c:	4b30      	ldr	r3, [pc, #192]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0de      	b.n	800685a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800669c:	4b2c      	ldr	r3, [pc, #176]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0d6      	b.n	800685a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066ac:	4b28      	ldr	r3, [pc, #160]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f023 0207 	bic.w	r2, r3, #7
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4925      	ldr	r1, [pc, #148]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066be:	f7fc fea7 	bl	8003410 <HAL_GetTick>
 80066c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c4:	e00a      	b.n	80066dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c6:	f7fc fea3 	bl	8003410 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e0be      	b.n	800685a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066dc:	4b1c      	ldr	r3, [pc, #112]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d1eb      	bne.n	80066c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d010      	beq.n	800671c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	4b14      	ldr	r3, [pc, #80]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	429a      	cmp	r2, r3
 8006708:	d208      	bcs.n	800671c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f023 020f 	bic.w	r2, r3, #15
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	490e      	ldr	r1, [pc, #56]	; (8006750 <HAL_RCC_ClockConfig+0x244>)
 8006718:	4313      	orrs	r3, r2
 800671a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <HAL_RCC_ClockConfig+0x240>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d214      	bcs.n	8006754 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800672a:	4b08      	ldr	r3, [pc, #32]	; (800674c <HAL_RCC_ClockConfig+0x240>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f023 020f 	bic.w	r2, r3, #15
 8006732:	4906      	ldr	r1, [pc, #24]	; (800674c <HAL_RCC_ClockConfig+0x240>)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	4313      	orrs	r3, r2
 8006738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800673a:	4b04      	ldr	r3, [pc, #16]	; (800674c <HAL_RCC_ClockConfig+0x240>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	429a      	cmp	r2, r3
 8006746:	d005      	beq.n	8006754 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e086      	b.n	800685a <HAL_RCC_ClockConfig+0x34e>
 800674c:	52002000 	.word	0x52002000
 8006750:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d010      	beq.n	8006782 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	4b3f      	ldr	r3, [pc, #252]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800676c:	429a      	cmp	r2, r3
 800676e:	d208      	bcs.n	8006782 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006770:	4b3c      	ldr	r3, [pc, #240]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	4939      	ldr	r1, [pc, #228]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 800677e:	4313      	orrs	r3, r2
 8006780:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d010      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	4b34      	ldr	r3, [pc, #208]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800679a:	429a      	cmp	r2, r3
 800679c:	d208      	bcs.n	80067b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800679e:	4b31      	ldr	r3, [pc, #196]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	492e      	ldr	r1, [pc, #184]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d010      	beq.n	80067de <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699a      	ldr	r2, [r3, #24]
 80067c0:	4b28      	ldr	r3, [pc, #160]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d208      	bcs.n	80067de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067cc:	4b25      	ldr	r3, [pc, #148]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	4922      	ldr	r1, [pc, #136]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d010      	beq.n	800680c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69da      	ldr	r2, [r3, #28]
 80067ee:	4b1d      	ldr	r3, [pc, #116]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d208      	bcs.n	800680c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067fa:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	4917      	ldr	r1, [pc, #92]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 8006808:	4313      	orrs	r3, r2
 800680a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800680c:	f000 f844 	bl	8006898 <HAL_RCC_GetSysClockFreq>
 8006810:	4602      	mov	r2, r0
 8006812:	4b14      	ldr	r3, [pc, #80]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	0a1b      	lsrs	r3, r3, #8
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	4912      	ldr	r1, [pc, #72]	; (8006868 <HAL_RCC_ClockConfig+0x35c>)
 800681e:	5ccb      	ldrb	r3, [r1, r3]
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
 8006828:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800682a:	4b0e      	ldr	r3, [pc, #56]	; (8006864 <HAL_RCC_ClockConfig+0x358>)
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	4a0d      	ldr	r2, [pc, #52]	; (8006868 <HAL_RCC_ClockConfig+0x35c>)
 8006834:	5cd3      	ldrb	r3, [r2, r3]
 8006836:	f003 031f 	and.w	r3, r3, #31
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	fa22 f303 	lsr.w	r3, r2, r3
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <HAL_RCC_ClockConfig+0x360>)
 8006842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006844:	4a0a      	ldr	r2, [pc, #40]	; (8006870 <HAL_RCC_ClockConfig+0x364>)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800684a:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <HAL_RCC_ClockConfig+0x368>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f7fc fd94 	bl	800337c <HAL_InitTick>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006858:	7bfb      	ldrb	r3, [r7, #15]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	58024400 	.word	0x58024400
 8006868:	0800f6e8 	.word	0x0800f6e8
 800686c:	24000004 	.word	0x24000004
 8006870:	24000000 	.word	0x24000000
 8006874:	24000008 	.word	0x24000008

08006878 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <HAL_RCC_EnableCSS+0x1c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a04      	ldr	r2, [pc, #16]	; (8006894 <HAL_RCC_EnableCSS+0x1c>)
 8006882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006886:	6013      	str	r3, [r2, #0]
}
 8006888:	bf00      	nop
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	58024400 	.word	0x58024400

08006898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006898:	b480      	push	{r7}
 800689a:	b089      	sub	sp, #36	; 0x24
 800689c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800689e:	4bb3      	ldr	r3, [pc, #716]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068a6:	2b18      	cmp	r3, #24
 80068a8:	f200 8155 	bhi.w	8006b56 <HAL_RCC_GetSysClockFreq+0x2be>
 80068ac:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	08006919 	.word	0x08006919
 80068b8:	08006b57 	.word	0x08006b57
 80068bc:	08006b57 	.word	0x08006b57
 80068c0:	08006b57 	.word	0x08006b57
 80068c4:	08006b57 	.word	0x08006b57
 80068c8:	08006b57 	.word	0x08006b57
 80068cc:	08006b57 	.word	0x08006b57
 80068d0:	08006b57 	.word	0x08006b57
 80068d4:	0800693f 	.word	0x0800693f
 80068d8:	08006b57 	.word	0x08006b57
 80068dc:	08006b57 	.word	0x08006b57
 80068e0:	08006b57 	.word	0x08006b57
 80068e4:	08006b57 	.word	0x08006b57
 80068e8:	08006b57 	.word	0x08006b57
 80068ec:	08006b57 	.word	0x08006b57
 80068f0:	08006b57 	.word	0x08006b57
 80068f4:	08006945 	.word	0x08006945
 80068f8:	08006b57 	.word	0x08006b57
 80068fc:	08006b57 	.word	0x08006b57
 8006900:	08006b57 	.word	0x08006b57
 8006904:	08006b57 	.word	0x08006b57
 8006908:	08006b57 	.word	0x08006b57
 800690c:	08006b57 	.word	0x08006b57
 8006910:	08006b57 	.word	0x08006b57
 8006914:	0800694b 	.word	0x0800694b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006918:	4b94      	ldr	r3, [pc, #592]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d009      	beq.n	8006938 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006924:	4b91      	ldr	r3, [pc, #580]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	08db      	lsrs	r3, r3, #3
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	4a90      	ldr	r2, [pc, #576]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
 8006934:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006936:	e111      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006938:	4b8d      	ldr	r3, [pc, #564]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800693a:	61bb      	str	r3, [r7, #24]
    break;
 800693c:	e10e      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800693e:	4b8d      	ldr	r3, [pc, #564]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006940:	61bb      	str	r3, [r7, #24]
    break;
 8006942:	e10b      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006944:	4b8c      	ldr	r3, [pc, #560]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006946:	61bb      	str	r3, [r7, #24]
    break;
 8006948:	e108      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800694a:	4b88      	ldr	r3, [pc, #544]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006954:	4b85      	ldr	r3, [pc, #532]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800695e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006960:	4b82      	ldr	r3, [pc, #520]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800696a:	4b80      	ldr	r3, [pc, #512]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800696c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696e:	08db      	lsrs	r3, r3, #3
 8006970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	fb02 f303 	mul.w	r3, r2, r3
 800697a:	ee07 3a90 	vmov	s15, r3
 800697e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006982:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80e1 	beq.w	8006b50 <HAL_RCC_GetSysClockFreq+0x2b8>
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b02      	cmp	r3, #2
 8006992:	f000 8083 	beq.w	8006a9c <HAL_RCC_GetSysClockFreq+0x204>
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b02      	cmp	r3, #2
 800699a:	f200 80a1 	bhi.w	8006ae0 <HAL_RCC_GetSysClockFreq+0x248>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <HAL_RCC_GetSysClockFreq+0x114>
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d056      	beq.n	8006a58 <HAL_RCC_GetSysClockFreq+0x1c0>
 80069aa:	e099      	b.n	8006ae0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ac:	4b6f      	ldr	r3, [pc, #444]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d02d      	beq.n	8006a14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069b8:	4b6c      	ldr	r3, [pc, #432]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	08db      	lsrs	r3, r3, #3
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	4a6b      	ldr	r2, [pc, #428]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069c4:	fa22 f303 	lsr.w	r3, r2, r3
 80069c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	ee07 3a90 	vmov	s15, r3
 80069d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e2:	4b62      	ldr	r3, [pc, #392]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006b7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80069fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006a12:	e087      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006b80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a26:	4b51      	ldr	r3, [pc, #324]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006b7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a56:	e065      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a62:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006b84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a6a:	4b40      	ldr	r3, [pc, #256]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006b7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a9a:	e043      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006b88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aae:	4b2f      	ldr	r3, [pc, #188]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ac2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ade:	e021      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006b84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af2:	4b1e      	ldr	r3, [pc, #120]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006b7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006b24:	4b11      	ldr	r3, [pc, #68]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	0a5b      	lsrs	r3, r3, #9
 8006b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b2e:	3301      	adds	r3, #1
 8006b30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	ee07 3a90 	vmov	s15, r3
 8006b38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b48:	ee17 3a90 	vmov	r3, s15
 8006b4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006b4e:	e005      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61bb      	str	r3, [r7, #24]
    break;
 8006b54:	e002      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006b56:	4b07      	ldr	r3, [pc, #28]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b58:	61bb      	str	r3, [r7, #24]
    break;
 8006b5a:	bf00      	nop
  }

  return sysclockfreq;
 8006b5c:	69bb      	ldr	r3, [r7, #24]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3724      	adds	r7, #36	; 0x24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	58024400 	.word	0x58024400
 8006b70:	03d09000 	.word	0x03d09000
 8006b74:	003d0900 	.word	0x003d0900
 8006b78:	017d7840 	.word	0x017d7840
 8006b7c:	46000000 	.word	0x46000000
 8006b80:	4c742400 	.word	0x4c742400
 8006b84:	4a742400 	.word	0x4a742400
 8006b88:	4bbebc20 	.word	0x4bbebc20

08006b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b92:	f7ff fe81 	bl	8006898 <HAL_RCC_GetSysClockFreq>
 8006b96:	4602      	mov	r2, r0
 8006b98:	4b10      	ldr	r3, [pc, #64]	; (8006bdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	0a1b      	lsrs	r3, r3, #8
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	490f      	ldr	r1, [pc, #60]	; (8006be0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ba4:	5ccb      	ldrb	r3, [r1, r3]
 8006ba6:	f003 031f 	and.w	r3, r3, #31
 8006baa:	fa22 f303 	lsr.w	r3, r2, r3
 8006bae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bb0:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006bba:	5cd3      	ldrb	r3, [r2, r3]
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc6:	4a07      	ldr	r2, [pc, #28]	; (8006be4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bca:	4a07      	ldr	r2, [pc, #28]	; (8006be8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006bd0:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	58024400 	.word	0x58024400
 8006be0:	0800f6e8 	.word	0x0800f6e8
 8006be4:	24000004 	.word	0x24000004
 8006be8:	24000000 	.word	0x24000000

08006bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bf0:	f7ff ffcc 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	091b      	lsrs	r3, r3, #4
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	4904      	ldr	r1, [pc, #16]	; (8006c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c02:	5ccb      	ldrb	r3, [r1, r3]
 8006c04:	f003 031f 	and.w	r3, r3, #31
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	58024400 	.word	0x58024400
 8006c14:	0800f6e8 	.word	0x0800f6e8

08006c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c1c:	f7ff ffb6 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006c20:	4602      	mov	r2, r0
 8006c22:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	0a1b      	lsrs	r3, r3, #8
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	4904      	ldr	r1, [pc, #16]	; (8006c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c2e:	5ccb      	ldrb	r3, [r1, r3]
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	58024400 	.word	0x58024400
 8006c40:	0800f6e8 	.word	0x0800f6e8

08006c44 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006c48:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c54:	d105      	bne.n	8006c62 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8006c56:	f000 f809 	bl	8006c6c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006c5a:	4b03      	ldr	r3, [pc, #12]	; (8006c68 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c60:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8006c62:	bf00      	nop
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	58024400 	.word	0x58024400

08006c6c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c84:	2300      	movs	r3, #0
 8006c86:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c88:	2300      	movs	r3, #0
 8006c8a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d03f      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ca0:	d02a      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006ca2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ca6:	d824      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cac:	d018      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006cae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cb2:	d81e      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cbc:	d007      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006cbe:	e018      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc0:	4bab      	ldr	r3, [pc, #684]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	4aaa      	ldr	r2, [pc, #680]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ccc:	e015      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	2102      	movs	r1, #2
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 feff 	bl	8008ad8 <RCCEx_PLL2_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cde:	e00c      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3324      	adds	r3, #36	; 0x24
 8006ce4:	2102      	movs	r1, #2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 ffa8 	bl	8008c3c <RCCEx_PLL3_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cf0:	e003      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf6:	e000      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d109      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d00:	4b9b      	ldr	r3, [pc, #620]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d0c:	4998      	ldr	r1, [pc, #608]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	650b      	str	r3, [r1, #80]	; 0x50
 8006d12:	e001      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d03d      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d826      	bhi.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d49 	.word	0x08006d49
 8006d38:	08006d57 	.word	0x08006d57
 8006d3c:	08006d69 	.word	0x08006d69
 8006d40:	08006d81 	.word	0x08006d81
 8006d44:	08006d81 	.word	0x08006d81
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d48:	4b89      	ldr	r3, [pc, #548]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	4a88      	ldr	r2, [pc, #544]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d54:	e015      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f001 febb 	bl	8008ad8 <RCCEx_PLL2_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d66:	e00c      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3324      	adds	r3, #36	; 0x24
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 ff64 	bl	8008c3c <RCCEx_PLL3_Config>
 8006d74:	4603      	mov	r3, r0
 8006d76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d78:	e003      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d7e:	e000      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d82:	7dfb      	ldrb	r3, [r7, #23]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d109      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d88:	4b79      	ldr	r3, [pc, #484]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8c:	f023 0207 	bic.w	r2, r3, #7
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d94:	4976      	ldr	r1, [pc, #472]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	650b      	str	r3, [r1, #80]	; 0x50
 8006d9a:	e001      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d051      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006db2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006db6:	d036      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006db8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006dbc:	d830      	bhi.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006dbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dc2:	d032      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006dc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dc8:	d82a      	bhi.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006dca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dce:	d02e      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006dd0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dd4:	d824      	bhi.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dda:	d018      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006de0:	d81e      	bhi.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x172>
 8006de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dea:	d007      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006dec:	e018      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dee:	4b60      	ldr	r3, [pc, #384]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	4a5f      	ldr	r2, [pc, #380]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dfa:	e019      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	2100      	movs	r1, #0
 8006e02:	4618      	mov	r0, r3
 8006e04:	f001 fe68 	bl	8008ad8 <RCCEx_PLL2_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e0c:	e010      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3324      	adds	r3, #36	; 0x24
 8006e12:	2100      	movs	r1, #0
 8006e14:	4618      	mov	r0, r3
 8006e16:	f001 ff11 	bl	8008c3c <RCCEx_PLL3_Config>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e1e:	e007      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	75fb      	strb	r3, [r7, #23]
      break;
 8006e24:	e004      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006e26:	bf00      	nop
 8006e28:	e002      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006e2a:	bf00      	nop
 8006e2c:	e000      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e36:	4b4e      	ldr	r3, [pc, #312]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e44:	494a      	ldr	r1, [pc, #296]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	658b      	str	r3, [r1, #88]	; 0x58
 8006e4a:	e001      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d051      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e62:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006e66:	d036      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006e68:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006e6c:	d830      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006e6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e72:	d032      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e78:	d82a      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006e7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e7e:	d02e      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006e80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e84:	d824      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006e86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e8a:	d018      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e90:	d81e      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006e96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e9a:	d007      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006e9c:	e018      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e9e:	4b34      	ldr	r3, [pc, #208]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	4a33      	ldr	r2, [pc, #204]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eaa:	e019      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 fe10 	bl	8008ad8 <RCCEx_PLL2_Config>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ebc:	e010      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3324      	adds	r3, #36	; 0x24
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 feb9 	bl	8008c3c <RCCEx_PLL3_Config>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ece:	e007      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed4:	e004      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006ed6:	bf00      	nop
 8006ed8:	e002      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006eda:	bf00      	nop
 8006edc:	e000      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ee6:	4b22      	ldr	r3, [pc, #136]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ef4:	491e      	ldr	r1, [pc, #120]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	658b      	str	r3, [r1, #88]	; 0x58
 8006efa:	e001      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d035      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f10:	2b30      	cmp	r3, #48	; 0x30
 8006f12:	d01c      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006f14:	2b30      	cmp	r3, #48	; 0x30
 8006f16:	d817      	bhi.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d00c      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d813      	bhi.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d016      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d10f      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f28:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	4a10      	ldr	r2, [pc, #64]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006f34:	e00e      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	2102      	movs	r1, #2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 fdcb 	bl	8008ad8 <RCCEx_PLL2_Config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006f46:	e005      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f4c:	e002      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006f4e:	bf00      	nop
 8006f50:	e000      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10c      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f66:	4902      	ldr	r1, [pc, #8]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f6c:	e004      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006f6e:	bf00      	nop
 8006f70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d047      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f8c:	d030      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f92:	d82a      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006f94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f98:	d02c      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006f9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f9e:	d824      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fa4:	d018      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006faa:	d81e      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb4:	d007      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006fb6:	e018      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb8:	4bac      	ldr	r3, [pc, #688]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	4aab      	ldr	r2, [pc, #684]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fc4:	e017      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 fd83 	bl	8008ad8 <RCCEx_PLL2_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fd6:	e00e      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3324      	adds	r3, #36	; 0x24
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 fe2c 	bl	8008c3c <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fe8:	e005      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	75fb      	strb	r3, [r7, #23]
      break;
 8006fee:	e002      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006ff0:	bf00      	nop
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d109      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006ffc:	4b9b      	ldr	r3, [pc, #620]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007000:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007008:	4998      	ldr	r1, [pc, #608]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800700a:	4313      	orrs	r3, r2
 800700c:	650b      	str	r3, [r1, #80]	; 0x50
 800700e:	e001      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d049      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007028:	d02e      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800702a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800702e:	d828      	bhi.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007030:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007034:	d02a      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007036:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800703a:	d822      	bhi.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800703c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007040:	d026      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007042:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007046:	d81c      	bhi.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800704c:	d010      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800704e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007052:	d816      	bhi.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01d      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705c:	d111      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3304      	adds	r3, #4
 8007062:	2101      	movs	r1, #1
 8007064:	4618      	mov	r0, r3
 8007066:	f001 fd37 	bl	8008ad8 <RCCEx_PLL2_Config>
 800706a:	4603      	mov	r3, r0
 800706c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800706e:	e012      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3324      	adds	r3, #36	; 0x24
 8007074:	2101      	movs	r1, #1
 8007076:	4618      	mov	r0, r3
 8007078:	f001 fde0 	bl	8008c3c <RCCEx_PLL3_Config>
 800707c:	4603      	mov	r3, r0
 800707e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007080:	e009      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	75fb      	strb	r3, [r7, #23]
      break;
 8007086:	e006      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007088:	bf00      	nop
 800708a:	e004      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800708c:	bf00      	nop
 800708e:	e002      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007090:	bf00      	nop
 8007092:	e000      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d109      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800709c:	4b73      	ldr	r3, [pc, #460]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800709e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a8:	4970      	ldr	r1, [pc, #448]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	650b      	str	r3, [r1, #80]	; 0x50
 80070ae:	e001      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
 80070b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d04b      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070ca:	d02e      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80070cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070d0:	d828      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80070d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d6:	d02a      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80070d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070dc:	d822      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80070de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070e2:	d026      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80070e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070e8:	d81c      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80070ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ee:	d010      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80070f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f4:	d816      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d01d      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80070fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070fe:	d111      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3304      	adds	r3, #4
 8007104:	2101      	movs	r1, #1
 8007106:	4618      	mov	r0, r3
 8007108:	f001 fce6 	bl	8008ad8 <RCCEx_PLL2_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007110:	e012      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3324      	adds	r3, #36	; 0x24
 8007116:	2101      	movs	r1, #1
 8007118:	4618      	mov	r0, r3
 800711a:	f001 fd8f 	bl	8008c3c <RCCEx_PLL3_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007122:	e009      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	75fb      	strb	r3, [r7, #23]
      break;
 8007128:	e006      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800712a:	bf00      	nop
 800712c:	e004      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800712e:	bf00      	nop
 8007130:	e002      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007132:	bf00      	nop
 8007134:	e000      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007138:	7dfb      	ldrb	r3, [r7, #23]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800713e:	4b4b      	ldr	r3, [pc, #300]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007142:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800714c:	4947      	ldr	r1, [pc, #284]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800714e:	4313      	orrs	r3, r2
 8007150:	658b      	str	r3, [r1, #88]	; 0x58
 8007152:	e001      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d02f      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800716c:	d00e      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800716e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007172:	d814      	bhi.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d015      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800717c:	d10f      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800717e:	4b3b      	ldr	r3, [pc, #236]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	4a3a      	ldr	r2, [pc, #232]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800718a:	e00c      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
 8007190:	2101      	movs	r1, #1
 8007192:	4618      	mov	r0, r3
 8007194:	f001 fca0 	bl	8008ad8 <RCCEx_PLL2_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800719c:	e003      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	75fb      	strb	r3, [r7, #23]
      break;
 80071a2:	e000      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80071a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d109      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071ac:	4b2f      	ldr	r3, [pc, #188]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80071ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071b8:	492c      	ldr	r1, [pc, #176]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	650b      	str	r3, [r1, #80]	; 0x50
 80071be:	e001      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
 80071c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d032      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d81b      	bhi.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80071d8:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80071da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071de:	bf00      	nop
 80071e0:	08007217 	.word	0x08007217
 80071e4:	080071f1 	.word	0x080071f1
 80071e8:	080071ff 	.word	0x080071ff
 80071ec:	08007217 	.word	0x08007217
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f0:	4b1e      	ldr	r3, [pc, #120]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	4a1d      	ldr	r2, [pc, #116]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80071f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071fc:	e00c      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3304      	adds	r3, #4
 8007202:	2102      	movs	r1, #2
 8007204:	4618      	mov	r0, r3
 8007206:	f001 fc67 	bl	8008ad8 <RCCEx_PLL2_Config>
 800720a:	4603      	mov	r3, r0
 800720c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800720e:	e003      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	75fb      	strb	r3, [r7, #23]
      break;
 8007214:	e000      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007222:	f023 0203 	bic.w	r2, r3, #3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722a:	4910      	ldr	r1, [pc, #64]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800722c:	4313      	orrs	r3, r2
 800722e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007230:	e001      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 808a 	beq.w	8007358 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a09      	ldr	r2, [pc, #36]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800724a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007250:	f7fc f8de 	bl	8003410 <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007256:	e00d      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007258:	f7fc f8da 	bl	8003410 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b64      	cmp	r3, #100	; 0x64
 8007264:	d906      	bls.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	75fb      	strb	r3, [r7, #23]
        break;
 800726a:	e009      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800726c:	58024400 	.word	0x58024400
 8007270:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007274:	4bb9      	ldr	r3, [pc, #740]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0eb      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d166      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007286:	4bb6      	ldr	r3, [pc, #728]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007288:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007290:	4053      	eors	r3, r2
 8007292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007296:	2b00      	cmp	r3, #0
 8007298:	d013      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800729a:	4bb1      	ldr	r3, [pc, #708]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072a4:	4bae      	ldr	r3, [pc, #696]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a8:	4aad      	ldr	r2, [pc, #692]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072b0:	4bab      	ldr	r3, [pc, #684]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b4:	4aaa      	ldr	r2, [pc, #680]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072bc:	4aa8      	ldr	r2, [pc, #672]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072cc:	d115      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ce:	f7fc f89f 	bl	8003410 <HAL_GetTick>
 80072d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072d4:	e00b      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d6:	f7fc f89b 	bl	8003410 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d902      	bls.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	75fb      	strb	r3, [r7, #23]
            break;
 80072ec:	e005      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072ee:	4b9c      	ldr	r3, [pc, #624]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0ed      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d126      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800730e:	d10d      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007310:	4b93      	ldr	r3, [pc, #588]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800731e:	0919      	lsrs	r1, r3, #4
 8007320:	4b90      	ldr	r3, [pc, #576]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007322:	400b      	ands	r3, r1
 8007324:	498e      	ldr	r1, [pc, #568]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007326:	4313      	orrs	r3, r2
 8007328:	610b      	str	r3, [r1, #16]
 800732a:	e005      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800732c:	4b8c      	ldr	r3, [pc, #560]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	4a8b      	ldr	r2, [pc, #556]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007332:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007336:	6113      	str	r3, [r2, #16]
 8007338:	4b89      	ldr	r3, [pc, #548]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800733a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007346:	4986      	ldr	r1, [pc, #536]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007348:	4313      	orrs	r3, r2
 800734a:	670b      	str	r3, [r1, #112]	; 0x70
 800734c:	e004      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
 8007350:	75bb      	strb	r3, [r7, #22]
 8007352:	e001      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d07e      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007368:	2b28      	cmp	r3, #40	; 0x28
 800736a:	d867      	bhi.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800736c:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	08007443 	.word	0x08007443
 8007378:	0800743d 	.word	0x0800743d
 800737c:	0800743d 	.word	0x0800743d
 8007380:	0800743d 	.word	0x0800743d
 8007384:	0800743d 	.word	0x0800743d
 8007388:	0800743d 	.word	0x0800743d
 800738c:	0800743d 	.word	0x0800743d
 8007390:	0800743d 	.word	0x0800743d
 8007394:	08007419 	.word	0x08007419
 8007398:	0800743d 	.word	0x0800743d
 800739c:	0800743d 	.word	0x0800743d
 80073a0:	0800743d 	.word	0x0800743d
 80073a4:	0800743d 	.word	0x0800743d
 80073a8:	0800743d 	.word	0x0800743d
 80073ac:	0800743d 	.word	0x0800743d
 80073b0:	0800743d 	.word	0x0800743d
 80073b4:	0800742b 	.word	0x0800742b
 80073b8:	0800743d 	.word	0x0800743d
 80073bc:	0800743d 	.word	0x0800743d
 80073c0:	0800743d 	.word	0x0800743d
 80073c4:	0800743d 	.word	0x0800743d
 80073c8:	0800743d 	.word	0x0800743d
 80073cc:	0800743d 	.word	0x0800743d
 80073d0:	0800743d 	.word	0x0800743d
 80073d4:	08007443 	.word	0x08007443
 80073d8:	0800743d 	.word	0x0800743d
 80073dc:	0800743d 	.word	0x0800743d
 80073e0:	0800743d 	.word	0x0800743d
 80073e4:	0800743d 	.word	0x0800743d
 80073e8:	0800743d 	.word	0x0800743d
 80073ec:	0800743d 	.word	0x0800743d
 80073f0:	0800743d 	.word	0x0800743d
 80073f4:	08007443 	.word	0x08007443
 80073f8:	0800743d 	.word	0x0800743d
 80073fc:	0800743d 	.word	0x0800743d
 8007400:	0800743d 	.word	0x0800743d
 8007404:	0800743d 	.word	0x0800743d
 8007408:	0800743d 	.word	0x0800743d
 800740c:	0800743d 	.word	0x0800743d
 8007410:	0800743d 	.word	0x0800743d
 8007414:	08007443 	.word	0x08007443
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3304      	adds	r3, #4
 800741c:	2101      	movs	r1, #1
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fb5a 	bl	8008ad8 <RCCEx_PLL2_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007428:	e00c      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3324      	adds	r3, #36	; 0x24
 800742e:	2101      	movs	r1, #1
 8007430:	4618      	mov	r0, r3
 8007432:	f001 fc03 	bl	8008c3c <RCCEx_PLL3_Config>
 8007436:	4603      	mov	r3, r0
 8007438:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800743a:	e003      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	75fb      	strb	r3, [r7, #23]
      break;
 8007440:	e000      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d109      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800744a:	4b45      	ldr	r3, [pc, #276]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800744c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007456:	4942      	ldr	r1, [pc, #264]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007458:	4313      	orrs	r3, r2
 800745a:	654b      	str	r3, [r1, #84]	; 0x54
 800745c:	e001      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d037      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007472:	2b05      	cmp	r3, #5
 8007474:	d820      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	080074bf 	.word	0x080074bf
 8007480:	08007495 	.word	0x08007495
 8007484:	080074a7 	.word	0x080074a7
 8007488:	080074bf 	.word	0x080074bf
 800748c:	080074bf 	.word	0x080074bf
 8007490:	080074bf 	.word	0x080074bf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3304      	adds	r3, #4
 8007498:	2101      	movs	r1, #1
 800749a:	4618      	mov	r0, r3
 800749c:	f001 fb1c 	bl	8008ad8 <RCCEx_PLL2_Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074a4:	e00c      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3324      	adds	r3, #36	; 0x24
 80074aa:	2101      	movs	r1, #1
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 fbc5 	bl	8008c3c <RCCEx_PLL3_Config>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074b6:	e003      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	75fb      	strb	r3, [r7, #23]
      break;
 80074bc:	e000      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80074be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d109      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80074c6:	4b26      	ldr	r3, [pc, #152]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80074c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ca:	f023 0207 	bic.w	r2, r3, #7
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d2:	4923      	ldr	r1, [pc, #140]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	654b      	str	r3, [r1, #84]	; 0x54
 80074d8:	e001      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d040      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f0:	2b05      	cmp	r3, #5
 80074f2:	d821      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80074f4:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	0800753f 	.word	0x0800753f
 8007500:	08007515 	.word	0x08007515
 8007504:	08007527 	.word	0x08007527
 8007508:	0800753f 	.word	0x0800753f
 800750c:	0800753f 	.word	0x0800753f
 8007510:	0800753f 	.word	0x0800753f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3304      	adds	r3, #4
 8007518:	2101      	movs	r1, #1
 800751a:	4618      	mov	r0, r3
 800751c:	f001 fadc 	bl	8008ad8 <RCCEx_PLL2_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007524:	e00c      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3324      	adds	r3, #36	; 0x24
 800752a:	2101      	movs	r1, #1
 800752c:	4618      	mov	r0, r3
 800752e:	f001 fb85 	bl	8008c3c <RCCEx_PLL3_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007536:	e003      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	75fb      	strb	r3, [r7, #23]
      break;
 800753c:	e000      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800753e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007540:	7dfb      	ldrb	r3, [r7, #23]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d110      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007546:	4b06      	ldr	r3, [pc, #24]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754a:	f023 0207 	bic.w	r2, r3, #7
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007554:	4902      	ldr	r1, [pc, #8]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007556:	4313      	orrs	r3, r2
 8007558:	658b      	str	r3, [r1, #88]	; 0x58
 800755a:	e007      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800755c:	58024800 	.word	0x58024800
 8007560:	58024400 	.word	0x58024400
 8007564:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d04b      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007582:	d02e      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007588:	d828      	bhi.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800758a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758e:	d02a      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007594:	d822      	bhi.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007596:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800759a:	d026      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800759c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075a0:	d81c      	bhi.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 80075a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075a6:	d010      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80075a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ac:	d816      	bhi.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d01d      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x972>
 80075b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075b6:	d111      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	2100      	movs	r1, #0
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 fa8a 	bl	8008ad8 <RCCEx_PLL2_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075c8:	e012      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3324      	adds	r3, #36	; 0x24
 80075ce:	2102      	movs	r1, #2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f001 fb33 	bl	8008c3c <RCCEx_PLL3_Config>
 80075d6:	4603      	mov	r3, r0
 80075d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075da:	e009      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	75fb      	strb	r3, [r7, #23]
      break;
 80075e0:	e006      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80075e2:	bf00      	nop
 80075e4:	e004      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80075e6:	bf00      	nop
 80075e8:	e002      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80075ea:	bf00      	nop
 80075ec:	e000      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80075ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075f6:	4bb2      	ldr	r3, [pc, #712]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007604:	49ae      	ldr	r1, [pc, #696]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007606:	4313      	orrs	r3, r2
 8007608:	654b      	str	r3, [r1, #84]	; 0x54
 800760a:	e001      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	d04b      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007622:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007626:	d02e      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007628:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800762c:	d828      	bhi.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800762e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007632:	d02a      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007638:	d822      	bhi.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800763a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800763e:	d026      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007644:	d81c      	bhi.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800764a:	d010      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800764c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007650:	d816      	bhi.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01d      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800765a:	d111      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3304      	adds	r3, #4
 8007660:	2100      	movs	r1, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f001 fa38 	bl	8008ad8 <RCCEx_PLL2_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800766c:	e012      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3324      	adds	r3, #36	; 0x24
 8007672:	2102      	movs	r1, #2
 8007674:	4618      	mov	r0, r3
 8007676:	f001 fae1 	bl	8008c3c <RCCEx_PLL3_Config>
 800767a:	4603      	mov	r3, r0
 800767c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800767e:	e009      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	75fb      	strb	r3, [r7, #23]
      break;
 8007684:	e006      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007686:	bf00      	nop
 8007688:	e004      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800768a:	bf00      	nop
 800768c:	e002      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800768e:	bf00      	nop
 8007690:	e000      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007694:	7dfb      	ldrb	r3, [r7, #23]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800769a:	4b89      	ldr	r3, [pc, #548]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800769c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800769e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076a8:	4985      	ldr	r1, [pc, #532]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	658b      	str	r3, [r1, #88]	; 0x58
 80076ae:	e001      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d04b      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076ca:	d02e      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80076cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076d0:	d828      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80076d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d6:	d02a      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80076d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076dc:	d822      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80076de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076e2:	d026      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80076e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076e8:	d81c      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80076ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ee:	d010      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80076f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076f4:	d816      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01d      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80076fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076fe:	d111      	bne.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3304      	adds	r3, #4
 8007704:	2100      	movs	r1, #0
 8007706:	4618      	mov	r0, r3
 8007708:	f001 f9e6 	bl	8008ad8 <RCCEx_PLL2_Config>
 800770c:	4603      	mov	r3, r0
 800770e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007710:	e012      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3324      	adds	r3, #36	; 0x24
 8007716:	2102      	movs	r1, #2
 8007718:	4618      	mov	r0, r3
 800771a:	f001 fa8f 	bl	8008c3c <RCCEx_PLL3_Config>
 800771e:	4603      	mov	r3, r0
 8007720:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007722:	e009      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	75fb      	strb	r3, [r7, #23]
      break;
 8007728:	e006      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800772a:	bf00      	nop
 800772c:	e004      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800772e:	bf00      	nop
 8007730:	e002      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007732:	bf00      	nop
 8007734:	e000      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800773e:	4b60      	ldr	r3, [pc, #384]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800774c:	495c      	ldr	r1, [pc, #368]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800774e:	4313      	orrs	r3, r2
 8007750:	658b      	str	r3, [r1, #88]	; 0x58
 8007752:	e001      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d018      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776c:	d10a      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3324      	adds	r3, #36	; 0x24
 8007772:	2102      	movs	r1, #2
 8007774:	4618      	mov	r0, r3
 8007776:	f001 fa61 	bl	8008c3c <RCCEx_PLL3_Config>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007784:	4b4e      	ldr	r3, [pc, #312]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007788:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007790:	494b      	ldr	r1, [pc, #300]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007792:	4313      	orrs	r3, r2
 8007794:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0310 	and.w	r3, r3, #16
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d01a      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ac:	d10a      	bne.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3324      	adds	r3, #36	; 0x24
 80077b2:	2102      	movs	r1, #2
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 fa41 	bl	8008c3c <RCCEx_PLL3_Config>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077c4:	4b3e      	ldr	r3, [pc, #248]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80077c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d2:	493b      	ldr	r1, [pc, #236]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d034      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ee:	d01d      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80077f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077f4:	d817      	bhi.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80077fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077fe:	d009      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007800:	e011      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3304      	adds	r3, #4
 8007806:	2100      	movs	r1, #0
 8007808:	4618      	mov	r0, r3
 800780a:	f001 f965 	bl	8008ad8 <RCCEx_PLL2_Config>
 800780e:	4603      	mov	r3, r0
 8007810:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007812:	e00c      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3324      	adds	r3, #36	; 0x24
 8007818:	2102      	movs	r1, #2
 800781a:	4618      	mov	r0, r3
 800781c:	f001 fa0e 	bl	8008c3c <RCCEx_PLL3_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007824:	e003      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	75fb      	strb	r3, [r7, #23]
      break;
 800782a:	e000      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800782c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007834:	4b22      	ldr	r3, [pc, #136]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007842:	491f      	ldr	r1, [pc, #124]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007844:	4313      	orrs	r3, r2
 8007846:	658b      	str	r3, [r1, #88]	; 0x58
 8007848:	e001      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d036      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007860:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007864:	d01c      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007866:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800786a:	d816      	bhi.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800786c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007870:	d003      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007876:	d007      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007878:	e00f      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800787a:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	4a10      	ldr	r2, [pc, #64]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007884:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007886:	e00c      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3324      	adds	r3, #36	; 0x24
 800788c:	2101      	movs	r1, #1
 800788e:	4618      	mov	r0, r3
 8007890:	f001 f9d4 	bl	8008c3c <RCCEx_PLL3_Config>
 8007894:	4603      	mov	r3, r0
 8007896:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007898:	e003      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	75fb      	strb	r3, [r7, #23]
      break;
 800789e:	e000      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80078a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10d      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078a8:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b6:	4902      	ldr	r1, [pc, #8]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	654b      	str	r3, [r1, #84]	; 0x54
 80078bc:	e004      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80078be:	bf00      	nop
 80078c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d029      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80078dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e0:	d007      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80078e2:	e00f      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e4:	4b61      	ldr	r3, [pc, #388]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	4a60      	ldr	r2, [pc, #384]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078f0:	e00b      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3304      	adds	r3, #4
 80078f6:	2102      	movs	r1, #2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f001 f8ed 	bl	8008ad8 <RCCEx_PLL2_Config>
 80078fe:	4603      	mov	r3, r0
 8007900:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007902:	e002      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
      break;
 8007908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d109      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007910:	4b56      	ldr	r3, [pc, #344]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791c:	4953      	ldr	r1, [pc, #332]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800791e:	4313      	orrs	r3, r2
 8007920:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007922:	e001      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3324      	adds	r3, #36	; 0x24
 8007938:	2102      	movs	r1, #2
 800793a:	4618      	mov	r0, r3
 800793c:	f001 f97e 	bl	8008c3c <RCCEx_PLL3_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d030      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800795a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800795e:	d017      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007960:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007964:	d811      	bhi.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796a:	d013      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800796c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007970:	d80b      	bhi.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d010      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8007976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797a:	d106      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800797c:	4b3b      	ldr	r3, [pc, #236]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	4a3a      	ldr	r2, [pc, #232]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007986:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007988:	e007      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	75fb      	strb	r3, [r7, #23]
      break;
 800798e:	e004      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007990:	bf00      	nop
 8007992:	e002      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007994:	bf00      	nop
 8007996:	e000      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800799a:	7dfb      	ldrb	r3, [r7, #23]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d109      	bne.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079a0:	4b32      	ldr	r3, [pc, #200]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ac:	492f      	ldr	r1, [pc, #188]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	654b      	str	r3, [r1, #84]	; 0x54
 80079b2:	e001      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d008      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079c4:	4b29      	ldr	r3, [pc, #164]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d0:	4926      	ldr	r1, [pc, #152]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d008      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079e2:	4b22      	ldr	r3, [pc, #136]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ee:	491f      	ldr	r1, [pc, #124]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00d      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	4a19      	ldr	r2, [pc, #100]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007a06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a0a:	6113      	str	r3, [r2, #16]
 8007a0c:	4b17      	ldr	r3, [pc, #92]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007a0e:	691a      	ldr	r2, [r3, #16]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a16:	4915      	ldr	r1, [pc, #84]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	da08      	bge.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a24:	4b11      	ldr	r3, [pc, #68]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a30:	490e      	ldr	r1, [pc, #56]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a42:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a50:	4906      	ldr	r1, [pc, #24]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007a56:	7dbb      	ldrb	r3, [r7, #22]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e000      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	58024400 	.word	0x58024400

08007a70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b090      	sub	sp, #64	; 0x40
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7e:	f040 8089 	bne.w	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007a82:	4b95      	ldr	r3, [pc, #596]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d87d      	bhi.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8007a92:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007aad 	.word	0x08007aad
 8007a9c:	08007ad1 	.word	0x08007ad1
 8007aa0:	08007af5 	.word	0x08007af5
 8007aa4:	08007b89 	.word	0x08007b89
 8007aa8:	08007b19 	.word	0x08007b19

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007aac:	4b8a      	ldr	r3, [pc, #552]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ab8:	d107      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 feb8 	bl	8008834 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ac8:	e3ed      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ace:	e3ea      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ad0:	4b81      	ldr	r3, [pc, #516]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007adc:	d107      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ade:	f107 0318 	add.w	r3, r7, #24
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fbfe 	bl	80082e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007aec:	e3db      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007af2:	e3d8      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007af4:	4b78      	ldr	r3, [pc, #480]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b00:	d107      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b02:	f107 030c 	add.w	r3, r7, #12
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 fd40 	bl	800858c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b10:	e3c9      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b16:	e3c6      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b18:	4b6f      	ldr	r3, [pc, #444]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b22:	4b6d      	ldr	r3, [pc, #436]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0304 	and.w	r3, r3, #4
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d10c      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d109      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b34:	4b68      	ldr	r3, [pc, #416]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	08db      	lsrs	r3, r3, #3
 8007b3a:	f003 0303 	and.w	r3, r3, #3
 8007b3e:	4a67      	ldr	r2, [pc, #412]	; (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007b40:	fa22 f303 	lsr.w	r3, r2, r3
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b46:	e01e      	b.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b48:	4b63      	ldr	r3, [pc, #396]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b54:	d106      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b5c:	d102      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b5e:	4b60      	ldr	r3, [pc, #384]	; (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b62:	e010      	b.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b64:	4b5c      	ldr	r3, [pc, #368]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b70:	d106      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b78:	d102      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b7a:	4b5a      	ldr	r3, [pc, #360]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b7e:	e002      	b.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b84:	e38f      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007b86:	e38e      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b88:	4b57      	ldr	r3, [pc, #348]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b8c:	e38b      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b92:	e388      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b9a:	f040 80a7 	bne.w	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007b9e:	4b4e      	ldr	r3, [pc, #312]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007ba6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bae:	d054      	beq.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bb6:	f200 808b 	bhi.w	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bc0:	f000 8083 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bca:	f200 8081 	bhi.w	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd4:	d02f      	beq.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bdc:	d878      	bhi.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bea:	d012      	beq.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8007bec:	e070      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bee:	4b3a      	ldr	r3, [pc, #232]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bfa:	d107      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fe17 	bl	8008834 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c0a:	e34c      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c10:	e349      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c12:	4b31      	ldr	r3, [pc, #196]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c20:	f107 0318 	add.w	r3, r7, #24
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fb5d 	bl	80082e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c2e:	e33a      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c34:	e337      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c36:	4b28      	ldr	r3, [pc, #160]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c42:	d107      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c44:	f107 030c 	add.w	r3, r7, #12
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fc9f 	bl	800858c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c52:	e328      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c58:	e325      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c5a:	4b1f      	ldr	r3, [pc, #124]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c62:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c64:	4b1c      	ldr	r3, [pc, #112]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d10c      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8007c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c76:	4b18      	ldr	r3, [pc, #96]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	08db      	lsrs	r3, r3, #3
 8007c7c:	f003 0303 	and.w	r3, r3, #3
 8007c80:	4a16      	ldr	r2, [pc, #88]	; (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007c82:	fa22 f303 	lsr.w	r3, r2, r3
 8007c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c88:	e01e      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c8a:	4b13      	ldr	r3, [pc, #76]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c96:	d106      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c9e:	d102      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ca0:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca4:	e010      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ca6:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cb2:	d106      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cba:	d102      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007cbc:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cc0:	e002      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007cc6:	e2ee      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007cc8:	e2ed      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cca:	4b07      	ldr	r3, [pc, #28]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cce:	e2ea      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cd4:	e2e7      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007cd6:	bf00      	nop
 8007cd8:	58024400 	.word	0x58024400
 8007cdc:	03d09000 	.word	0x03d09000
 8007ce0:	003d0900 	.word	0x003d0900
 8007ce4:	017d7840 	.word	0x017d7840
 8007ce8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cf2:	f040 809c 	bne.w	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007cf6:	4b9e      	ldr	r3, [pc, #632]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007cfe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d06:	d054      	beq.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d0e:	f200 808b 	bhi.w	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d18:	f000 8083 	beq.w	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d22:	f200 8081 	bhi.w	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d2c:	d02f      	beq.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d34:	d878      	bhi.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d42:	d012      	beq.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007d44:	e070      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d46:	4b8a      	ldr	r3, [pc, #552]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d52:	d107      	bne.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 fd6b 	bl	8008834 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d62:	e2a0      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d68:	e29d      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d6a:	4b81      	ldr	r3, [pc, #516]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d76:	d107      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d78:	f107 0318 	add.w	r3, r7, #24
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fab1 	bl	80082e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007d86:	e28e      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d8c:	e28b      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d8e:	4b78      	ldr	r3, [pc, #480]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d9a:	d107      	bne.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d9c:	f107 030c 	add.w	r3, r7, #12
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fbf3 	bl	800858c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007daa:	e27c      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db0:	e279      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007db2:	4b6f      	ldr	r3, [pc, #444]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dbc:	4b6c      	ldr	r3, [pc, #432]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d10c      	bne.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d109      	bne.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dce:	4b68      	ldr	r3, [pc, #416]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	08db      	lsrs	r3, r3, #3
 8007dd4:	f003 0303 	and.w	r3, r3, #3
 8007dd8:	4a66      	ldr	r2, [pc, #408]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007dda:	fa22 f303 	lsr.w	r3, r2, r3
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de0:	e01e      	b.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007de2:	4b63      	ldr	r3, [pc, #396]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dee:	d106      	bne.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007df6:	d102      	bne.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007df8:	4b5f      	ldr	r3, [pc, #380]	; (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dfc:	e010      	b.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dfe:	4b5c      	ldr	r3, [pc, #368]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e0a:	d106      	bne.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e12:	d102      	bne.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007e14:	4b59      	ldr	r3, [pc, #356]	; (8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e18:	e002      	b.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007e1e:	e242      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007e20:	e241      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e22:	4b57      	ldr	r3, [pc, #348]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e26:	e23e      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e2c:	e23b      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e34:	f040 80a6 	bne.w	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007e38:	4b4d      	ldr	r3, [pc, #308]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007e40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e48:	d054      	beq.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e50:	f200 808b 	bhi.w	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e5a:	f000 8083 	beq.w	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e64:	f200 8081 	bhi.w	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e6e:	d02f      	beq.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e76:	d878      	bhi.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e84:	d012      	beq.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8007e86:	e070      	b.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e88:	4b39      	ldr	r3, [pc, #228]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e94:	d107      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fcca 	bl	8008834 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ea4:	e1ff      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eaa:	e1fc      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eac:	4b30      	ldr	r3, [pc, #192]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eb8:	d107      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eba:	f107 0318 	add.w	r3, r7, #24
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fa10 	bl	80082e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ec8:	e1ed      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ece:	e1ea      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ed0:	4b27      	ldr	r3, [pc, #156]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007edc:	d107      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ede:	f107 030c 	add.w	r3, r7, #12
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fb52 	bl	800858c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007eec:	e1db      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ef2:	e1d8      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ef4:	4b1e      	ldr	r3, [pc, #120]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007efc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007efe:	4b1c      	ldr	r3, [pc, #112]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d10c      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8007f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d109      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f10:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	08db      	lsrs	r3, r3, #3
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	4a16      	ldr	r2, [pc, #88]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f22:	e01e      	b.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f24:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f30:	d106      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f38:	d102      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007f3a:	4b0f      	ldr	r3, [pc, #60]	; (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f3e:	e010      	b.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f40:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f4c:	d106      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f54:	d102      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f56:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f5a:	e002      	b.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f60:	e1a1      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007f62:	e1a0      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f64:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f68:	e19d      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f6e:	e19a      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007f70:	58024400 	.word	0x58024400
 8007f74:	03d09000 	.word	0x03d09000
 8007f78:	003d0900 	.word	0x003d0900
 8007f7c:	017d7840 	.word	0x017d7840
 8007f80:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f8a:	d173      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007f8c:	4b9a      	ldr	r3, [pc, #616]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f9c:	d02f      	beq.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fa4:	d863      	bhi.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb2:	d012      	beq.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8007fb4:	e05b      	b.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fb6:	4b90      	ldr	r3, [pc, #576]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fc2:	d107      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fc4:	f107 0318 	add.w	r3, r7, #24
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f98b 	bl	80082e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fd2:	e168      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fd8:	e165      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fda:	4b87      	ldr	r3, [pc, #540]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe6:	d107      	bne.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fe8:	f107 030c 	add.w	r3, r7, #12
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 facd 	bl	800858c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ff6:	e156      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ffc:	e153      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ffe:	4b7e      	ldr	r3, [pc, #504]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008002:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008006:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008008:	4b7b      	ldr	r3, [pc, #492]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b04      	cmp	r3, #4
 8008012:	d10c      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008016:	2b00      	cmp	r3, #0
 8008018:	d109      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800801a:	4b77      	ldr	r3, [pc, #476]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	08db      	lsrs	r3, r3, #3
 8008020:	f003 0303 	and.w	r3, r3, #3
 8008024:	4a75      	ldr	r2, [pc, #468]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008026:	fa22 f303 	lsr.w	r3, r2, r3
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800802c:	e01e      	b.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800802e:	4b72      	ldr	r3, [pc, #456]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800803a:	d106      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800803c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008042:	d102      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008044:	4b6e      	ldr	r3, [pc, #440]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008048:	e010      	b.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800804a:	4b6b      	ldr	r3, [pc, #428]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008056:	d106      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805e:	d102      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008060:	4b68      	ldr	r3, [pc, #416]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008064:	e002      	b.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800806a:	e11c      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800806c:	e11b      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008072:	e118      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800807a:	d133      	bne.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800807c:	4b5e      	ldr	r3, [pc, #376]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800807e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008084:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	2b00      	cmp	r3, #0
 800808a:	d004      	beq.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008092:	d012      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008094:	e023      	b.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008096:	4b58      	ldr	r3, [pc, #352]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080a2:	d107      	bne.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fbc3 	bl	8008834 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080b2:	e0f8      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b8:	e0f5      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080ba:	4b4f      	ldr	r3, [pc, #316]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080c6:	d107      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c8:	f107 0318 	add.w	r3, r7, #24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 f909 	bl	80082e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080d6:	e0e6      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080dc:	e0e3      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80080de:	2300      	movs	r3, #0
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e2:	e0e0      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ea:	f040 808d 	bne.w	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80080ee:	4b42      	ldr	r3, [pc, #264]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80080f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80080f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080fe:	d06b      	beq.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008106:	d874      	bhi.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800810e:	d056      	beq.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008116:	d86c      	bhi.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800811e:	d03b      	beq.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008126:	d864      	bhi.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800812e:	d021      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008136:	d85c      	bhi.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	2b00      	cmp	r3, #0
 800813c:	d004      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008144:	d004      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008146:	e054      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008148:	f000 f8b6 	bl	80082b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800814c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800814e:	e0aa      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008150:	4b29      	ldr	r3, [pc, #164]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800815c:	d107      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800815e:	f107 0318 	add.w	r3, r7, #24
 8008162:	4618      	mov	r0, r3
 8008164:	f000 f8be 	bl	80082e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800816c:	e09b      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008172:	e098      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008174:	4b20      	ldr	r3, [pc, #128]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800817c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008180:	d107      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008182:	f107 030c 	add.w	r3, r7, #12
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fa00 	bl	800858c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008190:	e089      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008196:	e086      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008198:	4b17      	ldr	r3, [pc, #92]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d109      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081a4:	4b14      	ldr	r3, [pc, #80]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	08db      	lsrs	r3, r3, #3
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	4a13      	ldr	r2, [pc, #76]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80081b0:	fa22 f303 	lsr.w	r3, r2, r3
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80081b6:	e076      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081bc:	e073      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80081be:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ca:	d102      	bne.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80081cc:	4b0c      	ldr	r3, [pc, #48]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80081ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081d0:	e069      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081d6:	e066      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081d8:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081e4:	d102      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80081e6:	4b07      	ldr	r3, [pc, #28]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80081e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80081ea:	e05c      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80081ec:	2300      	movs	r3, #0
 80081ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081f0:	e059      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081f6:	e056      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80081f8:	58024400 	.word	0x58024400
 80081fc:	03d09000 	.word	0x03d09000
 8008200:	003d0900 	.word	0x003d0900
 8008204:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820e:	d148      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008210:	4b27      	ldr	r3, [pc, #156]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008218:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008220:	d02a      	beq.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008228:	d838      	bhi.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008236:	d00d      	beq.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008238:	e030      	b.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800823a:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008246:	d102      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008248:	4b1a      	ldr	r3, [pc, #104]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800824c:	e02b      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008252:	e028      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008254:	4b16      	ldr	r3, [pc, #88]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008260:	d107      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008266:	4618      	mov	r0, r3
 8008268:	f000 fae4 	bl	8008834 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008270:	e019      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008276:	e016      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008278:	4b0d      	ldr	r3, [pc, #52]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008284:	d107      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008286:	f107 0318 	add.w	r3, r7, #24
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f82a 	bl	80082e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008294:	e007      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800829a:	e004      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082a0:	e001      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80082a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3740      	adds	r7, #64	; 0x40
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	58024400 	.word	0x58024400
 80082b4:	017d7840 	.word	0x017d7840

080082b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80082bc:	f7fe fc66 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 80082c0:	4602      	mov	r2, r0
 80082c2:	4b06      	ldr	r3, [pc, #24]	; (80082dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	091b      	lsrs	r3, r3, #4
 80082c8:	f003 0307 	and.w	r3, r3, #7
 80082cc:	4904      	ldr	r1, [pc, #16]	; (80082e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80082ce:	5ccb      	ldrb	r3, [r1, r3]
 80082d0:	f003 031f 	and.w	r3, r3, #31
 80082d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80082d8:	4618      	mov	r0, r3
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	58024400 	.word	0x58024400
 80082e0:	0800f6e8 	.word	0x0800f6e8

080082e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b089      	sub	sp, #36	; 0x24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082ec:	4ba1      	ldr	r3, [pc, #644]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80082f6:	4b9f      	ldr	r3, [pc, #636]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	0b1b      	lsrs	r3, r3, #12
 80082fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008300:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008302:	4b9c      	ldr	r3, [pc, #624]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008306:	091b      	lsrs	r3, r3, #4
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800830e:	4b99      	ldr	r3, [pc, #612]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008312:	08db      	lsrs	r3, r3, #3
 8008314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	fb02 f303 	mul.w	r3, r2, r3
 800831e:	ee07 3a90 	vmov	s15, r3
 8008322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008326:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 8111 	beq.w	8008554 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b02      	cmp	r3, #2
 8008336:	f000 8083 	beq.w	8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2b02      	cmp	r3, #2
 800833e:	f200 80a1 	bhi.w	8008484 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d056      	beq.n	80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800834e:	e099      	b.n	8008484 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008350:	4b88      	ldr	r3, [pc, #544]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d02d      	beq.n	80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800835c:	4b85      	ldr	r3, [pc, #532]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	08db      	lsrs	r3, r3, #3
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	4a84      	ldr	r2, [pc, #528]	; (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008368:	fa22 f303 	lsr.w	r3, r2, r3
 800836c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	ee07 3a90 	vmov	s15, r3
 8008374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b7b      	ldr	r3, [pc, #492]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a03 	vldr	s12, [r7, #12]
 800839a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800857c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80083b6:	e087      	b.n	80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008580 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80083c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ca:	4b6a      	ldr	r3, [pc, #424]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083da:	ed97 6a03 	vldr	s12, [r7, #12]
 80083de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800857c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083fa:	e065      	b.n	80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008406:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800840a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840e:	4b59      	ldr	r3, [pc, #356]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008422:	eddf 5a56 	vldr	s11, [pc, #344]	; 800857c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800843e:	e043      	b.n	80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008588 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800844e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008452:	4b48      	ldr	r3, [pc, #288]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008462:	ed97 6a03 	vldr	s12, [r7, #12]
 8008466:	eddf 5a45 	vldr	s11, [pc, #276]	; 800857c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800846a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008482:	e021      	b.n	80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008496:	4b37      	ldr	r3, [pc, #220]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800857c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80084c8:	4b2a      	ldr	r3, [pc, #168]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084cc:	0a5b      	lsrs	r3, r3, #9
 80084ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ee:	ee17 2a90 	vmov	r2, s15
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80084f6:	4b1f      	ldr	r3, [pc, #124]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	0c1b      	lsrs	r3, r3, #16
 80084fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008500:	ee07 3a90 	vmov	s15, r3
 8008504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800850c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008510:	edd7 6a07 	vldr	s13, [r7, #28]
 8008514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800851c:	ee17 2a90 	vmov	r2, s15
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008524:	4b13      	ldr	r3, [pc, #76]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	0e1b      	lsrs	r3, r3, #24
 800852a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800853a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800853e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800854a:	ee17 2a90 	vmov	r2, s15
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008552:	e008      	b.n	8008566 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	609a      	str	r2, [r3, #8]
}
 8008566:	bf00      	nop
 8008568:	3724      	adds	r7, #36	; 0x24
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	58024400 	.word	0x58024400
 8008578:	03d09000 	.word	0x03d09000
 800857c:	46000000 	.word	0x46000000
 8008580:	4c742400 	.word	0x4c742400
 8008584:	4a742400 	.word	0x4a742400
 8008588:	4bbebc20 	.word	0x4bbebc20

0800858c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800858c:	b480      	push	{r7}
 800858e:	b089      	sub	sp, #36	; 0x24
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008594:	4ba1      	ldr	r3, [pc, #644]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008598:	f003 0303 	and.w	r3, r3, #3
 800859c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800859e:	4b9f      	ldr	r3, [pc, #636]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a2:	0d1b      	lsrs	r3, r3, #20
 80085a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80085aa:	4b9c      	ldr	r3, [pc, #624]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	0a1b      	lsrs	r3, r3, #8
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80085b6:	4b99      	ldr	r3, [pc, #612]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ba:	08db      	lsrs	r3, r3, #3
 80085bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	fb02 f303 	mul.w	r3, r2, r3
 80085c6:	ee07 3a90 	vmov	s15, r3
 80085ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 8111 	beq.w	80087fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	f000 8083 	beq.w	80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	f200 80a1 	bhi.w	800872c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d056      	beq.n	80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085f6:	e099      	b.n	800872c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085f8:	4b88      	ldr	r3, [pc, #544]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0320 	and.w	r3, r3, #32
 8008600:	2b00      	cmp	r3, #0
 8008602:	d02d      	beq.n	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008604:	4b85      	ldr	r3, [pc, #532]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	08db      	lsrs	r3, r3, #3
 800860a:	f003 0303 	and.w	r3, r3, #3
 800860e:	4a84      	ldr	r2, [pc, #528]	; (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008610:	fa22 f303 	lsr.w	r3, r2, r3
 8008614:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	ee07 3a90 	vmov	s15, r3
 8008626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862e:	4b7b      	ldr	r3, [pc, #492]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008642:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008824 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800864a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800865e:	e087      	b.n	8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008828 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800866e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008672:	4b6a      	ldr	r3, [pc, #424]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008682:	ed97 6a03 	vldr	s12, [r7, #12]
 8008686:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008824 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800868a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086a2:	e065      	b.n	8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800882c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b6:	4b59      	ldr	r3, [pc, #356]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008824 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086e6:	e043      	b.n	8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008830 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fa:	4b48      	ldr	r3, [pc, #288]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870a:	ed97 6a03 	vldr	s12, [r7, #12]
 800870e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008824 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008726:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800872a:	e021      	b.n	8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800882c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b37      	ldr	r3, [pc, #220]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008752:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008824 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800876e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008770:	4b2a      	ldr	r3, [pc, #168]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	0a5b      	lsrs	r3, r3, #9
 8008776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008782:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008786:	ee37 7a87 	vadd.f32	s14, s15, s14
 800878a:	edd7 6a07 	vldr	s13, [r7, #28]
 800878e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008796:	ee17 2a90 	vmov	r2, s15
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800879e:	4b1f      	ldr	r3, [pc, #124]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	0c1b      	lsrs	r3, r3, #16
 80087a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a8:	ee07 3a90 	vmov	s15, r3
 80087ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80087bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087c4:	ee17 2a90 	vmov	r2, s15
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80087cc:	4b13      	ldr	r3, [pc, #76]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d0:	0e1b      	lsrs	r3, r3, #24
 80087d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087f2:	ee17 2a90 	vmov	r2, s15
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087fa:	e008      	b.n	800880e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	609a      	str	r2, [r3, #8]
}
 800880e:	bf00      	nop
 8008810:	3724      	adds	r7, #36	; 0x24
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	58024400 	.word	0x58024400
 8008820:	03d09000 	.word	0x03d09000
 8008824:	46000000 	.word	0x46000000
 8008828:	4c742400 	.word	0x4c742400
 800882c:	4a742400 	.word	0x4a742400
 8008830:	4bbebc20 	.word	0x4bbebc20

08008834 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008834:	b480      	push	{r7}
 8008836:	b089      	sub	sp, #36	; 0x24
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800883c:	4ba0      	ldr	r3, [pc, #640]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800883e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008846:	4b9e      	ldr	r3, [pc, #632]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884a:	091b      	lsrs	r3, r3, #4
 800884c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008850:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008852:	4b9b      	ldr	r3, [pc, #620]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800885c:	4b98      	ldr	r3, [pc, #608]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800885e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008860:	08db      	lsrs	r3, r3, #3
 8008862:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	fb02 f303 	mul.w	r3, r2, r3
 800886c:	ee07 3a90 	vmov	s15, r3
 8008870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008874:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 8111 	beq.w	8008aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	2b02      	cmp	r3, #2
 8008884:	f000 8083 	beq.w	800898e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	2b02      	cmp	r3, #2
 800888c:	f200 80a1 	bhi.w	80089d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d056      	beq.n	800894a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800889c:	e099      	b.n	80089d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800889e:	4b88      	ldr	r3, [pc, #544]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d02d      	beq.n	8008906 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088aa:	4b85      	ldr	r3, [pc, #532]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	08db      	lsrs	r3, r3, #3
 80088b0:	f003 0303 	and.w	r3, r3, #3
 80088b4:	4a83      	ldr	r2, [pc, #524]	; (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80088b6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ba:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	ee07 3a90 	vmov	s15, r3
 80088cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d4:	4b7a      	ldr	r3, [pc, #488]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088dc:	ee07 3a90 	vmov	s15, r3
 80088e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008900:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008904:	e087      	b.n	8008a16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	ee07 3a90 	vmov	s15, r3
 800890c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008910:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008acc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008918:	4b69      	ldr	r3, [pc, #420]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008920:	ee07 3a90 	vmov	s15, r3
 8008924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008928:	ed97 6a03 	vldr	s12, [r7, #12]
 800892c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800893c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008944:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008948:	e065      	b.n	8008a16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	ee07 3a90 	vmov	s15, r3
 8008950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008954:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895c:	4b58      	ldr	r3, [pc, #352]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800895e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008964:	ee07 3a90 	vmov	s15, r3
 8008968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008970:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008974:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008988:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800898c:	e043      	b.n	8008a16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	ee07 3a90 	vmov	s15, r3
 8008994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008998:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800899c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089a0:	4b47      	ldr	r3, [pc, #284]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a8:	ee07 3a90 	vmov	s15, r3
 80089ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80089b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089d0:	e021      	b.n	8008a16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	ee07 3a90 	vmov	s15, r3
 80089d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008acc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80089e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e4:	4b36      	ldr	r3, [pc, #216]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ec:	ee07 3a90 	vmov	s15, r3
 80089f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80089f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a14:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008a16:	4b2a      	ldr	r3, [pc, #168]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1a:	0a5b      	lsrs	r3, r3, #9
 8008a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a20:	ee07 3a90 	vmov	s15, r3
 8008a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a3c:	ee17 2a90 	vmov	r2, s15
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008a44:	4b1e      	ldr	r3, [pc, #120]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a48:	0c1b      	lsrs	r3, r3, #16
 8008a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a6a:	ee17 2a90 	vmov	r2, s15
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008a72:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a76:	0e1b      	lsrs	r3, r3, #24
 8008a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a7c:	ee07 3a90 	vmov	s15, r3
 8008a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a98:	ee17 2a90 	vmov	r2, s15
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008aa0:	e008      	b.n	8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	609a      	str	r2, [r3, #8]
}
 8008ab4:	bf00      	nop
 8008ab6:	3724      	adds	r7, #36	; 0x24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	58024400 	.word	0x58024400
 8008ac4:	03d09000 	.word	0x03d09000
 8008ac8:	46000000 	.word	0x46000000
 8008acc:	4c742400 	.word	0x4c742400
 8008ad0:	4a742400 	.word	0x4a742400
 8008ad4:	4bbebc20 	.word	0x4bbebc20

08008ad8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ae6:	4b53      	ldr	r3, [pc, #332]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aea:	f003 0303 	and.w	r3, r3, #3
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d101      	bne.n	8008af6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e099      	b.n	8008c2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008af6:	4b4f      	ldr	r3, [pc, #316]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a4e      	ldr	r2, [pc, #312]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008afc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b02:	f7fa fc85 	bl	8003410 <HAL_GetTick>
 8008b06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b08:	e008      	b.n	8008b1c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b0a:	f7fa fc81 	bl	8003410 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d901      	bls.n	8008b1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e086      	b.n	8008c2a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b1c:	4b45      	ldr	r3, [pc, #276]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1f0      	bne.n	8008b0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b28:	4b42      	ldr	r3, [pc, #264]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	031b      	lsls	r3, r3, #12
 8008b36:	493f      	ldr	r1, [pc, #252]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	628b      	str	r3, [r1, #40]	; 0x28
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	025b      	lsls	r3, r3, #9
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	431a      	orrs	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	041b      	lsls	r3, r3, #16
 8008b5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	061b      	lsls	r3, r3, #24
 8008b68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b6c:	4931      	ldr	r1, [pc, #196]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b72:	4b30      	ldr	r3, [pc, #192]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	492d      	ldr	r1, [pc, #180]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b84:	4b2b      	ldr	r3, [pc, #172]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	f023 0220 	bic.w	r2, r3, #32
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	4928      	ldr	r1, [pc, #160]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b96:	4b27      	ldr	r3, [pc, #156]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	4a26      	ldr	r2, [pc, #152]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008b9c:	f023 0310 	bic.w	r3, r3, #16
 8008ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ba2:	4b24      	ldr	r3, [pc, #144]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ba6:	4b24      	ldr	r3, [pc, #144]	; (8008c38 <RCCEx_PLL2_Config+0x160>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	69d2      	ldr	r2, [r2, #28]
 8008bae:	00d2      	lsls	r2, r2, #3
 8008bb0:	4920      	ldr	r1, [pc, #128]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008bb6:	4b1f      	ldr	r3, [pc, #124]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bba:	4a1e      	ldr	r2, [pc, #120]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008bbc:	f043 0310 	orr.w	r3, r3, #16
 8008bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d106      	bne.n	8008bd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008bc8:	4b1a      	ldr	r3, [pc, #104]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	4a19      	ldr	r2, [pc, #100]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bd4:	e00f      	b.n	8008bf6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d106      	bne.n	8008bea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bdc:	4b15      	ldr	r3, [pc, #84]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be0:	4a14      	ldr	r2, [pc, #80]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008be8:	e005      	b.n	8008bf6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bea:	4b12      	ldr	r3, [pc, #72]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bee:	4a11      	ldr	r2, [pc, #68]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bf6:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a0e      	ldr	r2, [pc, #56]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008bfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c02:	f7fa fc05 	bl	8003410 <HAL_GetTick>
 8008c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c08:	e008      	b.n	8008c1c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c0a:	f7fa fc01 	bl	8003410 <HAL_GetTick>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d901      	bls.n	8008c1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e006      	b.n	8008c2a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c1c:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <RCCEx_PLL2_Config+0x15c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d0f0      	beq.n	8008c0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	58024400 	.word	0x58024400
 8008c38:	ffff0007 	.word	0xffff0007

08008c3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c4a:	4b53      	ldr	r3, [pc, #332]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d101      	bne.n	8008c5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e099      	b.n	8008d8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c5a:	4b4f      	ldr	r3, [pc, #316]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a4e      	ldr	r2, [pc, #312]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c66:	f7fa fbd3 	bl	8003410 <HAL_GetTick>
 8008c6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c6c:	e008      	b.n	8008c80 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c6e:	f7fa fbcf 	bl	8003410 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d901      	bls.n	8008c80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e086      	b.n	8008d8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c80:	4b45      	ldr	r3, [pc, #276]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1f0      	bne.n	8008c6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c8c:	4b42      	ldr	r3, [pc, #264]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c90:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	051b      	lsls	r3, r3, #20
 8008c9a:	493f      	ldr	r1, [pc, #252]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	628b      	str	r3, [r1, #40]	; 0x28
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	025b      	lsls	r3, r3, #9
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	041b      	lsls	r3, r3, #16
 8008cbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	061b      	lsls	r3, r3, #24
 8008ccc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cd0:	4931      	ldr	r1, [pc, #196]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cd6:	4b30      	ldr	r3, [pc, #192]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	492d      	ldr	r1, [pc, #180]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ce8:	4b2b      	ldr	r3, [pc, #172]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	4928      	ldr	r1, [pc, #160]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cfa:	4b27      	ldr	r3, [pc, #156]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	4a26      	ldr	r2, [pc, #152]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d06:	4b24      	ldr	r3, [pc, #144]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d0a:	4b24      	ldr	r3, [pc, #144]	; (8008d9c <RCCEx_PLL3_Config+0x160>)
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	69d2      	ldr	r2, [r2, #28]
 8008d12:	00d2      	lsls	r2, r2, #3
 8008d14:	4920      	ldr	r1, [pc, #128]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d1a:	4b1f      	ldr	r3, [pc, #124]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1e:	4a1e      	ldr	r2, [pc, #120]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d106      	bne.n	8008d3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d2c:	4b1a      	ldr	r3, [pc, #104]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	4a19      	ldr	r2, [pc, #100]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d38:	e00f      	b.n	8008d5a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d106      	bne.n	8008d4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d40:	4b15      	ldr	r3, [pc, #84]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	4a14      	ldr	r2, [pc, #80]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d4c:	e005      	b.n	8008d5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d4e:	4b12      	ldr	r3, [pc, #72]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d52:	4a11      	ldr	r2, [pc, #68]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d5a:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a0e      	ldr	r2, [pc, #56]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d66:	f7fa fb53 	bl	8003410 <HAL_GetTick>
 8008d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d6c:	e008      	b.n	8008d80 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d6e:	f7fa fb4f 	bl	8003410 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d901      	bls.n	8008d80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e006      	b.n	8008d8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d80:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <RCCEx_PLL3_Config+0x15c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0f0      	beq.n	8008d6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	58024400 	.word	0x58024400
 8008d9c:	ffff0007 	.word	0xffff0007

08008da0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e0f1      	b.n	8008f96 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a78      	ldr	r2, [pc, #480]	; (8008fa0 <HAL_SPI_Init+0x200>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00f      	beq.n	8008de2 <HAL_SPI_Init+0x42>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a77      	ldr	r2, [pc, #476]	; (8008fa4 <HAL_SPI_Init+0x204>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00a      	beq.n	8008de2 <HAL_SPI_Init+0x42>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a75      	ldr	r2, [pc, #468]	; (8008fa8 <HAL_SPI_Init+0x208>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d005      	beq.n	8008de2 <HAL_SPI_Init+0x42>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	2b0f      	cmp	r3, #15
 8008ddc:	d901      	bls.n	8008de2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e0d9      	b.n	8008f96 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f8e2 	bl	8008fac <SPI_GetPacketSize>
 8008de8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a6c      	ldr	r2, [pc, #432]	; (8008fa0 <HAL_SPI_Init+0x200>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00c      	beq.n	8008e0e <HAL_SPI_Init+0x6e>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a6a      	ldr	r2, [pc, #424]	; (8008fa4 <HAL_SPI_Init+0x204>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d007      	beq.n	8008e0e <HAL_SPI_Init+0x6e>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a69      	ldr	r2, [pc, #420]	; (8008fa8 <HAL_SPI_Init+0x208>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d002      	beq.n	8008e0e <HAL_SPI_Init+0x6e>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b08      	cmp	r3, #8
 8008e0c:	d811      	bhi.n	8008e32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e12:	4a63      	ldr	r2, [pc, #396]	; (8008fa0 <HAL_SPI_Init+0x200>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d009      	beq.n	8008e2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a61      	ldr	r2, [pc, #388]	; (8008fa4 <HAL_SPI_Init+0x204>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d004      	beq.n	8008e2c <HAL_SPI_Init+0x8c>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a60      	ldr	r2, [pc, #384]	; (8008fa8 <HAL_SPI_Init+0x208>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d104      	bne.n	8008e36 <HAL_SPI_Init+0x96>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b10      	cmp	r3, #16
 8008e30:	d901      	bls.n	8008e36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e0af      	b.n	8008f96 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d106      	bne.n	8008e50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7f8 fdc4 	bl	80019d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0201 	bic.w	r2, r2, #1
 8008e66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008e72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e7c:	d119      	bne.n	8008eb2 <HAL_SPI_Init+0x112>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e86:	d103      	bne.n	8008e90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d008      	beq.n	8008ea2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10c      	bne.n	8008eb2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ea0:	d107      	bne.n	8008eb2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008eb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69da      	ldr	r2, [r3, #28]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec4:	ea42 0103 	orr.w	r1, r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68da      	ldr	r2, [r3, #12]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	431a      	orrs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	431a      	orrs	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f12:	ea42 0103 	orr.w	r1, r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d113      	bne.n	8008f52 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0201 	bic.w	r2, r2, #1
 8008f60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	40013000 	.word	0x40013000
 8008fa4:	40003800 	.word	0x40003800
 8008fa8:	40003c00 	.word	0x40003c00

08008fac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb8:	095b      	lsrs	r3, r3, #5
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	3307      	adds	r3, #7
 8008fca:	08db      	lsrs	r3, r3, #3
 8008fcc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	fb02 f303 	mul.w	r3, r2, r3
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e049      	b.n	8009088 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d106      	bne.n	800900e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7f9 fc0d 	bl	8002828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2202      	movs	r2, #2
 8009012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3304      	adds	r3, #4
 800901e:	4619      	mov	r1, r3
 8009020:	4610      	mov	r0, r2
 8009022:	f000 fc3d 	bl	80098a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d001      	beq.n	80090a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e056      	b.n	8009156 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2202      	movs	r2, #2
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a2b      	ldr	r2, [pc, #172]	; (8009164 <HAL_TIM_Base_Start+0xd4>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d02c      	beq.n	8009114 <HAL_TIM_Base_Start+0x84>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c2:	d027      	beq.n	8009114 <HAL_TIM_Base_Start+0x84>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a27      	ldr	r2, [pc, #156]	; (8009168 <HAL_TIM_Base_Start+0xd8>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d022      	beq.n	8009114 <HAL_TIM_Base_Start+0x84>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a26      	ldr	r2, [pc, #152]	; (800916c <HAL_TIM_Base_Start+0xdc>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d01d      	beq.n	8009114 <HAL_TIM_Base_Start+0x84>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a24      	ldr	r2, [pc, #144]	; (8009170 <HAL_TIM_Base_Start+0xe0>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d018      	beq.n	8009114 <HAL_TIM_Base_Start+0x84>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a23      	ldr	r2, [pc, #140]	; (8009174 <HAL_TIM_Base_Start+0xe4>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d013      	beq.n	8009114 <HAL_TIM_Base_Start+0x84>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a21      	ldr	r2, [pc, #132]	; (8009178 <HAL_TIM_Base_Start+0xe8>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00e      	beq.n	8009114 <HAL_TIM_Base_Start+0x84>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a20      	ldr	r2, [pc, #128]	; (800917c <HAL_TIM_Base_Start+0xec>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d009      	beq.n	8009114 <HAL_TIM_Base_Start+0x84>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a1e      	ldr	r2, [pc, #120]	; (8009180 <HAL_TIM_Base_Start+0xf0>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d004      	beq.n	8009114 <HAL_TIM_Base_Start+0x84>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a1d      	ldr	r2, [pc, #116]	; (8009184 <HAL_TIM_Base_Start+0xf4>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d115      	bne.n	8009140 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689a      	ldr	r2, [r3, #8]
 800911a:	4b1b      	ldr	r3, [pc, #108]	; (8009188 <HAL_TIM_Base_Start+0xf8>)
 800911c:	4013      	ands	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b06      	cmp	r3, #6
 8009124:	d015      	beq.n	8009152 <HAL_TIM_Base_Start+0xc2>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800912c:	d011      	beq.n	8009152 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f042 0201 	orr.w	r2, r2, #1
 800913c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800913e:	e008      	b.n	8009152 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0201 	orr.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	e000      	b.n	8009154 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009152:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	40010000 	.word	0x40010000
 8009168:	40000400 	.word	0x40000400
 800916c:	40000800 	.word	0x40000800
 8009170:	40000c00 	.word	0x40000c00
 8009174:	40010400 	.word	0x40010400
 8009178:	40001800 	.word	0x40001800
 800917c:	40014000 	.word	0x40014000
 8009180:	4000e000 	.word	0x4000e000
 8009184:	4000e400 	.word	0x4000e400
 8009188:	00010007 	.word	0x00010007

0800918c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e049      	b.n	8009232 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d106      	bne.n	80091b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f841 	bl	800923a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3304      	adds	r3, #4
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f000 fb68 	bl	80098a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009242:	bf00      	nop
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
	...

08009250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <HAL_TIM_PWM_Start+0x24>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b01      	cmp	r3, #1
 800926a:	bf14      	ite	ne
 800926c:	2301      	movne	r3, #1
 800926e:	2300      	moveq	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	e03c      	b.n	80092ee <HAL_TIM_PWM_Start+0x9e>
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2b04      	cmp	r3, #4
 8009278:	d109      	bne.n	800928e <HAL_TIM_PWM_Start+0x3e>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b01      	cmp	r3, #1
 8009284:	bf14      	ite	ne
 8009286:	2301      	movne	r3, #1
 8009288:	2300      	moveq	r3, #0
 800928a:	b2db      	uxtb	r3, r3
 800928c:	e02f      	b.n	80092ee <HAL_TIM_PWM_Start+0x9e>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b08      	cmp	r3, #8
 8009292:	d109      	bne.n	80092a8 <HAL_TIM_PWM_Start+0x58>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b01      	cmp	r3, #1
 800929e:	bf14      	ite	ne
 80092a0:	2301      	movne	r3, #1
 80092a2:	2300      	moveq	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	e022      	b.n	80092ee <HAL_TIM_PWM_Start+0x9e>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2b0c      	cmp	r3, #12
 80092ac:	d109      	bne.n	80092c2 <HAL_TIM_PWM_Start+0x72>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	bf14      	ite	ne
 80092ba:	2301      	movne	r3, #1
 80092bc:	2300      	moveq	r3, #0
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	e015      	b.n	80092ee <HAL_TIM_PWM_Start+0x9e>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b10      	cmp	r3, #16
 80092c6:	d109      	bne.n	80092dc <HAL_TIM_PWM_Start+0x8c>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	bf14      	ite	ne
 80092d4:	2301      	movne	r3, #1
 80092d6:	2300      	moveq	r3, #0
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	e008      	b.n	80092ee <HAL_TIM_PWM_Start+0x9e>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	bf14      	ite	ne
 80092e8:	2301      	movne	r3, #1
 80092ea:	2300      	moveq	r3, #0
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e0ab      	b.n	800944e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <HAL_TIM_PWM_Start+0xb6>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009304:	e023      	b.n	800934e <HAL_TIM_PWM_Start+0xfe>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b04      	cmp	r3, #4
 800930a:	d104      	bne.n	8009316 <HAL_TIM_PWM_Start+0xc6>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009314:	e01b      	b.n	800934e <HAL_TIM_PWM_Start+0xfe>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b08      	cmp	r3, #8
 800931a:	d104      	bne.n	8009326 <HAL_TIM_PWM_Start+0xd6>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009324:	e013      	b.n	800934e <HAL_TIM_PWM_Start+0xfe>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b0c      	cmp	r3, #12
 800932a:	d104      	bne.n	8009336 <HAL_TIM_PWM_Start+0xe6>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009334:	e00b      	b.n	800934e <HAL_TIM_PWM_Start+0xfe>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b10      	cmp	r3, #16
 800933a:	d104      	bne.n	8009346 <HAL_TIM_PWM_Start+0xf6>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009344:	e003      	b.n	800934e <HAL_TIM_PWM_Start+0xfe>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2202      	movs	r2, #2
 800934a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2201      	movs	r2, #1
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	4618      	mov	r0, r3
 8009358:	f000 febc 	bl	800a0d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a3d      	ldr	r2, [pc, #244]	; (8009458 <HAL_TIM_PWM_Start+0x208>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d013      	beq.n	800938e <HAL_TIM_PWM_Start+0x13e>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a3c      	ldr	r2, [pc, #240]	; (800945c <HAL_TIM_PWM_Start+0x20c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d00e      	beq.n	800938e <HAL_TIM_PWM_Start+0x13e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a3a      	ldr	r2, [pc, #232]	; (8009460 <HAL_TIM_PWM_Start+0x210>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d009      	beq.n	800938e <HAL_TIM_PWM_Start+0x13e>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a39      	ldr	r2, [pc, #228]	; (8009464 <HAL_TIM_PWM_Start+0x214>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d004      	beq.n	800938e <HAL_TIM_PWM_Start+0x13e>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a37      	ldr	r2, [pc, #220]	; (8009468 <HAL_TIM_PWM_Start+0x218>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d101      	bne.n	8009392 <HAL_TIM_PWM_Start+0x142>
 800938e:	2301      	movs	r3, #1
 8009390:	e000      	b.n	8009394 <HAL_TIM_PWM_Start+0x144>
 8009392:	2300      	movs	r3, #0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d007      	beq.n	80093a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a2a      	ldr	r2, [pc, #168]	; (8009458 <HAL_TIM_PWM_Start+0x208>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d02c      	beq.n	800940c <HAL_TIM_PWM_Start+0x1bc>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ba:	d027      	beq.n	800940c <HAL_TIM_PWM_Start+0x1bc>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a2a      	ldr	r2, [pc, #168]	; (800946c <HAL_TIM_PWM_Start+0x21c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d022      	beq.n	800940c <HAL_TIM_PWM_Start+0x1bc>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a29      	ldr	r2, [pc, #164]	; (8009470 <HAL_TIM_PWM_Start+0x220>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d01d      	beq.n	800940c <HAL_TIM_PWM_Start+0x1bc>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a27      	ldr	r2, [pc, #156]	; (8009474 <HAL_TIM_PWM_Start+0x224>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d018      	beq.n	800940c <HAL_TIM_PWM_Start+0x1bc>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a1f      	ldr	r2, [pc, #124]	; (800945c <HAL_TIM_PWM_Start+0x20c>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d013      	beq.n	800940c <HAL_TIM_PWM_Start+0x1bc>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a23      	ldr	r2, [pc, #140]	; (8009478 <HAL_TIM_PWM_Start+0x228>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d00e      	beq.n	800940c <HAL_TIM_PWM_Start+0x1bc>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a1b      	ldr	r2, [pc, #108]	; (8009460 <HAL_TIM_PWM_Start+0x210>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d009      	beq.n	800940c <HAL_TIM_PWM_Start+0x1bc>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a1f      	ldr	r2, [pc, #124]	; (800947c <HAL_TIM_PWM_Start+0x22c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d004      	beq.n	800940c <HAL_TIM_PWM_Start+0x1bc>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a1e      	ldr	r2, [pc, #120]	; (8009480 <HAL_TIM_PWM_Start+0x230>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d115      	bne.n	8009438 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	689a      	ldr	r2, [r3, #8]
 8009412:	4b1c      	ldr	r3, [pc, #112]	; (8009484 <HAL_TIM_PWM_Start+0x234>)
 8009414:	4013      	ands	r3, r2
 8009416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b06      	cmp	r3, #6
 800941c:	d015      	beq.n	800944a <HAL_TIM_PWM_Start+0x1fa>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009424:	d011      	beq.n	800944a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f042 0201 	orr.w	r2, r2, #1
 8009434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009436:	e008      	b.n	800944a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f042 0201 	orr.w	r2, r2, #1
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	e000      	b.n	800944c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800944a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	40010000 	.word	0x40010000
 800945c:	40010400 	.word	0x40010400
 8009460:	40014000 	.word	0x40014000
 8009464:	40014400 	.word	0x40014400
 8009468:	40014800 	.word	0x40014800
 800946c:	40000400 	.word	0x40000400
 8009470:	40000800 	.word	0x40000800
 8009474:	40000c00 	.word	0x40000c00
 8009478:	40001800 	.word	0x40001800
 800947c:	4000e000 	.word	0x4000e000
 8009480:	4000e400 	.word	0x4000e400
 8009484:	00010007 	.word	0x00010007

08009488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d101      	bne.n	80094a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094a2:	2302      	movs	r3, #2
 80094a4:	e0ff      	b.n	80096a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b14      	cmp	r3, #20
 80094b2:	f200 80f0 	bhi.w	8009696 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094b6:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	08009511 	.word	0x08009511
 80094c0:	08009697 	.word	0x08009697
 80094c4:	08009697 	.word	0x08009697
 80094c8:	08009697 	.word	0x08009697
 80094cc:	08009551 	.word	0x08009551
 80094d0:	08009697 	.word	0x08009697
 80094d4:	08009697 	.word	0x08009697
 80094d8:	08009697 	.word	0x08009697
 80094dc:	08009593 	.word	0x08009593
 80094e0:	08009697 	.word	0x08009697
 80094e4:	08009697 	.word	0x08009697
 80094e8:	08009697 	.word	0x08009697
 80094ec:	080095d3 	.word	0x080095d3
 80094f0:	08009697 	.word	0x08009697
 80094f4:	08009697 	.word	0x08009697
 80094f8:	08009697 	.word	0x08009697
 80094fc:	08009615 	.word	0x08009615
 8009500:	08009697 	.word	0x08009697
 8009504:	08009697 	.word	0x08009697
 8009508:	08009697 	.word	0x08009697
 800950c:	08009655 	.word	0x08009655
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68b9      	ldr	r1, [r7, #8]
 8009516:	4618      	mov	r0, r3
 8009518:	f000 fa68 	bl	80099ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	699a      	ldr	r2, [r3, #24]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0208 	orr.w	r2, r2, #8
 800952a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	699a      	ldr	r2, [r3, #24]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0204 	bic.w	r2, r2, #4
 800953a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6999      	ldr	r1, [r3, #24]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	691a      	ldr	r2, [r3, #16]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	619a      	str	r2, [r3, #24]
      break;
 800954e:	e0a5      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68b9      	ldr	r1, [r7, #8]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fad8 	bl	8009b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	699a      	ldr	r2, [r3, #24]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800956a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	699a      	ldr	r2, [r3, #24]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800957a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6999      	ldr	r1, [r3, #24]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	021a      	lsls	r2, r3, #8
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	619a      	str	r2, [r3, #24]
      break;
 8009590:	e084      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fb41 	bl	8009c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	69da      	ldr	r2, [r3, #28]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f042 0208 	orr.w	r2, r2, #8
 80095ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69da      	ldr	r2, [r3, #28]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f022 0204 	bic.w	r2, r2, #4
 80095bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69d9      	ldr	r1, [r3, #28]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	691a      	ldr	r2, [r3, #16]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	61da      	str	r2, [r3, #28]
      break;
 80095d0:	e064      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fba9 	bl	8009d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69da      	ldr	r2, [r3, #28]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69da      	ldr	r2, [r3, #28]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69d9      	ldr	r1, [r3, #28]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	021a      	lsls	r2, r3, #8
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	61da      	str	r2, [r3, #28]
      break;
 8009612:	e043      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fbf2 	bl	8009e04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0208 	orr.w	r2, r2, #8
 800962e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0204 	bic.w	r2, r2, #4
 800963e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	691a      	ldr	r2, [r3, #16]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009652:	e023      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fc36 	bl	8009ecc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800966e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800967e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	021a      	lsls	r2, r3, #8
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009694:	e002      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	75fb      	strb	r3, [r7, #23]
      break;
 800969a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop

080096b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d101      	bne.n	80096cc <HAL_TIM_ConfigClockSource+0x1c>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e0dc      	b.n	8009886 <HAL_TIM_ConfigClockSource+0x1d6>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	4b6a      	ldr	r3, [pc, #424]	; (8009890 <HAL_TIM_ConfigClockSource+0x1e0>)
 80096e8:	4013      	ands	r3, r2
 80096ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a64      	ldr	r2, [pc, #400]	; (8009894 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	f000 80a9 	beq.w	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009708:	4a62      	ldr	r2, [pc, #392]	; (8009894 <HAL_TIM_ConfigClockSource+0x1e4>)
 800970a:	4293      	cmp	r3, r2
 800970c:	f200 80ae 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009710:	4a61      	ldr	r2, [pc, #388]	; (8009898 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009712:	4293      	cmp	r3, r2
 8009714:	f000 80a1 	beq.w	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009718:	4a5f      	ldr	r2, [pc, #380]	; (8009898 <HAL_TIM_ConfigClockSource+0x1e8>)
 800971a:	4293      	cmp	r3, r2
 800971c:	f200 80a6 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009720:	4a5e      	ldr	r2, [pc, #376]	; (800989c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009722:	4293      	cmp	r3, r2
 8009724:	f000 8099 	beq.w	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009728:	4a5c      	ldr	r2, [pc, #368]	; (800989c <HAL_TIM_ConfigClockSource+0x1ec>)
 800972a:	4293      	cmp	r3, r2
 800972c:	f200 809e 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009730:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009734:	f000 8091 	beq.w	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009738:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800973c:	f200 8096 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009744:	f000 8089 	beq.w	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800974c:	f200 808e 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009754:	d03e      	beq.n	80097d4 <HAL_TIM_ConfigClockSource+0x124>
 8009756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800975a:	f200 8087 	bhi.w	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 800975e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009762:	f000 8086 	beq.w	8009872 <HAL_TIM_ConfigClockSource+0x1c2>
 8009766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800976a:	d87f      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 800976c:	2b70      	cmp	r3, #112	; 0x70
 800976e:	d01a      	beq.n	80097a6 <HAL_TIM_ConfigClockSource+0xf6>
 8009770:	2b70      	cmp	r3, #112	; 0x70
 8009772:	d87b      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009774:	2b60      	cmp	r3, #96	; 0x60
 8009776:	d050      	beq.n	800981a <HAL_TIM_ConfigClockSource+0x16a>
 8009778:	2b60      	cmp	r3, #96	; 0x60
 800977a:	d877      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 800977c:	2b50      	cmp	r3, #80	; 0x50
 800977e:	d03c      	beq.n	80097fa <HAL_TIM_ConfigClockSource+0x14a>
 8009780:	2b50      	cmp	r3, #80	; 0x50
 8009782:	d873      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009784:	2b40      	cmp	r3, #64	; 0x40
 8009786:	d058      	beq.n	800983a <HAL_TIM_ConfigClockSource+0x18a>
 8009788:	2b40      	cmp	r3, #64	; 0x40
 800978a:	d86f      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 800978c:	2b30      	cmp	r3, #48	; 0x30
 800978e:	d064      	beq.n	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009790:	2b30      	cmp	r3, #48	; 0x30
 8009792:	d86b      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 8009794:	2b20      	cmp	r3, #32
 8009796:	d060      	beq.n	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 8009798:	2b20      	cmp	r3, #32
 800979a:	d867      	bhi.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
 800979c:	2b00      	cmp	r3, #0
 800979e:	d05c      	beq.n	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 80097a0:	2b10      	cmp	r3, #16
 80097a2:	d05a      	beq.n	800985a <HAL_TIM_ConfigClockSource+0x1aa>
 80097a4:	e062      	b.n	800986c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6818      	ldr	r0, [r3, #0]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	6899      	ldr	r1, [r3, #8]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	f000 fc6d 	bl	800a094 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	609a      	str	r2, [r3, #8]
      break;
 80097d2:	e04f      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6818      	ldr	r0, [r3, #0]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	6899      	ldr	r1, [r3, #8]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	f000 fc56 	bl	800a094 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689a      	ldr	r2, [r3, #8]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097f6:	609a      	str	r2, [r3, #8]
      break;
 80097f8:	e03c      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	6859      	ldr	r1, [r3, #4]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	461a      	mov	r2, r3
 8009808:	f000 fbc6 	bl	8009f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2150      	movs	r1, #80	; 0x50
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fc20 	bl	800a058 <TIM_ITRx_SetConfig>
      break;
 8009818:	e02c      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6818      	ldr	r0, [r3, #0]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	6859      	ldr	r1, [r3, #4]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	461a      	mov	r2, r3
 8009828:	f000 fbe5 	bl	8009ff6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2160      	movs	r1, #96	; 0x60
 8009832:	4618      	mov	r0, r3
 8009834:	f000 fc10 	bl	800a058 <TIM_ITRx_SetConfig>
      break;
 8009838:	e01c      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	6859      	ldr	r1, [r3, #4]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	461a      	mov	r2, r3
 8009848:	f000 fba6 	bl	8009f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2140      	movs	r1, #64	; 0x40
 8009852:	4618      	mov	r0, r3
 8009854:	f000 fc00 	bl	800a058 <TIM_ITRx_SetConfig>
      break;
 8009858:	e00c      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f000 fbf7 	bl	800a058 <TIM_ITRx_SetConfig>
      break;
 800986a:	e003      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	73fb      	strb	r3, [r7, #15]
      break;
 8009870:	e000      	b.n	8009874 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009884:	7bfb      	ldrb	r3, [r7, #15]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	ffceff88 	.word	0xffceff88
 8009894:	00100040 	.word	0x00100040
 8009898:	00100030 	.word	0x00100030
 800989c:	00100020 	.word	0x00100020

080098a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a44      	ldr	r2, [pc, #272]	; (80099c4 <TIM_Base_SetConfig+0x124>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d013      	beq.n	80098e0 <TIM_Base_SetConfig+0x40>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098be:	d00f      	beq.n	80098e0 <TIM_Base_SetConfig+0x40>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a41      	ldr	r2, [pc, #260]	; (80099c8 <TIM_Base_SetConfig+0x128>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d00b      	beq.n	80098e0 <TIM_Base_SetConfig+0x40>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a40      	ldr	r2, [pc, #256]	; (80099cc <TIM_Base_SetConfig+0x12c>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d007      	beq.n	80098e0 <TIM_Base_SetConfig+0x40>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a3f      	ldr	r2, [pc, #252]	; (80099d0 <TIM_Base_SetConfig+0x130>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d003      	beq.n	80098e0 <TIM_Base_SetConfig+0x40>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a3e      	ldr	r2, [pc, #248]	; (80099d4 <TIM_Base_SetConfig+0x134>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d108      	bne.n	80098f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a33      	ldr	r2, [pc, #204]	; (80099c4 <TIM_Base_SetConfig+0x124>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d027      	beq.n	800994a <TIM_Base_SetConfig+0xaa>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009900:	d023      	beq.n	800994a <TIM_Base_SetConfig+0xaa>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a30      	ldr	r2, [pc, #192]	; (80099c8 <TIM_Base_SetConfig+0x128>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d01f      	beq.n	800994a <TIM_Base_SetConfig+0xaa>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a2f      	ldr	r2, [pc, #188]	; (80099cc <TIM_Base_SetConfig+0x12c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d01b      	beq.n	800994a <TIM_Base_SetConfig+0xaa>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a2e      	ldr	r2, [pc, #184]	; (80099d0 <TIM_Base_SetConfig+0x130>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d017      	beq.n	800994a <TIM_Base_SetConfig+0xaa>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a2d      	ldr	r2, [pc, #180]	; (80099d4 <TIM_Base_SetConfig+0x134>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d013      	beq.n	800994a <TIM_Base_SetConfig+0xaa>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a2c      	ldr	r2, [pc, #176]	; (80099d8 <TIM_Base_SetConfig+0x138>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d00f      	beq.n	800994a <TIM_Base_SetConfig+0xaa>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a2b      	ldr	r2, [pc, #172]	; (80099dc <TIM_Base_SetConfig+0x13c>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00b      	beq.n	800994a <TIM_Base_SetConfig+0xaa>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a2a      	ldr	r2, [pc, #168]	; (80099e0 <TIM_Base_SetConfig+0x140>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d007      	beq.n	800994a <TIM_Base_SetConfig+0xaa>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a29      	ldr	r2, [pc, #164]	; (80099e4 <TIM_Base_SetConfig+0x144>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d003      	beq.n	800994a <TIM_Base_SetConfig+0xaa>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a28      	ldr	r2, [pc, #160]	; (80099e8 <TIM_Base_SetConfig+0x148>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d108      	bne.n	800995c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	4313      	orrs	r3, r2
 800995a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	689a      	ldr	r2, [r3, #8]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a10      	ldr	r2, [pc, #64]	; (80099c4 <TIM_Base_SetConfig+0x124>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d00f      	beq.n	80099a8 <TIM_Base_SetConfig+0x108>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a12      	ldr	r2, [pc, #72]	; (80099d4 <TIM_Base_SetConfig+0x134>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d00b      	beq.n	80099a8 <TIM_Base_SetConfig+0x108>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a11      	ldr	r2, [pc, #68]	; (80099d8 <TIM_Base_SetConfig+0x138>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d007      	beq.n	80099a8 <TIM_Base_SetConfig+0x108>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a10      	ldr	r2, [pc, #64]	; (80099dc <TIM_Base_SetConfig+0x13c>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d003      	beq.n	80099a8 <TIM_Base_SetConfig+0x108>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a0f      	ldr	r2, [pc, #60]	; (80099e0 <TIM_Base_SetConfig+0x140>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d103      	bne.n	80099b0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	691a      	ldr	r2, [r3, #16]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	615a      	str	r2, [r3, #20]
}
 80099b6:	bf00      	nop
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	40010000 	.word	0x40010000
 80099c8:	40000400 	.word	0x40000400
 80099cc:	40000800 	.word	0x40000800
 80099d0:	40000c00 	.word	0x40000c00
 80099d4:	40010400 	.word	0x40010400
 80099d8:	40014000 	.word	0x40014000
 80099dc:	40014400 	.word	0x40014400
 80099e0:	40014800 	.word	0x40014800
 80099e4:	4000e000 	.word	0x4000e000
 80099e8:	4000e400 	.word	0x4000e400

080099ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	f023 0201 	bic.w	r2, r3, #1
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	4b37      	ldr	r3, [pc, #220]	; (8009af4 <TIM_OC1_SetConfig+0x108>)
 8009a18:	4013      	ands	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f023 0303 	bic.w	r3, r3, #3
 8009a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f023 0302 	bic.w	r3, r3, #2
 8009a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a2d      	ldr	r2, [pc, #180]	; (8009af8 <TIM_OC1_SetConfig+0x10c>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d00f      	beq.n	8009a68 <TIM_OC1_SetConfig+0x7c>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a2c      	ldr	r2, [pc, #176]	; (8009afc <TIM_OC1_SetConfig+0x110>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d00b      	beq.n	8009a68 <TIM_OC1_SetConfig+0x7c>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a2b      	ldr	r2, [pc, #172]	; (8009b00 <TIM_OC1_SetConfig+0x114>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d007      	beq.n	8009a68 <TIM_OC1_SetConfig+0x7c>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a2a      	ldr	r2, [pc, #168]	; (8009b04 <TIM_OC1_SetConfig+0x118>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d003      	beq.n	8009a68 <TIM_OC1_SetConfig+0x7c>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a29      	ldr	r2, [pc, #164]	; (8009b08 <TIM_OC1_SetConfig+0x11c>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d10c      	bne.n	8009a82 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f023 0308 	bic.w	r3, r3, #8
 8009a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f023 0304 	bic.w	r3, r3, #4
 8009a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a1c      	ldr	r2, [pc, #112]	; (8009af8 <TIM_OC1_SetConfig+0x10c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d00f      	beq.n	8009aaa <TIM_OC1_SetConfig+0xbe>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a1b      	ldr	r2, [pc, #108]	; (8009afc <TIM_OC1_SetConfig+0x110>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00b      	beq.n	8009aaa <TIM_OC1_SetConfig+0xbe>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a1a      	ldr	r2, [pc, #104]	; (8009b00 <TIM_OC1_SetConfig+0x114>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d007      	beq.n	8009aaa <TIM_OC1_SetConfig+0xbe>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a19      	ldr	r2, [pc, #100]	; (8009b04 <TIM_OC1_SetConfig+0x118>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d003      	beq.n	8009aaa <TIM_OC1_SetConfig+0xbe>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a18      	ldr	r2, [pc, #96]	; (8009b08 <TIM_OC1_SetConfig+0x11c>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d111      	bne.n	8009ace <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	697a      	ldr	r2, [r7, #20]
 8009ae6:	621a      	str	r2, [r3, #32]
}
 8009ae8:	bf00      	nop
 8009aea:	371c      	adds	r7, #28
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	fffeff8f 	.word	0xfffeff8f
 8009af8:	40010000 	.word	0x40010000
 8009afc:	40010400 	.word	0x40010400
 8009b00:	40014000 	.word	0x40014000
 8009b04:	40014400 	.word	0x40014400
 8009b08:	40014800 	.word	0x40014800

08009b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b087      	sub	sp, #28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	f023 0210 	bic.w	r2, r3, #16
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	4b34      	ldr	r3, [pc, #208]	; (8009c08 <TIM_OC2_SetConfig+0xfc>)
 8009b38:	4013      	ands	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	f023 0320 	bic.w	r3, r3, #32
 8009b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	011b      	lsls	r3, r3, #4
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a29      	ldr	r2, [pc, #164]	; (8009c0c <TIM_OC2_SetConfig+0x100>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d003      	beq.n	8009b74 <TIM_OC2_SetConfig+0x68>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a28      	ldr	r2, [pc, #160]	; (8009c10 <TIM_OC2_SetConfig+0x104>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d10d      	bne.n	8009b90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	011b      	lsls	r3, r3, #4
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a1e      	ldr	r2, [pc, #120]	; (8009c0c <TIM_OC2_SetConfig+0x100>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d00f      	beq.n	8009bb8 <TIM_OC2_SetConfig+0xac>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a1d      	ldr	r2, [pc, #116]	; (8009c10 <TIM_OC2_SetConfig+0x104>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d00b      	beq.n	8009bb8 <TIM_OC2_SetConfig+0xac>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a1c      	ldr	r2, [pc, #112]	; (8009c14 <TIM_OC2_SetConfig+0x108>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d007      	beq.n	8009bb8 <TIM_OC2_SetConfig+0xac>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a1b      	ldr	r2, [pc, #108]	; (8009c18 <TIM_OC2_SetConfig+0x10c>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d003      	beq.n	8009bb8 <TIM_OC2_SetConfig+0xac>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a1a      	ldr	r2, [pc, #104]	; (8009c1c <TIM_OC2_SetConfig+0x110>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d113      	bne.n	8009be0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	621a      	str	r2, [r3, #32]
}
 8009bfa:	bf00      	nop
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	feff8fff 	.word	0xfeff8fff
 8009c0c:	40010000 	.word	0x40010000
 8009c10:	40010400 	.word	0x40010400
 8009c14:	40014000 	.word	0x40014000
 8009c18:	40014400 	.word	0x40014400
 8009c1c:	40014800 	.word	0x40014800

08009c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	4b33      	ldr	r3, [pc, #204]	; (8009d18 <TIM_OC3_SetConfig+0xf8>)
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f023 0303 	bic.w	r3, r3, #3
 8009c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	021b      	lsls	r3, r3, #8
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a28      	ldr	r2, [pc, #160]	; (8009d1c <TIM_OC3_SetConfig+0xfc>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d003      	beq.n	8009c86 <TIM_OC3_SetConfig+0x66>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a27      	ldr	r2, [pc, #156]	; (8009d20 <TIM_OC3_SetConfig+0x100>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d10d      	bne.n	8009ca2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	021b      	lsls	r3, r3, #8
 8009c94:	697a      	ldr	r2, [r7, #20]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a1d      	ldr	r2, [pc, #116]	; (8009d1c <TIM_OC3_SetConfig+0xfc>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00f      	beq.n	8009cca <TIM_OC3_SetConfig+0xaa>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a1c      	ldr	r2, [pc, #112]	; (8009d20 <TIM_OC3_SetConfig+0x100>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d00b      	beq.n	8009cca <TIM_OC3_SetConfig+0xaa>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a1b      	ldr	r2, [pc, #108]	; (8009d24 <TIM_OC3_SetConfig+0x104>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d007      	beq.n	8009cca <TIM_OC3_SetConfig+0xaa>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a1a      	ldr	r2, [pc, #104]	; (8009d28 <TIM_OC3_SetConfig+0x108>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d003      	beq.n	8009cca <TIM_OC3_SetConfig+0xaa>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a19      	ldr	r2, [pc, #100]	; (8009d2c <TIM_OC3_SetConfig+0x10c>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d113      	bne.n	8009cf2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	621a      	str	r2, [r3, #32]
}
 8009d0c:	bf00      	nop
 8009d0e:	371c      	adds	r7, #28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	fffeff8f 	.word	0xfffeff8f
 8009d1c:	40010000 	.word	0x40010000
 8009d20:	40010400 	.word	0x40010400
 8009d24:	40014000 	.word	0x40014000
 8009d28:	40014400 	.word	0x40014400
 8009d2c:	40014800 	.word	0x40014800

08009d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4b24      	ldr	r3, [pc, #144]	; (8009dec <TIM_OC4_SetConfig+0xbc>)
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	031b      	lsls	r3, r3, #12
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a19      	ldr	r2, [pc, #100]	; (8009df0 <TIM_OC4_SetConfig+0xc0>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d00f      	beq.n	8009db0 <TIM_OC4_SetConfig+0x80>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a18      	ldr	r2, [pc, #96]	; (8009df4 <TIM_OC4_SetConfig+0xc4>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d00b      	beq.n	8009db0 <TIM_OC4_SetConfig+0x80>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a17      	ldr	r2, [pc, #92]	; (8009df8 <TIM_OC4_SetConfig+0xc8>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d007      	beq.n	8009db0 <TIM_OC4_SetConfig+0x80>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a16      	ldr	r2, [pc, #88]	; (8009dfc <TIM_OC4_SetConfig+0xcc>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d003      	beq.n	8009db0 <TIM_OC4_SetConfig+0x80>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a15      	ldr	r2, [pc, #84]	; (8009e00 <TIM_OC4_SetConfig+0xd0>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d109      	bne.n	8009dc4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009db6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	019b      	lsls	r3, r3, #6
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	621a      	str	r2, [r3, #32]
}
 8009dde:	bf00      	nop
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	feff8fff 	.word	0xfeff8fff
 8009df0:	40010000 	.word	0x40010000
 8009df4:	40010400 	.word	0x40010400
 8009df8:	40014000 	.word	0x40014000
 8009dfc:	40014400 	.word	0x40014400
 8009e00:	40014800 	.word	0x40014800

08009e04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4b21      	ldr	r3, [pc, #132]	; (8009eb4 <TIM_OC5_SetConfig+0xb0>)
 8009e30:	4013      	ands	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	041b      	lsls	r3, r3, #16
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a18      	ldr	r2, [pc, #96]	; (8009eb8 <TIM_OC5_SetConfig+0xb4>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d00f      	beq.n	8009e7a <TIM_OC5_SetConfig+0x76>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a17      	ldr	r2, [pc, #92]	; (8009ebc <TIM_OC5_SetConfig+0xb8>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d00b      	beq.n	8009e7a <TIM_OC5_SetConfig+0x76>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a16      	ldr	r2, [pc, #88]	; (8009ec0 <TIM_OC5_SetConfig+0xbc>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d007      	beq.n	8009e7a <TIM_OC5_SetConfig+0x76>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a15      	ldr	r2, [pc, #84]	; (8009ec4 <TIM_OC5_SetConfig+0xc0>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d003      	beq.n	8009e7a <TIM_OC5_SetConfig+0x76>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a14      	ldr	r2, [pc, #80]	; (8009ec8 <TIM_OC5_SetConfig+0xc4>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d109      	bne.n	8009e8e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	021b      	lsls	r3, r3, #8
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	621a      	str	r2, [r3, #32]
}
 8009ea8:	bf00      	nop
 8009eaa:	371c      	adds	r7, #28
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	fffeff8f 	.word	0xfffeff8f
 8009eb8:	40010000 	.word	0x40010000
 8009ebc:	40010400 	.word	0x40010400
 8009ec0:	40014000 	.word	0x40014000
 8009ec4:	40014400 	.word	0x40014400
 8009ec8:	40014800 	.word	0x40014800

08009ecc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b087      	sub	sp, #28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	4b22      	ldr	r3, [pc, #136]	; (8009f80 <TIM_OC6_SetConfig+0xb4>)
 8009ef8:	4013      	ands	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	021b      	lsls	r3, r3, #8
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	051b      	lsls	r3, r3, #20
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a19      	ldr	r2, [pc, #100]	; (8009f84 <TIM_OC6_SetConfig+0xb8>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d00f      	beq.n	8009f44 <TIM_OC6_SetConfig+0x78>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a18      	ldr	r2, [pc, #96]	; (8009f88 <TIM_OC6_SetConfig+0xbc>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d00b      	beq.n	8009f44 <TIM_OC6_SetConfig+0x78>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a17      	ldr	r2, [pc, #92]	; (8009f8c <TIM_OC6_SetConfig+0xc0>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d007      	beq.n	8009f44 <TIM_OC6_SetConfig+0x78>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a16      	ldr	r2, [pc, #88]	; (8009f90 <TIM_OC6_SetConfig+0xc4>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d003      	beq.n	8009f44 <TIM_OC6_SetConfig+0x78>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a15      	ldr	r2, [pc, #84]	; (8009f94 <TIM_OC6_SetConfig+0xc8>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d109      	bne.n	8009f58 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	029b      	lsls	r3, r3, #10
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	621a      	str	r2, [r3, #32]
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	feff8fff 	.word	0xfeff8fff
 8009f84:	40010000 	.word	0x40010000
 8009f88:	40010400 	.word	0x40010400
 8009f8c:	40014000 	.word	0x40014000
 8009f90:	40014400 	.word	0x40014400
 8009f94:	40014800 	.word	0x40014800

08009f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6a1b      	ldr	r3, [r3, #32]
 8009fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	f023 0201 	bic.w	r2, r3, #1
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	011b      	lsls	r3, r3, #4
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f023 030a 	bic.w	r3, r3, #10
 8009fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	621a      	str	r2, [r3, #32]
}
 8009fea:	bf00      	nop
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b087      	sub	sp, #28
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	60f8      	str	r0, [r7, #12]
 8009ffe:	60b9      	str	r1, [r7, #8]
 800a000:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	f023 0210 	bic.w	r2, r3, #16
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	031b      	lsls	r3, r3, #12
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	4313      	orrs	r3, r2
 800a02a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a032:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	011b      	lsls	r3, r3, #4
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	697a      	ldr	r2, [r7, #20]
 800a042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	621a      	str	r2, [r3, #32]
}
 800a04a:	bf00      	nop
 800a04c:	371c      	adds	r7, #28
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
	...

0800a058 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	4b09      	ldr	r3, [pc, #36]	; (800a090 <TIM_ITRx_SetConfig+0x38>)
 800a06c:	4013      	ands	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4313      	orrs	r3, r2
 800a076:	f043 0307 	orr.w	r3, r3, #7
 800a07a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	609a      	str	r2, [r3, #8]
}
 800a082:	bf00      	nop
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	ffcfff8f 	.word	0xffcfff8f

0800a094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a094:	b480      	push	{r7}
 800a096:	b087      	sub	sp, #28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
 800a0a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	021a      	lsls	r2, r3, #8
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	609a      	str	r2, [r3, #8]
}
 800a0c8:	bf00      	nop
 800a0ca:	371c      	adds	r7, #28
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f003 031f 	and.w	r3, r3, #31
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a1a      	ldr	r2, [r3, #32]
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	43db      	mvns	r3, r3
 800a0f6:	401a      	ands	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6a1a      	ldr	r2, [r3, #32]
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	f003 031f 	and.w	r3, r3, #31
 800a106:	6879      	ldr	r1, [r7, #4]
 800a108:	fa01 f303 	lsl.w	r3, r1, r3
 800a10c:	431a      	orrs	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	621a      	str	r2, [r3, #32]
}
 800a112:	bf00      	nop
 800a114:	371c      	adds	r7, #28
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
	...

0800a120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a130:	2b01      	cmp	r3, #1
 800a132:	d101      	bne.n	800a138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a134:	2302      	movs	r3, #2
 800a136:	e077      	b.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2202      	movs	r2, #2
 800a144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a35      	ldr	r2, [pc, #212]	; (800a234 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d004      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a34      	ldr	r2, [pc, #208]	; (800a238 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d108      	bne.n	800a17e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a172:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a184:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a25      	ldr	r2, [pc, #148]	; (800a234 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d02c      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1aa:	d027      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a22      	ldr	r2, [pc, #136]	; (800a23c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d022      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a21      	ldr	r2, [pc, #132]	; (800a240 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d01d      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a1f      	ldr	r2, [pc, #124]	; (800a244 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d018      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a1a      	ldr	r2, [pc, #104]	; (800a238 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d013      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a1b      	ldr	r2, [pc, #108]	; (800a248 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d00e      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a1a      	ldr	r2, [pc, #104]	; (800a24c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d009      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a18      	ldr	r2, [pc, #96]	; (800a250 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d004      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a17      	ldr	r2, [pc, #92]	; (800a254 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d10c      	bne.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a202:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	40010000 	.word	0x40010000
 800a238:	40010400 	.word	0x40010400
 800a23c:	40000400 	.word	0x40000400
 800a240:	40000800 	.word	0x40000800
 800a244:	40000c00 	.word	0x40000c00
 800a248:	40001800 	.word	0x40001800
 800a24c:	40014000 	.word	0x40014000
 800a250:	4000e000 	.word	0x4000e000
 800a254:	4000e400 	.word	0x4000e400

0800a258 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d101      	bne.n	800a274 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a270:	2302      	movs	r3, #2
 800a272:	e087      	b.n	800a384 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	4313      	orrs	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	4313      	orrs	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	041b      	lsls	r3, r3, #16
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a27      	ldr	r2, [pc, #156]	; (800a390 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d004      	beq.n	800a302 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a25      	ldr	r2, [pc, #148]	; (800a394 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d106      	bne.n	800a310 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a1e      	ldr	r2, [pc, #120]	; (800a390 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d004      	beq.n	800a324 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a1d      	ldr	r2, [pc, #116]	; (800a394 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d126      	bne.n	800a372 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32e:	051b      	lsls	r3, r3, #20
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	4313      	orrs	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a0e      	ldr	r2, [pc, #56]	; (800a390 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d004      	beq.n	800a364 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a0d      	ldr	r2, [pc, #52]	; (800a394 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d106      	bne.n	800a372 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36e:	4313      	orrs	r3, r2
 800a370:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	40010000 	.word	0x40010000
 800a394:	40010400 	.word	0x40010400

0800a398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e042      	b.n	800a430 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d106      	bne.n	800a3c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7f8 fe25 	bl	800300c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2224      	movs	r2, #36	; 0x24
 800a3c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f022 0201 	bic.w	r2, r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fd4a 	bl	800ae74 <UART_SetConfig>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d101      	bne.n	800a3ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e022      	b.n	800a430 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f001 fb9c 	bl	800bb30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	689a      	ldr	r2, [r3, #8]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f042 0201 	orr.w	r2, r2, #1
 800a426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f001 fc23 	bl	800bc74 <UART_CheckIdleState>
 800a42e:	4603      	mov	r3, r0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08a      	sub	sp, #40	; 0x28
 800a43c:	af02      	add	r7, sp, #8
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	603b      	str	r3, [r7, #0]
 800a444:	4613      	mov	r3, r2
 800a446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a44e:	2b20      	cmp	r3, #32
 800a450:	f040 8083 	bne.w	800a55a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <HAL_UART_Transmit+0x28>
 800a45a:	88fb      	ldrh	r3, [r7, #6]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	e07b      	b.n	800a55c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d101      	bne.n	800a472 <HAL_UART_Transmit+0x3a>
 800a46e:	2302      	movs	r3, #2
 800a470:	e074      	b.n	800a55c <HAL_UART_Transmit+0x124>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2221      	movs	r2, #33	; 0x21
 800a486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a48a:	f7f8 ffc1 	bl	8003410 <HAL_GetTick>
 800a48e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	88fa      	ldrh	r2, [r7, #6]
 800a494:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	88fa      	ldrh	r2, [r7, #6]
 800a49c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4a8:	d108      	bne.n	800a4bc <HAL_UART_Transmit+0x84>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d104      	bne.n	800a4bc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	61bb      	str	r3, [r7, #24]
 800a4ba:	e003      	b.n	800a4c4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a4cc:	e02c      	b.n	800a528 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2180      	movs	r1, #128	; 0x80
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f001 fc16 	bl	800bd0a <UART_WaitOnFlagUntilTimeout>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e039      	b.n	800a55c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10b      	bne.n	800a506 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	3302      	adds	r3, #2
 800a502:	61bb      	str	r3, [r7, #24]
 800a504:	e007      	b.n	800a516 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	781a      	ldrb	r2, [r3, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	3301      	adds	r3, #1
 800a514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	3b01      	subs	r3, #1
 800a520:	b29a      	uxth	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a52e:	b29b      	uxth	r3, r3
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1cc      	bne.n	800a4ce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	2200      	movs	r2, #0
 800a53c:	2140      	movs	r1, #64	; 0x40
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f001 fbe3 	bl	800bd0a <UART_WaitOnFlagUntilTimeout>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e006      	b.n	800a55c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2220      	movs	r2, #32
 800a552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	e000      	b.n	800a55c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a55a:	2302      	movs	r3, #2
  }
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3720      	adds	r7, #32
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08a      	sub	sp, #40	; 0x28
 800a568:	af02      	add	r7, sp, #8
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	603b      	str	r3, [r7, #0]
 800a570:	4613      	mov	r3, r2
 800a572:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57a:	2b20      	cmp	r3, #32
 800a57c:	f040 80c0 	bne.w	800a700 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d002      	beq.n	800a58c <HAL_UART_Receive+0x28>
 800a586:	88fb      	ldrh	r3, [r7, #6]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e0b8      	b.n	800a702 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a596:	2b01      	cmp	r3, #1
 800a598:	d101      	bne.n	800a59e <HAL_UART_Receive+0x3a>
 800a59a:	2302      	movs	r3, #2
 800a59c:	e0b1      	b.n	800a702 <HAL_UART_Receive+0x19e>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2222      	movs	r2, #34	; 0x22
 800a5b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5bc:	f7f8 ff28 	bl	8003410 <HAL_GetTick>
 800a5c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	88fa      	ldrh	r2, [r7, #6]
 800a5c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	88fa      	ldrh	r2, [r7, #6]
 800a5ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5da:	d10e      	bne.n	800a5fa <HAL_UART_Receive+0x96>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d105      	bne.n	800a5f0 <HAL_UART_Receive+0x8c>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a5ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a5ee:	e02d      	b.n	800a64c <HAL_UART_Receive+0xe8>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	22ff      	movs	r2, #255	; 0xff
 800a5f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a5f8:	e028      	b.n	800a64c <HAL_UART_Receive+0xe8>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10d      	bne.n	800a61e <HAL_UART_Receive+0xba>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d104      	bne.n	800a614 <HAL_UART_Receive+0xb0>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	22ff      	movs	r2, #255	; 0xff
 800a60e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a612:	e01b      	b.n	800a64c <HAL_UART_Receive+0xe8>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	227f      	movs	r2, #127	; 0x7f
 800a618:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a61c:	e016      	b.n	800a64c <HAL_UART_Receive+0xe8>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a626:	d10d      	bne.n	800a644 <HAL_UART_Receive+0xe0>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d104      	bne.n	800a63a <HAL_UART_Receive+0xd6>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	227f      	movs	r2, #127	; 0x7f
 800a634:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a638:	e008      	b.n	800a64c <HAL_UART_Receive+0xe8>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	223f      	movs	r2, #63	; 0x3f
 800a63e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a642:	e003      	b.n	800a64c <HAL_UART_Receive+0xe8>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a652:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a65c:	d108      	bne.n	800a670 <HAL_UART_Receive+0x10c>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d104      	bne.n	800a670 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800a666:	2300      	movs	r3, #0
 800a668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	61bb      	str	r3, [r7, #24]
 800a66e:	e003      	b.n	800a678 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a674:	2300      	movs	r3, #0
 800a676:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a680:	e032      	b.n	800a6e8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2200      	movs	r2, #0
 800a68a:	2120      	movs	r1, #32
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f001 fb3c 	bl	800bd0a <UART_WaitOnFlagUntilTimeout>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d001      	beq.n	800a69c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800a698:	2303      	movs	r3, #3
 800a69a:	e032      	b.n	800a702 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10c      	bne.n	800a6bc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	8a7b      	ldrh	r3, [r7, #18]
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	3302      	adds	r3, #2
 800a6b8:	61bb      	str	r3, [r7, #24]
 800a6ba:	e00c      	b.n	800a6d6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	8a7b      	ldrh	r3, [r7, #18]
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1c6      	bne.n	800a682 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e000      	b.n	800a702 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800a700:	2302      	movs	r3, #2
  }
}
 800a702:	4618      	mov	r0, r3
 800a704:	3720      	adds	r7, #32
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b0ba      	sub	sp, #232	; 0xe8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a732:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a736:	f640 030f 	movw	r3, #2063	; 0x80f
 800a73a:	4013      	ands	r3, r2
 800a73c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a744:	2b00      	cmp	r3, #0
 800a746:	d11b      	bne.n	800a780 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a74c:	f003 0320 	and.w	r3, r3, #32
 800a750:	2b00      	cmp	r3, #0
 800a752:	d015      	beq.n	800a780 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a758:	f003 0320 	and.w	r3, r3, #32
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d105      	bne.n	800a76c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d009      	beq.n	800a780 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a770:	2b00      	cmp	r3, #0
 800a772:	f000 835a 	beq.w	800ae2a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	4798      	blx	r3
      }
      return;
 800a77e:	e354      	b.n	800ae2a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 811f 	beq.w	800a9c8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a78a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a78e:	4b8b      	ldr	r3, [pc, #556]	; (800a9bc <HAL_UART_IRQHandler+0x2b0>)
 800a790:	4013      	ands	r3, r2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d106      	bne.n	800a7a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a796:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a79a:	4b89      	ldr	r3, [pc, #548]	; (800a9c0 <HAL_UART_IRQHandler+0x2b4>)
 800a79c:	4013      	ands	r3, r2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 8112 	beq.w	800a9c8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d011      	beq.n	800a7d4 <HAL_UART_IRQHandler+0xc8>
 800a7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00b      	beq.n	800a7d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7ca:	f043 0201 	orr.w	r2, r3, #1
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7d8:	f003 0302 	and.w	r3, r3, #2
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d011      	beq.n	800a804 <HAL_UART_IRQHandler+0xf8>
 800a7e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7e4:	f003 0301 	and.w	r3, r3, #1
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00b      	beq.n	800a804 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2202      	movs	r2, #2
 800a7f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7fa:	f043 0204 	orr.w	r2, r3, #4
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a808:	f003 0304 	and.w	r3, r3, #4
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d011      	beq.n	800a834 <HAL_UART_IRQHandler+0x128>
 800a810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00b      	beq.n	800a834 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2204      	movs	r2, #4
 800a822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a82a:	f043 0202 	orr.w	r2, r3, #2
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a838:	f003 0308 	and.w	r3, r3, #8
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d017      	beq.n	800a870 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a844:	f003 0320 	and.w	r3, r3, #32
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d105      	bne.n	800a858 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a84c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a850:	4b5a      	ldr	r3, [pc, #360]	; (800a9bc <HAL_UART_IRQHandler+0x2b0>)
 800a852:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00b      	beq.n	800a870 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2208      	movs	r2, #8
 800a85e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a866:	f043 0208 	orr.w	r2, r3, #8
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d012      	beq.n	800a8a2 <HAL_UART_IRQHandler+0x196>
 800a87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00c      	beq.n	800a8a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a898:	f043 0220 	orr.w	r2, r3, #32
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 82c0 	beq.w	800ae2e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8b2:	f003 0320 	and.w	r3, r3, #32
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d013      	beq.n	800a8e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a8ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8be:	f003 0320 	and.w	r3, r3, #32
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d105      	bne.n	800a8d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a8c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d007      	beq.n	800a8e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8f6:	2b40      	cmp	r3, #64	; 0x40
 800a8f8:	d005      	beq.n	800a906 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a8fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a902:	2b00      	cmp	r3, #0
 800a904:	d04f      	beq.n	800a9a6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 fac8 	bl	800be9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a916:	2b40      	cmp	r3, #64	; 0x40
 800a918:	d141      	bne.n	800a99e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3308      	adds	r3, #8
 800a920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a928:	e853 3f00 	ldrex	r3, [r3]
 800a92c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	3308      	adds	r3, #8
 800a942:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a946:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a94a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a952:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a956:	e841 2300 	strex	r3, r2, [r1]
 800a95a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a95e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1d9      	bne.n	800a91a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d013      	beq.n	800a996 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a972:	4a14      	ldr	r2, [pc, #80]	; (800a9c4 <HAL_UART_IRQHandler+0x2b8>)
 800a974:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fa fdda 	bl	8005534 <HAL_DMA_Abort_IT>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d017      	beq.n	800a9b6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a990:	4610      	mov	r0, r2
 800a992:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a994:	e00f      	b.n	800a9b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fa56 	bl	800ae48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a99c:	e00b      	b.n	800a9b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fa52 	bl	800ae48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a4:	e007      	b.n	800a9b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fa4e 	bl	800ae48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a9b4:	e23b      	b.n	800ae2e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9b6:	bf00      	nop
    return;
 800a9b8:	e239      	b.n	800ae2e <HAL_UART_IRQHandler+0x722>
 800a9ba:	bf00      	nop
 800a9bc:	10000001 	.word	0x10000001
 800a9c0:	04000120 	.word	0x04000120
 800a9c4:	0800bf69 	.word	0x0800bf69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	f040 81ce 	bne.w	800ad6e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9d6:	f003 0310 	and.w	r3, r3, #16
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 81c7 	beq.w	800ad6e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9e4:	f003 0310 	and.w	r3, r3, #16
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f000 81c0 	beq.w	800ad6e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2210      	movs	r2, #16
 800a9f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa00:	2b40      	cmp	r3, #64	; 0x40
 800aa02:	f040 813b 	bne.w	800ac7c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a8b      	ldr	r2, [pc, #556]	; (800ac3c <HAL_UART_IRQHandler+0x530>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d059      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a89      	ldr	r2, [pc, #548]	; (800ac40 <HAL_UART_IRQHandler+0x534>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d053      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a87      	ldr	r2, [pc, #540]	; (800ac44 <HAL_UART_IRQHandler+0x538>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d04d      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a85      	ldr	r2, [pc, #532]	; (800ac48 <HAL_UART_IRQHandler+0x53c>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d047      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a83      	ldr	r2, [pc, #524]	; (800ac4c <HAL_UART_IRQHandler+0x540>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d041      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a81      	ldr	r2, [pc, #516]	; (800ac50 <HAL_UART_IRQHandler+0x544>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d03b      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a7f      	ldr	r2, [pc, #508]	; (800ac54 <HAL_UART_IRQHandler+0x548>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d035      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a7d      	ldr	r2, [pc, #500]	; (800ac58 <HAL_UART_IRQHandler+0x54c>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d02f      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a7b      	ldr	r2, [pc, #492]	; (800ac5c <HAL_UART_IRQHandler+0x550>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d029      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a79      	ldr	r2, [pc, #484]	; (800ac60 <HAL_UART_IRQHandler+0x554>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d023      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a77      	ldr	r2, [pc, #476]	; (800ac64 <HAL_UART_IRQHandler+0x558>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d01d      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a75      	ldr	r2, [pc, #468]	; (800ac68 <HAL_UART_IRQHandler+0x55c>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d017      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a73      	ldr	r2, [pc, #460]	; (800ac6c <HAL_UART_IRQHandler+0x560>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d011      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a71      	ldr	r2, [pc, #452]	; (800ac70 <HAL_UART_IRQHandler+0x564>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00b      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a6f      	ldr	r2, [pc, #444]	; (800ac74 <HAL_UART_IRQHandler+0x568>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d005      	beq.n	800aac6 <HAL_UART_IRQHandler+0x3ba>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a6d      	ldr	r2, [pc, #436]	; (800ac78 <HAL_UART_IRQHandler+0x56c>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d105      	bne.n	800aad2 <HAL_UART_IRQHandler+0x3c6>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	e004      	b.n	800aadc <HAL_UART_IRQHandler+0x3d0>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	b29b      	uxth	r3, r3
 800aadc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aae0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 81a4 	beq.w	800ae32 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aaf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	f080 819c 	bcs.w	800ae32 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab0e:	f000 8086 	beq.w	800ac1e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ab26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	461a      	mov	r2, r3
 800ab38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ab3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ab48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ab54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1da      	bne.n	800ab12 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3308      	adds	r3, #8
 800ab62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab66:	e853 3f00 	ldrex	r3, [r3]
 800ab6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ab6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab6e:	f023 0301 	bic.w	r3, r3, #1
 800ab72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3308      	adds	r3, #8
 800ab7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ab80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ab84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ab88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ab8c:	e841 2300 	strex	r3, r2, [r1]
 800ab90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ab92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1e1      	bne.n	800ab5c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3308      	adds	r3, #8
 800ab9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aba2:	e853 3f00 	ldrex	r3, [r3]
 800aba6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3308      	adds	r3, #8
 800abb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800abbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800abbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800abc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800abc4:	e841 2300 	strex	r3, r2, [r1]
 800abc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800abca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1e3      	bne.n	800ab98 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2220      	movs	r2, #32
 800abd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abe6:	e853 3f00 	ldrex	r3, [r3]
 800abea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800abec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abee:	f023 0310 	bic.w	r3, r3, #16
 800abf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	461a      	mov	r2, r3
 800abfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac00:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac08:	e841 2300 	strex	r3, r2, [r1]
 800ac0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1e4      	bne.n	800abde <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fa f96d 	bl	8004ef8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	4619      	mov	r1, r3
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f912 	bl	800ae5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac38:	e0fb      	b.n	800ae32 <HAL_UART_IRQHandler+0x726>
 800ac3a:	bf00      	nop
 800ac3c:	40020010 	.word	0x40020010
 800ac40:	40020028 	.word	0x40020028
 800ac44:	40020040 	.word	0x40020040
 800ac48:	40020058 	.word	0x40020058
 800ac4c:	40020070 	.word	0x40020070
 800ac50:	40020088 	.word	0x40020088
 800ac54:	400200a0 	.word	0x400200a0
 800ac58:	400200b8 	.word	0x400200b8
 800ac5c:	40020410 	.word	0x40020410
 800ac60:	40020428 	.word	0x40020428
 800ac64:	40020440 	.word	0x40020440
 800ac68:	40020458 	.word	0x40020458
 800ac6c:	40020470 	.word	0x40020470
 800ac70:	40020488 	.word	0x40020488
 800ac74:	400204a0 	.word	0x400204a0
 800ac78:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 80cc 	beq.w	800ae36 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ac9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 80c7 	beq.w	800ae36 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	e853 3f00 	ldrex	r3, [r3]
 800acb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acca:	647b      	str	r3, [r7, #68]	; 0x44
 800accc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800acd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acd2:	e841 2300 	strex	r3, r2, [r1]
 800acd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1e4      	bne.n	800aca8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3308      	adds	r3, #8
 800ace4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	e853 3f00 	ldrex	r3, [r3]
 800acec:	623b      	str	r3, [r7, #32]
   return(result);
 800acee:	6a3a      	ldr	r2, [r7, #32]
 800acf0:	4b54      	ldr	r3, [pc, #336]	; (800ae44 <HAL_UART_IRQHandler+0x738>)
 800acf2:	4013      	ands	r3, r2
 800acf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3308      	adds	r3, #8
 800acfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ad02:	633a      	str	r2, [r7, #48]	; 0x30
 800ad04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad0a:	e841 2300 	strex	r3, r2, [r1]
 800ad0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1e3      	bne.n	800acde <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2220      	movs	r2, #32
 800ad1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	e853 3f00 	ldrex	r3, [r3]
 800ad36:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f023 0310 	bic.w	r3, r3, #16
 800ad3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ad4c:	61fb      	str	r3, [r7, #28]
 800ad4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad50:	69b9      	ldr	r1, [r7, #24]
 800ad52:	69fa      	ldr	r2, [r7, #28]
 800ad54:	e841 2300 	strex	r3, r2, [r1]
 800ad58:	617b      	str	r3, [r7, #20]
   return(result);
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1e4      	bne.n	800ad2a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ad60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f878 	bl	800ae5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad6c:	e063      	b.n	800ae36 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00e      	beq.n	800ad98 <HAL_UART_IRQHandler+0x68c>
 800ad7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d008      	beq.n	800ad98 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ad8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f001 f92a 	bl	800bfea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad96:	e051      	b.n	800ae3c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ad98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d014      	beq.n	800adce <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ada4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ada8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adac:	2b00      	cmp	r3, #0
 800adae:	d105      	bne.n	800adbc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800adb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d008      	beq.n	800adce <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d03a      	beq.n	800ae3a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	4798      	blx	r3
    }
    return;
 800adcc:	e035      	b.n	800ae3a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800adce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800add2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add6:	2b00      	cmp	r3, #0
 800add8:	d009      	beq.n	800adee <HAL_UART_IRQHandler+0x6e2>
 800adda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d003      	beq.n	800adee <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f001 f8d4 	bl	800bf94 <UART_EndTransmit_IT>
    return;
 800adec:	e026      	b.n	800ae3c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800adee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d009      	beq.n	800ae0e <HAL_UART_IRQHandler+0x702>
 800adfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adfe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f001 f903 	bl	800c012 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae0c:	e016      	b.n	800ae3c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ae0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d010      	beq.n	800ae3c <HAL_UART_IRQHandler+0x730>
 800ae1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	da0c      	bge.n	800ae3c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f001 f8eb 	bl	800bffe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae28:	e008      	b.n	800ae3c <HAL_UART_IRQHandler+0x730>
      return;
 800ae2a:	bf00      	nop
 800ae2c:	e006      	b.n	800ae3c <HAL_UART_IRQHandler+0x730>
    return;
 800ae2e:	bf00      	nop
 800ae30:	e004      	b.n	800ae3c <HAL_UART_IRQHandler+0x730>
      return;
 800ae32:	bf00      	nop
 800ae34:	e002      	b.n	800ae3c <HAL_UART_IRQHandler+0x730>
      return;
 800ae36:	bf00      	nop
 800ae38:	e000      	b.n	800ae3c <HAL_UART_IRQHandler+0x730>
    return;
 800ae3a:	bf00      	nop
  }
}
 800ae3c:	37e8      	adds	r7, #232	; 0xe8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	effffffe 	.word	0xeffffffe

0800ae48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae74:	b5b0      	push	{r4, r5, r7, lr}
 800ae76:	b08e      	sub	sp, #56	; 0x38
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	689a      	ldr	r2, [r3, #8]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	431a      	orrs	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	695b      	ldr	r3, [r3, #20]
 800ae90:	431a      	orrs	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	69db      	ldr	r3, [r3, #28]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	4bbf      	ldr	r3, [pc, #764]	; (800b1a0 <UART_SetConfig+0x32c>)
 800aea2:	4013      	ands	r3, r2
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	6812      	ldr	r2, [r2, #0]
 800aea8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aeaa:	430b      	orrs	r3, r1
 800aeac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68da      	ldr	r2, [r3, #12]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	430a      	orrs	r2, r1
 800aec2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4ab5      	ldr	r2, [pc, #724]	; (800b1a4 <UART_SetConfig+0x330>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d004      	beq.n	800aede <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a1b      	ldr	r3, [r3, #32]
 800aed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeda:	4313      	orrs	r3, r2
 800aedc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	689a      	ldr	r2, [r3, #8]
 800aee4:	4bb0      	ldr	r3, [pc, #704]	; (800b1a8 <UART_SetConfig+0x334>)
 800aee6:	4013      	ands	r3, r2
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	6812      	ldr	r2, [r2, #0]
 800aeec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aeee:	430b      	orrs	r3, r1
 800aef0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef8:	f023 010f 	bic.w	r1, r3, #15
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	430a      	orrs	r2, r1
 800af06:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4aa7      	ldr	r2, [pc, #668]	; (800b1ac <UART_SetConfig+0x338>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d176      	bne.n	800b000 <UART_SetConfig+0x18c>
 800af12:	4ba7      	ldr	r3, [pc, #668]	; (800b1b0 <UART_SetConfig+0x33c>)
 800af14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af1a:	2b28      	cmp	r3, #40	; 0x28
 800af1c:	d86c      	bhi.n	800aff8 <UART_SetConfig+0x184>
 800af1e:	a201      	add	r2, pc, #4	; (adr r2, 800af24 <UART_SetConfig+0xb0>)
 800af20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af24:	0800afc9 	.word	0x0800afc9
 800af28:	0800aff9 	.word	0x0800aff9
 800af2c:	0800aff9 	.word	0x0800aff9
 800af30:	0800aff9 	.word	0x0800aff9
 800af34:	0800aff9 	.word	0x0800aff9
 800af38:	0800aff9 	.word	0x0800aff9
 800af3c:	0800aff9 	.word	0x0800aff9
 800af40:	0800aff9 	.word	0x0800aff9
 800af44:	0800afd1 	.word	0x0800afd1
 800af48:	0800aff9 	.word	0x0800aff9
 800af4c:	0800aff9 	.word	0x0800aff9
 800af50:	0800aff9 	.word	0x0800aff9
 800af54:	0800aff9 	.word	0x0800aff9
 800af58:	0800aff9 	.word	0x0800aff9
 800af5c:	0800aff9 	.word	0x0800aff9
 800af60:	0800aff9 	.word	0x0800aff9
 800af64:	0800afd9 	.word	0x0800afd9
 800af68:	0800aff9 	.word	0x0800aff9
 800af6c:	0800aff9 	.word	0x0800aff9
 800af70:	0800aff9 	.word	0x0800aff9
 800af74:	0800aff9 	.word	0x0800aff9
 800af78:	0800aff9 	.word	0x0800aff9
 800af7c:	0800aff9 	.word	0x0800aff9
 800af80:	0800aff9 	.word	0x0800aff9
 800af84:	0800afe1 	.word	0x0800afe1
 800af88:	0800aff9 	.word	0x0800aff9
 800af8c:	0800aff9 	.word	0x0800aff9
 800af90:	0800aff9 	.word	0x0800aff9
 800af94:	0800aff9 	.word	0x0800aff9
 800af98:	0800aff9 	.word	0x0800aff9
 800af9c:	0800aff9 	.word	0x0800aff9
 800afa0:	0800aff9 	.word	0x0800aff9
 800afa4:	0800afe9 	.word	0x0800afe9
 800afa8:	0800aff9 	.word	0x0800aff9
 800afac:	0800aff9 	.word	0x0800aff9
 800afb0:	0800aff9 	.word	0x0800aff9
 800afb4:	0800aff9 	.word	0x0800aff9
 800afb8:	0800aff9 	.word	0x0800aff9
 800afbc:	0800aff9 	.word	0x0800aff9
 800afc0:	0800aff9 	.word	0x0800aff9
 800afc4:	0800aff1 	.word	0x0800aff1
 800afc8:	2301      	movs	r3, #1
 800afca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afce:	e326      	b.n	800b61e <UART_SetConfig+0x7aa>
 800afd0:	2304      	movs	r3, #4
 800afd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afd6:	e322      	b.n	800b61e <UART_SetConfig+0x7aa>
 800afd8:	2308      	movs	r3, #8
 800afda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afde:	e31e      	b.n	800b61e <UART_SetConfig+0x7aa>
 800afe0:	2310      	movs	r3, #16
 800afe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe6:	e31a      	b.n	800b61e <UART_SetConfig+0x7aa>
 800afe8:	2320      	movs	r3, #32
 800afea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afee:	e316      	b.n	800b61e <UART_SetConfig+0x7aa>
 800aff0:	2340      	movs	r3, #64	; 0x40
 800aff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aff6:	e312      	b.n	800b61e <UART_SetConfig+0x7aa>
 800aff8:	2380      	movs	r3, #128	; 0x80
 800affa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affe:	e30e      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a6b      	ldr	r2, [pc, #428]	; (800b1b4 <UART_SetConfig+0x340>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d130      	bne.n	800b06c <UART_SetConfig+0x1f8>
 800b00a:	4b69      	ldr	r3, [pc, #420]	; (800b1b0 <UART_SetConfig+0x33c>)
 800b00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b00e:	f003 0307 	and.w	r3, r3, #7
 800b012:	2b05      	cmp	r3, #5
 800b014:	d826      	bhi.n	800b064 <UART_SetConfig+0x1f0>
 800b016:	a201      	add	r2, pc, #4	; (adr r2, 800b01c <UART_SetConfig+0x1a8>)
 800b018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01c:	0800b035 	.word	0x0800b035
 800b020:	0800b03d 	.word	0x0800b03d
 800b024:	0800b045 	.word	0x0800b045
 800b028:	0800b04d 	.word	0x0800b04d
 800b02c:	0800b055 	.word	0x0800b055
 800b030:	0800b05d 	.word	0x0800b05d
 800b034:	2300      	movs	r3, #0
 800b036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b03a:	e2f0      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b03c:	2304      	movs	r3, #4
 800b03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b042:	e2ec      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b044:	2308      	movs	r3, #8
 800b046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b04a:	e2e8      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b04c:	2310      	movs	r3, #16
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b052:	e2e4      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b054:	2320      	movs	r3, #32
 800b056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b05a:	e2e0      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b05c:	2340      	movs	r3, #64	; 0x40
 800b05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b062:	e2dc      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b064:	2380      	movs	r3, #128	; 0x80
 800b066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b06a:	e2d8      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a51      	ldr	r2, [pc, #324]	; (800b1b8 <UART_SetConfig+0x344>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d130      	bne.n	800b0d8 <UART_SetConfig+0x264>
 800b076:	4b4e      	ldr	r3, [pc, #312]	; (800b1b0 <UART_SetConfig+0x33c>)
 800b078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b07a:	f003 0307 	and.w	r3, r3, #7
 800b07e:	2b05      	cmp	r3, #5
 800b080:	d826      	bhi.n	800b0d0 <UART_SetConfig+0x25c>
 800b082:	a201      	add	r2, pc, #4	; (adr r2, 800b088 <UART_SetConfig+0x214>)
 800b084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b088:	0800b0a1 	.word	0x0800b0a1
 800b08c:	0800b0a9 	.word	0x0800b0a9
 800b090:	0800b0b1 	.word	0x0800b0b1
 800b094:	0800b0b9 	.word	0x0800b0b9
 800b098:	0800b0c1 	.word	0x0800b0c1
 800b09c:	0800b0c9 	.word	0x0800b0c9
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0a6:	e2ba      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b0a8:	2304      	movs	r3, #4
 800b0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ae:	e2b6      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b0b0:	2308      	movs	r3, #8
 800b0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0b6:	e2b2      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b0b8:	2310      	movs	r3, #16
 800b0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0be:	e2ae      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b0c0:	2320      	movs	r3, #32
 800b0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c6:	e2aa      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b0c8:	2340      	movs	r3, #64	; 0x40
 800b0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ce:	e2a6      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b0d0:	2380      	movs	r3, #128	; 0x80
 800b0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d6:	e2a2      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a37      	ldr	r2, [pc, #220]	; (800b1bc <UART_SetConfig+0x348>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d130      	bne.n	800b144 <UART_SetConfig+0x2d0>
 800b0e2:	4b33      	ldr	r3, [pc, #204]	; (800b1b0 <UART_SetConfig+0x33c>)
 800b0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0e6:	f003 0307 	and.w	r3, r3, #7
 800b0ea:	2b05      	cmp	r3, #5
 800b0ec:	d826      	bhi.n	800b13c <UART_SetConfig+0x2c8>
 800b0ee:	a201      	add	r2, pc, #4	; (adr r2, 800b0f4 <UART_SetConfig+0x280>)
 800b0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f4:	0800b10d 	.word	0x0800b10d
 800b0f8:	0800b115 	.word	0x0800b115
 800b0fc:	0800b11d 	.word	0x0800b11d
 800b100:	0800b125 	.word	0x0800b125
 800b104:	0800b12d 	.word	0x0800b12d
 800b108:	0800b135 	.word	0x0800b135
 800b10c:	2300      	movs	r3, #0
 800b10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b112:	e284      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b114:	2304      	movs	r3, #4
 800b116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b11a:	e280      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b11c:	2308      	movs	r3, #8
 800b11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b122:	e27c      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b124:	2310      	movs	r3, #16
 800b126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b12a:	e278      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b12c:	2320      	movs	r3, #32
 800b12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b132:	e274      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b134:	2340      	movs	r3, #64	; 0x40
 800b136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13a:	e270      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b13c:	2380      	movs	r3, #128	; 0x80
 800b13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b142:	e26c      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a1d      	ldr	r2, [pc, #116]	; (800b1c0 <UART_SetConfig+0x34c>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d142      	bne.n	800b1d4 <UART_SetConfig+0x360>
 800b14e:	4b18      	ldr	r3, [pc, #96]	; (800b1b0 <UART_SetConfig+0x33c>)
 800b150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b152:	f003 0307 	and.w	r3, r3, #7
 800b156:	2b05      	cmp	r3, #5
 800b158:	d838      	bhi.n	800b1cc <UART_SetConfig+0x358>
 800b15a:	a201      	add	r2, pc, #4	; (adr r2, 800b160 <UART_SetConfig+0x2ec>)
 800b15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b160:	0800b179 	.word	0x0800b179
 800b164:	0800b181 	.word	0x0800b181
 800b168:	0800b189 	.word	0x0800b189
 800b16c:	0800b191 	.word	0x0800b191
 800b170:	0800b199 	.word	0x0800b199
 800b174:	0800b1c5 	.word	0x0800b1c5
 800b178:	2300      	movs	r3, #0
 800b17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b17e:	e24e      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b180:	2304      	movs	r3, #4
 800b182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b186:	e24a      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b188:	2308      	movs	r3, #8
 800b18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b18e:	e246      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b190:	2310      	movs	r3, #16
 800b192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b196:	e242      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b198:	2320      	movs	r3, #32
 800b19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b19e:	e23e      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b1a0:	cfff69f3 	.word	0xcfff69f3
 800b1a4:	58000c00 	.word	0x58000c00
 800b1a8:	11fff4ff 	.word	0x11fff4ff
 800b1ac:	40011000 	.word	0x40011000
 800b1b0:	58024400 	.word	0x58024400
 800b1b4:	40004400 	.word	0x40004400
 800b1b8:	40004800 	.word	0x40004800
 800b1bc:	40004c00 	.word	0x40004c00
 800b1c0:	40005000 	.word	0x40005000
 800b1c4:	2340      	movs	r3, #64	; 0x40
 800b1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ca:	e228      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b1cc:	2380      	movs	r3, #128	; 0x80
 800b1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1d2:	e224      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4ab1      	ldr	r2, [pc, #708]	; (800b4a0 <UART_SetConfig+0x62c>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d176      	bne.n	800b2cc <UART_SetConfig+0x458>
 800b1de:	4bb1      	ldr	r3, [pc, #708]	; (800b4a4 <UART_SetConfig+0x630>)
 800b1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1e6:	2b28      	cmp	r3, #40	; 0x28
 800b1e8:	d86c      	bhi.n	800b2c4 <UART_SetConfig+0x450>
 800b1ea:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <UART_SetConfig+0x37c>)
 800b1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f0:	0800b295 	.word	0x0800b295
 800b1f4:	0800b2c5 	.word	0x0800b2c5
 800b1f8:	0800b2c5 	.word	0x0800b2c5
 800b1fc:	0800b2c5 	.word	0x0800b2c5
 800b200:	0800b2c5 	.word	0x0800b2c5
 800b204:	0800b2c5 	.word	0x0800b2c5
 800b208:	0800b2c5 	.word	0x0800b2c5
 800b20c:	0800b2c5 	.word	0x0800b2c5
 800b210:	0800b29d 	.word	0x0800b29d
 800b214:	0800b2c5 	.word	0x0800b2c5
 800b218:	0800b2c5 	.word	0x0800b2c5
 800b21c:	0800b2c5 	.word	0x0800b2c5
 800b220:	0800b2c5 	.word	0x0800b2c5
 800b224:	0800b2c5 	.word	0x0800b2c5
 800b228:	0800b2c5 	.word	0x0800b2c5
 800b22c:	0800b2c5 	.word	0x0800b2c5
 800b230:	0800b2a5 	.word	0x0800b2a5
 800b234:	0800b2c5 	.word	0x0800b2c5
 800b238:	0800b2c5 	.word	0x0800b2c5
 800b23c:	0800b2c5 	.word	0x0800b2c5
 800b240:	0800b2c5 	.word	0x0800b2c5
 800b244:	0800b2c5 	.word	0x0800b2c5
 800b248:	0800b2c5 	.word	0x0800b2c5
 800b24c:	0800b2c5 	.word	0x0800b2c5
 800b250:	0800b2ad 	.word	0x0800b2ad
 800b254:	0800b2c5 	.word	0x0800b2c5
 800b258:	0800b2c5 	.word	0x0800b2c5
 800b25c:	0800b2c5 	.word	0x0800b2c5
 800b260:	0800b2c5 	.word	0x0800b2c5
 800b264:	0800b2c5 	.word	0x0800b2c5
 800b268:	0800b2c5 	.word	0x0800b2c5
 800b26c:	0800b2c5 	.word	0x0800b2c5
 800b270:	0800b2b5 	.word	0x0800b2b5
 800b274:	0800b2c5 	.word	0x0800b2c5
 800b278:	0800b2c5 	.word	0x0800b2c5
 800b27c:	0800b2c5 	.word	0x0800b2c5
 800b280:	0800b2c5 	.word	0x0800b2c5
 800b284:	0800b2c5 	.word	0x0800b2c5
 800b288:	0800b2c5 	.word	0x0800b2c5
 800b28c:	0800b2c5 	.word	0x0800b2c5
 800b290:	0800b2bd 	.word	0x0800b2bd
 800b294:	2301      	movs	r3, #1
 800b296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b29a:	e1c0      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b29c:	2304      	movs	r3, #4
 800b29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2a2:	e1bc      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b2a4:	2308      	movs	r3, #8
 800b2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2aa:	e1b8      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b2ac:	2310      	movs	r3, #16
 800b2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2b2:	e1b4      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b2b4:	2320      	movs	r3, #32
 800b2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ba:	e1b0      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b2bc:	2340      	movs	r3, #64	; 0x40
 800b2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c2:	e1ac      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b2c4:	2380      	movs	r3, #128	; 0x80
 800b2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ca:	e1a8      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a75      	ldr	r2, [pc, #468]	; (800b4a8 <UART_SetConfig+0x634>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d130      	bne.n	800b338 <UART_SetConfig+0x4c4>
 800b2d6:	4b73      	ldr	r3, [pc, #460]	; (800b4a4 <UART_SetConfig+0x630>)
 800b2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2da:	f003 0307 	and.w	r3, r3, #7
 800b2de:	2b05      	cmp	r3, #5
 800b2e0:	d826      	bhi.n	800b330 <UART_SetConfig+0x4bc>
 800b2e2:	a201      	add	r2, pc, #4	; (adr r2, 800b2e8 <UART_SetConfig+0x474>)
 800b2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e8:	0800b301 	.word	0x0800b301
 800b2ec:	0800b309 	.word	0x0800b309
 800b2f0:	0800b311 	.word	0x0800b311
 800b2f4:	0800b319 	.word	0x0800b319
 800b2f8:	0800b321 	.word	0x0800b321
 800b2fc:	0800b329 	.word	0x0800b329
 800b300:	2300      	movs	r3, #0
 800b302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b306:	e18a      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b308:	2304      	movs	r3, #4
 800b30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b30e:	e186      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b310:	2308      	movs	r3, #8
 800b312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b316:	e182      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b318:	2310      	movs	r3, #16
 800b31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b31e:	e17e      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b320:	2320      	movs	r3, #32
 800b322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b326:	e17a      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b328:	2340      	movs	r3, #64	; 0x40
 800b32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b32e:	e176      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b330:	2380      	movs	r3, #128	; 0x80
 800b332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b336:	e172      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a5b      	ldr	r2, [pc, #364]	; (800b4ac <UART_SetConfig+0x638>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d130      	bne.n	800b3a4 <UART_SetConfig+0x530>
 800b342:	4b58      	ldr	r3, [pc, #352]	; (800b4a4 <UART_SetConfig+0x630>)
 800b344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b346:	f003 0307 	and.w	r3, r3, #7
 800b34a:	2b05      	cmp	r3, #5
 800b34c:	d826      	bhi.n	800b39c <UART_SetConfig+0x528>
 800b34e:	a201      	add	r2, pc, #4	; (adr r2, 800b354 <UART_SetConfig+0x4e0>)
 800b350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b354:	0800b36d 	.word	0x0800b36d
 800b358:	0800b375 	.word	0x0800b375
 800b35c:	0800b37d 	.word	0x0800b37d
 800b360:	0800b385 	.word	0x0800b385
 800b364:	0800b38d 	.word	0x0800b38d
 800b368:	0800b395 	.word	0x0800b395
 800b36c:	2300      	movs	r3, #0
 800b36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b372:	e154      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b374:	2304      	movs	r3, #4
 800b376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b37a:	e150      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b37c:	2308      	movs	r3, #8
 800b37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b382:	e14c      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b384:	2310      	movs	r3, #16
 800b386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38a:	e148      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b38c:	2320      	movs	r3, #32
 800b38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b392:	e144      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b394:	2340      	movs	r3, #64	; 0x40
 800b396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b39a:	e140      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b39c:	2380      	movs	r3, #128	; 0x80
 800b39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3a2:	e13c      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a41      	ldr	r2, [pc, #260]	; (800b4b0 <UART_SetConfig+0x63c>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	f040 8082 	bne.w	800b4b4 <UART_SetConfig+0x640>
 800b3b0:	4b3c      	ldr	r3, [pc, #240]	; (800b4a4 <UART_SetConfig+0x630>)
 800b3b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3b8:	2b28      	cmp	r3, #40	; 0x28
 800b3ba:	d86d      	bhi.n	800b498 <UART_SetConfig+0x624>
 800b3bc:	a201      	add	r2, pc, #4	; (adr r2, 800b3c4 <UART_SetConfig+0x550>)
 800b3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c2:	bf00      	nop
 800b3c4:	0800b469 	.word	0x0800b469
 800b3c8:	0800b499 	.word	0x0800b499
 800b3cc:	0800b499 	.word	0x0800b499
 800b3d0:	0800b499 	.word	0x0800b499
 800b3d4:	0800b499 	.word	0x0800b499
 800b3d8:	0800b499 	.word	0x0800b499
 800b3dc:	0800b499 	.word	0x0800b499
 800b3e0:	0800b499 	.word	0x0800b499
 800b3e4:	0800b471 	.word	0x0800b471
 800b3e8:	0800b499 	.word	0x0800b499
 800b3ec:	0800b499 	.word	0x0800b499
 800b3f0:	0800b499 	.word	0x0800b499
 800b3f4:	0800b499 	.word	0x0800b499
 800b3f8:	0800b499 	.word	0x0800b499
 800b3fc:	0800b499 	.word	0x0800b499
 800b400:	0800b499 	.word	0x0800b499
 800b404:	0800b479 	.word	0x0800b479
 800b408:	0800b499 	.word	0x0800b499
 800b40c:	0800b499 	.word	0x0800b499
 800b410:	0800b499 	.word	0x0800b499
 800b414:	0800b499 	.word	0x0800b499
 800b418:	0800b499 	.word	0x0800b499
 800b41c:	0800b499 	.word	0x0800b499
 800b420:	0800b499 	.word	0x0800b499
 800b424:	0800b481 	.word	0x0800b481
 800b428:	0800b499 	.word	0x0800b499
 800b42c:	0800b499 	.word	0x0800b499
 800b430:	0800b499 	.word	0x0800b499
 800b434:	0800b499 	.word	0x0800b499
 800b438:	0800b499 	.word	0x0800b499
 800b43c:	0800b499 	.word	0x0800b499
 800b440:	0800b499 	.word	0x0800b499
 800b444:	0800b489 	.word	0x0800b489
 800b448:	0800b499 	.word	0x0800b499
 800b44c:	0800b499 	.word	0x0800b499
 800b450:	0800b499 	.word	0x0800b499
 800b454:	0800b499 	.word	0x0800b499
 800b458:	0800b499 	.word	0x0800b499
 800b45c:	0800b499 	.word	0x0800b499
 800b460:	0800b499 	.word	0x0800b499
 800b464:	0800b491 	.word	0x0800b491
 800b468:	2301      	movs	r3, #1
 800b46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b46e:	e0d6      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b470:	2304      	movs	r3, #4
 800b472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b476:	e0d2      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b478:	2308      	movs	r3, #8
 800b47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b47e:	e0ce      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b480:	2310      	movs	r3, #16
 800b482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b486:	e0ca      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b488:	2320      	movs	r3, #32
 800b48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b48e:	e0c6      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b490:	2340      	movs	r3, #64	; 0x40
 800b492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b496:	e0c2      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b498:	2380      	movs	r3, #128	; 0x80
 800b49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b49e:	e0be      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b4a0:	40011400 	.word	0x40011400
 800b4a4:	58024400 	.word	0x58024400
 800b4a8:	40007800 	.word	0x40007800
 800b4ac:	40007c00 	.word	0x40007c00
 800b4b0:	40011800 	.word	0x40011800
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4aad      	ldr	r2, [pc, #692]	; (800b770 <UART_SetConfig+0x8fc>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d176      	bne.n	800b5ac <UART_SetConfig+0x738>
 800b4be:	4bad      	ldr	r3, [pc, #692]	; (800b774 <UART_SetConfig+0x900>)
 800b4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4c6:	2b28      	cmp	r3, #40	; 0x28
 800b4c8:	d86c      	bhi.n	800b5a4 <UART_SetConfig+0x730>
 800b4ca:	a201      	add	r2, pc, #4	; (adr r2, 800b4d0 <UART_SetConfig+0x65c>)
 800b4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d0:	0800b575 	.word	0x0800b575
 800b4d4:	0800b5a5 	.word	0x0800b5a5
 800b4d8:	0800b5a5 	.word	0x0800b5a5
 800b4dc:	0800b5a5 	.word	0x0800b5a5
 800b4e0:	0800b5a5 	.word	0x0800b5a5
 800b4e4:	0800b5a5 	.word	0x0800b5a5
 800b4e8:	0800b5a5 	.word	0x0800b5a5
 800b4ec:	0800b5a5 	.word	0x0800b5a5
 800b4f0:	0800b57d 	.word	0x0800b57d
 800b4f4:	0800b5a5 	.word	0x0800b5a5
 800b4f8:	0800b5a5 	.word	0x0800b5a5
 800b4fc:	0800b5a5 	.word	0x0800b5a5
 800b500:	0800b5a5 	.word	0x0800b5a5
 800b504:	0800b5a5 	.word	0x0800b5a5
 800b508:	0800b5a5 	.word	0x0800b5a5
 800b50c:	0800b5a5 	.word	0x0800b5a5
 800b510:	0800b585 	.word	0x0800b585
 800b514:	0800b5a5 	.word	0x0800b5a5
 800b518:	0800b5a5 	.word	0x0800b5a5
 800b51c:	0800b5a5 	.word	0x0800b5a5
 800b520:	0800b5a5 	.word	0x0800b5a5
 800b524:	0800b5a5 	.word	0x0800b5a5
 800b528:	0800b5a5 	.word	0x0800b5a5
 800b52c:	0800b5a5 	.word	0x0800b5a5
 800b530:	0800b58d 	.word	0x0800b58d
 800b534:	0800b5a5 	.word	0x0800b5a5
 800b538:	0800b5a5 	.word	0x0800b5a5
 800b53c:	0800b5a5 	.word	0x0800b5a5
 800b540:	0800b5a5 	.word	0x0800b5a5
 800b544:	0800b5a5 	.word	0x0800b5a5
 800b548:	0800b5a5 	.word	0x0800b5a5
 800b54c:	0800b5a5 	.word	0x0800b5a5
 800b550:	0800b595 	.word	0x0800b595
 800b554:	0800b5a5 	.word	0x0800b5a5
 800b558:	0800b5a5 	.word	0x0800b5a5
 800b55c:	0800b5a5 	.word	0x0800b5a5
 800b560:	0800b5a5 	.word	0x0800b5a5
 800b564:	0800b5a5 	.word	0x0800b5a5
 800b568:	0800b5a5 	.word	0x0800b5a5
 800b56c:	0800b5a5 	.word	0x0800b5a5
 800b570:	0800b59d 	.word	0x0800b59d
 800b574:	2301      	movs	r3, #1
 800b576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b57a:	e050      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b57c:	2304      	movs	r3, #4
 800b57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b582:	e04c      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b584:	2308      	movs	r3, #8
 800b586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b58a:	e048      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b58c:	2310      	movs	r3, #16
 800b58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b592:	e044      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b594:	2320      	movs	r3, #32
 800b596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b59a:	e040      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b59c:	2340      	movs	r3, #64	; 0x40
 800b59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5a2:	e03c      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b5a4:	2380      	movs	r3, #128	; 0x80
 800b5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5aa:	e038      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a71      	ldr	r2, [pc, #452]	; (800b778 <UART_SetConfig+0x904>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d130      	bne.n	800b618 <UART_SetConfig+0x7a4>
 800b5b6:	4b6f      	ldr	r3, [pc, #444]	; (800b774 <UART_SetConfig+0x900>)
 800b5b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ba:	f003 0307 	and.w	r3, r3, #7
 800b5be:	2b05      	cmp	r3, #5
 800b5c0:	d826      	bhi.n	800b610 <UART_SetConfig+0x79c>
 800b5c2:	a201      	add	r2, pc, #4	; (adr r2, 800b5c8 <UART_SetConfig+0x754>)
 800b5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c8:	0800b5e1 	.word	0x0800b5e1
 800b5cc:	0800b5e9 	.word	0x0800b5e9
 800b5d0:	0800b5f1 	.word	0x0800b5f1
 800b5d4:	0800b5f9 	.word	0x0800b5f9
 800b5d8:	0800b601 	.word	0x0800b601
 800b5dc:	0800b609 	.word	0x0800b609
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5e6:	e01a      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b5e8:	2304      	movs	r3, #4
 800b5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ee:	e016      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b5f0:	2308      	movs	r3, #8
 800b5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5f6:	e012      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b5f8:	2310      	movs	r3, #16
 800b5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5fe:	e00e      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b600:	2320      	movs	r3, #32
 800b602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b606:	e00a      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b608:	2340      	movs	r3, #64	; 0x40
 800b60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b60e:	e006      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b610:	2380      	movs	r3, #128	; 0x80
 800b612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b616:	e002      	b.n	800b61e <UART_SetConfig+0x7aa>
 800b618:	2380      	movs	r3, #128	; 0x80
 800b61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a55      	ldr	r2, [pc, #340]	; (800b778 <UART_SetConfig+0x904>)
 800b624:	4293      	cmp	r3, r2
 800b626:	f040 80f0 	bne.w	800b80a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b62a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b62e:	2b20      	cmp	r3, #32
 800b630:	dc46      	bgt.n	800b6c0 <UART_SetConfig+0x84c>
 800b632:	2b02      	cmp	r3, #2
 800b634:	db75      	blt.n	800b722 <UART_SetConfig+0x8ae>
 800b636:	3b02      	subs	r3, #2
 800b638:	2b1e      	cmp	r3, #30
 800b63a:	d872      	bhi.n	800b722 <UART_SetConfig+0x8ae>
 800b63c:	a201      	add	r2, pc, #4	; (adr r2, 800b644 <UART_SetConfig+0x7d0>)
 800b63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b642:	bf00      	nop
 800b644:	0800b6c7 	.word	0x0800b6c7
 800b648:	0800b723 	.word	0x0800b723
 800b64c:	0800b6cf 	.word	0x0800b6cf
 800b650:	0800b723 	.word	0x0800b723
 800b654:	0800b723 	.word	0x0800b723
 800b658:	0800b723 	.word	0x0800b723
 800b65c:	0800b6df 	.word	0x0800b6df
 800b660:	0800b723 	.word	0x0800b723
 800b664:	0800b723 	.word	0x0800b723
 800b668:	0800b723 	.word	0x0800b723
 800b66c:	0800b723 	.word	0x0800b723
 800b670:	0800b723 	.word	0x0800b723
 800b674:	0800b723 	.word	0x0800b723
 800b678:	0800b723 	.word	0x0800b723
 800b67c:	0800b6ef 	.word	0x0800b6ef
 800b680:	0800b723 	.word	0x0800b723
 800b684:	0800b723 	.word	0x0800b723
 800b688:	0800b723 	.word	0x0800b723
 800b68c:	0800b723 	.word	0x0800b723
 800b690:	0800b723 	.word	0x0800b723
 800b694:	0800b723 	.word	0x0800b723
 800b698:	0800b723 	.word	0x0800b723
 800b69c:	0800b723 	.word	0x0800b723
 800b6a0:	0800b723 	.word	0x0800b723
 800b6a4:	0800b723 	.word	0x0800b723
 800b6a8:	0800b723 	.word	0x0800b723
 800b6ac:	0800b723 	.word	0x0800b723
 800b6b0:	0800b723 	.word	0x0800b723
 800b6b4:	0800b723 	.word	0x0800b723
 800b6b8:	0800b723 	.word	0x0800b723
 800b6bc:	0800b715 	.word	0x0800b715
 800b6c0:	2b40      	cmp	r3, #64	; 0x40
 800b6c2:	d02a      	beq.n	800b71a <UART_SetConfig+0x8a6>
 800b6c4:	e02d      	b.n	800b722 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b6c6:	f7fc fdf7 	bl	80082b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b6ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b6cc:	e02f      	b.n	800b72e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6ce:	f107 0314 	add.w	r3, r7, #20
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7fc fe06 	bl	80082e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6dc:	e027      	b.n	800b72e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6de:	f107 0308 	add.w	r3, r7, #8
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fc ff52 	bl	800858c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6ec:	e01f      	b.n	800b72e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6ee:	4b21      	ldr	r3, [pc, #132]	; (800b774 <UART_SetConfig+0x900>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d009      	beq.n	800b70e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b6fa:	4b1e      	ldr	r3, [pc, #120]	; (800b774 <UART_SetConfig+0x900>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	08db      	lsrs	r3, r3, #3
 800b700:	f003 0303 	and.w	r3, r3, #3
 800b704:	4a1d      	ldr	r2, [pc, #116]	; (800b77c <UART_SetConfig+0x908>)
 800b706:	fa22 f303 	lsr.w	r3, r2, r3
 800b70a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b70c:	e00f      	b.n	800b72e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800b70e:	4b1b      	ldr	r3, [pc, #108]	; (800b77c <UART_SetConfig+0x908>)
 800b710:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b712:	e00c      	b.n	800b72e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b714:	4b1a      	ldr	r3, [pc, #104]	; (800b780 <UART_SetConfig+0x90c>)
 800b716:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b718:	e009      	b.n	800b72e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b71a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b71e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b720:	e005      	b.n	800b72e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800b722:	2300      	movs	r3, #0
 800b724:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b726:	2301      	movs	r3, #1
 800b728:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b72c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b730:	2b00      	cmp	r3, #0
 800b732:	f000 81e6 	beq.w	800bb02 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73a:	4a12      	ldr	r2, [pc, #72]	; (800b784 <UART_SetConfig+0x910>)
 800b73c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b740:	461a      	mov	r2, r3
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	fbb3 f3f2 	udiv	r3, r3, r2
 800b748:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	4613      	mov	r3, r2
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	4413      	add	r3, r2
 800b754:	6a3a      	ldr	r2, [r7, #32]
 800b756:	429a      	cmp	r2, r3
 800b758:	d305      	bcc.n	800b766 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b760:	6a3a      	ldr	r2, [r7, #32]
 800b762:	429a      	cmp	r2, r3
 800b764:	d910      	bls.n	800b788 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b76c:	e1c9      	b.n	800bb02 <UART_SetConfig+0xc8e>
 800b76e:	bf00      	nop
 800b770:	40011c00 	.word	0x40011c00
 800b774:	58024400 	.word	0x58024400
 800b778:	58000c00 	.word	0x58000c00
 800b77c:	03d09000 	.word	0x03d09000
 800b780:	003d0900 	.word	0x003d0900
 800b784:	0800f6f8 	.word	0x0800f6f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78a:	4618      	mov	r0, r3
 800b78c:	f04f 0100 	mov.w	r1, #0
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b794:	4ac1      	ldr	r2, [pc, #772]	; (800ba9c <UART_SetConfig+0xc28>)
 800b796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	f04f 0300 	mov.w	r3, #0
 800b7a0:	f7f4 fe0e 	bl	80003c0 <__aeabi_uldivmod>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	f04f 0200 	mov.w	r2, #0
 800b7b0:	f04f 0300 	mov.w	r3, #0
 800b7b4:	020b      	lsls	r3, r1, #8
 800b7b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7ba:	0202      	lsls	r2, r0, #8
 800b7bc:	6879      	ldr	r1, [r7, #4]
 800b7be:	6849      	ldr	r1, [r1, #4]
 800b7c0:	0849      	lsrs	r1, r1, #1
 800b7c2:	4608      	mov	r0, r1
 800b7c4:	f04f 0100 	mov.w	r1, #0
 800b7c8:	1814      	adds	r4, r2, r0
 800b7ca:	eb43 0501 	adc.w	r5, r3, r1
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	f04f 0300 	mov.w	r3, #0
 800b7d8:	4620      	mov	r0, r4
 800b7da:	4629      	mov	r1, r5
 800b7dc:	f7f4 fdf0 	bl	80003c0 <__aeabi_uldivmod>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7ee:	d308      	bcc.n	800b802 <UART_SetConfig+0x98e>
 800b7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7f6:	d204      	bcs.n	800b802 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7fe:	60da      	str	r2, [r3, #12]
 800b800:	e17f      	b.n	800bb02 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b808:	e17b      	b.n	800bb02 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	69db      	ldr	r3, [r3, #28]
 800b80e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b812:	f040 80bd 	bne.w	800b990 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800b816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b81a:	2b20      	cmp	r3, #32
 800b81c:	dc48      	bgt.n	800b8b0 <UART_SetConfig+0xa3c>
 800b81e:	2b00      	cmp	r3, #0
 800b820:	db7b      	blt.n	800b91a <UART_SetConfig+0xaa6>
 800b822:	2b20      	cmp	r3, #32
 800b824:	d879      	bhi.n	800b91a <UART_SetConfig+0xaa6>
 800b826:	a201      	add	r2, pc, #4	; (adr r2, 800b82c <UART_SetConfig+0x9b8>)
 800b828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82c:	0800b8b7 	.word	0x0800b8b7
 800b830:	0800b8bf 	.word	0x0800b8bf
 800b834:	0800b91b 	.word	0x0800b91b
 800b838:	0800b91b 	.word	0x0800b91b
 800b83c:	0800b8c7 	.word	0x0800b8c7
 800b840:	0800b91b 	.word	0x0800b91b
 800b844:	0800b91b 	.word	0x0800b91b
 800b848:	0800b91b 	.word	0x0800b91b
 800b84c:	0800b8d7 	.word	0x0800b8d7
 800b850:	0800b91b 	.word	0x0800b91b
 800b854:	0800b91b 	.word	0x0800b91b
 800b858:	0800b91b 	.word	0x0800b91b
 800b85c:	0800b91b 	.word	0x0800b91b
 800b860:	0800b91b 	.word	0x0800b91b
 800b864:	0800b91b 	.word	0x0800b91b
 800b868:	0800b91b 	.word	0x0800b91b
 800b86c:	0800b8e7 	.word	0x0800b8e7
 800b870:	0800b91b 	.word	0x0800b91b
 800b874:	0800b91b 	.word	0x0800b91b
 800b878:	0800b91b 	.word	0x0800b91b
 800b87c:	0800b91b 	.word	0x0800b91b
 800b880:	0800b91b 	.word	0x0800b91b
 800b884:	0800b91b 	.word	0x0800b91b
 800b888:	0800b91b 	.word	0x0800b91b
 800b88c:	0800b91b 	.word	0x0800b91b
 800b890:	0800b91b 	.word	0x0800b91b
 800b894:	0800b91b 	.word	0x0800b91b
 800b898:	0800b91b 	.word	0x0800b91b
 800b89c:	0800b91b 	.word	0x0800b91b
 800b8a0:	0800b91b 	.word	0x0800b91b
 800b8a4:	0800b91b 	.word	0x0800b91b
 800b8a8:	0800b91b 	.word	0x0800b91b
 800b8ac:	0800b90d 	.word	0x0800b90d
 800b8b0:	2b40      	cmp	r3, #64	; 0x40
 800b8b2:	d02e      	beq.n	800b912 <UART_SetConfig+0xa9e>
 800b8b4:	e031      	b.n	800b91a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8b6:	f7fb f999 	bl	8006bec <HAL_RCC_GetPCLK1Freq>
 800b8ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8bc:	e033      	b.n	800b926 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8be:	f7fb f9ab 	bl	8006c18 <HAL_RCC_GetPCLK2Freq>
 800b8c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8c4:	e02f      	b.n	800b926 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8c6:	f107 0314 	add.w	r3, r7, #20
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fc fd0a 	bl	80082e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8d4:	e027      	b.n	800b926 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8d6:	f107 0308 	add.w	r3, r7, #8
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fc fe56 	bl	800858c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8e4:	e01f      	b.n	800b926 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8e6:	4b6e      	ldr	r3, [pc, #440]	; (800baa0 <UART_SetConfig+0xc2c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 0320 	and.w	r3, r3, #32
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d009      	beq.n	800b906 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8f2:	4b6b      	ldr	r3, [pc, #428]	; (800baa0 <UART_SetConfig+0xc2c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	08db      	lsrs	r3, r3, #3
 800b8f8:	f003 0303 	and.w	r3, r3, #3
 800b8fc:	4a69      	ldr	r2, [pc, #420]	; (800baa4 <UART_SetConfig+0xc30>)
 800b8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b902:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b904:	e00f      	b.n	800b926 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800b906:	4b67      	ldr	r3, [pc, #412]	; (800baa4 <UART_SetConfig+0xc30>)
 800b908:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b90a:	e00c      	b.n	800b926 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b90c:	4b66      	ldr	r3, [pc, #408]	; (800baa8 <UART_SetConfig+0xc34>)
 800b90e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b910:	e009      	b.n	800b926 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b918:	e005      	b.n	800b926 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800b91a:	2300      	movs	r3, #0
 800b91c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b91e:	2301      	movs	r3, #1
 800b920:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b924:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 80ea 	beq.w	800bb02 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b932:	4a5a      	ldr	r2, [pc, #360]	; (800ba9c <UART_SetConfig+0xc28>)
 800b934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b938:	461a      	mov	r2, r3
 800b93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b940:	005a      	lsls	r2, r3, #1
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	085b      	lsrs	r3, r3, #1
 800b948:	441a      	add	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b952:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	2b0f      	cmp	r3, #15
 800b958:	d916      	bls.n	800b988 <UART_SetConfig+0xb14>
 800b95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b960:	d212      	bcs.n	800b988 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	b29b      	uxth	r3, r3
 800b966:	f023 030f 	bic.w	r3, r3, #15
 800b96a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	085b      	lsrs	r3, r3, #1
 800b970:	b29b      	uxth	r3, r3
 800b972:	f003 0307 	and.w	r3, r3, #7
 800b976:	b29a      	uxth	r2, r3
 800b978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b97a:	4313      	orrs	r3, r2
 800b97c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b984:	60da      	str	r2, [r3, #12]
 800b986:	e0bc      	b.n	800bb02 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b988:	2301      	movs	r3, #1
 800b98a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b98e:	e0b8      	b.n	800bb02 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b990:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b994:	2b20      	cmp	r3, #32
 800b996:	dc4b      	bgt.n	800ba30 <UART_SetConfig+0xbbc>
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f2c0 8087 	blt.w	800baac <UART_SetConfig+0xc38>
 800b99e:	2b20      	cmp	r3, #32
 800b9a0:	f200 8084 	bhi.w	800baac <UART_SetConfig+0xc38>
 800b9a4:	a201      	add	r2, pc, #4	; (adr r2, 800b9ac <UART_SetConfig+0xb38>)
 800b9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9aa:	bf00      	nop
 800b9ac:	0800ba37 	.word	0x0800ba37
 800b9b0:	0800ba3f 	.word	0x0800ba3f
 800b9b4:	0800baad 	.word	0x0800baad
 800b9b8:	0800baad 	.word	0x0800baad
 800b9bc:	0800ba47 	.word	0x0800ba47
 800b9c0:	0800baad 	.word	0x0800baad
 800b9c4:	0800baad 	.word	0x0800baad
 800b9c8:	0800baad 	.word	0x0800baad
 800b9cc:	0800ba57 	.word	0x0800ba57
 800b9d0:	0800baad 	.word	0x0800baad
 800b9d4:	0800baad 	.word	0x0800baad
 800b9d8:	0800baad 	.word	0x0800baad
 800b9dc:	0800baad 	.word	0x0800baad
 800b9e0:	0800baad 	.word	0x0800baad
 800b9e4:	0800baad 	.word	0x0800baad
 800b9e8:	0800baad 	.word	0x0800baad
 800b9ec:	0800ba67 	.word	0x0800ba67
 800b9f0:	0800baad 	.word	0x0800baad
 800b9f4:	0800baad 	.word	0x0800baad
 800b9f8:	0800baad 	.word	0x0800baad
 800b9fc:	0800baad 	.word	0x0800baad
 800ba00:	0800baad 	.word	0x0800baad
 800ba04:	0800baad 	.word	0x0800baad
 800ba08:	0800baad 	.word	0x0800baad
 800ba0c:	0800baad 	.word	0x0800baad
 800ba10:	0800baad 	.word	0x0800baad
 800ba14:	0800baad 	.word	0x0800baad
 800ba18:	0800baad 	.word	0x0800baad
 800ba1c:	0800baad 	.word	0x0800baad
 800ba20:	0800baad 	.word	0x0800baad
 800ba24:	0800baad 	.word	0x0800baad
 800ba28:	0800baad 	.word	0x0800baad
 800ba2c:	0800ba8d 	.word	0x0800ba8d
 800ba30:	2b40      	cmp	r3, #64	; 0x40
 800ba32:	d02e      	beq.n	800ba92 <UART_SetConfig+0xc1e>
 800ba34:	e03a      	b.n	800baac <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba36:	f7fb f8d9 	bl	8006bec <HAL_RCC_GetPCLK1Freq>
 800ba3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba3c:	e03c      	b.n	800bab8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba3e:	f7fb f8eb 	bl	8006c18 <HAL_RCC_GetPCLK2Freq>
 800ba42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba44:	e038      	b.n	800bab8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba46:	f107 0314 	add.w	r3, r7, #20
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fc fc4a 	bl	80082e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba54:	e030      	b.n	800bab8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba56:	f107 0308 	add.w	r3, r7, #8
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fc fd96 	bl	800858c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba64:	e028      	b.n	800bab8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba66:	4b0e      	ldr	r3, [pc, #56]	; (800baa0 <UART_SetConfig+0xc2c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 0320 	and.w	r3, r3, #32
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d009      	beq.n	800ba86 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba72:	4b0b      	ldr	r3, [pc, #44]	; (800baa0 <UART_SetConfig+0xc2c>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	08db      	lsrs	r3, r3, #3
 800ba78:	f003 0303 	and.w	r3, r3, #3
 800ba7c:	4a09      	ldr	r2, [pc, #36]	; (800baa4 <UART_SetConfig+0xc30>)
 800ba7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba84:	e018      	b.n	800bab8 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800ba86:	4b07      	ldr	r3, [pc, #28]	; (800baa4 <UART_SetConfig+0xc30>)
 800ba88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba8a:	e015      	b.n	800bab8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba8c:	4b06      	ldr	r3, [pc, #24]	; (800baa8 <UART_SetConfig+0xc34>)
 800ba8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba90:	e012      	b.n	800bab8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba98:	e00e      	b.n	800bab8 <UART_SetConfig+0xc44>
 800ba9a:	bf00      	nop
 800ba9c:	0800f6f8 	.word	0x0800f6f8
 800baa0:	58024400 	.word	0x58024400
 800baa4:	03d09000 	.word	0x03d09000
 800baa8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800baac:	2300      	movs	r3, #0
 800baae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bab6:	bf00      	nop
    }

    if (pclk != 0U)
 800bab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baba:	2b00      	cmp	r3, #0
 800babc:	d021      	beq.n	800bb02 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac2:	4a1a      	ldr	r2, [pc, #104]	; (800bb2c <UART_SetConfig+0xcb8>)
 800bac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bac8:	461a      	mov	r2, r3
 800baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bacc:	fbb3 f2f2 	udiv	r2, r3, r2
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	085b      	lsrs	r3, r3, #1
 800bad6:	441a      	add	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bae0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	2b0f      	cmp	r3, #15
 800bae6:	d909      	bls.n	800bafc <UART_SetConfig+0xc88>
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baee:	d205      	bcs.n	800bafc <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	60da      	str	r2, [r3, #12]
 800bafa:	e002      	b.n	800bb02 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bb1e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3738      	adds	r7, #56	; 0x38
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bdb0      	pop	{r4, r5, r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	0800f6f8 	.word	0x0800f6f8

0800bb30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3c:	f003 0301 	and.w	r3, r3, #1
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00a      	beq.n	800bb5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	430a      	orrs	r2, r1
 800bb58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5e:	f003 0302 	and.w	r3, r3, #2
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00a      	beq.n	800bb7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	430a      	orrs	r2, r1
 800bb7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb80:	f003 0304 	and.w	r3, r3, #4
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00a      	beq.n	800bb9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	430a      	orrs	r2, r1
 800bb9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00a      	beq.n	800bbc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc4:	f003 0310 	and.w	r3, r3, #16
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00a      	beq.n	800bbe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	430a      	orrs	r2, r1
 800bbe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe6:	f003 0320 	and.w	r3, r3, #32
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00a      	beq.n	800bc04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	430a      	orrs	r2, r1
 800bc02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d01a      	beq.n	800bc46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	430a      	orrs	r2, r1
 800bc24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc2e:	d10a      	bne.n	800bc46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	430a      	orrs	r2, r1
 800bc44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00a      	beq.n	800bc68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	430a      	orrs	r2, r1
 800bc66:	605a      	str	r2, [r3, #4]
  }
}
 800bc68:	bf00      	nop
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b086      	sub	sp, #24
 800bc78:	af02      	add	r7, sp, #8
 800bc7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc84:	f7f7 fbc4 	bl	8003410 <HAL_GetTick>
 800bc88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f003 0308 	and.w	r3, r3, #8
 800bc94:	2b08      	cmp	r3, #8
 800bc96:	d10e      	bne.n	800bcb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f82f 	bl	800bd0a <UART_WaitOnFlagUntilTimeout>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	e025      	b.n	800bd02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	2b04      	cmp	r3, #4
 800bcc2:	d10e      	bne.n	800bce2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 f819 	bl	800bd0a <UART_WaitOnFlagUntilTimeout>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d001      	beq.n	800bce2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcde:	2303      	movs	r3, #3
 800bce0:	e00f      	b.n	800bd02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2220      	movs	r2, #32
 800bce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2220      	movs	r2, #32
 800bcee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd00:	2300      	movs	r3, #0
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b09c      	sub	sp, #112	; 0x70
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	60f8      	str	r0, [r7, #12]
 800bd12:	60b9      	str	r1, [r7, #8]
 800bd14:	603b      	str	r3, [r7, #0]
 800bd16:	4613      	mov	r3, r2
 800bd18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd1a:	e0a9      	b.n	800be70 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd22:	f000 80a5 	beq.w	800be70 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd26:	f7f7 fb73 	bl	8003410 <HAL_GetTick>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	1ad3      	subs	r3, r2, r3
 800bd30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d302      	bcc.n	800bd3c <UART_WaitOnFlagUntilTimeout+0x32>
 800bd36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d140      	bne.n	800bdbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd50:	667b      	str	r3, [r7, #100]	; 0x64
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bd68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e6      	bne.n	800bd3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3308      	adds	r3, #8
 800bd74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd78:	e853 3f00 	ldrex	r3, [r3]
 800bd7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd80:	f023 0301 	bic.w	r3, r3, #1
 800bd84:	663b      	str	r3, [r7, #96]	; 0x60
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd8e:	64ba      	str	r2, [r7, #72]	; 0x48
 800bd90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd96:	e841 2300 	strex	r3, r2, [r1]
 800bd9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bd9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1e5      	bne.n	800bd6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2220      	movs	r2, #32
 800bda6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2220      	movs	r2, #32
 800bdae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bdba:	2303      	movs	r3, #3
 800bdbc:	e069      	b.n	800be92 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f003 0304 	and.w	r3, r3, #4
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d051      	beq.n	800be70 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	69db      	ldr	r3, [r3, #28]
 800bdd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdda:	d149      	bne.n	800be70 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bde4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	e853 3f00 	ldrex	r3, [r3]
 800bdf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bdfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	461a      	mov	r2, r3
 800be02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be04:	637b      	str	r3, [r7, #52]	; 0x34
 800be06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be0c:	e841 2300 	strex	r3, r2, [r1]
 800be10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1e6      	bne.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3308      	adds	r3, #8
 800be1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	e853 3f00 	ldrex	r3, [r3]
 800be26:	613b      	str	r3, [r7, #16]
   return(result);
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	f023 0301 	bic.w	r3, r3, #1
 800be2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3308      	adds	r3, #8
 800be36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be38:	623a      	str	r2, [r7, #32]
 800be3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3c:	69f9      	ldr	r1, [r7, #28]
 800be3e:	6a3a      	ldr	r2, [r7, #32]
 800be40:	e841 2300 	strex	r3, r2, [r1]
 800be44:	61bb      	str	r3, [r7, #24]
   return(result);
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1e5      	bne.n	800be18 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2220      	movs	r2, #32
 800be50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2220      	movs	r2, #32
 800be58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2220      	movs	r2, #32
 800be60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	e010      	b.n	800be92 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	69da      	ldr	r2, [r3, #28]
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	4013      	ands	r3, r2
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	bf0c      	ite	eq
 800be80:	2301      	moveq	r3, #1
 800be82:	2300      	movne	r3, #0
 800be84:	b2db      	uxtb	r3, r3
 800be86:	461a      	mov	r2, r3
 800be88:	79fb      	ldrb	r3, [r7, #7]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	f43f af46 	beq.w	800bd1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3770      	adds	r7, #112	; 0x70
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
	...

0800be9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b095      	sub	sp, #84	; 0x54
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beac:	e853 3f00 	ldrex	r3, [r3]
 800beb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	461a      	mov	r2, r3
 800bec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec2:	643b      	str	r3, [r7, #64]	; 0x40
 800bec4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800beca:	e841 2300 	strex	r3, r2, [r1]
 800bece:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1e6      	bne.n	800bea4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	3308      	adds	r3, #8
 800bedc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	e853 3f00 	ldrex	r3, [r3]
 800bee4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bee6:	69fa      	ldr	r2, [r7, #28]
 800bee8:	4b1e      	ldr	r3, [pc, #120]	; (800bf64 <UART_EndRxTransfer+0xc8>)
 800beea:	4013      	ands	r3, r2
 800beec:	64bb      	str	r3, [r7, #72]	; 0x48
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3308      	adds	r3, #8
 800bef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800befc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800befe:	e841 2300 	strex	r3, r2, [r1]
 800bf02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1e5      	bne.n	800bed6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d118      	bne.n	800bf44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	e853 3f00 	ldrex	r3, [r3]
 800bf1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	f023 0310 	bic.w	r3, r3, #16
 800bf26:	647b      	str	r3, [r7, #68]	; 0x44
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf30:	61bb      	str	r3, [r7, #24]
 800bf32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf34:	6979      	ldr	r1, [r7, #20]
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	e841 2300 	strex	r3, r2, [r1]
 800bf3c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e6      	bne.n	800bf12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2220      	movs	r2, #32
 800bf48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bf58:	bf00      	nop
 800bf5a:	3754      	adds	r7, #84	; 0x54
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	effffffe 	.word	0xeffffffe

0800bf68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f7fe ff5e 	bl	800ae48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf8c:	bf00      	nop
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b088      	sub	sp, #32
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	e853 3f00 	ldrex	r3, [r3]
 800bfa8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfb0:	61fb      	str	r3, [r7, #28]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	61bb      	str	r3, [r7, #24]
 800bfbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	6979      	ldr	r1, [r7, #20]
 800bfc0:	69ba      	ldr	r2, [r7, #24]
 800bfc2:	e841 2300 	strex	r3, r2, [r1]
 800bfc6:	613b      	str	r3, [r7, #16]
   return(result);
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1e6      	bne.n	800bf9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2220      	movs	r2, #32
 800bfd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7f5 fdb1 	bl	8001b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfe2:	bf00      	nop
 800bfe4:	3720      	adds	r7, #32
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bfea:	b480      	push	{r7}
 800bfec:	b083      	sub	sp, #12
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bff2:	bf00      	nop
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bffe:	b480      	push	{r7}
 800c000:	b083      	sub	sp, #12
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c006:	bf00      	nop
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c012:	b480      	push	{r7}
 800c014:	b083      	sub	sp, #12
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c01a:	bf00      	nop
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr

0800c026 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c026:	b480      	push	{r7}
 800c028:	b085      	sub	sp, #20
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c034:	2b01      	cmp	r3, #1
 800c036:	d101      	bne.n	800c03c <HAL_UARTEx_DisableFifoMode+0x16>
 800c038:	2302      	movs	r3, #2
 800c03a:	e027      	b.n	800c08c <HAL_UARTEx_DisableFifoMode+0x66>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2224      	movs	r2, #36	; 0x24
 800c048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f022 0201 	bic.w	r2, r2, #1
 800c062:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c06a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68fa      	ldr	r2, [r7, #12]
 800c078:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2220      	movs	r2, #32
 800c07e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d101      	bne.n	800c0b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c0ac:	2302      	movs	r3, #2
 800c0ae:	e02d      	b.n	800c10c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2224      	movs	r2, #36	; 0x24
 800c0bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f022 0201 	bic.w	r2, r2, #1
 800c0d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f84f 	bl	800c190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2220      	movs	r2, #32
 800c0fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c124:	2b01      	cmp	r3, #1
 800c126:	d101      	bne.n	800c12c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c128:	2302      	movs	r3, #2
 800c12a:	e02d      	b.n	800c188 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2224      	movs	r2, #36	; 0x24
 800c138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f022 0201 	bic.w	r2, r2, #1
 800c152:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	430a      	orrs	r2, r1
 800c166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 f811 	bl	800c190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2220      	movs	r2, #32
 800c17a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d108      	bne.n	800c1b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c1b0:	e031      	b.n	800c216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c1b2:	2310      	movs	r3, #16
 800c1b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c1b6:	2310      	movs	r3, #16
 800c1b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	0e5b      	lsrs	r3, r3, #25
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	f003 0307 	and.w	r3, r3, #7
 800c1c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	0f5b      	lsrs	r3, r3, #29
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	f003 0307 	and.w	r3, r3, #7
 800c1d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
 800c1dc:	7b3a      	ldrb	r2, [r7, #12]
 800c1de:	4911      	ldr	r1, [pc, #68]	; (800c224 <UARTEx_SetNbDataToProcess+0x94>)
 800c1e0:	5c8a      	ldrb	r2, [r1, r2]
 800c1e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1e6:	7b3a      	ldrb	r2, [r7, #12]
 800c1e8:	490f      	ldr	r1, [pc, #60]	; (800c228 <UARTEx_SetNbDataToProcess+0x98>)
 800c1ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
 800c1fa:	7b7a      	ldrb	r2, [r7, #13]
 800c1fc:	4909      	ldr	r1, [pc, #36]	; (800c224 <UARTEx_SetNbDataToProcess+0x94>)
 800c1fe:	5c8a      	ldrb	r2, [r1, r2]
 800c200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c204:	7b7a      	ldrb	r2, [r7, #13]
 800c206:	4908      	ldr	r1, [pc, #32]	; (800c228 <UARTEx_SetNbDataToProcess+0x98>)
 800c208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c20a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c20e:	b29a      	uxth	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c216:	bf00      	nop
 800c218:	3714      	adds	r7, #20
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	0800f710 	.word	0x0800f710
 800c228:	0800f718 	.word	0x0800f718

0800c22c <__errno>:
 800c22c:	4b01      	ldr	r3, [pc, #4]	; (800c234 <__errno+0x8>)
 800c22e:	6818      	ldr	r0, [r3, #0]
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	24000010 	.word	0x24000010

0800c238 <__libc_init_array>:
 800c238:	b570      	push	{r4, r5, r6, lr}
 800c23a:	4d0d      	ldr	r5, [pc, #52]	; (800c270 <__libc_init_array+0x38>)
 800c23c:	4c0d      	ldr	r4, [pc, #52]	; (800c274 <__libc_init_array+0x3c>)
 800c23e:	1b64      	subs	r4, r4, r5
 800c240:	10a4      	asrs	r4, r4, #2
 800c242:	2600      	movs	r6, #0
 800c244:	42a6      	cmp	r6, r4
 800c246:	d109      	bne.n	800c25c <__libc_init_array+0x24>
 800c248:	4d0b      	ldr	r5, [pc, #44]	; (800c278 <__libc_init_array+0x40>)
 800c24a:	4c0c      	ldr	r4, [pc, #48]	; (800c27c <__libc_init_array+0x44>)
 800c24c:	f003 fa3e 	bl	800f6cc <_init>
 800c250:	1b64      	subs	r4, r4, r5
 800c252:	10a4      	asrs	r4, r4, #2
 800c254:	2600      	movs	r6, #0
 800c256:	42a6      	cmp	r6, r4
 800c258:	d105      	bne.n	800c266 <__libc_init_array+0x2e>
 800c25a:	bd70      	pop	{r4, r5, r6, pc}
 800c25c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c260:	4798      	blx	r3
 800c262:	3601      	adds	r6, #1
 800c264:	e7ee      	b.n	800c244 <__libc_init_array+0xc>
 800c266:	f855 3b04 	ldr.w	r3, [r5], #4
 800c26a:	4798      	blx	r3
 800c26c:	3601      	adds	r6, #1
 800c26e:	e7f2      	b.n	800c256 <__libc_init_array+0x1e>
 800c270:	0800fce8 	.word	0x0800fce8
 800c274:	0800fce8 	.word	0x0800fce8
 800c278:	0800fce8 	.word	0x0800fce8
 800c27c:	0800fcec 	.word	0x0800fcec

0800c280 <memcpy>:
 800c280:	440a      	add	r2, r1
 800c282:	4291      	cmp	r1, r2
 800c284:	f100 33ff 	add.w	r3, r0, #4294967295
 800c288:	d100      	bne.n	800c28c <memcpy+0xc>
 800c28a:	4770      	bx	lr
 800c28c:	b510      	push	{r4, lr}
 800c28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c292:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c296:	4291      	cmp	r1, r2
 800c298:	d1f9      	bne.n	800c28e <memcpy+0xe>
 800c29a:	bd10      	pop	{r4, pc}

0800c29c <memset>:
 800c29c:	4402      	add	r2, r0
 800c29e:	4603      	mov	r3, r0
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d100      	bne.n	800c2a6 <memset+0xa>
 800c2a4:	4770      	bx	lr
 800c2a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c2aa:	e7f9      	b.n	800c2a0 <memset+0x4>

0800c2ac <__cvt>:
 800c2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ae:	ed2d 8b02 	vpush	{d8}
 800c2b2:	eeb0 8b40 	vmov.f64	d8, d0
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	4617      	mov	r7, r2
 800c2ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c2bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c2be:	ee18 2a90 	vmov	r2, s17
 800c2c2:	f025 0520 	bic.w	r5, r5, #32
 800c2c6:	2a00      	cmp	r2, #0
 800c2c8:	bfb6      	itet	lt
 800c2ca:	222d      	movlt	r2, #45	; 0x2d
 800c2cc:	2200      	movge	r2, #0
 800c2ce:	eeb1 8b40 	vneglt.f64	d8, d0
 800c2d2:	2d46      	cmp	r5, #70	; 0x46
 800c2d4:	460c      	mov	r4, r1
 800c2d6:	701a      	strb	r2, [r3, #0]
 800c2d8:	d004      	beq.n	800c2e4 <__cvt+0x38>
 800c2da:	2d45      	cmp	r5, #69	; 0x45
 800c2dc:	d100      	bne.n	800c2e0 <__cvt+0x34>
 800c2de:	3401      	adds	r4, #1
 800c2e0:	2102      	movs	r1, #2
 800c2e2:	e000      	b.n	800c2e6 <__cvt+0x3a>
 800c2e4:	2103      	movs	r1, #3
 800c2e6:	ab03      	add	r3, sp, #12
 800c2e8:	9301      	str	r3, [sp, #4]
 800c2ea:	ab02      	add	r3, sp, #8
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	4622      	mov	r2, r4
 800c2f0:	4633      	mov	r3, r6
 800c2f2:	eeb0 0b48 	vmov.f64	d0, d8
 800c2f6:	f000 fcab 	bl	800cc50 <_dtoa_r>
 800c2fa:	2d47      	cmp	r5, #71	; 0x47
 800c2fc:	d109      	bne.n	800c312 <__cvt+0x66>
 800c2fe:	07fb      	lsls	r3, r7, #31
 800c300:	d407      	bmi.n	800c312 <__cvt+0x66>
 800c302:	9b03      	ldr	r3, [sp, #12]
 800c304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c306:	1a1b      	subs	r3, r3, r0
 800c308:	6013      	str	r3, [r2, #0]
 800c30a:	b005      	add	sp, #20
 800c30c:	ecbd 8b02 	vpop	{d8}
 800c310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c312:	2d46      	cmp	r5, #70	; 0x46
 800c314:	eb00 0204 	add.w	r2, r0, r4
 800c318:	d10c      	bne.n	800c334 <__cvt+0x88>
 800c31a:	7803      	ldrb	r3, [r0, #0]
 800c31c:	2b30      	cmp	r3, #48	; 0x30
 800c31e:	d107      	bne.n	800c330 <__cvt+0x84>
 800c320:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c328:	bf1c      	itt	ne
 800c32a:	f1c4 0401 	rsbne	r4, r4, #1
 800c32e:	6034      	strne	r4, [r6, #0]
 800c330:	6833      	ldr	r3, [r6, #0]
 800c332:	441a      	add	r2, r3
 800c334:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c33c:	bf08      	it	eq
 800c33e:	9203      	streq	r2, [sp, #12]
 800c340:	2130      	movs	r1, #48	; 0x30
 800c342:	9b03      	ldr	r3, [sp, #12]
 800c344:	4293      	cmp	r3, r2
 800c346:	d2dc      	bcs.n	800c302 <__cvt+0x56>
 800c348:	1c5c      	adds	r4, r3, #1
 800c34a:	9403      	str	r4, [sp, #12]
 800c34c:	7019      	strb	r1, [r3, #0]
 800c34e:	e7f8      	b.n	800c342 <__cvt+0x96>

0800c350 <__exponent>:
 800c350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c352:	4603      	mov	r3, r0
 800c354:	2900      	cmp	r1, #0
 800c356:	bfb8      	it	lt
 800c358:	4249      	neglt	r1, r1
 800c35a:	f803 2b02 	strb.w	r2, [r3], #2
 800c35e:	bfb4      	ite	lt
 800c360:	222d      	movlt	r2, #45	; 0x2d
 800c362:	222b      	movge	r2, #43	; 0x2b
 800c364:	2909      	cmp	r1, #9
 800c366:	7042      	strb	r2, [r0, #1]
 800c368:	dd2a      	ble.n	800c3c0 <__exponent+0x70>
 800c36a:	f10d 0407 	add.w	r4, sp, #7
 800c36e:	46a4      	mov	ip, r4
 800c370:	270a      	movs	r7, #10
 800c372:	46a6      	mov	lr, r4
 800c374:	460a      	mov	r2, r1
 800c376:	fb91 f6f7 	sdiv	r6, r1, r7
 800c37a:	fb07 1516 	mls	r5, r7, r6, r1
 800c37e:	3530      	adds	r5, #48	; 0x30
 800c380:	2a63      	cmp	r2, #99	; 0x63
 800c382:	f104 34ff 	add.w	r4, r4, #4294967295
 800c386:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c38a:	4631      	mov	r1, r6
 800c38c:	dcf1      	bgt.n	800c372 <__exponent+0x22>
 800c38e:	3130      	adds	r1, #48	; 0x30
 800c390:	f1ae 0502 	sub.w	r5, lr, #2
 800c394:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c398:	1c44      	adds	r4, r0, #1
 800c39a:	4629      	mov	r1, r5
 800c39c:	4561      	cmp	r1, ip
 800c39e:	d30a      	bcc.n	800c3b6 <__exponent+0x66>
 800c3a0:	f10d 0209 	add.w	r2, sp, #9
 800c3a4:	eba2 020e 	sub.w	r2, r2, lr
 800c3a8:	4565      	cmp	r5, ip
 800c3aa:	bf88      	it	hi
 800c3ac:	2200      	movhi	r2, #0
 800c3ae:	4413      	add	r3, r2
 800c3b0:	1a18      	subs	r0, r3, r0
 800c3b2:	b003      	add	sp, #12
 800c3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c3be:	e7ed      	b.n	800c39c <__exponent+0x4c>
 800c3c0:	2330      	movs	r3, #48	; 0x30
 800c3c2:	3130      	adds	r1, #48	; 0x30
 800c3c4:	7083      	strb	r3, [r0, #2]
 800c3c6:	70c1      	strb	r1, [r0, #3]
 800c3c8:	1d03      	adds	r3, r0, #4
 800c3ca:	e7f1      	b.n	800c3b0 <__exponent+0x60>
 800c3cc:	0000      	movs	r0, r0
	...

0800c3d0 <_printf_float>:
 800c3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	b08b      	sub	sp, #44	; 0x2c
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c3dc:	4616      	mov	r6, r2
 800c3de:	461f      	mov	r7, r3
 800c3e0:	4605      	mov	r5, r0
 800c3e2:	f001 f9b7 	bl	800d754 <_localeconv_r>
 800c3e6:	f8d0 b000 	ldr.w	fp, [r0]
 800c3ea:	4658      	mov	r0, fp
 800c3ec:	f7f3 ff90 	bl	8000310 <strlen>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	9308      	str	r3, [sp, #32]
 800c3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c3f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c3fc:	6822      	ldr	r2, [r4, #0]
 800c3fe:	3307      	adds	r3, #7
 800c400:	f023 0307 	bic.w	r3, r3, #7
 800c404:	f103 0108 	add.w	r1, r3, #8
 800c408:	f8c8 1000 	str.w	r1, [r8]
 800c40c:	4682      	mov	sl, r0
 800c40e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c412:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c416:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800c678 <_printf_float+0x2a8>
 800c41a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c41e:	eeb0 6bc0 	vabs.f64	d6, d0
 800c422:	eeb4 6b47 	vcmp.f64	d6, d7
 800c426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c42a:	dd24      	ble.n	800c476 <_printf_float+0xa6>
 800c42c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c434:	d502      	bpl.n	800c43c <_printf_float+0x6c>
 800c436:	232d      	movs	r3, #45	; 0x2d
 800c438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c43c:	4b90      	ldr	r3, [pc, #576]	; (800c680 <_printf_float+0x2b0>)
 800c43e:	4891      	ldr	r0, [pc, #580]	; (800c684 <_printf_float+0x2b4>)
 800c440:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c444:	bf94      	ite	ls
 800c446:	4698      	movls	r8, r3
 800c448:	4680      	movhi	r8, r0
 800c44a:	2303      	movs	r3, #3
 800c44c:	6123      	str	r3, [r4, #16]
 800c44e:	f022 0204 	bic.w	r2, r2, #4
 800c452:	2300      	movs	r3, #0
 800c454:	6022      	str	r2, [r4, #0]
 800c456:	9304      	str	r3, [sp, #16]
 800c458:	9700      	str	r7, [sp, #0]
 800c45a:	4633      	mov	r3, r6
 800c45c:	aa09      	add	r2, sp, #36	; 0x24
 800c45e:	4621      	mov	r1, r4
 800c460:	4628      	mov	r0, r5
 800c462:	f000 f9d3 	bl	800c80c <_printf_common>
 800c466:	3001      	adds	r0, #1
 800c468:	f040 808a 	bne.w	800c580 <_printf_float+0x1b0>
 800c46c:	f04f 30ff 	mov.w	r0, #4294967295
 800c470:	b00b      	add	sp, #44	; 0x2c
 800c472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c476:	eeb4 0b40 	vcmp.f64	d0, d0
 800c47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c47e:	d709      	bvc.n	800c494 <_printf_float+0xc4>
 800c480:	ee10 3a90 	vmov	r3, s1
 800c484:	2b00      	cmp	r3, #0
 800c486:	bfbc      	itt	lt
 800c488:	232d      	movlt	r3, #45	; 0x2d
 800c48a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c48e:	487e      	ldr	r0, [pc, #504]	; (800c688 <_printf_float+0x2b8>)
 800c490:	4b7e      	ldr	r3, [pc, #504]	; (800c68c <_printf_float+0x2bc>)
 800c492:	e7d5      	b.n	800c440 <_printf_float+0x70>
 800c494:	6863      	ldr	r3, [r4, #4]
 800c496:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c49a:	9104      	str	r1, [sp, #16]
 800c49c:	1c59      	adds	r1, r3, #1
 800c49e:	d13c      	bne.n	800c51a <_printf_float+0x14a>
 800c4a0:	2306      	movs	r3, #6
 800c4a2:	6063      	str	r3, [r4, #4]
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	9303      	str	r3, [sp, #12]
 800c4a8:	ab08      	add	r3, sp, #32
 800c4aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c4ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c4b2:	ab07      	add	r3, sp, #28
 800c4b4:	6861      	ldr	r1, [r4, #4]
 800c4b6:	9300      	str	r3, [sp, #0]
 800c4b8:	6022      	str	r2, [r4, #0]
 800c4ba:	f10d 031b 	add.w	r3, sp, #27
 800c4be:	4628      	mov	r0, r5
 800c4c0:	f7ff fef4 	bl	800c2ac <__cvt>
 800c4c4:	9b04      	ldr	r3, [sp, #16]
 800c4c6:	9907      	ldr	r1, [sp, #28]
 800c4c8:	2b47      	cmp	r3, #71	; 0x47
 800c4ca:	4680      	mov	r8, r0
 800c4cc:	d108      	bne.n	800c4e0 <_printf_float+0x110>
 800c4ce:	1cc8      	adds	r0, r1, #3
 800c4d0:	db02      	blt.n	800c4d8 <_printf_float+0x108>
 800c4d2:	6863      	ldr	r3, [r4, #4]
 800c4d4:	4299      	cmp	r1, r3
 800c4d6:	dd41      	ble.n	800c55c <_printf_float+0x18c>
 800c4d8:	f1a9 0902 	sub.w	r9, r9, #2
 800c4dc:	fa5f f989 	uxtb.w	r9, r9
 800c4e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c4e4:	d820      	bhi.n	800c528 <_printf_float+0x158>
 800c4e6:	3901      	subs	r1, #1
 800c4e8:	464a      	mov	r2, r9
 800c4ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c4ee:	9107      	str	r1, [sp, #28]
 800c4f0:	f7ff ff2e 	bl	800c350 <__exponent>
 800c4f4:	9a08      	ldr	r2, [sp, #32]
 800c4f6:	9004      	str	r0, [sp, #16]
 800c4f8:	1813      	adds	r3, r2, r0
 800c4fa:	2a01      	cmp	r2, #1
 800c4fc:	6123      	str	r3, [r4, #16]
 800c4fe:	dc02      	bgt.n	800c506 <_printf_float+0x136>
 800c500:	6822      	ldr	r2, [r4, #0]
 800c502:	07d2      	lsls	r2, r2, #31
 800c504:	d501      	bpl.n	800c50a <_printf_float+0x13a>
 800c506:	3301      	adds	r3, #1
 800c508:	6123      	str	r3, [r4, #16]
 800c50a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d0a2      	beq.n	800c458 <_printf_float+0x88>
 800c512:	232d      	movs	r3, #45	; 0x2d
 800c514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c518:	e79e      	b.n	800c458 <_printf_float+0x88>
 800c51a:	9904      	ldr	r1, [sp, #16]
 800c51c:	2947      	cmp	r1, #71	; 0x47
 800c51e:	d1c1      	bne.n	800c4a4 <_printf_float+0xd4>
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1bf      	bne.n	800c4a4 <_printf_float+0xd4>
 800c524:	2301      	movs	r3, #1
 800c526:	e7bc      	b.n	800c4a2 <_printf_float+0xd2>
 800c528:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c52c:	d118      	bne.n	800c560 <_printf_float+0x190>
 800c52e:	2900      	cmp	r1, #0
 800c530:	6863      	ldr	r3, [r4, #4]
 800c532:	dd0b      	ble.n	800c54c <_printf_float+0x17c>
 800c534:	6121      	str	r1, [r4, #16]
 800c536:	b913      	cbnz	r3, 800c53e <_printf_float+0x16e>
 800c538:	6822      	ldr	r2, [r4, #0]
 800c53a:	07d0      	lsls	r0, r2, #31
 800c53c:	d502      	bpl.n	800c544 <_printf_float+0x174>
 800c53e:	3301      	adds	r3, #1
 800c540:	440b      	add	r3, r1
 800c542:	6123      	str	r3, [r4, #16]
 800c544:	2300      	movs	r3, #0
 800c546:	65a1      	str	r1, [r4, #88]	; 0x58
 800c548:	9304      	str	r3, [sp, #16]
 800c54a:	e7de      	b.n	800c50a <_printf_float+0x13a>
 800c54c:	b913      	cbnz	r3, 800c554 <_printf_float+0x184>
 800c54e:	6822      	ldr	r2, [r4, #0]
 800c550:	07d2      	lsls	r2, r2, #31
 800c552:	d501      	bpl.n	800c558 <_printf_float+0x188>
 800c554:	3302      	adds	r3, #2
 800c556:	e7f4      	b.n	800c542 <_printf_float+0x172>
 800c558:	2301      	movs	r3, #1
 800c55a:	e7f2      	b.n	800c542 <_printf_float+0x172>
 800c55c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c560:	9b08      	ldr	r3, [sp, #32]
 800c562:	4299      	cmp	r1, r3
 800c564:	db05      	blt.n	800c572 <_printf_float+0x1a2>
 800c566:	6823      	ldr	r3, [r4, #0]
 800c568:	6121      	str	r1, [r4, #16]
 800c56a:	07d8      	lsls	r0, r3, #31
 800c56c:	d5ea      	bpl.n	800c544 <_printf_float+0x174>
 800c56e:	1c4b      	adds	r3, r1, #1
 800c570:	e7e7      	b.n	800c542 <_printf_float+0x172>
 800c572:	2900      	cmp	r1, #0
 800c574:	bfd4      	ite	le
 800c576:	f1c1 0202 	rsble	r2, r1, #2
 800c57a:	2201      	movgt	r2, #1
 800c57c:	4413      	add	r3, r2
 800c57e:	e7e0      	b.n	800c542 <_printf_float+0x172>
 800c580:	6823      	ldr	r3, [r4, #0]
 800c582:	055a      	lsls	r2, r3, #21
 800c584:	d407      	bmi.n	800c596 <_printf_float+0x1c6>
 800c586:	6923      	ldr	r3, [r4, #16]
 800c588:	4642      	mov	r2, r8
 800c58a:	4631      	mov	r1, r6
 800c58c:	4628      	mov	r0, r5
 800c58e:	47b8      	blx	r7
 800c590:	3001      	adds	r0, #1
 800c592:	d12a      	bne.n	800c5ea <_printf_float+0x21a>
 800c594:	e76a      	b.n	800c46c <_printf_float+0x9c>
 800c596:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c59a:	f240 80e2 	bls.w	800c762 <_printf_float+0x392>
 800c59e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c5a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5aa:	d133      	bne.n	800c614 <_printf_float+0x244>
 800c5ac:	4a38      	ldr	r2, [pc, #224]	; (800c690 <_printf_float+0x2c0>)
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	4631      	mov	r1, r6
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	47b8      	blx	r7
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	f43f af58 	beq.w	800c46c <_printf_float+0x9c>
 800c5bc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	db02      	blt.n	800c5ca <_printf_float+0x1fa>
 800c5c4:	6823      	ldr	r3, [r4, #0]
 800c5c6:	07d8      	lsls	r0, r3, #31
 800c5c8:	d50f      	bpl.n	800c5ea <_printf_float+0x21a>
 800c5ca:	4653      	mov	r3, sl
 800c5cc:	465a      	mov	r2, fp
 800c5ce:	4631      	mov	r1, r6
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	47b8      	blx	r7
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	f43f af49 	beq.w	800c46c <_printf_float+0x9c>
 800c5da:	f04f 0800 	mov.w	r8, #0
 800c5de:	f104 091a 	add.w	r9, r4, #26
 800c5e2:	9b08      	ldr	r3, [sp, #32]
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	4543      	cmp	r3, r8
 800c5e8:	dc09      	bgt.n	800c5fe <_printf_float+0x22e>
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	079b      	lsls	r3, r3, #30
 800c5ee:	f100 8108 	bmi.w	800c802 <_printf_float+0x432>
 800c5f2:	68e0      	ldr	r0, [r4, #12]
 800c5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f6:	4298      	cmp	r0, r3
 800c5f8:	bfb8      	it	lt
 800c5fa:	4618      	movlt	r0, r3
 800c5fc:	e738      	b.n	800c470 <_printf_float+0xa0>
 800c5fe:	2301      	movs	r3, #1
 800c600:	464a      	mov	r2, r9
 800c602:	4631      	mov	r1, r6
 800c604:	4628      	mov	r0, r5
 800c606:	47b8      	blx	r7
 800c608:	3001      	adds	r0, #1
 800c60a:	f43f af2f 	beq.w	800c46c <_printf_float+0x9c>
 800c60e:	f108 0801 	add.w	r8, r8, #1
 800c612:	e7e6      	b.n	800c5e2 <_printf_float+0x212>
 800c614:	9b07      	ldr	r3, [sp, #28]
 800c616:	2b00      	cmp	r3, #0
 800c618:	dc3c      	bgt.n	800c694 <_printf_float+0x2c4>
 800c61a:	4a1d      	ldr	r2, [pc, #116]	; (800c690 <_printf_float+0x2c0>)
 800c61c:	2301      	movs	r3, #1
 800c61e:	4631      	mov	r1, r6
 800c620:	4628      	mov	r0, r5
 800c622:	47b8      	blx	r7
 800c624:	3001      	adds	r0, #1
 800c626:	f43f af21 	beq.w	800c46c <_printf_float+0x9c>
 800c62a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c62e:	4313      	orrs	r3, r2
 800c630:	d102      	bne.n	800c638 <_printf_float+0x268>
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	07d9      	lsls	r1, r3, #31
 800c636:	d5d8      	bpl.n	800c5ea <_printf_float+0x21a>
 800c638:	4653      	mov	r3, sl
 800c63a:	465a      	mov	r2, fp
 800c63c:	4631      	mov	r1, r6
 800c63e:	4628      	mov	r0, r5
 800c640:	47b8      	blx	r7
 800c642:	3001      	adds	r0, #1
 800c644:	f43f af12 	beq.w	800c46c <_printf_float+0x9c>
 800c648:	f04f 0900 	mov.w	r9, #0
 800c64c:	f104 0a1a 	add.w	sl, r4, #26
 800c650:	9b07      	ldr	r3, [sp, #28]
 800c652:	425b      	negs	r3, r3
 800c654:	454b      	cmp	r3, r9
 800c656:	dc01      	bgt.n	800c65c <_printf_float+0x28c>
 800c658:	9b08      	ldr	r3, [sp, #32]
 800c65a:	e795      	b.n	800c588 <_printf_float+0x1b8>
 800c65c:	2301      	movs	r3, #1
 800c65e:	4652      	mov	r2, sl
 800c660:	4631      	mov	r1, r6
 800c662:	4628      	mov	r0, r5
 800c664:	47b8      	blx	r7
 800c666:	3001      	adds	r0, #1
 800c668:	f43f af00 	beq.w	800c46c <_printf_float+0x9c>
 800c66c:	f109 0901 	add.w	r9, r9, #1
 800c670:	e7ee      	b.n	800c650 <_printf_float+0x280>
 800c672:	bf00      	nop
 800c674:	f3af 8000 	nop.w
 800c678:	ffffffff 	.word	0xffffffff
 800c67c:	7fefffff 	.word	0x7fefffff
 800c680:	0800f724 	.word	0x0800f724
 800c684:	0800f728 	.word	0x0800f728
 800c688:	0800f730 	.word	0x0800f730
 800c68c:	0800f72c 	.word	0x0800f72c
 800c690:	0800f734 	.word	0x0800f734
 800c694:	9a08      	ldr	r2, [sp, #32]
 800c696:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c698:	429a      	cmp	r2, r3
 800c69a:	bfa8      	it	ge
 800c69c:	461a      	movge	r2, r3
 800c69e:	2a00      	cmp	r2, #0
 800c6a0:	4691      	mov	r9, r2
 800c6a2:	dc38      	bgt.n	800c716 <_printf_float+0x346>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	9305      	str	r3, [sp, #20]
 800c6a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6ac:	f104 021a 	add.w	r2, r4, #26
 800c6b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6b2:	9905      	ldr	r1, [sp, #20]
 800c6b4:	9304      	str	r3, [sp, #16]
 800c6b6:	eba3 0309 	sub.w	r3, r3, r9
 800c6ba:	428b      	cmp	r3, r1
 800c6bc:	dc33      	bgt.n	800c726 <_printf_float+0x356>
 800c6be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	db3c      	blt.n	800c740 <_printf_float+0x370>
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	07da      	lsls	r2, r3, #31
 800c6ca:	d439      	bmi.n	800c740 <_printf_float+0x370>
 800c6cc:	9a08      	ldr	r2, [sp, #32]
 800c6ce:	9b04      	ldr	r3, [sp, #16]
 800c6d0:	9907      	ldr	r1, [sp, #28]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	eba2 0901 	sub.w	r9, r2, r1
 800c6d8:	4599      	cmp	r9, r3
 800c6da:	bfa8      	it	ge
 800c6dc:	4699      	movge	r9, r3
 800c6de:	f1b9 0f00 	cmp.w	r9, #0
 800c6e2:	dc35      	bgt.n	800c750 <_printf_float+0x380>
 800c6e4:	f04f 0800 	mov.w	r8, #0
 800c6e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6ec:	f104 0a1a 	add.w	sl, r4, #26
 800c6f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c6f4:	1a9b      	subs	r3, r3, r2
 800c6f6:	eba3 0309 	sub.w	r3, r3, r9
 800c6fa:	4543      	cmp	r3, r8
 800c6fc:	f77f af75 	ble.w	800c5ea <_printf_float+0x21a>
 800c700:	2301      	movs	r3, #1
 800c702:	4652      	mov	r2, sl
 800c704:	4631      	mov	r1, r6
 800c706:	4628      	mov	r0, r5
 800c708:	47b8      	blx	r7
 800c70a:	3001      	adds	r0, #1
 800c70c:	f43f aeae 	beq.w	800c46c <_printf_float+0x9c>
 800c710:	f108 0801 	add.w	r8, r8, #1
 800c714:	e7ec      	b.n	800c6f0 <_printf_float+0x320>
 800c716:	4613      	mov	r3, r2
 800c718:	4631      	mov	r1, r6
 800c71a:	4642      	mov	r2, r8
 800c71c:	4628      	mov	r0, r5
 800c71e:	47b8      	blx	r7
 800c720:	3001      	adds	r0, #1
 800c722:	d1bf      	bne.n	800c6a4 <_printf_float+0x2d4>
 800c724:	e6a2      	b.n	800c46c <_printf_float+0x9c>
 800c726:	2301      	movs	r3, #1
 800c728:	4631      	mov	r1, r6
 800c72a:	4628      	mov	r0, r5
 800c72c:	9204      	str	r2, [sp, #16]
 800c72e:	47b8      	blx	r7
 800c730:	3001      	adds	r0, #1
 800c732:	f43f ae9b 	beq.w	800c46c <_printf_float+0x9c>
 800c736:	9b05      	ldr	r3, [sp, #20]
 800c738:	9a04      	ldr	r2, [sp, #16]
 800c73a:	3301      	adds	r3, #1
 800c73c:	9305      	str	r3, [sp, #20]
 800c73e:	e7b7      	b.n	800c6b0 <_printf_float+0x2e0>
 800c740:	4653      	mov	r3, sl
 800c742:	465a      	mov	r2, fp
 800c744:	4631      	mov	r1, r6
 800c746:	4628      	mov	r0, r5
 800c748:	47b8      	blx	r7
 800c74a:	3001      	adds	r0, #1
 800c74c:	d1be      	bne.n	800c6cc <_printf_float+0x2fc>
 800c74e:	e68d      	b.n	800c46c <_printf_float+0x9c>
 800c750:	9a04      	ldr	r2, [sp, #16]
 800c752:	464b      	mov	r3, r9
 800c754:	4442      	add	r2, r8
 800c756:	4631      	mov	r1, r6
 800c758:	4628      	mov	r0, r5
 800c75a:	47b8      	blx	r7
 800c75c:	3001      	adds	r0, #1
 800c75e:	d1c1      	bne.n	800c6e4 <_printf_float+0x314>
 800c760:	e684      	b.n	800c46c <_printf_float+0x9c>
 800c762:	9a08      	ldr	r2, [sp, #32]
 800c764:	2a01      	cmp	r2, #1
 800c766:	dc01      	bgt.n	800c76c <_printf_float+0x39c>
 800c768:	07db      	lsls	r3, r3, #31
 800c76a:	d537      	bpl.n	800c7dc <_printf_float+0x40c>
 800c76c:	2301      	movs	r3, #1
 800c76e:	4642      	mov	r2, r8
 800c770:	4631      	mov	r1, r6
 800c772:	4628      	mov	r0, r5
 800c774:	47b8      	blx	r7
 800c776:	3001      	adds	r0, #1
 800c778:	f43f ae78 	beq.w	800c46c <_printf_float+0x9c>
 800c77c:	4653      	mov	r3, sl
 800c77e:	465a      	mov	r2, fp
 800c780:	4631      	mov	r1, r6
 800c782:	4628      	mov	r0, r5
 800c784:	47b8      	blx	r7
 800c786:	3001      	adds	r0, #1
 800c788:	f43f ae70 	beq.w	800c46c <_printf_float+0x9c>
 800c78c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c790:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c798:	d01b      	beq.n	800c7d2 <_printf_float+0x402>
 800c79a:	9b08      	ldr	r3, [sp, #32]
 800c79c:	f108 0201 	add.w	r2, r8, #1
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	47b8      	blx	r7
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d10e      	bne.n	800c7ca <_printf_float+0x3fa>
 800c7ac:	e65e      	b.n	800c46c <_printf_float+0x9c>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	464a      	mov	r2, r9
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	47b8      	blx	r7
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	f43f ae57 	beq.w	800c46c <_printf_float+0x9c>
 800c7be:	f108 0801 	add.w	r8, r8, #1
 800c7c2:	9b08      	ldr	r3, [sp, #32]
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	4543      	cmp	r3, r8
 800c7c8:	dcf1      	bgt.n	800c7ae <_printf_float+0x3de>
 800c7ca:	9b04      	ldr	r3, [sp, #16]
 800c7cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7d0:	e6db      	b.n	800c58a <_printf_float+0x1ba>
 800c7d2:	f04f 0800 	mov.w	r8, #0
 800c7d6:	f104 091a 	add.w	r9, r4, #26
 800c7da:	e7f2      	b.n	800c7c2 <_printf_float+0x3f2>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	4642      	mov	r2, r8
 800c7e0:	e7df      	b.n	800c7a2 <_printf_float+0x3d2>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	464a      	mov	r2, r9
 800c7e6:	4631      	mov	r1, r6
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	47b8      	blx	r7
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	f43f ae3d 	beq.w	800c46c <_printf_float+0x9c>
 800c7f2:	f108 0801 	add.w	r8, r8, #1
 800c7f6:	68e3      	ldr	r3, [r4, #12]
 800c7f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7fa:	1a5b      	subs	r3, r3, r1
 800c7fc:	4543      	cmp	r3, r8
 800c7fe:	dcf0      	bgt.n	800c7e2 <_printf_float+0x412>
 800c800:	e6f7      	b.n	800c5f2 <_printf_float+0x222>
 800c802:	f04f 0800 	mov.w	r8, #0
 800c806:	f104 0919 	add.w	r9, r4, #25
 800c80a:	e7f4      	b.n	800c7f6 <_printf_float+0x426>

0800c80c <_printf_common>:
 800c80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c810:	4616      	mov	r6, r2
 800c812:	4699      	mov	r9, r3
 800c814:	688a      	ldr	r2, [r1, #8]
 800c816:	690b      	ldr	r3, [r1, #16]
 800c818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c81c:	4293      	cmp	r3, r2
 800c81e:	bfb8      	it	lt
 800c820:	4613      	movlt	r3, r2
 800c822:	6033      	str	r3, [r6, #0]
 800c824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c828:	4607      	mov	r7, r0
 800c82a:	460c      	mov	r4, r1
 800c82c:	b10a      	cbz	r2, 800c832 <_printf_common+0x26>
 800c82e:	3301      	adds	r3, #1
 800c830:	6033      	str	r3, [r6, #0]
 800c832:	6823      	ldr	r3, [r4, #0]
 800c834:	0699      	lsls	r1, r3, #26
 800c836:	bf42      	ittt	mi
 800c838:	6833      	ldrmi	r3, [r6, #0]
 800c83a:	3302      	addmi	r3, #2
 800c83c:	6033      	strmi	r3, [r6, #0]
 800c83e:	6825      	ldr	r5, [r4, #0]
 800c840:	f015 0506 	ands.w	r5, r5, #6
 800c844:	d106      	bne.n	800c854 <_printf_common+0x48>
 800c846:	f104 0a19 	add.w	sl, r4, #25
 800c84a:	68e3      	ldr	r3, [r4, #12]
 800c84c:	6832      	ldr	r2, [r6, #0]
 800c84e:	1a9b      	subs	r3, r3, r2
 800c850:	42ab      	cmp	r3, r5
 800c852:	dc26      	bgt.n	800c8a2 <_printf_common+0x96>
 800c854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c858:	1e13      	subs	r3, r2, #0
 800c85a:	6822      	ldr	r2, [r4, #0]
 800c85c:	bf18      	it	ne
 800c85e:	2301      	movne	r3, #1
 800c860:	0692      	lsls	r2, r2, #26
 800c862:	d42b      	bmi.n	800c8bc <_printf_common+0xb0>
 800c864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c868:	4649      	mov	r1, r9
 800c86a:	4638      	mov	r0, r7
 800c86c:	47c0      	blx	r8
 800c86e:	3001      	adds	r0, #1
 800c870:	d01e      	beq.n	800c8b0 <_printf_common+0xa4>
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	68e5      	ldr	r5, [r4, #12]
 800c876:	6832      	ldr	r2, [r6, #0]
 800c878:	f003 0306 	and.w	r3, r3, #6
 800c87c:	2b04      	cmp	r3, #4
 800c87e:	bf08      	it	eq
 800c880:	1aad      	subeq	r5, r5, r2
 800c882:	68a3      	ldr	r3, [r4, #8]
 800c884:	6922      	ldr	r2, [r4, #16]
 800c886:	bf0c      	ite	eq
 800c888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c88c:	2500      	movne	r5, #0
 800c88e:	4293      	cmp	r3, r2
 800c890:	bfc4      	itt	gt
 800c892:	1a9b      	subgt	r3, r3, r2
 800c894:	18ed      	addgt	r5, r5, r3
 800c896:	2600      	movs	r6, #0
 800c898:	341a      	adds	r4, #26
 800c89a:	42b5      	cmp	r5, r6
 800c89c:	d11a      	bne.n	800c8d4 <_printf_common+0xc8>
 800c89e:	2000      	movs	r0, #0
 800c8a0:	e008      	b.n	800c8b4 <_printf_common+0xa8>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	4652      	mov	r2, sl
 800c8a6:	4649      	mov	r1, r9
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	47c0      	blx	r8
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	d103      	bne.n	800c8b8 <_printf_common+0xac>
 800c8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b8:	3501      	adds	r5, #1
 800c8ba:	e7c6      	b.n	800c84a <_printf_common+0x3e>
 800c8bc:	18e1      	adds	r1, r4, r3
 800c8be:	1c5a      	adds	r2, r3, #1
 800c8c0:	2030      	movs	r0, #48	; 0x30
 800c8c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8c6:	4422      	add	r2, r4
 800c8c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8d0:	3302      	adds	r3, #2
 800c8d2:	e7c7      	b.n	800c864 <_printf_common+0x58>
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	4622      	mov	r2, r4
 800c8d8:	4649      	mov	r1, r9
 800c8da:	4638      	mov	r0, r7
 800c8dc:	47c0      	blx	r8
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d0e6      	beq.n	800c8b0 <_printf_common+0xa4>
 800c8e2:	3601      	adds	r6, #1
 800c8e4:	e7d9      	b.n	800c89a <_printf_common+0x8e>
	...

0800c8e8 <_printf_i>:
 800c8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8ec:	460c      	mov	r4, r1
 800c8ee:	4691      	mov	r9, r2
 800c8f0:	7e27      	ldrb	r7, [r4, #24]
 800c8f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c8f4:	2f78      	cmp	r7, #120	; 0x78
 800c8f6:	4680      	mov	r8, r0
 800c8f8:	469a      	mov	sl, r3
 800c8fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8fe:	d807      	bhi.n	800c910 <_printf_i+0x28>
 800c900:	2f62      	cmp	r7, #98	; 0x62
 800c902:	d80a      	bhi.n	800c91a <_printf_i+0x32>
 800c904:	2f00      	cmp	r7, #0
 800c906:	f000 80d8 	beq.w	800caba <_printf_i+0x1d2>
 800c90a:	2f58      	cmp	r7, #88	; 0x58
 800c90c:	f000 80a3 	beq.w	800ca56 <_printf_i+0x16e>
 800c910:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c918:	e03a      	b.n	800c990 <_printf_i+0xa8>
 800c91a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c91e:	2b15      	cmp	r3, #21
 800c920:	d8f6      	bhi.n	800c910 <_printf_i+0x28>
 800c922:	a001      	add	r0, pc, #4	; (adr r0, 800c928 <_printf_i+0x40>)
 800c924:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c928:	0800c981 	.word	0x0800c981
 800c92c:	0800c995 	.word	0x0800c995
 800c930:	0800c911 	.word	0x0800c911
 800c934:	0800c911 	.word	0x0800c911
 800c938:	0800c911 	.word	0x0800c911
 800c93c:	0800c911 	.word	0x0800c911
 800c940:	0800c995 	.word	0x0800c995
 800c944:	0800c911 	.word	0x0800c911
 800c948:	0800c911 	.word	0x0800c911
 800c94c:	0800c911 	.word	0x0800c911
 800c950:	0800c911 	.word	0x0800c911
 800c954:	0800caa1 	.word	0x0800caa1
 800c958:	0800c9c5 	.word	0x0800c9c5
 800c95c:	0800ca83 	.word	0x0800ca83
 800c960:	0800c911 	.word	0x0800c911
 800c964:	0800c911 	.word	0x0800c911
 800c968:	0800cac3 	.word	0x0800cac3
 800c96c:	0800c911 	.word	0x0800c911
 800c970:	0800c9c5 	.word	0x0800c9c5
 800c974:	0800c911 	.word	0x0800c911
 800c978:	0800c911 	.word	0x0800c911
 800c97c:	0800ca8b 	.word	0x0800ca8b
 800c980:	680b      	ldr	r3, [r1, #0]
 800c982:	1d1a      	adds	r2, r3, #4
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	600a      	str	r2, [r1, #0]
 800c988:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c990:	2301      	movs	r3, #1
 800c992:	e0a3      	b.n	800cadc <_printf_i+0x1f4>
 800c994:	6825      	ldr	r5, [r4, #0]
 800c996:	6808      	ldr	r0, [r1, #0]
 800c998:	062e      	lsls	r6, r5, #24
 800c99a:	f100 0304 	add.w	r3, r0, #4
 800c99e:	d50a      	bpl.n	800c9b6 <_printf_i+0xce>
 800c9a0:	6805      	ldr	r5, [r0, #0]
 800c9a2:	600b      	str	r3, [r1, #0]
 800c9a4:	2d00      	cmp	r5, #0
 800c9a6:	da03      	bge.n	800c9b0 <_printf_i+0xc8>
 800c9a8:	232d      	movs	r3, #45	; 0x2d
 800c9aa:	426d      	negs	r5, r5
 800c9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9b0:	485e      	ldr	r0, [pc, #376]	; (800cb2c <_printf_i+0x244>)
 800c9b2:	230a      	movs	r3, #10
 800c9b4:	e019      	b.n	800c9ea <_printf_i+0x102>
 800c9b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c9ba:	6805      	ldr	r5, [r0, #0]
 800c9bc:	600b      	str	r3, [r1, #0]
 800c9be:	bf18      	it	ne
 800c9c0:	b22d      	sxthne	r5, r5
 800c9c2:	e7ef      	b.n	800c9a4 <_printf_i+0xbc>
 800c9c4:	680b      	ldr	r3, [r1, #0]
 800c9c6:	6825      	ldr	r5, [r4, #0]
 800c9c8:	1d18      	adds	r0, r3, #4
 800c9ca:	6008      	str	r0, [r1, #0]
 800c9cc:	0628      	lsls	r0, r5, #24
 800c9ce:	d501      	bpl.n	800c9d4 <_printf_i+0xec>
 800c9d0:	681d      	ldr	r5, [r3, #0]
 800c9d2:	e002      	b.n	800c9da <_printf_i+0xf2>
 800c9d4:	0669      	lsls	r1, r5, #25
 800c9d6:	d5fb      	bpl.n	800c9d0 <_printf_i+0xe8>
 800c9d8:	881d      	ldrh	r5, [r3, #0]
 800c9da:	4854      	ldr	r0, [pc, #336]	; (800cb2c <_printf_i+0x244>)
 800c9dc:	2f6f      	cmp	r7, #111	; 0x6f
 800c9de:	bf0c      	ite	eq
 800c9e0:	2308      	moveq	r3, #8
 800c9e2:	230a      	movne	r3, #10
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9ea:	6866      	ldr	r6, [r4, #4]
 800c9ec:	60a6      	str	r6, [r4, #8]
 800c9ee:	2e00      	cmp	r6, #0
 800c9f0:	bfa2      	ittt	ge
 800c9f2:	6821      	ldrge	r1, [r4, #0]
 800c9f4:	f021 0104 	bicge.w	r1, r1, #4
 800c9f8:	6021      	strge	r1, [r4, #0]
 800c9fa:	b90d      	cbnz	r5, 800ca00 <_printf_i+0x118>
 800c9fc:	2e00      	cmp	r6, #0
 800c9fe:	d04d      	beq.n	800ca9c <_printf_i+0x1b4>
 800ca00:	4616      	mov	r6, r2
 800ca02:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca06:	fb03 5711 	mls	r7, r3, r1, r5
 800ca0a:	5dc7      	ldrb	r7, [r0, r7]
 800ca0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca10:	462f      	mov	r7, r5
 800ca12:	42bb      	cmp	r3, r7
 800ca14:	460d      	mov	r5, r1
 800ca16:	d9f4      	bls.n	800ca02 <_printf_i+0x11a>
 800ca18:	2b08      	cmp	r3, #8
 800ca1a:	d10b      	bne.n	800ca34 <_printf_i+0x14c>
 800ca1c:	6823      	ldr	r3, [r4, #0]
 800ca1e:	07df      	lsls	r7, r3, #31
 800ca20:	d508      	bpl.n	800ca34 <_printf_i+0x14c>
 800ca22:	6923      	ldr	r3, [r4, #16]
 800ca24:	6861      	ldr	r1, [r4, #4]
 800ca26:	4299      	cmp	r1, r3
 800ca28:	bfde      	ittt	le
 800ca2a:	2330      	movle	r3, #48	; 0x30
 800ca2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca30:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca34:	1b92      	subs	r2, r2, r6
 800ca36:	6122      	str	r2, [r4, #16]
 800ca38:	f8cd a000 	str.w	sl, [sp]
 800ca3c:	464b      	mov	r3, r9
 800ca3e:	aa03      	add	r2, sp, #12
 800ca40:	4621      	mov	r1, r4
 800ca42:	4640      	mov	r0, r8
 800ca44:	f7ff fee2 	bl	800c80c <_printf_common>
 800ca48:	3001      	adds	r0, #1
 800ca4a:	d14c      	bne.n	800cae6 <_printf_i+0x1fe>
 800ca4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca50:	b004      	add	sp, #16
 800ca52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca56:	4835      	ldr	r0, [pc, #212]	; (800cb2c <_printf_i+0x244>)
 800ca58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	680e      	ldr	r6, [r1, #0]
 800ca60:	061f      	lsls	r7, r3, #24
 800ca62:	f856 5b04 	ldr.w	r5, [r6], #4
 800ca66:	600e      	str	r6, [r1, #0]
 800ca68:	d514      	bpl.n	800ca94 <_printf_i+0x1ac>
 800ca6a:	07d9      	lsls	r1, r3, #31
 800ca6c:	bf44      	itt	mi
 800ca6e:	f043 0320 	orrmi.w	r3, r3, #32
 800ca72:	6023      	strmi	r3, [r4, #0]
 800ca74:	b91d      	cbnz	r5, 800ca7e <_printf_i+0x196>
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	f023 0320 	bic.w	r3, r3, #32
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	2310      	movs	r3, #16
 800ca80:	e7b0      	b.n	800c9e4 <_printf_i+0xfc>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	f043 0320 	orr.w	r3, r3, #32
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	2378      	movs	r3, #120	; 0x78
 800ca8c:	4828      	ldr	r0, [pc, #160]	; (800cb30 <_printf_i+0x248>)
 800ca8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca92:	e7e3      	b.n	800ca5c <_printf_i+0x174>
 800ca94:	065e      	lsls	r6, r3, #25
 800ca96:	bf48      	it	mi
 800ca98:	b2ad      	uxthmi	r5, r5
 800ca9a:	e7e6      	b.n	800ca6a <_printf_i+0x182>
 800ca9c:	4616      	mov	r6, r2
 800ca9e:	e7bb      	b.n	800ca18 <_printf_i+0x130>
 800caa0:	680b      	ldr	r3, [r1, #0]
 800caa2:	6826      	ldr	r6, [r4, #0]
 800caa4:	6960      	ldr	r0, [r4, #20]
 800caa6:	1d1d      	adds	r5, r3, #4
 800caa8:	600d      	str	r5, [r1, #0]
 800caaa:	0635      	lsls	r5, r6, #24
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	d501      	bpl.n	800cab4 <_printf_i+0x1cc>
 800cab0:	6018      	str	r0, [r3, #0]
 800cab2:	e002      	b.n	800caba <_printf_i+0x1d2>
 800cab4:	0671      	lsls	r1, r6, #25
 800cab6:	d5fb      	bpl.n	800cab0 <_printf_i+0x1c8>
 800cab8:	8018      	strh	r0, [r3, #0]
 800caba:	2300      	movs	r3, #0
 800cabc:	6123      	str	r3, [r4, #16]
 800cabe:	4616      	mov	r6, r2
 800cac0:	e7ba      	b.n	800ca38 <_printf_i+0x150>
 800cac2:	680b      	ldr	r3, [r1, #0]
 800cac4:	1d1a      	adds	r2, r3, #4
 800cac6:	600a      	str	r2, [r1, #0]
 800cac8:	681e      	ldr	r6, [r3, #0]
 800caca:	6862      	ldr	r2, [r4, #4]
 800cacc:	2100      	movs	r1, #0
 800cace:	4630      	mov	r0, r6
 800cad0:	f7f3 fc26 	bl	8000320 <memchr>
 800cad4:	b108      	cbz	r0, 800cada <_printf_i+0x1f2>
 800cad6:	1b80      	subs	r0, r0, r6
 800cad8:	6060      	str	r0, [r4, #4]
 800cada:	6863      	ldr	r3, [r4, #4]
 800cadc:	6123      	str	r3, [r4, #16]
 800cade:	2300      	movs	r3, #0
 800cae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cae4:	e7a8      	b.n	800ca38 <_printf_i+0x150>
 800cae6:	6923      	ldr	r3, [r4, #16]
 800cae8:	4632      	mov	r2, r6
 800caea:	4649      	mov	r1, r9
 800caec:	4640      	mov	r0, r8
 800caee:	47d0      	blx	sl
 800caf0:	3001      	adds	r0, #1
 800caf2:	d0ab      	beq.n	800ca4c <_printf_i+0x164>
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	079b      	lsls	r3, r3, #30
 800caf8:	d413      	bmi.n	800cb22 <_printf_i+0x23a>
 800cafa:	68e0      	ldr	r0, [r4, #12]
 800cafc:	9b03      	ldr	r3, [sp, #12]
 800cafe:	4298      	cmp	r0, r3
 800cb00:	bfb8      	it	lt
 800cb02:	4618      	movlt	r0, r3
 800cb04:	e7a4      	b.n	800ca50 <_printf_i+0x168>
 800cb06:	2301      	movs	r3, #1
 800cb08:	4632      	mov	r2, r6
 800cb0a:	4649      	mov	r1, r9
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	47d0      	blx	sl
 800cb10:	3001      	adds	r0, #1
 800cb12:	d09b      	beq.n	800ca4c <_printf_i+0x164>
 800cb14:	3501      	adds	r5, #1
 800cb16:	68e3      	ldr	r3, [r4, #12]
 800cb18:	9903      	ldr	r1, [sp, #12]
 800cb1a:	1a5b      	subs	r3, r3, r1
 800cb1c:	42ab      	cmp	r3, r5
 800cb1e:	dcf2      	bgt.n	800cb06 <_printf_i+0x21e>
 800cb20:	e7eb      	b.n	800cafa <_printf_i+0x212>
 800cb22:	2500      	movs	r5, #0
 800cb24:	f104 0619 	add.w	r6, r4, #25
 800cb28:	e7f5      	b.n	800cb16 <_printf_i+0x22e>
 800cb2a:	bf00      	nop
 800cb2c:	0800f736 	.word	0x0800f736
 800cb30:	0800f747 	.word	0x0800f747

0800cb34 <quorem>:
 800cb34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb38:	6903      	ldr	r3, [r0, #16]
 800cb3a:	690c      	ldr	r4, [r1, #16]
 800cb3c:	42a3      	cmp	r3, r4
 800cb3e:	4607      	mov	r7, r0
 800cb40:	f2c0 8081 	blt.w	800cc46 <quorem+0x112>
 800cb44:	3c01      	subs	r4, #1
 800cb46:	f101 0814 	add.w	r8, r1, #20
 800cb4a:	f100 0514 	add.w	r5, r0, #20
 800cb4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb68:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb6c:	d331      	bcc.n	800cbd2 <quorem+0x9e>
 800cb6e:	f04f 0e00 	mov.w	lr, #0
 800cb72:	4640      	mov	r0, r8
 800cb74:	46ac      	mov	ip, r5
 800cb76:	46f2      	mov	sl, lr
 800cb78:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb7c:	b293      	uxth	r3, r2
 800cb7e:	fb06 e303 	mla	r3, r6, r3, lr
 800cb82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	ebaa 0303 	sub.w	r3, sl, r3
 800cb8c:	0c12      	lsrs	r2, r2, #16
 800cb8e:	f8dc a000 	ldr.w	sl, [ip]
 800cb92:	fb06 e202 	mla	r2, r6, r2, lr
 800cb96:	fa13 f38a 	uxtah	r3, r3, sl
 800cb9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb9e:	fa1f fa82 	uxth.w	sl, r2
 800cba2:	f8dc 2000 	ldr.w	r2, [ip]
 800cba6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cbaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbb4:	4581      	cmp	r9, r0
 800cbb6:	f84c 3b04 	str.w	r3, [ip], #4
 800cbba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cbbe:	d2db      	bcs.n	800cb78 <quorem+0x44>
 800cbc0:	f855 300b 	ldr.w	r3, [r5, fp]
 800cbc4:	b92b      	cbnz	r3, 800cbd2 <quorem+0x9e>
 800cbc6:	9b01      	ldr	r3, [sp, #4]
 800cbc8:	3b04      	subs	r3, #4
 800cbca:	429d      	cmp	r5, r3
 800cbcc:	461a      	mov	r2, r3
 800cbce:	d32e      	bcc.n	800cc2e <quorem+0xfa>
 800cbd0:	613c      	str	r4, [r7, #16]
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	f001 f848 	bl	800dc68 <__mcmp>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	db24      	blt.n	800cc26 <quorem+0xf2>
 800cbdc:	3601      	adds	r6, #1
 800cbde:	4628      	mov	r0, r5
 800cbe0:	f04f 0c00 	mov.w	ip, #0
 800cbe4:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbe8:	f8d0 e000 	ldr.w	lr, [r0]
 800cbec:	b293      	uxth	r3, r2
 800cbee:	ebac 0303 	sub.w	r3, ip, r3
 800cbf2:	0c12      	lsrs	r2, r2, #16
 800cbf4:	fa13 f38e 	uxtah	r3, r3, lr
 800cbf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cbfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc06:	45c1      	cmp	r9, r8
 800cc08:	f840 3b04 	str.w	r3, [r0], #4
 800cc0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cc10:	d2e8      	bcs.n	800cbe4 <quorem+0xb0>
 800cc12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc1a:	b922      	cbnz	r2, 800cc26 <quorem+0xf2>
 800cc1c:	3b04      	subs	r3, #4
 800cc1e:	429d      	cmp	r5, r3
 800cc20:	461a      	mov	r2, r3
 800cc22:	d30a      	bcc.n	800cc3a <quorem+0x106>
 800cc24:	613c      	str	r4, [r7, #16]
 800cc26:	4630      	mov	r0, r6
 800cc28:	b003      	add	sp, #12
 800cc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2e:	6812      	ldr	r2, [r2, #0]
 800cc30:	3b04      	subs	r3, #4
 800cc32:	2a00      	cmp	r2, #0
 800cc34:	d1cc      	bne.n	800cbd0 <quorem+0x9c>
 800cc36:	3c01      	subs	r4, #1
 800cc38:	e7c7      	b.n	800cbca <quorem+0x96>
 800cc3a:	6812      	ldr	r2, [r2, #0]
 800cc3c:	3b04      	subs	r3, #4
 800cc3e:	2a00      	cmp	r2, #0
 800cc40:	d1f0      	bne.n	800cc24 <quorem+0xf0>
 800cc42:	3c01      	subs	r4, #1
 800cc44:	e7eb      	b.n	800cc1e <quorem+0xea>
 800cc46:	2000      	movs	r0, #0
 800cc48:	e7ee      	b.n	800cc28 <quorem+0xf4>
 800cc4a:	0000      	movs	r0, r0
 800cc4c:	0000      	movs	r0, r0
	...

0800cc50 <_dtoa_r>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	ec59 8b10 	vmov	r8, r9, d0
 800cc58:	b095      	sub	sp, #84	; 0x54
 800cc5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc5c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800cc5e:	9107      	str	r1, [sp, #28]
 800cc60:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cc64:	4606      	mov	r6, r0
 800cc66:	9209      	str	r2, [sp, #36]	; 0x24
 800cc68:	9310      	str	r3, [sp, #64]	; 0x40
 800cc6a:	b975      	cbnz	r5, 800cc8a <_dtoa_r+0x3a>
 800cc6c:	2010      	movs	r0, #16
 800cc6e:	f000 fd75 	bl	800d75c <malloc>
 800cc72:	4602      	mov	r2, r0
 800cc74:	6270      	str	r0, [r6, #36]	; 0x24
 800cc76:	b920      	cbnz	r0, 800cc82 <_dtoa_r+0x32>
 800cc78:	4bab      	ldr	r3, [pc, #684]	; (800cf28 <_dtoa_r+0x2d8>)
 800cc7a:	21ea      	movs	r1, #234	; 0xea
 800cc7c:	48ab      	ldr	r0, [pc, #684]	; (800cf2c <_dtoa_r+0x2dc>)
 800cc7e:	f001 f9bd 	bl	800dffc <__assert_func>
 800cc82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc86:	6005      	str	r5, [r0, #0]
 800cc88:	60c5      	str	r5, [r0, #12]
 800cc8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cc8c:	6819      	ldr	r1, [r3, #0]
 800cc8e:	b151      	cbz	r1, 800cca6 <_dtoa_r+0x56>
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	604a      	str	r2, [r1, #4]
 800cc94:	2301      	movs	r3, #1
 800cc96:	4093      	lsls	r3, r2
 800cc98:	608b      	str	r3, [r1, #8]
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f000 fda6 	bl	800d7ec <_Bfree>
 800cca0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	f1b9 0300 	subs.w	r3, r9, #0
 800ccaa:	bfbb      	ittet	lt
 800ccac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ccb0:	9303      	strlt	r3, [sp, #12]
 800ccb2:	2300      	movge	r3, #0
 800ccb4:	2201      	movlt	r2, #1
 800ccb6:	bfac      	ite	ge
 800ccb8:	6023      	strge	r3, [r4, #0]
 800ccba:	6022      	strlt	r2, [r4, #0]
 800ccbc:	4b9c      	ldr	r3, [pc, #624]	; (800cf30 <_dtoa_r+0x2e0>)
 800ccbe:	9c03      	ldr	r4, [sp, #12]
 800ccc0:	43a3      	bics	r3, r4
 800ccc2:	d11a      	bne.n	800ccfa <_dtoa_r+0xaa>
 800ccc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ccc6:	f242 730f 	movw	r3, #9999	; 0x270f
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ccd0:	ea53 0308 	orrs.w	r3, r3, r8
 800ccd4:	f000 8512 	beq.w	800d6fc <_dtoa_r+0xaac>
 800ccd8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ccda:	b953      	cbnz	r3, 800ccf2 <_dtoa_r+0xa2>
 800ccdc:	4b95      	ldr	r3, [pc, #596]	; (800cf34 <_dtoa_r+0x2e4>)
 800ccde:	e01f      	b.n	800cd20 <_dtoa_r+0xd0>
 800cce0:	4b95      	ldr	r3, [pc, #596]	; (800cf38 <_dtoa_r+0x2e8>)
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	3308      	adds	r3, #8
 800cce6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	9800      	ldr	r0, [sp, #0]
 800ccec:	b015      	add	sp, #84	; 0x54
 800ccee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf2:	4b90      	ldr	r3, [pc, #576]	; (800cf34 <_dtoa_r+0x2e4>)
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	3303      	adds	r3, #3
 800ccf8:	e7f5      	b.n	800cce6 <_dtoa_r+0x96>
 800ccfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccfe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd06:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cd0a:	d10b      	bne.n	800cd24 <_dtoa_r+0xd4>
 800cd0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cd0e:	2301      	movs	r3, #1
 800cd10:	6013      	str	r3, [r2, #0]
 800cd12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f000 84ee 	beq.w	800d6f6 <_dtoa_r+0xaa6>
 800cd1a:	4888      	ldr	r0, [pc, #544]	; (800cf3c <_dtoa_r+0x2ec>)
 800cd1c:	6018      	str	r0, [r3, #0]
 800cd1e:	1e43      	subs	r3, r0, #1
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	e7e2      	b.n	800ccea <_dtoa_r+0x9a>
 800cd24:	a913      	add	r1, sp, #76	; 0x4c
 800cd26:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cd2a:	aa12      	add	r2, sp, #72	; 0x48
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f001 f83f 	bl	800ddb0 <__d2b>
 800cd32:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800cd36:	4605      	mov	r5, r0
 800cd38:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cd3a:	2900      	cmp	r1, #0
 800cd3c:	d047      	beq.n	800cdce <_dtoa_r+0x17e>
 800cd3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cd40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cd44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cd48:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800cd4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cd50:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cd54:	2400      	movs	r4, #0
 800cd56:	ec43 2b16 	vmov	d6, r2, r3
 800cd5a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800cd5e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800cf10 <_dtoa_r+0x2c0>
 800cd62:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cd66:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800cf18 <_dtoa_r+0x2c8>
 800cd6a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cd6e:	eeb0 7b46 	vmov.f64	d7, d6
 800cd72:	ee06 1a90 	vmov	s13, r1
 800cd76:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800cd7a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800cf20 <_dtoa_r+0x2d0>
 800cd7e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cd82:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cd86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd8e:	ee16 ba90 	vmov	fp, s13
 800cd92:	9411      	str	r4, [sp, #68]	; 0x44
 800cd94:	d508      	bpl.n	800cda8 <_dtoa_r+0x158>
 800cd96:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cd9a:	eeb4 6b47 	vcmp.f64	d6, d7
 800cd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cda2:	bf18      	it	ne
 800cda4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800cda8:	f1bb 0f16 	cmp.w	fp, #22
 800cdac:	d832      	bhi.n	800ce14 <_dtoa_r+0x1c4>
 800cdae:	4b64      	ldr	r3, [pc, #400]	; (800cf40 <_dtoa_r+0x2f0>)
 800cdb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cdb4:	ed93 7b00 	vldr	d7, [r3]
 800cdb8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800cdbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc4:	d501      	bpl.n	800cdca <_dtoa_r+0x17a>
 800cdc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cdca:	2300      	movs	r3, #0
 800cdcc:	e023      	b.n	800ce16 <_dtoa_r+0x1c6>
 800cdce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cdd0:	4401      	add	r1, r0
 800cdd2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800cdd6:	2b20      	cmp	r3, #32
 800cdd8:	bfc3      	ittte	gt
 800cdda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cdde:	fa04 f303 	lslgt.w	r3, r4, r3
 800cde2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800cde6:	f1c3 0320 	rsble	r3, r3, #32
 800cdea:	bfc6      	itte	gt
 800cdec:	fa28 f804 	lsrgt.w	r8, r8, r4
 800cdf0:	ea43 0308 	orrgt.w	r3, r3, r8
 800cdf4:	fa08 f303 	lslle.w	r3, r8, r3
 800cdf8:	ee07 3a90 	vmov	s15, r3
 800cdfc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ce00:	3901      	subs	r1, #1
 800ce02:	ed8d 7b00 	vstr	d7, [sp]
 800ce06:	9c01      	ldr	r4, [sp, #4]
 800ce08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce0c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800ce10:	2401      	movs	r4, #1
 800ce12:	e7a0      	b.n	800cd56 <_dtoa_r+0x106>
 800ce14:	2301      	movs	r3, #1
 800ce16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce18:	1a43      	subs	r3, r0, r1
 800ce1a:	1e5a      	subs	r2, r3, #1
 800ce1c:	bf45      	ittet	mi
 800ce1e:	f1c3 0301 	rsbmi	r3, r3, #1
 800ce22:	9305      	strmi	r3, [sp, #20]
 800ce24:	2300      	movpl	r3, #0
 800ce26:	2300      	movmi	r3, #0
 800ce28:	9206      	str	r2, [sp, #24]
 800ce2a:	bf54      	ite	pl
 800ce2c:	9305      	strpl	r3, [sp, #20]
 800ce2e:	9306      	strmi	r3, [sp, #24]
 800ce30:	f1bb 0f00 	cmp.w	fp, #0
 800ce34:	db18      	blt.n	800ce68 <_dtoa_r+0x218>
 800ce36:	9b06      	ldr	r3, [sp, #24]
 800ce38:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800ce3c:	445b      	add	r3, fp
 800ce3e:	9306      	str	r3, [sp, #24]
 800ce40:	2300      	movs	r3, #0
 800ce42:	9a07      	ldr	r2, [sp, #28]
 800ce44:	2a09      	cmp	r2, #9
 800ce46:	d849      	bhi.n	800cedc <_dtoa_r+0x28c>
 800ce48:	2a05      	cmp	r2, #5
 800ce4a:	bfc4      	itt	gt
 800ce4c:	3a04      	subgt	r2, #4
 800ce4e:	9207      	strgt	r2, [sp, #28]
 800ce50:	9a07      	ldr	r2, [sp, #28]
 800ce52:	f1a2 0202 	sub.w	r2, r2, #2
 800ce56:	bfcc      	ite	gt
 800ce58:	2400      	movgt	r4, #0
 800ce5a:	2401      	movle	r4, #1
 800ce5c:	2a03      	cmp	r2, #3
 800ce5e:	d848      	bhi.n	800cef2 <_dtoa_r+0x2a2>
 800ce60:	e8df f002 	tbb	[pc, r2]
 800ce64:	3a2c2e0b 	.word	0x3a2c2e0b
 800ce68:	9b05      	ldr	r3, [sp, #20]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	eba3 030b 	sub.w	r3, r3, fp
 800ce70:	9305      	str	r3, [sp, #20]
 800ce72:	920e      	str	r2, [sp, #56]	; 0x38
 800ce74:	f1cb 0300 	rsb	r3, fp, #0
 800ce78:	e7e3      	b.n	800ce42 <_dtoa_r+0x1f2>
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	9208      	str	r2, [sp, #32]
 800ce7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce80:	2a00      	cmp	r2, #0
 800ce82:	dc39      	bgt.n	800cef8 <_dtoa_r+0x2a8>
 800ce84:	f04f 0a01 	mov.w	sl, #1
 800ce88:	46d1      	mov	r9, sl
 800ce8a:	4652      	mov	r2, sl
 800ce8c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ce90:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800ce92:	2100      	movs	r1, #0
 800ce94:	6079      	str	r1, [r7, #4]
 800ce96:	2004      	movs	r0, #4
 800ce98:	f100 0c14 	add.w	ip, r0, #20
 800ce9c:	4594      	cmp	ip, r2
 800ce9e:	6879      	ldr	r1, [r7, #4]
 800cea0:	d92f      	bls.n	800cf02 <_dtoa_r+0x2b2>
 800cea2:	4630      	mov	r0, r6
 800cea4:	930c      	str	r3, [sp, #48]	; 0x30
 800cea6:	f000 fc61 	bl	800d76c <_Balloc>
 800ceaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ceac:	9000      	str	r0, [sp, #0]
 800ceae:	4602      	mov	r2, r0
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d149      	bne.n	800cf48 <_dtoa_r+0x2f8>
 800ceb4:	4b23      	ldr	r3, [pc, #140]	; (800cf44 <_dtoa_r+0x2f4>)
 800ceb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ceba:	e6df      	b.n	800cc7c <_dtoa_r+0x2c>
 800cebc:	2201      	movs	r2, #1
 800cebe:	e7dd      	b.n	800ce7c <_dtoa_r+0x22c>
 800cec0:	2200      	movs	r2, #0
 800cec2:	9208      	str	r2, [sp, #32]
 800cec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cec6:	eb0b 0a02 	add.w	sl, fp, r2
 800ceca:	f10a 0901 	add.w	r9, sl, #1
 800cece:	464a      	mov	r2, r9
 800ced0:	2a01      	cmp	r2, #1
 800ced2:	bfb8      	it	lt
 800ced4:	2201      	movlt	r2, #1
 800ced6:	e7db      	b.n	800ce90 <_dtoa_r+0x240>
 800ced8:	2201      	movs	r2, #1
 800ceda:	e7f2      	b.n	800cec2 <_dtoa_r+0x272>
 800cedc:	2401      	movs	r4, #1
 800cede:	2200      	movs	r2, #0
 800cee0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cee4:	f04f 3aff 	mov.w	sl, #4294967295
 800cee8:	2100      	movs	r1, #0
 800ceea:	46d1      	mov	r9, sl
 800ceec:	2212      	movs	r2, #18
 800ceee:	9109      	str	r1, [sp, #36]	; 0x24
 800cef0:	e7ce      	b.n	800ce90 <_dtoa_r+0x240>
 800cef2:	2201      	movs	r2, #1
 800cef4:	9208      	str	r2, [sp, #32]
 800cef6:	e7f5      	b.n	800cee4 <_dtoa_r+0x294>
 800cef8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800cefc:	46d1      	mov	r9, sl
 800cefe:	4652      	mov	r2, sl
 800cf00:	e7c6      	b.n	800ce90 <_dtoa_r+0x240>
 800cf02:	3101      	adds	r1, #1
 800cf04:	6079      	str	r1, [r7, #4]
 800cf06:	0040      	lsls	r0, r0, #1
 800cf08:	e7c6      	b.n	800ce98 <_dtoa_r+0x248>
 800cf0a:	bf00      	nop
 800cf0c:	f3af 8000 	nop.w
 800cf10:	636f4361 	.word	0x636f4361
 800cf14:	3fd287a7 	.word	0x3fd287a7
 800cf18:	8b60c8b3 	.word	0x8b60c8b3
 800cf1c:	3fc68a28 	.word	0x3fc68a28
 800cf20:	509f79fb 	.word	0x509f79fb
 800cf24:	3fd34413 	.word	0x3fd34413
 800cf28:	0800f765 	.word	0x0800f765
 800cf2c:	0800f77c 	.word	0x0800f77c
 800cf30:	7ff00000 	.word	0x7ff00000
 800cf34:	0800f761 	.word	0x0800f761
 800cf38:	0800f758 	.word	0x0800f758
 800cf3c:	0800f735 	.word	0x0800f735
 800cf40:	0800f878 	.word	0x0800f878
 800cf44:	0800f7db 	.word	0x0800f7db
 800cf48:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800cf4a:	9900      	ldr	r1, [sp, #0]
 800cf4c:	6011      	str	r1, [r2, #0]
 800cf4e:	f1b9 0f0e 	cmp.w	r9, #14
 800cf52:	d872      	bhi.n	800d03a <_dtoa_r+0x3ea>
 800cf54:	2c00      	cmp	r4, #0
 800cf56:	d070      	beq.n	800d03a <_dtoa_r+0x3ea>
 800cf58:	f1bb 0f00 	cmp.w	fp, #0
 800cf5c:	f340 80a6 	ble.w	800d0ac <_dtoa_r+0x45c>
 800cf60:	49ca      	ldr	r1, [pc, #808]	; (800d28c <_dtoa_r+0x63c>)
 800cf62:	f00b 020f 	and.w	r2, fp, #15
 800cf66:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800cf6a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cf6e:	ed92 7b00 	vldr	d7, [r2]
 800cf72:	ea4f 112b 	mov.w	r1, fp, asr #4
 800cf76:	f000 808d 	beq.w	800d094 <_dtoa_r+0x444>
 800cf7a:	4ac5      	ldr	r2, [pc, #788]	; (800d290 <_dtoa_r+0x640>)
 800cf7c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800cf80:	ed92 6b08 	vldr	d6, [r2, #32]
 800cf84:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800cf88:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cf8c:	f001 010f 	and.w	r1, r1, #15
 800cf90:	2203      	movs	r2, #3
 800cf92:	48bf      	ldr	r0, [pc, #764]	; (800d290 <_dtoa_r+0x640>)
 800cf94:	2900      	cmp	r1, #0
 800cf96:	d17f      	bne.n	800d098 <_dtoa_r+0x448>
 800cf98:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cf9c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cfa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cfa4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cfa6:	2900      	cmp	r1, #0
 800cfa8:	f000 80b2 	beq.w	800d110 <_dtoa_r+0x4c0>
 800cfac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cfb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cfb4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfbc:	f140 80a8 	bpl.w	800d110 <_dtoa_r+0x4c0>
 800cfc0:	f1b9 0f00 	cmp.w	r9, #0
 800cfc4:	f000 80a4 	beq.w	800d110 <_dtoa_r+0x4c0>
 800cfc8:	f1ba 0f00 	cmp.w	sl, #0
 800cfcc:	dd31      	ble.n	800d032 <_dtoa_r+0x3e2>
 800cfce:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cfd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cfd6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cfda:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cfde:	3201      	adds	r2, #1
 800cfe0:	4650      	mov	r0, sl
 800cfe2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cfe6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cfea:	ee07 2a90 	vmov	s15, r2
 800cfee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cff2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cff6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800cffa:	9c03      	ldr	r4, [sp, #12]
 800cffc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d000:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d004:	2800      	cmp	r0, #0
 800d006:	f040 8086 	bne.w	800d116 <_dtoa_r+0x4c6>
 800d00a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d00e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d012:	ec42 1b17 	vmov	d7, r1, r2
 800d016:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01e:	f300 8272 	bgt.w	800d506 <_dtoa_r+0x8b6>
 800d022:	eeb1 7b47 	vneg.f64	d7, d7
 800d026:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d02e:	f100 8267 	bmi.w	800d500 <_dtoa_r+0x8b0>
 800d032:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d036:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d03a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d03c:	2a00      	cmp	r2, #0
 800d03e:	f2c0 8129 	blt.w	800d294 <_dtoa_r+0x644>
 800d042:	f1bb 0f0e 	cmp.w	fp, #14
 800d046:	f300 8125 	bgt.w	800d294 <_dtoa_r+0x644>
 800d04a:	4b90      	ldr	r3, [pc, #576]	; (800d28c <_dtoa_r+0x63c>)
 800d04c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d050:	ed93 6b00 	vldr	d6, [r3]
 800d054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d056:	2b00      	cmp	r3, #0
 800d058:	f280 80c3 	bge.w	800d1e2 <_dtoa_r+0x592>
 800d05c:	f1b9 0f00 	cmp.w	r9, #0
 800d060:	f300 80bf 	bgt.w	800d1e2 <_dtoa_r+0x592>
 800d064:	f040 824c 	bne.w	800d500 <_dtoa_r+0x8b0>
 800d068:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d06c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d070:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d074:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d07c:	464c      	mov	r4, r9
 800d07e:	464f      	mov	r7, r9
 800d080:	f280 8222 	bge.w	800d4c8 <_dtoa_r+0x878>
 800d084:	f8dd 8000 	ldr.w	r8, [sp]
 800d088:	2331      	movs	r3, #49	; 0x31
 800d08a:	f808 3b01 	strb.w	r3, [r8], #1
 800d08e:	f10b 0b01 	add.w	fp, fp, #1
 800d092:	e21e      	b.n	800d4d2 <_dtoa_r+0x882>
 800d094:	2202      	movs	r2, #2
 800d096:	e77c      	b.n	800cf92 <_dtoa_r+0x342>
 800d098:	07cc      	lsls	r4, r1, #31
 800d09a:	d504      	bpl.n	800d0a6 <_dtoa_r+0x456>
 800d09c:	ed90 6b00 	vldr	d6, [r0]
 800d0a0:	3201      	adds	r2, #1
 800d0a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0a6:	1049      	asrs	r1, r1, #1
 800d0a8:	3008      	adds	r0, #8
 800d0aa:	e773      	b.n	800cf94 <_dtoa_r+0x344>
 800d0ac:	d02e      	beq.n	800d10c <_dtoa_r+0x4bc>
 800d0ae:	f1cb 0100 	rsb	r1, fp, #0
 800d0b2:	4a76      	ldr	r2, [pc, #472]	; (800d28c <_dtoa_r+0x63c>)
 800d0b4:	f001 000f 	and.w	r0, r1, #15
 800d0b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d0bc:	ed92 7b00 	vldr	d7, [r2]
 800d0c0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d0c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d0c8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d0cc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d0d0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d0d4:	486e      	ldr	r0, [pc, #440]	; (800d290 <_dtoa_r+0x640>)
 800d0d6:	1109      	asrs	r1, r1, #4
 800d0d8:	2400      	movs	r4, #0
 800d0da:	2202      	movs	r2, #2
 800d0dc:	b939      	cbnz	r1, 800d0ee <_dtoa_r+0x49e>
 800d0de:	2c00      	cmp	r4, #0
 800d0e0:	f43f af60 	beq.w	800cfa4 <_dtoa_r+0x354>
 800d0e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d0e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0ec:	e75a      	b.n	800cfa4 <_dtoa_r+0x354>
 800d0ee:	07cf      	lsls	r7, r1, #31
 800d0f0:	d509      	bpl.n	800d106 <_dtoa_r+0x4b6>
 800d0f2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d0f6:	ed90 7b00 	vldr	d7, [r0]
 800d0fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d0fe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d102:	3201      	adds	r2, #1
 800d104:	2401      	movs	r4, #1
 800d106:	1049      	asrs	r1, r1, #1
 800d108:	3008      	adds	r0, #8
 800d10a:	e7e7      	b.n	800d0dc <_dtoa_r+0x48c>
 800d10c:	2202      	movs	r2, #2
 800d10e:	e749      	b.n	800cfa4 <_dtoa_r+0x354>
 800d110:	465f      	mov	r7, fp
 800d112:	4648      	mov	r0, r9
 800d114:	e765      	b.n	800cfe2 <_dtoa_r+0x392>
 800d116:	ec42 1b17 	vmov	d7, r1, r2
 800d11a:	4a5c      	ldr	r2, [pc, #368]	; (800d28c <_dtoa_r+0x63c>)
 800d11c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d120:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d124:	9a00      	ldr	r2, [sp, #0]
 800d126:	1814      	adds	r4, r2, r0
 800d128:	9a08      	ldr	r2, [sp, #32]
 800d12a:	b352      	cbz	r2, 800d182 <_dtoa_r+0x532>
 800d12c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d130:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d134:	f8dd 8000 	ldr.w	r8, [sp]
 800d138:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d13c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d140:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d144:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d148:	ee14 2a90 	vmov	r2, s9
 800d14c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d150:	3230      	adds	r2, #48	; 0x30
 800d152:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d156:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d15e:	f808 2b01 	strb.w	r2, [r8], #1
 800d162:	d439      	bmi.n	800d1d8 <_dtoa_r+0x588>
 800d164:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d168:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d170:	d472      	bmi.n	800d258 <_dtoa_r+0x608>
 800d172:	45a0      	cmp	r8, r4
 800d174:	f43f af5d 	beq.w	800d032 <_dtoa_r+0x3e2>
 800d178:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d17c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d180:	e7e0      	b.n	800d144 <_dtoa_r+0x4f4>
 800d182:	f8dd 8000 	ldr.w	r8, [sp]
 800d186:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d18a:	4621      	mov	r1, r4
 800d18c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d190:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d194:	ee14 2a90 	vmov	r2, s9
 800d198:	3230      	adds	r2, #48	; 0x30
 800d19a:	f808 2b01 	strb.w	r2, [r8], #1
 800d19e:	45a0      	cmp	r8, r4
 800d1a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d1a4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d1a8:	d118      	bne.n	800d1dc <_dtoa_r+0x58c>
 800d1aa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d1ae:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d1b2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ba:	dc4d      	bgt.n	800d258 <_dtoa_r+0x608>
 800d1bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d1c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c8:	f57f af33 	bpl.w	800d032 <_dtoa_r+0x3e2>
 800d1cc:	4688      	mov	r8, r1
 800d1ce:	3901      	subs	r1, #1
 800d1d0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d1d4:	2b30      	cmp	r3, #48	; 0x30
 800d1d6:	d0f9      	beq.n	800d1cc <_dtoa_r+0x57c>
 800d1d8:	46bb      	mov	fp, r7
 800d1da:	e02a      	b.n	800d232 <_dtoa_r+0x5e2>
 800d1dc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d1e0:	e7d6      	b.n	800d190 <_dtoa_r+0x540>
 800d1e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1e6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d1ea:	f8dd 8000 	ldr.w	r8, [sp]
 800d1ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d1f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d1f6:	ee15 3a10 	vmov	r3, s10
 800d1fa:	3330      	adds	r3, #48	; 0x30
 800d1fc:	f808 3b01 	strb.w	r3, [r8], #1
 800d200:	9b00      	ldr	r3, [sp, #0]
 800d202:	eba8 0303 	sub.w	r3, r8, r3
 800d206:	4599      	cmp	r9, r3
 800d208:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d20c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d210:	d133      	bne.n	800d27a <_dtoa_r+0x62a>
 800d212:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d216:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21e:	dc1a      	bgt.n	800d256 <_dtoa_r+0x606>
 800d220:	eeb4 7b46 	vcmp.f64	d7, d6
 800d224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d228:	d103      	bne.n	800d232 <_dtoa_r+0x5e2>
 800d22a:	ee15 3a10 	vmov	r3, s10
 800d22e:	07d9      	lsls	r1, r3, #31
 800d230:	d411      	bmi.n	800d256 <_dtoa_r+0x606>
 800d232:	4629      	mov	r1, r5
 800d234:	4630      	mov	r0, r6
 800d236:	f000 fad9 	bl	800d7ec <_Bfree>
 800d23a:	2300      	movs	r3, #0
 800d23c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d23e:	f888 3000 	strb.w	r3, [r8]
 800d242:	f10b 0301 	add.w	r3, fp, #1
 800d246:	6013      	str	r3, [r2, #0]
 800d248:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f43f ad4d 	beq.w	800ccea <_dtoa_r+0x9a>
 800d250:	f8c3 8000 	str.w	r8, [r3]
 800d254:	e549      	b.n	800ccea <_dtoa_r+0x9a>
 800d256:	465f      	mov	r7, fp
 800d258:	4643      	mov	r3, r8
 800d25a:	4698      	mov	r8, r3
 800d25c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d260:	2a39      	cmp	r2, #57	; 0x39
 800d262:	d106      	bne.n	800d272 <_dtoa_r+0x622>
 800d264:	9a00      	ldr	r2, [sp, #0]
 800d266:	429a      	cmp	r2, r3
 800d268:	d1f7      	bne.n	800d25a <_dtoa_r+0x60a>
 800d26a:	9900      	ldr	r1, [sp, #0]
 800d26c:	2230      	movs	r2, #48	; 0x30
 800d26e:	3701      	adds	r7, #1
 800d270:	700a      	strb	r2, [r1, #0]
 800d272:	781a      	ldrb	r2, [r3, #0]
 800d274:	3201      	adds	r2, #1
 800d276:	701a      	strb	r2, [r3, #0]
 800d278:	e7ae      	b.n	800d1d8 <_dtoa_r+0x588>
 800d27a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d27e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d286:	d1b2      	bne.n	800d1ee <_dtoa_r+0x59e>
 800d288:	e7d3      	b.n	800d232 <_dtoa_r+0x5e2>
 800d28a:	bf00      	nop
 800d28c:	0800f878 	.word	0x0800f878
 800d290:	0800f850 	.word	0x0800f850
 800d294:	9908      	ldr	r1, [sp, #32]
 800d296:	2900      	cmp	r1, #0
 800d298:	f000 80d1 	beq.w	800d43e <_dtoa_r+0x7ee>
 800d29c:	9907      	ldr	r1, [sp, #28]
 800d29e:	2901      	cmp	r1, #1
 800d2a0:	f300 80b4 	bgt.w	800d40c <_dtoa_r+0x7bc>
 800d2a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d2a6:	2900      	cmp	r1, #0
 800d2a8:	f000 80ac 	beq.w	800d404 <_dtoa_r+0x7b4>
 800d2ac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d2b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d2b4:	461c      	mov	r4, r3
 800d2b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d2b8:	9b05      	ldr	r3, [sp, #20]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	9305      	str	r3, [sp, #20]
 800d2be:	9b06      	ldr	r3, [sp, #24]
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	4413      	add	r3, r2
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	9306      	str	r3, [sp, #24]
 800d2c8:	f000 fb4c 	bl	800d964 <__i2b>
 800d2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2ce:	4607      	mov	r7, r0
 800d2d0:	f1b8 0f00 	cmp.w	r8, #0
 800d2d4:	dd0d      	ble.n	800d2f2 <_dtoa_r+0x6a2>
 800d2d6:	9a06      	ldr	r2, [sp, #24]
 800d2d8:	2a00      	cmp	r2, #0
 800d2da:	dd0a      	ble.n	800d2f2 <_dtoa_r+0x6a2>
 800d2dc:	4542      	cmp	r2, r8
 800d2de:	9905      	ldr	r1, [sp, #20]
 800d2e0:	bfa8      	it	ge
 800d2e2:	4642      	movge	r2, r8
 800d2e4:	1a89      	subs	r1, r1, r2
 800d2e6:	9105      	str	r1, [sp, #20]
 800d2e8:	9906      	ldr	r1, [sp, #24]
 800d2ea:	eba8 0802 	sub.w	r8, r8, r2
 800d2ee:	1a8a      	subs	r2, r1, r2
 800d2f0:	9206      	str	r2, [sp, #24]
 800d2f2:	b303      	cbz	r3, 800d336 <_dtoa_r+0x6e6>
 800d2f4:	9a08      	ldr	r2, [sp, #32]
 800d2f6:	2a00      	cmp	r2, #0
 800d2f8:	f000 80a6 	beq.w	800d448 <_dtoa_r+0x7f8>
 800d2fc:	2c00      	cmp	r4, #0
 800d2fe:	dd13      	ble.n	800d328 <_dtoa_r+0x6d8>
 800d300:	4639      	mov	r1, r7
 800d302:	4622      	mov	r2, r4
 800d304:	4630      	mov	r0, r6
 800d306:	930c      	str	r3, [sp, #48]	; 0x30
 800d308:	f000 fbe8 	bl	800dadc <__pow5mult>
 800d30c:	462a      	mov	r2, r5
 800d30e:	4601      	mov	r1, r0
 800d310:	4607      	mov	r7, r0
 800d312:	4630      	mov	r0, r6
 800d314:	f000 fb3c 	bl	800d990 <__multiply>
 800d318:	4629      	mov	r1, r5
 800d31a:	900a      	str	r0, [sp, #40]	; 0x28
 800d31c:	4630      	mov	r0, r6
 800d31e:	f000 fa65 	bl	800d7ec <_Bfree>
 800d322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d326:	4615      	mov	r5, r2
 800d328:	1b1a      	subs	r2, r3, r4
 800d32a:	d004      	beq.n	800d336 <_dtoa_r+0x6e6>
 800d32c:	4629      	mov	r1, r5
 800d32e:	4630      	mov	r0, r6
 800d330:	f000 fbd4 	bl	800dadc <__pow5mult>
 800d334:	4605      	mov	r5, r0
 800d336:	2101      	movs	r1, #1
 800d338:	4630      	mov	r0, r6
 800d33a:	f000 fb13 	bl	800d964 <__i2b>
 800d33e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d340:	2b00      	cmp	r3, #0
 800d342:	4604      	mov	r4, r0
 800d344:	f340 8082 	ble.w	800d44c <_dtoa_r+0x7fc>
 800d348:	461a      	mov	r2, r3
 800d34a:	4601      	mov	r1, r0
 800d34c:	4630      	mov	r0, r6
 800d34e:	f000 fbc5 	bl	800dadc <__pow5mult>
 800d352:	9b07      	ldr	r3, [sp, #28]
 800d354:	2b01      	cmp	r3, #1
 800d356:	4604      	mov	r4, r0
 800d358:	dd7b      	ble.n	800d452 <_dtoa_r+0x802>
 800d35a:	2300      	movs	r3, #0
 800d35c:	930a      	str	r3, [sp, #40]	; 0x28
 800d35e:	6922      	ldr	r2, [r4, #16]
 800d360:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d364:	6910      	ldr	r0, [r2, #16]
 800d366:	f000 faad 	bl	800d8c4 <__hi0bits>
 800d36a:	f1c0 0020 	rsb	r0, r0, #32
 800d36e:	9b06      	ldr	r3, [sp, #24]
 800d370:	4418      	add	r0, r3
 800d372:	f010 001f 	ands.w	r0, r0, #31
 800d376:	f000 808d 	beq.w	800d494 <_dtoa_r+0x844>
 800d37a:	f1c0 0220 	rsb	r2, r0, #32
 800d37e:	2a04      	cmp	r2, #4
 800d380:	f340 8086 	ble.w	800d490 <_dtoa_r+0x840>
 800d384:	f1c0 001c 	rsb	r0, r0, #28
 800d388:	9b05      	ldr	r3, [sp, #20]
 800d38a:	4403      	add	r3, r0
 800d38c:	9305      	str	r3, [sp, #20]
 800d38e:	9b06      	ldr	r3, [sp, #24]
 800d390:	4403      	add	r3, r0
 800d392:	4480      	add	r8, r0
 800d394:	9306      	str	r3, [sp, #24]
 800d396:	9b05      	ldr	r3, [sp, #20]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	dd05      	ble.n	800d3a8 <_dtoa_r+0x758>
 800d39c:	4629      	mov	r1, r5
 800d39e:	461a      	mov	r2, r3
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f000 fbf5 	bl	800db90 <__lshift>
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	9b06      	ldr	r3, [sp, #24]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	dd05      	ble.n	800d3ba <_dtoa_r+0x76a>
 800d3ae:	4621      	mov	r1, r4
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f000 fbec 	bl	800db90 <__lshift>
 800d3b8:	4604      	mov	r4, r0
 800d3ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d06b      	beq.n	800d498 <_dtoa_r+0x848>
 800d3c0:	4621      	mov	r1, r4
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	f000 fc50 	bl	800dc68 <__mcmp>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	da65      	bge.n	800d498 <_dtoa_r+0x848>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	220a      	movs	r2, #10
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	f000 fa2c 	bl	800d830 <__multadd>
 800d3d8:	9b08      	ldr	r3, [sp, #32]
 800d3da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3de:	4605      	mov	r5, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f000 8192 	beq.w	800d70a <_dtoa_r+0xaba>
 800d3e6:	4639      	mov	r1, r7
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	220a      	movs	r2, #10
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	f000 fa1f 	bl	800d830 <__multadd>
 800d3f2:	f1ba 0f00 	cmp.w	sl, #0
 800d3f6:	4607      	mov	r7, r0
 800d3f8:	f300 808e 	bgt.w	800d518 <_dtoa_r+0x8c8>
 800d3fc:	9b07      	ldr	r3, [sp, #28]
 800d3fe:	2b02      	cmp	r3, #2
 800d400:	dc51      	bgt.n	800d4a6 <_dtoa_r+0x856>
 800d402:	e089      	b.n	800d518 <_dtoa_r+0x8c8>
 800d404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d406:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d40a:	e751      	b.n	800d2b0 <_dtoa_r+0x660>
 800d40c:	f109 34ff 	add.w	r4, r9, #4294967295
 800d410:	42a3      	cmp	r3, r4
 800d412:	bfbf      	itttt	lt
 800d414:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d416:	1ae3      	sublt	r3, r4, r3
 800d418:	18d2      	addlt	r2, r2, r3
 800d41a:	4613      	movlt	r3, r2
 800d41c:	bfb7      	itett	lt
 800d41e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d420:	1b1c      	subge	r4, r3, r4
 800d422:	4623      	movlt	r3, r4
 800d424:	2400      	movlt	r4, #0
 800d426:	f1b9 0f00 	cmp.w	r9, #0
 800d42a:	bfb5      	itete	lt
 800d42c:	9a05      	ldrlt	r2, [sp, #20]
 800d42e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800d432:	eba2 0809 	sublt.w	r8, r2, r9
 800d436:	464a      	movge	r2, r9
 800d438:	bfb8      	it	lt
 800d43a:	2200      	movlt	r2, #0
 800d43c:	e73b      	b.n	800d2b6 <_dtoa_r+0x666>
 800d43e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d442:	9f08      	ldr	r7, [sp, #32]
 800d444:	461c      	mov	r4, r3
 800d446:	e743      	b.n	800d2d0 <_dtoa_r+0x680>
 800d448:	461a      	mov	r2, r3
 800d44a:	e76f      	b.n	800d32c <_dtoa_r+0x6dc>
 800d44c:	9b07      	ldr	r3, [sp, #28]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	dc18      	bgt.n	800d484 <_dtoa_r+0x834>
 800d452:	9b02      	ldr	r3, [sp, #8]
 800d454:	b9b3      	cbnz	r3, 800d484 <_dtoa_r+0x834>
 800d456:	9b03      	ldr	r3, [sp, #12]
 800d458:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d45c:	b9a2      	cbnz	r2, 800d488 <_dtoa_r+0x838>
 800d45e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d462:	0d12      	lsrs	r2, r2, #20
 800d464:	0512      	lsls	r2, r2, #20
 800d466:	b18a      	cbz	r2, 800d48c <_dtoa_r+0x83c>
 800d468:	9b05      	ldr	r3, [sp, #20]
 800d46a:	3301      	adds	r3, #1
 800d46c:	9305      	str	r3, [sp, #20]
 800d46e:	9b06      	ldr	r3, [sp, #24]
 800d470:	3301      	adds	r3, #1
 800d472:	9306      	str	r3, [sp, #24]
 800d474:	2301      	movs	r3, #1
 800d476:	930a      	str	r3, [sp, #40]	; 0x28
 800d478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f47f af6f 	bne.w	800d35e <_dtoa_r+0x70e>
 800d480:	2001      	movs	r0, #1
 800d482:	e774      	b.n	800d36e <_dtoa_r+0x71e>
 800d484:	2300      	movs	r3, #0
 800d486:	e7f6      	b.n	800d476 <_dtoa_r+0x826>
 800d488:	9b02      	ldr	r3, [sp, #8]
 800d48a:	e7f4      	b.n	800d476 <_dtoa_r+0x826>
 800d48c:	920a      	str	r2, [sp, #40]	; 0x28
 800d48e:	e7f3      	b.n	800d478 <_dtoa_r+0x828>
 800d490:	d081      	beq.n	800d396 <_dtoa_r+0x746>
 800d492:	4610      	mov	r0, r2
 800d494:	301c      	adds	r0, #28
 800d496:	e777      	b.n	800d388 <_dtoa_r+0x738>
 800d498:	f1b9 0f00 	cmp.w	r9, #0
 800d49c:	dc37      	bgt.n	800d50e <_dtoa_r+0x8be>
 800d49e:	9b07      	ldr	r3, [sp, #28]
 800d4a0:	2b02      	cmp	r3, #2
 800d4a2:	dd34      	ble.n	800d50e <_dtoa_r+0x8be>
 800d4a4:	46ca      	mov	sl, r9
 800d4a6:	f1ba 0f00 	cmp.w	sl, #0
 800d4aa:	d10d      	bne.n	800d4c8 <_dtoa_r+0x878>
 800d4ac:	4621      	mov	r1, r4
 800d4ae:	4653      	mov	r3, sl
 800d4b0:	2205      	movs	r2, #5
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f000 f9bc 	bl	800d830 <__multadd>
 800d4b8:	4601      	mov	r1, r0
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f000 fbd3 	bl	800dc68 <__mcmp>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	f73f adde 	bgt.w	800d084 <_dtoa_r+0x434>
 800d4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ca:	f8dd 8000 	ldr.w	r8, [sp]
 800d4ce:	ea6f 0b03 	mvn.w	fp, r3
 800d4d2:	f04f 0900 	mov.w	r9, #0
 800d4d6:	4621      	mov	r1, r4
 800d4d8:	4630      	mov	r0, r6
 800d4da:	f000 f987 	bl	800d7ec <_Bfree>
 800d4de:	2f00      	cmp	r7, #0
 800d4e0:	f43f aea7 	beq.w	800d232 <_dtoa_r+0x5e2>
 800d4e4:	f1b9 0f00 	cmp.w	r9, #0
 800d4e8:	d005      	beq.n	800d4f6 <_dtoa_r+0x8a6>
 800d4ea:	45b9      	cmp	r9, r7
 800d4ec:	d003      	beq.n	800d4f6 <_dtoa_r+0x8a6>
 800d4ee:	4649      	mov	r1, r9
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f000 f97b 	bl	800d7ec <_Bfree>
 800d4f6:	4639      	mov	r1, r7
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	f000 f977 	bl	800d7ec <_Bfree>
 800d4fe:	e698      	b.n	800d232 <_dtoa_r+0x5e2>
 800d500:	2400      	movs	r4, #0
 800d502:	4627      	mov	r7, r4
 800d504:	e7e0      	b.n	800d4c8 <_dtoa_r+0x878>
 800d506:	46bb      	mov	fp, r7
 800d508:	4604      	mov	r4, r0
 800d50a:	4607      	mov	r7, r0
 800d50c:	e5ba      	b.n	800d084 <_dtoa_r+0x434>
 800d50e:	9b08      	ldr	r3, [sp, #32]
 800d510:	46ca      	mov	sl, r9
 800d512:	2b00      	cmp	r3, #0
 800d514:	f000 8100 	beq.w	800d718 <_dtoa_r+0xac8>
 800d518:	f1b8 0f00 	cmp.w	r8, #0
 800d51c:	dd05      	ble.n	800d52a <_dtoa_r+0x8da>
 800d51e:	4639      	mov	r1, r7
 800d520:	4642      	mov	r2, r8
 800d522:	4630      	mov	r0, r6
 800d524:	f000 fb34 	bl	800db90 <__lshift>
 800d528:	4607      	mov	r7, r0
 800d52a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d05d      	beq.n	800d5ec <_dtoa_r+0x99c>
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	4630      	mov	r0, r6
 800d534:	f000 f91a 	bl	800d76c <_Balloc>
 800d538:	4680      	mov	r8, r0
 800d53a:	b928      	cbnz	r0, 800d548 <_dtoa_r+0x8f8>
 800d53c:	4b82      	ldr	r3, [pc, #520]	; (800d748 <_dtoa_r+0xaf8>)
 800d53e:	4602      	mov	r2, r0
 800d540:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d544:	f7ff bb9a 	b.w	800cc7c <_dtoa_r+0x2c>
 800d548:	693a      	ldr	r2, [r7, #16]
 800d54a:	3202      	adds	r2, #2
 800d54c:	0092      	lsls	r2, r2, #2
 800d54e:	f107 010c 	add.w	r1, r7, #12
 800d552:	300c      	adds	r0, #12
 800d554:	f7fe fe94 	bl	800c280 <memcpy>
 800d558:	2201      	movs	r2, #1
 800d55a:	4641      	mov	r1, r8
 800d55c:	4630      	mov	r0, r6
 800d55e:	f000 fb17 	bl	800db90 <__lshift>
 800d562:	9b00      	ldr	r3, [sp, #0]
 800d564:	3301      	adds	r3, #1
 800d566:	9305      	str	r3, [sp, #20]
 800d568:	9b00      	ldr	r3, [sp, #0]
 800d56a:	4453      	add	r3, sl
 800d56c:	9309      	str	r3, [sp, #36]	; 0x24
 800d56e:	9b02      	ldr	r3, [sp, #8]
 800d570:	f003 0301 	and.w	r3, r3, #1
 800d574:	46b9      	mov	r9, r7
 800d576:	9308      	str	r3, [sp, #32]
 800d578:	4607      	mov	r7, r0
 800d57a:	9b05      	ldr	r3, [sp, #20]
 800d57c:	4621      	mov	r1, r4
 800d57e:	3b01      	subs	r3, #1
 800d580:	4628      	mov	r0, r5
 800d582:	9302      	str	r3, [sp, #8]
 800d584:	f7ff fad6 	bl	800cb34 <quorem>
 800d588:	4603      	mov	r3, r0
 800d58a:	3330      	adds	r3, #48	; 0x30
 800d58c:	9006      	str	r0, [sp, #24]
 800d58e:	4649      	mov	r1, r9
 800d590:	4628      	mov	r0, r5
 800d592:	930a      	str	r3, [sp, #40]	; 0x28
 800d594:	f000 fb68 	bl	800dc68 <__mcmp>
 800d598:	463a      	mov	r2, r7
 800d59a:	4682      	mov	sl, r0
 800d59c:	4621      	mov	r1, r4
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f000 fb7e 	bl	800dca0 <__mdiff>
 800d5a4:	68c2      	ldr	r2, [r0, #12]
 800d5a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5a8:	4680      	mov	r8, r0
 800d5aa:	bb0a      	cbnz	r2, 800d5f0 <_dtoa_r+0x9a0>
 800d5ac:	4601      	mov	r1, r0
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	f000 fb5a 	bl	800dc68 <__mcmp>
 800d5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	4641      	mov	r1, r8
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	920e      	str	r2, [sp, #56]	; 0x38
 800d5be:	930a      	str	r3, [sp, #40]	; 0x28
 800d5c0:	f000 f914 	bl	800d7ec <_Bfree>
 800d5c4:	9b07      	ldr	r3, [sp, #28]
 800d5c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d5cc:	ea43 0102 	orr.w	r1, r3, r2
 800d5d0:	9b08      	ldr	r3, [sp, #32]
 800d5d2:	430b      	orrs	r3, r1
 800d5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5d6:	d10d      	bne.n	800d5f4 <_dtoa_r+0x9a4>
 800d5d8:	2b39      	cmp	r3, #57	; 0x39
 800d5da:	d029      	beq.n	800d630 <_dtoa_r+0x9e0>
 800d5dc:	f1ba 0f00 	cmp.w	sl, #0
 800d5e0:	dd01      	ble.n	800d5e6 <_dtoa_r+0x996>
 800d5e2:	9b06      	ldr	r3, [sp, #24]
 800d5e4:	3331      	adds	r3, #49	; 0x31
 800d5e6:	9a02      	ldr	r2, [sp, #8]
 800d5e8:	7013      	strb	r3, [r2, #0]
 800d5ea:	e774      	b.n	800d4d6 <_dtoa_r+0x886>
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	e7b8      	b.n	800d562 <_dtoa_r+0x912>
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	e7e1      	b.n	800d5b8 <_dtoa_r+0x968>
 800d5f4:	f1ba 0f00 	cmp.w	sl, #0
 800d5f8:	db06      	blt.n	800d608 <_dtoa_r+0x9b8>
 800d5fa:	9907      	ldr	r1, [sp, #28]
 800d5fc:	ea41 0a0a 	orr.w	sl, r1, sl
 800d600:	9908      	ldr	r1, [sp, #32]
 800d602:	ea5a 0101 	orrs.w	r1, sl, r1
 800d606:	d120      	bne.n	800d64a <_dtoa_r+0x9fa>
 800d608:	2a00      	cmp	r2, #0
 800d60a:	ddec      	ble.n	800d5e6 <_dtoa_r+0x996>
 800d60c:	4629      	mov	r1, r5
 800d60e:	2201      	movs	r2, #1
 800d610:	4630      	mov	r0, r6
 800d612:	9305      	str	r3, [sp, #20]
 800d614:	f000 fabc 	bl	800db90 <__lshift>
 800d618:	4621      	mov	r1, r4
 800d61a:	4605      	mov	r5, r0
 800d61c:	f000 fb24 	bl	800dc68 <__mcmp>
 800d620:	2800      	cmp	r0, #0
 800d622:	9b05      	ldr	r3, [sp, #20]
 800d624:	dc02      	bgt.n	800d62c <_dtoa_r+0x9dc>
 800d626:	d1de      	bne.n	800d5e6 <_dtoa_r+0x996>
 800d628:	07da      	lsls	r2, r3, #31
 800d62a:	d5dc      	bpl.n	800d5e6 <_dtoa_r+0x996>
 800d62c:	2b39      	cmp	r3, #57	; 0x39
 800d62e:	d1d8      	bne.n	800d5e2 <_dtoa_r+0x992>
 800d630:	9a02      	ldr	r2, [sp, #8]
 800d632:	2339      	movs	r3, #57	; 0x39
 800d634:	7013      	strb	r3, [r2, #0]
 800d636:	4643      	mov	r3, r8
 800d638:	4698      	mov	r8, r3
 800d63a:	3b01      	subs	r3, #1
 800d63c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d640:	2a39      	cmp	r2, #57	; 0x39
 800d642:	d051      	beq.n	800d6e8 <_dtoa_r+0xa98>
 800d644:	3201      	adds	r2, #1
 800d646:	701a      	strb	r2, [r3, #0]
 800d648:	e745      	b.n	800d4d6 <_dtoa_r+0x886>
 800d64a:	2a00      	cmp	r2, #0
 800d64c:	dd03      	ble.n	800d656 <_dtoa_r+0xa06>
 800d64e:	2b39      	cmp	r3, #57	; 0x39
 800d650:	d0ee      	beq.n	800d630 <_dtoa_r+0x9e0>
 800d652:	3301      	adds	r3, #1
 800d654:	e7c7      	b.n	800d5e6 <_dtoa_r+0x996>
 800d656:	9a05      	ldr	r2, [sp, #20]
 800d658:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d65a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d65e:	428a      	cmp	r2, r1
 800d660:	d02b      	beq.n	800d6ba <_dtoa_r+0xa6a>
 800d662:	4629      	mov	r1, r5
 800d664:	2300      	movs	r3, #0
 800d666:	220a      	movs	r2, #10
 800d668:	4630      	mov	r0, r6
 800d66a:	f000 f8e1 	bl	800d830 <__multadd>
 800d66e:	45b9      	cmp	r9, r7
 800d670:	4605      	mov	r5, r0
 800d672:	f04f 0300 	mov.w	r3, #0
 800d676:	f04f 020a 	mov.w	r2, #10
 800d67a:	4649      	mov	r1, r9
 800d67c:	4630      	mov	r0, r6
 800d67e:	d107      	bne.n	800d690 <_dtoa_r+0xa40>
 800d680:	f000 f8d6 	bl	800d830 <__multadd>
 800d684:	4681      	mov	r9, r0
 800d686:	4607      	mov	r7, r0
 800d688:	9b05      	ldr	r3, [sp, #20]
 800d68a:	3301      	adds	r3, #1
 800d68c:	9305      	str	r3, [sp, #20]
 800d68e:	e774      	b.n	800d57a <_dtoa_r+0x92a>
 800d690:	f000 f8ce 	bl	800d830 <__multadd>
 800d694:	4639      	mov	r1, r7
 800d696:	4681      	mov	r9, r0
 800d698:	2300      	movs	r3, #0
 800d69a:	220a      	movs	r2, #10
 800d69c:	4630      	mov	r0, r6
 800d69e:	f000 f8c7 	bl	800d830 <__multadd>
 800d6a2:	4607      	mov	r7, r0
 800d6a4:	e7f0      	b.n	800d688 <_dtoa_r+0xa38>
 800d6a6:	f1ba 0f00 	cmp.w	sl, #0
 800d6aa:	9a00      	ldr	r2, [sp, #0]
 800d6ac:	bfcc      	ite	gt
 800d6ae:	46d0      	movgt	r8, sl
 800d6b0:	f04f 0801 	movle.w	r8, #1
 800d6b4:	4490      	add	r8, r2
 800d6b6:	f04f 0900 	mov.w	r9, #0
 800d6ba:	4629      	mov	r1, r5
 800d6bc:	2201      	movs	r2, #1
 800d6be:	4630      	mov	r0, r6
 800d6c0:	9302      	str	r3, [sp, #8]
 800d6c2:	f000 fa65 	bl	800db90 <__lshift>
 800d6c6:	4621      	mov	r1, r4
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	f000 facd 	bl	800dc68 <__mcmp>
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	dcb1      	bgt.n	800d636 <_dtoa_r+0x9e6>
 800d6d2:	d102      	bne.n	800d6da <_dtoa_r+0xa8a>
 800d6d4:	9b02      	ldr	r3, [sp, #8]
 800d6d6:	07db      	lsls	r3, r3, #31
 800d6d8:	d4ad      	bmi.n	800d636 <_dtoa_r+0x9e6>
 800d6da:	4643      	mov	r3, r8
 800d6dc:	4698      	mov	r8, r3
 800d6de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6e2:	2a30      	cmp	r2, #48	; 0x30
 800d6e4:	d0fa      	beq.n	800d6dc <_dtoa_r+0xa8c>
 800d6e6:	e6f6      	b.n	800d4d6 <_dtoa_r+0x886>
 800d6e8:	9a00      	ldr	r2, [sp, #0]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d1a4      	bne.n	800d638 <_dtoa_r+0x9e8>
 800d6ee:	f10b 0b01 	add.w	fp, fp, #1
 800d6f2:	2331      	movs	r3, #49	; 0x31
 800d6f4:	e778      	b.n	800d5e8 <_dtoa_r+0x998>
 800d6f6:	4b15      	ldr	r3, [pc, #84]	; (800d74c <_dtoa_r+0xafc>)
 800d6f8:	f7ff bb12 	b.w	800cd20 <_dtoa_r+0xd0>
 800d6fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f47f aaee 	bne.w	800cce0 <_dtoa_r+0x90>
 800d704:	4b12      	ldr	r3, [pc, #72]	; (800d750 <_dtoa_r+0xb00>)
 800d706:	f7ff bb0b 	b.w	800cd20 <_dtoa_r+0xd0>
 800d70a:	f1ba 0f00 	cmp.w	sl, #0
 800d70e:	dc03      	bgt.n	800d718 <_dtoa_r+0xac8>
 800d710:	9b07      	ldr	r3, [sp, #28]
 800d712:	2b02      	cmp	r3, #2
 800d714:	f73f aec7 	bgt.w	800d4a6 <_dtoa_r+0x856>
 800d718:	f8dd 8000 	ldr.w	r8, [sp]
 800d71c:	4621      	mov	r1, r4
 800d71e:	4628      	mov	r0, r5
 800d720:	f7ff fa08 	bl	800cb34 <quorem>
 800d724:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d728:	f808 3b01 	strb.w	r3, [r8], #1
 800d72c:	9a00      	ldr	r2, [sp, #0]
 800d72e:	eba8 0202 	sub.w	r2, r8, r2
 800d732:	4592      	cmp	sl, r2
 800d734:	ddb7      	ble.n	800d6a6 <_dtoa_r+0xa56>
 800d736:	4629      	mov	r1, r5
 800d738:	2300      	movs	r3, #0
 800d73a:	220a      	movs	r2, #10
 800d73c:	4630      	mov	r0, r6
 800d73e:	f000 f877 	bl	800d830 <__multadd>
 800d742:	4605      	mov	r5, r0
 800d744:	e7ea      	b.n	800d71c <_dtoa_r+0xacc>
 800d746:	bf00      	nop
 800d748:	0800f7db 	.word	0x0800f7db
 800d74c:	0800f734 	.word	0x0800f734
 800d750:	0800f758 	.word	0x0800f758

0800d754 <_localeconv_r>:
 800d754:	4800      	ldr	r0, [pc, #0]	; (800d758 <_localeconv_r+0x4>)
 800d756:	4770      	bx	lr
 800d758:	24000164 	.word	0x24000164

0800d75c <malloc>:
 800d75c:	4b02      	ldr	r3, [pc, #8]	; (800d768 <malloc+0xc>)
 800d75e:	4601      	mov	r1, r0
 800d760:	6818      	ldr	r0, [r3, #0]
 800d762:	f000 bbe1 	b.w	800df28 <_malloc_r>
 800d766:	bf00      	nop
 800d768:	24000010 	.word	0x24000010

0800d76c <_Balloc>:
 800d76c:	b570      	push	{r4, r5, r6, lr}
 800d76e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d770:	4604      	mov	r4, r0
 800d772:	460d      	mov	r5, r1
 800d774:	b976      	cbnz	r6, 800d794 <_Balloc+0x28>
 800d776:	2010      	movs	r0, #16
 800d778:	f7ff fff0 	bl	800d75c <malloc>
 800d77c:	4602      	mov	r2, r0
 800d77e:	6260      	str	r0, [r4, #36]	; 0x24
 800d780:	b920      	cbnz	r0, 800d78c <_Balloc+0x20>
 800d782:	4b18      	ldr	r3, [pc, #96]	; (800d7e4 <_Balloc+0x78>)
 800d784:	4818      	ldr	r0, [pc, #96]	; (800d7e8 <_Balloc+0x7c>)
 800d786:	2166      	movs	r1, #102	; 0x66
 800d788:	f000 fc38 	bl	800dffc <__assert_func>
 800d78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d790:	6006      	str	r6, [r0, #0]
 800d792:	60c6      	str	r6, [r0, #12]
 800d794:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d796:	68f3      	ldr	r3, [r6, #12]
 800d798:	b183      	cbz	r3, 800d7bc <_Balloc+0x50>
 800d79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d7a2:	b9b8      	cbnz	r0, 800d7d4 <_Balloc+0x68>
 800d7a4:	2101      	movs	r1, #1
 800d7a6:	fa01 f605 	lsl.w	r6, r1, r5
 800d7aa:	1d72      	adds	r2, r6, #5
 800d7ac:	0092      	lsls	r2, r2, #2
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f000 fb5a 	bl	800de68 <_calloc_r>
 800d7b4:	b160      	cbz	r0, 800d7d0 <_Balloc+0x64>
 800d7b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d7ba:	e00e      	b.n	800d7da <_Balloc+0x6e>
 800d7bc:	2221      	movs	r2, #33	; 0x21
 800d7be:	2104      	movs	r1, #4
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f000 fb51 	bl	800de68 <_calloc_r>
 800d7c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7c8:	60f0      	str	r0, [r6, #12]
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1e4      	bne.n	800d79a <_Balloc+0x2e>
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	bd70      	pop	{r4, r5, r6, pc}
 800d7d4:	6802      	ldr	r2, [r0, #0]
 800d7d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d7e0:	e7f7      	b.n	800d7d2 <_Balloc+0x66>
 800d7e2:	bf00      	nop
 800d7e4:	0800f765 	.word	0x0800f765
 800d7e8:	0800f7ec 	.word	0x0800f7ec

0800d7ec <_Bfree>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d7f0:	4605      	mov	r5, r0
 800d7f2:	460c      	mov	r4, r1
 800d7f4:	b976      	cbnz	r6, 800d814 <_Bfree+0x28>
 800d7f6:	2010      	movs	r0, #16
 800d7f8:	f7ff ffb0 	bl	800d75c <malloc>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	6268      	str	r0, [r5, #36]	; 0x24
 800d800:	b920      	cbnz	r0, 800d80c <_Bfree+0x20>
 800d802:	4b09      	ldr	r3, [pc, #36]	; (800d828 <_Bfree+0x3c>)
 800d804:	4809      	ldr	r0, [pc, #36]	; (800d82c <_Bfree+0x40>)
 800d806:	218a      	movs	r1, #138	; 0x8a
 800d808:	f000 fbf8 	bl	800dffc <__assert_func>
 800d80c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d810:	6006      	str	r6, [r0, #0]
 800d812:	60c6      	str	r6, [r0, #12]
 800d814:	b13c      	cbz	r4, 800d826 <_Bfree+0x3a>
 800d816:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d818:	6862      	ldr	r2, [r4, #4]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d820:	6021      	str	r1, [r4, #0]
 800d822:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d826:	bd70      	pop	{r4, r5, r6, pc}
 800d828:	0800f765 	.word	0x0800f765
 800d82c:	0800f7ec 	.word	0x0800f7ec

0800d830 <__multadd>:
 800d830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d834:	690e      	ldr	r6, [r1, #16]
 800d836:	4607      	mov	r7, r0
 800d838:	4698      	mov	r8, r3
 800d83a:	460c      	mov	r4, r1
 800d83c:	f101 0014 	add.w	r0, r1, #20
 800d840:	2300      	movs	r3, #0
 800d842:	6805      	ldr	r5, [r0, #0]
 800d844:	b2a9      	uxth	r1, r5
 800d846:	fb02 8101 	mla	r1, r2, r1, r8
 800d84a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d84e:	0c2d      	lsrs	r5, r5, #16
 800d850:	fb02 c505 	mla	r5, r2, r5, ip
 800d854:	b289      	uxth	r1, r1
 800d856:	3301      	adds	r3, #1
 800d858:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d85c:	429e      	cmp	r6, r3
 800d85e:	f840 1b04 	str.w	r1, [r0], #4
 800d862:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d866:	dcec      	bgt.n	800d842 <__multadd+0x12>
 800d868:	f1b8 0f00 	cmp.w	r8, #0
 800d86c:	d022      	beq.n	800d8b4 <__multadd+0x84>
 800d86e:	68a3      	ldr	r3, [r4, #8]
 800d870:	42b3      	cmp	r3, r6
 800d872:	dc19      	bgt.n	800d8a8 <__multadd+0x78>
 800d874:	6861      	ldr	r1, [r4, #4]
 800d876:	4638      	mov	r0, r7
 800d878:	3101      	adds	r1, #1
 800d87a:	f7ff ff77 	bl	800d76c <_Balloc>
 800d87e:	4605      	mov	r5, r0
 800d880:	b928      	cbnz	r0, 800d88e <__multadd+0x5e>
 800d882:	4602      	mov	r2, r0
 800d884:	4b0d      	ldr	r3, [pc, #52]	; (800d8bc <__multadd+0x8c>)
 800d886:	480e      	ldr	r0, [pc, #56]	; (800d8c0 <__multadd+0x90>)
 800d888:	21b5      	movs	r1, #181	; 0xb5
 800d88a:	f000 fbb7 	bl	800dffc <__assert_func>
 800d88e:	6922      	ldr	r2, [r4, #16]
 800d890:	3202      	adds	r2, #2
 800d892:	f104 010c 	add.w	r1, r4, #12
 800d896:	0092      	lsls	r2, r2, #2
 800d898:	300c      	adds	r0, #12
 800d89a:	f7fe fcf1 	bl	800c280 <memcpy>
 800d89e:	4621      	mov	r1, r4
 800d8a0:	4638      	mov	r0, r7
 800d8a2:	f7ff ffa3 	bl	800d7ec <_Bfree>
 800d8a6:	462c      	mov	r4, r5
 800d8a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d8ac:	3601      	adds	r6, #1
 800d8ae:	f8c3 8014 	str.w	r8, [r3, #20]
 800d8b2:	6126      	str	r6, [r4, #16]
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ba:	bf00      	nop
 800d8bc:	0800f7db 	.word	0x0800f7db
 800d8c0:	0800f7ec 	.word	0x0800f7ec

0800d8c4 <__hi0bits>:
 800d8c4:	0c03      	lsrs	r3, r0, #16
 800d8c6:	041b      	lsls	r3, r3, #16
 800d8c8:	b9d3      	cbnz	r3, 800d900 <__hi0bits+0x3c>
 800d8ca:	0400      	lsls	r0, r0, #16
 800d8cc:	2310      	movs	r3, #16
 800d8ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8d2:	bf04      	itt	eq
 800d8d4:	0200      	lsleq	r0, r0, #8
 800d8d6:	3308      	addeq	r3, #8
 800d8d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d8dc:	bf04      	itt	eq
 800d8de:	0100      	lsleq	r0, r0, #4
 800d8e0:	3304      	addeq	r3, #4
 800d8e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d8e6:	bf04      	itt	eq
 800d8e8:	0080      	lsleq	r0, r0, #2
 800d8ea:	3302      	addeq	r3, #2
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	db05      	blt.n	800d8fc <__hi0bits+0x38>
 800d8f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d8f4:	f103 0301 	add.w	r3, r3, #1
 800d8f8:	bf08      	it	eq
 800d8fa:	2320      	moveq	r3, #32
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	4770      	bx	lr
 800d900:	2300      	movs	r3, #0
 800d902:	e7e4      	b.n	800d8ce <__hi0bits+0xa>

0800d904 <__lo0bits>:
 800d904:	6803      	ldr	r3, [r0, #0]
 800d906:	f013 0207 	ands.w	r2, r3, #7
 800d90a:	4601      	mov	r1, r0
 800d90c:	d00b      	beq.n	800d926 <__lo0bits+0x22>
 800d90e:	07da      	lsls	r2, r3, #31
 800d910:	d424      	bmi.n	800d95c <__lo0bits+0x58>
 800d912:	0798      	lsls	r0, r3, #30
 800d914:	bf49      	itett	mi
 800d916:	085b      	lsrmi	r3, r3, #1
 800d918:	089b      	lsrpl	r3, r3, #2
 800d91a:	2001      	movmi	r0, #1
 800d91c:	600b      	strmi	r3, [r1, #0]
 800d91e:	bf5c      	itt	pl
 800d920:	600b      	strpl	r3, [r1, #0]
 800d922:	2002      	movpl	r0, #2
 800d924:	4770      	bx	lr
 800d926:	b298      	uxth	r0, r3
 800d928:	b9b0      	cbnz	r0, 800d958 <__lo0bits+0x54>
 800d92a:	0c1b      	lsrs	r3, r3, #16
 800d92c:	2010      	movs	r0, #16
 800d92e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d932:	bf04      	itt	eq
 800d934:	0a1b      	lsreq	r3, r3, #8
 800d936:	3008      	addeq	r0, #8
 800d938:	071a      	lsls	r2, r3, #28
 800d93a:	bf04      	itt	eq
 800d93c:	091b      	lsreq	r3, r3, #4
 800d93e:	3004      	addeq	r0, #4
 800d940:	079a      	lsls	r2, r3, #30
 800d942:	bf04      	itt	eq
 800d944:	089b      	lsreq	r3, r3, #2
 800d946:	3002      	addeq	r0, #2
 800d948:	07da      	lsls	r2, r3, #31
 800d94a:	d403      	bmi.n	800d954 <__lo0bits+0x50>
 800d94c:	085b      	lsrs	r3, r3, #1
 800d94e:	f100 0001 	add.w	r0, r0, #1
 800d952:	d005      	beq.n	800d960 <__lo0bits+0x5c>
 800d954:	600b      	str	r3, [r1, #0]
 800d956:	4770      	bx	lr
 800d958:	4610      	mov	r0, r2
 800d95a:	e7e8      	b.n	800d92e <__lo0bits+0x2a>
 800d95c:	2000      	movs	r0, #0
 800d95e:	4770      	bx	lr
 800d960:	2020      	movs	r0, #32
 800d962:	4770      	bx	lr

0800d964 <__i2b>:
 800d964:	b510      	push	{r4, lr}
 800d966:	460c      	mov	r4, r1
 800d968:	2101      	movs	r1, #1
 800d96a:	f7ff feff 	bl	800d76c <_Balloc>
 800d96e:	4602      	mov	r2, r0
 800d970:	b928      	cbnz	r0, 800d97e <__i2b+0x1a>
 800d972:	4b05      	ldr	r3, [pc, #20]	; (800d988 <__i2b+0x24>)
 800d974:	4805      	ldr	r0, [pc, #20]	; (800d98c <__i2b+0x28>)
 800d976:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d97a:	f000 fb3f 	bl	800dffc <__assert_func>
 800d97e:	2301      	movs	r3, #1
 800d980:	6144      	str	r4, [r0, #20]
 800d982:	6103      	str	r3, [r0, #16]
 800d984:	bd10      	pop	{r4, pc}
 800d986:	bf00      	nop
 800d988:	0800f7db 	.word	0x0800f7db
 800d98c:	0800f7ec 	.word	0x0800f7ec

0800d990 <__multiply>:
 800d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d994:	4614      	mov	r4, r2
 800d996:	690a      	ldr	r2, [r1, #16]
 800d998:	6923      	ldr	r3, [r4, #16]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	bfb8      	it	lt
 800d99e:	460b      	movlt	r3, r1
 800d9a0:	460d      	mov	r5, r1
 800d9a2:	bfbc      	itt	lt
 800d9a4:	4625      	movlt	r5, r4
 800d9a6:	461c      	movlt	r4, r3
 800d9a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d9ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d9b0:	68ab      	ldr	r3, [r5, #8]
 800d9b2:	6869      	ldr	r1, [r5, #4]
 800d9b4:	eb0a 0709 	add.w	r7, sl, r9
 800d9b8:	42bb      	cmp	r3, r7
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	bfb8      	it	lt
 800d9be:	3101      	addlt	r1, #1
 800d9c0:	f7ff fed4 	bl	800d76c <_Balloc>
 800d9c4:	b930      	cbnz	r0, 800d9d4 <__multiply+0x44>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	4b42      	ldr	r3, [pc, #264]	; (800dad4 <__multiply+0x144>)
 800d9ca:	4843      	ldr	r0, [pc, #268]	; (800dad8 <__multiply+0x148>)
 800d9cc:	f240 115d 	movw	r1, #349	; 0x15d
 800d9d0:	f000 fb14 	bl	800dffc <__assert_func>
 800d9d4:	f100 0614 	add.w	r6, r0, #20
 800d9d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d9dc:	4633      	mov	r3, r6
 800d9de:	2200      	movs	r2, #0
 800d9e0:	4543      	cmp	r3, r8
 800d9e2:	d31e      	bcc.n	800da22 <__multiply+0x92>
 800d9e4:	f105 0c14 	add.w	ip, r5, #20
 800d9e8:	f104 0314 	add.w	r3, r4, #20
 800d9ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d9f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d9f4:	9202      	str	r2, [sp, #8]
 800d9f6:	ebac 0205 	sub.w	r2, ip, r5
 800d9fa:	3a15      	subs	r2, #21
 800d9fc:	f022 0203 	bic.w	r2, r2, #3
 800da00:	3204      	adds	r2, #4
 800da02:	f105 0115 	add.w	r1, r5, #21
 800da06:	458c      	cmp	ip, r1
 800da08:	bf38      	it	cc
 800da0a:	2204      	movcc	r2, #4
 800da0c:	9201      	str	r2, [sp, #4]
 800da0e:	9a02      	ldr	r2, [sp, #8]
 800da10:	9303      	str	r3, [sp, #12]
 800da12:	429a      	cmp	r2, r3
 800da14:	d808      	bhi.n	800da28 <__multiply+0x98>
 800da16:	2f00      	cmp	r7, #0
 800da18:	dc55      	bgt.n	800dac6 <__multiply+0x136>
 800da1a:	6107      	str	r7, [r0, #16]
 800da1c:	b005      	add	sp, #20
 800da1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da22:	f843 2b04 	str.w	r2, [r3], #4
 800da26:	e7db      	b.n	800d9e0 <__multiply+0x50>
 800da28:	f8b3 a000 	ldrh.w	sl, [r3]
 800da2c:	f1ba 0f00 	cmp.w	sl, #0
 800da30:	d020      	beq.n	800da74 <__multiply+0xe4>
 800da32:	f105 0e14 	add.w	lr, r5, #20
 800da36:	46b1      	mov	r9, r6
 800da38:	2200      	movs	r2, #0
 800da3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800da3e:	f8d9 b000 	ldr.w	fp, [r9]
 800da42:	b2a1      	uxth	r1, r4
 800da44:	fa1f fb8b 	uxth.w	fp, fp
 800da48:	fb0a b101 	mla	r1, sl, r1, fp
 800da4c:	4411      	add	r1, r2
 800da4e:	f8d9 2000 	ldr.w	r2, [r9]
 800da52:	0c24      	lsrs	r4, r4, #16
 800da54:	0c12      	lsrs	r2, r2, #16
 800da56:	fb0a 2404 	mla	r4, sl, r4, r2
 800da5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800da5e:	b289      	uxth	r1, r1
 800da60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800da64:	45f4      	cmp	ip, lr
 800da66:	f849 1b04 	str.w	r1, [r9], #4
 800da6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800da6e:	d8e4      	bhi.n	800da3a <__multiply+0xaa>
 800da70:	9901      	ldr	r1, [sp, #4]
 800da72:	5072      	str	r2, [r6, r1]
 800da74:	9a03      	ldr	r2, [sp, #12]
 800da76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da7a:	3304      	adds	r3, #4
 800da7c:	f1b9 0f00 	cmp.w	r9, #0
 800da80:	d01f      	beq.n	800dac2 <__multiply+0x132>
 800da82:	6834      	ldr	r4, [r6, #0]
 800da84:	f105 0114 	add.w	r1, r5, #20
 800da88:	46b6      	mov	lr, r6
 800da8a:	f04f 0a00 	mov.w	sl, #0
 800da8e:	880a      	ldrh	r2, [r1, #0]
 800da90:	f8be b002 	ldrh.w	fp, [lr, #2]
 800da94:	fb09 b202 	mla	r2, r9, r2, fp
 800da98:	4492      	add	sl, r2
 800da9a:	b2a4      	uxth	r4, r4
 800da9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800daa0:	f84e 4b04 	str.w	r4, [lr], #4
 800daa4:	f851 4b04 	ldr.w	r4, [r1], #4
 800daa8:	f8be 2000 	ldrh.w	r2, [lr]
 800daac:	0c24      	lsrs	r4, r4, #16
 800daae:	fb09 2404 	mla	r4, r9, r4, r2
 800dab2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800dab6:	458c      	cmp	ip, r1
 800dab8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dabc:	d8e7      	bhi.n	800da8e <__multiply+0xfe>
 800dabe:	9a01      	ldr	r2, [sp, #4]
 800dac0:	50b4      	str	r4, [r6, r2]
 800dac2:	3604      	adds	r6, #4
 800dac4:	e7a3      	b.n	800da0e <__multiply+0x7e>
 800dac6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d1a5      	bne.n	800da1a <__multiply+0x8a>
 800dace:	3f01      	subs	r7, #1
 800dad0:	e7a1      	b.n	800da16 <__multiply+0x86>
 800dad2:	bf00      	nop
 800dad4:	0800f7db 	.word	0x0800f7db
 800dad8:	0800f7ec 	.word	0x0800f7ec

0800dadc <__pow5mult>:
 800dadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae0:	4615      	mov	r5, r2
 800dae2:	f012 0203 	ands.w	r2, r2, #3
 800dae6:	4606      	mov	r6, r0
 800dae8:	460f      	mov	r7, r1
 800daea:	d007      	beq.n	800dafc <__pow5mult+0x20>
 800daec:	4c25      	ldr	r4, [pc, #148]	; (800db84 <__pow5mult+0xa8>)
 800daee:	3a01      	subs	r2, #1
 800daf0:	2300      	movs	r3, #0
 800daf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800daf6:	f7ff fe9b 	bl	800d830 <__multadd>
 800dafa:	4607      	mov	r7, r0
 800dafc:	10ad      	asrs	r5, r5, #2
 800dafe:	d03d      	beq.n	800db7c <__pow5mult+0xa0>
 800db00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800db02:	b97c      	cbnz	r4, 800db24 <__pow5mult+0x48>
 800db04:	2010      	movs	r0, #16
 800db06:	f7ff fe29 	bl	800d75c <malloc>
 800db0a:	4602      	mov	r2, r0
 800db0c:	6270      	str	r0, [r6, #36]	; 0x24
 800db0e:	b928      	cbnz	r0, 800db1c <__pow5mult+0x40>
 800db10:	4b1d      	ldr	r3, [pc, #116]	; (800db88 <__pow5mult+0xac>)
 800db12:	481e      	ldr	r0, [pc, #120]	; (800db8c <__pow5mult+0xb0>)
 800db14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800db18:	f000 fa70 	bl	800dffc <__assert_func>
 800db1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db20:	6004      	str	r4, [r0, #0]
 800db22:	60c4      	str	r4, [r0, #12]
 800db24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800db28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db2c:	b94c      	cbnz	r4, 800db42 <__pow5mult+0x66>
 800db2e:	f240 2171 	movw	r1, #625	; 0x271
 800db32:	4630      	mov	r0, r6
 800db34:	f7ff ff16 	bl	800d964 <__i2b>
 800db38:	2300      	movs	r3, #0
 800db3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800db3e:	4604      	mov	r4, r0
 800db40:	6003      	str	r3, [r0, #0]
 800db42:	f04f 0900 	mov.w	r9, #0
 800db46:	07eb      	lsls	r3, r5, #31
 800db48:	d50a      	bpl.n	800db60 <__pow5mult+0x84>
 800db4a:	4639      	mov	r1, r7
 800db4c:	4622      	mov	r2, r4
 800db4e:	4630      	mov	r0, r6
 800db50:	f7ff ff1e 	bl	800d990 <__multiply>
 800db54:	4639      	mov	r1, r7
 800db56:	4680      	mov	r8, r0
 800db58:	4630      	mov	r0, r6
 800db5a:	f7ff fe47 	bl	800d7ec <_Bfree>
 800db5e:	4647      	mov	r7, r8
 800db60:	106d      	asrs	r5, r5, #1
 800db62:	d00b      	beq.n	800db7c <__pow5mult+0xa0>
 800db64:	6820      	ldr	r0, [r4, #0]
 800db66:	b938      	cbnz	r0, 800db78 <__pow5mult+0x9c>
 800db68:	4622      	mov	r2, r4
 800db6a:	4621      	mov	r1, r4
 800db6c:	4630      	mov	r0, r6
 800db6e:	f7ff ff0f 	bl	800d990 <__multiply>
 800db72:	6020      	str	r0, [r4, #0]
 800db74:	f8c0 9000 	str.w	r9, [r0]
 800db78:	4604      	mov	r4, r0
 800db7a:	e7e4      	b.n	800db46 <__pow5mult+0x6a>
 800db7c:	4638      	mov	r0, r7
 800db7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db82:	bf00      	nop
 800db84:	0800f940 	.word	0x0800f940
 800db88:	0800f765 	.word	0x0800f765
 800db8c:	0800f7ec 	.word	0x0800f7ec

0800db90 <__lshift>:
 800db90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db94:	460c      	mov	r4, r1
 800db96:	6849      	ldr	r1, [r1, #4]
 800db98:	6923      	ldr	r3, [r4, #16]
 800db9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db9e:	68a3      	ldr	r3, [r4, #8]
 800dba0:	4607      	mov	r7, r0
 800dba2:	4691      	mov	r9, r2
 800dba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dba8:	f108 0601 	add.w	r6, r8, #1
 800dbac:	42b3      	cmp	r3, r6
 800dbae:	db0b      	blt.n	800dbc8 <__lshift+0x38>
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f7ff fddb 	bl	800d76c <_Balloc>
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	b948      	cbnz	r0, 800dbce <__lshift+0x3e>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	4b28      	ldr	r3, [pc, #160]	; (800dc60 <__lshift+0xd0>)
 800dbbe:	4829      	ldr	r0, [pc, #164]	; (800dc64 <__lshift+0xd4>)
 800dbc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dbc4:	f000 fa1a 	bl	800dffc <__assert_func>
 800dbc8:	3101      	adds	r1, #1
 800dbca:	005b      	lsls	r3, r3, #1
 800dbcc:	e7ee      	b.n	800dbac <__lshift+0x1c>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f100 0114 	add.w	r1, r0, #20
 800dbd4:	f100 0210 	add.w	r2, r0, #16
 800dbd8:	4618      	mov	r0, r3
 800dbda:	4553      	cmp	r3, sl
 800dbdc:	db33      	blt.n	800dc46 <__lshift+0xb6>
 800dbde:	6920      	ldr	r0, [r4, #16]
 800dbe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbe4:	f104 0314 	add.w	r3, r4, #20
 800dbe8:	f019 091f 	ands.w	r9, r9, #31
 800dbec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dbf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dbf4:	d02b      	beq.n	800dc4e <__lshift+0xbe>
 800dbf6:	f1c9 0e20 	rsb	lr, r9, #32
 800dbfa:	468a      	mov	sl, r1
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	6818      	ldr	r0, [r3, #0]
 800dc00:	fa00 f009 	lsl.w	r0, r0, r9
 800dc04:	4302      	orrs	r2, r0
 800dc06:	f84a 2b04 	str.w	r2, [sl], #4
 800dc0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc0e:	459c      	cmp	ip, r3
 800dc10:	fa22 f20e 	lsr.w	r2, r2, lr
 800dc14:	d8f3      	bhi.n	800dbfe <__lshift+0x6e>
 800dc16:	ebac 0304 	sub.w	r3, ip, r4
 800dc1a:	3b15      	subs	r3, #21
 800dc1c:	f023 0303 	bic.w	r3, r3, #3
 800dc20:	3304      	adds	r3, #4
 800dc22:	f104 0015 	add.w	r0, r4, #21
 800dc26:	4584      	cmp	ip, r0
 800dc28:	bf38      	it	cc
 800dc2a:	2304      	movcc	r3, #4
 800dc2c:	50ca      	str	r2, [r1, r3]
 800dc2e:	b10a      	cbz	r2, 800dc34 <__lshift+0xa4>
 800dc30:	f108 0602 	add.w	r6, r8, #2
 800dc34:	3e01      	subs	r6, #1
 800dc36:	4638      	mov	r0, r7
 800dc38:	612e      	str	r6, [r5, #16]
 800dc3a:	4621      	mov	r1, r4
 800dc3c:	f7ff fdd6 	bl	800d7ec <_Bfree>
 800dc40:	4628      	mov	r0, r5
 800dc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc46:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	e7c5      	b.n	800dbda <__lshift+0x4a>
 800dc4e:	3904      	subs	r1, #4
 800dc50:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc54:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc58:	459c      	cmp	ip, r3
 800dc5a:	d8f9      	bhi.n	800dc50 <__lshift+0xc0>
 800dc5c:	e7ea      	b.n	800dc34 <__lshift+0xa4>
 800dc5e:	bf00      	nop
 800dc60:	0800f7db 	.word	0x0800f7db
 800dc64:	0800f7ec 	.word	0x0800f7ec

0800dc68 <__mcmp>:
 800dc68:	b530      	push	{r4, r5, lr}
 800dc6a:	6902      	ldr	r2, [r0, #16]
 800dc6c:	690c      	ldr	r4, [r1, #16]
 800dc6e:	1b12      	subs	r2, r2, r4
 800dc70:	d10e      	bne.n	800dc90 <__mcmp+0x28>
 800dc72:	f100 0314 	add.w	r3, r0, #20
 800dc76:	3114      	adds	r1, #20
 800dc78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc88:	42a5      	cmp	r5, r4
 800dc8a:	d003      	beq.n	800dc94 <__mcmp+0x2c>
 800dc8c:	d305      	bcc.n	800dc9a <__mcmp+0x32>
 800dc8e:	2201      	movs	r2, #1
 800dc90:	4610      	mov	r0, r2
 800dc92:	bd30      	pop	{r4, r5, pc}
 800dc94:	4283      	cmp	r3, r0
 800dc96:	d3f3      	bcc.n	800dc80 <__mcmp+0x18>
 800dc98:	e7fa      	b.n	800dc90 <__mcmp+0x28>
 800dc9a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc9e:	e7f7      	b.n	800dc90 <__mcmp+0x28>

0800dca0 <__mdiff>:
 800dca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca4:	460c      	mov	r4, r1
 800dca6:	4606      	mov	r6, r0
 800dca8:	4611      	mov	r1, r2
 800dcaa:	4620      	mov	r0, r4
 800dcac:	4617      	mov	r7, r2
 800dcae:	f7ff ffdb 	bl	800dc68 <__mcmp>
 800dcb2:	1e05      	subs	r5, r0, #0
 800dcb4:	d110      	bne.n	800dcd8 <__mdiff+0x38>
 800dcb6:	4629      	mov	r1, r5
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f7ff fd57 	bl	800d76c <_Balloc>
 800dcbe:	b930      	cbnz	r0, 800dcce <__mdiff+0x2e>
 800dcc0:	4b39      	ldr	r3, [pc, #228]	; (800dda8 <__mdiff+0x108>)
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	f240 2132 	movw	r1, #562	; 0x232
 800dcc8:	4838      	ldr	r0, [pc, #224]	; (800ddac <__mdiff+0x10c>)
 800dcca:	f000 f997 	bl	800dffc <__assert_func>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd8:	bfa4      	itt	ge
 800dcda:	463b      	movge	r3, r7
 800dcdc:	4627      	movge	r7, r4
 800dcde:	4630      	mov	r0, r6
 800dce0:	6879      	ldr	r1, [r7, #4]
 800dce2:	bfa6      	itte	ge
 800dce4:	461c      	movge	r4, r3
 800dce6:	2500      	movge	r5, #0
 800dce8:	2501      	movlt	r5, #1
 800dcea:	f7ff fd3f 	bl	800d76c <_Balloc>
 800dcee:	b920      	cbnz	r0, 800dcfa <__mdiff+0x5a>
 800dcf0:	4b2d      	ldr	r3, [pc, #180]	; (800dda8 <__mdiff+0x108>)
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dcf8:	e7e6      	b.n	800dcc8 <__mdiff+0x28>
 800dcfa:	693e      	ldr	r6, [r7, #16]
 800dcfc:	60c5      	str	r5, [r0, #12]
 800dcfe:	6925      	ldr	r5, [r4, #16]
 800dd00:	f107 0114 	add.w	r1, r7, #20
 800dd04:	f104 0914 	add.w	r9, r4, #20
 800dd08:	f100 0e14 	add.w	lr, r0, #20
 800dd0c:	f107 0210 	add.w	r2, r7, #16
 800dd10:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dd14:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dd18:	46f2      	mov	sl, lr
 800dd1a:	2700      	movs	r7, #0
 800dd1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd24:	fa1f f883 	uxth.w	r8, r3
 800dd28:	fa17 f78b 	uxtah	r7, r7, fp
 800dd2c:	0c1b      	lsrs	r3, r3, #16
 800dd2e:	eba7 0808 	sub.w	r8, r7, r8
 800dd32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd3a:	fa1f f888 	uxth.w	r8, r8
 800dd3e:	141f      	asrs	r7, r3, #16
 800dd40:	454d      	cmp	r5, r9
 800dd42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dd46:	f84a 3b04 	str.w	r3, [sl], #4
 800dd4a:	d8e7      	bhi.n	800dd1c <__mdiff+0x7c>
 800dd4c:	1b2b      	subs	r3, r5, r4
 800dd4e:	3b15      	subs	r3, #21
 800dd50:	f023 0303 	bic.w	r3, r3, #3
 800dd54:	3304      	adds	r3, #4
 800dd56:	3415      	adds	r4, #21
 800dd58:	42a5      	cmp	r5, r4
 800dd5a:	bf38      	it	cc
 800dd5c:	2304      	movcc	r3, #4
 800dd5e:	4419      	add	r1, r3
 800dd60:	4473      	add	r3, lr
 800dd62:	469e      	mov	lr, r3
 800dd64:	460d      	mov	r5, r1
 800dd66:	4565      	cmp	r5, ip
 800dd68:	d30e      	bcc.n	800dd88 <__mdiff+0xe8>
 800dd6a:	f10c 0203 	add.w	r2, ip, #3
 800dd6e:	1a52      	subs	r2, r2, r1
 800dd70:	f022 0203 	bic.w	r2, r2, #3
 800dd74:	3903      	subs	r1, #3
 800dd76:	458c      	cmp	ip, r1
 800dd78:	bf38      	it	cc
 800dd7a:	2200      	movcc	r2, #0
 800dd7c:	441a      	add	r2, r3
 800dd7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dd82:	b17b      	cbz	r3, 800dda4 <__mdiff+0x104>
 800dd84:	6106      	str	r6, [r0, #16]
 800dd86:	e7a5      	b.n	800dcd4 <__mdiff+0x34>
 800dd88:	f855 8b04 	ldr.w	r8, [r5], #4
 800dd8c:	fa17 f488 	uxtah	r4, r7, r8
 800dd90:	1422      	asrs	r2, r4, #16
 800dd92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dd96:	b2a4      	uxth	r4, r4
 800dd98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dd9c:	f84e 4b04 	str.w	r4, [lr], #4
 800dda0:	1417      	asrs	r7, r2, #16
 800dda2:	e7e0      	b.n	800dd66 <__mdiff+0xc6>
 800dda4:	3e01      	subs	r6, #1
 800dda6:	e7ea      	b.n	800dd7e <__mdiff+0xde>
 800dda8:	0800f7db 	.word	0x0800f7db
 800ddac:	0800f7ec 	.word	0x0800f7ec

0800ddb0 <__d2b>:
 800ddb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ddb4:	4689      	mov	r9, r1
 800ddb6:	2101      	movs	r1, #1
 800ddb8:	ec57 6b10 	vmov	r6, r7, d0
 800ddbc:	4690      	mov	r8, r2
 800ddbe:	f7ff fcd5 	bl	800d76c <_Balloc>
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	b930      	cbnz	r0, 800ddd4 <__d2b+0x24>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	4b25      	ldr	r3, [pc, #148]	; (800de60 <__d2b+0xb0>)
 800ddca:	4826      	ldr	r0, [pc, #152]	; (800de64 <__d2b+0xb4>)
 800ddcc:	f240 310a 	movw	r1, #778	; 0x30a
 800ddd0:	f000 f914 	bl	800dffc <__assert_func>
 800ddd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ddd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dddc:	bb35      	cbnz	r5, 800de2c <__d2b+0x7c>
 800ddde:	2e00      	cmp	r6, #0
 800dde0:	9301      	str	r3, [sp, #4]
 800dde2:	d028      	beq.n	800de36 <__d2b+0x86>
 800dde4:	4668      	mov	r0, sp
 800dde6:	9600      	str	r6, [sp, #0]
 800dde8:	f7ff fd8c 	bl	800d904 <__lo0bits>
 800ddec:	9900      	ldr	r1, [sp, #0]
 800ddee:	b300      	cbz	r0, 800de32 <__d2b+0x82>
 800ddf0:	9a01      	ldr	r2, [sp, #4]
 800ddf2:	f1c0 0320 	rsb	r3, r0, #32
 800ddf6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddfa:	430b      	orrs	r3, r1
 800ddfc:	40c2      	lsrs	r2, r0
 800ddfe:	6163      	str	r3, [r4, #20]
 800de00:	9201      	str	r2, [sp, #4]
 800de02:	9b01      	ldr	r3, [sp, #4]
 800de04:	61a3      	str	r3, [r4, #24]
 800de06:	2b00      	cmp	r3, #0
 800de08:	bf14      	ite	ne
 800de0a:	2202      	movne	r2, #2
 800de0c:	2201      	moveq	r2, #1
 800de0e:	6122      	str	r2, [r4, #16]
 800de10:	b1d5      	cbz	r5, 800de48 <__d2b+0x98>
 800de12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800de16:	4405      	add	r5, r0
 800de18:	f8c9 5000 	str.w	r5, [r9]
 800de1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de20:	f8c8 0000 	str.w	r0, [r8]
 800de24:	4620      	mov	r0, r4
 800de26:	b003      	add	sp, #12
 800de28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de30:	e7d5      	b.n	800ddde <__d2b+0x2e>
 800de32:	6161      	str	r1, [r4, #20]
 800de34:	e7e5      	b.n	800de02 <__d2b+0x52>
 800de36:	a801      	add	r0, sp, #4
 800de38:	f7ff fd64 	bl	800d904 <__lo0bits>
 800de3c:	9b01      	ldr	r3, [sp, #4]
 800de3e:	6163      	str	r3, [r4, #20]
 800de40:	2201      	movs	r2, #1
 800de42:	6122      	str	r2, [r4, #16]
 800de44:	3020      	adds	r0, #32
 800de46:	e7e3      	b.n	800de10 <__d2b+0x60>
 800de48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de50:	f8c9 0000 	str.w	r0, [r9]
 800de54:	6918      	ldr	r0, [r3, #16]
 800de56:	f7ff fd35 	bl	800d8c4 <__hi0bits>
 800de5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de5e:	e7df      	b.n	800de20 <__d2b+0x70>
 800de60:	0800f7db 	.word	0x0800f7db
 800de64:	0800f7ec 	.word	0x0800f7ec

0800de68 <_calloc_r>:
 800de68:	b513      	push	{r0, r1, r4, lr}
 800de6a:	434a      	muls	r2, r1
 800de6c:	4611      	mov	r1, r2
 800de6e:	9201      	str	r2, [sp, #4]
 800de70:	f000 f85a 	bl	800df28 <_malloc_r>
 800de74:	4604      	mov	r4, r0
 800de76:	b118      	cbz	r0, 800de80 <_calloc_r+0x18>
 800de78:	9a01      	ldr	r2, [sp, #4]
 800de7a:	2100      	movs	r1, #0
 800de7c:	f7fe fa0e 	bl	800c29c <memset>
 800de80:	4620      	mov	r0, r4
 800de82:	b002      	add	sp, #8
 800de84:	bd10      	pop	{r4, pc}
	...

0800de88 <_free_r>:
 800de88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de8a:	2900      	cmp	r1, #0
 800de8c:	d048      	beq.n	800df20 <_free_r+0x98>
 800de8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de92:	9001      	str	r0, [sp, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	f1a1 0404 	sub.w	r4, r1, #4
 800de9a:	bfb8      	it	lt
 800de9c:	18e4      	addlt	r4, r4, r3
 800de9e:	f000 f8ef 	bl	800e080 <__malloc_lock>
 800dea2:	4a20      	ldr	r2, [pc, #128]	; (800df24 <_free_r+0x9c>)
 800dea4:	9801      	ldr	r0, [sp, #4]
 800dea6:	6813      	ldr	r3, [r2, #0]
 800dea8:	4615      	mov	r5, r2
 800deaa:	b933      	cbnz	r3, 800deba <_free_r+0x32>
 800deac:	6063      	str	r3, [r4, #4]
 800deae:	6014      	str	r4, [r2, #0]
 800deb0:	b003      	add	sp, #12
 800deb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800deb6:	f000 b8e9 	b.w	800e08c <__malloc_unlock>
 800deba:	42a3      	cmp	r3, r4
 800debc:	d90b      	bls.n	800ded6 <_free_r+0x4e>
 800debe:	6821      	ldr	r1, [r4, #0]
 800dec0:	1862      	adds	r2, r4, r1
 800dec2:	4293      	cmp	r3, r2
 800dec4:	bf04      	itt	eq
 800dec6:	681a      	ldreq	r2, [r3, #0]
 800dec8:	685b      	ldreq	r3, [r3, #4]
 800deca:	6063      	str	r3, [r4, #4]
 800decc:	bf04      	itt	eq
 800dece:	1852      	addeq	r2, r2, r1
 800ded0:	6022      	streq	r2, [r4, #0]
 800ded2:	602c      	str	r4, [r5, #0]
 800ded4:	e7ec      	b.n	800deb0 <_free_r+0x28>
 800ded6:	461a      	mov	r2, r3
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	b10b      	cbz	r3, 800dee0 <_free_r+0x58>
 800dedc:	42a3      	cmp	r3, r4
 800dede:	d9fa      	bls.n	800ded6 <_free_r+0x4e>
 800dee0:	6811      	ldr	r1, [r2, #0]
 800dee2:	1855      	adds	r5, r2, r1
 800dee4:	42a5      	cmp	r5, r4
 800dee6:	d10b      	bne.n	800df00 <_free_r+0x78>
 800dee8:	6824      	ldr	r4, [r4, #0]
 800deea:	4421      	add	r1, r4
 800deec:	1854      	adds	r4, r2, r1
 800deee:	42a3      	cmp	r3, r4
 800def0:	6011      	str	r1, [r2, #0]
 800def2:	d1dd      	bne.n	800deb0 <_free_r+0x28>
 800def4:	681c      	ldr	r4, [r3, #0]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	6053      	str	r3, [r2, #4]
 800defa:	4421      	add	r1, r4
 800defc:	6011      	str	r1, [r2, #0]
 800defe:	e7d7      	b.n	800deb0 <_free_r+0x28>
 800df00:	d902      	bls.n	800df08 <_free_r+0x80>
 800df02:	230c      	movs	r3, #12
 800df04:	6003      	str	r3, [r0, #0]
 800df06:	e7d3      	b.n	800deb0 <_free_r+0x28>
 800df08:	6825      	ldr	r5, [r4, #0]
 800df0a:	1961      	adds	r1, r4, r5
 800df0c:	428b      	cmp	r3, r1
 800df0e:	bf04      	itt	eq
 800df10:	6819      	ldreq	r1, [r3, #0]
 800df12:	685b      	ldreq	r3, [r3, #4]
 800df14:	6063      	str	r3, [r4, #4]
 800df16:	bf04      	itt	eq
 800df18:	1949      	addeq	r1, r1, r5
 800df1a:	6021      	streq	r1, [r4, #0]
 800df1c:	6054      	str	r4, [r2, #4]
 800df1e:	e7c7      	b.n	800deb0 <_free_r+0x28>
 800df20:	b003      	add	sp, #12
 800df22:	bd30      	pop	{r4, r5, pc}
 800df24:	2400023c 	.word	0x2400023c

0800df28 <_malloc_r>:
 800df28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df2a:	1ccd      	adds	r5, r1, #3
 800df2c:	f025 0503 	bic.w	r5, r5, #3
 800df30:	3508      	adds	r5, #8
 800df32:	2d0c      	cmp	r5, #12
 800df34:	bf38      	it	cc
 800df36:	250c      	movcc	r5, #12
 800df38:	2d00      	cmp	r5, #0
 800df3a:	4606      	mov	r6, r0
 800df3c:	db01      	blt.n	800df42 <_malloc_r+0x1a>
 800df3e:	42a9      	cmp	r1, r5
 800df40:	d903      	bls.n	800df4a <_malloc_r+0x22>
 800df42:	230c      	movs	r3, #12
 800df44:	6033      	str	r3, [r6, #0]
 800df46:	2000      	movs	r0, #0
 800df48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df4a:	f000 f899 	bl	800e080 <__malloc_lock>
 800df4e:	4921      	ldr	r1, [pc, #132]	; (800dfd4 <_malloc_r+0xac>)
 800df50:	680a      	ldr	r2, [r1, #0]
 800df52:	4614      	mov	r4, r2
 800df54:	b99c      	cbnz	r4, 800df7e <_malloc_r+0x56>
 800df56:	4f20      	ldr	r7, [pc, #128]	; (800dfd8 <_malloc_r+0xb0>)
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	b923      	cbnz	r3, 800df66 <_malloc_r+0x3e>
 800df5c:	4621      	mov	r1, r4
 800df5e:	4630      	mov	r0, r6
 800df60:	f000 f83c 	bl	800dfdc <_sbrk_r>
 800df64:	6038      	str	r0, [r7, #0]
 800df66:	4629      	mov	r1, r5
 800df68:	4630      	mov	r0, r6
 800df6a:	f000 f837 	bl	800dfdc <_sbrk_r>
 800df6e:	1c43      	adds	r3, r0, #1
 800df70:	d123      	bne.n	800dfba <_malloc_r+0x92>
 800df72:	230c      	movs	r3, #12
 800df74:	6033      	str	r3, [r6, #0]
 800df76:	4630      	mov	r0, r6
 800df78:	f000 f888 	bl	800e08c <__malloc_unlock>
 800df7c:	e7e3      	b.n	800df46 <_malloc_r+0x1e>
 800df7e:	6823      	ldr	r3, [r4, #0]
 800df80:	1b5b      	subs	r3, r3, r5
 800df82:	d417      	bmi.n	800dfb4 <_malloc_r+0x8c>
 800df84:	2b0b      	cmp	r3, #11
 800df86:	d903      	bls.n	800df90 <_malloc_r+0x68>
 800df88:	6023      	str	r3, [r4, #0]
 800df8a:	441c      	add	r4, r3
 800df8c:	6025      	str	r5, [r4, #0]
 800df8e:	e004      	b.n	800df9a <_malloc_r+0x72>
 800df90:	6863      	ldr	r3, [r4, #4]
 800df92:	42a2      	cmp	r2, r4
 800df94:	bf0c      	ite	eq
 800df96:	600b      	streq	r3, [r1, #0]
 800df98:	6053      	strne	r3, [r2, #4]
 800df9a:	4630      	mov	r0, r6
 800df9c:	f000 f876 	bl	800e08c <__malloc_unlock>
 800dfa0:	f104 000b 	add.w	r0, r4, #11
 800dfa4:	1d23      	adds	r3, r4, #4
 800dfa6:	f020 0007 	bic.w	r0, r0, #7
 800dfaa:	1ac2      	subs	r2, r0, r3
 800dfac:	d0cc      	beq.n	800df48 <_malloc_r+0x20>
 800dfae:	1a1b      	subs	r3, r3, r0
 800dfb0:	50a3      	str	r3, [r4, r2]
 800dfb2:	e7c9      	b.n	800df48 <_malloc_r+0x20>
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	6864      	ldr	r4, [r4, #4]
 800dfb8:	e7cc      	b.n	800df54 <_malloc_r+0x2c>
 800dfba:	1cc4      	adds	r4, r0, #3
 800dfbc:	f024 0403 	bic.w	r4, r4, #3
 800dfc0:	42a0      	cmp	r0, r4
 800dfc2:	d0e3      	beq.n	800df8c <_malloc_r+0x64>
 800dfc4:	1a21      	subs	r1, r4, r0
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f000 f808 	bl	800dfdc <_sbrk_r>
 800dfcc:	3001      	adds	r0, #1
 800dfce:	d1dd      	bne.n	800df8c <_malloc_r+0x64>
 800dfd0:	e7cf      	b.n	800df72 <_malloc_r+0x4a>
 800dfd2:	bf00      	nop
 800dfd4:	2400023c 	.word	0x2400023c
 800dfd8:	24000240 	.word	0x24000240

0800dfdc <_sbrk_r>:
 800dfdc:	b538      	push	{r3, r4, r5, lr}
 800dfde:	4d06      	ldr	r5, [pc, #24]	; (800dff8 <_sbrk_r+0x1c>)
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	4608      	mov	r0, r1
 800dfe6:	602b      	str	r3, [r5, #0]
 800dfe8:	f7f3 fe4c 	bl	8001c84 <_sbrk>
 800dfec:	1c43      	adds	r3, r0, #1
 800dfee:	d102      	bne.n	800dff6 <_sbrk_r+0x1a>
 800dff0:	682b      	ldr	r3, [r5, #0]
 800dff2:	b103      	cbz	r3, 800dff6 <_sbrk_r+0x1a>
 800dff4:	6023      	str	r3, [r4, #0]
 800dff6:	bd38      	pop	{r3, r4, r5, pc}
 800dff8:	24000e30 	.word	0x24000e30

0800dffc <__assert_func>:
 800dffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dffe:	4614      	mov	r4, r2
 800e000:	461a      	mov	r2, r3
 800e002:	4b09      	ldr	r3, [pc, #36]	; (800e028 <__assert_func+0x2c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4605      	mov	r5, r0
 800e008:	68d8      	ldr	r0, [r3, #12]
 800e00a:	b14c      	cbz	r4, 800e020 <__assert_func+0x24>
 800e00c:	4b07      	ldr	r3, [pc, #28]	; (800e02c <__assert_func+0x30>)
 800e00e:	9100      	str	r1, [sp, #0]
 800e010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e014:	4906      	ldr	r1, [pc, #24]	; (800e030 <__assert_func+0x34>)
 800e016:	462b      	mov	r3, r5
 800e018:	f000 f80e 	bl	800e038 <fiprintf>
 800e01c:	f000 fa64 	bl	800e4e8 <abort>
 800e020:	4b04      	ldr	r3, [pc, #16]	; (800e034 <__assert_func+0x38>)
 800e022:	461c      	mov	r4, r3
 800e024:	e7f3      	b.n	800e00e <__assert_func+0x12>
 800e026:	bf00      	nop
 800e028:	24000010 	.word	0x24000010
 800e02c:	0800f94c 	.word	0x0800f94c
 800e030:	0800f959 	.word	0x0800f959
 800e034:	0800f987 	.word	0x0800f987

0800e038 <fiprintf>:
 800e038:	b40e      	push	{r1, r2, r3}
 800e03a:	b503      	push	{r0, r1, lr}
 800e03c:	4601      	mov	r1, r0
 800e03e:	ab03      	add	r3, sp, #12
 800e040:	4805      	ldr	r0, [pc, #20]	; (800e058 <fiprintf+0x20>)
 800e042:	f853 2b04 	ldr.w	r2, [r3], #4
 800e046:	6800      	ldr	r0, [r0, #0]
 800e048:	9301      	str	r3, [sp, #4]
 800e04a:	f000 f84f 	bl	800e0ec <_vfiprintf_r>
 800e04e:	b002      	add	sp, #8
 800e050:	f85d eb04 	ldr.w	lr, [sp], #4
 800e054:	b003      	add	sp, #12
 800e056:	4770      	bx	lr
 800e058:	24000010 	.word	0x24000010

0800e05c <__ascii_mbtowc>:
 800e05c:	b082      	sub	sp, #8
 800e05e:	b901      	cbnz	r1, 800e062 <__ascii_mbtowc+0x6>
 800e060:	a901      	add	r1, sp, #4
 800e062:	b142      	cbz	r2, 800e076 <__ascii_mbtowc+0x1a>
 800e064:	b14b      	cbz	r3, 800e07a <__ascii_mbtowc+0x1e>
 800e066:	7813      	ldrb	r3, [r2, #0]
 800e068:	600b      	str	r3, [r1, #0]
 800e06a:	7812      	ldrb	r2, [r2, #0]
 800e06c:	1e10      	subs	r0, r2, #0
 800e06e:	bf18      	it	ne
 800e070:	2001      	movne	r0, #1
 800e072:	b002      	add	sp, #8
 800e074:	4770      	bx	lr
 800e076:	4610      	mov	r0, r2
 800e078:	e7fb      	b.n	800e072 <__ascii_mbtowc+0x16>
 800e07a:	f06f 0001 	mvn.w	r0, #1
 800e07e:	e7f8      	b.n	800e072 <__ascii_mbtowc+0x16>

0800e080 <__malloc_lock>:
 800e080:	4801      	ldr	r0, [pc, #4]	; (800e088 <__malloc_lock+0x8>)
 800e082:	f000 bbf1 	b.w	800e868 <__retarget_lock_acquire_recursive>
 800e086:	bf00      	nop
 800e088:	24000e38 	.word	0x24000e38

0800e08c <__malloc_unlock>:
 800e08c:	4801      	ldr	r0, [pc, #4]	; (800e094 <__malloc_unlock+0x8>)
 800e08e:	f000 bbec 	b.w	800e86a <__retarget_lock_release_recursive>
 800e092:	bf00      	nop
 800e094:	24000e38 	.word	0x24000e38

0800e098 <__sfputc_r>:
 800e098:	6893      	ldr	r3, [r2, #8]
 800e09a:	3b01      	subs	r3, #1
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	b410      	push	{r4}
 800e0a0:	6093      	str	r3, [r2, #8]
 800e0a2:	da08      	bge.n	800e0b6 <__sfputc_r+0x1e>
 800e0a4:	6994      	ldr	r4, [r2, #24]
 800e0a6:	42a3      	cmp	r3, r4
 800e0a8:	db01      	blt.n	800e0ae <__sfputc_r+0x16>
 800e0aa:	290a      	cmp	r1, #10
 800e0ac:	d103      	bne.n	800e0b6 <__sfputc_r+0x1e>
 800e0ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0b2:	f000 b94b 	b.w	800e34c <__swbuf_r>
 800e0b6:	6813      	ldr	r3, [r2, #0]
 800e0b8:	1c58      	adds	r0, r3, #1
 800e0ba:	6010      	str	r0, [r2, #0]
 800e0bc:	7019      	strb	r1, [r3, #0]
 800e0be:	4608      	mov	r0, r1
 800e0c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0c4:	4770      	bx	lr

0800e0c6 <__sfputs_r>:
 800e0c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0c8:	4606      	mov	r6, r0
 800e0ca:	460f      	mov	r7, r1
 800e0cc:	4614      	mov	r4, r2
 800e0ce:	18d5      	adds	r5, r2, r3
 800e0d0:	42ac      	cmp	r4, r5
 800e0d2:	d101      	bne.n	800e0d8 <__sfputs_r+0x12>
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	e007      	b.n	800e0e8 <__sfputs_r+0x22>
 800e0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0dc:	463a      	mov	r2, r7
 800e0de:	4630      	mov	r0, r6
 800e0e0:	f7ff ffda 	bl	800e098 <__sfputc_r>
 800e0e4:	1c43      	adds	r3, r0, #1
 800e0e6:	d1f3      	bne.n	800e0d0 <__sfputs_r+0xa>
 800e0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0ec <_vfiprintf_r>:
 800e0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f0:	460d      	mov	r5, r1
 800e0f2:	b09d      	sub	sp, #116	; 0x74
 800e0f4:	4614      	mov	r4, r2
 800e0f6:	4698      	mov	r8, r3
 800e0f8:	4606      	mov	r6, r0
 800e0fa:	b118      	cbz	r0, 800e104 <_vfiprintf_r+0x18>
 800e0fc:	6983      	ldr	r3, [r0, #24]
 800e0fe:	b90b      	cbnz	r3, 800e104 <_vfiprintf_r+0x18>
 800e100:	f000 fb14 	bl	800e72c <__sinit>
 800e104:	4b89      	ldr	r3, [pc, #548]	; (800e32c <_vfiprintf_r+0x240>)
 800e106:	429d      	cmp	r5, r3
 800e108:	d11b      	bne.n	800e142 <_vfiprintf_r+0x56>
 800e10a:	6875      	ldr	r5, [r6, #4]
 800e10c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e10e:	07d9      	lsls	r1, r3, #31
 800e110:	d405      	bmi.n	800e11e <_vfiprintf_r+0x32>
 800e112:	89ab      	ldrh	r3, [r5, #12]
 800e114:	059a      	lsls	r2, r3, #22
 800e116:	d402      	bmi.n	800e11e <_vfiprintf_r+0x32>
 800e118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e11a:	f000 fba5 	bl	800e868 <__retarget_lock_acquire_recursive>
 800e11e:	89ab      	ldrh	r3, [r5, #12]
 800e120:	071b      	lsls	r3, r3, #28
 800e122:	d501      	bpl.n	800e128 <_vfiprintf_r+0x3c>
 800e124:	692b      	ldr	r3, [r5, #16]
 800e126:	b9eb      	cbnz	r3, 800e164 <_vfiprintf_r+0x78>
 800e128:	4629      	mov	r1, r5
 800e12a:	4630      	mov	r0, r6
 800e12c:	f000 f96e 	bl	800e40c <__swsetup_r>
 800e130:	b1c0      	cbz	r0, 800e164 <_vfiprintf_r+0x78>
 800e132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e134:	07dc      	lsls	r4, r3, #31
 800e136:	d50e      	bpl.n	800e156 <_vfiprintf_r+0x6a>
 800e138:	f04f 30ff 	mov.w	r0, #4294967295
 800e13c:	b01d      	add	sp, #116	; 0x74
 800e13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e142:	4b7b      	ldr	r3, [pc, #492]	; (800e330 <_vfiprintf_r+0x244>)
 800e144:	429d      	cmp	r5, r3
 800e146:	d101      	bne.n	800e14c <_vfiprintf_r+0x60>
 800e148:	68b5      	ldr	r5, [r6, #8]
 800e14a:	e7df      	b.n	800e10c <_vfiprintf_r+0x20>
 800e14c:	4b79      	ldr	r3, [pc, #484]	; (800e334 <_vfiprintf_r+0x248>)
 800e14e:	429d      	cmp	r5, r3
 800e150:	bf08      	it	eq
 800e152:	68f5      	ldreq	r5, [r6, #12]
 800e154:	e7da      	b.n	800e10c <_vfiprintf_r+0x20>
 800e156:	89ab      	ldrh	r3, [r5, #12]
 800e158:	0598      	lsls	r0, r3, #22
 800e15a:	d4ed      	bmi.n	800e138 <_vfiprintf_r+0x4c>
 800e15c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e15e:	f000 fb84 	bl	800e86a <__retarget_lock_release_recursive>
 800e162:	e7e9      	b.n	800e138 <_vfiprintf_r+0x4c>
 800e164:	2300      	movs	r3, #0
 800e166:	9309      	str	r3, [sp, #36]	; 0x24
 800e168:	2320      	movs	r3, #32
 800e16a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e16e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e172:	2330      	movs	r3, #48	; 0x30
 800e174:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e338 <_vfiprintf_r+0x24c>
 800e178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e17c:	f04f 0901 	mov.w	r9, #1
 800e180:	4623      	mov	r3, r4
 800e182:	469a      	mov	sl, r3
 800e184:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e188:	b10a      	cbz	r2, 800e18e <_vfiprintf_r+0xa2>
 800e18a:	2a25      	cmp	r2, #37	; 0x25
 800e18c:	d1f9      	bne.n	800e182 <_vfiprintf_r+0x96>
 800e18e:	ebba 0b04 	subs.w	fp, sl, r4
 800e192:	d00b      	beq.n	800e1ac <_vfiprintf_r+0xc0>
 800e194:	465b      	mov	r3, fp
 800e196:	4622      	mov	r2, r4
 800e198:	4629      	mov	r1, r5
 800e19a:	4630      	mov	r0, r6
 800e19c:	f7ff ff93 	bl	800e0c6 <__sfputs_r>
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	f000 80aa 	beq.w	800e2fa <_vfiprintf_r+0x20e>
 800e1a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1a8:	445a      	add	r2, fp
 800e1aa:	9209      	str	r2, [sp, #36]	; 0x24
 800e1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f000 80a2 	beq.w	800e2fa <_vfiprintf_r+0x20e>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1c0:	f10a 0a01 	add.w	sl, sl, #1
 800e1c4:	9304      	str	r3, [sp, #16]
 800e1c6:	9307      	str	r3, [sp, #28]
 800e1c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1cc:	931a      	str	r3, [sp, #104]	; 0x68
 800e1ce:	4654      	mov	r4, sl
 800e1d0:	2205      	movs	r2, #5
 800e1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d6:	4858      	ldr	r0, [pc, #352]	; (800e338 <_vfiprintf_r+0x24c>)
 800e1d8:	f7f2 f8a2 	bl	8000320 <memchr>
 800e1dc:	9a04      	ldr	r2, [sp, #16]
 800e1de:	b9d8      	cbnz	r0, 800e218 <_vfiprintf_r+0x12c>
 800e1e0:	06d1      	lsls	r1, r2, #27
 800e1e2:	bf44      	itt	mi
 800e1e4:	2320      	movmi	r3, #32
 800e1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1ea:	0713      	lsls	r3, r2, #28
 800e1ec:	bf44      	itt	mi
 800e1ee:	232b      	movmi	r3, #43	; 0x2b
 800e1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800e1fa:	d015      	beq.n	800e228 <_vfiprintf_r+0x13c>
 800e1fc:	9a07      	ldr	r2, [sp, #28]
 800e1fe:	4654      	mov	r4, sl
 800e200:	2000      	movs	r0, #0
 800e202:	f04f 0c0a 	mov.w	ip, #10
 800e206:	4621      	mov	r1, r4
 800e208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e20c:	3b30      	subs	r3, #48	; 0x30
 800e20e:	2b09      	cmp	r3, #9
 800e210:	d94e      	bls.n	800e2b0 <_vfiprintf_r+0x1c4>
 800e212:	b1b0      	cbz	r0, 800e242 <_vfiprintf_r+0x156>
 800e214:	9207      	str	r2, [sp, #28]
 800e216:	e014      	b.n	800e242 <_vfiprintf_r+0x156>
 800e218:	eba0 0308 	sub.w	r3, r0, r8
 800e21c:	fa09 f303 	lsl.w	r3, r9, r3
 800e220:	4313      	orrs	r3, r2
 800e222:	9304      	str	r3, [sp, #16]
 800e224:	46a2      	mov	sl, r4
 800e226:	e7d2      	b.n	800e1ce <_vfiprintf_r+0xe2>
 800e228:	9b03      	ldr	r3, [sp, #12]
 800e22a:	1d19      	adds	r1, r3, #4
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	9103      	str	r1, [sp, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	bfbb      	ittet	lt
 800e234:	425b      	neglt	r3, r3
 800e236:	f042 0202 	orrlt.w	r2, r2, #2
 800e23a:	9307      	strge	r3, [sp, #28]
 800e23c:	9307      	strlt	r3, [sp, #28]
 800e23e:	bfb8      	it	lt
 800e240:	9204      	strlt	r2, [sp, #16]
 800e242:	7823      	ldrb	r3, [r4, #0]
 800e244:	2b2e      	cmp	r3, #46	; 0x2e
 800e246:	d10c      	bne.n	800e262 <_vfiprintf_r+0x176>
 800e248:	7863      	ldrb	r3, [r4, #1]
 800e24a:	2b2a      	cmp	r3, #42	; 0x2a
 800e24c:	d135      	bne.n	800e2ba <_vfiprintf_r+0x1ce>
 800e24e:	9b03      	ldr	r3, [sp, #12]
 800e250:	1d1a      	adds	r2, r3, #4
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	9203      	str	r2, [sp, #12]
 800e256:	2b00      	cmp	r3, #0
 800e258:	bfb8      	it	lt
 800e25a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e25e:	3402      	adds	r4, #2
 800e260:	9305      	str	r3, [sp, #20]
 800e262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e348 <_vfiprintf_r+0x25c>
 800e266:	7821      	ldrb	r1, [r4, #0]
 800e268:	2203      	movs	r2, #3
 800e26a:	4650      	mov	r0, sl
 800e26c:	f7f2 f858 	bl	8000320 <memchr>
 800e270:	b140      	cbz	r0, 800e284 <_vfiprintf_r+0x198>
 800e272:	2340      	movs	r3, #64	; 0x40
 800e274:	eba0 000a 	sub.w	r0, r0, sl
 800e278:	fa03 f000 	lsl.w	r0, r3, r0
 800e27c:	9b04      	ldr	r3, [sp, #16]
 800e27e:	4303      	orrs	r3, r0
 800e280:	3401      	adds	r4, #1
 800e282:	9304      	str	r3, [sp, #16]
 800e284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e288:	482c      	ldr	r0, [pc, #176]	; (800e33c <_vfiprintf_r+0x250>)
 800e28a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e28e:	2206      	movs	r2, #6
 800e290:	f7f2 f846 	bl	8000320 <memchr>
 800e294:	2800      	cmp	r0, #0
 800e296:	d03f      	beq.n	800e318 <_vfiprintf_r+0x22c>
 800e298:	4b29      	ldr	r3, [pc, #164]	; (800e340 <_vfiprintf_r+0x254>)
 800e29a:	bb1b      	cbnz	r3, 800e2e4 <_vfiprintf_r+0x1f8>
 800e29c:	9b03      	ldr	r3, [sp, #12]
 800e29e:	3307      	adds	r3, #7
 800e2a0:	f023 0307 	bic.w	r3, r3, #7
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	9303      	str	r3, [sp, #12]
 800e2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2aa:	443b      	add	r3, r7
 800e2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ae:	e767      	b.n	800e180 <_vfiprintf_r+0x94>
 800e2b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2b4:	460c      	mov	r4, r1
 800e2b6:	2001      	movs	r0, #1
 800e2b8:	e7a5      	b.n	800e206 <_vfiprintf_r+0x11a>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	3401      	adds	r4, #1
 800e2be:	9305      	str	r3, [sp, #20]
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	f04f 0c0a 	mov.w	ip, #10
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2cc:	3a30      	subs	r2, #48	; 0x30
 800e2ce:	2a09      	cmp	r2, #9
 800e2d0:	d903      	bls.n	800e2da <_vfiprintf_r+0x1ee>
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d0c5      	beq.n	800e262 <_vfiprintf_r+0x176>
 800e2d6:	9105      	str	r1, [sp, #20]
 800e2d8:	e7c3      	b.n	800e262 <_vfiprintf_r+0x176>
 800e2da:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2de:	4604      	mov	r4, r0
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e7f0      	b.n	800e2c6 <_vfiprintf_r+0x1da>
 800e2e4:	ab03      	add	r3, sp, #12
 800e2e6:	9300      	str	r3, [sp, #0]
 800e2e8:	462a      	mov	r2, r5
 800e2ea:	4b16      	ldr	r3, [pc, #88]	; (800e344 <_vfiprintf_r+0x258>)
 800e2ec:	a904      	add	r1, sp, #16
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	f7fe f86e 	bl	800c3d0 <_printf_float>
 800e2f4:	4607      	mov	r7, r0
 800e2f6:	1c78      	adds	r0, r7, #1
 800e2f8:	d1d6      	bne.n	800e2a8 <_vfiprintf_r+0x1bc>
 800e2fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2fc:	07d9      	lsls	r1, r3, #31
 800e2fe:	d405      	bmi.n	800e30c <_vfiprintf_r+0x220>
 800e300:	89ab      	ldrh	r3, [r5, #12]
 800e302:	059a      	lsls	r2, r3, #22
 800e304:	d402      	bmi.n	800e30c <_vfiprintf_r+0x220>
 800e306:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e308:	f000 faaf 	bl	800e86a <__retarget_lock_release_recursive>
 800e30c:	89ab      	ldrh	r3, [r5, #12]
 800e30e:	065b      	lsls	r3, r3, #25
 800e310:	f53f af12 	bmi.w	800e138 <_vfiprintf_r+0x4c>
 800e314:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e316:	e711      	b.n	800e13c <_vfiprintf_r+0x50>
 800e318:	ab03      	add	r3, sp, #12
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	462a      	mov	r2, r5
 800e31e:	4b09      	ldr	r3, [pc, #36]	; (800e344 <_vfiprintf_r+0x258>)
 800e320:	a904      	add	r1, sp, #16
 800e322:	4630      	mov	r0, r6
 800e324:	f7fe fae0 	bl	800c8e8 <_printf_i>
 800e328:	e7e4      	b.n	800e2f4 <_vfiprintf_r+0x208>
 800e32a:	bf00      	nop
 800e32c:	0800fac4 	.word	0x0800fac4
 800e330:	0800fae4 	.word	0x0800fae4
 800e334:	0800faa4 	.word	0x0800faa4
 800e338:	0800f992 	.word	0x0800f992
 800e33c:	0800f99c 	.word	0x0800f99c
 800e340:	0800c3d1 	.word	0x0800c3d1
 800e344:	0800e0c7 	.word	0x0800e0c7
 800e348:	0800f998 	.word	0x0800f998

0800e34c <__swbuf_r>:
 800e34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34e:	460e      	mov	r6, r1
 800e350:	4614      	mov	r4, r2
 800e352:	4605      	mov	r5, r0
 800e354:	b118      	cbz	r0, 800e35e <__swbuf_r+0x12>
 800e356:	6983      	ldr	r3, [r0, #24]
 800e358:	b90b      	cbnz	r3, 800e35e <__swbuf_r+0x12>
 800e35a:	f000 f9e7 	bl	800e72c <__sinit>
 800e35e:	4b21      	ldr	r3, [pc, #132]	; (800e3e4 <__swbuf_r+0x98>)
 800e360:	429c      	cmp	r4, r3
 800e362:	d12b      	bne.n	800e3bc <__swbuf_r+0x70>
 800e364:	686c      	ldr	r4, [r5, #4]
 800e366:	69a3      	ldr	r3, [r4, #24]
 800e368:	60a3      	str	r3, [r4, #8]
 800e36a:	89a3      	ldrh	r3, [r4, #12]
 800e36c:	071a      	lsls	r2, r3, #28
 800e36e:	d52f      	bpl.n	800e3d0 <__swbuf_r+0x84>
 800e370:	6923      	ldr	r3, [r4, #16]
 800e372:	b36b      	cbz	r3, 800e3d0 <__swbuf_r+0x84>
 800e374:	6923      	ldr	r3, [r4, #16]
 800e376:	6820      	ldr	r0, [r4, #0]
 800e378:	1ac0      	subs	r0, r0, r3
 800e37a:	6963      	ldr	r3, [r4, #20]
 800e37c:	b2f6      	uxtb	r6, r6
 800e37e:	4283      	cmp	r3, r0
 800e380:	4637      	mov	r7, r6
 800e382:	dc04      	bgt.n	800e38e <__swbuf_r+0x42>
 800e384:	4621      	mov	r1, r4
 800e386:	4628      	mov	r0, r5
 800e388:	f000 f93c 	bl	800e604 <_fflush_r>
 800e38c:	bb30      	cbnz	r0, 800e3dc <__swbuf_r+0x90>
 800e38e:	68a3      	ldr	r3, [r4, #8]
 800e390:	3b01      	subs	r3, #1
 800e392:	60a3      	str	r3, [r4, #8]
 800e394:	6823      	ldr	r3, [r4, #0]
 800e396:	1c5a      	adds	r2, r3, #1
 800e398:	6022      	str	r2, [r4, #0]
 800e39a:	701e      	strb	r6, [r3, #0]
 800e39c:	6963      	ldr	r3, [r4, #20]
 800e39e:	3001      	adds	r0, #1
 800e3a0:	4283      	cmp	r3, r0
 800e3a2:	d004      	beq.n	800e3ae <__swbuf_r+0x62>
 800e3a4:	89a3      	ldrh	r3, [r4, #12]
 800e3a6:	07db      	lsls	r3, r3, #31
 800e3a8:	d506      	bpl.n	800e3b8 <__swbuf_r+0x6c>
 800e3aa:	2e0a      	cmp	r6, #10
 800e3ac:	d104      	bne.n	800e3b8 <__swbuf_r+0x6c>
 800e3ae:	4621      	mov	r1, r4
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	f000 f927 	bl	800e604 <_fflush_r>
 800e3b6:	b988      	cbnz	r0, 800e3dc <__swbuf_r+0x90>
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3bc:	4b0a      	ldr	r3, [pc, #40]	; (800e3e8 <__swbuf_r+0x9c>)
 800e3be:	429c      	cmp	r4, r3
 800e3c0:	d101      	bne.n	800e3c6 <__swbuf_r+0x7a>
 800e3c2:	68ac      	ldr	r4, [r5, #8]
 800e3c4:	e7cf      	b.n	800e366 <__swbuf_r+0x1a>
 800e3c6:	4b09      	ldr	r3, [pc, #36]	; (800e3ec <__swbuf_r+0xa0>)
 800e3c8:	429c      	cmp	r4, r3
 800e3ca:	bf08      	it	eq
 800e3cc:	68ec      	ldreq	r4, [r5, #12]
 800e3ce:	e7ca      	b.n	800e366 <__swbuf_r+0x1a>
 800e3d0:	4621      	mov	r1, r4
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	f000 f81a 	bl	800e40c <__swsetup_r>
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d0cb      	beq.n	800e374 <__swbuf_r+0x28>
 800e3dc:	f04f 37ff 	mov.w	r7, #4294967295
 800e3e0:	e7ea      	b.n	800e3b8 <__swbuf_r+0x6c>
 800e3e2:	bf00      	nop
 800e3e4:	0800fac4 	.word	0x0800fac4
 800e3e8:	0800fae4 	.word	0x0800fae4
 800e3ec:	0800faa4 	.word	0x0800faa4

0800e3f0 <__ascii_wctomb>:
 800e3f0:	b149      	cbz	r1, 800e406 <__ascii_wctomb+0x16>
 800e3f2:	2aff      	cmp	r2, #255	; 0xff
 800e3f4:	bf85      	ittet	hi
 800e3f6:	238a      	movhi	r3, #138	; 0x8a
 800e3f8:	6003      	strhi	r3, [r0, #0]
 800e3fa:	700a      	strbls	r2, [r1, #0]
 800e3fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800e400:	bf98      	it	ls
 800e402:	2001      	movls	r0, #1
 800e404:	4770      	bx	lr
 800e406:	4608      	mov	r0, r1
 800e408:	4770      	bx	lr
	...

0800e40c <__swsetup_r>:
 800e40c:	4b32      	ldr	r3, [pc, #200]	; (800e4d8 <__swsetup_r+0xcc>)
 800e40e:	b570      	push	{r4, r5, r6, lr}
 800e410:	681d      	ldr	r5, [r3, #0]
 800e412:	4606      	mov	r6, r0
 800e414:	460c      	mov	r4, r1
 800e416:	b125      	cbz	r5, 800e422 <__swsetup_r+0x16>
 800e418:	69ab      	ldr	r3, [r5, #24]
 800e41a:	b913      	cbnz	r3, 800e422 <__swsetup_r+0x16>
 800e41c:	4628      	mov	r0, r5
 800e41e:	f000 f985 	bl	800e72c <__sinit>
 800e422:	4b2e      	ldr	r3, [pc, #184]	; (800e4dc <__swsetup_r+0xd0>)
 800e424:	429c      	cmp	r4, r3
 800e426:	d10f      	bne.n	800e448 <__swsetup_r+0x3c>
 800e428:	686c      	ldr	r4, [r5, #4]
 800e42a:	89a3      	ldrh	r3, [r4, #12]
 800e42c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e430:	0719      	lsls	r1, r3, #28
 800e432:	d42c      	bmi.n	800e48e <__swsetup_r+0x82>
 800e434:	06dd      	lsls	r5, r3, #27
 800e436:	d411      	bmi.n	800e45c <__swsetup_r+0x50>
 800e438:	2309      	movs	r3, #9
 800e43a:	6033      	str	r3, [r6, #0]
 800e43c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e440:	81a3      	strh	r3, [r4, #12]
 800e442:	f04f 30ff 	mov.w	r0, #4294967295
 800e446:	e03e      	b.n	800e4c6 <__swsetup_r+0xba>
 800e448:	4b25      	ldr	r3, [pc, #148]	; (800e4e0 <__swsetup_r+0xd4>)
 800e44a:	429c      	cmp	r4, r3
 800e44c:	d101      	bne.n	800e452 <__swsetup_r+0x46>
 800e44e:	68ac      	ldr	r4, [r5, #8]
 800e450:	e7eb      	b.n	800e42a <__swsetup_r+0x1e>
 800e452:	4b24      	ldr	r3, [pc, #144]	; (800e4e4 <__swsetup_r+0xd8>)
 800e454:	429c      	cmp	r4, r3
 800e456:	bf08      	it	eq
 800e458:	68ec      	ldreq	r4, [r5, #12]
 800e45a:	e7e6      	b.n	800e42a <__swsetup_r+0x1e>
 800e45c:	0758      	lsls	r0, r3, #29
 800e45e:	d512      	bpl.n	800e486 <__swsetup_r+0x7a>
 800e460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e462:	b141      	cbz	r1, 800e476 <__swsetup_r+0x6a>
 800e464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e468:	4299      	cmp	r1, r3
 800e46a:	d002      	beq.n	800e472 <__swsetup_r+0x66>
 800e46c:	4630      	mov	r0, r6
 800e46e:	f7ff fd0b 	bl	800de88 <_free_r>
 800e472:	2300      	movs	r3, #0
 800e474:	6363      	str	r3, [r4, #52]	; 0x34
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e47c:	81a3      	strh	r3, [r4, #12]
 800e47e:	2300      	movs	r3, #0
 800e480:	6063      	str	r3, [r4, #4]
 800e482:	6923      	ldr	r3, [r4, #16]
 800e484:	6023      	str	r3, [r4, #0]
 800e486:	89a3      	ldrh	r3, [r4, #12]
 800e488:	f043 0308 	orr.w	r3, r3, #8
 800e48c:	81a3      	strh	r3, [r4, #12]
 800e48e:	6923      	ldr	r3, [r4, #16]
 800e490:	b94b      	cbnz	r3, 800e4a6 <__swsetup_r+0x9a>
 800e492:	89a3      	ldrh	r3, [r4, #12]
 800e494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e49c:	d003      	beq.n	800e4a6 <__swsetup_r+0x9a>
 800e49e:	4621      	mov	r1, r4
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	f000 fa07 	bl	800e8b4 <__smakebuf_r>
 800e4a6:	89a0      	ldrh	r0, [r4, #12]
 800e4a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4ac:	f010 0301 	ands.w	r3, r0, #1
 800e4b0:	d00a      	beq.n	800e4c8 <__swsetup_r+0xbc>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	60a3      	str	r3, [r4, #8]
 800e4b6:	6963      	ldr	r3, [r4, #20]
 800e4b8:	425b      	negs	r3, r3
 800e4ba:	61a3      	str	r3, [r4, #24]
 800e4bc:	6923      	ldr	r3, [r4, #16]
 800e4be:	b943      	cbnz	r3, 800e4d2 <__swsetup_r+0xc6>
 800e4c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e4c4:	d1ba      	bne.n	800e43c <__swsetup_r+0x30>
 800e4c6:	bd70      	pop	{r4, r5, r6, pc}
 800e4c8:	0781      	lsls	r1, r0, #30
 800e4ca:	bf58      	it	pl
 800e4cc:	6963      	ldrpl	r3, [r4, #20]
 800e4ce:	60a3      	str	r3, [r4, #8]
 800e4d0:	e7f4      	b.n	800e4bc <__swsetup_r+0xb0>
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	e7f7      	b.n	800e4c6 <__swsetup_r+0xba>
 800e4d6:	bf00      	nop
 800e4d8:	24000010 	.word	0x24000010
 800e4dc:	0800fac4 	.word	0x0800fac4
 800e4e0:	0800fae4 	.word	0x0800fae4
 800e4e4:	0800faa4 	.word	0x0800faa4

0800e4e8 <abort>:
 800e4e8:	b508      	push	{r3, lr}
 800e4ea:	2006      	movs	r0, #6
 800e4ec:	f000 fa4a 	bl	800e984 <raise>
 800e4f0:	2001      	movs	r0, #1
 800e4f2:	f7f3 fb4f 	bl	8001b94 <_exit>
	...

0800e4f8 <__sflush_r>:
 800e4f8:	898a      	ldrh	r2, [r1, #12]
 800e4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4fe:	4605      	mov	r5, r0
 800e500:	0710      	lsls	r0, r2, #28
 800e502:	460c      	mov	r4, r1
 800e504:	d458      	bmi.n	800e5b8 <__sflush_r+0xc0>
 800e506:	684b      	ldr	r3, [r1, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	dc05      	bgt.n	800e518 <__sflush_r+0x20>
 800e50c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e50e:	2b00      	cmp	r3, #0
 800e510:	dc02      	bgt.n	800e518 <__sflush_r+0x20>
 800e512:	2000      	movs	r0, #0
 800e514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e51a:	2e00      	cmp	r6, #0
 800e51c:	d0f9      	beq.n	800e512 <__sflush_r+0x1a>
 800e51e:	2300      	movs	r3, #0
 800e520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e524:	682f      	ldr	r7, [r5, #0]
 800e526:	602b      	str	r3, [r5, #0]
 800e528:	d032      	beq.n	800e590 <__sflush_r+0x98>
 800e52a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e52c:	89a3      	ldrh	r3, [r4, #12]
 800e52e:	075a      	lsls	r2, r3, #29
 800e530:	d505      	bpl.n	800e53e <__sflush_r+0x46>
 800e532:	6863      	ldr	r3, [r4, #4]
 800e534:	1ac0      	subs	r0, r0, r3
 800e536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e538:	b10b      	cbz	r3, 800e53e <__sflush_r+0x46>
 800e53a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e53c:	1ac0      	subs	r0, r0, r3
 800e53e:	2300      	movs	r3, #0
 800e540:	4602      	mov	r2, r0
 800e542:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e544:	6a21      	ldr	r1, [r4, #32]
 800e546:	4628      	mov	r0, r5
 800e548:	47b0      	blx	r6
 800e54a:	1c43      	adds	r3, r0, #1
 800e54c:	89a3      	ldrh	r3, [r4, #12]
 800e54e:	d106      	bne.n	800e55e <__sflush_r+0x66>
 800e550:	6829      	ldr	r1, [r5, #0]
 800e552:	291d      	cmp	r1, #29
 800e554:	d82c      	bhi.n	800e5b0 <__sflush_r+0xb8>
 800e556:	4a2a      	ldr	r2, [pc, #168]	; (800e600 <__sflush_r+0x108>)
 800e558:	40ca      	lsrs	r2, r1
 800e55a:	07d6      	lsls	r6, r2, #31
 800e55c:	d528      	bpl.n	800e5b0 <__sflush_r+0xb8>
 800e55e:	2200      	movs	r2, #0
 800e560:	6062      	str	r2, [r4, #4]
 800e562:	04d9      	lsls	r1, r3, #19
 800e564:	6922      	ldr	r2, [r4, #16]
 800e566:	6022      	str	r2, [r4, #0]
 800e568:	d504      	bpl.n	800e574 <__sflush_r+0x7c>
 800e56a:	1c42      	adds	r2, r0, #1
 800e56c:	d101      	bne.n	800e572 <__sflush_r+0x7a>
 800e56e:	682b      	ldr	r3, [r5, #0]
 800e570:	b903      	cbnz	r3, 800e574 <__sflush_r+0x7c>
 800e572:	6560      	str	r0, [r4, #84]	; 0x54
 800e574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e576:	602f      	str	r7, [r5, #0]
 800e578:	2900      	cmp	r1, #0
 800e57a:	d0ca      	beq.n	800e512 <__sflush_r+0x1a>
 800e57c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e580:	4299      	cmp	r1, r3
 800e582:	d002      	beq.n	800e58a <__sflush_r+0x92>
 800e584:	4628      	mov	r0, r5
 800e586:	f7ff fc7f 	bl	800de88 <_free_r>
 800e58a:	2000      	movs	r0, #0
 800e58c:	6360      	str	r0, [r4, #52]	; 0x34
 800e58e:	e7c1      	b.n	800e514 <__sflush_r+0x1c>
 800e590:	6a21      	ldr	r1, [r4, #32]
 800e592:	2301      	movs	r3, #1
 800e594:	4628      	mov	r0, r5
 800e596:	47b0      	blx	r6
 800e598:	1c41      	adds	r1, r0, #1
 800e59a:	d1c7      	bne.n	800e52c <__sflush_r+0x34>
 800e59c:	682b      	ldr	r3, [r5, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d0c4      	beq.n	800e52c <__sflush_r+0x34>
 800e5a2:	2b1d      	cmp	r3, #29
 800e5a4:	d001      	beq.n	800e5aa <__sflush_r+0xb2>
 800e5a6:	2b16      	cmp	r3, #22
 800e5a8:	d101      	bne.n	800e5ae <__sflush_r+0xb6>
 800e5aa:	602f      	str	r7, [r5, #0]
 800e5ac:	e7b1      	b.n	800e512 <__sflush_r+0x1a>
 800e5ae:	89a3      	ldrh	r3, [r4, #12]
 800e5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5b4:	81a3      	strh	r3, [r4, #12]
 800e5b6:	e7ad      	b.n	800e514 <__sflush_r+0x1c>
 800e5b8:	690f      	ldr	r7, [r1, #16]
 800e5ba:	2f00      	cmp	r7, #0
 800e5bc:	d0a9      	beq.n	800e512 <__sflush_r+0x1a>
 800e5be:	0793      	lsls	r3, r2, #30
 800e5c0:	680e      	ldr	r6, [r1, #0]
 800e5c2:	bf08      	it	eq
 800e5c4:	694b      	ldreq	r3, [r1, #20]
 800e5c6:	600f      	str	r7, [r1, #0]
 800e5c8:	bf18      	it	ne
 800e5ca:	2300      	movne	r3, #0
 800e5cc:	eba6 0807 	sub.w	r8, r6, r7
 800e5d0:	608b      	str	r3, [r1, #8]
 800e5d2:	f1b8 0f00 	cmp.w	r8, #0
 800e5d6:	dd9c      	ble.n	800e512 <__sflush_r+0x1a>
 800e5d8:	6a21      	ldr	r1, [r4, #32]
 800e5da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5dc:	4643      	mov	r3, r8
 800e5de:	463a      	mov	r2, r7
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	47b0      	blx	r6
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	dc06      	bgt.n	800e5f6 <__sflush_r+0xfe>
 800e5e8:	89a3      	ldrh	r3, [r4, #12]
 800e5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5ee:	81a3      	strh	r3, [r4, #12]
 800e5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f4:	e78e      	b.n	800e514 <__sflush_r+0x1c>
 800e5f6:	4407      	add	r7, r0
 800e5f8:	eba8 0800 	sub.w	r8, r8, r0
 800e5fc:	e7e9      	b.n	800e5d2 <__sflush_r+0xda>
 800e5fe:	bf00      	nop
 800e600:	20400001 	.word	0x20400001

0800e604 <_fflush_r>:
 800e604:	b538      	push	{r3, r4, r5, lr}
 800e606:	690b      	ldr	r3, [r1, #16]
 800e608:	4605      	mov	r5, r0
 800e60a:	460c      	mov	r4, r1
 800e60c:	b913      	cbnz	r3, 800e614 <_fflush_r+0x10>
 800e60e:	2500      	movs	r5, #0
 800e610:	4628      	mov	r0, r5
 800e612:	bd38      	pop	{r3, r4, r5, pc}
 800e614:	b118      	cbz	r0, 800e61e <_fflush_r+0x1a>
 800e616:	6983      	ldr	r3, [r0, #24]
 800e618:	b90b      	cbnz	r3, 800e61e <_fflush_r+0x1a>
 800e61a:	f000 f887 	bl	800e72c <__sinit>
 800e61e:	4b14      	ldr	r3, [pc, #80]	; (800e670 <_fflush_r+0x6c>)
 800e620:	429c      	cmp	r4, r3
 800e622:	d11b      	bne.n	800e65c <_fflush_r+0x58>
 800e624:	686c      	ldr	r4, [r5, #4]
 800e626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d0ef      	beq.n	800e60e <_fflush_r+0xa>
 800e62e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e630:	07d0      	lsls	r0, r2, #31
 800e632:	d404      	bmi.n	800e63e <_fflush_r+0x3a>
 800e634:	0599      	lsls	r1, r3, #22
 800e636:	d402      	bmi.n	800e63e <_fflush_r+0x3a>
 800e638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e63a:	f000 f915 	bl	800e868 <__retarget_lock_acquire_recursive>
 800e63e:	4628      	mov	r0, r5
 800e640:	4621      	mov	r1, r4
 800e642:	f7ff ff59 	bl	800e4f8 <__sflush_r>
 800e646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e648:	07da      	lsls	r2, r3, #31
 800e64a:	4605      	mov	r5, r0
 800e64c:	d4e0      	bmi.n	800e610 <_fflush_r+0xc>
 800e64e:	89a3      	ldrh	r3, [r4, #12]
 800e650:	059b      	lsls	r3, r3, #22
 800e652:	d4dd      	bmi.n	800e610 <_fflush_r+0xc>
 800e654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e656:	f000 f908 	bl	800e86a <__retarget_lock_release_recursive>
 800e65a:	e7d9      	b.n	800e610 <_fflush_r+0xc>
 800e65c:	4b05      	ldr	r3, [pc, #20]	; (800e674 <_fflush_r+0x70>)
 800e65e:	429c      	cmp	r4, r3
 800e660:	d101      	bne.n	800e666 <_fflush_r+0x62>
 800e662:	68ac      	ldr	r4, [r5, #8]
 800e664:	e7df      	b.n	800e626 <_fflush_r+0x22>
 800e666:	4b04      	ldr	r3, [pc, #16]	; (800e678 <_fflush_r+0x74>)
 800e668:	429c      	cmp	r4, r3
 800e66a:	bf08      	it	eq
 800e66c:	68ec      	ldreq	r4, [r5, #12]
 800e66e:	e7da      	b.n	800e626 <_fflush_r+0x22>
 800e670:	0800fac4 	.word	0x0800fac4
 800e674:	0800fae4 	.word	0x0800fae4
 800e678:	0800faa4 	.word	0x0800faa4

0800e67c <std>:
 800e67c:	2300      	movs	r3, #0
 800e67e:	b510      	push	{r4, lr}
 800e680:	4604      	mov	r4, r0
 800e682:	e9c0 3300 	strd	r3, r3, [r0]
 800e686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e68a:	6083      	str	r3, [r0, #8]
 800e68c:	8181      	strh	r1, [r0, #12]
 800e68e:	6643      	str	r3, [r0, #100]	; 0x64
 800e690:	81c2      	strh	r2, [r0, #14]
 800e692:	6183      	str	r3, [r0, #24]
 800e694:	4619      	mov	r1, r3
 800e696:	2208      	movs	r2, #8
 800e698:	305c      	adds	r0, #92	; 0x5c
 800e69a:	f7fd fdff 	bl	800c29c <memset>
 800e69e:	4b05      	ldr	r3, [pc, #20]	; (800e6b4 <std+0x38>)
 800e6a0:	6263      	str	r3, [r4, #36]	; 0x24
 800e6a2:	4b05      	ldr	r3, [pc, #20]	; (800e6b8 <std+0x3c>)
 800e6a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6a6:	4b05      	ldr	r3, [pc, #20]	; (800e6bc <std+0x40>)
 800e6a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6aa:	4b05      	ldr	r3, [pc, #20]	; (800e6c0 <std+0x44>)
 800e6ac:	6224      	str	r4, [r4, #32]
 800e6ae:	6323      	str	r3, [r4, #48]	; 0x30
 800e6b0:	bd10      	pop	{r4, pc}
 800e6b2:	bf00      	nop
 800e6b4:	0800e9bd 	.word	0x0800e9bd
 800e6b8:	0800e9df 	.word	0x0800e9df
 800e6bc:	0800ea17 	.word	0x0800ea17
 800e6c0:	0800ea3b 	.word	0x0800ea3b

0800e6c4 <_cleanup_r>:
 800e6c4:	4901      	ldr	r1, [pc, #4]	; (800e6cc <_cleanup_r+0x8>)
 800e6c6:	f000 b8af 	b.w	800e828 <_fwalk_reent>
 800e6ca:	bf00      	nop
 800e6cc:	0800e605 	.word	0x0800e605

0800e6d0 <__sfmoreglue>:
 800e6d0:	b570      	push	{r4, r5, r6, lr}
 800e6d2:	1e4a      	subs	r2, r1, #1
 800e6d4:	2568      	movs	r5, #104	; 0x68
 800e6d6:	4355      	muls	r5, r2
 800e6d8:	460e      	mov	r6, r1
 800e6da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e6de:	f7ff fc23 	bl	800df28 <_malloc_r>
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	b140      	cbz	r0, 800e6f8 <__sfmoreglue+0x28>
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	e9c0 1600 	strd	r1, r6, [r0]
 800e6ec:	300c      	adds	r0, #12
 800e6ee:	60a0      	str	r0, [r4, #8]
 800e6f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e6f4:	f7fd fdd2 	bl	800c29c <memset>
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	bd70      	pop	{r4, r5, r6, pc}

0800e6fc <__sfp_lock_acquire>:
 800e6fc:	4801      	ldr	r0, [pc, #4]	; (800e704 <__sfp_lock_acquire+0x8>)
 800e6fe:	f000 b8b3 	b.w	800e868 <__retarget_lock_acquire_recursive>
 800e702:	bf00      	nop
 800e704:	24000e3c 	.word	0x24000e3c

0800e708 <__sfp_lock_release>:
 800e708:	4801      	ldr	r0, [pc, #4]	; (800e710 <__sfp_lock_release+0x8>)
 800e70a:	f000 b8ae 	b.w	800e86a <__retarget_lock_release_recursive>
 800e70e:	bf00      	nop
 800e710:	24000e3c 	.word	0x24000e3c

0800e714 <__sinit_lock_acquire>:
 800e714:	4801      	ldr	r0, [pc, #4]	; (800e71c <__sinit_lock_acquire+0x8>)
 800e716:	f000 b8a7 	b.w	800e868 <__retarget_lock_acquire_recursive>
 800e71a:	bf00      	nop
 800e71c:	24000e37 	.word	0x24000e37

0800e720 <__sinit_lock_release>:
 800e720:	4801      	ldr	r0, [pc, #4]	; (800e728 <__sinit_lock_release+0x8>)
 800e722:	f000 b8a2 	b.w	800e86a <__retarget_lock_release_recursive>
 800e726:	bf00      	nop
 800e728:	24000e37 	.word	0x24000e37

0800e72c <__sinit>:
 800e72c:	b510      	push	{r4, lr}
 800e72e:	4604      	mov	r4, r0
 800e730:	f7ff fff0 	bl	800e714 <__sinit_lock_acquire>
 800e734:	69a3      	ldr	r3, [r4, #24]
 800e736:	b11b      	cbz	r3, 800e740 <__sinit+0x14>
 800e738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e73c:	f7ff bff0 	b.w	800e720 <__sinit_lock_release>
 800e740:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e744:	6523      	str	r3, [r4, #80]	; 0x50
 800e746:	4b13      	ldr	r3, [pc, #76]	; (800e794 <__sinit+0x68>)
 800e748:	4a13      	ldr	r2, [pc, #76]	; (800e798 <__sinit+0x6c>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e74e:	42a3      	cmp	r3, r4
 800e750:	bf04      	itt	eq
 800e752:	2301      	moveq	r3, #1
 800e754:	61a3      	streq	r3, [r4, #24]
 800e756:	4620      	mov	r0, r4
 800e758:	f000 f820 	bl	800e79c <__sfp>
 800e75c:	6060      	str	r0, [r4, #4]
 800e75e:	4620      	mov	r0, r4
 800e760:	f000 f81c 	bl	800e79c <__sfp>
 800e764:	60a0      	str	r0, [r4, #8]
 800e766:	4620      	mov	r0, r4
 800e768:	f000 f818 	bl	800e79c <__sfp>
 800e76c:	2200      	movs	r2, #0
 800e76e:	60e0      	str	r0, [r4, #12]
 800e770:	2104      	movs	r1, #4
 800e772:	6860      	ldr	r0, [r4, #4]
 800e774:	f7ff ff82 	bl	800e67c <std>
 800e778:	68a0      	ldr	r0, [r4, #8]
 800e77a:	2201      	movs	r2, #1
 800e77c:	2109      	movs	r1, #9
 800e77e:	f7ff ff7d 	bl	800e67c <std>
 800e782:	68e0      	ldr	r0, [r4, #12]
 800e784:	2202      	movs	r2, #2
 800e786:	2112      	movs	r1, #18
 800e788:	f7ff ff78 	bl	800e67c <std>
 800e78c:	2301      	movs	r3, #1
 800e78e:	61a3      	str	r3, [r4, #24]
 800e790:	e7d2      	b.n	800e738 <__sinit+0xc>
 800e792:	bf00      	nop
 800e794:	0800f720 	.word	0x0800f720
 800e798:	0800e6c5 	.word	0x0800e6c5

0800e79c <__sfp>:
 800e79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e79e:	4607      	mov	r7, r0
 800e7a0:	f7ff ffac 	bl	800e6fc <__sfp_lock_acquire>
 800e7a4:	4b1e      	ldr	r3, [pc, #120]	; (800e820 <__sfp+0x84>)
 800e7a6:	681e      	ldr	r6, [r3, #0]
 800e7a8:	69b3      	ldr	r3, [r6, #24]
 800e7aa:	b913      	cbnz	r3, 800e7b2 <__sfp+0x16>
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	f7ff ffbd 	bl	800e72c <__sinit>
 800e7b2:	3648      	adds	r6, #72	; 0x48
 800e7b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e7b8:	3b01      	subs	r3, #1
 800e7ba:	d503      	bpl.n	800e7c4 <__sfp+0x28>
 800e7bc:	6833      	ldr	r3, [r6, #0]
 800e7be:	b30b      	cbz	r3, 800e804 <__sfp+0x68>
 800e7c0:	6836      	ldr	r6, [r6, #0]
 800e7c2:	e7f7      	b.n	800e7b4 <__sfp+0x18>
 800e7c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e7c8:	b9d5      	cbnz	r5, 800e800 <__sfp+0x64>
 800e7ca:	4b16      	ldr	r3, [pc, #88]	; (800e824 <__sfp+0x88>)
 800e7cc:	60e3      	str	r3, [r4, #12]
 800e7ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e7d2:	6665      	str	r5, [r4, #100]	; 0x64
 800e7d4:	f000 f847 	bl	800e866 <__retarget_lock_init_recursive>
 800e7d8:	f7ff ff96 	bl	800e708 <__sfp_lock_release>
 800e7dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e7e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e7e4:	6025      	str	r5, [r4, #0]
 800e7e6:	61a5      	str	r5, [r4, #24]
 800e7e8:	2208      	movs	r2, #8
 800e7ea:	4629      	mov	r1, r5
 800e7ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e7f0:	f7fd fd54 	bl	800c29c <memset>
 800e7f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e7f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e800:	3468      	adds	r4, #104	; 0x68
 800e802:	e7d9      	b.n	800e7b8 <__sfp+0x1c>
 800e804:	2104      	movs	r1, #4
 800e806:	4638      	mov	r0, r7
 800e808:	f7ff ff62 	bl	800e6d0 <__sfmoreglue>
 800e80c:	4604      	mov	r4, r0
 800e80e:	6030      	str	r0, [r6, #0]
 800e810:	2800      	cmp	r0, #0
 800e812:	d1d5      	bne.n	800e7c0 <__sfp+0x24>
 800e814:	f7ff ff78 	bl	800e708 <__sfp_lock_release>
 800e818:	230c      	movs	r3, #12
 800e81a:	603b      	str	r3, [r7, #0]
 800e81c:	e7ee      	b.n	800e7fc <__sfp+0x60>
 800e81e:	bf00      	nop
 800e820:	0800f720 	.word	0x0800f720
 800e824:	ffff0001 	.word	0xffff0001

0800e828 <_fwalk_reent>:
 800e828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e82c:	4606      	mov	r6, r0
 800e82e:	4688      	mov	r8, r1
 800e830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e834:	2700      	movs	r7, #0
 800e836:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e83a:	f1b9 0901 	subs.w	r9, r9, #1
 800e83e:	d505      	bpl.n	800e84c <_fwalk_reent+0x24>
 800e840:	6824      	ldr	r4, [r4, #0]
 800e842:	2c00      	cmp	r4, #0
 800e844:	d1f7      	bne.n	800e836 <_fwalk_reent+0xe>
 800e846:	4638      	mov	r0, r7
 800e848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e84c:	89ab      	ldrh	r3, [r5, #12]
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d907      	bls.n	800e862 <_fwalk_reent+0x3a>
 800e852:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e856:	3301      	adds	r3, #1
 800e858:	d003      	beq.n	800e862 <_fwalk_reent+0x3a>
 800e85a:	4629      	mov	r1, r5
 800e85c:	4630      	mov	r0, r6
 800e85e:	47c0      	blx	r8
 800e860:	4307      	orrs	r7, r0
 800e862:	3568      	adds	r5, #104	; 0x68
 800e864:	e7e9      	b.n	800e83a <_fwalk_reent+0x12>

0800e866 <__retarget_lock_init_recursive>:
 800e866:	4770      	bx	lr

0800e868 <__retarget_lock_acquire_recursive>:
 800e868:	4770      	bx	lr

0800e86a <__retarget_lock_release_recursive>:
 800e86a:	4770      	bx	lr

0800e86c <__swhatbuf_r>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	460e      	mov	r6, r1
 800e870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e874:	2900      	cmp	r1, #0
 800e876:	b096      	sub	sp, #88	; 0x58
 800e878:	4614      	mov	r4, r2
 800e87a:	461d      	mov	r5, r3
 800e87c:	da07      	bge.n	800e88e <__swhatbuf_r+0x22>
 800e87e:	2300      	movs	r3, #0
 800e880:	602b      	str	r3, [r5, #0]
 800e882:	89b3      	ldrh	r3, [r6, #12]
 800e884:	061a      	lsls	r2, r3, #24
 800e886:	d410      	bmi.n	800e8aa <__swhatbuf_r+0x3e>
 800e888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e88c:	e00e      	b.n	800e8ac <__swhatbuf_r+0x40>
 800e88e:	466a      	mov	r2, sp
 800e890:	f000 f8fa 	bl	800ea88 <_fstat_r>
 800e894:	2800      	cmp	r0, #0
 800e896:	dbf2      	blt.n	800e87e <__swhatbuf_r+0x12>
 800e898:	9a01      	ldr	r2, [sp, #4]
 800e89a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e89e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e8a2:	425a      	negs	r2, r3
 800e8a4:	415a      	adcs	r2, r3
 800e8a6:	602a      	str	r2, [r5, #0]
 800e8a8:	e7ee      	b.n	800e888 <__swhatbuf_r+0x1c>
 800e8aa:	2340      	movs	r3, #64	; 0x40
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	6023      	str	r3, [r4, #0]
 800e8b0:	b016      	add	sp, #88	; 0x58
 800e8b2:	bd70      	pop	{r4, r5, r6, pc}

0800e8b4 <__smakebuf_r>:
 800e8b4:	898b      	ldrh	r3, [r1, #12]
 800e8b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e8b8:	079d      	lsls	r5, r3, #30
 800e8ba:	4606      	mov	r6, r0
 800e8bc:	460c      	mov	r4, r1
 800e8be:	d507      	bpl.n	800e8d0 <__smakebuf_r+0x1c>
 800e8c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e8c4:	6023      	str	r3, [r4, #0]
 800e8c6:	6123      	str	r3, [r4, #16]
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	6163      	str	r3, [r4, #20]
 800e8cc:	b002      	add	sp, #8
 800e8ce:	bd70      	pop	{r4, r5, r6, pc}
 800e8d0:	ab01      	add	r3, sp, #4
 800e8d2:	466a      	mov	r2, sp
 800e8d4:	f7ff ffca 	bl	800e86c <__swhatbuf_r>
 800e8d8:	9900      	ldr	r1, [sp, #0]
 800e8da:	4605      	mov	r5, r0
 800e8dc:	4630      	mov	r0, r6
 800e8de:	f7ff fb23 	bl	800df28 <_malloc_r>
 800e8e2:	b948      	cbnz	r0, 800e8f8 <__smakebuf_r+0x44>
 800e8e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8e8:	059a      	lsls	r2, r3, #22
 800e8ea:	d4ef      	bmi.n	800e8cc <__smakebuf_r+0x18>
 800e8ec:	f023 0303 	bic.w	r3, r3, #3
 800e8f0:	f043 0302 	orr.w	r3, r3, #2
 800e8f4:	81a3      	strh	r3, [r4, #12]
 800e8f6:	e7e3      	b.n	800e8c0 <__smakebuf_r+0xc>
 800e8f8:	4b0d      	ldr	r3, [pc, #52]	; (800e930 <__smakebuf_r+0x7c>)
 800e8fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800e8fc:	89a3      	ldrh	r3, [r4, #12]
 800e8fe:	6020      	str	r0, [r4, #0]
 800e900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e904:	81a3      	strh	r3, [r4, #12]
 800e906:	9b00      	ldr	r3, [sp, #0]
 800e908:	6163      	str	r3, [r4, #20]
 800e90a:	9b01      	ldr	r3, [sp, #4]
 800e90c:	6120      	str	r0, [r4, #16]
 800e90e:	b15b      	cbz	r3, 800e928 <__smakebuf_r+0x74>
 800e910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e914:	4630      	mov	r0, r6
 800e916:	f000 f8c9 	bl	800eaac <_isatty_r>
 800e91a:	b128      	cbz	r0, 800e928 <__smakebuf_r+0x74>
 800e91c:	89a3      	ldrh	r3, [r4, #12]
 800e91e:	f023 0303 	bic.w	r3, r3, #3
 800e922:	f043 0301 	orr.w	r3, r3, #1
 800e926:	81a3      	strh	r3, [r4, #12]
 800e928:	89a0      	ldrh	r0, [r4, #12]
 800e92a:	4305      	orrs	r5, r0
 800e92c:	81a5      	strh	r5, [r4, #12]
 800e92e:	e7cd      	b.n	800e8cc <__smakebuf_r+0x18>
 800e930:	0800e6c5 	.word	0x0800e6c5

0800e934 <_raise_r>:
 800e934:	291f      	cmp	r1, #31
 800e936:	b538      	push	{r3, r4, r5, lr}
 800e938:	4604      	mov	r4, r0
 800e93a:	460d      	mov	r5, r1
 800e93c:	d904      	bls.n	800e948 <_raise_r+0x14>
 800e93e:	2316      	movs	r3, #22
 800e940:	6003      	str	r3, [r0, #0]
 800e942:	f04f 30ff 	mov.w	r0, #4294967295
 800e946:	bd38      	pop	{r3, r4, r5, pc}
 800e948:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e94a:	b112      	cbz	r2, 800e952 <_raise_r+0x1e>
 800e94c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e950:	b94b      	cbnz	r3, 800e966 <_raise_r+0x32>
 800e952:	4620      	mov	r0, r4
 800e954:	f000 f830 	bl	800e9b8 <_getpid_r>
 800e958:	462a      	mov	r2, r5
 800e95a:	4601      	mov	r1, r0
 800e95c:	4620      	mov	r0, r4
 800e95e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e962:	f000 b817 	b.w	800e994 <_kill_r>
 800e966:	2b01      	cmp	r3, #1
 800e968:	d00a      	beq.n	800e980 <_raise_r+0x4c>
 800e96a:	1c59      	adds	r1, r3, #1
 800e96c:	d103      	bne.n	800e976 <_raise_r+0x42>
 800e96e:	2316      	movs	r3, #22
 800e970:	6003      	str	r3, [r0, #0]
 800e972:	2001      	movs	r0, #1
 800e974:	e7e7      	b.n	800e946 <_raise_r+0x12>
 800e976:	2400      	movs	r4, #0
 800e978:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e97c:	4628      	mov	r0, r5
 800e97e:	4798      	blx	r3
 800e980:	2000      	movs	r0, #0
 800e982:	e7e0      	b.n	800e946 <_raise_r+0x12>

0800e984 <raise>:
 800e984:	4b02      	ldr	r3, [pc, #8]	; (800e990 <raise+0xc>)
 800e986:	4601      	mov	r1, r0
 800e988:	6818      	ldr	r0, [r3, #0]
 800e98a:	f7ff bfd3 	b.w	800e934 <_raise_r>
 800e98e:	bf00      	nop
 800e990:	24000010 	.word	0x24000010

0800e994 <_kill_r>:
 800e994:	b538      	push	{r3, r4, r5, lr}
 800e996:	4d07      	ldr	r5, [pc, #28]	; (800e9b4 <_kill_r+0x20>)
 800e998:	2300      	movs	r3, #0
 800e99a:	4604      	mov	r4, r0
 800e99c:	4608      	mov	r0, r1
 800e99e:	4611      	mov	r1, r2
 800e9a0:	602b      	str	r3, [r5, #0]
 800e9a2:	f7f3 f8e7 	bl	8001b74 <_kill>
 800e9a6:	1c43      	adds	r3, r0, #1
 800e9a8:	d102      	bne.n	800e9b0 <_kill_r+0x1c>
 800e9aa:	682b      	ldr	r3, [r5, #0]
 800e9ac:	b103      	cbz	r3, 800e9b0 <_kill_r+0x1c>
 800e9ae:	6023      	str	r3, [r4, #0]
 800e9b0:	bd38      	pop	{r3, r4, r5, pc}
 800e9b2:	bf00      	nop
 800e9b4:	24000e30 	.word	0x24000e30

0800e9b8 <_getpid_r>:
 800e9b8:	f7f3 b8d4 	b.w	8001b64 <_getpid>

0800e9bc <__sread>:
 800e9bc:	b510      	push	{r4, lr}
 800e9be:	460c      	mov	r4, r1
 800e9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9c4:	f000 f894 	bl	800eaf0 <_read_r>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	bfab      	itete	ge
 800e9cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e9ce:	89a3      	ldrhlt	r3, [r4, #12]
 800e9d0:	181b      	addge	r3, r3, r0
 800e9d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e9d6:	bfac      	ite	ge
 800e9d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e9da:	81a3      	strhlt	r3, [r4, #12]
 800e9dc:	bd10      	pop	{r4, pc}

0800e9de <__swrite>:
 800e9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e2:	461f      	mov	r7, r3
 800e9e4:	898b      	ldrh	r3, [r1, #12]
 800e9e6:	05db      	lsls	r3, r3, #23
 800e9e8:	4605      	mov	r5, r0
 800e9ea:	460c      	mov	r4, r1
 800e9ec:	4616      	mov	r6, r2
 800e9ee:	d505      	bpl.n	800e9fc <__swrite+0x1e>
 800e9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9f4:	2302      	movs	r3, #2
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f000 f868 	bl	800eacc <_lseek_r>
 800e9fc:	89a3      	ldrh	r3, [r4, #12]
 800e9fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea06:	81a3      	strh	r3, [r4, #12]
 800ea08:	4632      	mov	r2, r6
 800ea0a:	463b      	mov	r3, r7
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea12:	f000 b817 	b.w	800ea44 <_write_r>

0800ea16 <__sseek>:
 800ea16:	b510      	push	{r4, lr}
 800ea18:	460c      	mov	r4, r1
 800ea1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea1e:	f000 f855 	bl	800eacc <_lseek_r>
 800ea22:	1c43      	adds	r3, r0, #1
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	bf15      	itete	ne
 800ea28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea32:	81a3      	strheq	r3, [r4, #12]
 800ea34:	bf18      	it	ne
 800ea36:	81a3      	strhne	r3, [r4, #12]
 800ea38:	bd10      	pop	{r4, pc}

0800ea3a <__sclose>:
 800ea3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea3e:	f000 b813 	b.w	800ea68 <_close_r>
	...

0800ea44 <_write_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	4d07      	ldr	r5, [pc, #28]	; (800ea64 <_write_r+0x20>)
 800ea48:	4604      	mov	r4, r0
 800ea4a:	4608      	mov	r0, r1
 800ea4c:	4611      	mov	r1, r2
 800ea4e:	2200      	movs	r2, #0
 800ea50:	602a      	str	r2, [r5, #0]
 800ea52:	461a      	mov	r2, r3
 800ea54:	f7f3 f8c5 	bl	8001be2 <_write>
 800ea58:	1c43      	adds	r3, r0, #1
 800ea5a:	d102      	bne.n	800ea62 <_write_r+0x1e>
 800ea5c:	682b      	ldr	r3, [r5, #0]
 800ea5e:	b103      	cbz	r3, 800ea62 <_write_r+0x1e>
 800ea60:	6023      	str	r3, [r4, #0]
 800ea62:	bd38      	pop	{r3, r4, r5, pc}
 800ea64:	24000e30 	.word	0x24000e30

0800ea68 <_close_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	4d06      	ldr	r5, [pc, #24]	; (800ea84 <_close_r+0x1c>)
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	4604      	mov	r4, r0
 800ea70:	4608      	mov	r0, r1
 800ea72:	602b      	str	r3, [r5, #0]
 800ea74:	f7f3 f8d1 	bl	8001c1a <_close>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_close_r+0x1a>
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_close_r+0x1a>
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	24000e30 	.word	0x24000e30

0800ea88 <_fstat_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4d07      	ldr	r5, [pc, #28]	; (800eaa8 <_fstat_r+0x20>)
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4604      	mov	r4, r0
 800ea90:	4608      	mov	r0, r1
 800ea92:	4611      	mov	r1, r2
 800ea94:	602b      	str	r3, [r5, #0]
 800ea96:	f7f3 f8cc 	bl	8001c32 <_fstat>
 800ea9a:	1c43      	adds	r3, r0, #1
 800ea9c:	d102      	bne.n	800eaa4 <_fstat_r+0x1c>
 800ea9e:	682b      	ldr	r3, [r5, #0]
 800eaa0:	b103      	cbz	r3, 800eaa4 <_fstat_r+0x1c>
 800eaa2:	6023      	str	r3, [r4, #0]
 800eaa4:	bd38      	pop	{r3, r4, r5, pc}
 800eaa6:	bf00      	nop
 800eaa8:	24000e30 	.word	0x24000e30

0800eaac <_isatty_r>:
 800eaac:	b538      	push	{r3, r4, r5, lr}
 800eaae:	4d06      	ldr	r5, [pc, #24]	; (800eac8 <_isatty_r+0x1c>)
 800eab0:	2300      	movs	r3, #0
 800eab2:	4604      	mov	r4, r0
 800eab4:	4608      	mov	r0, r1
 800eab6:	602b      	str	r3, [r5, #0]
 800eab8:	f7f3 f8cb 	bl	8001c52 <_isatty>
 800eabc:	1c43      	adds	r3, r0, #1
 800eabe:	d102      	bne.n	800eac6 <_isatty_r+0x1a>
 800eac0:	682b      	ldr	r3, [r5, #0]
 800eac2:	b103      	cbz	r3, 800eac6 <_isatty_r+0x1a>
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	24000e30 	.word	0x24000e30

0800eacc <_lseek_r>:
 800eacc:	b538      	push	{r3, r4, r5, lr}
 800eace:	4d07      	ldr	r5, [pc, #28]	; (800eaec <_lseek_r+0x20>)
 800ead0:	4604      	mov	r4, r0
 800ead2:	4608      	mov	r0, r1
 800ead4:	4611      	mov	r1, r2
 800ead6:	2200      	movs	r2, #0
 800ead8:	602a      	str	r2, [r5, #0]
 800eada:	461a      	mov	r2, r3
 800eadc:	f7f3 f8c4 	bl	8001c68 <_lseek>
 800eae0:	1c43      	adds	r3, r0, #1
 800eae2:	d102      	bne.n	800eaea <_lseek_r+0x1e>
 800eae4:	682b      	ldr	r3, [r5, #0]
 800eae6:	b103      	cbz	r3, 800eaea <_lseek_r+0x1e>
 800eae8:	6023      	str	r3, [r4, #0]
 800eaea:	bd38      	pop	{r3, r4, r5, pc}
 800eaec:	24000e30 	.word	0x24000e30

0800eaf0 <_read_r>:
 800eaf0:	b538      	push	{r3, r4, r5, lr}
 800eaf2:	4d07      	ldr	r5, [pc, #28]	; (800eb10 <_read_r+0x20>)
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	4608      	mov	r0, r1
 800eaf8:	4611      	mov	r1, r2
 800eafa:	2200      	movs	r2, #0
 800eafc:	602a      	str	r2, [r5, #0]
 800eafe:	461a      	mov	r2, r3
 800eb00:	f7f3 f852 	bl	8001ba8 <_read>
 800eb04:	1c43      	adds	r3, r0, #1
 800eb06:	d102      	bne.n	800eb0e <_read_r+0x1e>
 800eb08:	682b      	ldr	r3, [r5, #0]
 800eb0a:	b103      	cbz	r3, 800eb0e <_read_r+0x1e>
 800eb0c:	6023      	str	r3, [r4, #0]
 800eb0e:	bd38      	pop	{r3, r4, r5, pc}
 800eb10:	24000e30 	.word	0x24000e30

0800eb14 <fabs>:
 800eb14:	ec51 0b10 	vmov	r0, r1, d0
 800eb18:	ee10 2a10 	vmov	r2, s0
 800eb1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb20:	ec43 2b10 	vmov	d0, r2, r3
 800eb24:	4770      	bx	lr
	...

0800eb28 <sin>:
 800eb28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb2a:	eeb0 7b40 	vmov.f64	d7, d0
 800eb2e:	ee17 3a90 	vmov	r3, s15
 800eb32:	4a1f      	ldr	r2, [pc, #124]	; (800ebb0 <sin+0x88>)
 800eb34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	dc05      	bgt.n	800eb48 <sin+0x20>
 800eb3c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800eba8 <sin+0x80>
 800eb40:	2000      	movs	r0, #0
 800eb42:	f000 fc65 	bl	800f410 <__kernel_sin>
 800eb46:	e004      	b.n	800eb52 <sin+0x2a>
 800eb48:	4a1a      	ldr	r2, [pc, #104]	; (800ebb4 <sin+0x8c>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	dd04      	ble.n	800eb58 <sin+0x30>
 800eb4e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800eb52:	b005      	add	sp, #20
 800eb54:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb58:	4668      	mov	r0, sp
 800eb5a:	f000 f82d 	bl	800ebb8 <__ieee754_rem_pio2>
 800eb5e:	f000 0003 	and.w	r0, r0, #3
 800eb62:	2801      	cmp	r0, #1
 800eb64:	d008      	beq.n	800eb78 <sin+0x50>
 800eb66:	2802      	cmp	r0, #2
 800eb68:	d00d      	beq.n	800eb86 <sin+0x5e>
 800eb6a:	b9b0      	cbnz	r0, 800eb9a <sin+0x72>
 800eb6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb70:	ed9d 0b00 	vldr	d0, [sp]
 800eb74:	2001      	movs	r0, #1
 800eb76:	e7e4      	b.n	800eb42 <sin+0x1a>
 800eb78:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb7c:	ed9d 0b00 	vldr	d0, [sp]
 800eb80:	f000 f95a 	bl	800ee38 <__kernel_cos>
 800eb84:	e7e5      	b.n	800eb52 <sin+0x2a>
 800eb86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb8a:	ed9d 0b00 	vldr	d0, [sp]
 800eb8e:	2001      	movs	r0, #1
 800eb90:	f000 fc3e 	bl	800f410 <__kernel_sin>
 800eb94:	eeb1 0b40 	vneg.f64	d0, d0
 800eb98:	e7db      	b.n	800eb52 <sin+0x2a>
 800eb9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb9e:	ed9d 0b00 	vldr	d0, [sp]
 800eba2:	f000 f949 	bl	800ee38 <__kernel_cos>
 800eba6:	e7f5      	b.n	800eb94 <sin+0x6c>
	...
 800ebb0:	3fe921fb 	.word	0x3fe921fb
 800ebb4:	7fefffff 	.word	0x7fefffff

0800ebb8 <__ieee754_rem_pio2>:
 800ebb8:	b570      	push	{r4, r5, r6, lr}
 800ebba:	eeb0 7b40 	vmov.f64	d7, d0
 800ebbe:	ee17 5a90 	vmov	r5, s15
 800ebc2:	4b97      	ldr	r3, [pc, #604]	; (800ee20 <__ieee754_rem_pio2+0x268>)
 800ebc4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ebc8:	429e      	cmp	r6, r3
 800ebca:	b088      	sub	sp, #32
 800ebcc:	4604      	mov	r4, r0
 800ebce:	dc07      	bgt.n	800ebe0 <__ieee754_rem_pio2+0x28>
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	ed84 0b00 	vstr	d0, [r4]
 800ebd8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ebdc:	2000      	movs	r0, #0
 800ebde:	e01b      	b.n	800ec18 <__ieee754_rem_pio2+0x60>
 800ebe0:	4b90      	ldr	r3, [pc, #576]	; (800ee24 <__ieee754_rem_pio2+0x26c>)
 800ebe2:	429e      	cmp	r6, r3
 800ebe4:	dc3b      	bgt.n	800ec5e <__ieee754_rem_pio2+0xa6>
 800ebe6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800ebea:	2d00      	cmp	r5, #0
 800ebec:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800ede0 <__ieee754_rem_pio2+0x228>
 800ebf0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800ebf4:	dd19      	ble.n	800ec2a <__ieee754_rem_pio2+0x72>
 800ebf6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ebfa:	429e      	cmp	r6, r3
 800ebfc:	d00e      	beq.n	800ec1c <__ieee754_rem_pio2+0x64>
 800ebfe:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800ede8 <__ieee754_rem_pio2+0x230>
 800ec02:	ee37 5b46 	vsub.f64	d5, d7, d6
 800ec06:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ec0a:	ed84 5b00 	vstr	d5, [r4]
 800ec0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ec12:	ed84 7b02 	vstr	d7, [r4, #8]
 800ec16:	2001      	movs	r0, #1
 800ec18:	b008      	add	sp, #32
 800ec1a:	bd70      	pop	{r4, r5, r6, pc}
 800ec1c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800edf0 <__ieee754_rem_pio2+0x238>
 800ec20:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ec24:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800edf8 <__ieee754_rem_pio2+0x240>
 800ec28:	e7eb      	b.n	800ec02 <__ieee754_rem_pio2+0x4a>
 800ec2a:	429e      	cmp	r6, r3
 800ec2c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800ec30:	d00e      	beq.n	800ec50 <__ieee754_rem_pio2+0x98>
 800ec32:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800ede8 <__ieee754_rem_pio2+0x230>
 800ec36:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ec3a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ec3e:	ed84 5b00 	vstr	d5, [r4]
 800ec42:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ec46:	f04f 30ff 	mov.w	r0, #4294967295
 800ec4a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ec4e:	e7e3      	b.n	800ec18 <__ieee754_rem_pio2+0x60>
 800ec50:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800edf0 <__ieee754_rem_pio2+0x238>
 800ec54:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ec58:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800edf8 <__ieee754_rem_pio2+0x240>
 800ec5c:	e7eb      	b.n	800ec36 <__ieee754_rem_pio2+0x7e>
 800ec5e:	4b72      	ldr	r3, [pc, #456]	; (800ee28 <__ieee754_rem_pio2+0x270>)
 800ec60:	429e      	cmp	r6, r3
 800ec62:	dc6e      	bgt.n	800ed42 <__ieee754_rem_pio2+0x18a>
 800ec64:	f7ff ff56 	bl	800eb14 <fabs>
 800ec68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ec6c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800ee00 <__ieee754_rem_pio2+0x248>
 800ec70:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ec74:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ec78:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ec7c:	ee17 0a90 	vmov	r0, s15
 800ec80:	eeb1 4b45 	vneg.f64	d4, d5
 800ec84:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ede0 <__ieee754_rem_pio2+0x228>
 800ec88:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ec8c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ede8 <__ieee754_rem_pio2+0x230>
 800ec90:	281f      	cmp	r0, #31
 800ec92:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ec96:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ec9a:	dc08      	bgt.n	800ecae <__ieee754_rem_pio2+0xf6>
 800ec9c:	4b63      	ldr	r3, [pc, #396]	; (800ee2c <__ieee754_rem_pio2+0x274>)
 800ec9e:	1e42      	subs	r2, r0, #1
 800eca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eca4:	42b3      	cmp	r3, r6
 800eca6:	d002      	beq.n	800ecae <__ieee754_rem_pio2+0xf6>
 800eca8:	ed84 6b00 	vstr	d6, [r4]
 800ecac:	e024      	b.n	800ecf8 <__ieee754_rem_pio2+0x140>
 800ecae:	ee16 3a90 	vmov	r3, s13
 800ecb2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ecb6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800ecba:	2b10      	cmp	r3, #16
 800ecbc:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ecc0:	ddf2      	ble.n	800eca8 <__ieee754_rem_pio2+0xf0>
 800ecc2:	eeb0 6b40 	vmov.f64	d6, d0
 800ecc6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800edf0 <__ieee754_rem_pio2+0x238>
 800ecca:	eea4 6b03 	vfma.f64	d6, d4, d3
 800ecce:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ecd2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ecd6:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800edf8 <__ieee754_rem_pio2+0x240>
 800ecda:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800ecde:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ece2:	ee13 3a90 	vmov	r3, s7
 800ece6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	2b31      	cmp	r3, #49	; 0x31
 800ecee:	dc17      	bgt.n	800ed20 <__ieee754_rem_pio2+0x168>
 800ecf0:	eeb0 0b46 	vmov.f64	d0, d6
 800ecf4:	ed84 3b00 	vstr	d3, [r4]
 800ecf8:	ed94 6b00 	vldr	d6, [r4]
 800ecfc:	2d00      	cmp	r5, #0
 800ecfe:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ed02:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ed06:	ed84 7b02 	vstr	d7, [r4, #8]
 800ed0a:	da85      	bge.n	800ec18 <__ieee754_rem_pio2+0x60>
 800ed0c:	eeb1 6b46 	vneg.f64	d6, d6
 800ed10:	ed84 6b00 	vstr	d6, [r4]
 800ed14:	eeb1 7b47 	vneg.f64	d7, d7
 800ed18:	4240      	negs	r0, r0
 800ed1a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ed1e:	e77b      	b.n	800ec18 <__ieee754_rem_pio2+0x60>
 800ed20:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800ee08 <__ieee754_rem_pio2+0x250>
 800ed24:	eeb0 0b46 	vmov.f64	d0, d6
 800ed28:	eea4 0b03 	vfma.f64	d0, d4, d3
 800ed2c:	ee36 7b40 	vsub.f64	d7, d6, d0
 800ed30:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800ee10 <__ieee754_rem_pio2+0x258>
 800ed34:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ed38:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800ed3c:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ed40:	e7b2      	b.n	800eca8 <__ieee754_rem_pio2+0xf0>
 800ed42:	4b3b      	ldr	r3, [pc, #236]	; (800ee30 <__ieee754_rem_pio2+0x278>)
 800ed44:	429e      	cmp	r6, r3
 800ed46:	dd06      	ble.n	800ed56 <__ieee754_rem_pio2+0x19e>
 800ed48:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ed4c:	ed80 7b02 	vstr	d7, [r0, #8]
 800ed50:	ed80 7b00 	vstr	d7, [r0]
 800ed54:	e742      	b.n	800ebdc <__ieee754_rem_pio2+0x24>
 800ed56:	1532      	asrs	r2, r6, #20
 800ed58:	ee10 0a10 	vmov	r0, s0
 800ed5c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ed60:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ed64:	ec41 0b17 	vmov	d7, r0, r1
 800ed68:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ed6c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800ee18 <__ieee754_rem_pio2+0x260>
 800ed70:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ed74:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ed78:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ed7c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ed80:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ed84:	a902      	add	r1, sp, #8
 800ed86:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ed8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ed8e:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ed92:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ed96:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed9a:	2603      	movs	r6, #3
 800ed9c:	4608      	mov	r0, r1
 800ed9e:	ed91 7b04 	vldr	d7, [r1, #16]
 800eda2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edaa:	4633      	mov	r3, r6
 800edac:	f1a1 0108 	sub.w	r1, r1, #8
 800edb0:	f106 36ff 	add.w	r6, r6, #4294967295
 800edb4:	d0f3      	beq.n	800ed9e <__ieee754_rem_pio2+0x1e6>
 800edb6:	491f      	ldr	r1, [pc, #124]	; (800ee34 <__ieee754_rem_pio2+0x27c>)
 800edb8:	9101      	str	r1, [sp, #4]
 800edba:	2102      	movs	r1, #2
 800edbc:	9100      	str	r1, [sp, #0]
 800edbe:	4621      	mov	r1, r4
 800edc0:	f000 f8a6 	bl	800ef10 <__kernel_rem_pio2>
 800edc4:	2d00      	cmp	r5, #0
 800edc6:	f6bf af27 	bge.w	800ec18 <__ieee754_rem_pio2+0x60>
 800edca:	ed94 7b00 	vldr	d7, [r4]
 800edce:	eeb1 7b47 	vneg.f64	d7, d7
 800edd2:	ed84 7b00 	vstr	d7, [r4]
 800edd6:	ed94 7b02 	vldr	d7, [r4, #8]
 800edda:	e79b      	b.n	800ed14 <__ieee754_rem_pio2+0x15c>
 800eddc:	f3af 8000 	nop.w
 800ede0:	54400000 	.word	0x54400000
 800ede4:	3ff921fb 	.word	0x3ff921fb
 800ede8:	1a626331 	.word	0x1a626331
 800edec:	3dd0b461 	.word	0x3dd0b461
 800edf0:	1a600000 	.word	0x1a600000
 800edf4:	3dd0b461 	.word	0x3dd0b461
 800edf8:	2e037073 	.word	0x2e037073
 800edfc:	3ba3198a 	.word	0x3ba3198a
 800ee00:	6dc9c883 	.word	0x6dc9c883
 800ee04:	3fe45f30 	.word	0x3fe45f30
 800ee08:	2e000000 	.word	0x2e000000
 800ee0c:	3ba3198a 	.word	0x3ba3198a
 800ee10:	252049c1 	.word	0x252049c1
 800ee14:	397b839a 	.word	0x397b839a
 800ee18:	00000000 	.word	0x00000000
 800ee1c:	41700000 	.word	0x41700000
 800ee20:	3fe921fb 	.word	0x3fe921fb
 800ee24:	4002d97b 	.word	0x4002d97b
 800ee28:	413921fb 	.word	0x413921fb
 800ee2c:	0800fb04 	.word	0x0800fb04
 800ee30:	7fefffff 	.word	0x7fefffff
 800ee34:	0800fb84 	.word	0x0800fb84

0800ee38 <__kernel_cos>:
 800ee38:	ee10 1a90 	vmov	r1, s1
 800ee3c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800ee40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ee44:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800ee48:	da05      	bge.n	800ee56 <__kernel_cos+0x1e>
 800ee4a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ee4e:	ee17 3a90 	vmov	r3, s15
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d03d      	beq.n	800eed2 <__kernel_cos+0x9a>
 800ee56:	ee20 3b00 	vmul.f64	d3, d0, d0
 800ee5a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800eed8 <__kernel_cos+0xa0>
 800ee5e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800eee0 <__kernel_cos+0xa8>
 800ee62:	eea3 6b07 	vfma.f64	d6, d3, d7
 800ee66:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800eee8 <__kernel_cos+0xb0>
 800ee6a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ee6e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800eef0 <__kernel_cos+0xb8>
 800ee72:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ee76:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800eef8 <__kernel_cos+0xc0>
 800ee7a:	4b23      	ldr	r3, [pc, #140]	; (800ef08 <__kernel_cos+0xd0>)
 800ee7c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ee80:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800ef00 <__kernel_cos+0xc8>
 800ee84:	4299      	cmp	r1, r3
 800ee86:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ee8a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ee8e:	ee26 5b03 	vmul.f64	d5, d6, d3
 800ee92:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ee96:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800ee9a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ee9e:	dc04      	bgt.n	800eeaa <__kernel_cos+0x72>
 800eea0:	ee37 6b46 	vsub.f64	d6, d7, d6
 800eea4:	ee34 0b46 	vsub.f64	d0, d4, d6
 800eea8:	4770      	bx	lr
 800eeaa:	4b18      	ldr	r3, [pc, #96]	; (800ef0c <__kernel_cos+0xd4>)
 800eeac:	4299      	cmp	r1, r3
 800eeae:	dc0d      	bgt.n	800eecc <__kernel_cos+0x94>
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800eeb6:	ec43 2b15 	vmov	d5, r2, r3
 800eeba:	ee34 0b45 	vsub.f64	d0, d4, d5
 800eebe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800eec2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eec6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800eeca:	4770      	bx	lr
 800eecc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800eed0:	e7f3      	b.n	800eeba <__kernel_cos+0x82>
 800eed2:	eeb0 0b44 	vmov.f64	d0, d4
 800eed6:	4770      	bx	lr
 800eed8:	be8838d4 	.word	0xbe8838d4
 800eedc:	bda8fae9 	.word	0xbda8fae9
 800eee0:	bdb4b1c4 	.word	0xbdb4b1c4
 800eee4:	3e21ee9e 	.word	0x3e21ee9e
 800eee8:	809c52ad 	.word	0x809c52ad
 800eeec:	be927e4f 	.word	0xbe927e4f
 800eef0:	19cb1590 	.word	0x19cb1590
 800eef4:	3efa01a0 	.word	0x3efa01a0
 800eef8:	16c15177 	.word	0x16c15177
 800eefc:	bf56c16c 	.word	0xbf56c16c
 800ef00:	5555554c 	.word	0x5555554c
 800ef04:	3fa55555 	.word	0x3fa55555
 800ef08:	3fd33332 	.word	0x3fd33332
 800ef0c:	3fe90000 	.word	0x3fe90000

0800ef10 <__kernel_rem_pio2>:
 800ef10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef14:	ed2d 8b06 	vpush	{d8-d10}
 800ef18:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800ef1c:	469b      	mov	fp, r3
 800ef1e:	460f      	mov	r7, r1
 800ef20:	4bcf      	ldr	r3, [pc, #828]	; (800f260 <__kernel_rem_pio2+0x350>)
 800ef22:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800ef24:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800ef28:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800ef2c:	9000      	str	r0, [sp, #0]
 800ef2e:	f112 0f14 	cmn.w	r2, #20
 800ef32:	bfa8      	it	ge
 800ef34:	2318      	movge	r3, #24
 800ef36:	f10b 31ff 	add.w	r1, fp, #4294967295
 800ef3a:	bfb8      	it	lt
 800ef3c:	2300      	movlt	r3, #0
 800ef3e:	f06f 0417 	mvn.w	r4, #23
 800ef42:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800f248 <__kernel_rem_pio2+0x338>
 800ef46:	bfa4      	itt	ge
 800ef48:	f1a2 0a03 	subge.w	sl, r2, #3
 800ef4c:	fb9a f3f3 	sdivge	r3, sl, r3
 800ef50:	fb03 4404 	mla	r4, r3, r4, r4
 800ef54:	1a5d      	subs	r5, r3, r1
 800ef56:	4414      	add	r4, r2
 800ef58:	eb09 0601 	add.w	r6, r9, r1
 800ef5c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800ef60:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800ef64:	2200      	movs	r2, #0
 800ef66:	42b2      	cmp	r2, r6
 800ef68:	dd12      	ble.n	800ef90 <__kernel_rem_pio2+0x80>
 800ef6a:	aa18      	add	r2, sp, #96	; 0x60
 800ef6c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ef70:	460e      	mov	r6, r1
 800ef72:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800ef76:	f1cb 0a01 	rsb	sl, fp, #1
 800ef7a:	eb0a 0006 	add.w	r0, sl, r6
 800ef7e:	4581      	cmp	r9, r0
 800ef80:	db25      	blt.n	800efce <__kernel_rem_pio2+0xbe>
 800ef82:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800f248 <__kernel_rem_pio2+0x338>
 800ef86:	f8dd e000 	ldr.w	lr, [sp]
 800ef8a:	4615      	mov	r5, r2
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	e015      	b.n	800efbc <__kernel_rem_pio2+0xac>
 800ef90:	42d5      	cmn	r5, r2
 800ef92:	d409      	bmi.n	800efa8 <__kernel_rem_pio2+0x98>
 800ef94:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800ef98:	ee07 0a90 	vmov	s15, r0
 800ef9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800efa0:	eca8 7b02 	vstmia	r8!, {d7}
 800efa4:	3201      	adds	r2, #1
 800efa6:	e7de      	b.n	800ef66 <__kernel_rem_pio2+0x56>
 800efa8:	eeb0 7b46 	vmov.f64	d7, d6
 800efac:	e7f8      	b.n	800efa0 <__kernel_rem_pio2+0x90>
 800efae:	ecbe 5b02 	vldmia	lr!, {d5}
 800efb2:	ed95 6b00 	vldr	d6, [r5]
 800efb6:	3001      	adds	r0, #1
 800efb8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800efbc:	4288      	cmp	r0, r1
 800efbe:	f1a5 0508 	sub.w	r5, r5, #8
 800efc2:	ddf4      	ble.n	800efae <__kernel_rem_pio2+0x9e>
 800efc4:	eca8 7b02 	vstmia	r8!, {d7}
 800efc8:	3208      	adds	r2, #8
 800efca:	3601      	adds	r6, #1
 800efcc:	e7d5      	b.n	800ef7a <__kernel_rem_pio2+0x6a>
 800efce:	aa04      	add	r2, sp, #16
 800efd0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800f250 <__kernel_rem_pio2+0x340>
 800efd4:	ed9f aba0 	vldr	d10, [pc, #640]	; 800f258 <__kernel_rem_pio2+0x348>
 800efd8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800efdc:	9201      	str	r2, [sp, #4]
 800efde:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800efe2:	464e      	mov	r6, r9
 800efe4:	ab90      	add	r3, sp, #576	; 0x240
 800efe6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800efea:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800efee:	ab04      	add	r3, sp, #16
 800eff0:	4618      	mov	r0, r3
 800eff2:	4632      	mov	r2, r6
 800eff4:	2a00      	cmp	r2, #0
 800eff6:	dc4e      	bgt.n	800f096 <__kernel_rem_pio2+0x186>
 800eff8:	4620      	mov	r0, r4
 800effa:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800effe:	f000 fad3 	bl	800f5a8 <scalbn>
 800f002:	eeb0 8b40 	vmov.f64	d8, d0
 800f006:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800f00a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f00e:	f000 fa57 	bl	800f4c0 <floor>
 800f012:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800f016:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f01a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f01e:	2c00      	cmp	r4, #0
 800f020:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800f024:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800f028:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f02c:	ee17 8a90 	vmov	r8, s15
 800f030:	dd46      	ble.n	800f0c0 <__kernel_rem_pio2+0x1b0>
 800f032:	1e70      	subs	r0, r6, #1
 800f034:	aa04      	add	r2, sp, #16
 800f036:	f1c4 0c18 	rsb	ip, r4, #24
 800f03a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800f03e:	fa45 f20c 	asr.w	r2, r5, ip
 800f042:	4490      	add	r8, r2
 800f044:	fa02 f20c 	lsl.w	r2, r2, ip
 800f048:	1aad      	subs	r5, r5, r2
 800f04a:	aa04      	add	r2, sp, #16
 800f04c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800f050:	f1c4 0217 	rsb	r2, r4, #23
 800f054:	4115      	asrs	r5, r2
 800f056:	2d00      	cmp	r5, #0
 800f058:	dd41      	ble.n	800f0de <__kernel_rem_pio2+0x1ce>
 800f05a:	f04f 0c00 	mov.w	ip, #0
 800f05e:	f108 0801 	add.w	r8, r8, #1
 800f062:	4660      	mov	r0, ip
 800f064:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800f068:	4566      	cmp	r6, ip
 800f06a:	dc69      	bgt.n	800f140 <__kernel_rem_pio2+0x230>
 800f06c:	2c00      	cmp	r4, #0
 800f06e:	dd03      	ble.n	800f078 <__kernel_rem_pio2+0x168>
 800f070:	2c01      	cmp	r4, #1
 800f072:	d076      	beq.n	800f162 <__kernel_rem_pio2+0x252>
 800f074:	2c02      	cmp	r4, #2
 800f076:	d07f      	beq.n	800f178 <__kernel_rem_pio2+0x268>
 800f078:	2d02      	cmp	r5, #2
 800f07a:	d130      	bne.n	800f0de <__kernel_rem_pio2+0x1ce>
 800f07c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f080:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f084:	b358      	cbz	r0, 800f0de <__kernel_rem_pio2+0x1ce>
 800f086:	4620      	mov	r0, r4
 800f088:	9102      	str	r1, [sp, #8]
 800f08a:	f000 fa8d 	bl	800f5a8 <scalbn>
 800f08e:	9902      	ldr	r1, [sp, #8]
 800f090:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f094:	e023      	b.n	800f0de <__kernel_rem_pio2+0x1ce>
 800f096:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f09a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f09e:	3a01      	subs	r2, #1
 800f0a0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f0a4:	ad68      	add	r5, sp, #416	; 0x1a0
 800f0a6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f0aa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f0ae:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800f0b2:	eca0 0a01 	vstmia	r0!, {s0}
 800f0b6:	ed95 0b00 	vldr	d0, [r5]
 800f0ba:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f0be:	e799      	b.n	800eff4 <__kernel_rem_pio2+0xe4>
 800f0c0:	d105      	bne.n	800f0ce <__kernel_rem_pio2+0x1be>
 800f0c2:	1e72      	subs	r2, r6, #1
 800f0c4:	a804      	add	r0, sp, #16
 800f0c6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800f0ca:	15ed      	asrs	r5, r5, #23
 800f0cc:	e7c3      	b.n	800f056 <__kernel_rem_pio2+0x146>
 800f0ce:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f0d2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0da:	da2f      	bge.n	800f13c <__kernel_rem_pio2+0x22c>
 800f0dc:	2500      	movs	r5, #0
 800f0de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e6:	f040 8087 	bne.w	800f1f8 <__kernel_rem_pio2+0x2e8>
 800f0ea:	1e73      	subs	r3, r6, #1
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f04f 0c00 	mov.w	ip, #0
 800f0f2:	4548      	cmp	r0, r9
 800f0f4:	da47      	bge.n	800f186 <__kernel_rem_pio2+0x276>
 800f0f6:	f1bc 0f00 	cmp.w	ip, #0
 800f0fa:	d070      	beq.n	800f1de <__kernel_rem_pio2+0x2ce>
 800f0fc:	aa04      	add	r2, sp, #16
 800f0fe:	3c18      	subs	r4, #24
 800f100:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f104:	2a00      	cmp	r2, #0
 800f106:	d075      	beq.n	800f1f4 <__kernel_rem_pio2+0x2e4>
 800f108:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f10c:	4620      	mov	r0, r4
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	f000 fa4a 	bl	800f5a8 <scalbn>
 800f114:	9b00      	ldr	r3, [sp, #0]
 800f116:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800f250 <__kernel_rem_pio2+0x340>
 800f11a:	461a      	mov	r2, r3
 800f11c:	2a00      	cmp	r2, #0
 800f11e:	f280 80ac 	bge.w	800f27a <__kernel_rem_pio2+0x36a>
 800f122:	4619      	mov	r1, r3
 800f124:	2000      	movs	r0, #0
 800f126:	2900      	cmp	r1, #0
 800f128:	f2c0 80cd 	blt.w	800f2c6 <__kernel_rem_pio2+0x3b6>
 800f12c:	aa68      	add	r2, sp, #416	; 0x1a0
 800f12e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800f132:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800f248 <__kernel_rem_pio2+0x338>
 800f136:	4e4b      	ldr	r6, [pc, #300]	; (800f264 <__kernel_rem_pio2+0x354>)
 800f138:	2200      	movs	r2, #0
 800f13a:	e0b8      	b.n	800f2ae <__kernel_rem_pio2+0x39e>
 800f13c:	2502      	movs	r5, #2
 800f13e:	e78c      	b.n	800f05a <__kernel_rem_pio2+0x14a>
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	b948      	cbnz	r0, 800f158 <__kernel_rem_pio2+0x248>
 800f144:	b11a      	cbz	r2, 800f14e <__kernel_rem_pio2+0x23e>
 800f146:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800f14a:	601a      	str	r2, [r3, #0]
 800f14c:	2201      	movs	r2, #1
 800f14e:	f10c 0c01 	add.w	ip, ip, #1
 800f152:	3304      	adds	r3, #4
 800f154:	4610      	mov	r0, r2
 800f156:	e787      	b.n	800f068 <__kernel_rem_pio2+0x158>
 800f158:	ebae 0202 	sub.w	r2, lr, r2
 800f15c:	601a      	str	r2, [r3, #0]
 800f15e:	4602      	mov	r2, r0
 800f160:	e7f5      	b.n	800f14e <__kernel_rem_pio2+0x23e>
 800f162:	1e72      	subs	r2, r6, #1
 800f164:	ab04      	add	r3, sp, #16
 800f166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f16a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f16e:	f10d 0c10 	add.w	ip, sp, #16
 800f172:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800f176:	e77f      	b.n	800f078 <__kernel_rem_pio2+0x168>
 800f178:	1e72      	subs	r2, r6, #1
 800f17a:	ab04      	add	r3, sp, #16
 800f17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f180:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f184:	e7f3      	b.n	800f16e <__kernel_rem_pio2+0x25e>
 800f186:	aa04      	add	r2, sp, #16
 800f188:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800f18c:	3801      	subs	r0, #1
 800f18e:	ea4c 0c02 	orr.w	ip, ip, r2
 800f192:	e7ae      	b.n	800f0f2 <__kernel_rem_pio2+0x1e2>
 800f194:	3001      	adds	r0, #1
 800f196:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f19a:	2a00      	cmp	r2, #0
 800f19c:	d0fa      	beq.n	800f194 <__kernel_rem_pio2+0x284>
 800f19e:	eb06 020b 	add.w	r2, r6, fp
 800f1a2:	ad18      	add	r5, sp, #96	; 0x60
 800f1a4:	1c73      	adds	r3, r6, #1
 800f1a6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800f1aa:	4406      	add	r6, r0
 800f1ac:	429e      	cmp	r6, r3
 800f1ae:	f6ff af19 	blt.w	800efe4 <__kernel_rem_pio2+0xd4>
 800f1b2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800f1b6:	9d00      	ldr	r5, [sp, #0]
 800f1b8:	ee07 0a90 	vmov	s15, r0
 800f1bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	eca2 7b02 	vstmia	r2!, {d7}
 800f1c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f248 <__kernel_rem_pio2+0x338>
 800f1ca:	4694      	mov	ip, r2
 800f1cc:	4288      	cmp	r0, r1
 800f1ce:	dd09      	ble.n	800f1e4 <__kernel_rem_pio2+0x2d4>
 800f1d0:	a868      	add	r0, sp, #416	; 0x1a0
 800f1d2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800f1d6:	ed80 7b00 	vstr	d7, [r0]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	e7e6      	b.n	800f1ac <__kernel_rem_pio2+0x29c>
 800f1de:	9b01      	ldr	r3, [sp, #4]
 800f1e0:	2001      	movs	r0, #1
 800f1e2:	e7d8      	b.n	800f196 <__kernel_rem_pio2+0x286>
 800f1e4:	ecb5 5b02 	vldmia	r5!, {d5}
 800f1e8:	ed3c 6b02 	vldmdb	ip!, {d6}
 800f1ec:	3001      	adds	r0, #1
 800f1ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f1f2:	e7eb      	b.n	800f1cc <__kernel_rem_pio2+0x2bc>
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	e781      	b.n	800f0fc <__kernel_rem_pio2+0x1ec>
 800f1f8:	4260      	negs	r0, r4
 800f1fa:	eeb0 0b48 	vmov.f64	d0, d8
 800f1fe:	f000 f9d3 	bl	800f5a8 <scalbn>
 800f202:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800f258 <__kernel_rem_pio2+0x348>
 800f206:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20e:	db2b      	blt.n	800f268 <__kernel_rem_pio2+0x358>
 800f210:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800f250 <__kernel_rem_pio2+0x340>
 800f214:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f218:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f21c:	aa04      	add	r2, sp, #16
 800f21e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f222:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f226:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f22a:	a904      	add	r1, sp, #16
 800f22c:	ee10 3a10 	vmov	r3, s0
 800f230:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f234:	ee17 2a10 	vmov	r2, s14
 800f238:	1c73      	adds	r3, r6, #1
 800f23a:	3418      	adds	r4, #24
 800f23c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f240:	e762      	b.n	800f108 <__kernel_rem_pio2+0x1f8>
 800f242:	bf00      	nop
 800f244:	f3af 8000 	nop.w
	...
 800f254:	3e700000 	.word	0x3e700000
 800f258:	00000000 	.word	0x00000000
 800f25c:	41700000 	.word	0x41700000
 800f260:	0800fcd0 	.word	0x0800fcd0
 800f264:	0800fc90 	.word	0x0800fc90
 800f268:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f26c:	aa04      	add	r2, sp, #16
 800f26e:	ee10 3a10 	vmov	r3, s0
 800f272:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f276:	4633      	mov	r3, r6
 800f278:	e746      	b.n	800f108 <__kernel_rem_pio2+0x1f8>
 800f27a:	a804      	add	r0, sp, #16
 800f27c:	a968      	add	r1, sp, #416	; 0x1a0
 800f27e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f282:	9000      	str	r0, [sp, #0]
 800f284:	ee07 0a90 	vmov	s15, r0
 800f288:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f28c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f290:	3a01      	subs	r2, #1
 800f292:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f296:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f29a:	ed81 7b00 	vstr	d7, [r1]
 800f29e:	e73d      	b.n	800f11c <__kernel_rem_pio2+0x20c>
 800f2a0:	ecb6 5b02 	vldmia	r6!, {d5}
 800f2a4:	ecb4 6b02 	vldmia	r4!, {d6}
 800f2a8:	3201      	adds	r2, #1
 800f2aa:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f2ae:	454a      	cmp	r2, r9
 800f2b0:	dc01      	bgt.n	800f2b6 <__kernel_rem_pio2+0x3a6>
 800f2b2:	4290      	cmp	r0, r2
 800f2b4:	daf4      	bge.n	800f2a0 <__kernel_rem_pio2+0x390>
 800f2b6:	aa40      	add	r2, sp, #256	; 0x100
 800f2b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f2bc:	ed82 7b00 	vstr	d7, [r2]
 800f2c0:	3901      	subs	r1, #1
 800f2c2:	3001      	adds	r0, #1
 800f2c4:	e72f      	b.n	800f126 <__kernel_rem_pio2+0x216>
 800f2c6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800f2c8:	2a02      	cmp	r2, #2
 800f2ca:	dc0a      	bgt.n	800f2e2 <__kernel_rem_pio2+0x3d2>
 800f2cc:	2a00      	cmp	r2, #0
 800f2ce:	dc5a      	bgt.n	800f386 <__kernel_rem_pio2+0x476>
 800f2d0:	d039      	beq.n	800f346 <__kernel_rem_pio2+0x436>
 800f2d2:	f008 0007 	and.w	r0, r8, #7
 800f2d6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800f2da:	ecbd 8b06 	vpop	{d8-d10}
 800f2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2e2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800f2e4:	2a03      	cmp	r2, #3
 800f2e6:	d1f4      	bne.n	800f2d2 <__kernel_rem_pio2+0x3c2>
 800f2e8:	aa40      	add	r2, sp, #256	; 0x100
 800f2ea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f2ee:	4611      	mov	r1, r2
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	f1a1 0108 	sub.w	r1, r1, #8
 800f2f8:	dc52      	bgt.n	800f3a0 <__kernel_rem_pio2+0x490>
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	2901      	cmp	r1, #1
 800f2fe:	f1a2 0208 	sub.w	r2, r2, #8
 800f302:	dc5d      	bgt.n	800f3c0 <__kernel_rem_pio2+0x4b0>
 800f304:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800f408 <__kernel_rem_pio2+0x4f8>
 800f308:	2b01      	cmp	r3, #1
 800f30a:	dc69      	bgt.n	800f3e0 <__kernel_rem_pio2+0x4d0>
 800f30c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800f310:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800f314:	2d00      	cmp	r5, #0
 800f316:	d16c      	bne.n	800f3f2 <__kernel_rem_pio2+0x4e2>
 800f318:	ed87 5b00 	vstr	d5, [r7]
 800f31c:	ed87 6b02 	vstr	d6, [r7, #8]
 800f320:	ed87 7b04 	vstr	d7, [r7, #16]
 800f324:	e7d5      	b.n	800f2d2 <__kernel_rem_pio2+0x3c2>
 800f326:	aa40      	add	r2, sp, #256	; 0x100
 800f328:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f32c:	ed92 6b00 	vldr	d6, [r2]
 800f330:	3b01      	subs	r3, #1
 800f332:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f336:	2b00      	cmp	r3, #0
 800f338:	daf5      	bge.n	800f326 <__kernel_rem_pio2+0x416>
 800f33a:	b10d      	cbz	r5, 800f340 <__kernel_rem_pio2+0x430>
 800f33c:	eeb1 7b47 	vneg.f64	d7, d7
 800f340:	ed87 7b00 	vstr	d7, [r7]
 800f344:	e7c5      	b.n	800f2d2 <__kernel_rem_pio2+0x3c2>
 800f346:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f408 <__kernel_rem_pio2+0x4f8>
 800f34a:	e7f4      	b.n	800f336 <__kernel_rem_pio2+0x426>
 800f34c:	a940      	add	r1, sp, #256	; 0x100
 800f34e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f352:	ed91 7b00 	vldr	d7, [r1]
 800f356:	3a01      	subs	r2, #1
 800f358:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f35c:	2a00      	cmp	r2, #0
 800f35e:	daf5      	bge.n	800f34c <__kernel_rem_pio2+0x43c>
 800f360:	b1ad      	cbz	r5, 800f38e <__kernel_rem_pio2+0x47e>
 800f362:	eeb1 7b46 	vneg.f64	d7, d6
 800f366:	ed87 7b00 	vstr	d7, [r7]
 800f36a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800f36e:	a942      	add	r1, sp, #264	; 0x108
 800f370:	2201      	movs	r2, #1
 800f372:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f376:	4293      	cmp	r3, r2
 800f378:	da0c      	bge.n	800f394 <__kernel_rem_pio2+0x484>
 800f37a:	b10d      	cbz	r5, 800f380 <__kernel_rem_pio2+0x470>
 800f37c:	eeb1 7b47 	vneg.f64	d7, d7
 800f380:	ed87 7b02 	vstr	d7, [r7, #8]
 800f384:	e7a5      	b.n	800f2d2 <__kernel_rem_pio2+0x3c2>
 800f386:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800f408 <__kernel_rem_pio2+0x4f8>
 800f38a:	461a      	mov	r2, r3
 800f38c:	e7e6      	b.n	800f35c <__kernel_rem_pio2+0x44c>
 800f38e:	eeb0 7b46 	vmov.f64	d7, d6
 800f392:	e7e8      	b.n	800f366 <__kernel_rem_pio2+0x456>
 800f394:	ecb1 6b02 	vldmia	r1!, {d6}
 800f398:	3201      	adds	r2, #1
 800f39a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f39e:	e7ea      	b.n	800f376 <__kernel_rem_pio2+0x466>
 800f3a0:	ed91 7b00 	vldr	d7, [r1]
 800f3a4:	ed91 5b02 	vldr	d5, [r1, #8]
 800f3a8:	3801      	subs	r0, #1
 800f3aa:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f3ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f3b2:	ed81 6b00 	vstr	d6, [r1]
 800f3b6:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f3ba:	ed81 7b02 	vstr	d7, [r1, #8]
 800f3be:	e798      	b.n	800f2f2 <__kernel_rem_pio2+0x3e2>
 800f3c0:	ed92 7b00 	vldr	d7, [r2]
 800f3c4:	ed92 5b02 	vldr	d5, [r2, #8]
 800f3c8:	3901      	subs	r1, #1
 800f3ca:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f3ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f3d2:	ed82 6b00 	vstr	d6, [r2]
 800f3d6:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f3da:	ed82 7b02 	vstr	d7, [r2, #8]
 800f3de:	e78d      	b.n	800f2fc <__kernel_rem_pio2+0x3ec>
 800f3e0:	aa40      	add	r2, sp, #256	; 0x100
 800f3e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f3e6:	ed92 6b00 	vldr	d6, [r2]
 800f3ea:	3b01      	subs	r3, #1
 800f3ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f3f0:	e78a      	b.n	800f308 <__kernel_rem_pio2+0x3f8>
 800f3f2:	eeb1 5b45 	vneg.f64	d5, d5
 800f3f6:	eeb1 6b46 	vneg.f64	d6, d6
 800f3fa:	ed87 5b00 	vstr	d5, [r7]
 800f3fe:	eeb1 7b47 	vneg.f64	d7, d7
 800f402:	ed87 6b02 	vstr	d6, [r7, #8]
 800f406:	e78b      	b.n	800f320 <__kernel_rem_pio2+0x410>
	...

0800f410 <__kernel_sin>:
 800f410:	ee10 3a90 	vmov	r3, s1
 800f414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f418:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f41c:	da04      	bge.n	800f428 <__kernel_sin+0x18>
 800f41e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800f422:	ee17 3a90 	vmov	r3, s15
 800f426:	b35b      	cbz	r3, 800f480 <__kernel_sin+0x70>
 800f428:	ee20 6b00 	vmul.f64	d6, d0, d0
 800f42c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800f430:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f488 <__kernel_sin+0x78>
 800f434:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f490 <__kernel_sin+0x80>
 800f438:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f43c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f498 <__kernel_sin+0x88>
 800f440:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f444:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f4a0 <__kernel_sin+0x90>
 800f448:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f44c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f4a8 <__kernel_sin+0x98>
 800f450:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f454:	b930      	cbnz	r0, 800f464 <__kernel_sin+0x54>
 800f456:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f4b0 <__kernel_sin+0xa0>
 800f45a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f45e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800f462:	4770      	bx	lr
 800f464:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f468:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f46c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800f470:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800f474:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f4b8 <__kernel_sin+0xa8>
 800f478:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f47c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	f3af 8000 	nop.w
 800f488:	5acfd57c 	.word	0x5acfd57c
 800f48c:	3de5d93a 	.word	0x3de5d93a
 800f490:	8a2b9ceb 	.word	0x8a2b9ceb
 800f494:	be5ae5e6 	.word	0xbe5ae5e6
 800f498:	57b1fe7d 	.word	0x57b1fe7d
 800f49c:	3ec71de3 	.word	0x3ec71de3
 800f4a0:	19c161d5 	.word	0x19c161d5
 800f4a4:	bf2a01a0 	.word	0xbf2a01a0
 800f4a8:	1110f8a6 	.word	0x1110f8a6
 800f4ac:	3f811111 	.word	0x3f811111
 800f4b0:	55555549 	.word	0x55555549
 800f4b4:	bfc55555 	.word	0xbfc55555
 800f4b8:	55555549 	.word	0x55555549
 800f4bc:	3fc55555 	.word	0x3fc55555

0800f4c0 <floor>:
 800f4c0:	ee10 1a90 	vmov	r1, s1
 800f4c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4c8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f4cc:	2b13      	cmp	r3, #19
 800f4ce:	b530      	push	{r4, r5, lr}
 800f4d0:	ee10 0a10 	vmov	r0, s0
 800f4d4:	ee10 5a10 	vmov	r5, s0
 800f4d8:	dc31      	bgt.n	800f53e <floor+0x7e>
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	da15      	bge.n	800f50a <floor+0x4a>
 800f4de:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f598 <floor+0xd8>
 800f4e2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f4e6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ee:	dd07      	ble.n	800f500 <floor+0x40>
 800f4f0:	2900      	cmp	r1, #0
 800f4f2:	da4e      	bge.n	800f592 <floor+0xd2>
 800f4f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f4f8:	4318      	orrs	r0, r3
 800f4fa:	d001      	beq.n	800f500 <floor+0x40>
 800f4fc:	4928      	ldr	r1, [pc, #160]	; (800f5a0 <floor+0xe0>)
 800f4fe:	2000      	movs	r0, #0
 800f500:	460b      	mov	r3, r1
 800f502:	4602      	mov	r2, r0
 800f504:	ec43 2b10 	vmov	d0, r2, r3
 800f508:	e020      	b.n	800f54c <floor+0x8c>
 800f50a:	4a26      	ldr	r2, [pc, #152]	; (800f5a4 <floor+0xe4>)
 800f50c:	411a      	asrs	r2, r3
 800f50e:	ea01 0402 	and.w	r4, r1, r2
 800f512:	4304      	orrs	r4, r0
 800f514:	d01a      	beq.n	800f54c <floor+0x8c>
 800f516:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f598 <floor+0xd8>
 800f51a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f51e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f526:	ddeb      	ble.n	800f500 <floor+0x40>
 800f528:	2900      	cmp	r1, #0
 800f52a:	bfbe      	ittt	lt
 800f52c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f530:	fa40 f303 	asrlt.w	r3, r0, r3
 800f534:	18c9      	addlt	r1, r1, r3
 800f536:	ea21 0102 	bic.w	r1, r1, r2
 800f53a:	2000      	movs	r0, #0
 800f53c:	e7e0      	b.n	800f500 <floor+0x40>
 800f53e:	2b33      	cmp	r3, #51	; 0x33
 800f540:	dd05      	ble.n	800f54e <floor+0x8e>
 800f542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f546:	d101      	bne.n	800f54c <floor+0x8c>
 800f548:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f54c:	bd30      	pop	{r4, r5, pc}
 800f54e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f552:	f04f 32ff 	mov.w	r2, #4294967295
 800f556:	40e2      	lsrs	r2, r4
 800f558:	4202      	tst	r2, r0
 800f55a:	d0f7      	beq.n	800f54c <floor+0x8c>
 800f55c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f598 <floor+0xd8>
 800f560:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f564:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56c:	ddc8      	ble.n	800f500 <floor+0x40>
 800f56e:	2900      	cmp	r1, #0
 800f570:	da02      	bge.n	800f578 <floor+0xb8>
 800f572:	2b14      	cmp	r3, #20
 800f574:	d103      	bne.n	800f57e <floor+0xbe>
 800f576:	3101      	adds	r1, #1
 800f578:	ea20 0002 	bic.w	r0, r0, r2
 800f57c:	e7c0      	b.n	800f500 <floor+0x40>
 800f57e:	2401      	movs	r4, #1
 800f580:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f584:	fa04 f303 	lsl.w	r3, r4, r3
 800f588:	4418      	add	r0, r3
 800f58a:	42a8      	cmp	r0, r5
 800f58c:	bf38      	it	cc
 800f58e:	1909      	addcc	r1, r1, r4
 800f590:	e7f2      	b.n	800f578 <floor+0xb8>
 800f592:	2000      	movs	r0, #0
 800f594:	4601      	mov	r1, r0
 800f596:	e7b3      	b.n	800f500 <floor+0x40>
 800f598:	8800759c 	.word	0x8800759c
 800f59c:	7e37e43c 	.word	0x7e37e43c
 800f5a0:	bff00000 	.word	0xbff00000
 800f5a4:	000fffff 	.word	0x000fffff

0800f5a8 <scalbn>:
 800f5a8:	b082      	sub	sp, #8
 800f5aa:	ed8d 0b00 	vstr	d0, [sp]
 800f5ae:	9b01      	ldr	r3, [sp, #4]
 800f5b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f5b4:	b9a2      	cbnz	r2, 800f5e0 <scalbn+0x38>
 800f5b6:	9a00      	ldr	r2, [sp, #0]
 800f5b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	d03a      	beq.n	800f636 <scalbn+0x8e>
 800f5c0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f698 <scalbn+0xf0>
 800f5c4:	4b40      	ldr	r3, [pc, #256]	; (800f6c8 <scalbn+0x120>)
 800f5c6:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f5ca:	4298      	cmp	r0, r3
 800f5cc:	ed8d 7b00 	vstr	d7, [sp]
 800f5d0:	da11      	bge.n	800f5f6 <scalbn+0x4e>
 800f5d2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800f6a0 <scalbn+0xf8>
 800f5d6:	ed9d 6b00 	vldr	d6, [sp]
 800f5da:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f5de:	e007      	b.n	800f5f0 <scalbn+0x48>
 800f5e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f5e4:	428a      	cmp	r2, r1
 800f5e6:	d10a      	bne.n	800f5fe <scalbn+0x56>
 800f5e8:	ed9d 7b00 	vldr	d7, [sp]
 800f5ec:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f5f0:	ed8d 7b00 	vstr	d7, [sp]
 800f5f4:	e01f      	b.n	800f636 <scalbn+0x8e>
 800f5f6:	9b01      	ldr	r3, [sp, #4]
 800f5f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f5fc:	3a36      	subs	r2, #54	; 0x36
 800f5fe:	4402      	add	r2, r0
 800f600:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f604:	428a      	cmp	r2, r1
 800f606:	dd0a      	ble.n	800f61e <scalbn+0x76>
 800f608:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f6a8 <scalbn+0x100>
 800f60c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f6b0 <scalbn+0x108>
 800f610:	eeb0 6b47 	vmov.f64	d6, d7
 800f614:	9b01      	ldr	r3, [sp, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f61c:	e7dd      	b.n	800f5da <scalbn+0x32>
 800f61e:	2a00      	cmp	r2, #0
 800f620:	dd0d      	ble.n	800f63e <scalbn+0x96>
 800f622:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f626:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f62a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f62e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f632:	e9cd 0100 	strd	r0, r1, [sp]
 800f636:	ed9d 0b00 	vldr	d0, [sp]
 800f63a:	b002      	add	sp, #8
 800f63c:	4770      	bx	lr
 800f63e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f642:	da18      	bge.n	800f676 <scalbn+0xce>
 800f644:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f648:	4298      	cmp	r0, r3
 800f64a:	9b01      	ldr	r3, [sp, #4]
 800f64c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f650:	dd09      	ble.n	800f666 <scalbn+0xbe>
 800f652:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f6a8 <scalbn+0x100>
 800f656:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800f6b0 <scalbn+0x108>
 800f65a:	eeb0 6b47 	vmov.f64	d6, d7
 800f65e:	2b00      	cmp	r3, #0
 800f660:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800f664:	e7b9      	b.n	800f5da <scalbn+0x32>
 800f666:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f6a0 <scalbn+0xf8>
 800f66a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800f6b8 <scalbn+0x110>
 800f66e:	eeb0 6b47 	vmov.f64	d6, d7
 800f672:	2b00      	cmp	r3, #0
 800f674:	e7f4      	b.n	800f660 <scalbn+0xb8>
 800f676:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f67a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f67e:	3236      	adds	r2, #54	; 0x36
 800f680:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f684:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f688:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800f6c0 <scalbn+0x118>
 800f68c:	ec41 0b17 	vmov	d7, r0, r1
 800f690:	e7a3      	b.n	800f5da <scalbn+0x32>
 800f692:	bf00      	nop
 800f694:	f3af 8000 	nop.w
 800f698:	00000000 	.word	0x00000000
 800f69c:	43500000 	.word	0x43500000
 800f6a0:	c2f8f359 	.word	0xc2f8f359
 800f6a4:	01a56e1f 	.word	0x01a56e1f
 800f6a8:	8800759c 	.word	0x8800759c
 800f6ac:	7e37e43c 	.word	0x7e37e43c
 800f6b0:	8800759c 	.word	0x8800759c
 800f6b4:	fe37e43c 	.word	0xfe37e43c
 800f6b8:	c2f8f359 	.word	0xc2f8f359
 800f6bc:	81a56e1f 	.word	0x81a56e1f
 800f6c0:	00000000 	.word	0x00000000
 800f6c4:	3c900000 	.word	0x3c900000
 800f6c8:	ffff3cb0 	.word	0xffff3cb0

0800f6cc <_init>:
 800f6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ce:	bf00      	nop
 800f6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6d2:	bc08      	pop	{r3}
 800f6d4:	469e      	mov	lr, r3
 800f6d6:	4770      	bx	lr

0800f6d8 <_fini>:
 800f6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6da:	bf00      	nop
 800f6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6de:	bc08      	pop	{r3}
 800f6e0:	469e      	mov	lr, r3
 800f6e2:	4770      	bx	lr
