
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001496c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08014c40  08014c40  00024c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015238  08015238  00025238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015240  08015240  00025240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015244  08015244  00025244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08015248  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c8c  240001e0  08015428  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e6c  08015428  00030e6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039022  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005a3e  00000000  00000000  00069230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ab0  00000000  00000000  0006ec70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018b8  00000000  00000000  00070720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039d29  00000000  00000000  00071fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000283ba  00000000  00000000  000abd01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016df3d  00000000  00000000  000d40bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00241ff8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007fa0  00000000  00000000  0024204c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014c24 	.word	0x08014c24

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	08014c24 	.word	0x08014c24

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include "AMT21.h"

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->prev_position = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	821a      	strh	r2, [r3, #16]
	dev->k0 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	749a      	strb	r2, [r3, #18]
	dev->k1 = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	74da      	strb	r2, [r3, #19]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f00a fdd5 	bl	800b2cc <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
			//1, 100);
	HAL_UART_Transmit(dev->uartHandle, &(dev->address),
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 010a 	add.w	r1, r3, #10
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	f00f f8e4 	bl	800f8fc <HAL_UART_Transmit>
				1, 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6858      	ldr	r0, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	891b      	ldrh	r3, [r3, #8]
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	f00a fdc4 	bl	800b2cc <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 010c 	add.w	r1, r3, #12
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2202      	movs	r2, #2
 8000752:	f00f f969 	bl	800fa28 <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x4000) == 0x4000;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	749a      	strb	r2, [r3, #18]
	dev->k1 = (dev->uart_buf & 0x8000) == 0x8000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	0bdb      	lsrs	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	74da      	strb	r2, [r3, #19]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AMT21_set_zero>:

void AMT21_set_zero(AMT21 *dev) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	 AMT21_set_zero does set encoder to zero position.

	 :param dev = AMT21 struct
	 :return: None
	 */
	uint8_t set_zero_command[2] = {(dev->address + 0x02), AMT21_SET_ZERO};
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7a9b      	ldrb	r3, [r3, #10]
 8000794:	3302      	adds	r3, #2
 8000796:	b2db      	uxtb	r3, r3
 8000798:	733b      	strb	r3, [r7, #12]
 800079a:	2375      	movs	r3, #117	; 0x75
 800079c:	737b      	strb	r3, [r7, #13]
 	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6858      	ldr	r0, [r3, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	891b      	ldrh	r3, [r3, #8]
 80007a6:	2201      	movs	r2, #1
 80007a8:	4619      	mov	r1, r3
 80007aa:	f00a fd8f 	bl	800b2cc <HAL_GPIO_WritePin>
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f107 010c 	add.w	r1, r7, #12
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2202      	movs	r2, #2
 80007ba:	f00f f89f 	bl	800f8fc <HAL_UART_Transmit>
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6858      	ldr	r0, [r3, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	891b      	ldrh	r3, [r3, #8]
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	f00a fd7f 	bl	800b2cc <HAL_GPIO_WritePin>
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <AMT21_check_value>:
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = dev->uart_buf & 0x3FFF;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80007e6:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = dev->uart_buf & 0x0001;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	899b      	ldrh	r3, [r3, #12]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 1) & 0x0001;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	899b      	ldrh	r3, [r3, #12]
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000804:	2300      	movs	r3, #0
 8000806:	737b      	strb	r3, [r7, #13]
 8000808:	e020      	b.n	800084c <AMT21_check_value+0x76>
		dev->uart_buf = dev->uart_buf >> 2;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	899b      	ldrh	r3, [r3, #12]
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	b29a      	uxth	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	899b      	ldrh	r3, [r3, #12]
 800081a:	b25b      	sxtb	r3, r3
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	b25a      	sxtb	r2, r3
 8000822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000826:	4053      	eors	r3, r2
 8000828:	b25b      	sxtb	r3, r3
 800082a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	899b      	ldrh	r3, [r3, #12]
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	b29b      	uxth	r3, r3
 8000834:	b25b      	sxtb	r3, r3
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	b25a      	sxtb	r2, r3
 800083c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000840:	4053      	eors	r3, r2
 8000842:	b25b      	sxtb	r3, r3
 8000844:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000846:	7b7b      	ldrb	r3, [r7, #13]
 8000848:	3301      	adds	r3, #1
 800084a:	737b      	strb	r3, [r7, #13]
 800084c:	7b7b      	ldrb	r3, [r7, #13]
 800084e:	2b05      	cmp	r3, #5
 8000850:	d9db      	bls.n	800080a <AMT21_check_value+0x34>
	}
	k0_check = !k0_check;
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf0c      	ite	eq
 8000866:	2301      	moveq	r3, #1
 8000868:	2300      	movne	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73bb      	strb	r3, [r7, #14]
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7c9b      	ldrb	r3, [r3, #18]
 8000872:	7bfa      	ldrb	r2, [r7, #15]
 8000874:	429a      	cmp	r2, r3
 8000876:	d109      	bne.n	800088c <AMT21_check_value+0xb6>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7cdb      	ldrb	r3, [r3, #19]
 800087c:	7bba      	ldrb	r2, [r7, #14]
 800087e:	429a      	cmp	r2, r3
 8000880:	d104      	bne.n	800088c <AMT21_check_value+0xb6>
		dev->position = position_temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	897a      	ldrh	r2, [r7, #10]
 8000886:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000888:	2300      	movs	r3, #0
 800088a:	e000      	b.n	800088e <AMT21_check_value+0xb8>
	} else {
		return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
	}
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <AMT21_unwrap>:

int32_t AMT21_unwrap(int32_t pulse, int32_t prev_pulse) {
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	int32_t dPulse = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
	if (pulse - prev_pulse > 8191) {
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b4:	db06      	blt.n	80008c4 <AMT21_unwrap+0x28>
		dPulse = -(16383 - (pulse-prev_pulse));
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	1ad2      	subs	r2, r2, r3
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <AMT21_unwrap+0x5c>)
 80008be:	4413      	add	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e011      	b.n	80008e8 <AMT21_unwrap+0x4c>
	} else if ( pulse -  prev_pulse < -8191) {
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 80008ce:	dc07      	bgt.n	80008e0 <AMT21_unwrap+0x44>
		dPulse = 16383 - (prev_pulse - pulse);
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	1ad2      	subs	r2, r2, r3
 80008d6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008da:	1a9b      	subs	r3, r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e003      	b.n	80008e8 <AMT21_unwrap+0x4c>
	} else {
		dPulse =  pulse -  prev_pulse;
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	60fb      	str	r3, [r7, #12]
	}
	return dPulse;
 80008e8:	68fb      	ldr	r3, [r7, #12]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	ffffc001 	.word	0xffffc001

080008fc <KalmanFilter_initialise>:
 *  Created on: Jan 28, 2022
 *      Author: fame
 */
#include "KalmanFilter.h"

void KalmanFilter_initialise(KalmanFilter *dev, float x1,float x2,float p11,float p12,float p21,float p22, float R, float Q){
 80008fc:	b480      	push	{r7}
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	6278      	str	r0, [r7, #36]	; 0x24
 8000904:	ed87 0a08 	vstr	s0, [r7, #32]
 8000908:	edc7 0a07 	vstr	s1, [r7, #28]
 800090c:	ed87 1a06 	vstr	s2, [r7, #24]
 8000910:	edc7 1a05 	vstr	s3, [r7, #20]
 8000914:	ed87 2a04 	vstr	s4, [r7, #16]
 8000918:	edc7 2a03 	vstr	s5, [r7, #12]
 800091c:	ed87 3a02 	vstr	s6, [r7, #8]
 8000920:	edc7 3a01 	vstr	s7, [r7, #4]
	/* Parameter */
	dev->R = R;
 8000924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	601a      	str	r2, [r3, #0]
	dev->Q = Q;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	605a      	str	r2, [r3, #4]

	/* KF "memory" */
	dev->x1 = x1;
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	6a3a      	ldr	r2, [r7, #32]
 8000934:	609a      	str	r2, [r3, #8]
	dev->x2 = x2;
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	69fa      	ldr	r2, [r7, #28]
 800093a:	60da      	str	r2, [r3, #12]
	dev->p11 = p11;
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	611a      	str	r2, [r3, #16]
	dev->p12 = p12;
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	615a      	str	r2, [r3, #20]
	dev->p21 = p21;
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	619a      	str	r2, [r3, #24]
	dev->p22 = p22;
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	61da      	str	r2, [r3, #28]
}
 8000954:	bf00      	nop
 8000956:	372c      	adds	r7, #44	; 0x2c
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <PIDController_initialise>:
 *  Created on: Jan 21, 2022
 *      Author: fame
 */
#include "PID.h"

void PIDController_initialise(PIDController *pid, float Kp, float Ki, float Kd){
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	ed87 0a02 	vstr	s0, [r7, #8]
 800096c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000970:	ed87 1a00 	vstr	s2, [r7]
	pid->Kp = Kp;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	609a      	str	r2, [r3, #8]
	pid->out = 0;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f04f 0200 	mov.w	r2, #0
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <PIDController_update>:

float PIDController_update(PIDController *pid, float setpoint, float measurement) {
 800099c:	b480      	push	{r7}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80009a8:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measurement;
 80009ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80009b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80009b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b8:	edc7 7a05 	vstr	s15, [r7, #20]
	/*
	 * P term
	 */
	pid->proportional_term = pid->Kp * error;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	ed93 7a00 	vldr	s14, [r3]
 80009c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80009c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	edc3 7a07 	vstr	s15, [r3, #28]

	/*
	 * I term
	 */
	pid->integrator += error;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	ed93 7a08 	vldr	s14, [r3, #32]
 80009d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80009da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->integral_term = pid->Ki * pid->integrator;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80009f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	/*
	 * D term
	 */
	pid->derivative_term = pid->Kd * (error - pid->prevError);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000a06:	edd7 6a05 	vldr	s13, [r7, #20]
 8000a0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	pid->prevError = error;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
	/*
	 * Calculate a final value
	 */
	pid->out = pid->proportional_term + pid->integral_term + pid->derivative_term;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	ed93 7a07 	vldr	s14, [r3, #28]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000a2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	if (pid->out > 2500){
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000a44:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000a8c <PIDController_update+0xf0>
 8000a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a50:	dd03      	ble.n	8000a5a <PIDController_update+0xbe>
		pid->out = 2500;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <PIDController_update+0xf4>)
 8000a56:	631a      	str	r2, [r3, #48]	; 0x30
 8000a58:	e00c      	b.n	8000a74 <PIDController_update+0xd8>
	}
	else if(pid->out < -2500){
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000a60:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000a94 <PIDController_update+0xf8>
 8000a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6c:	d502      	bpl.n	8000a74 <PIDController_update+0xd8>
		pid->out = -2500;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <PIDController_update+0xfc>)
 8000a72:	631a      	str	r2, [r3, #48]	; 0x30
	}
	return pid->out;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	ee07 3a90 	vmov	s15, r3
}
 8000a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a80:	371c      	adds	r7, #28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	451c4000 	.word	0x451c4000
 8000a90:	451c4000 	.word	0x451c4000
 8000a94:	c51c4000 	.word	0xc51c4000
 8000a98:	c51c4000 	.word	0xc51c4000

08000a9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2224      	movs	r2, #36	; 0x24
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f010 fe53 	bl	8011760 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aba:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000abc:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <MX_ADC1_Init+0xe8>)
 8000abe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000acc:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b18:	4819      	ldr	r0, [pc, #100]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b1a:	f008 f9ab 	bl	8008e74 <HAL_ADC_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000b24:	f006 f898 	bl	8006c58 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	4813      	ldr	r0, [pc, #76]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b34:	f009 f9e4 	bl	8009f00 <HAL_ADCEx_MultiModeConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b3e:	f006 f88b 	bl	8006c58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_ADC1_Init+0xec>)
 8000b44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b46:	2306      	movs	r3, #6
 8000b48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b4e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b52:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b54:	2304      	movs	r3, #4
 8000b56:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b68:	f008 fb8c 	bl	8009284 <HAL_ADC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000b72:	f006 f871 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3730      	adds	r7, #48	; 0x30
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2400036c 	.word	0x2400036c
 8000b84:	40022000 	.word	0x40022000
 8000b88:	2a000400 	.word	0x2a000400

08000b8c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2224      	movs	r2, #36	; 0x24
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f010 fde1 	bl	8011760 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b9e:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000ba0:	4a30      	ldr	r2, [pc, #192]	; (8000c64 <MX_ADC3_Init+0xd8>)
 8000ba2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ba4:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bb8:	2204      	movs	r2, #4
 8000bba:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c0a:	4815      	ldr	r0, [pc, #84]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000c0c:	f008 f932 	bl	8008e74 <HAL_ADC_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000c16:	f006 f81f 	bl	8006c58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_ADC3_Init+0xdc>)
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1e:	2306      	movs	r3, #6
 8000c20:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 8000c22:	2302      	movs	r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c26:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c2a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_ADC3_Init+0xd4>)
 8000c4a:	f008 fb1b 	bl	8009284 <HAL_ADC_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000c54:	f006 f800 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	240003dc 	.word	0x240003dc
 8000c64:	58026000 	.word	0x58026000
 8000c68:	c7520000 	.word	0xc7520000

08000c6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <HAL_ADC_MspInit+0xa8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12a      	bne.n	8000ce4 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000c90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c94:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000c96:	f043 0320 	orr.w	r3, r3, #32
 8000c9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca4:	f003 0320 	and.w	r3, r3, #32
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480f      	ldr	r0, [pc, #60]	; (8000d1c <HAL_ADC_MspInit+0xb0>)
 8000cde:	f00a f94d 	bl	800af7c <HAL_GPIO_Init>
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000ce2:	e013      	b.n	8000d0c <HAL_ADC_MspInit+0xa0>
  else if(adcHandle->Instance==ADC3)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_ADC_MspInit+0xb4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10e      	bne.n	8000d0c <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_ADC_MspInit+0xac>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40022000 	.word	0x40022000
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58020800 	.word	0x58020800
 8000d20:	58026000 	.word	0x58026000

08000d24 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d2a:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <MX_CRC_Init+0x54>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d3c:	221d      	movs	r2, #29
 8000d3e:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d42:	2210      	movs	r2, #16
 8000d44:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d48:	22c4      	movs	r2, #196	; 0xc4
 8000d4a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_CRC_Init+0x50>)
 8000d60:	f009 fac0 	bl	800a2e4 <HAL_CRC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000d6a:	f005 ff75 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2400044c 	.word	0x2400044c
 8000d78:	58024c00 	.word	0x58024c00

08000d7c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_CRC_MspInit+0x3c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10e      	bne.n	8000dac <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_CRC_MspInit+0x40>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <HAL_CRC_MspInit+0x40>)
 8000d96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_CRC_MspInit+0x40>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58024c00 	.word	0x58024c00
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	4b62      	ldr	r3, [pc, #392]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	4a60      	ldr	r2, [pc, #384]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de6:	4b5e      	ldr	r3, [pc, #376]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	4b5a      	ldr	r3, [pc, #360]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	4a59      	ldr	r2, [pc, #356]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e04:	4b56      	ldr	r3, [pc, #344]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	4b53      	ldr	r3, [pc, #332]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a51      	ldr	r2, [pc, #324]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b4f      	ldr	r3, [pc, #316]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b4b      	ldr	r3, [pc, #300]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a4a      	ldr	r2, [pc, #296]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a42      	ldr	r2, [pc, #264]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	4b3c      	ldr	r3, [pc, #240]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a3b      	ldr	r2, [pc, #236]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <MX_GPIO_Init+0x1a0>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR1_Pin|DIR2_Pin|OE_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000e90:	4834      	ldr	r0, [pc, #208]	; (8000f64 <MX_GPIO_Init+0x1a4>)
 8000e92:	f00a fa1b 	bl	800b2cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 8000e9c:	4832      	ldr	r0, [pc, #200]	; (8000f68 <MX_GPIO_Init+0x1a8>)
 8000e9e:	f00a fa15 	bl	800b2cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f644 7111 	movw	r1, #20241	; 0x4f11
 8000ea8:	4830      	ldr	r0, [pc, #192]	; (8000f6c <MX_GPIO_Init+0x1ac>)
 8000eaa:	f00a fa0f 	bl	800b2cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000eb4:	482e      	ldr	r0, [pc, #184]	; (8000f70 <MX_GPIO_Init+0x1b0>)
 8000eb6:	f00a fa09 	bl	800b2cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	21f0      	movs	r1, #240	; 0xf0
 8000ebe:	482d      	ldr	r0, [pc, #180]	; (8000f74 <MX_GPIO_Init+0x1b4>)
 8000ec0:	f00a fa04 	bl	800b2cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|OE_Pin;
 8000ec4:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4821      	ldr	r0, [pc, #132]	; (8000f64 <MX_GPIO_Init+0x1a4>)
 8000ede:	f00a f84d 	bl	800af7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8000ee2:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8000ee6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481b      	ldr	r0, [pc, #108]	; (8000f68 <MX_GPIO_Init+0x1a8>)
 8000efc:	f00a f83e 	bl	800af7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f00:	f644 7311 	movw	r3, #20241	; 0x4f11
 8000f04:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4814      	ldr	r0, [pc, #80]	; (8000f6c <MX_GPIO_Init+0x1ac>)
 8000f1a:	f00a f82f 	bl	800af7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 8000f1e:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <MX_GPIO_Init+0x1b0>)
 8000f38:	f00a f820 	bl	800af7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8000f3c:	23f0      	movs	r3, #240	; 0xf0
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4808      	ldr	r0, [pc, #32]	; (8000f74 <MX_GPIO_Init+0x1b4>)
 8000f54:	f00a f812 	bl	800af7c <HAL_GPIO_Init>

}
 8000f58:	bf00      	nop
 8000f5a:	3730      	adds	r7, #48	; 0x30
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	58024400 	.word	0x58024400
 8000f64:	58021000 	.word	0x58021000
 8000f68:	58020800 	.word	0x58020800
 8000f6c:	58020c00 	.word	0x58020c00
 8000f70:	58020000 	.word	0x58020000
 8000f74:	58020400 	.word	0x58020400

08000f78 <IVK>:
	q_arr[4] = roll;
	memcpy(config_arr, q_arr, sizeof(q_arr));
	return 1;
}

void IVK(float q[5], float x_dot[5], float *m_dot) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	ed2d 8b04 	vpush	{d8-d9}
 8000f7e:	b0f8      	sub	sp, #480	; 0x1e0
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	6018      	str	r0, [r3, #0]
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	6019      	str	r1, [r3, #0]
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	601a      	str	r2, [r3, #0]
	  double e_J_inv_tmp;
	  double e_J_inv_tmp_tmp;
	  double f_J_inv_tmp_tmp;
	  int i;
	  int i1;
	  J_inv_tmp_tmp = q[1] + 2.0 * q[2];
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3308      	adds	r3, #8
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000fb6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fba:	ed87 7b72 	vstr	d7, [r7, #456]	; 0x1c8
	  b_J_inv_tmp_tmp =
	      ((((J_inv_tmp_tmp + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205;
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	330c      	adds	r3, #12
 8000fc6:	edd3 7a00 	vldr	s15, [r3]
 8000fca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fce:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8000fd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fd6:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 80013a0 <IVK+0x428>
 8000fda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fde:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 80013a8 <IVK+0x430>
 8000fe2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fe6:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 80013b0 <IVK+0x438>
 8000fea:	ee37 7b46 	vsub.f64	d7, d7, d6
	  b_J_inv_tmp_tmp =
 8000fee:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 80013b8 <IVK+0x440>
 8000ff2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ff6:	ed87 7b70 	vstr	d7, [r7, #448]	; 0x1c0
	  c_J_inv_tmp_tmp = sin(b_J_inv_tmp_tmp);
 8000ffa:	ed97 0b70 	vldr	d0, [r7, #448]	; 0x1c0
 8000ffe:	f013 f83f 	bl	8014080 <sin>
 8001002:	ed87 0b6e 	vstr	d0, [r7, #440]	; 0x1b8
	  d_J_inv_tmp_tmp = sin(q[0]);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001014:	eeb0 0b47 	vmov.f64	d0, d7
 8001018:	f013 f832 	bl	8014080 <sin>
 800101c:	ed87 0b6c 	vstr	d0, [r7, #432]	; 0x1b0
	  J_inv_tmp = cos(((J_inv_tmp_tmp + 1.6845) + -0.8995) + -0.73665);
 8001020:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8001024:	ed9f 6bde 	vldr	d6, [pc, #888]	; 80013a0 <IVK+0x428>
 8001028:	ee37 7b06 	vadd.f64	d7, d7, d6
 800102c:	ed9f 6bde 	vldr	d6, [pc, #888]	; 80013a8 <IVK+0x430>
 8001030:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001034:	ed9f 6bde 	vldr	d6, [pc, #888]	; 80013b0 <IVK+0x438>
 8001038:	ee37 7b46 	vsub.f64	d7, d7, d6
 800103c:	eeb0 0b47 	vmov.f64	d0, d7
 8001040:	f012 ffca 	bl	8013fd8 <cos>
 8001044:	ed87 0b6a 	vstr	d0, [r7, #424]	; 0x1a8
	  b_J_inv_tmp = cos(b_J_inv_tmp_tmp);
 8001048:	ed97 0b70 	vldr	d0, [r7, #448]	; 0x1c0
 800104c:	f012 ffc4 	bl	8013fd8 <cos>
 8001050:	ed87 0b68 	vstr	d0, [r7, #416]	; 0x1a0
	  J_inv_tmp_tmp = ((q[1] + q[2]) + 1.6845) + -0.8995;
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3304      	adds	r3, #4
 800105c:	ed93 7a00 	vldr	s14, [r3]
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3308      	adds	r3, #8
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001070:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001074:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80013a0 <IVK+0x428>
 8001078:	ee37 7b06 	vadd.f64	d7, d7, d6
 800107c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80013a8 <IVK+0x430>
 8001080:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001084:	ed87 7b72 	vstr	d7, [r7, #456]	; 0x1c8
	  c_J_inv_tmp = cos(J_inv_tmp_tmp);
 8001088:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800108c:	f012 ffa4 	bl	8013fd8 <cos>
 8001090:	ed87 0b66 	vstr	d0, [r7, #408]	; 0x198
	  d_J_inv_tmp = sin(J_inv_tmp_tmp);
 8001094:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8001098:	f012 fff2 	bl	8014080 <sin>
 800109c:	ed87 0b64 	vstr	d0, [r7, #400]	; 0x190
	  J_inv_tmp_tmp = sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3304      	adds	r3, #4
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3308      	adds	r3, #8
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80010c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010c8:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80013a0 <IVK+0x428>
 80010cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010d0:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80013a8 <IVK+0x430>
 80010d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80010d8:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80013b0 <IVK+0x438>
 80010dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80010e0:	eeb0 0b47 	vmov.f64	d0, d7
 80010e4:	f012 ffcc 	bl	8014080 <sin>
 80010e8:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
	  b_J_inv_tmp_tmp = cos(q[1] + 1.6845);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3304      	adds	r3, #4
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fc:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80013a0 <IVK+0x428>
 8001100:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001104:	eeb0 0b47 	vmov.f64	d0, d7
 8001108:	f012 ff66 	bl	8013fd8 <cos>
 800110c:	ed87 0b70 	vstr	d0, [r7, #448]	; 0x1c0
	  e_J_inv_tmp_tmp = sin(q[1] + 1.6845);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3304      	adds	r3, #4
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001120:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80013a0 <IVK+0x428>
 8001124:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001128:	eeb0 0b47 	vmov.f64	d0, d7
 800112c:	f012 ffa8 	bl	8014080 <sin>
 8001130:	ed87 0b62 	vstr	d0, [r7, #392]	; 0x188
	  f_J_inv_tmp_tmp = cos(q[0]);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001142:	eeb0 0b47 	vmov.f64	d0, d7
 8001146:	f012 ff47 	bl	8013fd8 <cos>
 800114a:	ed87 0b60 	vstr	d0, [r7, #384]	; 0x180
	  e_J_inv_tmp = cos(q[2]);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3308      	adds	r3, #8
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800115e:	eeb0 0b47 	vmov.f64	d0, d7
 8001162:	f012 ff39 	bl	8013fd8 <cos>
 8001166:	ed87 0b5e 	vstr	d0, [r7, #376]	; 0x178
	  dv[0] = 0.0;
 800116a:	f107 0110 	add.w	r1, r7, #16
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	e9c1 2300 	strd	r2, r3, [r1]
	  dv[5] = 0.0;
 800117a:	f107 0110 	add.w	r1, r7, #16
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  d = f_J_inv_tmp_tmp * f_J_inv_tmp_tmp;
 800118a:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800118e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001192:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	  d1 = d_J_inv_tmp_tmp * d_J_inv_tmp_tmp;
 8001196:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800119a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800119e:	ed87 7b5c 	vstr	d7, [r7, #368]	; 0x170
	  dv[10] =
	      -(25.0 * d_J_inv_tmp_tmp) /
 80011a2:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80011a6:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 80011aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011ae:	eeb1 8b47 	vneg.f64	d8, d7
	      (9.0 *
	       (((((((146.0 * c_J_inv_tmp_tmp * d + 410.488 * J_inv_tmp * d) +
 80011b2:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80011b6:	ed9f 6b84 	vldr	d6, [pc, #528]	; 80013c8 <IVK+0x450>
 80011ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011be:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80011c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011c6:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80011ca:	ed9f 5b81 	vldr	d5, [pc, #516]	; 80013d0 <IVK+0x458>
 80011ce:	ee27 5b05 	vmul.f64	d5, d7, d5
 80011d2:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80011d6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011da:	ee36 9b07 	vadd.f64	d9, d6, d7
	             146.0 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3308      	adds	r3, #8
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001202:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	330c      	adds	r3, #12
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001216:	ee36 7b07 	vadd.f64	d7, d6, d7
 800121a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80013a0 <IVK+0x428>
 800121e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001222:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80013a8 <IVK+0x430>
 8001226:	ee37 7b46 	vsub.f64	d7, d7, d6
 800122a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80013b0 <IVK+0x438>
 800122e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001232:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80013b8 <IVK+0x440>
 8001236:	ee37 7b06 	vadd.f64	d7, d7, d6
 800123a:	eeb0 0b47 	vmov.f64	d0, d7
 800123e:	f012 ff1f 	bl	8014080 <sin>
 8001242:	eeb0 7b40 	vmov.f64	d7, d0
	             146.0 *
 8001246:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80013c8 <IVK+0x450>
 800124a:	ee27 6b06 	vmul.f64	d6, d7, d6
	                      -0.73665) +
	                     1.52205) *
 800124e:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8001252:	ee26 7b07 	vmul.f64	d7, d6, d7
	       (((((((146.0 * c_J_inv_tmp_tmp * d + 410.488 * J_inv_tmp * d) +
 8001256:	ee39 9b07 	vadd.f64	d9, d9, d7
	                 d1) +
	            410.488 *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3304      	adds	r3, #4
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3308      	adds	r3, #8
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800127a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800127e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001282:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80013a0 <IVK+0x428>
 8001286:	ee37 7b06 	vadd.f64	d7, d7, d6
 800128a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80013a8 <IVK+0x430>
 800128e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001292:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80013b0 <IVK+0x438>
 8001296:	ee37 7b46 	vsub.f64	d7, d7, d6
 800129a:	eeb0 0b47 	vmov.f64	d0, d7
 800129e:	f012 fe9b 	bl	8013fd8 <cos>
 80012a2:	eeb0 7b40 	vmov.f64	d7, d0
	            410.488 *
 80012a6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80013d0 <IVK+0x458>
 80012aa:	ee27 6b06 	vmul.f64	d6, d7, d6
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80012ae:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80012b2:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 d1) +
 80012b6:	ee39 6b07 	vadd.f64	d6, d9, d7
	                d1) +
	           60.0 * c_J_inv_tmp * d) +
 80012ba:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80012be:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80013d8 <IVK+0x460>
 80012c2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80012c6:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80012ca:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d1) +
 80012ce:	ee36 9b07 	vadd.f64	d9, d6, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) +
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3304      	adds	r3, #4
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3308      	adds	r3, #8
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f2:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80013a0 <IVK+0x428>
 80012f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012fa:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80013a8 <IVK+0x430>
 80012fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001302:	eeb0 0b47 	vmov.f64	d0, d7
 8001306:	f012 fe67 	bl	8013fd8 <cos>
 800130a:	eeb0 7b40 	vmov.f64	d7, d0
 800130e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80013d8 <IVK+0x460>
 8001312:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001316:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800131a:	ee26 7b07 	vmul.f64	d7, d6, d7
	           60.0 * c_J_inv_tmp * d) +
 800131e:	ee39 6b07 	vadd.f64	d6, d9, d7
	         352.278 * b_J_inv_tmp_tmp * d) +
 8001322:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001326:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80013e0 <IVK+0x468>
 800132a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800132e:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001332:	ee25 7b07 	vmul.f64	d7, d5, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) +
 8001336:	ee36 9b07 	vadd.f64	d9, d6, d7
	        352.278 * cos(q[1] + 1.6845) * d1));
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3304      	adds	r3, #4
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800134a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80013a0 <IVK+0x428>
 800134e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001352:	eeb0 0b47 	vmov.f64	d0, d7
 8001356:	f012 fe3f 	bl	8013fd8 <cos>
 800135a:	eeb0 7b40 	vmov.f64	d7, d0
 800135e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80013e0 <IVK+0x468>
 8001362:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001366:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800136a:	ee26 7b07 	vmul.f64	d7, d6, d7
	         352.278 * b_J_inv_tmp_tmp * d) +
 800136e:	ee39 7b07 	vadd.f64	d7, d9, d7
	      (9.0 *
 8001372:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001376:	ee27 6b06 	vmul.f64	d6, d7, d6
	      -(25.0 * d_J_inv_tmp_tmp) /
 800137a:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[10] =
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	  dv[15] =
	      25.0 * f_J_inv_tmp_tmp /
 8001386:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800138a:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 800138e:	ee27 8b06 	vmul.f64	d8, d7, d6
	      (9.0 *
	       (((((((146.0 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3304      	adds	r3, #4
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	e033      	b.n	8001408 <IVK+0x490>
 80013a0:	45a1cac1 	.word	0x45a1cac1
 80013a4:	3ffaf3b6 	.word	0x3ffaf3b6
 80013a8:	39581062 	.word	0x39581062
 80013ac:	3fecc8b4 	.word	0x3fecc8b4
 80013b0:	05532618 	.word	0x05532618
 80013b4:	3fe792a3 	.word	0x3fe792a3
 80013b8:	19ce075f 	.word	0x19ce075f
 80013bc:	3ff85a51 	.word	0x3ff85a51
 80013c0:	19ce075f 	.word	0x19ce075f
 80013c4:	3ff85a51 	.word	0x3ff85a51
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40624000 	.word	0x40624000
 80013d0:	d916872b 	.word	0xd916872b
 80013d4:	4079a7ce 	.word	0x4079a7ce
 80013d8:	00000000 	.word	0x00000000
 80013dc:	404e0000 	.word	0x404e0000
 80013e0:	b020c49c 	.word	0xb020c49c
 80013e4:	40760472 	.word	0x40760472
 80013e8:	45a1cac1 	.word	0x45a1cac1
 80013ec:	3ffaf3b6 	.word	0x3ffaf3b6
 80013f0:	39581062 	.word	0x39581062
 80013f4:	3fecc8b4 	.word	0x3fecc8b4
 80013f8:	05532618 	.word	0x05532618
 80013fc:	3fe792a3 	.word	0x3fe792a3
 8001400:	eb851eb8 	.word	0xeb851eb8
 8001404:	40d80d51 	.word	0x40d80d51
 8001408:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3308      	adds	r3, #8
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800141c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001420:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	330c      	adds	r3, #12
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001434:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001438:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 80013e8 <IVK+0x470>
 800143c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001440:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 80013f0 <IVK+0x478>
 8001444:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001448:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 80013f8 <IVK+0x480>
 800144c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001450:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 80013c0 <IVK+0x448>
 8001454:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001458:	eeb0 0b47 	vmov.f64	d0, d7
 800145c:	f012 fe10 	bl	8014080 <sin>
 8001460:	eeb0 7b40 	vmov.f64	d7, d0
	       (((((((146.0 *
 8001464:	ed1f 6b28 	vldr	d6, [pc, #-160]	; 80013c8 <IVK+0x450>
 8001468:	ee27 6b06 	vmul.f64	d6, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 800146c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001470:	ee27 7b07 	vmul.f64	d7, d7, d7
	                      1.52205) *
 8001474:	ee26 9b07 	vmul.f64	d9, d6, d7
	              410.488 *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3304      	adds	r3, #4
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3308      	adds	r3, #8
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001498:	ee37 7b07 	vadd.f64	d7, d7, d7
 800149c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014a0:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 80013e8 <IVK+0x470>
 80014a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014a8:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 80013f0 <IVK+0x478>
 80014ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80014b0:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 80013f8 <IVK+0x480>
 80014b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80014b8:	eeb0 0b47 	vmov.f64	d0, d7
 80014bc:	f012 fd8c 	bl	8013fd8 <cos>
 80014c0:	eeb0 7b40 	vmov.f64	d7, d0
	              410.488 *
 80014c4:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 80013d0 <IVK+0x458>
 80014c8:	ee27 6b06 	vmul.f64	d6, d7, d6
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80014cc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80014d0:	ee27 7b07 	vmul.f64	d7, d7, d7
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80014d4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 80014d8:	ee39 9b07 	vadd.f64	d9, d9, d7
	             146.0 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3304      	adds	r3, #4
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3308      	adds	r3, #8
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001500:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	330c      	adds	r3, #12
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001514:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001518:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 80013e8 <IVK+0x470>
 800151c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001520:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 80013f0 <IVK+0x478>
 8001524:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001528:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 80013f8 <IVK+0x480>
 800152c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001530:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 80013c0 <IVK+0x448>
 8001534:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001538:	eeb0 0b47 	vmov.f64	d0, d7
 800153c:	f012 fda0 	bl	8014080 <sin>
 8001540:	eeb0 7b40 	vmov.f64	d7, d0
	             146.0 *
 8001544:	ed1f 6b60 	vldr	d6, [pc, #-384]	; 80013c8 <IVK+0x450>
 8001548:	ee27 6b06 	vmul.f64	d6, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800154c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001550:	ee27 7b07 	vmul.f64	d7, d7, d7
	                     1.52205) *
 8001554:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001558:	ee39 9b07 	vadd.f64	d9, d9, d7
	            410.488 *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3304      	adds	r3, #4
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3308      	adds	r3, #8
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800157c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001580:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001584:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80013e8 <IVK+0x470>
 8001588:	ee37 7b06 	vadd.f64	d7, d7, d6
 800158c:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80013f0 <IVK+0x478>
 8001590:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001594:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80013f8 <IVK+0x480>
 8001598:	ee37 7b46 	vsub.f64	d7, d7, d6
 800159c:	eeb0 0b47 	vmov.f64	d0, d7
 80015a0:	f012 fd1a 	bl	8013fd8 <cos>
 80015a4:	eeb0 7b40 	vmov.f64	d7, d0
	            410.488 *
 80015a8:	ed1f 6b77 	vldr	d6, [pc, #-476]	; 80013d0 <IVK+0x458>
 80015ac:	ee27 6b06 	vmul.f64	d6, d7, d6
	                (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80015b0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80015b4:	ee27 7b07 	vmul.f64	d7, d7, d7
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80015b8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80015bc:	ee39 9b07 	vadd.f64	d9, d9, d7
	           60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3304      	adds	r3, #4
 80015c8:	ed93 7a00 	vldr	s14, [r3]
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3308      	adds	r3, #8
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e0:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 80013e8 <IVK+0x470>
 80015e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015e8:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 80013f0 <IVK+0x478>
 80015ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80015f0:	eeb0 0b47 	vmov.f64	d0, d7
 80015f4:	f012 fcf0 	bl	8013fd8 <cos>
 80015f8:	eeb0 7b40 	vmov.f64	d7, d0
 80015fc:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 80013d8 <IVK+0x460>
 8001600:	ee27 6b06 	vmul.f64	d6, d7, d6
	               (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001604:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001608:	ee27 7b07 	vmul.f64	d7, d7, d7
	           60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800160c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001610:	ee39 9b07 	vadd.f64	d9, d9, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3304      	adds	r3, #4
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3308      	adds	r3, #8
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001630:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001634:	ed1f 6b94 	vldr	d6, [pc, #-592]	; 80013e8 <IVK+0x470>
 8001638:	ee37 7b06 	vadd.f64	d7, d7, d6
 800163c:	ed1f 6b94 	vldr	d6, [pc, #-592]	; 80013f0 <IVK+0x478>
 8001640:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001644:	eeb0 0b47 	vmov.f64	d0, d7
 8001648:	f012 fcc6 	bl	8013fd8 <cos>
 800164c:	eeb0 7b40 	vmov.f64	d7, d0
 8001650:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 80013d8 <IVK+0x460>
 8001654:	ee27 6b06 	vmul.f64	d6, d7, d6
	              (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001658:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800165c:	ee27 7b07 	vmul.f64	d7, d7, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8001660:	ee26 7b07 	vmul.f64	d7, d6, d7
	               (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001664:	ee39 9b07 	vadd.f64	d9, d9, d7
	         352.278 * cos(q[1] + 1.6845) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3304      	adds	r3, #4
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001678:	ed1f 6ba5 	vldr	d6, [pc, #-660]	; 80013e8 <IVK+0x470>
 800167c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001680:	eeb0 0b47 	vmov.f64	d0, d7
 8001684:	f012 fca8 	bl	8013fd8 <cos>
 8001688:	eeb0 7b40 	vmov.f64	d7, d0
 800168c:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 80013e0 <IVK+0x468>
 8001690:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001694:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001698:	ee27 7b07 	vmul.f64	d7, d7, d7
 800169c:	ee26 7b07 	vmul.f64	d7, d6, d7
	              (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80016a0:	ee39 9b07 	vadd.f64	d9, d9, d7
	        352.278 * cos(q[1] + 1.6845) * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3304      	adds	r3, #4
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016b4:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 80013e8 <IVK+0x470>
 80016b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016bc:	eeb0 0b47 	vmov.f64	d0, d7
 80016c0:	f012 fc8a 	bl	8013fd8 <cos>
 80016c4:	eeb0 7b40 	vmov.f64	d7, d0
 80016c8:	ed1f 6bbb 	vldr	d6, [pc, #-748]	; 80013e0 <IVK+0x468>
 80016cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016d0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80016d4:	ee27 7b07 	vmul.f64	d7, d7, d7
 80016d8:	ee26 7b07 	vmul.f64	d7, d6, d7
	         352.278 * cos(q[1] + 1.6845) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80016dc:	ee39 7b07 	vadd.f64	d7, d9, d7
	      (9.0 *
 80016e0:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80016e4:	ee27 6b06 	vmul.f64	d6, d7, d6
	      25.0 * f_J_inv_tmp_tmp /
 80016e8:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[15] =
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	  dv[20] = 0.0;
 80016f4:	f107 0110 	add.w	r1, r7, #16
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	  d2 = sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3304      	adds	r3, #4
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	3308      	adds	r3, #8
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001724:	ed1f 6bd0 	vldr	d6, [pc, #-832]	; 80013e8 <IVK+0x470>
 8001728:	ee37 7b06 	vadd.f64	d7, d7, d6
 800172c:	ed1f 6bd0 	vldr	d6, [pc, #-832]	; 80013f0 <IVK+0x478>
 8001730:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001734:	eeb0 0b47 	vmov.f64	d0, d7
 8001738:	f012 fca2 	bl	8014080 <sin>
 800173c:	ed87 0b5a 	vstr	d0, [r7, #360]	; 0x168
	  d3 = 24629.28 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3304      	adds	r3, #4
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3308      	adds	r3, #8
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001760:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001764:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001768:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 80013e8 <IVK+0x470>
 800176c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001770:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 80013f0 <IVK+0x478>
 8001774:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001778:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 80013f8 <IVK+0x480>
 800177c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001780:	eeb0 0b47 	vmov.f64	d0, d7
 8001784:	f012 fc28 	bl	8013fd8 <cos>
 8001788:	eeb0 7b40 	vmov.f64	d7, d0
 800178c:	ed1f 6be4 	vldr	d6, [pc, #-912]	; 8001400 <IVK+0x488>
 8001790:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001794:	ed97 6b5a 	vldr	d6, [r7, #360]	; 0x168
 8001798:	ee26 7b07 	vmul.f64	d7, d6, d7
 800179c:	ed87 7b58 	vstr	d7, [r7, #352]	; 0x160
	       d2;
	  d4 = 24629.28 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 80017a0:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80017a4:	ed1f 6bea 	vldr	d6, [pc, #-936]	; 8001400 <IVK+0x488>
 80017a8:	ee27 8b06 	vmul.f64	d8, d7, d6
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3304      	adds	r3, #4
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3308      	adds	r3, #8
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017cc:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8001ba8 <IVK+0xc30>
 80017d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017d4:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8001bb0 <IVK+0xc38>
 80017d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017dc:	eeb0 0b47 	vmov.f64	d0, d7
 80017e0:	f012 fbfa 	bl	8013fd8 <cos>
 80017e4:	eeb0 7b40 	vmov.f64	d7, d0
 80017e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80017ec:	ed87 7b56 	vstr	d7, [r7, #344]	; 0x158
	  d5 = 289211.783328 *
	       cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3304      	adds	r3, #4
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3308      	adds	r3, #8
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001810:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001814:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001818:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8001ba8 <IVK+0xc30>
 800181c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001820:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8001bb0 <IVK+0xc38>
 8001824:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001828:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8001be8 <IVK+0xc70>
 800182c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001830:	eeb0 0b47 	vmov.f64	d0, d7
 8001834:	f012 fbd0 	bl	8013fd8 <cos>
 8001838:	eeb0 7b40 	vmov.f64	d7, d0
	  d5 = 289211.783328 *
 800183c:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001bb8 <IVK+0xc40>
 8001840:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001844:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 8001848:	ee26 7b07 	vmul.f64	d7, d6, d7
 800184c:	ed87 7b54 	vstr	d7, [r7, #336]	; 0x150
	       e_J_inv_tmp_tmp;
	  d6 = 289211.783328 * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8001850:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8001854:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001bb8 <IVK+0xc40>
 8001858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800185c:	ed97 6b70 	vldr	d6, [r7, #448]	; 0x1c0
 8001860:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001864:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
	  d7 = 21136.68 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3304      	adds	r3, #4
 8001870:	ed93 7a00 	vldr	s14, [r3]
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3308      	adds	r3, #8
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001884:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001888:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8001ba8 <IVK+0xc30>
 800188c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001890:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8001bb0 <IVK+0xc38>
 8001894:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001898:	eeb0 0b47 	vmov.f64	d0, d7
 800189c:	f012 fb9c 	bl	8013fd8 <cos>
 80018a0:	eeb0 7b40 	vmov.f64	d7, d0
 80018a4:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8001bc0 <IVK+0xc48>
 80018a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018ac:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 80018b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018b4:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	  d8 = 21136.68 * d2 * b_J_inv_tmp_tmp;
 80018b8:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80018bc:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001bc0 <IVK+0xc48>
 80018c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018c4:	ed97 6b70 	vldr	d6, [r7, #448]	; 0x1c0
 80018c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018cc:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
	  dv[1] = 27.0 *
	          (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 80018d0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80018d4:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8001bc8 <IVK+0xc50>
 80018d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018dc:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80018e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018e4:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80018e8:	ee26 6b07 	vmul.f64	d6, d6, d7
	             119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 80018ec:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 80018f0:	ed9f 5bbb 	vldr	d5, [pc, #748]	; 8001be0 <IVK+0xc68>
 80018f4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80018f8:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80018fc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001900:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001904:	ee25 7b07 	vmul.f64	d7, d5, d7
	          (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 8001908:	ee36 6b07 	vadd.f64	d6, d6, d7
	            119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 800190c:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8001910:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8001be0 <IVK+0xc68>
 8001914:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001918:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 800191c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001920:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001924:	ee25 7b07 	vmul.f64	d7, d5, d7
	             119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 8001928:	ee36 6b07 	vadd.f64	d6, d6, d7
	           8760.0 * b_J_inv_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) /
 800192c:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8001930:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8001bc8 <IVK+0xc50>
 8001934:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001938:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 800193c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001940:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001944:	ee25 7b07 	vmul.f64	d7, d5, d7
	            119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8001948:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[1] = 27.0 *
 800194c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8001950:	ee27 5b06 	vmul.f64	d5, d7, d6
	          (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d -
 8001954:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001958:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001bd0 <IVK+0xc58>
 800195c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001960:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001964:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001968:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 800196c:	ee26 6b07 	vmul.f64	d6, d6, d7
	                     24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8001970:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8001974:	ed9f 4b96 	vldr	d4, [pc, #600]	; 8001bd0 <IVK+0xc58>
 8001978:	ee27 4b04 	vmul.f64	d4, d7, d4
 800197c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8001980:	ee24 4b07 	vmul.f64	d4, d4, d7
 8001984:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001988:	ee24 7b07 	vmul.f64	d7, d4, d7
	          (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d -
 800198c:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d3 * d1) -
 8001990:	ed97 4b58 	vldr	d4, [r7, #352]	; 0x160
 8001994:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8001998:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) +
 800199c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d4 * d1) +
 80019a0:	ed97 4b56 	vldr	d4, [r7, #344]	; 0x158
 80019a4:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80019a8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d3 * d1) -
 80019ac:	ee36 6b47 	vsub.f64	d6, d6, d7
	                  289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 80019b0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80019b4:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8001bb8 <IVK+0xc40>
 80019b8:	ee27 4b04 	vmul.f64	d4, d7, d4
 80019bc:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80019c0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80019c4:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80019c8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                   d4 * d1) +
 80019cc:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d6 * d) +
 80019d0:	ed97 4b52 	vldr	d4, [r7, #328]	; 0x148
 80019d4:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80019d8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                  289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 80019dc:	ee36 6b47 	vsub.f64	d6, d6, d7
	                d5 * d1) -
 80019e0:	ed97 4b54 	vldr	d4, [r7, #336]	; 0x150
 80019e4:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80019e8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                 d6 * d) +
 80019ec:	ee36 6b07 	vadd.f64	d6, d6, d7
	               d6 * d1) +
 80019f0:	ed97 4b52 	vldr	d4, [r7, #328]	; 0x148
 80019f4:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80019f8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                d5 * d1) -
 80019fc:	ee36 6b47 	vsub.f64	d6, d6, d7
	              21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8001a00:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8001a04:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 8001bc0 <IVK+0xc48>
 8001a08:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001a0c:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8001a10:	ee24 4b07 	vmul.f64	d4, d4, d7
 8001a14:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001a18:	ee24 7b07 	vmul.f64	d7, d4, d7
	               d6 * d1) +
 8001a1c:	ee36 6b07 	vadd.f64	d6, d6, d7
	             21136.68 * d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8001a20:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001a24:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8001bc0 <IVK+0xc48>
 8001a28:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001a2c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001a30:	ee24 4b07 	vmul.f64	d4, d4, d7
 8001a34:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001a38:	ee24 7b07 	vmul.f64	d7, d4, d7
	              21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8001a3c:	ee36 6b47 	vsub.f64	d6, d6, d7
	            d7 * d1) -
 8001a40:	ed97 4b50 	vldr	d4, [r7, #320]	; 0x140
 8001a44:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8001a48:	ee24 7b07 	vmul.f64	d7, d4, d7
	             21136.68 * d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8001a4c:	ee36 6b07 	vadd.f64	d6, d6, d7
	           d8 * d1);
 8001a50:	ed97 4b4e 	vldr	d4, [r7, #312]	; 0x138
 8001a54:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8001a58:	ee24 7b07 	vmul.f64	d7, d4, d7
	            d7 * d1) -
 8001a5c:	ee36 6b47 	vsub.f64	d6, d6, d7
	           8760.0 * b_J_inv_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) /
 8001a60:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[1] = 27.0 *
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	ed83 7b02 	vstr	d7, [r3, #8]
	  d9 = 8760.0 *
	       cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3304      	adds	r3, #4
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3308      	adds	r3, #8
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a8c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a90:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	330c      	adds	r3, #12
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aa4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001aa8:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001ba8 <IVK+0xc30>
 8001aac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ab0:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001bb0 <IVK+0xc38>
 8001ab4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ab8:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001be8 <IVK+0xc70>
 8001abc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ac0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001bd8 <IVK+0xc60>
 8001ac4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ac8:	eeb0 0b47 	vmov.f64	d0, d7
 8001acc:	f012 fa84 	bl	8013fd8 <cos>
 8001ad0:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 8760.0 *
 8001ad4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001bc8 <IVK+0xc50>
 8001ad8:	ee27 8b06 	vmul.f64	d8, d7, d6
	           1.52205) *
	       cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	ed93 7a00 	vldr	s14, [r3]
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3308      	adds	r3, #8
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001afc:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001ba8 <IVK+0xc30>
 8001b00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b04:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001bb0 <IVK+0xc38>
 8001b08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b0c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b10:	f012 fa62 	bl	8013fd8 <cos>
 8001b14:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 8760.0 *
 8001b18:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001b1c:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	  d10 = 8760.0 *
	        sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	3304      	adds	r3, #4
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3308      	adds	r3, #8
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b44:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	330c      	adds	r3, #12
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b5c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001ba8 <IVK+0xc30>
 8001b60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b64:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001bb0 <IVK+0xc38>
 8001b68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b6c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001be8 <IVK+0xc70>
 8001b70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b74:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001bd8 <IVK+0xc60>
 8001b78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b7c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b80:	f012 fa7e 	bl	8014080 <sin>
 8001b84:	eeb0 7b40 	vmov.f64	d7, d0
	  d10 = 8760.0 *
 8001b88:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001bc8 <IVK+0xc50>
 8001b8c:	ee27 8b06 	vmul.f64	d8, d7, d6
	            1.52205) *
	        sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3304      	adds	r3, #4
 8001b98:	ed93 7a00 	vldr	s14, [r3]
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	e038      	b.n	8001c18 <IVK+0xca0>
 8001ba6:	bf00      	nop
 8001ba8:	45a1cac1 	.word	0x45a1cac1
 8001bac:	3ffaf3b6 	.word	0x3ffaf3b6
 8001bb0:	39581062 	.word	0x39581062
 8001bb4:	3fecc8b4 	.word	0x3fecc8b4
 8001bb8:	2220bc38 	.word	0x2220bc38
 8001bbc:	4111a6ef 	.word	0x4111a6ef
 8001bc0:	851eb852 	.word	0x851eb852
 8001bc4:	40d4a42b 	.word	0x40d4a42b
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40c11c00 	.word	0x40c11c00
 8001bd0:	eb851eb8 	.word	0xeb851eb8
 8001bd4:	40d80d51 	.word	0x40d80d51
 8001bd8:	19ce075f 	.word	0x19ce075f
 8001bdc:	3ff85a51 	.word	0x3ff85a51
 8001be0:	ef9db22d 	.word	0xef9db22d
 8001be4:	40fd4367 	.word	0x40fd4367
 8001be8:	05532618 	.word	0x05532618
 8001bec:	3fe792a3 	.word	0x3fe792a3
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	404e0000 	.word	0x404e0000
 8001bf8:	45a1cac1 	.word	0x45a1cac1
 8001bfc:	3ffaf3b6 	.word	0x3ffaf3b6
 8001c00:	39581062 	.word	0x39581062
 8001c04:	3fecc8b4 	.word	0x3fecc8b4
 8001c08:	05532618 	.word	0x05532618
 8001c0c:	3fe792a3 	.word	0x3fe792a3
 8001c10:	d916872b 	.word	0xd916872b
 8001c14:	4089a7ce 	.word	0x4089a7ce
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c24:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 8001bf8 <IVK+0xc80>
 8001c28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c2c:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 8001c00 <IVK+0xc88>
 8001c30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c34:	eeb0 0b47 	vmov.f64	d0, d7
 8001c38:	f012 fa22 	bl	8014080 <sin>
 8001c3c:	eeb0 7b40 	vmov.f64	d7, d0
	  d10 = 8760.0 *
 8001c40:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c44:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8001c48:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c4c:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001c50:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8001c54:	ee26 6b07 	vmul.f64	d6, d6, d7
	                  d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001c58:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c5c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c60:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8001c64:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8001c68:	ee36 6b47 	vsub.f64	d6, d6, d7
	                 d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8001c6c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001c70:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c74:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8001c78:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001c7c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001c80:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001c84:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c88:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8001c8c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8001c90:	ee36 6b47 	vsub.f64	d6, d6, d7
	               d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8001c94:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c98:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001c9c:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001ca0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001ca4:	ee36 6b07 	vadd.f64	d6, d6, d7
	              d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001ca8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001cac:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001cb0:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8001cb4:	ee25 7b07 	vmul.f64	d7, d5, d7
	               d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8001cb8:	ee36 6b47 	vsub.f64	d6, d6, d7
	             d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8001cbc:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001cc0:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001cc4:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8001cc8:	ee25 7b07 	vmul.f64	d7, d5, d7
	              d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001ccc:	ee36 6b07 	vadd.f64	d6, d6, d7
	            d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001cd0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001cd4:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001cd8:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8001cdc:	ee25 7b07 	vmul.f64	d7, d5, d7
	             d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8001ce0:	ee36 6b47 	vsub.f64	d6, d6, d7
	           d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8001ce4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001ce8:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001cec:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8001cf0:	ee25 7b07 	vmul.f64	d7, d5, d7
	            d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001cf4:	ee36 6b07 	vadd.f64	d6, d6, d7
	          d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001cf8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001cfc:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001d00:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8001d04:	ee25 7b07 	vmul.f64	d7, d5, d7
	           d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8001d08:	ee36 6b47 	vsub.f64	d6, d6, d7
	         d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8001d0c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001d10:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001d14:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8001d18:	ee25 7b07 	vmul.f64	d7, d5, d7
	          d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001d1c:	ee36 6b07 	vadd.f64	d6, d6, d7
	        d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp);
 8001d20:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001d24:	ee27 5b07 	vmul.f64	d5, d7, d7
 8001d28:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8001d2c:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8001d30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d34:	ed87 7b48 	vstr	d7, [r7, #288]	; 0x120
	  dv[6] = -(27.0 *
	            (((d10 * f_J_inv_tmp_tmp +
 8001d38:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8001d3c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001d40:	ee26 8b07 	vmul.f64	d8, d6, d7
	               119862.496 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3308      	adds	r3, #8
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d64:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001d68:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	330c      	adds	r3, #12
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d80:	ed1f 6b63 	vldr	d6, [pc, #-396]	; 8001bf8 <IVK+0xc80>
 8001d84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d88:	ed1f 6b63 	vldr	d6, [pc, #-396]	; 8001c00 <IVK+0xc88>
 8001d8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d90:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8001be8 <IVK+0xc70>
 8001d94:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d98:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 8001bd8 <IVK+0xc60>
 8001d9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001da0:	eeb0 0b47 	vmov.f64	d0, d7
 8001da4:	f012 f918 	bl	8013fd8 <cos>
 8001da8:	eeb0 7b40 	vmov.f64	d7, d0
	               119862.496 *
 8001dac:	ed1f 6b74 	vldr	d6, [pc, #-464]	; 8001be0 <IVK+0xc68>
 8001db0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3308      	adds	r3, #8
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dd4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001dd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ddc:	ed1f 6b7a 	vldr	d6, [pc, #-488]	; 8001bf8 <IVK+0xc80>
 8001de0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001de4:	ed1f 6b7a 	vldr	d6, [pc, #-488]	; 8001c00 <IVK+0xc88>
 8001de8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dec:	ed1f 6b82 	vldr	d6, [pc, #-520]	; 8001be8 <IVK+0xc70>
 8001df0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001df4:	eeb0 0b47 	vmov.f64	d0, d7
 8001df8:	f012 f8ee 	bl	8013fd8 <cos>
 8001dfc:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8001e00:	ee29 6b07 	vmul.f64	d6, d9, d7
	                   cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001e04:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001e08:	ee26 7b07 	vmul.f64	d7, d6, d7
	            (((d10 * f_J_inv_tmp_tmp +
 8001e0c:	ee38 8b07 	vadd.f64	d8, d8, d7
	                   f_J_inv_tmp_tmp) +
	              119862.496 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3304      	adds	r3, #4
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3308      	adds	r3, #8
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e30:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001e34:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	330c      	adds	r3, #12
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e4c:	ed1f 6b96 	vldr	d6, [pc, #-600]	; 8001bf8 <IVK+0xc80>
 8001e50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e54:	ed1f 6b96 	vldr	d6, [pc, #-600]	; 8001c00 <IVK+0xc88>
 8001e58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e5c:	ed1f 6b9e 	vldr	d6, [pc, #-632]	; 8001be8 <IVK+0xc70>
 8001e60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e64:	ed1f 6ba4 	vldr	d6, [pc, #-656]	; 8001bd8 <IVK+0xc60>
 8001e68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e6c:	eeb0 0b47 	vmov.f64	d0, d7
 8001e70:	f012 f906 	bl	8014080 <sin>
 8001e74:	eeb0 7b40 	vmov.f64	d7, d0
	              119862.496 *
 8001e78:	ed1f 6ba7 	vldr	d6, [pc, #-668]	; 8001be0 <IVK+0xc68>
 8001e7c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3304      	adds	r3, #4
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3308      	adds	r3, #8
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ea0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001ea4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ea8:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 8001bf8 <IVK+0xc80>
 8001eac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001eb0:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 8001c00 <IVK+0xc88>
 8001eb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001eb8:	ed1f 6bb5 	vldr	d6, [pc, #-724]	; 8001be8 <IVK+0xc70>
 8001ebc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ec0:	eeb0 0b47 	vmov.f64	d0, d7
 8001ec4:	f012 f8dc 	bl	8014080 <sin>
 8001ec8:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8001ecc:	ee29 6b07 	vmul.f64	d6, d9, d7
	                  sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001ed0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001ed4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                   f_J_inv_tmp_tmp) +
 8001ed8:	ee38 6b07 	vadd.f64	d6, d8, d7
	                  f_J_inv_tmp_tmp) +
	             d9 * f_J_inv_tmp_tmp)) /
 8001edc:	ed97 5b4c 	vldr	d5, [r7, #304]	; 0x130
 8001ee0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001ee4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  f_J_inv_tmp_tmp) +
 8001ee8:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[6] = -(27.0 *
 8001eec:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8001ef0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ef4:	eeb1 5b47 	vneg.f64	d5, d7
	             d9 * f_J_inv_tmp_tmp)) /
 8001ef8:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 8001efc:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[6] = -(27.0 *
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	          d11;
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 8001f08:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001f0c:	ed1f 6bc0 	vldr	d6, [pc, #-768]	; 8001c10 <IVK+0xc98>
 8001f10:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f14:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001f18:	ee26 8b07 	vmul.f64	d8, d6, d7
	                     60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3304      	adds	r3, #4
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	3308      	adds	r3, #8
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f3c:	ed1f 6bd2 	vldr	d6, [pc, #-840]	; 8001bf8 <IVK+0xc80>
 8001f40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f44:	ed1f 6bd2 	vldr	d6, [pc, #-840]	; 8001c00 <IVK+0xc88>
 8001f48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f4c:	eeb0 0b47 	vmov.f64	d0, d7
 8001f50:	f012 f842 	bl	8013fd8 <cos>
 8001f54:	eeb0 7b40 	vmov.f64	d7, d0
 8001f58:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8001bf0 <IVK+0xc78>
 8001f5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f60:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001f64:	ee26 7b07 	vmul.f64	d7, d6, d7
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 8001f68:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001f6c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8001f70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f74:	eeb1 5b47 	vneg.f64	d5, d7
	                         f_J_inv_tmp_tmp)) /
 8001f78:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 8001f7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	           d11;
	  dv[16] =
	      -(27.0 *
	        (820.976 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	edd3 7a00 	vldr	s15, [r3]
 8001fa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fa8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fac:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fb0:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001bf8 <IVK+0xc80>
 8001fb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fb8:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001c00 <IVK+0xc88>
 8001fbc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fc0:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001c08 <IVK+0xc90>
 8001fc4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fc8:	eeb0 0b47 	vmov.f64	d0, d7
 8001fcc:	f012 f804 	bl	8013fd8 <cos>
 8001fd0:	eeb0 7b40 	vmov.f64	d7, d0
 8001fd4:	ed1f 6bf2 	vldr	d6, [pc, #-968]	; 8001c10 <IVK+0xc98>
 8001fd8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fdc:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8001fe0:	ee26 8b07 	vmul.f64	d8, d6, d7
	             d_J_inv_tmp_tmp +
	         60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp)) /
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3304      	adds	r3, #4
 8001fec:	ed93 7a00 	vldr	s14, [r3]
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002000:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002004:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 80023d8 <IVK+0x1460>
 8002008:	ee37 7b06 	vadd.f64	d7, d7, d6
 800200c:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 80023e0 <IVK+0x1468>
 8002010:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002014:	eeb0 0b47 	vmov.f64	d0, d7
 8002018:	f011 ffde 	bl	8013fd8 <cos>
 800201c:	eeb0 7b40 	vmov.f64	d7, d0
 8002020:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 80023e8 <IVK+0x1470>
 8002024:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002028:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800202c:	ee26 7b07 	vmul.f64	d7, d6, d7
	             d_J_inv_tmp_tmp +
 8002030:	ee38 7b07 	vadd.f64	d7, d8, d7
	      -(27.0 *
 8002034:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002038:	ee27 7b06 	vmul.f64	d7, d7, d6
 800203c:	eeb1 5b47 	vneg.f64	d5, d7
	         60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp)) /
 8002040:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 8002044:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[16] =
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	      d11;
	  dv[21] = -(27.0 * (820.976 * J_inv_tmp_tmp + 60.0 * d_J_inv_tmp)) / d11;
 8002050:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002054:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80023f0 <IVK+0x1478>
 8002058:	ee27 6b06 	vmul.f64	d6, d7, d6
 800205c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002060:	ed9f 5be1 	vldr	d5, [pc, #900]	; 80023e8 <IVK+0x1470>
 8002064:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002068:	ee36 7b07 	vadd.f64	d7, d6, d7
 800206c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002070:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002074:	eeb1 5b47 	vneg.f64	d5, d7
 8002078:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800207c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
	  d12 = 2.0 * d11;
 8002088:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 800208c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002090:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002094:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002098:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 80023f8 <IVK+0x1480>
 800209c:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020a0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80020a4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80020a8:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80020ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 80020b0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80020b4:	ee26 6b07 	vmul.f64	d6, d6, d7
	                            d_J_inv_tmp_tmp +
	                        59931.248 * c_J_inv_tmp_tmp * J_inv_tmp_tmp *
 80020b8:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80020bc:	ed9f 5bce 	vldr	d5, [pc, #824]	; 80023f8 <IVK+0x1480>
 80020c0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80020c4:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80020c8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80020cc:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80020d0:	ee25 5b07 	vmul.f64	d5, d5, d7
	                            e_J_inv_tmp * d_J_inv_tmp_tmp) +
 80020d4:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80020d8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                            d_J_inv_tmp_tmp +
 80020dc:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d9 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 80020e0:	ed97 5b4c 	vldr	d5, [r7, #304]	; 0x130
 80020e4:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80020e8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80020ec:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80020f0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                            e_J_inv_tmp * d_J_inv_tmp_tmp) +
 80020f4:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      51432.588 * b_J_inv_tmp * b_J_inv_tmp_tmp * e_J_inv_tmp *
 80020f8:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 80020fc:	ed9f 5bc4 	vldr	d5, [pc, #784]	; 8002410 <IVK+0x1498>
 8002100:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002104:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002108:	ee25 5b07 	vmul.f64	d5, d5, d7
 800210c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002110:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002114:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002118:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       d9 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 800211c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                          d_J_inv_tmp_tmp) +
	                     d10 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002120:	ed97 5b4a 	vldr	d5, [r7, #296]	; 0x128
 8002124:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002128:	ee25 5b07 	vmul.f64	d5, d5, d7
 800212c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002130:	ee25 7b07 	vmul.f64	d7, d5, d7
	                          d_J_inv_tmp_tmp) +
 8002134:	ee36 6b07 	vadd.f64	d6, d6, d7
	                    51432.588 * c_J_inv_tmp_tmp * e_J_inv_tmp_tmp *
 8002138:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 800213c:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8002410 <IVK+0x1498>
 8002140:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002144:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002148:	ee25 5b07 	vmul.f64	d5, d5, d7
 800214c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002150:	ee25 5b07 	vmul.f64	d5, d5, d7
	                        e_J_inv_tmp * d_J_inv_tmp_tmp)) /
 8002154:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002158:	ee25 7b07 	vmul.f64	d7, d5, d7
	                     d10 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 800215c:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002160:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8002438 <IVK+0x14c0>
 8002164:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002168:	eeb1 5b47 	vneg.f64	d5, d7
	                        e_J_inv_tmp * d_J_inv_tmp_tmp)) /
 800216c:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 8002170:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	ed83 7b04 	vstr	d7, [r3, #16]
	          d12;
	  dv[7] =
	      55.0 *
	      (((((59931.248 *
	               cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3304      	adds	r3, #4
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3308      	adds	r3, #8
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800219c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021a0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80021a4:	f107 030c 	add.w	r3, r7, #12
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	330c      	adds	r3, #12
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021b8:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80023d8 <IVK+0x1460>
 80021bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021c0:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80023e0 <IVK+0x1468>
 80021c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021c8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002428 <IVK+0x14b0>
 80021cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021d0:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8002408 <IVK+0x1490>
 80021d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021d8:	eeb0 0b47 	vmov.f64	d0, d7
 80021dc:	f011 fefc 	bl	8013fd8 <cos>
 80021e0:	eeb0 7b40 	vmov.f64	d7, d0
	      (((((59931.248 *
 80021e4:	ed9f 6b84 	vldr	d6, [pc, #528]	; 80023f8 <IVK+0x1480>
 80021e8:	ee27 8b06 	vmul.f64	d8, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3304      	adds	r3, #4
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	3308      	adds	r3, #8
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800220c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002210:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002214:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80023d8 <IVK+0x1460>
 8002218:	ee37 7b06 	vadd.f64	d7, d7, d6
 800221c:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80023e0 <IVK+0x1468>
 8002220:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002224:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8002428 <IVK+0x14b0>
 8002228:	ee37 7b46 	vsub.f64	d7, d7, d6
 800222c:	eeb0 0b47 	vmov.f64	d0, d7
 8002230:	f011 fed2 	bl	8013fd8 <cos>
 8002234:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8002238:	ee28 6b07 	vmul.f64	d6, d8, d7
	               cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800223c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002240:	ee26 6b07 	vmul.f64	d6, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp +
 8002244:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002248:	ee26 8b07 	vmul.f64	d8, d6, d7
	           59931.248 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3304      	adds	r3, #4
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3308      	adds	r3, #8
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800226c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002270:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	330c      	adds	r3, #12
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002284:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002288:	ed9f 6b53 	vldr	d6, [pc, #332]	; 80023d8 <IVK+0x1460>
 800228c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002290:	ed9f 6b53 	vldr	d6, [pc, #332]	; 80023e0 <IVK+0x1468>
 8002294:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002298:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8002428 <IVK+0x14b0>
 800229c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022a0:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8002408 <IVK+0x1490>
 80022a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022a8:	eeb0 0b47 	vmov.f64	d0, d7
 80022ac:	f011 fee8 	bl	8014080 <sin>
 80022b0:	eeb0 7b40 	vmov.f64	d7, d0
	           59931.248 *
 80022b4:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80023f8 <IVK+0x1480>
 80022b8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3304      	adds	r3, #4
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3308      	adds	r3, #8
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80022e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022e4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80023d8 <IVK+0x1460>
 80022e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022ec:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80023e0 <IVK+0x1468>
 80022f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022f4:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8002428 <IVK+0x14b0>
 80022f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022fc:	eeb0 0b47 	vmov.f64	d0, d7
 8002300:	f011 febe 	bl	8014080 <sin>
 8002304:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8002308:	ee29 6b07 	vmul.f64	d6, d9, d7
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800230c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002310:	ee26 6b07 	vmul.f64	d6, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002314:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002318:	ee26 7b07 	vmul.f64	d7, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp +
 800231c:	ee38 8b07 	vadd.f64	d8, d8, d7
	          8760.0 *
	              cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3304      	adds	r3, #4
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3308      	adds	r3, #8
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002340:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002344:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	330c      	adds	r3, #12
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002358:	ee36 7b07 	vadd.f64	d7, d6, d7
 800235c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80023d8 <IVK+0x1460>
 8002360:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002364:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80023e0 <IVK+0x1468>
 8002368:	ee37 7b46 	vsub.f64	d7, d7, d6
 800236c:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8002428 <IVK+0x14b0>
 8002370:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002374:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8002408 <IVK+0x1490>
 8002378:	ee37 7b06 	vadd.f64	d7, d7, d6
 800237c:	eeb0 0b47 	vmov.f64	d0, d7
 8002380:	f011 fe2a 	bl	8013fd8 <cos>
 8002384:	eeb0 7b40 	vmov.f64	d7, d0
	          8760.0 *
 8002388:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002400 <IVK+0x1488>
 800238c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3304      	adds	r3, #4
 8002398:	ed93 7a00 	vldr	s14, [r3]
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3308      	adds	r3, #8
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023b0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80023d8 <IVK+0x1460>
 80023b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023b8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80023e0 <IVK+0x1468>
 80023bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023c0:	eeb0 0b47 	vmov.f64	d0, d7
 80023c4:	f011 fe08 	bl	8013fd8 <cos>
 80023c8:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 80023cc:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	e03b      	b.n	8002450 <IVK+0x14d8>
 80023d8:	45a1cac1 	.word	0x45a1cac1
 80023dc:	3ffaf3b6 	.word	0x3ffaf3b6
 80023e0:	39581062 	.word	0x39581062
 80023e4:	3fecc8b4 	.word	0x3fecc8b4
 80023e8:	00000000 	.word	0x00000000
 80023ec:	404e0000 	.word	0x404e0000
 80023f0:	d916872b 	.word	0xd916872b
 80023f4:	4089a7ce 	.word	0x4089a7ce
 80023f8:	ef9db22d 	.word	0xef9db22d
 80023fc:	40ed4367 	.word	0x40ed4367
 8002400:	00000000 	.word	0x00000000
 8002404:	40c11c00 	.word	0x40c11c00
 8002408:	19ce075f 	.word	0x19ce075f
 800240c:	3ff85a51 	.word	0x3ff85a51
 8002410:	d0e56042 	.word	0xd0e56042
 8002414:	40e91d12 	.word	0x40e91d12
 8002418:	00000000 	.word	0x00000000
 800241c:	404e0000 	.word	0x404e0000
 8002420:	b020c49c 	.word	0xb020c49c
 8002424:	40760472 	.word	0x40760472
 8002428:	05532618 	.word	0x05532618
 800242c:	3fe792a3 	.word	0x3fe792a3
 8002430:	d916872b 	.word	0xd916872b
 8002434:	4079a7ce 	.word	0x4079a7ce
 8002438:	00000000 	.word	0x00000000
 800243c:	404b8000 	.word	0x404b8000
 8002440:	45a1cac1 	.word	0x45a1cac1
 8002444:	3ffaf3b6 	.word	0x3ffaf3b6
 8002448:	39581062 	.word	0x39581062
 800244c:	3fecc8b4 	.word	0x3fecc8b4
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002458:	eeb0 0b47 	vmov.f64	d0, d7
 800245c:	f011 fdbc 	bl	8013fd8 <cos>
 8002460:	eeb0 7b40 	vmov.f64	d7, d0
 8002464:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002468:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800246c:	ee26 7b07 	vmul.f64	d7, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002470:	ee38 8b07 	vadd.f64	d8, d8, d7
	              e_J_inv_tmp) +
	         51432.588 *
	             cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3304      	adds	r3, #4
 800247c:	edd3 7a00 	vldr	s15, [r3]
 8002480:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002484:	f107 030c 	add.w	r3, r7, #12
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3308      	adds	r3, #8
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002494:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002498:	ee36 6b07 	vadd.f64	d6, d6, d7
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	330c      	adds	r3, #12
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024b0:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8002440 <IVK+0x14c8>
 80024b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80024b8:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8002448 <IVK+0x14d0>
 80024bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024c0:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 8002428 <IVK+0x14b0>
 80024c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024c8:	ed1f 6b31 	vldr	d6, [pc, #-196]	; 8002408 <IVK+0x1490>
 80024cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80024d0:	eeb0 0b47 	vmov.f64	d0, d7
 80024d4:	f011 fd80 	bl	8013fd8 <cos>
 80024d8:	eeb0 7b40 	vmov.f64	d7, d0
	         51432.588 *
 80024dc:	ed1f 6b34 	vldr	d6, [pc, #-208]	; 8002410 <IVK+0x1498>
 80024e0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3304      	adds	r3, #4
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f4:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002440 <IVK+0x14c8>
 80024f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80024fc:	eeb0 0b47 	vmov.f64	d0, d7
 8002500:	f011 fd6a 	bl	8013fd8 <cos>
 8002504:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8002508:	ee29 6b07 	vmul.f64	d6, d9, d7
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 800250c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002510:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002514:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002518:	ee26 7b07 	vmul.f64	d7, d6, d7
	              e_J_inv_tmp) +
 800251c:	ee38 8b07 	vadd.f64	d8, d8, d7
	        8760.0 *
	            sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3304      	adds	r3, #4
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3308      	adds	r3, #8
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002540:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002544:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	330c      	adds	r3, #12
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002558:	ee36 7b07 	vadd.f64	d7, d6, d7
 800255c:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 8002440 <IVK+0x14c8>
 8002560:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002564:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 8002448 <IVK+0x14d0>
 8002568:	ee37 7b46 	vsub.f64	d7, d7, d6
 800256c:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 8002428 <IVK+0x14b0>
 8002570:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002574:	ed1f 6b5c 	vldr	d6, [pc, #-368]	; 8002408 <IVK+0x1490>
 8002578:	ee37 7b06 	vadd.f64	d7, d7, d6
 800257c:	eeb0 0b47 	vmov.f64	d0, d7
 8002580:	f011 fd7e 	bl	8014080 <sin>
 8002584:	eeb0 7b40 	vmov.f64	d7, d0
	        8760.0 *
 8002588:	ed1f 6b63 	vldr	d6, [pc, #-396]	; 8002400 <IVK+0x1488>
 800258c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                 -0.73665) +
	                1.52205) *
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3304      	adds	r3, #4
 8002598:	ed93 7a00 	vldr	s14, [r3]
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3308      	adds	r3, #8
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025b0:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 8002440 <IVK+0x14c8>
 80025b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80025b8:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 8002448 <IVK+0x14d0>
 80025bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80025c0:	eeb0 0b47 	vmov.f64	d0, d7
 80025c4:	f011 fd5c 	bl	8014080 <sin>
 80025c8:	eeb0 7b40 	vmov.f64	d7, d0
	                1.52205) *
 80025cc:	ee29 9b07 	vmul.f64	d9, d9, d7
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025de:	eeb0 0b47 	vmov.f64	d0, d7
 80025e2:	f011 fcf9 	bl	8013fd8 <cos>
 80025e6:	eeb0 7b40 	vmov.f64	d7, d0
 80025ea:	ee29 6b07 	vmul.f64	d6, d9, d7
 80025ee:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80025f2:	ee26 7b07 	vmul.f64	d7, d6, d7
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 80025f6:	ee38 8b07 	vadd.f64	d8, d8, d7
	       51432.588 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3304      	adds	r3, #4
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3308      	adds	r3, #8
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800261a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800261e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002622:	f107 030c 	add.w	r3, r7, #12
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002632:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002636:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8002440 <IVK+0x14c8>
 800263a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800263e:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8002448 <IVK+0x14d0>
 8002642:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002646:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 8002428 <IVK+0x14b0>
 800264a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800264e:	ed1f 6b92 	vldr	d6, [pc, #-584]	; 8002408 <IVK+0x1490>
 8002652:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002656:	eeb0 0b47 	vmov.f64	d0, d7
 800265a:	f011 fd11 	bl	8014080 <sin>
 800265e:	eeb0 7b40 	vmov.f64	d7, d0
	       51432.588 *
 8002662:	ed1f 6b95 	vldr	d6, [pc, #-596]	; 8002410 <IVK+0x1498>
 8002666:	ee27 9b06 	vmul.f64	d9, d7, d6
	                -0.73665) +
	               1.52205) *
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3304      	adds	r3, #4
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800267a:	ed1f 6b8f 	vldr	d6, [pc, #-572]	; 8002440 <IVK+0x14c8>
 800267e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002682:	eeb0 0b47 	vmov.f64	d0, d7
 8002686:	f011 fcfb 	bl	8014080 <sin>
 800268a:	eeb0 7b40 	vmov.f64	d7, d0
	               1.52205) *
 800268e:	ee29 6b07 	vmul.f64	d6, d9, d7
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 8002692:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002696:	ee26 6b07 	vmul.f64	d6, d6, d7
 800269a:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800269e:	ee26 7b07 	vmul.f64	d7, d6, d7
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 80026a2:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 80026a6:	ed1f 6b9c 	vldr	d6, [pc, #-624]	; 8002438 <IVK+0x14c0>
 80026aa:	ee27 5b06 	vmul.f64	d5, d7, d6
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80026ae:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 80026b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[7] =
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	      d12;
	  dv[12] =
	      55.0 *
	      ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3304      	adds	r3, #4
 80026c6:	ed93 7a00 	vldr	s14, [r3]
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3308      	adds	r3, #8
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026de:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8002440 <IVK+0x14c8>
 80026e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026e6:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8002448 <IVK+0x14d0>
 80026ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80026ee:	eeb0 0b47 	vmov.f64	d0, d7
 80026f2:	f011 fc71 	bl	8013fd8 <cos>
 80026f6:	eeb0 7b40 	vmov.f64	d7, d0
 80026fa:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8002418 <IVK+0x14a0>
 80026fe:	ee27 8b06 	vmul.f64	d8, d7, d6
 8002702:	f107 030c 	add.w	r3, r7, #12
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002710:	eeb0 0b47 	vmov.f64	d0, d7
 8002714:	f011 fc60 	bl	8013fd8 <cos>
 8002718:	eeb0 7b40 	vmov.f64	d7, d0
 800271c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002720:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002724:	ee26 8b07 	vmul.f64	d8, d6, d7
	            e_J_inv_tmp +
	        352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3304      	adds	r3, #4
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002738:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 8002440 <IVK+0x14c8>
 800273c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002740:	eeb0 0b47 	vmov.f64	d0, d7
 8002744:	f011 fc48 	bl	8013fd8 <cos>
 8002748:	eeb0 7b40 	vmov.f64	d7, d0
 800274c:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8002420 <IVK+0x14a8>
 8002750:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002754:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002758:	ee26 6b07 	vmul.f64	d6, d6, d7
 800275c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002760:	ee26 7b07 	vmul.f64	d7, d6, d7
	            e_J_inv_tmp +
 8002764:	ee38 8b07 	vadd.f64	d8, d8, d7
	       410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3304      	adds	r3, #4
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3308      	adds	r3, #8
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002788:	ee37 7b07 	vadd.f64	d7, d7, d7
 800278c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002790:	ed1f 6bd5 	vldr	d6, [pc, #-852]	; 8002440 <IVK+0x14c8>
 8002794:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002798:	ed1f 6bd5 	vldr	d6, [pc, #-852]	; 8002448 <IVK+0x14d0>
 800279c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80027a0:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8002428 <IVK+0x14b0>
 80027a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80027a8:	eeb0 0b47 	vmov.f64	d0, d7
 80027ac:	f011 fc14 	bl	8013fd8 <cos>
 80027b0:	eeb0 7b40 	vmov.f64	d7, d0
 80027b4:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8002430 <IVK+0x14b8>
 80027b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80027bc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80027c0:	ee26 6b07 	vmul.f64	d6, d6, d7
	           f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80027c4:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80027c8:	ee26 7b07 	vmul.f64	d7, d6, d7
	        352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 80027cc:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 80027d0:	ed1f 6be7 	vldr	d6, [pc, #-924]	; 8002438 <IVK+0x14c0>
 80027d4:	ee27 5b06 	vmul.f64	d5, d7, d6
	           f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80027d8:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 80027dc:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[12] =
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	      d12;
	  dv[17] =
	      55.0 *
	      ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp *
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3304      	adds	r3, #4
 80027f0:	ed93 7a00 	vldr	s14, [r3]
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3308      	adds	r3, #8
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002808:	ed1f 6bf3 	vldr	d6, [pc, #-972]	; 8002440 <IVK+0x14c8>
 800280c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002810:	ed1f 6bf3 	vldr	d6, [pc, #-972]	; 8002448 <IVK+0x14d0>
 8002814:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002818:	eeb0 0b47 	vmov.f64	d0, d7
 800281c:	f011 fbdc 	bl	8013fd8 <cos>
 8002820:	eeb0 7b40 	vmov.f64	d7, d0
 8002824:	ed9f 6bf4 	vldr	d6, [pc, #976]	; 8002bf8 <IVK+0x1c80>
 8002828:	ee27 6b06 	vmul.f64	d6, d7, d6
 800282c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002830:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002834:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002838:	ee26 8b07 	vmul.f64	d8, d6, d7
	            d_J_inv_tmp_tmp +
	        352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3304      	adds	r3, #4
 8002844:	edd3 7a00 	vldr	s15, [r3]
 8002848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800284c:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8002c00 <IVK+0x1c88>
 8002850:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002854:	eeb0 0b47 	vmov.f64	d0, d7
 8002858:	f011 fbbe 	bl	8013fd8 <cos>
 800285c:	eeb0 7b40 	vmov.f64	d7, d0
 8002860:	ed9f 6be9 	vldr	d6, [pc, #932]	; 8002c08 <IVK+0x1c90>
 8002864:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002868:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800286c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002870:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002874:	ee26 7b07 	vmul.f64	d7, d6, d7
	            d_J_inv_tmp_tmp +
 8002878:	ee38 8b07 	vadd.f64	d8, d8, d7
	       410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3304      	adds	r3, #4
 8002884:	edd3 7a00 	vldr	s15, [r3]
 8002888:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3308      	adds	r3, #8
 8002894:	edd3 7a00 	vldr	s15, [r3]
 8002898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800289c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80028a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80028a4:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8002c00 <IVK+0x1c88>
 80028a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028ac:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8002c38 <IVK+0x1cc0>
 80028b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028b4:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8002c40 <IVK+0x1cc8>
 80028b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028bc:	eeb0 0b47 	vmov.f64	d0, d7
 80028c0:	f011 fb8a 	bl	8013fd8 <cos>
 80028c4:	eeb0 7b40 	vmov.f64	d7, d0
 80028c8:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 8002c10 <IVK+0x1c98>
 80028cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80028d0:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80028d4:	ee26 6b07 	vmul.f64	d6, d6, d7
	           e_J_inv_tmp * d_J_inv_tmp_tmp) /
 80028d8:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80028dc:	ee26 7b07 	vmul.f64	d7, d6, d7
	        352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 80028e0:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 80028e4:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8002c18 <IVK+0x1ca0>
 80028e8:	ee27 5b06 	vmul.f64	d5, d7, d6
	           e_J_inv_tmp * d_J_inv_tmp_tmp) /
 80028ec:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 80028f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[17] =
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	      d12;
	  dv[22] = 55.0 *
	           ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp +
 80028fc:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002900:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002c10 <IVK+0x1c98>
 8002904:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002908:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800290c:	ee26 8b07 	vmul.f64	d8, d6, d7
	             60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) +
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3304      	adds	r3, #4
 8002918:	ed93 7a00 	vldr	s14, [r3]
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3308      	adds	r3, #8
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800292c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002930:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8002c00 <IVK+0x1c88>
 8002934:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002938:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8002c38 <IVK+0x1cc0>
 800293c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002940:	eeb0 0b47 	vmov.f64	d0, d7
 8002944:	f011 fb9c 	bl	8014080 <sin>
 8002948:	eeb0 7b40 	vmov.f64	d7, d0
 800294c:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8002bf8 <IVK+0x1c80>
 8002950:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002954:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002958:	ee26 7b07 	vmul.f64	d7, d6, d7
	           ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp +
 800295c:	ee38 6b07 	vadd.f64	d6, d8, d7
	            352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) /
 8002960:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002964:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8002c08 <IVK+0x1c90>
 8002968:	ee27 5b05 	vmul.f64	d5, d7, d5
 800296c:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002970:	ee25 7b07 	vmul.f64	d7, d5, d7
	             60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) +
 8002974:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[22] = 55.0 *
 8002978:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002c18 <IVK+0x1ca0>
 800297c:	ee27 5b06 	vmul.f64	d5, d7, d6
	            352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) /
 8002980:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 8002984:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[22] = 55.0 *
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	           d12;
	  d9 = 21136.68 *
	       sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3304      	adds	r3, #4
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3308      	adds	r3, #8
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80029b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029cc:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8002c00 <IVK+0x1c88>
 80029d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029d4:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002c38 <IVK+0x1cc0>
 80029d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80029dc:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002c40 <IVK+0x1cc8>
 80029e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80029e4:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8002c78 <IVK+0x1d00>
 80029e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029ec:	eeb0 0b47 	vmov.f64	d0, d7
 80029f0:	f011 fb46 	bl	8014080 <sin>
 80029f4:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 21136.68 *
 80029f8:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8002c20 <IVK+0x1ca8>
 80029fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a00:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	           1.52205);
	  d10 = d9 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	ed93 7a00 	vldr	s14, [r3]
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3308      	adds	r3, #8
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a24:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8002c00 <IVK+0x1c88>
 8002a28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a2c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8002c38 <IVK+0x1cc0>
 8002a30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a34:	eeb0 0b47 	vmov.f64	d0, d7
 8002a38:	f011 face 	bl	8013fd8 <cos>
 8002a3c:	eeb0 6b40 	vmov.f64	d6, d0
 8002a40:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8002a44:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a48:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 8002a4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a50:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	  d9 = d9 * d2 * b_J_inv_tmp_tmp;
 8002a54:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8002a58:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8002a5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a60:	ed97 6b70 	vldr	d6, [r7, #448]	; 0x1c0
 8002a64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a68:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	  d12 = 24629.28 *
	        sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3304      	adds	r3, #4
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3308      	adds	r3, #8
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a8c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002a90:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002aa4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002aa8:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8002c00 <IVK+0x1c88>
 8002aac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ab0:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002c38 <IVK+0x1cc0>
 8002ab4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ab8:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002c40 <IVK+0x1cc8>
 8002abc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ac0:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8002c78 <IVK+0x1d00>
 8002ac4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ac8:	eeb0 0b47 	vmov.f64	d0, d7
 8002acc:	f011 fad8 	bl	8014080 <sin>
 8002ad0:	eeb0 7b40 	vmov.f64	d7, d0
	  d12 = 24629.28 *
 8002ad4:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8002c28 <IVK+0x1cb0>
 8002ad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002adc:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	            1.52205);
	  d2 *= d12 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002af0:	f107 030c 	add.w	r3, r7, #12
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3308      	adds	r3, #8
 8002af8:	edd3 7a00 	vldr	s15, [r3]
 8002afc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002b04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b08:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8002c00 <IVK+0x1c88>
 8002b0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b10:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002c38 <IVK+0x1cc0>
 8002b14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b18:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002c40 <IVK+0x1cc8>
 8002b1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b20:	eeb0 0b47 	vmov.f64	d0, d7
 8002b24:	f011 fa58 	bl	8013fd8 <cos>
 8002b28:	eeb0 6b40 	vmov.f64	d6, d0
 8002b2c:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8002b30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b34:	ed97 6b5a 	vldr	d6, [r7, #360]	; 0x168
 8002b38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b3c:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
	  d12 = d12 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002b40:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 8002b44:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002b48:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002b4c:	f107 030c 	add.w	r3, r7, #12
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3304      	adds	r3, #4
 8002b54:	ed93 7a00 	vldr	s14, [r3]
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3308      	adds	r3, #8
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b6c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8002c00 <IVK+0x1c88>
 8002b70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b74:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8002c38 <IVK+0x1cc0>
 8002b78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b7c:	eeb0 0b47 	vmov.f64	d0, d7
 8002b80:	f011 fa2a 	bl	8013fd8 <cos>
 8002b84:	eeb0 7b40 	vmov.f64	d7, d0
 8002b88:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002b8c:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	  e_J_inv_tmp =
	      289211.783328 *
	      sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3304      	adds	r3, #4
 8002b98:	edd3 7a00 	vldr	s15, [r3]
 8002b9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bb0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002bb4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002bb8:	f107 030c 	add.w	r3, r7, #12
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bc8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002bcc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8002c00 <IVK+0x1c88>
 8002bd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002bd4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002c38 <IVK+0x1cc0>
 8002bd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002bdc:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002c40 <IVK+0x1cc8>
 8002be0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002be4:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8002c78 <IVK+0x1d00>
 8002be8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002bec:	eeb0 0b47 	vmov.f64	d0, d7
 8002bf0:	e05a      	b.n	8002ca8 <IVK+0x1d30>
 8002bf2:	bf00      	nop
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	404e0000 	.word	0x404e0000
 8002c00:	45a1cac1 	.word	0x45a1cac1
 8002c04:	3ffaf3b6 	.word	0x3ffaf3b6
 8002c08:	b020c49c 	.word	0xb020c49c
 8002c0c:	40760472 	.word	0x40760472
 8002c10:	d916872b 	.word	0xd916872b
 8002c14:	4079a7ce 	.word	0x4079a7ce
 8002c18:	00000000 	.word	0x00000000
 8002c1c:	404b8000 	.word	0x404b8000
 8002c20:	851eb852 	.word	0x851eb852
 8002c24:	40d4a42b 	.word	0x40d4a42b
 8002c28:	eb851eb8 	.word	0xeb851eb8
 8002c2c:	40d80d51 	.word	0x40d80d51
 8002c30:	2220bc38 	.word	0x2220bc38
 8002c34:	4111a6ef 	.word	0x4111a6ef
 8002c38:	39581062 	.word	0x39581062
 8002c3c:	3fecc8b4 	.word	0x3fecc8b4
 8002c40:	05532618 	.word	0x05532618
 8002c44:	3fe792a3 	.word	0x3fe792a3
 8002c48:	28f5c28f 	.word	0x28f5c28f
 8002c4c:	410b0efc 	.word	0x410b0efc
 8002c50:	0664d3c0 	.word	0x0664d3c0
 8002c54:	4143dbcd 	.word	0x4143dbcd
 8002c58:	f5c28f5d 	.word	0xf5c28f5d
 8002c5c:	410738b0 	.word	0x410738b0
 8002c60:	00000000 	.word	0x00000000
 8002c64:	40f56300 	.word	0x40f56300
 8002c68:	851eb852 	.word	0x851eb852
 8002c6c:	412f6457 	.word	0x412f6457
 8002c70:	66666666 	.word	0x66666666
 8002c74:	410e10a6 	.word	0x410e10a6
 8002c78:	19ce075f 	.word	0x19ce075f
 8002c7c:	3ff85a51 	.word	0x3ff85a51
 8002c80:	05532618 	.word	0x05532618
 8002c84:	3fe792a3 	.word	0x3fe792a3
 8002c88:	eaa8eb47 	.word	0xeaa8eb47
 8002c8c:	414610aa 	.word	0x414610aa
 8002c90:	66666667 	.word	0x66666667
 8002c94:	4109cd36 	.word	0x4109cd36
 8002c98:	45a1cac1 	.word	0x45a1cac1
 8002c9c:	3ffaf3b6 	.word	0x3ffaf3b6
 8002ca0:	39581062 	.word	0x39581062
 8002ca4:	3fecc8b4 	.word	0x3fecc8b4
 8002ca8:	f011 f9ea 	bl	8014080 <sin>
 8002cac:	eeb0 7b40 	vmov.f64	d7, d0
	  e_J_inv_tmp =
 8002cb0:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8002c30 <IVK+0x1cb8>
 8002cb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cb8:	ed87 7b5e 	vstr	d7, [r7, #376]	; 0x178
	          1.52205);
	  d13 = e_J_inv_tmp *
	        cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ccc:	f107 030c 	add.w	r3, r7, #12
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	edd3 7a00 	vldr	s15, [r3]
 8002cd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cdc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002ce0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ce4:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8002c98 <IVK+0x1d20>
 8002ce8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002cec:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002c38 <IVK+0x1cc0>
 8002cf0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002cf4:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002c40 <IVK+0x1cc8>
 8002cf8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002cfc:	eeb0 0b47 	vmov.f64	d0, d7
 8002d00:	f011 f96a 	bl	8013fd8 <cos>
 8002d04:	eeb0 6b40 	vmov.f64	d6, d0
	  d13 = e_J_inv_tmp *
 8002d08:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002d0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d10:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 8002d14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d18:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
	        e_J_inv_tmp_tmp;
	  e_J_inv_tmp = e_J_inv_tmp * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8002d1c:	ed97 6b5e 	vldr	d6, [r7, #376]	; 0x178
 8002d20:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002d24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d28:	ed97 6b70 	vldr	d6, [r7, #448]	; 0x1c0
 8002d2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d30:	ed87 7b5e 	vstr	d7, [r7, #376]	; 0x178
	  d14 = c_J_inv_tmp_tmp * c_J_inv_tmp_tmp;
 8002d34:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002d38:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002d3c:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
	  d15 = 87600.0 * d14 * d_J_inv_tmp;
 8002d40:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8002d44:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8002c60 <IVK+0x1ce8>
 8002d48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d4c:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8002d50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d54:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
	  d14 = 1.02865176E+6 * d14 * e_J_inv_tmp_tmp;
 8002d58:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8002d5c:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8002c68 <IVK+0x1cf0>
 8002d60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d64:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 8002d68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d6c:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
	  d16 = d15 * d_J_inv_tmp_tmp;
 8002d70:	ed97 6b40 	vldr	d6, [r7, #256]	; 0x100
 8002d74:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002d78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d7c:	ed87 7b3e 	vstr	d7, [r7, #248]	; 0xf8
	  d17 = d14 * d_J_inv_tmp_tmp;
 8002d80:	ed97 6b42 	vldr	d6, [r7, #264]	; 0x108
 8002d84:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002d88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d8c:	ed87 7b3c 	vstr	d7, [r7, #240]	; 0xf0
	  dv[3] =
	      4.0 *
	      (((((((((((((((221663.52 * J_inv_tmp * d_J_inv_tmp * f_J_inv_tmp_tmp -
 8002d90:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8002d94:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8002c48 <IVK+0x1cd0>
 8002d98:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d9c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002da0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002da4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002da8:	ee26 6b07 	vmul.f64	d6, d6, d7
	                     221663.52 * J_inv_tmp_tmp * c_J_inv_tmp *
 8002dac:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002db0:	ed1f 5b5b 	vldr	d5, [pc, #-364]	; 8002c48 <IVK+0x1cd0>
 8002db4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002db8:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002dbc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002dc0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002dc4:	ee25 7b07 	vmul.f64	d7, d5, d7
	      (((((((((((((((221663.52 * J_inv_tmp * d_J_inv_tmp * f_J_inv_tmp_tmp -
 8002dc8:	ee36 6b47 	vsub.f64	d6, d6, d7
	                         f_J_inv_tmp_tmp) +
	                    2.6029060499520004E+6 * J_inv_tmp * e_J_inv_tmp_tmp *
 8002dcc:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8002dd0:	ed1f 5b61 	vldr	d5, [pc, #-388]	; 8002c50 <IVK+0x1cd8>
 8002dd4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002dd8:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002ddc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002de0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002de4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                         f_J_inv_tmp_tmp) +
 8002de8:	ee36 6b07 	vadd.f64	d6, d6, d7
	                        f_J_inv_tmp_tmp) -
	                   2.6029060499520004E+6 * J_inv_tmp_tmp * b_J_inv_tmp_tmp *
 8002dec:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002df0:	ed1f 5b69 	vldr	d5, [pc, #-420]	; 8002c50 <IVK+0x1cd8>
 8002df4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002df8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002dfc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e00:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002e04:	ee25 7b07 	vmul.f64	d7, d5, d7
	                        f_J_inv_tmp_tmp) -
 8002e08:	ee36 6b47 	vsub.f64	d6, d6, d7
	                       f_J_inv_tmp_tmp) +
	                  190230.12000000002 * c_J_inv_tmp * e_J_inv_tmp_tmp *
 8002e0c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002e10:	ed1f 5b6f 	vldr	d5, [pc, #-444]	; 8002c58 <IVK+0x1ce0>
 8002e14:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002e18:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002e1c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e20:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002e24:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       f_J_inv_tmp_tmp) +
 8002e28:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      f_J_inv_tmp_tmp) -
	                 190230.12000000002 * d_J_inv_tmp * b_J_inv_tmp_tmp *
 8002e2c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002e30:	ed1f 5b77 	vldr	d5, [pc, #-476]	; 8002c58 <IVK+0x1ce0>
 8002e34:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002e38:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002e3c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e40:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002e44:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      f_J_inv_tmp_tmp) -
 8002e48:	ee36 6b47 	vsub.f64	d6, d6, d7
	                     f_J_inv_tmp_tmp) +
 8002e4c:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8002e50:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d16) +
 8002e54:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 8002e58:	ee36 6b07 	vadd.f64	d6, d6, d7
	               d17) +
	              87600.0 * b_J_inv_tmp * c_J_inv_tmp_tmp * c_J_inv_tmp *
 8002e5c:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002e60:	ed1f 5b81 	vldr	d5, [pc, #-516]	; 8002c60 <IVK+0x1ce8>
 8002e64:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002e68:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002e6c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e70:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002e74:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e78:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002e7c:	ee25 7b07 	vmul.f64	d7, d5, d7
	               d17) +
 8002e80:	ee36 6b07 	vadd.f64	d6, d6, d7
	                  d_J_inv_tmp_tmp) +
	             1.02865176E+6 * b_J_inv_tmp * c_J_inv_tmp_tmp * b_J_inv_tmp_tmp *
 8002e84:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002e88:	ed1f 5b89 	vldr	d5, [pc, #-548]	; 8002c68 <IVK+0x1cf0>
 8002e8c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002e90:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002e94:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e98:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002e9c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002ea0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002ea4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d_J_inv_tmp_tmp) +
 8002ea8:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d_J_inv_tmp_tmp) +
	            246292.8 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp *
 8002eac:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002eb0:	ed1f 5b91 	vldr	d5, [pc, #-580]	; 8002c70 <IVK+0x1cf8>
 8002eb4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002eb8:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8002ebc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002ec0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002ec4:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002ec8:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002ecc:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d_J_inv_tmp_tmp) +
 8002ed0:	ee36 8b07 	vadd.f64	d8, d6, d7
	                d_J_inv_tmp_tmp) -
	           246292.8 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3304      	adds	r3, #4
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ee4:	f107 030c 	add.w	r3, r7, #12
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3308      	adds	r3, #8
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ef4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002ef8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f10:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8002c98 <IVK+0x1d20>
 8002f14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f18:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8002ca0 <IVK+0x1d28>
 8002f1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f20:	ed1f 6ba9 	vldr	d6, [pc, #-676]	; 8002c80 <IVK+0x1d08>
 8002f24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f28:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 8002c78 <IVK+0x1d00>
 8002f2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f30:	eeb0 0b47 	vmov.f64	d0, d7
 8002f34:	f011 f8a4 	bl	8014080 <sin>
 8002f38:	eeb0 7b40 	vmov.f64	d7, d0
	           246292.8 *
 8002f3c:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8002c70 <IVK+0x1cf8>
 8002f40:	ee27 6b06 	vmul.f64	d6, d7, d6
	                    -0.73665) +
	                   1.52205) *
 8002f44:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002f48:	ee26 6b07 	vmul.f64	d6, d6, d7
	               J_inv_tmp_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002f4c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002f50:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002f54:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002f58:	ee26 7b07 	vmul.f64	d7, d6, d7
	                d_J_inv_tmp_tmp) -
 8002f5c:	ee38 6b47 	vsub.f64	d6, d8, d7
	          2.8921178332800004E+6 * c_J_inv_tmp_tmp * J_inv_tmp *
 8002f60:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002f64:	ed1f 5bb8 	vldr	d5, [pc, #-736]	; 8002c88 <IVK+0x1d10>
 8002f68:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002f6c:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8002f70:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002f74:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002f78:	ee25 5b07 	vmul.f64	d5, d5, d7
	              e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) -
 8002f7c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002f80:	ee25 7b07 	vmul.f64	d7, d5, d7
	               J_inv_tmp_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002f84:	ee36 8b07 	vadd.f64	d8, d6, d7
	         2.8921178332800004E+6 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002f98:	f107 030c 	add.w	r3, r7, #12
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	edd3 7a00 	vldr	s15, [r3]
 8002fa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fa8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002fac:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	330c      	adds	r3, #12
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fc0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002fc4:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8002c98 <IVK+0x1d20>
 8002fc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002fcc:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8002ca0 <IVK+0x1d28>
 8002fd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002fd4:	ed1f 6bd6 	vldr	d6, [pc, #-856]	; 8002c80 <IVK+0x1d08>
 8002fd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002fdc:	ed1f 6bda 	vldr	d6, [pc, #-872]	; 8002c78 <IVK+0x1d00>
 8002fe0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002fe4:	eeb0 0b47 	vmov.f64	d0, d7
 8002fe8:	f011 f84a 	bl	8014080 <sin>
 8002fec:	eeb0 7b40 	vmov.f64	d7, d0
	         2.8921178332800004E+6 *
 8002ff0:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8002c88 <IVK+0x1d10>
 8002ff4:	ee27 6b06 	vmul.f64	d6, d7, d6
	                  -0.73665) +
	                 1.52205) *
 8002ff8:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002ffc:	ee26 6b07 	vmul.f64	d6, d6, d7
	             J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8003000:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003004:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003008:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800300c:	ee26 7b07 	vmul.f64	d7, d6, d7
	              e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) -
 8003010:	ee38 6b47 	vsub.f64	d6, d8, d7
	        211366.80000000002 * c_J_inv_tmp_tmp * c_J_inv_tmp * e_J_inv_tmp_tmp *
 8003014:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003018:	ed1f 5be3 	vldr	d5, [pc, #-908]	; 8002c90 <IVK+0x1d18>
 800301c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003020:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003024:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003028:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800302c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003030:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003034:	ee25 7b07 	vmul.f64	d7, d5, d7
	             J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8003038:	ee36 8b07 	vadd.f64	d8, d6, d7
	            d_J_inv_tmp_tmp) -
	       211366.80000000002 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800303c:	f107 030c 	add.w	r3, r7, #12
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3304      	adds	r3, #4
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3308      	adds	r3, #8
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800305c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003060:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003064:	f107 030c 	add.w	r3, r7, #12
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	edd3 7a00 	vldr	s15, [r3]
 8003070:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003074:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003078:	ed1f 6bf9 	vldr	d6, [pc, #-996]	; 8002c98 <IVK+0x1d20>
 800307c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003080:	ed1f 6bf9 	vldr	d6, [pc, #-996]	; 8002ca0 <IVK+0x1d28>
 8003084:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003088:	ed9f 6bf9 	vldr	d6, [pc, #996]	; 8003470 <IVK+0x24f8>
 800308c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003090:	ed9f 6bf9 	vldr	d6, [pc, #996]	; 8003478 <IVK+0x2500>
 8003094:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003098:	eeb0 0b47 	vmov.f64	d0, d7
 800309c:	f010 fff0 	bl	8014080 <sin>
 80030a0:	eeb0 7b40 	vmov.f64	d7, d0
	       211366.80000000002 *
 80030a4:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8003480 <IVK+0x2508>
 80030a8:	ee27 6b06 	vmul.f64	d6, d7, d6
	                -0.73665) +
	               1.52205) *
 80030ac:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80030b0:	ee26 6b07 	vmul.f64	d6, d6, d7
	           d_J_inv_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) /
 80030b4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80030b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030bc:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80030c0:	ee26 7b07 	vmul.f64	d7, d6, d7
	            d_J_inv_tmp_tmp) -
 80030c4:	ee38 7b47 	vsub.f64	d7, d8, d7
	      4.0 *
 80030c8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80030cc:	ee27 8b06 	vmul.f64	d8, d7, d6
	      (9.0 *
	       (((((((((((21136.68 * c_J_inv_tmp_tmp * c_J_inv_tmp * e_J_inv_tmp_tmp *
 80030d0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80030d4:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8003488 <IVK+0x2510>
 80030d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80030dc:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80030e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030e4:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80030e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030ec:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80030f0:	ee26 9b07 	vmul.f64	d9, d6, d7
	                      d -
	                  21136.68 *
	                      sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3304      	adds	r3, #4
 80030fc:	edd3 7a00 	vldr	s15, [r3]
 8003100:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003104:	f107 030c 	add.w	r3, r7, #12
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3308      	adds	r3, #8
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003114:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003118:	ee36 6b07 	vadd.f64	d6, d6, d7
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800312c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003130:	ed9f 6be3 	vldr	d6, [pc, #908]	; 80034c0 <IVK+0x2548>
 8003134:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003138:	ed9f 6be3 	vldr	d6, [pc, #908]	; 80034c8 <IVK+0x2550>
 800313c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003140:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8003470 <IVK+0x24f8>
 8003144:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003148:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8003478 <IVK+0x2500>
 800314c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003150:	eeb0 0b47 	vmov.f64	d0, d7
 8003154:	f010 ff94 	bl	8014080 <sin>
 8003158:	eeb0 7b40 	vmov.f64	d7, d0
	                  21136.68 *
 800315c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8003488 <IVK+0x2510>
 8003160:	ee27 6b06 	vmul.f64	d6, d7, d6
	                           -0.73665) +
	                          1.52205) *
 8003164:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003168:	ee26 6b07 	vmul.f64	d6, d6, d7
	                      d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 800316c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003170:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003174:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003178:	ee26 7b07 	vmul.f64	d7, d6, d7
	                      d -
 800317c:	ee39 6b47 	vsub.f64	d6, d9, d7
	                 d10 * d1) -
 8003180:	ed97 5b4a 	vldr	d5, [r7, #296]	; 0x128
 8003184:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8003188:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 800318c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d9 * d1) +
 8003190:	ed97 5b4c 	vldr	d5, [r7, #304]	; 0x130
 8003194:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8003198:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d10 * d1) -
 800319c:	ee36 6b47 	vsub.f64	d6, d6, d7
	               24629.28 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp * d) -
 80031a0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80031a4:	ed9f 5bba 	vldr	d5, [pc, #744]	; 8003490 <IVK+0x2518>
 80031a8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80031ac:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80031b0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80031b4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80031b8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80031bc:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80031c0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d9 * d1) +
 80031c4:	ee36 9b07 	vadd.f64	d9, d6, d7
	              24629.28 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80031c8:	f107 030c 	add.w	r3, r7, #12
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3304      	adds	r3, #4
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	edd3 7a00 	vldr	s15, [r3]
 80031e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80031ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003200:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003204:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80034c0 <IVK+0x2548>
 8003208:	ee37 7b06 	vadd.f64	d7, d7, d6
 800320c:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80034c8 <IVK+0x2550>
 8003210:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003214:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8003470 <IVK+0x24f8>
 8003218:	ee37 7b46 	vsub.f64	d7, d7, d6
 800321c:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8003478 <IVK+0x2500>
 8003220:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003224:	eeb0 0b47 	vmov.f64	d0, d7
 8003228:	f010 ff2a 	bl	8014080 <sin>
 800322c:	eeb0 7b40 	vmov.f64	d7, d0
	              24629.28 *
 8003230:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8003490 <IVK+0x2518>
 8003234:	ee27 6b06 	vmul.f64	d6, d7, d6
	                       -0.73665) +
	                      1.52205) *
 8003238:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 800323c:	ee26 6b07 	vmul.f64	d6, d6, d7
	                  J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8003240:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003244:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003248:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 800324c:	ee26 7b07 	vmul.f64	d7, d6, d7
	               24629.28 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp * d) -
 8003250:	ee39 6b47 	vsub.f64	d6, d9, d7
	             d2 * d1) -
 8003254:	ed97 5b5a 	vldr	d5, [r7, #360]	; 0x168
 8003258:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800325c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8003260:	ee36 6b07 	vadd.f64	d6, d6, d7
	            d12 * d1) +
 8003264:	ed97 5b46 	vldr	d5, [r7, #280]	; 0x118
 8003268:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800326c:	ee25 7b07 	vmul.f64	d7, d5, d7
	             d2 * d1) -
 8003270:	ee36 6b47 	vsub.f64	d6, d6, d7
	           289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8003274:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003278:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8003498 <IVK+0x2520>
 800327c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003280:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003284:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003288:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800328c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003290:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003294:	ee25 7b07 	vmul.f64	d7, d5, d7
	            d12 * d1) +
 8003298:	ee36 6b07 	vadd.f64	d6, d6, d7
	          e_J_inv_tmp * d) +
 800329c:	ed97 5b5e 	vldr	d5, [r7, #376]	; 0x178
 80032a0:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80032a4:	ee25 7b07 	vmul.f64	d7, d5, d7
	           289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 80032a8:	ee36 6b47 	vsub.f64	d6, d6, d7
	         d13 * d1) -
 80032ac:	ed97 5b44 	vldr	d5, [r7, #272]	; 0x110
 80032b0:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80032b4:	ee25 7b07 	vmul.f64	d7, d5, d7
	          e_J_inv_tmp * d) +
 80032b8:	ee36 6b07 	vadd.f64	d6, d6, d7
	        e_J_inv_tmp * d1));
 80032bc:	ed97 5b5e 	vldr	d5, [r7, #376]	; 0x178
 80032c0:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80032c4:	ee25 7b07 	vmul.f64	d7, d5, d7
	         d13 * d1) -
 80032c8:	ee36 7b47 	vsub.f64	d7, d6, d7
	      (9.0 *
 80032cc:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80032d0:	ee27 6b06 	vmul.f64	d6, d7, d6
	           d_J_inv_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) /
 80032d4:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[3] =
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	ed83 7b06 	vstr	d7, [r3, #24]
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80032e0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80032e4:	ee27 6b07 	vmul.f64	d6, d7, d7
 80032e8:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 80032ec:	ee26 6b07 	vmul.f64	d6, d6, d7
	                       d9 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80032f0:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80032f4:	ee27 5b07 	vmul.f64	d5, d7, d7
 80032f8:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 80032fc:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8003300:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d10 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003304:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003308:	ee27 5b07 	vmul.f64	d5, d7, d7
 800330c:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8003310:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       d9 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003314:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d9 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003318:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800331c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003320:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8003324:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      d10 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003328:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d2 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800332c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003330:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003334:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8003338:	ee25 7b07 	vmul.f64	d7, d5, d7
	                     d9 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800333c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d12 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003340:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003344:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003348:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800334c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                    d2 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003350:	ee36 6b47 	vsub.f64	d6, d6, d7
	                  d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003354:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003358:	ee27 5b07 	vmul.f64	d5, d7, d7
 800335c:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8003360:	ee25 7b07 	vmul.f64	d7, d5, d7
	                   d12 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003364:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d12 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003368:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800336c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003370:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8003374:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003378:	ee36 6b47 	vsub.f64	d6, d6, d7
	                d13 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800337c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003380:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003384:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 8003388:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d12 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800338c:	ee36 6b07 	vadd.f64	d6, d6, d7
	               e_J_inv_tmp * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003390:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003394:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003398:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800339c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d13 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80033a0:	ee36 6b47 	vsub.f64	d6, d6, d7
	              d13 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80033a4:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80033a8:	ee27 5b07 	vmul.f64	d5, d7, d7
 80033ac:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 80033b0:	ee25 7b07 	vmul.f64	d7, d5, d7
	               e_J_inv_tmp * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80033b4:	ee36 6b07 	vadd.f64	d6, d6, d7
	             e_J_inv_tmp * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp));
 80033b8:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80033bc:	ee27 5b07 	vmul.f64	d5, d7, d7
 80033c0:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80033c4:	ee25 7b07 	vmul.f64	d7, d5, d7
	              d13 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80033c8:	ee36 7b47 	vsub.f64	d7, d6, d7
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80033cc:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80033d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033d4:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	  d1 = d15 * f_J_inv_tmp_tmp;
 80033d8:	ed97 6b40 	vldr	d6, [r7, #256]	; 0x100
 80033dc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80033e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033e4:	ed87 7b5c 	vstr	d7, [r7, #368]	; 0x170
	  d2 = d14 * f_J_inv_tmp_tmp;
 80033e8:	ed97 6b42 	vldr	d6, [r7, #264]	; 0x108
 80033ec:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80033f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033f4:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
	  dv[8] =
	      -(4.0 *
	        (((((((((((((((221663.52 *
	                           sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3304      	adds	r3, #4
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3308      	adds	r3, #8
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003418:	ee37 7b07 	vadd.f64	d7, d7, d7
 800341c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003420:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80034c0 <IVK+0x2548>
 8003424:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003428:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80034c8 <IVK+0x2550>
 800342c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003430:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003470 <IVK+0x24f8>
 8003434:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003438:	eeb0 0b47 	vmov.f64	d0, d7
 800343c:	f010 fe20 	bl	8014080 <sin>
 8003440:	eeb0 7b40 	vmov.f64	d7, d0
	        (((((((((((((((221663.52 *
 8003444:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80034a0 <IVK+0x2528>
 8003448:	ee27 8b06 	vmul.f64	d8, d7, d6
	                               -0.73665) *
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3304      	adds	r3, #4
 8003454:	ed93 7a00 	vldr	s14, [r3]
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3308      	adds	r3, #8
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003468:	e03a      	b.n	80034e0 <IVK+0x2568>
 800346a:	bf00      	nop
 800346c:	f3af 8000 	nop.w
 8003470:	05532618 	.word	0x05532618
 8003474:	3fe792a3 	.word	0x3fe792a3
 8003478:	19ce075f 	.word	0x19ce075f
 800347c:	3ff85a51 	.word	0x3ff85a51
 8003480:	66666667 	.word	0x66666667
 8003484:	4109cd36 	.word	0x4109cd36
 8003488:	851eb852 	.word	0x851eb852
 800348c:	40d4a42b 	.word	0x40d4a42b
 8003490:	eb851eb8 	.word	0xeb851eb8
 8003494:	40d80d51 	.word	0x40d80d51
 8003498:	2220bc38 	.word	0x2220bc38
 800349c:	4111a6ef 	.word	0x4111a6ef
 80034a0:	28f5c28f 	.word	0x28f5c28f
 80034a4:	410b0efc 	.word	0x410b0efc
 80034a8:	0664d3c0 	.word	0x0664d3c0
 80034ac:	4143dbcd 	.word	0x4143dbcd
 80034b0:	f5c28f5d 	.word	0xf5c28f5d
 80034b4:	410738b0 	.word	0x410738b0
 80034b8:	00000000 	.word	0x00000000
 80034bc:	40f56300 	.word	0x40f56300
 80034c0:	45a1cac1 	.word	0x45a1cac1
 80034c4:	3ffaf3b6 	.word	0x3ffaf3b6
 80034c8:	39581062 	.word	0x39581062
 80034cc:	3fecc8b4 	.word	0x3fecc8b4
 80034d0:	19ce075f 	.word	0x19ce075f
 80034d4:	3ff85a51 	.word	0x3ff85a51
 80034d8:	05532618 	.word	0x05532618
 80034dc:	3fe792a3 	.word	0x3fe792a3
 80034e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034e4:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 80034c0 <IVK+0x2548>
 80034e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034ec:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 80034c8 <IVK+0x2550>
 80034f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034f4:	eeb0 0b47 	vmov.f64	d0, d7
 80034f8:	f010 fd6e 	bl	8013fd8 <cos>
 80034fc:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8003500:	ee28 6b07 	vmul.f64	d6, d8, d7
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003504:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003508:	ee26 8b07 	vmul.f64	d8, d6, d7
	                           d_J_inv_tmp_tmp -
	                       221663.52 *
	                           cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 800350c:	f107 030c 	add.w	r3, r7, #12
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3304      	adds	r3, #4
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800352c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003530:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003534:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 80034c0 <IVK+0x2548>
 8003538:	ee37 7b06 	vadd.f64	d7, d7, d6
 800353c:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 80034c8 <IVK+0x2550>
 8003540:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003544:	ed1f 6b1c 	vldr	d6, [pc, #-112]	; 80034d8 <IVK+0x2560>
 8003548:	ee37 7b46 	vsub.f64	d7, d7, d6
 800354c:	eeb0 0b47 	vmov.f64	d0, d7
 8003550:	f010 fd42 	bl	8013fd8 <cos>
 8003554:	eeb0 7b40 	vmov.f64	d7, d0
	                       221663.52 *
 8003558:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 80034a0 <IVK+0x2528>
 800355c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                               -0.73665) *
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3304      	adds	r3, #4
 8003568:	ed93 7a00 	vldr	s14, [r3]
 800356c:	f107 030c 	add.w	r3, r7, #12
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3308      	adds	r3, #8
 8003574:	edd3 7a00 	vldr	s15, [r3]
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003580:	ed1f 6b31 	vldr	d6, [pc, #-196]	; 80034c0 <IVK+0x2548>
 8003584:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003588:	ed1f 6b31 	vldr	d6, [pc, #-196]	; 80034c8 <IVK+0x2550>
 800358c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003590:	eeb0 0b47 	vmov.f64	d0, d7
 8003594:	f010 fd74 	bl	8014080 <sin>
 8003598:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 800359c:	ee29 6b07 	vmul.f64	d6, d9, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80035a0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80035a4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                           d_J_inv_tmp_tmp -
 80035a8:	ee38 8b47 	vsub.f64	d8, d8, d7
	                           d_J_inv_tmp_tmp) -
	                      2.6029060499520004E+6 *
	                          cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3304      	adds	r3, #4
 80035b4:	edd3 7a00 	vldr	s15, [r3]
 80035b8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3308      	adds	r3, #8
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80035d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80035d4:	ed1f 6b46 	vldr	d6, [pc, #-280]	; 80034c0 <IVK+0x2548>
 80035d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035dc:	ed1f 6b46 	vldr	d6, [pc, #-280]	; 80034c8 <IVK+0x2550>
 80035e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80035e4:	ed1f 6b44 	vldr	d6, [pc, #-272]	; 80034d8 <IVK+0x2560>
 80035e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80035ec:	eeb0 0b47 	vmov.f64	d0, d7
 80035f0:	f010 fcf2 	bl	8013fd8 <cos>
 80035f4:	eeb0 7b40 	vmov.f64	d7, d0
	                      2.6029060499520004E+6 *
 80035f8:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 80034a8 <IVK+0x2530>
 80035fc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                              -0.73665) *
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003600:	f107 030c 	add.w	r3, r7, #12
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3304      	adds	r3, #4
 8003608:	edd3 7a00 	vldr	s15, [r3]
 800360c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003610:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 80034c0 <IVK+0x2548>
 8003614:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003618:	eeb0 0b47 	vmov.f64	d0, d7
 800361c:	f010 fd30 	bl	8014080 <sin>
 8003620:	eeb0 7b40 	vmov.f64	d7, d0
	                              -0.73665) *
 8003624:	ee29 6b07 	vmul.f64	d6, d9, d7
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003628:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800362c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                           d_J_inv_tmp_tmp) -
 8003630:	ee38 8b47 	vsub.f64	d8, d8, d7
	                     2.6029060499520004E+6 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3304      	adds	r3, #4
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3308      	adds	r3, #8
 800364c:	edd3 7a00 	vldr	s15, [r3]
 8003650:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003654:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003658:	ee36 7b07 	vadd.f64	d7, d6, d7
 800365c:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80034c0 <IVK+0x2548>
 8003660:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003664:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80034c8 <IVK+0x2550>
 8003668:	ee37 7b46 	vsub.f64	d7, d7, d6
 800366c:	ed1f 6b66 	vldr	d6, [pc, #-408]	; 80034d8 <IVK+0x2560>
 8003670:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003674:	eeb0 0b47 	vmov.f64	d0, d7
 8003678:	f010 fd02 	bl	8014080 <sin>
 800367c:	eeb0 7b40 	vmov.f64	d7, d0
	                     2.6029060499520004E+6 *
 8003680:	ed1f 6b77 	vldr	d6, [pc, #-476]	; 80034a8 <IVK+0x2530>
 8003684:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003688:	f107 030c 	add.w	r3, r7, #12
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3304      	adds	r3, #4
 8003690:	edd3 7a00 	vldr	s15, [r3]
 8003694:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003698:	ed1f 6b77 	vldr	d6, [pc, #-476]	; 80034c0 <IVK+0x2548>
 800369c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80036a0:	eeb0 0b47 	vmov.f64	d0, d7
 80036a4:	f010 fc98 	bl	8013fd8 <cos>
 80036a8:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 80036ac:	ee29 6b07 	vmul.f64	d6, d9, d7
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80036b0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80036b4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80036b8:	ee38 6b07 	vadd.f64	d6, d8, d7
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80036bc:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80036c0:	ee36 8b07 	vadd.f64	d8, d6, d7
	                    d1) -
	                   190230.12000000002 *
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80036c4:	f107 030c 	add.w	r3, r7, #12
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3304      	adds	r3, #4
 80036cc:	ed93 7a00 	vldr	s14, [r3]
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3308      	adds	r3, #8
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036e4:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 80034c0 <IVK+0x2548>
 80036e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80036ec:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 80034c8 <IVK+0x2550>
 80036f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80036f4:	eeb0 0b47 	vmov.f64	d0, d7
 80036f8:	f010 fc6e 	bl	8013fd8 <cos>
 80036fc:	eeb0 7b40 	vmov.f64	d7, d0
	                   190230.12000000002 *
 8003700:	ed1f 6b95 	vldr	d6, [pc, #-596]	; 80034b0 <IVK+0x2538>
 8003704:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3304      	adds	r3, #4
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003718:	ed1f 6b97 	vldr	d6, [pc, #-604]	; 80034c0 <IVK+0x2548>
 800371c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003720:	eeb0 0b47 	vmov.f64	d0, d7
 8003724:	f010 fcac 	bl	8014080 <sin>
 8003728:	eeb0 7b40 	vmov.f64	d7, d0
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800372c:	ee29 6b07 	vmul.f64	d6, d9, d7
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003730:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003734:	ee26 7b07 	vmul.f64	d7, d6, d7
	                    d1) -
 8003738:	ee38 8b47 	vsub.f64	d8, d8, d7
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800373c:	f107 030c 	add.w	r3, r7, #12
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3304      	adds	r3, #4
 8003744:	ed93 7a00 	vldr	s14, [r3]
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3308      	adds	r3, #8
 8003750:	edd3 7a00 	vldr	s15, [r3]
 8003754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003758:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800375c:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 80034c0 <IVK+0x2548>
 8003760:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003764:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 80034c8 <IVK+0x2550>
 8003768:	ee37 7b46 	vsub.f64	d7, d7, d6
 800376c:	eeb0 0b47 	vmov.f64	d0, d7
 8003770:	f010 fc86 	bl	8014080 <sin>
 8003774:	eeb0 7b40 	vmov.f64	d7, d0
 8003778:	ed1f 6bb3 	vldr	d6, [pc, #-716]	; 80034b0 <IVK+0x2538>
 800377c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003780:	f107 030c 	add.w	r3, r7, #12
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3304      	adds	r3, #4
 8003788:	edd3 7a00 	vldr	s15, [r3]
 800378c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003790:	ed1f 6bb5 	vldr	d6, [pc, #-724]	; 80034c0 <IVK+0x2548>
 8003794:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003798:	eeb0 0b47 	vmov.f64	d0, d7
 800379c:	f010 fc1c 	bl	8013fd8 <cos>
 80037a0:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80037a4:	ee29 6b07 	vmul.f64	d6, d9, d7
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80037a8:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80037ac:	ee26 7b07 	vmul.f64	d7, d6, d7
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80037b0:	ee38 6b07 	vadd.f64	d6, d8, d7
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 80037b4:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80037b8:	ee36 8b07 	vadd.f64	d8, d6, d7
	                 d2) +
	                87600.0 *
	                    cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3304      	adds	r3, #4
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80037e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	edd3 7a00 	vldr	s15, [r3]
 80037f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037f8:	ed1f 6bcf 	vldr	d6, [pc, #-828]	; 80034c0 <IVK+0x2548>
 80037fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003800:	ed1f 6bcf 	vldr	d6, [pc, #-828]	; 80034c8 <IVK+0x2550>
 8003804:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003808:	ed1f 6bcd 	vldr	d6, [pc, #-820]	; 80034d8 <IVK+0x2560>
 800380c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003810:	ed1f 6bd1 	vldr	d6, [pc, #-836]	; 80034d0 <IVK+0x2558>
 8003814:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003818:	eeb0 0b47 	vmov.f64	d0, d7
 800381c:	f010 fbdc 	bl	8013fd8 <cos>
 8003820:	eeb0 7b40 	vmov.f64	d7, d0
	                87600.0 *
 8003824:	ed1f 6bdc 	vldr	d6, [pc, #-880]	; 80034b8 <IVK+0x2540>
 8003828:	ee27 9b06 	vmul.f64	d9, d7, d6
	                         -0.73665) +
	                        1.52205) *
	                    sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3304      	adds	r3, #4
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800383c:	f107 030c 	add.w	r3, r7, #12
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3308      	adds	r3, #8
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800384c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003850:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	edd3 7a00 	vldr	s15, [r3]
 8003860:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003864:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003868:	ed1f 6beb 	vldr	d6, [pc, #-940]	; 80034c0 <IVK+0x2548>
 800386c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003870:	ed1f 6beb 	vldr	d6, [pc, #-940]	; 80034c8 <IVK+0x2550>
 8003874:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003878:	ed1f 6be9 	vldr	d6, [pc, #-932]	; 80034d8 <IVK+0x2560>
 800387c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003880:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 80034d0 <IVK+0x2558>
 8003884:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003888:	eeb0 0b47 	vmov.f64	d0, d7
 800388c:	f010 fbf8 	bl	8014080 <sin>
 8003890:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8003894:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         -0.73665) +
	                        1.52205) *
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8003898:	f107 030c 	add.w	r3, r7, #12
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3304      	adds	r3, #4
 80038a0:	ed93 7a00 	vldr	s14, [r3]
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038b8:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8003c78 <IVK+0x2d00>
 80038bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038c0:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8003c80 <IVK+0x2d08>
 80038c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038c8:	eeb0 0b47 	vmov.f64	d0, d7
 80038cc:	f010 fb84 	bl	8013fd8 <cos>
 80038d0:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 80038d4:	ee29 6b07 	vmul.f64	d6, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 80038d8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80038dc:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 d2) +
 80038e0:	ee38 8b07 	vadd.f64	d8, d8, d7
	               1.02865176E+6 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80038e4:	f107 030c 	add.w	r3, r7, #12
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3304      	adds	r3, #4
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3308      	adds	r3, #8
 80038fc:	edd3 7a00 	vldr	s15, [r3]
 8003900:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003904:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003908:	ee36 6b07 	vadd.f64	d6, d6, d7
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	330c      	adds	r3, #12
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800391c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003920:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8003c78 <IVK+0x2d00>
 8003924:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003928:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8003c80 <IVK+0x2d08>
 800392c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003930:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8003ca8 <IVK+0x2d30>
 8003934:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003938:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8003ca0 <IVK+0x2d28>
 800393c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003940:	eeb0 0b47 	vmov.f64	d0, d7
 8003944:	f010 fb48 	bl	8013fd8 <cos>
 8003948:	eeb0 7b40 	vmov.f64	d7, d0
	               1.02865176E+6 *
 800394c:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8003c88 <IVK+0x2d10>
 8003950:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003954:	f107 030c 	add.w	r3, r7, #12
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3304      	adds	r3, #4
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003964:	f107 030c 	add.w	r3, r7, #12
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3308      	adds	r3, #8
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003974:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003978:	ee36 6b07 	vadd.f64	d6, d6, d7
 800397c:	f107 030c 	add.w	r3, r7, #12
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800398c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003990:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8003c78 <IVK+0x2d00>
 8003994:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003998:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8003c80 <IVK+0x2d08>
 800399c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80039a0:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8003ca8 <IVK+0x2d30>
 80039a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80039a8:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8003ca0 <IVK+0x2d28>
 80039ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039b0:	eeb0 0b47 	vmov.f64	d0, d7
 80039b4:	f010 fb64 	bl	8014080 <sin>
 80039b8:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80039bc:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        -0.73665) +
	                       1.52205) *
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80039c0:	f107 030c 	add.w	r3, r7, #12
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3304      	adds	r3, #4
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039d0:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8003c78 <IVK+0x2d00>
 80039d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039d8:	eeb0 0b47 	vmov.f64	d0, d7
 80039dc:	f010 fafc 	bl	8013fd8 <cos>
 80039e0:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80039e4:	ee29 6b07 	vmul.f64	d6, d9, d7
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80039e8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80039ec:	ee26 7b07 	vmul.f64	d7, d6, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 80039f0:	ee38 8b07 	vadd.f64	d8, d8, d7
	              246292.8 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3304      	adds	r3, #4
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a04:	f107 030c 	add.w	r3, r7, #12
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a14:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003a18:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	edd3 7a00 	vldr	s15, [r3]
 8003a28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a30:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8003c78 <IVK+0x2d00>
 8003a34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a38:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8003c80 <IVK+0x2d08>
 8003a3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a40:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8003ca8 <IVK+0x2d30>
 8003a44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a48:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8003ca0 <IVK+0x2d28>
 8003a4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a50:	eeb0 0b47 	vmov.f64	d0, d7
 8003a54:	f010 fb14 	bl	8014080 <sin>
 8003a58:	eeb0 7b40 	vmov.f64	d7, d0
	              246292.8 *
 8003a5c:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8003c90 <IVK+0x2d18>
 8003a60:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	edd3 7a00 	vldr	s15, [r3]
 8003a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003a88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a8c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8003c78 <IVK+0x2d00>
 8003a90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a94:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8003c80 <IVK+0x2d08>
 8003a98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a9c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8003ca8 <IVK+0x2d30>
 8003aa0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003aa4:	eeb0 0b47 	vmov.f64	d0, d7
 8003aa8:	f010 fa96 	bl	8013fd8 <cos>
 8003aac:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8003ab0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 8003ab4:	f107 030c 	add.w	r3, r7, #12
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3304      	adds	r3, #4
 8003abc:	ed93 7a00 	vldr	s14, [r3]
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ad4:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8003c78 <IVK+0x2d00>
 8003ad8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003adc:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8003c80 <IVK+0x2d08>
 8003ae0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ae4:	eeb0 0b47 	vmov.f64	d0, d7
 8003ae8:	f010 faca 	bl	8014080 <sin>
 8003aec:	eeb0 7b40 	vmov.f64	d7, d0
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003af0:	ee29 6b07 	vmul.f64	d6, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 8003af4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003af8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8003afc:	ee38 8b07 	vadd.f64	d8, d8, d7
	             246292.8 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3304      	adds	r3, #4
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b10:	f107 030c 	add.w	r3, r7, #12
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3308      	adds	r3, #8
 8003b18:	edd3 7a00 	vldr	s15, [r3]
 8003b1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003b24:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b28:	f107 030c 	add.w	r3, r7, #12
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	edd3 7a00 	vldr	s15, [r3]
 8003b34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b3c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8003c78 <IVK+0x2d00>
 8003b40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b44:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8003c80 <IVK+0x2d08>
 8003b48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003b4c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8003ca8 <IVK+0x2d30>
 8003b50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003b54:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8003ca0 <IVK+0x2d28>
 8003b58:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b5c:	eeb0 0b47 	vmov.f64	d0, d7
 8003b60:	f010 fa8e 	bl	8014080 <sin>
 8003b64:	eeb0 7b40 	vmov.f64	d7, d0
	             246292.8 *
 8003b68:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8003c90 <IVK+0x2d18>
 8003b6c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003b70:	f107 030c 	add.w	r3, r7, #12
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3304      	adds	r3, #4
 8003b78:	edd3 7a00 	vldr	s15, [r3]
 8003b7c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3308      	adds	r3, #8
 8003b88:	edd3 7a00 	vldr	s15, [r3]
 8003b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b90:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003b94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b98:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003c78 <IVK+0x2d00>
 8003b9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ba0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003c80 <IVK+0x2d08>
 8003ba4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ba8:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8003ca8 <IVK+0x2d30>
 8003bac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003bb0:	eeb0 0b47 	vmov.f64	d0, d7
 8003bb4:	f010 fa64 	bl	8014080 <sin>
 8003bb8:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8003bbc:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8003bc0:	f107 030c 	add.w	r3, r7, #12
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	ed93 7a00 	vldr	s14, [r3]
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003be0:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003c78 <IVK+0x2d00>
 8003be4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003be8:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003c80 <IVK+0x2d08>
 8003bec:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003bf0:	eeb0 0b47 	vmov.f64	d0, d7
 8003bf4:	f010 f9f0 	bl	8013fd8 <cos>
 8003bf8:	eeb0 7b40 	vmov.f64	d7, d0
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003bfc:	ee29 6b07 	vmul.f64	d6, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8003c00:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003c04:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 8003c08:	ee38 8b47 	vsub.f64	d8, d8, d7
	            2.8921178332800004E+6 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003c0c:	f107 030c 	add.w	r3, r7, #12
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3304      	adds	r3, #4
 8003c14:	edd3 7a00 	vldr	s15, [r3]
 8003c18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c1c:	f107 030c 	add.w	r3, r7, #12
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3308      	adds	r3, #8
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c2c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003c30:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003c34:	f107 030c 	add.w	r3, r7, #12
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	edd3 7a00 	vldr	s15, [r3]
 8003c40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c48:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8003c78 <IVK+0x2d00>
 8003c4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c50:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8003c80 <IVK+0x2d08>
 8003c54:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003c58:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003ca8 <IVK+0x2d30>
 8003c5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003c60:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003ca0 <IVK+0x2d28>
 8003c64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c68:	eeb0 0b47 	vmov.f64	d0, d7
 8003c6c:	f010 fa08 	bl	8014080 <sin>
 8003c70:	eeb0 7b40 	vmov.f64	d7, d0
 8003c74:	e030      	b.n	8003cd8 <IVK+0x2d60>
 8003c76:	bf00      	nop
 8003c78:	45a1cac1 	.word	0x45a1cac1
 8003c7c:	3ffaf3b6 	.word	0x3ffaf3b6
 8003c80:	39581062 	.word	0x39581062
 8003c84:	3fecc8b4 	.word	0x3fecc8b4
 8003c88:	851eb852 	.word	0x851eb852
 8003c8c:	412f6457 	.word	0x412f6457
 8003c90:	66666666 	.word	0x66666666
 8003c94:	410e10a6 	.word	0x410e10a6
 8003c98:	eaa8eb47 	.word	0xeaa8eb47
 8003c9c:	414610aa 	.word	0x414610aa
 8003ca0:	19ce075f 	.word	0x19ce075f
 8003ca4:	3ff85a51 	.word	0x3ff85a51
 8003ca8:	05532618 	.word	0x05532618
 8003cac:	3fe792a3 	.word	0x3fe792a3
 8003cb0:	66666667 	.word	0x66666667
 8003cb4:	4109cd36 	.word	0x4109cd36
 8003cb8:	00000000 	.word	0x00000000
 8003cbc:	40440000 	.word	0x40440000
 8003cc0:	45a1cac1 	.word	0x45a1cac1
 8003cc4:	3ffaf3b6 	.word	0x3ffaf3b6
 8003cc8:	39581062 	.word	0x39581062
 8003ccc:	3fecc8b4 	.word	0x3fecc8b4
 8003cd0:	00000000 	.word	0x00000000
 8003cd4:	404e0000 	.word	0x404e0000
	            2.8921178332800004E+6 *
 8003cd8:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8003c98 <IVK+0x2d20>
 8003cdc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003ce0:	f107 030c 	add.w	r3, r7, #12
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	edd3 7a00 	vldr	s15, [r3]
 8003cec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003cf0:	f107 030c 	add.w	r3, r7, #12
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	edd3 7a00 	vldr	s15, [r3]
 8003cfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003d04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d08:	ed1f 6b13 	vldr	d6, [pc, #-76]	; 8003cc0 <IVK+0x2d48>
 8003d0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d10:	ed1f 6b13 	vldr	d6, [pc, #-76]	; 8003cc8 <IVK+0x2d50>
 8003d14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d18:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8003ca8 <IVK+0x2d30>
 8003d1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d20:	eeb0 0b47 	vmov.f64	d0, d7
 8003d24:	f010 f958 	bl	8013fd8 <cos>
 8003d28:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 8003d2c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3304      	adds	r3, #4
 8003d38:	edd3 7a00 	vldr	s15, [r3]
 8003d3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d40:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8003cc0 <IVK+0x2d48>
 8003d44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d48:	eeb0 0b47 	vmov.f64	d0, d7
 8003d4c:	f010 f998 	bl	8014080 <sin>
 8003d50:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003d54:	ee29 6b07 	vmul.f64	d6, d9, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 8003d58:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003d5c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8003d60:	ee38 8b07 	vadd.f64	d8, d8, d7
	           2.8921178332800004E+6 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003d64:	f107 030c 	add.w	r3, r7, #12
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	edd3 7a00 	vldr	s15, [r3]
 8003d70:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003d88:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003d8c:	f107 030c 	add.w	r3, r7, #12
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	edd3 7a00 	vldr	s15, [r3]
 8003d98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003da0:	ed1f 6b39 	vldr	d6, [pc, #-228]	; 8003cc0 <IVK+0x2d48>
 8003da4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003da8:	ed1f 6b39 	vldr	d6, [pc, #-228]	; 8003cc8 <IVK+0x2d50>
 8003dac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003db0:	ed1f 6b43 	vldr	d6, [pc, #-268]	; 8003ca8 <IVK+0x2d30>
 8003db4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003db8:	ed1f 6b47 	vldr	d6, [pc, #-284]	; 8003ca0 <IVK+0x2d28>
 8003dbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003dc0:	eeb0 0b47 	vmov.f64	d0, d7
 8003dc4:	f010 f95c 	bl	8014080 <sin>
 8003dc8:	eeb0 7b40 	vmov.f64	d7, d0
	           2.8921178332800004E+6 *
 8003dcc:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 8003c98 <IVK+0x2d20>
 8003dd0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	edd3 7a00 	vldr	s15, [r3]
 8003de0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3308      	adds	r3, #8
 8003dec:	edd3 7a00 	vldr	s15, [r3]
 8003df0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003df4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003df8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003dfc:	ed1f 6b50 	vldr	d6, [pc, #-320]	; 8003cc0 <IVK+0x2d48>
 8003e00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e04:	ed1f 6b50 	vldr	d6, [pc, #-320]	; 8003cc8 <IVK+0x2d50>
 8003e08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e0c:	ed1f 6b5a 	vldr	d6, [pc, #-360]	; 8003ca8 <IVK+0x2d30>
 8003e10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e14:	eeb0 0b47 	vmov.f64	d0, d7
 8003e18:	f010 f932 	bl	8014080 <sin>
 8003e1c:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8003e20:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8003e24:	f107 030c 	add.w	r3, r7, #12
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e34:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8003cc0 <IVK+0x2d48>
 8003e38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e3c:	eeb0 0b47 	vmov.f64	d0, d7
 8003e40:	f010 f8ca 	bl	8013fd8 <cos>
 8003e44:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003e48:	ee29 6b07 	vmul.f64	d6, d9, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8003e4c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003e50:	ee26 7b07 	vmul.f64	d7, d6, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 8003e54:	ee38 8b47 	vsub.f64	d8, d8, d7
	          211366.80000000002 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003e58:	f107 030c 	add.w	r3, r7, #12
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	edd3 7a00 	vldr	s15, [r3]
 8003e64:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e68:	f107 030c 	add.w	r3, r7, #12
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	edd3 7a00 	vldr	s15, [r3]
 8003e74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e78:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003e7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003e80:	f107 030c 	add.w	r3, r7, #12
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e94:	ed1f 6b76 	vldr	d6, [pc, #-472]	; 8003cc0 <IVK+0x2d48>
 8003e98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e9c:	ed1f 6b76 	vldr	d6, [pc, #-472]	; 8003cc8 <IVK+0x2d50>
 8003ea0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ea4:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8003ca8 <IVK+0x2d30>
 8003ea8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003eac:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 8003ca0 <IVK+0x2d28>
 8003eb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003eb4:	eeb0 0b47 	vmov.f64	d0, d7
 8003eb8:	f010 f8e2 	bl	8014080 <sin>
 8003ebc:	eeb0 7b40 	vmov.f64	d7, d0
	          211366.80000000002 *
 8003ec0:	ed1f 6b85 	vldr	d6, [pc, #-532]	; 8003cb0 <IVK+0x2d38>
 8003ec4:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8003ec8:	f107 030c 	add.w	r3, r7, #12
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	ed93 7a00 	vldr	s14, [r3]
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ee8:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 8003cc0 <IVK+0x2d48>
 8003eec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ef0:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 8003cc8 <IVK+0x2d50>
 8003ef4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ef8:	eeb0 0b47 	vmov.f64	d0, d7
 8003efc:	f010 f86c 	bl	8013fd8 <cos>
 8003f00:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8003f04:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	edd3 7a00 	vldr	s15, [r3]
 8003f14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f18:	ed1f 6b97 	vldr	d6, [pc, #-604]	; 8003cc0 <IVK+0x2d48>
 8003f1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f20:	eeb0 0b47 	vmov.f64	d0, d7
 8003f24:	f010 f8ac 	bl	8014080 <sin>
 8003f28:	eeb0 7b40 	vmov.f64	d7, d0
 8003f2c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8003f30:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003f34:	ee26 7b07 	vmul.f64	d7, d6, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8003f38:	ee38 8b07 	vadd.f64	d8, d8, d7
	              f_J_inv_tmp_tmp) -
	         211366.80000000002 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003f3c:	f107 030c 	add.w	r3, r7, #12
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3304      	adds	r3, #4
 8003f44:	edd3 7a00 	vldr	s15, [r3]
 8003f48:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003f4c:	f107 030c 	add.w	r3, r7, #12
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3308      	adds	r3, #8
 8003f54:	edd3 7a00 	vldr	s15, [r3]
 8003f58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f5c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003f60:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003f64:	f107 030c 	add.w	r3, r7, #12
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f78:	ed1f 6baf 	vldr	d6, [pc, #-700]	; 8003cc0 <IVK+0x2d48>
 8003f7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f80:	ed1f 6baf 	vldr	d6, [pc, #-700]	; 8003cc8 <IVK+0x2d50>
 8003f84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f88:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8003ca8 <IVK+0x2d30>
 8003f8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f90:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 8003ca0 <IVK+0x2d28>
 8003f94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f98:	eeb0 0b47 	vmov.f64	d0, d7
 8003f9c:	f010 f870 	bl	8014080 <sin>
 8003fa0:	eeb0 7b40 	vmov.f64	d7, d0
	         211366.80000000002 *
 8003fa4:	ed1f 6bbe 	vldr	d6, [pc, #-760]	; 8003cb0 <IVK+0x2d38>
 8003fa8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8003fac:	f107 030c 	add.w	r3, r7, #12
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	ed93 7a00 	vldr	s14, [r3]
 8003fb8:	f107 030c 	add.w	r3, r7, #12
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	edd3 7a00 	vldr	s15, [r3]
 8003fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fcc:	ed1f 6bc4 	vldr	d6, [pc, #-784]	; 8003cc0 <IVK+0x2d48>
 8003fd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003fd4:	ed1f 6bc4 	vldr	d6, [pc, #-784]	; 8003cc8 <IVK+0x2d50>
 8003fd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003fdc:	eeb0 0b47 	vmov.f64	d0, d7
 8003fe0:	f010 f84e 	bl	8014080 <sin>
 8003fe4:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8003fe8:	ee29 9b07 	vmul.f64	d9, d9, d7
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8003fec:	f107 030c 	add.w	r3, r7, #12
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ffc:	ed1f 6bd0 	vldr	d6, [pc, #-832]	; 8003cc0 <IVK+0x2d48>
 8004000:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004004:	eeb0 0b47 	vmov.f64	d0, d7
 8004008:	f00f ffe6 	bl	8013fd8 <cos>
 800400c:	eeb0 7b40 	vmov.f64	d7, d0
 8004010:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004014:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8004018:	ee26 7b07 	vmul.f64	d7, d6, d7
	              f_J_inv_tmp_tmp) -
 800401c:	ee38 7b47 	vsub.f64	d7, d8, d7
	      -(4.0 *
 8004020:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004024:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004028:	eeb1 5b47 	vneg.f64	d5, d7
	             f_J_inv_tmp_tmp)) /
 800402c:	ed97 6b76 	vldr	d6, [r7, #472]	; 0x1d8
 8004030:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[8] =
 8004034:	f107 0310 	add.w	r3, r7, #16
 8004038:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	      d;
	  d9 = 9.0 * d11;
 800403c:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8004040:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8004044:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004048:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 800404c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8004050:	ed1f 6be7 	vldr	d6, [pc, #-924]	; 8003cb8 <IVK+0x2d40>
 8004054:	ee27 8b06 	vmul.f64	d8, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004058:	f107 030c 	add.w	r3, r7, #12
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3304      	adds	r3, #4
 8004060:	ed93 7a00 	vldr	s14, [r3]
 8004064:	f107 030c 	add.w	r3, r7, #12
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3308      	adds	r3, #8
 800406c:	edd3 7a00 	vldr	s15, [r3]
 8004070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004074:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004078:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8003cc0 <IVK+0x2d48>
 800407c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004080:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8003cc8 <IVK+0x2d50>
 8004084:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004088:	eeb0 0b47 	vmov.f64	d0, d7
 800408c:	f00f ffa4 	bl	8013fd8 <cos>
 8004090:	eeb0 7b40 	vmov.f64	d7, d0
 8004094:	ed1f 6bf2 	vldr	d6, [pc, #-968]	; 8003cd0 <IVK+0x2d58>
 8004098:	ee27 6b06 	vmul.f64	d6, d7, d6
	              704.556 * b_J_inv_tmp_tmp)) /
 800409c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80040a0:	ed9f 5bf1 	vldr	d5, [pc, #964]	; 8004468 <IVK+0x34f0>
 80040a4:	ee27 7b05 	vmul.f64	d7, d7, d5
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80040a8:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 80040ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 80040b0:	eeb1 5b47 	vneg.f64	d5, d7
	              704.556 * b_J_inv_tmp_tmp)) /
 80040b4:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 80040b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 80040bc:	f107 0310 	add.w	r3, r7, #16
 80040c0:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	           d9;
	  dv[18] =
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 80040c4:	f107 030c 	add.w	r3, r7, #12
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3304      	adds	r3, #4
 80040cc:	ed93 7a00 	vldr	s14, [r3]
 80040d0:	f107 030c 	add.w	r3, r7, #12
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3308      	adds	r3, #8
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040e4:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8004498 <IVK+0x3520>
 80040e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80040ec:	ed9f 6bec 	vldr	d6, [pc, #944]	; 80044a0 <IVK+0x3528>
 80040f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80040f4:	eeb0 0b47 	vmov.f64	d0, d7
 80040f8:	f00f ff6e 	bl	8013fd8 <cos>
 80040fc:	eeb0 7b40 	vmov.f64	d7, d0
 8004100:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 8004470 <IVK+0x34f8>
 8004104:	ee27 8b06 	vmul.f64	d8, d7, d6
 8004108:	f107 030c 	add.w	r3, r7, #12
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	edd3 7a00 	vldr	s15, [r3]
 8004112:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004116:	eeb0 0b47 	vmov.f64	d0, d7
 800411a:	f00f ffb1 	bl	8014080 <sin>
 800411e:	eeb0 7b40 	vmov.f64	d7, d0
 8004122:	ee28 8b07 	vmul.f64	d8, d8, d7
	                704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) /
 8004126:	f107 030c 	add.w	r3, r7, #12
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3304      	adds	r3, #4
 800412e:	edd3 7a00 	vldr	s15, [r3]
 8004132:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004136:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8004498 <IVK+0x3520>
 800413a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800413e:	eeb0 0b47 	vmov.f64	d0, d7
 8004142:	f00f ff49 	bl	8013fd8 <cos>
 8004146:	eeb0 7b40 	vmov.f64	d7, d0
 800414a:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8004468 <IVK+0x34f0>
 800414e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004152:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8004156:	ee26 7b07 	vmul.f64	d7, d6, d7
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 800415a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800415e:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8004478 <IVK+0x3500>
 8004162:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004166:	eeb1 5b47 	vneg.f64	d5, d7
	                704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) /
 800416a:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 800416e:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[18] =
 8004172:	f107 0310 	add.w	r3, r7, #16
 8004176:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	      d9;
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 800417a:	f107 030c 	add.w	r3, r7, #12
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3304      	adds	r3, #4
 8004182:	ed93 7a00 	vldr	s14, [r3]
 8004186:	f107 030c 	add.w	r3, r7, #12
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3308      	adds	r3, #8
 800418e:	edd3 7a00 	vldr	s15, [r3]
 8004192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004196:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800419a:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8004498 <IVK+0x3520>
 800419e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041a2:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 80044a0 <IVK+0x3528>
 80041a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041aa:	eeb0 0b47 	vmov.f64	d0, d7
 80041ae:	f00f ff67 	bl	8014080 <sin>
 80041b2:	eeb0 7b40 	vmov.f64	d7, d0
 80041b6:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8004470 <IVK+0x34f8>
 80041ba:	ee27 6b06 	vmul.f64	d6, d7, d6
	                     704.556 * e_J_inv_tmp_tmp)) /
 80041be:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80041c2:	ed9f 5ba9 	vldr	d5, [pc, #676]	; 8004468 <IVK+0x34f0>
 80041c6:	ee27 7b05 	vmul.f64	d7, d7, d5
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80041ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041ce:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8004478 <IVK+0x3500>
 80041d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80041d6:	eeb1 5b47 	vneg.f64	d5, d7
	                     704.556 * e_J_inv_tmp_tmp)) /
 80041da:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 80041de:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80041e2:	f107 0310 	add.w	r3, r7, #16
 80041e6:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
	           d9;
	  dv[4] =
	      4.0 *
	      (((((((((((((((221663.52 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3304      	adds	r3, #4
 80041f2:	edd3 7a00 	vldr	s15, [r3]
 80041f6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80041fa:	f107 030c 	add.w	r3, r7, #12
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3308      	adds	r3, #8
 8004202:	edd3 7a00 	vldr	s15, [r3]
 8004206:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800420a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800420e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004212:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8004498 <IVK+0x3520>
 8004216:	ee37 7b06 	vadd.f64	d7, d7, d6
 800421a:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 80044a0 <IVK+0x3528>
 800421e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004222:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 80044c8 <IVK+0x3550>
 8004226:	ee37 7b46 	vsub.f64	d7, d7, d6
 800422a:	eeb0 0b47 	vmov.f64	d0, d7
 800422e:	f00f ff27 	bl	8014080 <sin>
 8004232:	eeb0 7b40 	vmov.f64	d7, d0
	      (((((((((((((((221663.52 *
 8004236:	ed9f 6b92 	vldr	d6, [pc, #584]	; 8004480 <IVK+0x3508>
 800423a:	ee27 8b06 	vmul.f64	d8, d7, d6
	                             -0.73665) *
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 800423e:	f107 030c 	add.w	r3, r7, #12
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	ed93 7a00 	vldr	s14, [r3]
 800424a:	f107 030c 	add.w	r3, r7, #12
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	edd3 7a00 	vldr	s15, [r3]
 8004256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800425e:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8004498 <IVK+0x3520>
 8004262:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004266:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 80044a0 <IVK+0x3528>
 800426a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800426e:	eeb0 0b47 	vmov.f64	d0, d7
 8004272:	f00f feb1 	bl	8013fd8 <cos>
 8004276:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 800427a:	ee28 8b07 	vmul.f64	d8, d8, d7
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	edd3 7a00 	vldr	s15, [r3]
 8004288:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800428c:	eeb0 0b47 	vmov.f64	d0, d7
 8004290:	f00f fea2 	bl	8013fd8 <cos>
 8004294:	eeb0 7b40 	vmov.f64	d7, d0
 8004298:	ee28 8b07 	vmul.f64	d8, d8, d7
	                     221663.52 *
	                         cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 800429c:	f107 030c 	add.w	r3, r7, #12
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3304      	adds	r3, #4
 80042a4:	edd3 7a00 	vldr	s15, [r3]
 80042a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80042ac:	f107 030c 	add.w	r3, r7, #12
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3308      	adds	r3, #8
 80042b4:	edd3 7a00 	vldr	s15, [r3]
 80042b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80042bc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80042c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80042c4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8004498 <IVK+0x3520>
 80042c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80042cc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80044a0 <IVK+0x3528>
 80042d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80042d4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80044c8 <IVK+0x3550>
 80042d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80042dc:	eeb0 0b47 	vmov.f64	d0, d7
 80042e0:	f00f fe7a 	bl	8013fd8 <cos>
 80042e4:	eeb0 7b40 	vmov.f64	d7, d0
	                     221663.52 *
 80042e8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8004480 <IVK+0x3508>
 80042ec:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 80042f0:	f107 030c 	add.w	r3, r7, #12
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3304      	adds	r3, #4
 80042f8:	ed93 7a00 	vldr	s14, [r3]
 80042fc:	f107 030c 	add.w	r3, r7, #12
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3308      	adds	r3, #8
 8004304:	edd3 7a00 	vldr	s15, [r3]
 8004308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800430c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004310:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8004498 <IVK+0x3520>
 8004314:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004318:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80044a0 <IVK+0x3528>
 800431c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004320:	eeb0 0b47 	vmov.f64	d0, d7
 8004324:	f00f feac 	bl	8014080 <sin>
 8004328:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 800432c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8004330:	f107 030c 	add.w	r3, r7, #12
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	edd3 7a00 	vldr	s15, [r3]
 800433a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800433e:	eeb0 0b47 	vmov.f64	d0, d7
 8004342:	f00f fe49 	bl	8013fd8 <cos>
 8004346:	eeb0 7b40 	vmov.f64	d7, d0
 800434a:	ee29 7b07 	vmul.f64	d7, d9, d7
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 800434e:	ee38 8b47 	vsub.f64	d8, d8, d7
	                    2.6029060499520004E+6 *
	                        cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3304      	adds	r3, #4
 800435a:	edd3 7a00 	vldr	s15, [r3]
 800435e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3308      	adds	r3, #8
 800436a:	edd3 7a00 	vldr	s15, [r3]
 800436e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004372:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004376:	ee36 7b07 	vadd.f64	d7, d6, d7
 800437a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8004498 <IVK+0x3520>
 800437e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004382:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80044a0 <IVK+0x3528>
 8004386:	ee37 7b46 	vsub.f64	d7, d7, d6
 800438a:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 80044c8 <IVK+0x3550>
 800438e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004392:	eeb0 0b47 	vmov.f64	d0, d7
 8004396:	f00f fe1f 	bl	8013fd8 <cos>
 800439a:	eeb0 7b40 	vmov.f64	d7, d0
	                    2.6029060499520004E+6 *
 800439e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8004488 <IVK+0x3510>
 80043a2:	ee27 9b06 	vmul.f64	d9, d7, d6
	                            -0.73665) *
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 80043a6:	f107 030c 	add.w	r3, r7, #12
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3304      	adds	r3, #4
 80043ae:	edd3 7a00 	vldr	s15, [r3]
 80043b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043b6:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8004498 <IVK+0x3520>
 80043ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80043be:	eeb0 0b47 	vmov.f64	d0, d7
 80043c2:	f00f fe5d 	bl	8014080 <sin>
 80043c6:	eeb0 7b40 	vmov.f64	d7, d0
	                            -0.73665) *
 80043ca:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 80043ce:	f107 030c 	add.w	r3, r7, #12
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	edd3 7a00 	vldr	s15, [r3]
 80043d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043dc:	eeb0 0b47 	vmov.f64	d0, d7
 80043e0:	f00f fdfa 	bl	8013fd8 <cos>
 80043e4:	eeb0 7b40 	vmov.f64	d7, d0
 80043e8:	ee29 7b07 	vmul.f64	d7, d9, d7
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 80043ec:	ee38 8b47 	vsub.f64	d8, d8, d7
	                   2.6029060499520004E+6 *
	                       sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80043f0:	f107 030c 	add.w	r3, r7, #12
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3304      	adds	r3, #4
 80043f8:	edd3 7a00 	vldr	s15, [r3]
 80043fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004400:	f107 030c 	add.w	r3, r7, #12
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3308      	adds	r3, #8
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004410:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004414:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004418:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8004498 <IVK+0x3520>
 800441c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004420:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80044a0 <IVK+0x3528>
 8004424:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004428:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80044c8 <IVK+0x3550>
 800442c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004430:	eeb0 0b47 	vmov.f64	d0, d7
 8004434:	f00f fe24 	bl	8014080 <sin>
 8004438:	eeb0 7b40 	vmov.f64	d7, d0
	                   2.6029060499520004E+6 *
 800443c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8004488 <IVK+0x3510>
 8004440:	ee27 9b06 	vmul.f64	d9, d7, d6
	                           -0.73665) *
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 8004444:	f107 030c 	add.w	r3, r7, #12
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3304      	adds	r3, #4
 800444c:	edd3 7a00 	vldr	s15, [r3]
 8004450:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004454:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8004498 <IVK+0x3520>
 8004458:	ee37 7b06 	vadd.f64	d7, d7, d6
 800445c:	eeb0 0b47 	vmov.f64	d0, d7
 8004460:	f00f fdba 	bl	8013fd8 <cos>
 8004464:	e038      	b.n	80044d8 <IVK+0x3560>
 8004466:	bf00      	nop
 8004468:	b020c49c 	.word	0xb020c49c
 800446c:	40860472 	.word	0x40860472
 8004470:	00000000 	.word	0x00000000
 8004474:	404e0000 	.word	0x404e0000
 8004478:	00000000 	.word	0x00000000
 800447c:	40440000 	.word	0x40440000
 8004480:	28f5c28f 	.word	0x28f5c28f
 8004484:	410b0efc 	.word	0x410b0efc
 8004488:	0664d3c0 	.word	0x0664d3c0
 800448c:	4143dbcd 	.word	0x4143dbcd
 8004490:	f5c28f5d 	.word	0xf5c28f5d
 8004494:	410738b0 	.word	0x410738b0
 8004498:	45a1cac1 	.word	0x45a1cac1
 800449c:	3ffaf3b6 	.word	0x3ffaf3b6
 80044a0:	39581062 	.word	0x39581062
 80044a4:	3fecc8b4 	.word	0x3fecc8b4
 80044a8:	00000000 	.word	0x00000000
 80044ac:	40f56300 	.word	0x40f56300
 80044b0:	851eb852 	.word	0x851eb852
 80044b4:	412f6457 	.word	0x412f6457
 80044b8:	39581062 	.word	0x39581062
 80044bc:	3fecc8b4 	.word	0x3fecc8b4
 80044c0:	19ce075f 	.word	0x19ce075f
 80044c4:	3ff85a51 	.word	0x3ff85a51
 80044c8:	05532618 	.word	0x05532618
 80044cc:	3fe792a3 	.word	0x3fe792a3
 80044d0:	45a1cac1 	.word	0x45a1cac1
 80044d4:	3ffaf3b6 	.word	0x3ffaf3b6
 80044d8:	eeb0 7b40 	vmov.f64	d7, d0
	                           -0.73665) *
 80044dc:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	edd3 7a00 	vldr	s15, [r3]
 80044ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044ee:	eeb0 0b47 	vmov.f64	d0, d7
 80044f2:	f00f fd71 	bl	8013fd8 <cos>
 80044f6:	eeb0 7b40 	vmov.f64	d7, d0
 80044fa:	ee29 7b07 	vmul.f64	d7, d9, d7
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 80044fe:	ee38 8b07 	vadd.f64	d8, d8, d7
	                  190230.12000000002 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004502:	f107 030c 	add.w	r3, r7, #12
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3304      	adds	r3, #4
 800450a:	ed93 7a00 	vldr	s14, [r3]
 800450e:	f107 030c 	add.w	r3, r7, #12
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3308      	adds	r3, #8
 8004516:	edd3 7a00 	vldr	s15, [r3]
 800451a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800451e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004522:	ed1f 6b23 	vldr	d6, [pc, #-140]	; 8004498 <IVK+0x3520>
 8004526:	ee37 7b06 	vadd.f64	d7, d7, d6
 800452a:	ed1f 6b23 	vldr	d6, [pc, #-140]	; 80044a0 <IVK+0x3528>
 800452e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004532:	eeb0 0b47 	vmov.f64	d0, d7
 8004536:	f00f fd4f 	bl	8013fd8 <cos>
 800453a:	eeb0 7b40 	vmov.f64	d7, d0
 800453e:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8004490 <IVK+0x3518>
 8004542:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 8004546:	f107 030c 	add.w	r3, r7, #12
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3304      	adds	r3, #4
 800454e:	edd3 7a00 	vldr	s15, [r3]
 8004552:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004556:	ed1f 6b30 	vldr	d6, [pc, #-192]	; 8004498 <IVK+0x3520>
 800455a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800455e:	eeb0 0b47 	vmov.f64	d0, d7
 8004562:	f00f fd8d 	bl	8014080 <sin>
 8004566:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800456a:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 800456e:	f107 030c 	add.w	r3, r7, #12
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	edd3 7a00 	vldr	s15, [r3]
 8004578:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800457c:	eeb0 0b47 	vmov.f64	d0, d7
 8004580:	f00f fd2a 	bl	8013fd8 <cos>
 8004584:	eeb0 7b40 	vmov.f64	d7, d0
 8004588:	ee29 7b07 	vmul.f64	d7, d9, d7
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 800458c:	ee38 8b47 	vsub.f64	d8, d8, d7
	                 190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3304      	adds	r3, #4
 8004598:	ed93 7a00 	vldr	s14, [r3]
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3308      	adds	r3, #8
 80045a4:	edd3 7a00 	vldr	s15, [r3]
 80045a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045b0:	ed1f 6b47 	vldr	d6, [pc, #-284]	; 8004498 <IVK+0x3520>
 80045b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80045b8:	ed1f 6b47 	vldr	d6, [pc, #-284]	; 80044a0 <IVK+0x3528>
 80045bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80045c0:	eeb0 0b47 	vmov.f64	d0, d7
 80045c4:	f00f fd5c 	bl	8014080 <sin>
 80045c8:	eeb0 7b40 	vmov.f64	d7, d0
 80045cc:	ed1f 6b50 	vldr	d6, [pc, #-320]	; 8004490 <IVK+0x3518>
 80045d0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3304      	adds	r3, #4
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045e4:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8004498 <IVK+0x3520>
 80045e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80045ec:	eeb0 0b47 	vmov.f64	d0, d7
 80045f0:	f00f fcf2 	bl	8013fd8 <cos>
 80045f4:	eeb0 7b40 	vmov.f64	d7, d0
	                 190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80045f8:	ee29 9b07 	vmul.f64	d9, d9, d7
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 80045fc:	f107 030c 	add.w	r3, r7, #12
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	edd3 7a00 	vldr	s15, [r3]
 8004606:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800460a:	eeb0 0b47 	vmov.f64	d0, d7
 800460e:	f00f fce3 	bl	8013fd8 <cos>
 8004612:	eeb0 7b40 	vmov.f64	d7, d0
 8004616:	ee29 7b07 	vmul.f64	d7, d9, d7
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 800461a:	ee38 6b07 	vadd.f64	d6, d8, d7
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 800461e:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8004622:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d16) +
 8004626:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800462a:	ee36 8b07 	vadd.f64	d8, d6, d7
	               d17) +
	              87600.0 *
	                  cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800462e:	f107 030c 	add.w	r3, r7, #12
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3304      	adds	r3, #4
 8004636:	edd3 7a00 	vldr	s15, [r3]
 800463a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800463e:	f107 030c 	add.w	r3, r7, #12
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800464e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004652:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004656:	f107 030c 	add.w	r3, r7, #12
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	edd3 7a00 	vldr	s15, [r3]
 8004662:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004666:	ee36 7b07 	vadd.f64	d7, d6, d7
 800466a:	ed1f 6b75 	vldr	d6, [pc, #-468]	; 8004498 <IVK+0x3520>
 800466e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004672:	ed1f 6b75 	vldr	d6, [pc, #-468]	; 80044a0 <IVK+0x3528>
 8004676:	ee37 7b46 	vsub.f64	d7, d7, d6
 800467a:	ed1f 6b6d 	vldr	d6, [pc, #-436]	; 80044c8 <IVK+0x3550>
 800467e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004682:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 80044c0 <IVK+0x3548>
 8004686:	ee37 7b06 	vadd.f64	d7, d7, d6
 800468a:	eeb0 0b47 	vmov.f64	d0, d7
 800468e:	f00f fca3 	bl	8013fd8 <cos>
 8004692:	eeb0 7b40 	vmov.f64	d7, d0
	              87600.0 *
 8004696:	ed1f 6b7c 	vldr	d6, [pc, #-496]	; 80044a8 <IVK+0x3530>
 800469a:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800469e:	f107 030c 	add.w	r3, r7, #12
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3304      	adds	r3, #4
 80046a6:	edd3 7a00 	vldr	s15, [r3]
 80046aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80046ae:	f107 030c 	add.w	r3, r7, #12
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3308      	adds	r3, #8
 80046b6:	edd3 7a00 	vldr	s15, [r3]
 80046ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80046c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80046c6:	f107 030c 	add.w	r3, r7, #12
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	edd3 7a00 	vldr	s15, [r3]
 80046d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046da:	ed1f 6b83 	vldr	d6, [pc, #-524]	; 80044d0 <IVK+0x3558>
 80046de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046e2:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 80044b8 <IVK+0x3540>
 80046e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046ea:	ed1f 6b89 	vldr	d6, [pc, #-548]	; 80044c8 <IVK+0x3550>
 80046ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046f2:	ed1f 6b8d 	vldr	d6, [pc, #-564]	; 80044c0 <IVK+0x3548>
 80046f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046fa:	eeb0 0b47 	vmov.f64	d0, d7
 80046fe:	f00f fcbf 	bl	8014080 <sin>
 8004702:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8004706:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       -0.73665) +
	                      1.52205) *
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 800470a:	f107 030c 	add.w	r3, r7, #12
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3304      	adds	r3, #4
 8004712:	ed93 7a00 	vldr	s14, [r3]
 8004716:	f107 030c 	add.w	r3, r7, #12
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3308      	adds	r3, #8
 800471e:	edd3 7a00 	vldr	s15, [r3]
 8004722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004726:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800472a:	ed1f 6b97 	vldr	d6, [pc, #-604]	; 80044d0 <IVK+0x3558>
 800472e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004732:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 80044b8 <IVK+0x3540>
 8004736:	ee37 7b46 	vsub.f64	d7, d7, d6
 800473a:	eeb0 0b47 	vmov.f64	d0, d7
 800473e:	f00f fc4b 	bl	8013fd8 <cos>
 8004742:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8004746:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 800474a:	f107 030c 	add.w	r3, r7, #12
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	edd3 7a00 	vldr	s15, [r3]
 8004754:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004758:	eeb0 0b47 	vmov.f64	d0, d7
 800475c:	f00f fc90 	bl	8014080 <sin>
 8004760:	eeb0 7b40 	vmov.f64	d7, d0
 8004764:	ee29 7b07 	vmul.f64	d7, d9, d7
	               d17) +
 8004768:	ee38 8b07 	vadd.f64	d8, d8, d7
	             1.02865176E+6 *
	                 cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800476c:	f107 030c 	add.w	r3, r7, #12
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3304      	adds	r3, #4
 8004774:	edd3 7a00 	vldr	s15, [r3]
 8004778:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800478c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004790:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004794:	f107 030c 	add.w	r3, r7, #12
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	edd3 7a00 	vldr	s15, [r3]
 80047a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047a8:	ed1f 6bb7 	vldr	d6, [pc, #-732]	; 80044d0 <IVK+0x3558>
 80047ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047b0:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 80044b8 <IVK+0x3540>
 80047b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80047b8:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 80044c8 <IVK+0x3550>
 80047bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80047c0:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 80044c0 <IVK+0x3548>
 80047c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047c8:	eeb0 0b47 	vmov.f64	d0, d7
 80047cc:	f00f fc04 	bl	8013fd8 <cos>
 80047d0:	eeb0 7b40 	vmov.f64	d7, d0
	             1.02865176E+6 *
 80047d4:	ed1f 6bca 	vldr	d6, [pc, #-808]	; 80044b0 <IVK+0x3538>
 80047d8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3304      	adds	r3, #4
 80047e4:	edd3 7a00 	vldr	s15, [r3]
 80047e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80047ec:	f107 030c 	add.w	r3, r7, #12
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	edd3 7a00 	vldr	s15, [r3]
 80047f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004800:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004804:	f107 030c 	add.w	r3, r7, #12
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	edd3 7a00 	vldr	s15, [r3]
 8004810:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004814:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004818:	ed1f 6bd3 	vldr	d6, [pc, #-844]	; 80044d0 <IVK+0x3558>
 800481c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004820:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 80044b8 <IVK+0x3540>
 8004824:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004828:	ed1f 6bd9 	vldr	d6, [pc, #-868]	; 80044c8 <IVK+0x3550>
 800482c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004830:	ed1f 6bdd 	vldr	d6, [pc, #-884]	; 80044c0 <IVK+0x3548>
 8004834:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004838:	eeb0 0b47 	vmov.f64	d0, d7
 800483c:	f00f fc20 	bl	8014080 <sin>
 8004840:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8004844:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      -0.73665) +
	                     1.52205) *
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 8004848:	f107 030c 	add.w	r3, r7, #12
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3304      	adds	r3, #4
 8004850:	edd3 7a00 	vldr	s15, [r3]
 8004854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004858:	ed1f 6be3 	vldr	d6, [pc, #-908]	; 80044d0 <IVK+0x3558>
 800485c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004860:	eeb0 0b47 	vmov.f64	d0, d7
 8004864:	f00f fbb8 	bl	8013fd8 <cos>
 8004868:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 800486c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	edd3 7a00 	vldr	s15, [r3]
 800487a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800487e:	eeb0 0b47 	vmov.f64	d0, d7
 8004882:	f00f fbfd 	bl	8014080 <sin>
 8004886:	eeb0 7b40 	vmov.f64	d7, d0
 800488a:	ee29 7b07 	vmul.f64	d7, d9, d7
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 800488e:	ee38 8b07 	vadd.f64	d8, d8, d7
	            246292.8 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004892:	f107 030c 	add.w	r3, r7, #12
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3304      	adds	r3, #4
 800489a:	edd3 7a00 	vldr	s15, [r3]
 800489e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80048a2:	f107 030c 	add.w	r3, r7, #12
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3308      	adds	r3, #8
 80048aa:	edd3 7a00 	vldr	s15, [r3]
 80048ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80048b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80048ba:	f107 030c 	add.w	r3, r7, #12
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	330c      	adds	r3, #12
 80048c2:	edd3 7a00 	vldr	s15, [r3]
 80048c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80048ce:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004c90 <IVK+0x3d18>
 80048d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80048d6:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004c98 <IVK+0x3d20>
 80048da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048de:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004ca0 <IVK+0x3d28>
 80048e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048e6:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004ca8 <IVK+0x3d30>
 80048ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80048ee:	eeb0 0b47 	vmov.f64	d0, d7
 80048f2:	f00f fbc5 	bl	8014080 <sin>
 80048f6:	eeb0 7b40 	vmov.f64	d7, d0
	            246292.8 *
 80048fa:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8004cb0 <IVK+0x3d38>
 80048fe:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004902:	f107 030c 	add.w	r3, r7, #12
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3304      	adds	r3, #4
 800490a:	edd3 7a00 	vldr	s15, [r3]
 800490e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	edd3 7a00 	vldr	s15, [r3]
 800491e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004922:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004926:	ee36 7b07 	vadd.f64	d7, d6, d7
 800492a:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8004c90 <IVK+0x3d18>
 800492e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004932:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8004c98 <IVK+0x3d20>
 8004936:	ee37 7b46 	vsub.f64	d7, d7, d6
 800493a:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8004ca0 <IVK+0x3d28>
 800493e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004942:	eeb0 0b47 	vmov.f64	d0, d7
 8004946:	f00f fb47 	bl	8013fd8 <cos>
 800494a:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 800494e:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 8004952:	f107 030c 	add.w	r3, r7, #12
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3304      	adds	r3, #4
 800495a:	ed93 7a00 	vldr	s14, [r3]
 800495e:	f107 030c 	add.w	r3, r7, #12
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	edd3 7a00 	vldr	s15, [r3]
 800496a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800496e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004972:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8004c90 <IVK+0x3d18>
 8004976:	ee37 7b06 	vadd.f64	d7, d7, d6
 800497a:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 8004c98 <IVK+0x3d20>
 800497e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004982:	eeb0 0b47 	vmov.f64	d0, d7
 8004986:	f00f fb7b 	bl	8014080 <sin>
 800498a:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800498e:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 8004992:	f107 030c 	add.w	r3, r7, #12
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	edd3 7a00 	vldr	s15, [r3]
 800499c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049a0:	eeb0 0b47 	vmov.f64	d0, d7
 80049a4:	f00f fb6c 	bl	8014080 <sin>
 80049a8:	eeb0 7b40 	vmov.f64	d7, d0
 80049ac:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 80049b0:	ee38 8b07 	vadd.f64	d8, d8, d7
	           246292.8 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80049b4:	f107 030c 	add.w	r3, r7, #12
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3304      	adds	r3, #4
 80049bc:	edd3 7a00 	vldr	s15, [r3]
 80049c0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80049c4:	f107 030c 	add.w	r3, r7, #12
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3308      	adds	r3, #8
 80049cc:	edd3 7a00 	vldr	s15, [r3]
 80049d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049d4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80049d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80049dc:	f107 030c 	add.w	r3, r7, #12
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	edd3 7a00 	vldr	s15, [r3]
 80049e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049f0:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004c90 <IVK+0x3d18>
 80049f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80049f8:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004c98 <IVK+0x3d20>
 80049fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a00:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004ca0 <IVK+0x3d28>
 8004a04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a08:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004ca8 <IVK+0x3d30>
 8004a0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a10:	eeb0 0b47 	vmov.f64	d0, d7
 8004a14:	f00f fb34 	bl	8014080 <sin>
 8004a18:	eeb0 7b40 	vmov.f64	d7, d0
	           246292.8 *
 8004a1c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8004cb0 <IVK+0x3d38>
 8004a20:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004a24:	f107 030c 	add.w	r3, r7, #12
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	edd3 7a00 	vldr	s15, [r3]
 8004a30:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	edd3 7a00 	vldr	s15, [r3]
 8004a40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a44:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004a48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a4c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8004c90 <IVK+0x3d18>
 8004a50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a54:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8004c98 <IVK+0x3d20>
 8004a58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a5c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8004ca0 <IVK+0x3d28>
 8004a60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a64:	eeb0 0b47 	vmov.f64	d0, d7
 8004a68:	f00f fb0a 	bl	8014080 <sin>
 8004a6c:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8004a70:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004a74:	f107 030c 	add.w	r3, r7, #12
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	ed93 7a00 	vldr	s14, [r3]
 8004a80:	f107 030c 	add.w	r3, r7, #12
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	edd3 7a00 	vldr	s15, [r3]
 8004a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a94:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8004c90 <IVK+0x3d18>
 8004a98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a9c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8004c98 <IVK+0x3d20>
 8004aa0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004aa4:	eeb0 0b47 	vmov.f64	d0, d7
 8004aa8:	f00f fa96 	bl	8013fd8 <cos>
 8004aac:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004ab0:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004ab4:	f107 030c 	add.w	r3, r7, #12
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	edd3 7a00 	vldr	s15, [r3]
 8004abe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ac2:	eeb0 0b47 	vmov.f64	d0, d7
 8004ac6:	f00f fadb 	bl	8014080 <sin>
 8004aca:	eeb0 7b40 	vmov.f64	d7, d0
 8004ace:	ee29 7b07 	vmul.f64	d7, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 8004ad2:	ee38 8b47 	vsub.f64	d8, d8, d7
	          2.8921178332800004E+6 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004ad6:	f107 030c 	add.w	r3, r7, #12
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3304      	adds	r3, #4
 8004ade:	edd3 7a00 	vldr	s15, [r3]
 8004ae2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	edd3 7a00 	vldr	s15, [r3]
 8004af2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004af6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004afa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004afe:	f107 030c 	add.w	r3, r7, #12
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	edd3 7a00 	vldr	s15, [r3]
 8004b0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b12:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004c90 <IVK+0x3d18>
 8004b16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b1a:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004c98 <IVK+0x3d20>
 8004b1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b22:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004ca0 <IVK+0x3d28>
 8004b26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b2a:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004ca8 <IVK+0x3d30>
 8004b2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b32:	eeb0 0b47 	vmov.f64	d0, d7
 8004b36:	f00f faa3 	bl	8014080 <sin>
 8004b3a:	eeb0 7b40 	vmov.f64	d7, d0
	          2.8921178332800004E+6 *
 8004b3e:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8004cb8 <IVK+0x3d40>
 8004b42:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	edd3 7a00 	vldr	s15, [r3]
 8004b52:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004b56:	f107 030c 	add.w	r3, r7, #12
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	edd3 7a00 	vldr	s15, [r3]
 8004b62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b6e:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8004c90 <IVK+0x3d18>
 8004b72:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b76:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8004c98 <IVK+0x3d20>
 8004b7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b7e:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8004ca0 <IVK+0x3d28>
 8004b82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b86:	eeb0 0b47 	vmov.f64	d0, d7
 8004b8a:	f00f fa25 	bl	8013fd8 <cos>
 8004b8e:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8004b92:	ee29 9b07 	vmul.f64	d9, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 8004b96:	f107 030c 	add.w	r3, r7, #12
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	edd3 7a00 	vldr	s15, [r3]
 8004ba2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ba6:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8004c90 <IVK+0x3d18>
 8004baa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004bae:	eeb0 0b47 	vmov.f64	d0, d7
 8004bb2:	f00f fa65 	bl	8014080 <sin>
 8004bb6:	eeb0 7b40 	vmov.f64	d7, d0
	              cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004bba:	ee29 9b07 	vmul.f64	d9, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 8004bbe:	f107 030c 	add.w	r3, r7, #12
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	edd3 7a00 	vldr	s15, [r3]
 8004bc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bcc:	eeb0 0b47 	vmov.f64	d0, d7
 8004bd0:	f00f fa56 	bl	8014080 <sin>
 8004bd4:	eeb0 7b40 	vmov.f64	d7, d0
 8004bd8:	ee29 7b07 	vmul.f64	d7, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004bdc:	ee38 8b07 	vadd.f64	d8, d8, d7
	         2.8921178332800004E+6 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004be0:	f107 030c 	add.w	r3, r7, #12
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3304      	adds	r3, #4
 8004be8:	edd3 7a00 	vldr	s15, [r3]
 8004bec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	edd3 7a00 	vldr	s15, [r3]
 8004bfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c04:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c08:	f107 030c 	add.w	r3, r7, #12
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	edd3 7a00 	vldr	s15, [r3]
 8004c14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c1c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004c90 <IVK+0x3d18>
 8004c20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c24:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004c98 <IVK+0x3d20>
 8004c28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c2c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004ca0 <IVK+0x3d28>
 8004c30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c34:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004ca8 <IVK+0x3d30>
 8004c38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c3c:	eeb0 0b47 	vmov.f64	d0, d7
 8004c40:	f00f fa1e 	bl	8014080 <sin>
 8004c44:	eeb0 7b40 	vmov.f64	d7, d0
	         2.8921178332800004E+6 *
 8004c48:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8004cb8 <IVK+0x3d40>
 8004c4c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004c50:	f107 030c 	add.w	r3, r7, #12
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3304      	adds	r3, #4
 8004c58:	edd3 7a00 	vldr	s15, [r3]
 8004c5c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004c60:	f107 030c 	add.w	r3, r7, #12
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3308      	adds	r3, #8
 8004c68:	edd3 7a00 	vldr	s15, [r3]
 8004c6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c70:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c78:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8004c90 <IVK+0x3d18>
 8004c7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c80:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8004c98 <IVK+0x3d20>
 8004c84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c88:	e032      	b.n	8004cf0 <IVK+0x3d78>
 8004c8a:	bf00      	nop
 8004c8c:	f3af 8000 	nop.w
 8004c90:	45a1cac1 	.word	0x45a1cac1
 8004c94:	3ffaf3b6 	.word	0x3ffaf3b6
 8004c98:	39581062 	.word	0x39581062
 8004c9c:	3fecc8b4 	.word	0x3fecc8b4
 8004ca0:	05532618 	.word	0x05532618
 8004ca4:	3fe792a3 	.word	0x3fe792a3
 8004ca8:	19ce075f 	.word	0x19ce075f
 8004cac:	3ff85a51 	.word	0x3ff85a51
 8004cb0:	66666666 	.word	0x66666666
 8004cb4:	410e10a6 	.word	0x410e10a6
 8004cb8:	eaa8eb47 	.word	0xeaa8eb47
 8004cbc:	414610aa 	.word	0x414610aa
 8004cc0:	19ce075f 	.word	0x19ce075f
 8004cc4:	3ff85a51 	.word	0x3ff85a51
 8004cc8:	66666667 	.word	0x66666667
 8004ccc:	4109cd36 	.word	0x4109cd36
 8004cd0:	05532618 	.word	0x05532618
 8004cd4:	3fe792a3 	.word	0x3fe792a3
 8004cd8:	28f5c28f 	.word	0x28f5c28f
 8004cdc:	410b0efc 	.word	0x410b0efc
 8004ce0:	45a1cac1 	.word	0x45a1cac1
 8004ce4:	3ffaf3b6 	.word	0x3ffaf3b6
 8004ce8:	39581062 	.word	0x39581062
 8004cec:	3fecc8b4 	.word	0x3fecc8b4
 8004cf0:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8004cd0 <IVK+0x3d58>
 8004cf4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004cf8:	eeb0 0b47 	vmov.f64	d0, d7
 8004cfc:	f00f f9c0 	bl	8014080 <sin>
 8004d00:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8004d04:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 8004d08:	f107 030c 	add.w	r3, r7, #12
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	edd3 7a00 	vldr	s15, [r3]
 8004d14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d18:	ed1f 6b0f 	vldr	d6, [pc, #-60]	; 8004ce0 <IVK+0x3d68>
 8004d1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d20:	eeb0 0b47 	vmov.f64	d0, d7
 8004d24:	f00f f958 	bl	8013fd8 <cos>
 8004d28:	eeb0 7b40 	vmov.f64	d7, d0
	             sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004d2c:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 8004d30:	f107 030c 	add.w	r3, r7, #12
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	edd3 7a00 	vldr	s15, [r3]
 8004d3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d3e:	eeb0 0b47 	vmov.f64	d0, d7
 8004d42:	f00f f99d 	bl	8014080 <sin>
 8004d46:	eeb0 7b40 	vmov.f64	d7, d0
 8004d4a:	ee29 7b07 	vmul.f64	d7, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 8004d4e:	ee38 8b47 	vsub.f64	d8, d8, d7
	        211366.80000000002 *
	            sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004d52:	f107 030c 	add.w	r3, r7, #12
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	edd3 7a00 	vldr	s15, [r3]
 8004d5e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d62:	f107 030c 	add.w	r3, r7, #12
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	edd3 7a00 	vldr	s15, [r3]
 8004d6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d72:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d76:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004d7a:	f107 030c 	add.w	r3, r7, #12
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	edd3 7a00 	vldr	s15, [r3]
 8004d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d8e:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8004ce0 <IVK+0x3d68>
 8004d92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d96:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8004ce8 <IVK+0x3d70>
 8004d9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d9e:	ed1f 6b34 	vldr	d6, [pc, #-208]	; 8004cd0 <IVK+0x3d58>
 8004da2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004da6:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8004cc0 <IVK+0x3d48>
 8004daa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004dae:	eeb0 0b47 	vmov.f64	d0, d7
 8004db2:	f00f f965 	bl	8014080 <sin>
 8004db6:	eeb0 7b40 	vmov.f64	d7, d0
	        211366.80000000002 *
 8004dba:	ed1f 6b3d 	vldr	d6, [pc, #-244]	; 8004cc8 <IVK+0x3d50>
 8004dbe:	ee27 9b06 	vmul.f64	d9, d7, d6
	                 -0.73665) +
	                1.52205) *
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8004dc2:	f107 030c 	add.w	r3, r7, #12
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	ed93 7a00 	vldr	s14, [r3]
 8004dce:	f107 030c 	add.w	r3, r7, #12
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	edd3 7a00 	vldr	s15, [r3]
 8004dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004de2:	ed1f 6b41 	vldr	d6, [pc, #-260]	; 8004ce0 <IVK+0x3d68>
 8004de6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004dea:	ed1f 6b41 	vldr	d6, [pc, #-260]	; 8004ce8 <IVK+0x3d70>
 8004dee:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004df2:	eeb0 0b47 	vmov.f64	d0, d7
 8004df6:	f00f f8ef 	bl	8013fd8 <cos>
 8004dfa:	eeb0 7b40 	vmov.f64	d7, d0
	                1.52205) *
 8004dfe:	ee29 9b07 	vmul.f64	d9, d9, d7
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8004e02:	f107 030c 	add.w	r3, r7, #12
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	edd3 7a00 	vldr	s15, [r3]
 8004e0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e12:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 8004ce0 <IVK+0x3d68>
 8004e16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e1a:	eeb0 0b47 	vmov.f64	d0, d7
 8004e1e:	f00f f92f 	bl	8014080 <sin>
 8004e22:	eeb0 7b40 	vmov.f64	d7, d0
 8004e26:	ee29 9b07 	vmul.f64	d9, d9, d7
	            sin(q[0])) -
 8004e2a:	f107 030c 	add.w	r3, r7, #12
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	edd3 7a00 	vldr	s15, [r3]
 8004e34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e38:	eeb0 0b47 	vmov.f64	d0, d7
 8004e3c:	f00f f920 	bl	8014080 <sin>
 8004e40:	eeb0 7b40 	vmov.f64	d7, d0
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8004e44:	ee29 7b07 	vmul.f64	d7, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 8004e48:	ee38 8b07 	vadd.f64	d8, d8, d7
	       211366.80000000002 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004e4c:	f107 030c 	add.w	r3, r7, #12
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3304      	adds	r3, #4
 8004e54:	edd3 7a00 	vldr	s15, [r3]
 8004e58:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004e5c:	f107 030c 	add.w	r3, r7, #12
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	edd3 7a00 	vldr	s15, [r3]
 8004e68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e6c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e70:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	edd3 7a00 	vldr	s15, [r3]
 8004e80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e88:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8004ce0 <IVK+0x3d68>
 8004e8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e90:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8004ce8 <IVK+0x3d70>
 8004e94:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e98:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 8004cd0 <IVK+0x3d58>
 8004e9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ea0:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 8004cc0 <IVK+0x3d48>
 8004ea4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ea8:	eeb0 0b47 	vmov.f64	d0, d7
 8004eac:	f00f f8e8 	bl	8014080 <sin>
 8004eb0:	eeb0 7b40 	vmov.f64	d7, d0
	       211366.80000000002 *
 8004eb4:	ed1f 6b7c 	vldr	d6, [pc, #-496]	; 8004cc8 <IVK+0x3d50>
 8004eb8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                -0.73665) +
	               1.52205) *
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8004ebc:	f107 030c 	add.w	r3, r7, #12
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	ed93 7a00 	vldr	s14, [r3]
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	edd3 7a00 	vldr	s15, [r3]
 8004ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004edc:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8004ce0 <IVK+0x3d68>
 8004ee0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ee4:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8004ce8 <IVK+0x3d70>
 8004ee8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004eec:	eeb0 0b47 	vmov.f64	d0, d7
 8004ef0:	f00f f8c6 	bl	8014080 <sin>
 8004ef4:	eeb0 7b40 	vmov.f64	d7, d0
	               1.52205) *
 8004ef8:	ee29 9b07 	vmul.f64	d9, d9, d7
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8004efc:	f107 030c 	add.w	r3, r7, #12
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3304      	adds	r3, #4
 8004f04:	edd3 7a00 	vldr	s15, [r3]
 8004f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f0c:	ed1f 6b8c 	vldr	d6, [pc, #-560]	; 8004ce0 <IVK+0x3d68>
 8004f10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f14:	eeb0 0b47 	vmov.f64	d0, d7
 8004f18:	f00f f85e 	bl	8013fd8 <cos>
 8004f1c:	eeb0 7b40 	vmov.f64	d7, d0
 8004f20:	ee29 9b07 	vmul.f64	d9, d9, d7
	           sin(q[0])) /
 8004f24:	f107 030c 	add.w	r3, r7, #12
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	edd3 7a00 	vldr	s15, [r3]
 8004f2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f32:	eeb0 0b47 	vmov.f64	d0, d7
 8004f36:	f00f f8a3 	bl	8014080 <sin>
 8004f3a:	eeb0 7b40 	vmov.f64	d7, d0
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8004f3e:	ee29 7b07 	vmul.f64	d7, d9, d7
	            sin(q[0])) -
 8004f42:	ee38 7b47 	vsub.f64	d7, d8, d7
	      4.0 *
 8004f46:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004f4a:	ee27 5b06 	vmul.f64	d5, d7, d6
	           sin(q[0])) /
 8004f4e:	ed97 6b76 	vldr	d6, [r7, #472]	; 0x1d8
 8004f52:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[4] =
 8004f56:	f107 0310 	add.w	r3, r7, #16
 8004f5a:	ed83 7b08 	vstr	d7, [r3, #32]
	      d;
	  dv[9] =
	      -(4.0 *
	        (((((((((((((((221663.52 *
	                           cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004f5e:	f107 030c 	add.w	r3, r7, #12
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3304      	adds	r3, #4
 8004f66:	edd3 7a00 	vldr	s15, [r3]
 8004f6a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004f6e:	f107 030c 	add.w	r3, r7, #12
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	edd3 7a00 	vldr	s15, [r3]
 8004f7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f86:	ed1f 6baa 	vldr	d6, [pc, #-680]	; 8004ce0 <IVK+0x3d68>
 8004f8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f8e:	ed1f 6baa 	vldr	d6, [pc, #-680]	; 8004ce8 <IVK+0x3d70>
 8004f92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f96:	ed1f 6bb2 	vldr	d6, [pc, #-712]	; 8004cd0 <IVK+0x3d58>
 8004f9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f9e:	eeb0 0b47 	vmov.f64	d0, d7
 8004fa2:	f00f f819 	bl	8013fd8 <cos>
 8004fa6:	eeb0 7b40 	vmov.f64	d7, d0
	        (((((((((((((((221663.52 *
 8004faa:	ed1f 6bb5 	vldr	d6, [pc, #-724]	; 8004cd8 <IVK+0x3d60>
 8004fae:	ee27 8b06 	vmul.f64	d8, d7, d6
	                               -0.73665) *
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 8004fb2:	f107 030c 	add.w	r3, r7, #12
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	ed93 7a00 	vldr	s14, [r3]
 8004fbe:	f107 030c 	add.w	r3, r7, #12
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	edd3 7a00 	vldr	s15, [r3]
 8004fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004fd2:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 8004ce0 <IVK+0x3d68>
 8004fd6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004fda:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 8004ce8 <IVK+0x3d70>
 8004fde:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004fe2:	eeb0 0b47 	vmov.f64	d0, d7
 8004fe6:	f00f f84b 	bl	8014080 <sin>
 8004fea:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8004fee:	ee28 8b07 	vmul.f64	d8, d8, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 8004ff2:	f107 030c 	add.w	r3, r7, #12
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	edd3 7a00 	vldr	s15, [r3]
 8004ffc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005000:	eeb0 0b47 	vmov.f64	d0, d7
 8005004:	f00f f83c 	bl	8014080 <sin>
 8005008:	eeb0 7b40 	vmov.f64	d7, d0
 800500c:	ee28 8b07 	vmul.f64	d8, d8, d7
	                       221663.52 *
	                           sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8005010:	f107 030c 	add.w	r3, r7, #12
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3304      	adds	r3, #4
 8005018:	edd3 7a00 	vldr	s15, [r3]
 800501c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005020:	f107 030c 	add.w	r3, r7, #12
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	edd3 7a00 	vldr	s15, [r3]
 800502c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005030:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005034:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005038:	ed1f 6bd7 	vldr	d6, [pc, #-860]	; 8004ce0 <IVK+0x3d68>
 800503c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005040:	ed1f 6bd7 	vldr	d6, [pc, #-860]	; 8004ce8 <IVK+0x3d70>
 8005044:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005048:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8004cd0 <IVK+0x3d58>
 800504c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005050:	eeb0 0b47 	vmov.f64	d0, d7
 8005054:	f00f f814 	bl	8014080 <sin>
 8005058:	eeb0 7b40 	vmov.f64	d7, d0
	                       221663.52 *
 800505c:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8004cd8 <IVK+0x3d60>
 8005060:	ee27 9b06 	vmul.f64	d9, d7, d6
	                               -0.73665) *
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005064:	f107 030c 	add.w	r3, r7, #12
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3304      	adds	r3, #4
 800506c:	ed93 7a00 	vldr	s14, [r3]
 8005070:	f107 030c 	add.w	r3, r7, #12
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3308      	adds	r3, #8
 8005078:	edd3 7a00 	vldr	s15, [r3]
 800507c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005080:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005084:	ed1f 6bea 	vldr	d6, [pc, #-936]	; 8004ce0 <IVK+0x3d68>
 8005088:	ee37 7b06 	vadd.f64	d7, d7, d6
 800508c:	ed1f 6bea 	vldr	d6, [pc, #-936]	; 8004ce8 <IVK+0x3d70>
 8005090:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005094:	eeb0 0b47 	vmov.f64	d0, d7
 8005098:	f00e ff9e 	bl	8013fd8 <cos>
 800509c:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 80050a0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                           sin(q[0])) +
 80050a4:	f107 030c 	add.w	r3, r7, #12
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	edd3 7a00 	vldr	s15, [r3]
 80050ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050b2:	eeb0 0b47 	vmov.f64	d0, d7
 80050b6:	f00e ffe3 	bl	8014080 <sin>
 80050ba:	eeb0 7b40 	vmov.f64	d7, d0
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80050be:	ee29 7b07 	vmul.f64	d7, d9, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 80050c2:	ee38 8b47 	vsub.f64	d8, d8, d7
	                      2.6029060499520004E+6 *
	                          cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80050c6:	f107 030c 	add.w	r3, r7, #12
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3304      	adds	r3, #4
 80050ce:	edd3 7a00 	vldr	s15, [r3]
 80050d2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80050d6:	f107 030c 	add.w	r3, r7, #12
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	edd3 7a00 	vldr	s15, [r3]
 80050e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80050ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050ee:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80054b0 <IVK+0x4538>
 80050f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80050f6:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80054b8 <IVK+0x4540>
 80050fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80050fe:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80054c0 <IVK+0x4548>
 8005102:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005106:	eeb0 0b47 	vmov.f64	d0, d7
 800510a:	f00e ff65 	bl	8013fd8 <cos>
 800510e:	eeb0 7b40 	vmov.f64	d7, d0
	                      2.6029060499520004E+6 *
 8005112:	ed9f 6bed 	vldr	d6, [pc, #948]	; 80054c8 <IVK+0x4550>
 8005116:	ee27 9b06 	vmul.f64	d9, d7, d6
	                              -0.73665) *
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 800511a:	f107 030c 	add.w	r3, r7, #12
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3304      	adds	r3, #4
 8005122:	edd3 7a00 	vldr	s15, [r3]
 8005126:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800512a:	ed9f 6be1 	vldr	d6, [pc, #900]	; 80054b0 <IVK+0x4538>
 800512e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005132:	eeb0 0b47 	vmov.f64	d0, d7
 8005136:	f00e ffa3 	bl	8014080 <sin>
 800513a:	eeb0 7b40 	vmov.f64	d7, d0
	                              -0.73665) *
 800513e:	ee29 9b07 	vmul.f64	d9, d9, d7
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 8005142:	f107 030c 	add.w	r3, r7, #12
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	edd3 7a00 	vldr	s15, [r3]
 800514c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005150:	eeb0 0b47 	vmov.f64	d0, d7
 8005154:	f00e ff94 	bl	8014080 <sin>
 8005158:	eeb0 7b40 	vmov.f64	d7, d0
 800515c:	ee29 7b07 	vmul.f64	d7, d9, d7
	                           sin(q[0])) +
 8005160:	ee38 8b07 	vadd.f64	d8, d8, d7
	                     2.6029060499520004E+6 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8005164:	f107 030c 	add.w	r3, r7, #12
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3304      	adds	r3, #4
 800516c:	edd3 7a00 	vldr	s15, [r3]
 8005170:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005174:	f107 030c 	add.w	r3, r7, #12
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	edd3 7a00 	vldr	s15, [r3]
 8005180:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005184:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005188:	ee36 7b07 	vadd.f64	d7, d6, d7
 800518c:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 80054b0 <IVK+0x4538>
 8005190:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005194:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 80054b8 <IVK+0x4540>
 8005198:	ee37 7b46 	vsub.f64	d7, d7, d6
 800519c:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 80054c0 <IVK+0x4548>
 80051a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051a4:	eeb0 0b47 	vmov.f64	d0, d7
 80051a8:	f00e ff6a 	bl	8014080 <sin>
 80051ac:	eeb0 7b40 	vmov.f64	d7, d0
	                     2.6029060499520004E+6 *
 80051b0:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 80054c8 <IVK+0x4550>
 80051b4:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 80051b8:	f107 030c 	add.w	r3, r7, #12
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3304      	adds	r3, #4
 80051c0:	edd3 7a00 	vldr	s15, [r3]
 80051c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051c8:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 80054b0 <IVK+0x4538>
 80051cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051d0:	eeb0 0b47 	vmov.f64	d0, d7
 80051d4:	f00e ff00 	bl	8013fd8 <cos>
 80051d8:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 80051dc:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 80051e0:	f107 030c 	add.w	r3, r7, #12
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	edd3 7a00 	vldr	s15, [r3]
 80051ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051ee:	eeb0 0b47 	vmov.f64	d0, d7
 80051f2:	f00e ff45 	bl	8014080 <sin>
 80051f6:	eeb0 7b40 	vmov.f64	d7, d0
 80051fa:	ee29 7b07 	vmul.f64	d7, d9, d7
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 80051fe:	ee38 6b47 	vsub.f64	d6, d8, d7
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 8005202:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8005206:	ee36 8b07 	vadd.f64	d8, d6, d7
	                    d1) +
	                   190230.12000000002 *
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800520a:	f107 030c 	add.w	r3, r7, #12
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3304      	adds	r3, #4
 8005212:	ed93 7a00 	vldr	s14, [r3]
 8005216:	f107 030c 	add.w	r3, r7, #12
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3308      	adds	r3, #8
 800521e:	edd3 7a00 	vldr	s15, [r3]
 8005222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005226:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800522a:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 80054b0 <IVK+0x4538>
 800522e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005232:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 80054b8 <IVK+0x4540>
 8005236:	ee37 7b46 	vsub.f64	d7, d7, d6
 800523a:	eeb0 0b47 	vmov.f64	d0, d7
 800523e:	f00e fecb 	bl	8013fd8 <cos>
 8005242:	eeb0 7b40 	vmov.f64	d7, d0
	                   190230.12000000002 *
 8005246:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80054d0 <IVK+0x4558>
 800524a:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 800524e:	f107 030c 	add.w	r3, r7, #12
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3304      	adds	r3, #4
 8005256:	edd3 7a00 	vldr	s15, [r3]
 800525a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800525e:	ed9f 6b94 	vldr	d6, [pc, #592]	; 80054b0 <IVK+0x4538>
 8005262:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005266:	eeb0 0b47 	vmov.f64	d0, d7
 800526a:	f00e ff09 	bl	8014080 <sin>
 800526e:	eeb0 7b40 	vmov.f64	d7, d0
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005272:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 8005276:	f107 030c 	add.w	r3, r7, #12
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	edd3 7a00 	vldr	s15, [r3]
 8005280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005284:	eeb0 0b47 	vmov.f64	d0, d7
 8005288:	f00e fefa 	bl	8014080 <sin>
 800528c:	eeb0 7b40 	vmov.f64	d7, d0
 8005290:	ee29 7b07 	vmul.f64	d7, d9, d7
	                    d1) +
 8005294:	ee38 8b07 	vadd.f64	d8, d8, d7
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005298:	f107 030c 	add.w	r3, r7, #12
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3304      	adds	r3, #4
 80052a0:	ed93 7a00 	vldr	s14, [r3]
 80052a4:	f107 030c 	add.w	r3, r7, #12
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3308      	adds	r3, #8
 80052ac:	edd3 7a00 	vldr	s15, [r3]
 80052b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052b8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80054b0 <IVK+0x4538>
 80052bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052c0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80054b8 <IVK+0x4540>
 80052c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052c8:	eeb0 0b47 	vmov.f64	d0, d7
 80052cc:	f00e fed8 	bl	8014080 <sin>
 80052d0:	eeb0 7b40 	vmov.f64	d7, d0
 80052d4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80054d0 <IVK+0x4558>
 80052d8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 80052dc:	f107 030c 	add.w	r3, r7, #12
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3304      	adds	r3, #4
 80052e4:	edd3 7a00 	vldr	s15, [r3]
 80052e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052ec:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80054b0 <IVK+0x4538>
 80052f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052f4:	eeb0 0b47 	vmov.f64	d0, d7
 80052f8:	f00e fe6e 	bl	8013fd8 <cos>
 80052fc:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005300:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 8005304:	f107 030c 	add.w	r3, r7, #12
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	edd3 7a00 	vldr	s15, [r3]
 800530e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005312:	eeb0 0b47 	vmov.f64	d0, d7
 8005316:	f00e feb3 	bl	8014080 <sin>
 800531a:	eeb0 7b40 	vmov.f64	d7, d0
 800531e:	ee29 7b07 	vmul.f64	d7, d9, d7
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 8005322:	ee38 6b47 	vsub.f64	d6, d8, d7
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 8005326:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800532a:	ee36 8b07 	vadd.f64	d8, d6, d7
	                 d2) +
	                87600.0 *
	                    cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800532e:	f107 030c 	add.w	r3, r7, #12
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3304      	adds	r3, #4
 8005336:	edd3 7a00 	vldr	s15, [r3]
 800533a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800533e:	f107 030c 	add.w	r3, r7, #12
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800534e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005352:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005356:	f107 030c 	add.w	r3, r7, #12
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	330c      	adds	r3, #12
 800535e:	edd3 7a00 	vldr	s15, [r3]
 8005362:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005366:	ee36 7b07 	vadd.f64	d7, d6, d7
 800536a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80054b0 <IVK+0x4538>
 800536e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005372:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80054b8 <IVK+0x4540>
 8005376:	ee37 7b46 	vsub.f64	d7, d7, d6
 800537a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80054c0 <IVK+0x4548>
 800537e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005382:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8005500 <IVK+0x4588>
 8005386:	ee37 7b06 	vadd.f64	d7, d7, d6
 800538a:	eeb0 0b47 	vmov.f64	d0, d7
 800538e:	f00e fe23 	bl	8013fd8 <cos>
 8005392:	eeb0 7b40 	vmov.f64	d7, d0
	                87600.0 *
 8005396:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80054d8 <IVK+0x4560>
 800539a:	ee27 9b06 	vmul.f64	d9, d7, d6
	                         -0.73665) +
	                        1.52205) *
	                    sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800539e:	f107 030c 	add.w	r3, r7, #12
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3304      	adds	r3, #4
 80053a6:	edd3 7a00 	vldr	s15, [r3]
 80053aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3308      	adds	r3, #8
 80053b6:	edd3 7a00 	vldr	s15, [r3]
 80053ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80053c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80053c6:	f107 030c 	add.w	r3, r7, #12
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	edd3 7a00 	vldr	s15, [r3]
 80053d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80053da:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80054b0 <IVK+0x4538>
 80053de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053e2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80054b8 <IVK+0x4540>
 80053e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80053ea:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80054c0 <IVK+0x4548>
 80053ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80053f2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005500 <IVK+0x4588>
 80053f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053fa:	eeb0 0b47 	vmov.f64	d0, d7
 80053fe:	f00e fe3f 	bl	8014080 <sin>
 8005402:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8005406:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         -0.73665) +
	                        1.52205) *
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 800540a:	f107 030c 	add.w	r3, r7, #12
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3304      	adds	r3, #4
 8005412:	ed93 7a00 	vldr	s14, [r3]
 8005416:	f107 030c 	add.w	r3, r7, #12
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	edd3 7a00 	vldr	s15, [r3]
 8005422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005426:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800542a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80054b0 <IVK+0x4538>
 800542e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005432:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80054b8 <IVK+0x4540>
 8005436:	ee37 7b46 	vsub.f64	d7, d7, d6
 800543a:	eeb0 0b47 	vmov.f64	d0, d7
 800543e:	f00e fdcb 	bl	8013fd8 <cos>
 8005442:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8005446:	ee29 9b07 	vmul.f64	d9, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 800544a:	f107 030c 	add.w	r3, r7, #12
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	edd3 7a00 	vldr	s15, [r3]
 8005454:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005458:	eeb0 0b47 	vmov.f64	d0, d7
 800545c:	f00e fdbc 	bl	8013fd8 <cos>
 8005460:	eeb0 7b40 	vmov.f64	d7, d0
 8005464:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 d2) +
 8005468:	ee38 8b07 	vadd.f64	d8, d8, d7
	               1.02865176E+6 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800546c:	f107 030c 	add.w	r3, r7, #12
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3304      	adds	r3, #4
 8005474:	edd3 7a00 	vldr	s15, [r3]
 8005478:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800547c:	f107 030c 	add.w	r3, r7, #12
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3308      	adds	r3, #8
 8005484:	edd3 7a00 	vldr	s15, [r3]
 8005488:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800548c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005490:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005494:	f107 030c 	add.w	r3, r7, #12
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	edd3 7a00 	vldr	s15, [r3]
 80054a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80054a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80054a8:	e036      	b.n	8005518 <IVK+0x45a0>
 80054aa:	bf00      	nop
 80054ac:	f3af 8000 	nop.w
 80054b0:	45a1cac1 	.word	0x45a1cac1
 80054b4:	3ffaf3b6 	.word	0x3ffaf3b6
 80054b8:	39581062 	.word	0x39581062
 80054bc:	3fecc8b4 	.word	0x3fecc8b4
 80054c0:	05532618 	.word	0x05532618
 80054c4:	3fe792a3 	.word	0x3fe792a3
 80054c8:	0664d3c0 	.word	0x0664d3c0
 80054cc:	4143dbcd 	.word	0x4143dbcd
 80054d0:	f5c28f5d 	.word	0xf5c28f5d
 80054d4:	410738b0 	.word	0x410738b0
 80054d8:	00000000 	.word	0x00000000
 80054dc:	40f56300 	.word	0x40f56300
 80054e0:	851eb852 	.word	0x851eb852
 80054e4:	412f6457 	.word	0x412f6457
 80054e8:	66666666 	.word	0x66666666
 80054ec:	410e10a6 	.word	0x410e10a6
 80054f0:	45a1cac1 	.word	0x45a1cac1
 80054f4:	3ffaf3b6 	.word	0x3ffaf3b6
 80054f8:	39581062 	.word	0x39581062
 80054fc:	3fecc8b4 	.word	0x3fecc8b4
 8005500:	19ce075f 	.word	0x19ce075f
 8005504:	3ff85a51 	.word	0x3ff85a51
 8005508:	05532618 	.word	0x05532618
 800550c:	3fe792a3 	.word	0x3fe792a3
 8005510:	eaa8eb47 	.word	0xeaa8eb47
 8005514:	414610aa 	.word	0x414610aa
 8005518:	ed1f 6b0b 	vldr	d6, [pc, #-44]	; 80054f0 <IVK+0x4578>
 800551c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005520:	ed1f 6b0b 	vldr	d6, [pc, #-44]	; 80054f8 <IVK+0x4580>
 8005524:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005528:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8005508 <IVK+0x4590>
 800552c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005530:	ed1f 6b0d 	vldr	d6, [pc, #-52]	; 8005500 <IVK+0x4588>
 8005534:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005538:	eeb0 0b47 	vmov.f64	d0, d7
 800553c:	f00e fd4c 	bl	8013fd8 <cos>
 8005540:	eeb0 7b40 	vmov.f64	d7, d0
	               1.02865176E+6 *
 8005544:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 80054e0 <IVK+0x4568>
 8005548:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800554c:	f107 030c 	add.w	r3, r7, #12
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3304      	adds	r3, #4
 8005554:	edd3 7a00 	vldr	s15, [r3]
 8005558:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800555c:	f107 030c 	add.w	r3, r7, #12
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3308      	adds	r3, #8
 8005564:	edd3 7a00 	vldr	s15, [r3]
 8005568:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800556c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005570:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	330c      	adds	r3, #12
 800557c:	edd3 7a00 	vldr	s15, [r3]
 8005580:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005584:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005588:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 80054f0 <IVK+0x4578>
 800558c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005590:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 80054f8 <IVK+0x4580>
 8005594:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005598:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 8005508 <IVK+0x4590>
 800559c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055a0:	ed1f 6b29 	vldr	d6, [pc, #-164]	; 8005500 <IVK+0x4588>
 80055a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80055a8:	eeb0 0b47 	vmov.f64	d0, d7
 80055ac:	f00e fd68 	bl	8014080 <sin>
 80055b0:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80055b4:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        -0.73665) +
	                       1.52205) *
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 80055b8:	f107 030c 	add.w	r3, r7, #12
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3304      	adds	r3, #4
 80055c0:	edd3 7a00 	vldr	s15, [r3]
 80055c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055c8:	ed1f 6b37 	vldr	d6, [pc, #-220]	; 80054f0 <IVK+0x4578>
 80055cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80055d0:	eeb0 0b47 	vmov.f64	d0, d7
 80055d4:	f00e fd00 	bl	8013fd8 <cos>
 80055d8:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80055dc:	ee29 9b07 	vmul.f64	d9, d9, d7
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 80055e0:	f107 030c 	add.w	r3, r7, #12
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	edd3 7a00 	vldr	s15, [r3]
 80055ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055ee:	eeb0 0b47 	vmov.f64	d0, d7
 80055f2:	f00e fcf1 	bl	8013fd8 <cos>
 80055f6:	eeb0 7b40 	vmov.f64	d7, d0
 80055fa:	ee29 7b07 	vmul.f64	d7, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 80055fe:	ee38 8b07 	vadd.f64	d8, d8, d7
	              246292.8 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005602:	f107 030c 	add.w	r3, r7, #12
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3304      	adds	r3, #4
 800560a:	edd3 7a00 	vldr	s15, [r3]
 800560e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005612:	f107 030c 	add.w	r3, r7, #12
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	edd3 7a00 	vldr	s15, [r3]
 800561e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005622:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005626:	ee36 6b07 	vadd.f64	d6, d6, d7
 800562a:	f107 030c 	add.w	r3, r7, #12
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	330c      	adds	r3, #12
 8005632:	edd3 7a00 	vldr	s15, [r3]
 8005636:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800563a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800563e:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 80054f0 <IVK+0x4578>
 8005642:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005646:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 80054f8 <IVK+0x4580>
 800564a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800564e:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 8005508 <IVK+0x4590>
 8005652:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005656:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8005500 <IVK+0x4588>
 800565a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800565e:	eeb0 0b47 	vmov.f64	d0, d7
 8005662:	f00e fd0d 	bl	8014080 <sin>
 8005666:	eeb0 7b40 	vmov.f64	d7, d0
	              246292.8 *
 800566a:	ed1f 6b61 	vldr	d6, [pc, #-388]	; 80054e8 <IVK+0x4570>
 800566e:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005672:	f107 030c 	add.w	r3, r7, #12
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3304      	adds	r3, #4
 800567a:	edd3 7a00 	vldr	s15, [r3]
 800567e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005682:	f107 030c 	add.w	r3, r7, #12
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3308      	adds	r3, #8
 800568a:	edd3 7a00 	vldr	s15, [r3]
 800568e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005692:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005696:	ee36 7b07 	vadd.f64	d7, d6, d7
 800569a:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 80054f0 <IVK+0x4578>
 800569e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056a2:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 80054f8 <IVK+0x4580>
 80056a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056aa:	ed1f 6b69 	vldr	d6, [pc, #-420]	; 8005508 <IVK+0x4590>
 80056ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056b2:	eeb0 0b47 	vmov.f64	d0, d7
 80056b6:	f00e fc8f 	bl	8013fd8 <cos>
 80056ba:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 80056be:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 80056c2:	f107 030c 	add.w	r3, r7, #12
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3304      	adds	r3, #4
 80056ca:	ed93 7a00 	vldr	s14, [r3]
 80056ce:	f107 030c 	add.w	r3, r7, #12
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	edd3 7a00 	vldr	s15, [r3]
 80056da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056e2:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 80054f0 <IVK+0x4578>
 80056e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056ea:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 80054f8 <IVK+0x4580>
 80056ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056f2:	eeb0 0b47 	vmov.f64	d0, d7
 80056f6:	f00e fcc3 	bl	8014080 <sin>
 80056fa:	eeb0 7b40 	vmov.f64	d7, d0
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80056fe:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005702:	f107 030c 	add.w	r3, r7, #12
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	edd3 7a00 	vldr	s15, [r3]
 800570c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005710:	eeb0 0b47 	vmov.f64	d0, d7
 8005714:	f00e fc60 	bl	8013fd8 <cos>
 8005718:	eeb0 7b40 	vmov.f64	d7, d0
 800571c:	ee29 7b07 	vmul.f64	d7, d9, d7
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 8005720:	ee38 8b07 	vadd.f64	d8, d8, d7
	             246292.8 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3304      	adds	r3, #4
 800572c:	edd3 7a00 	vldr	s15, [r3]
 8005730:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005734:	f107 030c 	add.w	r3, r7, #12
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	edd3 7a00 	vldr	s15, [r3]
 8005740:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005744:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005748:	ee36 6b07 	vadd.f64	d6, d6, d7
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	edd3 7a00 	vldr	s15, [r3]
 8005758:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800575c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005760:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 80054f0 <IVK+0x4578>
 8005764:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005768:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 80054f8 <IVK+0x4580>
 800576c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005770:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8005508 <IVK+0x4590>
 8005774:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005778:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8005500 <IVK+0x4588>
 800577c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005780:	eeb0 0b47 	vmov.f64	d0, d7
 8005784:	f00e fc7c 	bl	8014080 <sin>
 8005788:	eeb0 7b40 	vmov.f64	d7, d0
	             246292.8 *
 800578c:	ed1f 6baa 	vldr	d6, [pc, #-680]	; 80054e8 <IVK+0x4570>
 8005790:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005794:	f107 030c 	add.w	r3, r7, #12
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3304      	adds	r3, #4
 800579c:	edd3 7a00 	vldr	s15, [r3]
 80057a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80057a4:	f107 030c 	add.w	r3, r7, #12
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	edd3 7a00 	vldr	s15, [r3]
 80057b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80057b4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80057b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057bc:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 80054f0 <IVK+0x4578>
 80057c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80057c4:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 80054f8 <IVK+0x4580>
 80057c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80057cc:	ed1f 6bb2 	vldr	d6, [pc, #-712]	; 8005508 <IVK+0x4590>
 80057d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80057d4:	eeb0 0b47 	vmov.f64	d0, d7
 80057d8:	f00e fc52 	bl	8014080 <sin>
 80057dc:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 80057e0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 80057e4:	f107 030c 	add.w	r3, r7, #12
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3304      	adds	r3, #4
 80057ec:	ed93 7a00 	vldr	s14, [r3]
 80057f0:	f107 030c 	add.w	r3, r7, #12
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	edd3 7a00 	vldr	s15, [r3]
 80057fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005804:	ed1f 6bc6 	vldr	d6, [pc, #-792]	; 80054f0 <IVK+0x4578>
 8005808:	ee37 7b06 	vadd.f64	d7, d7, d6
 800580c:	ed1f 6bc6 	vldr	d6, [pc, #-792]	; 80054f8 <IVK+0x4580>
 8005810:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005814:	eeb0 0b47 	vmov.f64	d0, d7
 8005818:	f00e fbde 	bl	8013fd8 <cos>
 800581c:	eeb0 7b40 	vmov.f64	d7, d0
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005820:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005824:	f107 030c 	add.w	r3, r7, #12
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	edd3 7a00 	vldr	s15, [r3]
 800582e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005832:	eeb0 0b47 	vmov.f64	d0, d7
 8005836:	f00e fbcf 	bl	8013fd8 <cos>
 800583a:	eeb0 7b40 	vmov.f64	d7, d0
 800583e:	ee29 7b07 	vmul.f64	d7, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005842:	ee38 8b47 	vsub.f64	d8, d8, d7
	            2.8921178332800004E+6 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005846:	f107 030c 	add.w	r3, r7, #12
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3304      	adds	r3, #4
 800584e:	edd3 7a00 	vldr	s15, [r3]
 8005852:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005856:	f107 030c 	add.w	r3, r7, #12
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3308      	adds	r3, #8
 800585e:	edd3 7a00 	vldr	s15, [r3]
 8005862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005866:	ee37 7b07 	vadd.f64	d7, d7, d7
 800586a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800586e:	f107 030c 	add.w	r3, r7, #12
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	edd3 7a00 	vldr	s15, [r3]
 800587a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800587e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005882:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 80054f0 <IVK+0x4578>
 8005886:	ee37 7b06 	vadd.f64	d7, d7, d6
 800588a:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 80054f8 <IVK+0x4580>
 800588e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005892:	ed1f 6be3 	vldr	d6, [pc, #-908]	; 8005508 <IVK+0x4590>
 8005896:	ee37 7b46 	vsub.f64	d7, d7, d6
 800589a:	ed1f 6be7 	vldr	d6, [pc, #-924]	; 8005500 <IVK+0x4588>
 800589e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80058a2:	eeb0 0b47 	vmov.f64	d0, d7
 80058a6:	f00e fbeb 	bl	8014080 <sin>
 80058aa:	eeb0 7b40 	vmov.f64	d7, d0
	            2.8921178332800004E+6 *
 80058ae:	ed1f 6be8 	vldr	d6, [pc, #-928]	; 8005510 <IVK+0x4598>
 80058b2:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80058b6:	f107 030c 	add.w	r3, r7, #12
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3304      	adds	r3, #4
 80058be:	edd3 7a00 	vldr	s15, [r3]
 80058c2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80058c6:	f107 030c 	add.w	r3, r7, #12
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3308      	adds	r3, #8
 80058ce:	edd3 7a00 	vldr	s15, [r3]
 80058d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80058d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80058da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80058de:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005ca0 <IVK+0x4d28>
 80058e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80058e6:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005ca8 <IVK+0x4d30>
 80058ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80058ee:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005cb0 <IVK+0x4d38>
 80058f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80058f6:	eeb0 0b47 	vmov.f64	d0, d7
 80058fa:	f00e fb6d 	bl	8013fd8 <cos>
 80058fe:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 8005902:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005906:	f107 030c 	add.w	r3, r7, #12
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3304      	adds	r3, #4
 800590e:	edd3 7a00 	vldr	s15, [r3]
 8005912:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005916:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8005ca0 <IVK+0x4d28>
 800591a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800591e:	eeb0 0b47 	vmov.f64	d0, d7
 8005922:	f00e fbad 	bl	8014080 <sin>
 8005926:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800592a:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 800592e:	f107 030c 	add.w	r3, r7, #12
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	edd3 7a00 	vldr	s15, [r3]
 8005938:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800593c:	eeb0 0b47 	vmov.f64	d0, d7
 8005940:	f00e fb4a 	bl	8013fd8 <cos>
 8005944:	eeb0 7b40 	vmov.f64	d7, d0
 8005948:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 800594c:	ee38 8b07 	vadd.f64	d8, d8, d7
	           2.8921178332800004E+6 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005950:	f107 030c 	add.w	r3, r7, #12
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3304      	adds	r3, #4
 8005958:	edd3 7a00 	vldr	s15, [r3]
 800595c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	edd3 7a00 	vldr	s15, [r3]
 800596c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005970:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005974:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005978:	f107 030c 	add.w	r3, r7, #12
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330c      	adds	r3, #12
 8005980:	edd3 7a00 	vldr	s15, [r3]
 8005984:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800598c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005ca0 <IVK+0x4d28>
 8005990:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005994:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005ca8 <IVK+0x4d30>
 8005998:	ee37 7b46 	vsub.f64	d7, d7, d6
 800599c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005cb0 <IVK+0x4d38>
 80059a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80059a4:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8005cb8 <IVK+0x4d40>
 80059a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059ac:	eeb0 0b47 	vmov.f64	d0, d7
 80059b0:	f00e fb66 	bl	8014080 <sin>
 80059b4:	eeb0 7b40 	vmov.f64	d7, d0
	           2.8921178332800004E+6 *
 80059b8:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8005cc0 <IVK+0x4d48>
 80059bc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80059c0:	f107 030c 	add.w	r3, r7, #12
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3304      	adds	r3, #4
 80059c8:	edd3 7a00 	vldr	s15, [r3]
 80059cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80059d0:	f107 030c 	add.w	r3, r7, #12
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	edd3 7a00 	vldr	s15, [r3]
 80059dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80059e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80059e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80059e8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005ca0 <IVK+0x4d28>
 80059ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059f0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005ca8 <IVK+0x4d30>
 80059f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80059f8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005cb0 <IVK+0x4d38>
 80059fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a00:	eeb0 0b47 	vmov.f64	d0, d7
 8005a04:	f00e fb3c 	bl	8014080 <sin>
 8005a08:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8005a0c:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005a10:	f107 030c 	add.w	r3, r7, #12
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3304      	adds	r3, #4
 8005a18:	edd3 7a00 	vldr	s15, [r3]
 8005a1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a20:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8005ca0 <IVK+0x4d28>
 8005a24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a28:	eeb0 0b47 	vmov.f64	d0, d7
 8005a2c:	f00e fad4 	bl	8013fd8 <cos>
 8005a30:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005a34:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005a38:	f107 030c 	add.w	r3, r7, #12
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	edd3 7a00 	vldr	s15, [r3]
 8005a42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a46:	eeb0 0b47 	vmov.f64	d0, d7
 8005a4a:	f00e fac5 	bl	8013fd8 <cos>
 8005a4e:	eeb0 7b40 	vmov.f64	d7, d0
 8005a52:	ee29 7b07 	vmul.f64	d7, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005a56:	ee38 8b47 	vsub.f64	d8, d8, d7
	          211366.80000000002 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005a5a:	f107 030c 	add.w	r3, r7, #12
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3304      	adds	r3, #4
 8005a62:	edd3 7a00 	vldr	s15, [r3]
 8005a66:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005a6a:	f107 030c 	add.w	r3, r7, #12
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3308      	adds	r3, #8
 8005a72:	edd3 7a00 	vldr	s15, [r3]
 8005a76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a7e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a82:	f107 030c 	add.w	r3, r7, #12
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	edd3 7a00 	vldr	s15, [r3]
 8005a8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a96:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005ca0 <IVK+0x4d28>
 8005a9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a9e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005ca8 <IVK+0x4d30>
 8005aa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005aa6:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005cb0 <IVK+0x4d38>
 8005aaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005aae:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8005cb8 <IVK+0x4d40>
 8005ab2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ab6:	eeb0 0b47 	vmov.f64	d0, d7
 8005aba:	f00e fae1 	bl	8014080 <sin>
 8005abe:	eeb0 7b40 	vmov.f64	d7, d0
	          211366.80000000002 *
 8005ac2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8005cc8 <IVK+0x4d50>
 8005ac6:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8005aca:	f107 030c 	add.w	r3, r7, #12
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	ed93 7a00 	vldr	s14, [r3]
 8005ad6:	f107 030c 	add.w	r3, r7, #12
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3308      	adds	r3, #8
 8005ade:	edd3 7a00 	vldr	s15, [r3]
 8005ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005aea:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8005ca0 <IVK+0x4d28>
 8005aee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005af2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8005ca8 <IVK+0x4d30>
 8005af6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005afa:	eeb0 0b47 	vmov.f64	d0, d7
 8005afe:	f00e fa6b 	bl	8013fd8 <cos>
 8005b02:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8005b06:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8005b0a:	f107 030c 	add.w	r3, r7, #12
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3304      	adds	r3, #4
 8005b12:	edd3 7a00 	vldr	s15, [r3]
 8005b16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b1a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8005ca0 <IVK+0x4d28>
 8005b1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b22:	eeb0 0b47 	vmov.f64	d0, d7
 8005b26:	f00e faab 	bl	8014080 <sin>
 8005b2a:	eeb0 7b40 	vmov.f64	d7, d0
 8005b2e:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(q[0])) -
 8005b32:	f107 030c 	add.w	r3, r7, #12
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	edd3 7a00 	vldr	s15, [r3]
 8005b3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b40:	eeb0 0b47 	vmov.f64	d0, d7
 8005b44:	f00e fa48 	bl	8013fd8 <cos>
 8005b48:	eeb0 7b40 	vmov.f64	d7, d0
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8005b4c:	ee29 7b07 	vmul.f64	d7, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005b50:	ee38 8b07 	vadd.f64	d8, d8, d7
	         211366.80000000002 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005b54:	f107 030c 	add.w	r3, r7, #12
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	edd3 7a00 	vldr	s15, [r3]
 8005b60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005b64:	f107 030c 	add.w	r3, r7, #12
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	edd3 7a00 	vldr	s15, [r3]
 8005b70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b74:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b78:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005b7c:	f107 030c 	add.w	r3, r7, #12
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	330c      	adds	r3, #12
 8005b84:	edd3 7a00 	vldr	s15, [r3]
 8005b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b90:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005ca0 <IVK+0x4d28>
 8005b94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b98:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005ca8 <IVK+0x4d30>
 8005b9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ba0:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005cb0 <IVK+0x4d38>
 8005ba4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ba8:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005cb8 <IVK+0x4d40>
 8005bac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005bb0:	eeb0 0b47 	vmov.f64	d0, d7
 8005bb4:	f00e fa64 	bl	8014080 <sin>
 8005bb8:	eeb0 7b40 	vmov.f64	d7, d0
	         211366.80000000002 *
 8005bbc:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8005cc8 <IVK+0x4d50>
 8005bc0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8005bc4:	f107 030c 	add.w	r3, r7, #12
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	ed93 7a00 	vldr	s14, [r3]
 8005bd0:	f107 030c 	add.w	r3, r7, #12
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	edd3 7a00 	vldr	s15, [r3]
 8005bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005be4:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8005ca0 <IVK+0x4d28>
 8005be8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005bec:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8005ca8 <IVK+0x4d30>
 8005bf0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005bf4:	eeb0 0b47 	vmov.f64	d0, d7
 8005bf8:	f00e fa42 	bl	8014080 <sin>
 8005bfc:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8005c00:	ee29 9b07 	vmul.f64	d9, d9, d7
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8005c04:	f107 030c 	add.w	r3, r7, #12
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	edd3 7a00 	vldr	s15, [r3]
 8005c10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c14:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8005ca0 <IVK+0x4d28>
 8005c18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8005c20:	f00e f9da 	bl	8013fd8 <cos>
 8005c24:	eeb0 7b40 	vmov.f64	d7, d0
 8005c28:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[0]))) /
 8005c2c:	f107 030c 	add.w	r3, r7, #12
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	edd3 7a00 	vldr	s15, [r3]
 8005c36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c3a:	eeb0 0b47 	vmov.f64	d0, d7
 8005c3e:	f00e f9cb 	bl	8013fd8 <cos>
 8005c42:	eeb0 7b40 	vmov.f64	d7, d0
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8005c46:	ee29 7b07 	vmul.f64	d7, d9, d7
	              cos(q[0])) -
 8005c4a:	ee38 7b47 	vsub.f64	d7, d8, d7
	      -(4.0 *
 8005c4e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005c52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c56:	eeb1 5b47 	vneg.f64	d5, d7
	             cos(q[0]))) /
 8005c5a:	ed97 6b76 	vldr	d6, [r7, #472]	; 0x1d8
 8005c5e:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[9] =
 8005c62:	f107 0310 	add.w	r3, r7, #16
 8005c66:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	      d;
	  dv[14] = -(40.0 * cos(q[0]) *
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	edd3 7a00 	vldr	s15, [r3]
 8005c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c78:	eeb0 0b47 	vmov.f64	d0, d7
 8005c7c:	f00e f9ac 	bl	8013fd8 <cos>
 8005c80:	eeb0 7b40 	vmov.f64	d7, d0
 8005c84:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8005cf0 <IVK+0x4d78>
 8005c88:	ee27 8b06 	vmul.f64	d8, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8005c8c:	f107 030c 	add.w	r3, r7, #12
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3304      	adds	r3, #4
 8005c94:	ed93 7a00 	vldr	s14, [r3]
 8005c98:	f107 030c 	add.w	r3, r7, #12
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	e02b      	b.n	8005cf8 <IVK+0x4d80>
 8005ca0:	45a1cac1 	.word	0x45a1cac1
 8005ca4:	3ffaf3b6 	.word	0x3ffaf3b6
 8005ca8:	39581062 	.word	0x39581062
 8005cac:	3fecc8b4 	.word	0x3fecc8b4
 8005cb0:	05532618 	.word	0x05532618
 8005cb4:	3fe792a3 	.word	0x3fe792a3
 8005cb8:	19ce075f 	.word	0x19ce075f
 8005cbc:	3ff85a51 	.word	0x3ff85a51
 8005cc0:	eaa8eb47 	.word	0xeaa8eb47
 8005cc4:	414610aa 	.word	0x414610aa
 8005cc8:	66666667 	.word	0x66666667
 8005ccc:	4109cd36 	.word	0x4109cd36
 8005cd0:	39581062 	.word	0x39581062
 8005cd4:	3fecc8b4 	.word	0x3fecc8b4
 8005cd8:	00000000 	.word	0x00000000
 8005cdc:	404e0000 	.word	0x404e0000
 8005ce0:	45a1cac1 	.word	0x45a1cac1
 8005ce4:	3ffaf3b6 	.word	0x3ffaf3b6
 8005ce8:	b020c49c 	.word	0xb020c49c
 8005cec:	40860472 	.word	0x40860472
 8005cf0:	00000000 	.word	0x00000000
 8005cf4:	40440000 	.word	0x40440000
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	edd3 7a00 	vldr	s15, [r3]
 8005cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d06:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 8005ce0 <IVK+0x4d68>
 8005d0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d0e:	ed1f 6b10 	vldr	d6, [pc, #-64]	; 8005cd0 <IVK+0x4d58>
 8005d12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d16:	eeb0 0b47 	vmov.f64	d0, d7
 8005d1a:	f00e f95d 	bl	8013fd8 <cos>
 8005d1e:	eeb0 7b40 	vmov.f64	d7, d0
 8005d22:	ed1f 6b13 	vldr	d6, [pc, #-76]	; 8005cd8 <IVK+0x4d60>
 8005d26:	ee27 9b06 	vmul.f64	d9, d7, d6
	              704.556 * cos(q[1] + 1.6845))) /
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3304      	adds	r3, #4
 8005d32:	edd3 7a00 	vldr	s15, [r3]
 8005d36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d3a:	ed1f 6b17 	vldr	d6, [pc, #-92]	; 8005ce0 <IVK+0x4d68>
 8005d3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d42:	eeb0 0b47 	vmov.f64	d0, d7
 8005d46:	f00e f947 	bl	8013fd8 <cos>
 8005d4a:	eeb0 7b40 	vmov.f64	d7, d0
 8005d4e:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8005ce8 <IVK+0x4d70>
 8005d52:	ee27 7b06 	vmul.f64	d7, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8005d56:	ee39 7b07 	vadd.f64	d7, d9, d7
	  dv[14] = -(40.0 * cos(q[0]) *
 8005d5a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005d5e:	eeb1 5b47 	vneg.f64	d5, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8005d62:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005d66:	ee27 6b07 	vmul.f64	d6, d7, d7
 8005d6a:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8005d6e:	ee26 6b07 	vmul.f64	d6, d6, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005d72:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005d76:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005d7a:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8005d7e:	ee24 7b07 	vmul.f64	d7, d4, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8005d82:	ee36 6b47 	vsub.f64	d6, d6, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005d86:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005d8a:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005d8e:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8005d92:	ee24 7b07 	vmul.f64	d7, d4, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005d96:	ee36 6b07 	vadd.f64	d6, d6, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005d9a:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005d9e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005da2:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8005da6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005daa:	ee36 6b47 	vsub.f64	d6, d6, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005dae:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005db2:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005db6:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8005dba:	ee24 7b07 	vmul.f64	d7, d4, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005dbe:	ee36 6b07 	vadd.f64	d6, d6, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005dc2:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005dc6:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005dca:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8005dce:	ee24 7b07 	vmul.f64	d7, d4, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005dd2:	ee36 6b47 	vsub.f64	d6, d6, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005dd6:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005dda:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005dde:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8005de2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005de6:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005dea:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005dee:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005df2:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8005df6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005dfa:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005dfe:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005e02:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005e06:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005e0a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005e0e:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005e12:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005e16:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005e1a:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8005e1e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005e22:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005e26:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005e2a:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005e2e:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005e32:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005e36:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 8005e3a:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005e3e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005e42:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8005e46:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005e4a:	ee36 7b47 	vsub.f64	d7, d6, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8005e4e:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8005e52:	ee27 6b06 	vmul.f64	d6, d7, d6
	              704.556 * cos(q[1] + 1.6845))) /
 8005e56:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[14] = -(40.0 * cos(q[0]) *
 8005e5a:	f107 0310 	add.w	r3, r7, #16
 8005e5e:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
	  dv[19] =
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 8005e62:	f107 030c 	add.w	r3, r7, #12
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	ed93 7a00 	vldr	s14, [r3]
 8005e6e:	f107 030c 	add.w	r3, r7, #12
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3308      	adds	r3, #8
 8005e76:	edd3 7a00 	vldr	s15, [r3]
 8005e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e82:	ed1f 6b69 	vldr	d6, [pc, #-420]	; 8005ce0 <IVK+0x4d68>
 8005e86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e8a:	ed1f 6b6f 	vldr	d6, [pc, #-444]	; 8005cd0 <IVK+0x4d58>
 8005e8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e92:	eeb0 0b47 	vmov.f64	d0, d7
 8005e96:	f00e f89f 	bl	8013fd8 <cos>
 8005e9a:	eeb0 7b40 	vmov.f64	d7, d0
 8005e9e:	ed1f 6b72 	vldr	d6, [pc, #-456]	; 8005cd8 <IVK+0x4d60>
 8005ea2:	ee27 8b06 	vmul.f64	d8, d7, d6
 8005ea6:	f107 030c 	add.w	r3, r7, #12
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	edd3 7a00 	vldr	s15, [r3]
 8005eb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005eb4:	eeb0 0b47 	vmov.f64	d0, d7
 8005eb8:	f00e f8e2 	bl	8014080 <sin>
 8005ebc:	eeb0 7b40 	vmov.f64	d7, d0
 8005ec0:	ee28 8b07 	vmul.f64	d8, d8, d7
	                704.556 * cos(q[1] + 1.6845) * sin(q[0]))) /
 8005ec4:	f107 030c 	add.w	r3, r7, #12
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	edd3 7a00 	vldr	s15, [r3]
 8005ed0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ed4:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8005ce0 <IVK+0x4d68>
 8005ed8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005edc:	eeb0 0b47 	vmov.f64	d0, d7
 8005ee0:	f00e f87a 	bl	8013fd8 <cos>
 8005ee4:	eeb0 7b40 	vmov.f64	d7, d0
 8005ee8:	ed1f 6b81 	vldr	d6, [pc, #-516]	; 8005ce8 <IVK+0x4d70>
 8005eec:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005ef0:	f107 030c 	add.w	r3, r7, #12
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	edd3 7a00 	vldr	s15, [r3]
 8005efa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005efe:	eeb0 0b47 	vmov.f64	d0, d7
 8005f02:	f00e f8bd 	bl	8014080 <sin>
 8005f06:	eeb0 7b40 	vmov.f64	d7, d0
 8005f0a:	ee29 7b07 	vmul.f64	d7, d9, d7
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 8005f0e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005f12:	ed1f 6b89 	vldr	d6, [pc, #-548]	; 8005cf0 <IVK+0x4d78>
 8005f16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f1a:	eeb1 5b47 	vneg.f64	d5, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8005f1e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005f22:	ee27 6b07 	vmul.f64	d6, d7, d7
 8005f26:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8005f2a:	ee26 6b07 	vmul.f64	d6, d6, d7
	                        d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005f2e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005f32:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f36:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8005f3a:	ee24 7b07 	vmul.f64	d7, d4, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8005f3e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                       d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005f42:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005f46:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f4a:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8005f4e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005f52:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005f56:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005f5a:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f5e:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8005f62:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005f66:	ee36 6b47 	vsub.f64	d6, d6, d7
	                     d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005f6a:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005f6e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f72:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8005f76:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005f7a:	ee36 6b07 	vadd.f64	d6, d6, d7
	                    d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005f7e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005f82:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f86:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8005f8a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005f8e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                   d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005f92:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005f96:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005f9a:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8005f9e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005fa2:	ee36 6b07 	vadd.f64	d6, d6, d7
	                  d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005fa6:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005faa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005fae:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8005fb2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                   d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005fb6:	ee36 6b47 	vsub.f64	d6, d6, d7
	                 d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005fba:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005fbe:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005fc2:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005fc6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                  d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8005fca:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005fce:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005fd2:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005fd6:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8005fda:	ee24 7b07 	vmul.f64	d7, d4, d7
	                 d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8005fde:	ee36 6b47 	vsub.f64	d6, d6, d7
	               d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8005fe2:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005fe6:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005fea:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005fee:	ee24 7b07 	vmul.f64	d7, d4, d7
	                d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8005ff2:	ee36 6b07 	vadd.f64	d6, d6, d7
	              d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 8005ff6:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8005ffa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8005ffe:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8006002:	ee24 7b07 	vmul.f64	d7, d4, d7
	               d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006006:	ee36 7b47 	vsub.f64	d7, d6, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800600a:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 800600e:	ee27 6b06 	vmul.f64	d6, d7, d6
	                704.556 * cos(q[1] + 1.6845) * sin(q[0]))) /
 8006012:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[19] =
 8006016:	f107 0310 	add.w	r3, r7, #16
 800601a:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 800601e:	f107 030c 	add.w	r3, r7, #12
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3304      	adds	r3, #4
 8006026:	ed93 7a00 	vldr	s14, [r3]
 800602a:	f107 030c 	add.w	r3, r7, #12
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	edd3 7a00 	vldr	s15, [r3]
 8006036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800603a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800603e:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 8005ce0 <IVK+0x4d68>
 8006042:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006046:	ed1f 6bde 	vldr	d6, [pc, #-888]	; 8005cd0 <IVK+0x4d58>
 800604a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800604e:	eeb0 0b47 	vmov.f64	d0, d7
 8006052:	f00e f815 	bl	8014080 <sin>
 8006056:	eeb0 7b40 	vmov.f64	d7, d0
 800605a:	ed1f 6be1 	vldr	d6, [pc, #-900]	; 8005cd8 <IVK+0x4d60>
 800605e:	ee27 8b06 	vmul.f64	d8, d7, d6
	                     704.556 * sin(q[1] + 1.6845))) /
 8006062:	f107 030c 	add.w	r3, r7, #12
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3304      	adds	r3, #4
 800606a:	edd3 7a00 	vldr	s15, [r3]
 800606e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006072:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 8005ce0 <IVK+0x4d68>
 8006076:	ee37 7b06 	vadd.f64	d7, d7, d6
 800607a:	eeb0 0b47 	vmov.f64	d0, d7
 800607e:	f00d ffff 	bl	8014080 <sin>
 8006082:	eeb0 7b40 	vmov.f64	d7, d0
 8006086:	ed1f 6be8 	vldr	d6, [pc, #-928]	; 8005ce8 <IVK+0x4d70>
 800608a:	ee27 7b06 	vmul.f64	d7, d7, d6
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 800608e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006092:	ed1f 6be9 	vldr	d6, [pc, #-932]	; 8005cf0 <IVK+0x4d78>
 8006096:	ee27 7b06 	vmul.f64	d7, d7, d6
 800609a:	eeb1 5b47 	vneg.f64	d5, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800609e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80060a2:	ee27 6b07 	vmul.f64	d6, d7, d7
 80060a6:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80060aa:	ee26 6b07 	vmul.f64	d6, d6, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80060ae:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80060b2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80060b6:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80060ba:	ee24 7b07 	vmul.f64	d7, d4, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80060be:	ee36 6b47 	vsub.f64	d6, d6, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80060c2:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80060c6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80060ca:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80060ce:	ee24 7b07 	vmul.f64	d7, d4, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80060d2:	ee36 6b07 	vadd.f64	d6, d6, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80060d6:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80060da:	ee27 4b07 	vmul.f64	d4, d7, d7
 80060de:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80060e2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80060e6:	ee36 6b47 	vsub.f64	d6, d6, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80060ea:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80060ee:	ee27 4b07 	vmul.f64	d4, d7, d7
 80060f2:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80060f6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80060fa:	ee36 6b07 	vadd.f64	d6, d6, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80060fe:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8006102:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006106:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800610a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800610e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006112:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8006116:	ee27 4b07 	vmul.f64	d4, d7, d7
 800611a:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800611e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006122:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006126:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800612a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800612e:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8006132:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006136:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800613a:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 800613e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006142:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8006146:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800614a:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800614e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8006152:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006156:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 800615a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800615e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006162:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8006166:	ee27 4b07 	vmul.f64	d4, d7, d7
 800616a:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 800616e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006172:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 8006176:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800617a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800617e:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8006182:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006186:	ee36 7b47 	vsub.f64	d7, d6, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800618a:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 800618e:	ee27 6b06 	vmul.f64	d6, d7, d6
	                     704.556 * sin(q[1] + 1.6845))) /
 8006192:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8006196:	f107 0310 	add.w	r3, r7, #16
 800619a:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
	  for (i = 0; i < 5; i++) {
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80061a4:	e044      	b.n	8006230 <IVK+0x52b8>
	    d = 0.0;
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
	    for (i1 = 0; i1 < 5; i1++) {
 80061b2:	2300      	movs	r3, #0
 80061b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80061b8:	e025      	b.n	8006206 <IVK+0x528e>
	      d += dv[i + 5 * i1] * x_dot[i1];
 80061ba:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	441a      	add	r2, r3
 80061c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80061c8:	4413      	add	r3, r2
 80061ca:	f107 0210 	add.w	r2, r7, #16
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	4413      	add	r3, r2
 80061d2:	ed93 6b00 	vldr	d6, [r3]
 80061d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	f107 0208 	add.w	r2, r7, #8
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	4413      	add	r3, r2
 80061e4:	edd3 7a00 	vldr	s15, [r3]
 80061e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80061ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80061f0:	ed97 6b76 	vldr	d6, [r7, #472]	; 0x1d8
 80061f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061f8:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	    for (i1 = 0; i1 < 5; i1++) {
 80061fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006200:	3301      	adds	r3, #1
 8006202:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006206:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800620a:	2b04      	cmp	r3, #4
 800620c:	ddd5      	ble.n	80061ba <IVK+0x5242>
	    }
	    m_dot_temp[i] = d;
 800620e:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8006212:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006216:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800621a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	edc3 7a00 	vstr	s15, [r3]
	  for (i = 0; i < 5; i++) {
 8006226:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800622a:	3301      	adds	r3, #1
 800622c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006230:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006234:	2b04      	cmp	r3, #4
 8006236:	ddb6      	ble.n	80061a6 <IVK+0x522e>
	  }
	memcpy(m_dot, m_dot_temp, 20);
 8006238:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 800623c:	1d3b      	adds	r3, r7, #4
 800623e:	2214      	movs	r2, #20
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	f00b fa7f 	bl	8011744 <memcpy>
}
 8006246:	bf00      	nop
 8006248:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800624c:	46bd      	mov	sp, r7
 800624e:	ecbd 8b04 	vpop	{d8-d9}
 8006252:	bd80      	pop	{r7, pc}
 8006254:	0000      	movs	r0, r0
	...

08006258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006258:	b590      	push	{r4, r7, lr}
 800625a:	b095      	sub	sp, #84	; 0x54
 800625c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800625e:	f002 fb31 	bl	80088c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006262:	f000 fc3f 	bl	8006ae4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8006266:	f000 fcb7 	bl	8006bd8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800626a:	f7fa fda9 	bl	8000dc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800626e:	f7fa fc15 	bl	8000a9c <MX_ADC1_Init>
  MX_ADC3_Init();
 8006272:	f7fa fc8b 	bl	8000b8c <MX_ADC3_Init>
  MX_SPI3_Init();
 8006276:	f000 fe39 	bl	8006eec <MX_SPI3_Init>
  MX_TIM1_Init();
 800627a:	f001 f891 	bl	80073a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800627e:	f001 f93d 	bl	80074fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8006282:	f001 f9b3 	bl	80075ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8006286:	f001 fa29 	bl	80076dc <MX_TIM4_Init>
  MX_TIM12_Init();
 800628a:	f001 fa9f 	bl	80077cc <MX_TIM12_Init>
  MX_TIM13_Init();
 800628e:	f001 fb01 	bl	8007894 <MX_TIM13_Init>
  MX_TIM14_Init();
 8006292:	f001 fb23 	bl	80078dc <MX_TIM14_Init>
  MX_TIM15_Init();
 8006296:	f001 fb6f 	bl	8007978 <MX_TIM15_Init>
  MX_TIM16_Init();
 800629a:	f001 fc11 	bl	8007ac0 <MX_TIM16_Init>
  MX_TIM17_Init();
 800629e:	f001 fc89 	bl	8007bb4 <MX_TIM17_Init>
  MX_UART4_Init();
 80062a2:	f002 f863 	bl	800836c <MX_UART4_Init>
  MX_UART5_Init();
 80062a6:	f002 f8ad 	bl	8008404 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80062aa:	f002 f8f7 	bl	800849c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80062ae:	f002 f941 	bl	8008534 <MX_USART3_UART_Init>
  MX_TIM23_Init();
 80062b2:	f001 fcfb 	bl	8007cac <MX_TIM23_Init>
  MX_CRC_Init();
 80062b6:	f7fa fd35 	bl	8000d24 <MX_CRC_Init>
  MX_TIM24_Init();
 80062ba:	f001 fd47 	bl	8007d4c <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
	uint32_t timestamp1 = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t timestamp2 = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t j_num = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

//	ARMsProtocol_FUNC_Init();
//	HAL_TIM_Base_Start_IT(&htim24);
	int32_t encoder_unwrap_value[5] = { 0 };
 80062cc:	f107 0318 	add.w	r3, r7, #24
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	605a      	str	r2, [r3, #4]
 80062d6:	609a      	str	r2, [r3, #8]
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	611a      	str	r2, [r3, #16]
//	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 1);
//	servo_initialise(&servo_motor, &htim17, TIM_CHANNEL_1);
	/*
	 * Encoder Initialise
	 */
	AMT21_initialise(&encoders[0], &huart2, 0x2C, USART2_DE_GPIO_Port,
 80062dc:	2310      	movs	r3, #16
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	4bc9      	ldr	r3, [pc, #804]	; (8006608 <main+0x3b0>)
 80062e2:	222c      	movs	r2, #44	; 0x2c
 80062e4:	49c9      	ldr	r1, [pc, #804]	; (800660c <main+0x3b4>)
 80062e6:	48ca      	ldr	r0, [pc, #808]	; (8006610 <main+0x3b8>)
 80062e8:	f7fa f9e6 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[1], &huart2, 0x70, USART2_DE_GPIO_Port,
 80062ec:	2310      	movs	r3, #16
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	4bc5      	ldr	r3, [pc, #788]	; (8006608 <main+0x3b0>)
 80062f2:	2270      	movs	r2, #112	; 0x70
 80062f4:	49c5      	ldr	r1, [pc, #788]	; (800660c <main+0x3b4>)
 80062f6:	48c7      	ldr	r0, [pc, #796]	; (8006614 <main+0x3bc>)
 80062f8:	f7fa f9de 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[2], &huart2, 0x54, USART2_DE_GPIO_Port,
 80062fc:	2310      	movs	r3, #16
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	4bc1      	ldr	r3, [pc, #772]	; (8006608 <main+0x3b0>)
 8006302:	2254      	movs	r2, #84	; 0x54
 8006304:	49c1      	ldr	r1, [pc, #772]	; (800660c <main+0x3b4>)
 8006306:	48c4      	ldr	r0, [pc, #784]	; (8006618 <main+0x3c0>)
 8006308:	f7fa f9d6 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[4], &huart2, 0xE8, USART2_DE_GPIO_Port,
 800630c:	2310      	movs	r3, #16
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	4bbd      	ldr	r3, [pc, #756]	; (8006608 <main+0x3b0>)
 8006312:	22e8      	movs	r2, #232	; 0xe8
 8006314:	49bd      	ldr	r1, [pc, #756]	; (800660c <main+0x3b4>)
 8006316:	48c1      	ldr	r0, [pc, #772]	; (800661c <main+0x3c4>)
 8006318:	f7fa f9ce 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[3], &huart2, 0xB4, USART2_DE_GPIO_Port,
 800631c:	2310      	movs	r3, #16
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	4bb9      	ldr	r3, [pc, #740]	; (8006608 <main+0x3b0>)
 8006322:	22b4      	movs	r2, #180	; 0xb4
 8006324:	49b9      	ldr	r1, [pc, #740]	; (800660c <main+0x3b4>)
 8006326:	48be      	ldr	r0, [pc, #760]	; (8006620 <main+0x3c8>)
 8006328:	f7fa f9c6 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	/*
	 * Stepper Initialise
	 */
	stepper_initialise(&steppers[0], &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port,
 800632c:	2301      	movs	r3, #1
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	2308      	movs	r3, #8
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	4bbb      	ldr	r3, [pc, #748]	; (8006624 <main+0x3cc>)
 8006336:	2200      	movs	r2, #0
 8006338:	49bb      	ldr	r1, [pc, #748]	; (8006628 <main+0x3d0>)
 800633a:	48bc      	ldr	r0, [pc, #752]	; (800662c <main+0x3d4>)
 800633c:	f000 fc92 	bl	8006c64 <stepper_initialise>
	DIR1_Pin, 1);//swap 0 -> 1
	stepper_initialise(&steppers[1], &htim2, TIM_CHANNEL_1, DIR2_GPIO_Port,
 8006340:	2301      	movs	r3, #1
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	2310      	movs	r3, #16
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	4bb6      	ldr	r3, [pc, #728]	; (8006624 <main+0x3cc>)
 800634a:	2200      	movs	r2, #0
 800634c:	49b8      	ldr	r1, [pc, #736]	; (8006630 <main+0x3d8>)
 800634e:	48b9      	ldr	r0, [pc, #740]	; (8006634 <main+0x3dc>)
 8006350:	f000 fc88 	bl	8006c64 <stepper_initialise>
	DIR2_Pin, 1);
	stepper_initialise(&steppers[2], &htim3, TIM_CHANNEL_1, DIR3_GPIO_Port,
 8006354:	2300      	movs	r3, #0
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	4bb6      	ldr	r3, [pc, #728]	; (8006638 <main+0x3e0>)
 8006360:	2200      	movs	r2, #0
 8006362:	49b6      	ldr	r1, [pc, #728]	; (800663c <main+0x3e4>)
 8006364:	48b6      	ldr	r0, [pc, #728]	; (8006640 <main+0x3e8>)
 8006366:	f000 fc7d 	bl	8006c64 <stepper_initialise>
	DIR3_Pin, 0);//swap 1 -> 0
	stepper_initialise(&steppers[4], &htim4, TIM_CHANNEL_1, DIR4_GPIO_Port,
 800636a:	2300      	movs	r3, #0
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	4bb0      	ldr	r3, [pc, #704]	; (8006638 <main+0x3e0>)
 8006376:	2200      	movs	r2, #0
 8006378:	49b2      	ldr	r1, [pc, #712]	; (8006644 <main+0x3ec>)
 800637a:	48b3      	ldr	r0, [pc, #716]	; (8006648 <main+0x3f0>)
 800637c:	f000 fc72 	bl	8006c64 <stepper_initialise>
	DIR4_Pin, 0);
	stepper_initialise(&steppers[3], &htim15, TIM_CHANNEL_1, DIR5_GPIO_Port,
 8006380:	2301      	movs	r3, #1
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	4bab      	ldr	r3, [pc, #684]	; (8006638 <main+0x3e0>)
 800638c:	2200      	movs	r2, #0
 800638e:	49af      	ldr	r1, [pc, #700]	; (800664c <main+0x3f4>)
 8006390:	48af      	ldr	r0, [pc, #700]	; (8006650 <main+0x3f8>)
 8006392:	f000 fc67 	bl	8006c64 <stepper_initialise>
	DIR5_Pin, 1);
	/*
	 * Kalman Filter Initialise
	 */
	KalmanFilter_initialise(&kalman_filter[0], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 8006396:	eddf 3aaf 	vldr	s7, [pc, #700]	; 8006654 <main+0x3fc>
 800639a:	ed9f 3aaf 	vldr	s6, [pc, #700]	; 8006658 <main+0x400>
 800639e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80063a2:	ed9f 2aae 	vldr	s4, [pc, #696]	; 800665c <main+0x404>
 80063a6:	eddf 1aad 	vldr	s3, [pc, #692]	; 800665c <main+0x404>
 80063aa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80063ae:	eddf 0aab 	vldr	s1, [pc, #684]	; 800665c <main+0x404>
 80063b2:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800665c <main+0x404>
 80063b6:	48aa      	ldr	r0, [pc, #680]	; (8006660 <main+0x408>)
 80063b8:	f7fa faa0 	bl	80008fc <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[1], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 80063bc:	eddf 3aa5 	vldr	s7, [pc, #660]	; 8006654 <main+0x3fc>
 80063c0:	ed9f 3aa5 	vldr	s6, [pc, #660]	; 8006658 <main+0x400>
 80063c4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80063c8:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 800665c <main+0x404>
 80063cc:	eddf 1aa3 	vldr	s3, [pc, #652]	; 800665c <main+0x404>
 80063d0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80063d4:	eddf 0aa1 	vldr	s1, [pc, #644]	; 800665c <main+0x404>
 80063d8:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800665c <main+0x404>
 80063dc:	48a1      	ldr	r0, [pc, #644]	; (8006664 <main+0x40c>)
 80063de:	f7fa fa8d 	bl	80008fc <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[2], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 80063e2:	eddf 3a9c 	vldr	s7, [pc, #624]	; 8006654 <main+0x3fc>
 80063e6:	ed9f 3a9c 	vldr	s6, [pc, #624]	; 8006658 <main+0x400>
 80063ea:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80063ee:	ed9f 2a9b 	vldr	s4, [pc, #620]	; 800665c <main+0x404>
 80063f2:	eddf 1a9a 	vldr	s3, [pc, #616]	; 800665c <main+0x404>
 80063f6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80063fa:	eddf 0a98 	vldr	s1, [pc, #608]	; 800665c <main+0x404>
 80063fe:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800665c <main+0x404>
 8006402:	4899      	ldr	r0, [pc, #612]	; (8006668 <main+0x410>)
 8006404:	f7fa fa7a 	bl	80008fc <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[3], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 8006408:	eddf 3a92 	vldr	s7, [pc, #584]	; 8006654 <main+0x3fc>
 800640c:	ed9f 3a92 	vldr	s6, [pc, #584]	; 8006658 <main+0x400>
 8006410:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8006414:	ed9f 2a91 	vldr	s4, [pc, #580]	; 800665c <main+0x404>
 8006418:	eddf 1a90 	vldr	s3, [pc, #576]	; 800665c <main+0x404>
 800641c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006420:	eddf 0a8e 	vldr	s1, [pc, #568]	; 800665c <main+0x404>
 8006424:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 800665c <main+0x404>
 8006428:	4890      	ldr	r0, [pc, #576]	; (800666c <main+0x414>)
 800642a:	f7fa fa67 	bl	80008fc <KalmanFilter_initialise>
	KalmanFilter_initialise(&kalman_filter[4], 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q);
 800642e:	eddf 3a89 	vldr	s7, [pc, #548]	; 8006654 <main+0x3fc>
 8006432:	ed9f 3a89 	vldr	s6, [pc, #548]	; 8006658 <main+0x400>
 8006436:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800643a:	ed9f 2a88 	vldr	s4, [pc, #544]	; 800665c <main+0x404>
 800643e:	eddf 1a87 	vldr	s3, [pc, #540]	; 800665c <main+0x404>
 8006442:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006446:	eddf 0a85 	vldr	s1, [pc, #532]	; 800665c <main+0x404>
 800644a:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800665c <main+0x404>
 800644e:	4888      	ldr	r0, [pc, #544]	; (8006670 <main+0x418>)
 8006450:	f7fa fa54 	bl	80008fc <KalmanFilter_initialise>
	/*
	 * Position Pid Initialise
	 */
	PIDController_initialise(&position_pid_controller[0], 1500, 0, 0);
 8006454:	ed9f 1a81 	vldr	s2, [pc, #516]	; 800665c <main+0x404>
 8006458:	eddf 0a80 	vldr	s1, [pc, #512]	; 800665c <main+0x404>
 800645c:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8006674 <main+0x41c>
 8006460:	4885      	ldr	r0, [pc, #532]	; (8006678 <main+0x420>)
 8006462:	f7fa fa7d 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[1], 1500, 0, 0);
 8006466:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 800665c <main+0x404>
 800646a:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800665c <main+0x404>
 800646e:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8006674 <main+0x41c>
 8006472:	4882      	ldr	r0, [pc, #520]	; (800667c <main+0x424>)
 8006474:	f7fa fa74 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[2], 1500, 0, 0);
 8006478:	ed9f 1a78 	vldr	s2, [pc, #480]	; 800665c <main+0x404>
 800647c:	eddf 0a77 	vldr	s1, [pc, #476]	; 800665c <main+0x404>
 8006480:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8006674 <main+0x41c>
 8006484:	487e      	ldr	r0, [pc, #504]	; (8006680 <main+0x428>)
 8006486:	f7fa fa6b 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[3], 1500, 0, 0);
 800648a:	ed9f 1a74 	vldr	s2, [pc, #464]	; 800665c <main+0x404>
 800648e:	eddf 0a73 	vldr	s1, [pc, #460]	; 800665c <main+0x404>
 8006492:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8006674 <main+0x41c>
 8006496:	487b      	ldr	r0, [pc, #492]	; (8006684 <main+0x42c>)
 8006498:	f7fa fa62 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[4], 1500, 0, 0);
 800649c:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800665c <main+0x404>
 80064a0:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800665c <main+0x404>
 80064a4:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006674 <main+0x41c>
 80064a8:	4877      	ldr	r0, [pc, #476]	; (8006688 <main+0x430>)
 80064aa:	f7fa fa59 	bl	8000960 <PIDController_initialise>
	/*
	 * Velocity Pid Initialise
	 */
	PIDController_initialise(&velocity_pid_controller[0], 0, 0, 0);
 80064ae:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 800665c <main+0x404>
 80064b2:	eddf 0a6a 	vldr	s1, [pc, #424]	; 800665c <main+0x404>
 80064b6:	ed9f 0a69 	vldr	s0, [pc, #420]	; 800665c <main+0x404>
 80064ba:	4874      	ldr	r0, [pc, #464]	; (800668c <main+0x434>)
 80064bc:	f7fa fa50 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[1], 0, 0, 0);
 80064c0:	ed9f 1a66 	vldr	s2, [pc, #408]	; 800665c <main+0x404>
 80064c4:	eddf 0a65 	vldr	s1, [pc, #404]	; 800665c <main+0x404>
 80064c8:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800665c <main+0x404>
 80064cc:	4870      	ldr	r0, [pc, #448]	; (8006690 <main+0x438>)
 80064ce:	f7fa fa47 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[2], 0, 0, 0);
 80064d2:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800665c <main+0x404>
 80064d6:	eddf 0a61 	vldr	s1, [pc, #388]	; 800665c <main+0x404>
 80064da:	ed9f 0a60 	vldr	s0, [pc, #384]	; 800665c <main+0x404>
 80064de:	486d      	ldr	r0, [pc, #436]	; (8006694 <main+0x43c>)
 80064e0:	f7fa fa3e 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[3], 0, 0, 0);
 80064e4:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 800665c <main+0x404>
 80064e8:	eddf 0a5c 	vldr	s1, [pc, #368]	; 800665c <main+0x404>
 80064ec:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800665c <main+0x404>
 80064f0:	4869      	ldr	r0, [pc, #420]	; (8006698 <main+0x440>)
 80064f2:	f7fa fa35 	bl	8000960 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[4], 0, 0, 0);
 80064f6:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800665c <main+0x404>
 80064fa:	eddf 0a58 	vldr	s1, [pc, #352]	; 800665c <main+0x404>
 80064fe:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800665c <main+0x404>
 8006502:	4866      	ldr	r0, [pc, #408]	; (800669c <main+0x444>)
 8006504:	f7fa fa2c 	bl	8000960 <PIDController_initialise>
	/*
	 * for Cartesian Jog
	 */
	float delta_q[5] = {0};
 8006508:	1d3b      	adds	r3, r7, #4
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	609a      	str	r2, [r3, #8]
 8006512:	60da      	str	r2, [r3, #12]
 8006514:	611a      	str	r2, [r3, #16]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (set_zero_flag > 0){
 8006516:	4b62      	ldr	r3, [pc, #392]	; (80066a0 <main+0x448>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00e      	beq.n	800653c <main+0x2e4>
			AMT21_set_zero(&encoders[3]);
 800651e:	4840      	ldr	r0, [pc, #256]	; (8006620 <main+0x3c8>)
 8006520:	f7fa f932 	bl	8000788 <AMT21_set_zero>
			AMT21_set_zero(&encoders[4]);
 8006524:	483d      	ldr	r0, [pc, #244]	; (800661c <main+0x3c4>)
 8006526:	f7fa f92f 	bl	8000788 <AMT21_set_zero>
			encoder_config[3] = 0;
 800652a:	4b5e      	ldr	r3, [pc, #376]	; (80066a4 <main+0x44c>)
 800652c:	2200      	movs	r2, #0
 800652e:	60da      	str	r2, [r3, #12]
			encoder_config[4] = 0;
 8006530:	4b5c      	ldr	r3, [pc, #368]	; (80066a4 <main+0x44c>)
 8006532:	2200      	movs	r2, #0
 8006534:	611a      	str	r2, [r3, #16]
			set_zero_flag = 0;
 8006536:	4b5a      	ldr	r3, [pc, #360]	; (80066a0 <main+0x448>)
 8006538:	2200      	movs	r2, #0
 800653a:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() - timestamp1 >= 500) {
 800653c:	f002 fa48 	bl	80089d0 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800654a:	f0c0 8152 	bcc.w	80067f2 <main+0x59a>
			if ((delta_khe[0] != 0)|
 800654e:	4b56      	ldr	r3, [pc, #344]	; (80066a8 <main+0x450>)
 8006550:	edd3 7a00 	vldr	s15, [r3]
 8006554:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800655c:	bf14      	ite	ne
 800655e:	2301      	movne	r3, #1
 8006560:	2300      	moveq	r3, #0
 8006562:	b2da      	uxtb	r2, r3
			(delta_khe[1] != 0)|
 8006564:	4b50      	ldr	r3, [pc, #320]	; (80066a8 <main+0x450>)
 8006566:	edd3 7a01 	vldr	s15, [r3, #4]
			if ((delta_khe[0] != 0)|
 800656a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800656e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006572:	bf14      	ite	ne
 8006574:	2301      	movne	r3, #1
 8006576:	2300      	moveq	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	4313      	orrs	r3, r2
 800657c:	b2db      	uxtb	r3, r3
 800657e:	461a      	mov	r2, r3
			(delta_khe[2] != 0)|
 8006580:	4b49      	ldr	r3, [pc, #292]	; (80066a8 <main+0x450>)
 8006582:	edd3 7a02 	vldr	s15, [r3, #8]
 8006586:	eef5 7a40 	vcmp.f32	s15, #0.0
 800658a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800658e:	bf14      	ite	ne
 8006590:	2301      	movne	r3, #1
 8006592:	2300      	moveq	r3, #0
 8006594:	b2db      	uxtb	r3, r3
			(delta_khe[1] != 0)|
 8006596:	4313      	orrs	r3, r2
			(delta_khe[3] != 0)|
 8006598:	4a43      	ldr	r2, [pc, #268]	; (80066a8 <main+0x450>)
 800659a:	edd2 7a03 	vldr	s15, [r2, #12]
 800659e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	bf14      	ite	ne
 80065a8:	2201      	movne	r2, #1
 80065aa:	2200      	moveq	r2, #0
 80065ac:	b2d2      	uxtb	r2, r2
			(delta_khe[2] != 0)|
 80065ae:	4313      	orrs	r3, r2
			(delta_khe[4] != 0)
 80065b0:	4a3d      	ldr	r2, [pc, #244]	; (80066a8 <main+0x450>)
 80065b2:	edd2 7a04 	vldr	s15, [r2, #16]
 80065b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80065ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065be:	bf14      	ite	ne
 80065c0:	2201      	movne	r2, #1
 80065c2:	2200      	moveq	r2, #0
 80065c4:	b2d2      	uxtb	r2, r2
			(delta_khe[3] != 0)|
 80065c6:	4313      	orrs	r3, r2
			if ((delta_khe[0] != 0)|
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8112 	beq.w	80067f2 <main+0x59a>
			) {
				timestamp1 = HAL_GetTick();
 80065ce:	f002 f9ff 	bl	80089d0 <HAL_GetTick>
 80065d2:	6478      	str	r0, [r7, #68]	; 0x44
				joint_config[0] = (2*M_PI * encoder_config[0])/16384.0f;
 80065d4:	4b33      	ldr	r3, [pc, #204]	; (80066a4 <main+0x44c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	ee07 3a90 	vmov	s15, r3
 80065dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065e0:	ed9f 6b05 	vldr	d6, [pc, #20]	; 80065f8 <main+0x3a0>
 80065e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065e8:	ed9f 5b05 	vldr	d5, [pc, #20]	; 8006600 <main+0x3a8>
 80065ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80065f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80065f4:	e05a      	b.n	80066ac <main+0x454>
 80065f6:	bf00      	nop
 80065f8:	54442d18 	.word	0x54442d18
 80065fc:	401921fb 	.word	0x401921fb
 8006600:	00000000 	.word	0x00000000
 8006604:	40d00000 	.word	0x40d00000
 8006608:	58020c00 	.word	0x58020c00
 800660c:	24000dc8 	.word	0x24000dc8
 8006610:	240004f4 	.word	0x240004f4
 8006614:	24000508 	.word	0x24000508
 8006618:	2400051c 	.word	0x2400051c
 800661c:	24000544 	.word	0x24000544
 8006620:	24000530 	.word	0x24000530
 8006624:	58021000 	.word	0x58021000
 8006628:	24000a50 	.word	0x24000a50
 800662c:	24000470 	.word	0x24000470
 8006630:	24000a9c 	.word	0x24000a9c
 8006634:	24000488 	.word	0x24000488
 8006638:	58020800 	.word	0x58020800
 800663c:	240009b8 	.word	0x240009b8
 8006640:	240004a0 	.word	0x240004a0
 8006644:	240008d4 	.word	0x240008d4
 8006648:	240004d0 	.word	0x240004d0
 800664c:	24000920 	.word	0x24000920
 8006650:	240004b8 	.word	0x240004b8
 8006654:	3aa3d70a 	.word	0x3aa3d70a
 8006658:	44fa0000 	.word	0x44fa0000
 800665c:	00000000 	.word	0x00000000
 8006660:	2400065c 	.word	0x2400065c
 8006664:	2400067c 	.word	0x2400067c
 8006668:	2400069c 	.word	0x2400069c
 800666c:	240006bc 	.word	0x240006bc
 8006670:	240006dc 	.word	0x240006dc
 8006674:	44bb8000 	.word	0x44bb8000
 8006678:	240006fc 	.word	0x240006fc
 800667c:	24000730 	.word	0x24000730
 8006680:	24000764 	.word	0x24000764
 8006684:	24000798 	.word	0x24000798
 8006688:	240007cc 	.word	0x240007cc
 800668c:	24000558 	.word	0x24000558
 8006690:	2400058c 	.word	0x2400058c
 8006694:	240005c0 	.word	0x240005c0
 8006698:	240005f4 	.word	0x240005f4
 800669c:	24000628 	.word	0x24000628
 80066a0:	24000260 	.word	0x24000260
 80066a4:	24000210 	.word	0x24000210
 80066a8:	2400024c 	.word	0x2400024c
 80066ac:	4b3c      	ldr	r3, [pc, #240]	; (80067a0 <main+0x548>)
 80066ae:	edc3 7a00 	vstr	s15, [r3]
				joint_config[1] = (2*M_PI * encoder_config[1])/16384.0f;
 80066b2:	4b3c      	ldr	r3, [pc, #240]	; (80067a4 <main+0x54c>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066be:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8006788 <main+0x530>
 80066c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80066c6:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8006790 <main+0x538>
 80066ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80066d2:	4b33      	ldr	r3, [pc, #204]	; (80067a0 <main+0x548>)
 80066d4:	edc3 7a01 	vstr	s15, [r3, #4]
				joint_config[2] = (2*M_PI * encoder_config[2])/16384.0f;
 80066d8:	4b32      	ldr	r3, [pc, #200]	; (80067a4 <main+0x54c>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	ee07 3a90 	vmov	s15, r3
 80066e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066e4:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8006788 <main+0x530>
 80066e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80066ec:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8006790 <main+0x538>
 80066f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80066f8:	4b29      	ldr	r3, [pc, #164]	; (80067a0 <main+0x548>)
 80066fa:	edc3 7a02 	vstr	s15, [r3, #8]
				float m4 = 2*M_PI * encoder_config[3];
 80066fe:	4b29      	ldr	r3, [pc, #164]	; (80067a4 <main+0x54c>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800670a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8006788 <main+0x530>
 800670e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006712:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006716:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				float m5 =  2*M_PI * encoder_config[4];
 800671a:	4b22      	ldr	r3, [pc, #136]	; (80067a4 <main+0x54c>)
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006726:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8006788 <main+0x530>
 800672a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800672e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006732:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				joint_config[3] = (m4 + m5) * 0.1125;
 8006736:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800673a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800673e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006742:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006746:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8006798 <main+0x540>
 800674a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800674e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006752:	4b13      	ldr	r3, [pc, #76]	; (80067a0 <main+0x548>)
 8006754:	edc3 7a03 	vstr	s15, [r3, #12]
				joint_config[4] = (m4 - m5)/8.0;
 8006758:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800675c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006760:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006764:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800676c:	4b0c      	ldr	r3, [pc, #48]	; (80067a0 <main+0x548>)
 800676e:	edc3 7a04 	vstr	s15, [r3, #16]
//				joint_config[2] = asin(desired_position[2]/22.5);
//				float m4 = desired_position[3];
//				float m5 =  desired_position[4];
//				joint_config[3] = (m4 + m5) * 0.45;
//				joint_config[4] = (m4 - m5)/4.0;
				IVK(joint_config, delta_khe, delta_q);
 8006772:	1d3b      	adds	r3, r7, #4
 8006774:	461a      	mov	r2, r3
 8006776:	490c      	ldr	r1, [pc, #48]	; (80067a8 <main+0x550>)
 8006778:	4809      	ldr	r0, [pc, #36]	; (80067a0 <main+0x548>)
 800677a:	f7fa fbfd 	bl	8000f78 <IVK>
				for (int i = 0; i < 5; i++) {
 800677e:	2300      	movs	r3, #0
 8006780:	63bb      	str	r3, [r7, #56]	; 0x38
 8006782:	e033      	b.n	80067ec <main+0x594>
 8006784:	f3af 8000 	nop.w
 8006788:	54442d18 	.word	0x54442d18
 800678c:	401921fb 	.word	0x401921fb
 8006790:	00000000 	.word	0x00000000
 8006794:	40d00000 	.word	0x40d00000
 8006798:	cccccccd 	.word	0xcccccccd
 800679c:	3fbccccc 	.word	0x3fbccccc
 80067a0:	24000224 	.word	0x24000224
 80067a4:	24000210 	.word	0x24000210
 80067a8:	2400024c 	.word	0x2400024c
					desired_position[i] += delta_q[i];
 80067ac:	4ac6      	ldr	r2, [pc, #792]	; (8006ac8 <main+0x870>)
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	ed93 7a00 	vldr	s14, [r3]
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067c0:	4413      	add	r3, r2
 80067c2:	3b44      	subs	r3, #68	; 0x44
 80067c4:	edd3 7a00 	vldr	s15, [r3]
 80067c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067cc:	4abe      	ldr	r2, [pc, #760]	; (8006ac8 <main+0x870>)
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	edc3 7a00 	vstr	s15, [r3]
					delta_khe[i] = 0;
 80067d8:	4abc      	ldr	r2, [pc, #752]	; (8006acc <main+0x874>)
 80067da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 5; i++) {
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	3301      	adds	r3, #1
 80067ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	dddc      	ble.n	80067ac <main+0x554>
				}
//			ARMsProtocol_FUNC_Interface();
			}
		}
		if (HAL_GetTick() - timestamp2 >= 1) {
 80067f2:	f002 f8ed 	bl	80089d0 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067fa:	4293      	cmp	r3, r2
 80067fc:	f43f ae8b 	beq.w	8006516 <main+0x2be>
			timestamp2 = HAL_GetTick();
 8006800:	f002 f8e6 	bl	80089d0 <HAL_GetTick>
 8006804:	6438      	str	r0, [r7, #64]	; 0x40
			HAL_StatusTypeDef rep = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			encoder_unwrap_value[j_num] = 0;
 800680c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006816:	4413      	add	r3, r2
 8006818:	2200      	movs	r2, #0
 800681a:	f843 2c30 	str.w	r2, [r3, #-48]
			while (1) {
				AMT21_read_value(&(encoders[j_num]));
 800681e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4aa9      	ldr	r2, [pc, #676]	; (8006ad0 <main+0x878>)
 800682c:	4413      	add	r3, r2
 800682e:	4618      	mov	r0, r3
 8006830:	f7f9 ff6b 	bl	800070a <AMT21_read_value>
				rep = AMT21_check_value(&(encoders[j_num]));
 8006834:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4aa3      	ldr	r2, [pc, #652]	; (8006ad0 <main+0x878>)
 8006842:	4413      	add	r3, r2
 8006844:	4618      	mov	r0, r3
 8006846:	f7f9 ffc6 	bl	80007d6 <AMT21_check_value>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (rep == HAL_OK) {
 8006850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e2      	bne.n	800681e <main+0x5c6>
					encoder_unwrap_value[j_num] = AMT21_unwrap(
							(int32_t) encoders[j_num].position,
 8006858:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800685c:	499c      	ldr	r1, [pc, #624]	; (8006ad0 <main+0x878>)
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	330e      	adds	r3, #14
 800686a:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 800686c:	4618      	mov	r0, r3
							(int32_t) encoders[j_num].prev_position);
 800686e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006872:	4997      	ldr	r1, [pc, #604]	; (8006ad0 <main+0x878>)
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	440b      	add	r3, r1
 800687e:	3310      	adds	r3, #16
 8006880:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 8006882:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8006886:	4619      	mov	r1, r3
 8006888:	f7fa f808 	bl	800089c <AMT21_unwrap>
 800688c:	4602      	mov	r2, r0
 800688e:	00a3      	lsls	r3, r4, #2
 8006890:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006894:	440b      	add	r3, r1
 8006896:	f843 2c30 	str.w	r2, [r3, #-48]
					encoders[j_num].prev_position = encoders[j_num].position;
 800689a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800689e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80068a2:	488b      	ldr	r0, [pc, #556]	; (8006ad0 <main+0x878>)
 80068a4:	460b      	mov	r3, r1
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	440b      	add	r3, r1
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4403      	add	r3, r0
 80068ae:	330e      	adds	r3, #14
 80068b0:	8818      	ldrh	r0, [r3, #0]
 80068b2:	4987      	ldr	r1, [pc, #540]	; (8006ad0 <main+0x878>)
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	3310      	adds	r3, #16
 80068c0:	4602      	mov	r2, r0
 80068c2:	801a      	strh	r2, [r3, #0]
					break;
 80068c4:	bf00      	nop
				}
			}
			if ((j_num == 0)|(j_num == 2)|(j_num == 3)){
 80068c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bf0c      	ite	eq
 80068ce:	2301      	moveq	r3, #1
 80068d0:	2300      	movne	r3, #0
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068d8:	2b02      	cmp	r3, #2
 80068da:	bf0c      	ite	eq
 80068dc:	2301      	moveq	r3, #1
 80068de:	2300      	movne	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	bf0c      	ite	eq
 80068f0:	2301      	moveq	r3, #1
 80068f2:	2300      	movne	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	4313      	orrs	r3, r2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d010      	beq.n	800691e <main+0x6c6>
				encoder_unwrap_value[j_num] = encoder_unwrap_value[j_num] * -1;
 80068fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006906:	4413      	add	r3, r2
 8006908:	f853 2c30 	ldr.w	r2, [r3, #-48]
 800690c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006910:	4252      	negs	r2, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006918:	440b      	add	r3, r1
 800691a:	f843 2c30 	str.w	r2, [r3, #-48]
			}
			encoder_config[j_num] = encoder_config[j_num]
 800691e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006922:	4a6c      	ldr	r2, [pc, #432]	; (8006ad4 <main+0x87c>)
 8006924:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
					+ encoder_unwrap_value[j_num];
 8006928:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006932:	4413      	add	r3, r2
 8006934:	f853 2c30 	ldr.w	r2, [r3, #-48]
			encoder_config[j_num] = encoder_config[j_num]
 8006938:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
					+ encoder_unwrap_value[j_num];
 800693c:	440a      	add	r2, r1
			encoder_config[j_num] = encoder_config[j_num]
 800693e:	4965      	ldr	r1, [pc, #404]	; (8006ad4 <main+0x87c>)
 8006940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//			KalmanFilter_Update(&kalman_filter[j_num], encoder_config[j_num]);

			motor_config[0] = ((2*M_PI * encoder_config[0])/16384.0f) * (25.0f/9.0f);
 8006944:	4b63      	ldr	r3, [pc, #396]	; (8006ad4 <main+0x87c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	ee07 3a90 	vmov	s15, r3
 800694c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006950:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8006aa8 <main+0x850>
 8006954:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006958:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8006ab0 <main+0x858>
 800695c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006960:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8006ab8 <main+0x860>
 8006964:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006968:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800696c:	4b5a      	ldr	r3, [pc, #360]	; (8006ad8 <main+0x880>)
 800696e:	edc3 7a00 	vstr	s15, [r3]
			motor_config[1] = ((2*M_PI * encoder_config[1])/16384.0f) * 27.0;
 8006972:	4b58      	ldr	r3, [pc, #352]	; (8006ad4 <main+0x87c>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800697e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8006aa8 <main+0x850>
 8006982:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006986:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8006ab0 <main+0x858>
 800698a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800698e:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8006992:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006996:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800699a:	4b4f      	ldr	r3, [pc, #316]	; (8006ad8 <main+0x880>)
 800699c:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_config[2] = 22.5 * sin((2*M_PI * encoder_config[2])/16384.0f);
 80069a0:	4b4c      	ldr	r3, [pc, #304]	; (8006ad4 <main+0x87c>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	ee07 3a90 	vmov	s15, r3
 80069a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80069ac:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8006aa8 <main+0x850>
 80069b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80069b4:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8006ab0 <main+0x858>
 80069b8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80069bc:	eeb0 0b46 	vmov.f64	d0, d6
 80069c0:	f00d fb5e 	bl	8014080 <sin>
 80069c4:	eeb0 7b40 	vmov.f64	d7, d0
 80069c8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8006ac0 <main+0x868>
 80069cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80069d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80069d4:	4b40      	ldr	r3, [pc, #256]	; (8006ad8 <main+0x880>)
 80069d6:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_config[3] = (2*M_PI * encoder_config[3])/16384.0f; //checked
 80069da:	4b3e      	ldr	r3, [pc, #248]	; (8006ad4 <main+0x87c>)
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80069e6:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8006aa8 <main+0x850>
 80069ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80069ee:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8006ab0 <main+0x858>
 80069f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80069fa:	4b37      	ldr	r3, [pc, #220]	; (8006ad8 <main+0x880>)
 80069fc:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_config[4] = (2*M_PI * encoder_config[4])/16384.0f; //checked
 8006a00:	4b34      	ldr	r3, [pc, #208]	; (8006ad4 <main+0x87c>)
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	ee07 3a90 	vmov	s15, r3
 8006a08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a0c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8006aa8 <main+0x850>
 8006a10:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a14:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8006ab0 <main+0x858>
 8006a18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a1c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006a20:	4b2d      	ldr	r3, [pc, #180]	; (8006ad8 <main+0x880>)
 8006a22:	edc3 7a04 	vstr	s15, [r3, #16]
			/*
			 * Position Controller
			 */
			PIDController_update(&position_pid_controller[j_num],
 8006a26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a2a:	2234      	movs	r2, #52	; 0x34
 8006a2c:	fb02 f303 	mul.w	r3, r2, r3
 8006a30:	4a2a      	ldr	r2, [pc, #168]	; (8006adc <main+0x884>)
 8006a32:	441a      	add	r2, r3
 8006a34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a38:	4923      	ldr	r1, [pc, #140]	; (8006ac8 <main+0x870>)
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	440b      	add	r3, r1
 8006a3e:	edd3 7a00 	vldr	s15, [r3]
 8006a42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a46:	4924      	ldr	r1, [pc, #144]	; (8006ad8 <main+0x880>)
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	ed93 7a00 	vldr	s14, [r3]
 8006a50:	eef0 0a47 	vmov.f32	s1, s14
 8006a54:	eeb0 0a67 	vmov.f32	s0, s15
 8006a58:	4610      	mov	r0, r2
 8006a5a:	f7f9 ff9f 	bl	800099c <PIDController_update>
					desired_position[j_num], motor_config[j_num]);
			stepper_set_speed(&steppers[j_num],
 8006a5e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006a62:	4613      	mov	r3, r2
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	4413      	add	r3, r2
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	4a1d      	ldr	r2, [pc, #116]	; (8006ae0 <main+0x888>)
 8006a6c:	441a      	add	r2, r3
 8006a6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a72:	491a      	ldr	r1, [pc, #104]	; (8006adc <main+0x884>)
 8006a74:	2034      	movs	r0, #52	; 0x34
 8006a76:	fb00 f303 	mul.w	r3, r0, r3
 8006a7a:	440b      	add	r3, r1
 8006a7c:	3330      	adds	r3, #48	; 0x30
 8006a7e:	edd3 7a00 	vldr	s15, [r3]
 8006a82:	eeb0 0a67 	vmov.f32	s0, s15
 8006a86:	4610      	mov	r0, r2
 8006a88:	f000 f9a8 	bl	8006ddc <stepper_set_speed>
					position_pid_controller[j_num].out);
			j_num++;
 8006a8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a90:	3301      	adds	r3, #1
 8006a92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (j_num == 5) {
 8006a96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a9a:	2b05      	cmp	r3, #5
 8006a9c:	f47f ad3b 	bne.w	8006516 <main+0x2be>
				j_num = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (set_zero_flag > 0){
 8006aa6:	e536      	b.n	8006516 <main+0x2be>
 8006aa8:	54442d18 	.word	0x54442d18
 8006aac:	401921fb 	.word	0x401921fb
 8006ab0:	00000000 	.word	0x00000000
 8006ab4:	40d00000 	.word	0x40d00000
 8006ab8:	80000000 	.word	0x80000000
 8006abc:	400638e3 	.word	0x400638e3
 8006ac0:	00000000 	.word	0x00000000
 8006ac4:	40368000 	.word	0x40368000
 8006ac8:	240001fc 	.word	0x240001fc
 8006acc:	2400024c 	.word	0x2400024c
 8006ad0:	240004f4 	.word	0x240004f4
 8006ad4:	24000210 	.word	0x24000210
 8006ad8:	24000238 	.word	0x24000238
 8006adc:	240006fc 	.word	0x240006fc
 8006ae0:	24000470 	.word	0x24000470

08006ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b09c      	sub	sp, #112	; 0x70
 8006ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aee:	224c      	movs	r2, #76	; 0x4c
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f00a fe34 	bl	8011760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006af8:	1d3b      	adds	r3, r7, #4
 8006afa:	2220      	movs	r2, #32
 8006afc:	2100      	movs	r1, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f00a fe2e 	bl	8011760 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006b04:	2002      	movs	r0, #2
 8006b06:	f004 fbfb 	bl	800b300 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	603b      	str	r3, [r7, #0]
 8006b0e:	4b30      	ldr	r3, [pc, #192]	; (8006bd0 <SystemClock_Config+0xec>)
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	4a2f      	ldr	r2, [pc, #188]	; (8006bd0 <SystemClock_Config+0xec>)
 8006b14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006b18:	6193      	str	r3, [r2, #24]
 8006b1a:	4b2d      	ldr	r3, [pc, #180]	; (8006bd0 <SystemClock_Config+0xec>)
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006b26:	bf00      	nop
 8006b28:	4b29      	ldr	r3, [pc, #164]	; (8006bd0 <SystemClock_Config+0xec>)
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b34:	d1f8      	bne.n	8006b28 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006b36:	4b27      	ldr	r3, [pc, #156]	; (8006bd4 <SystemClock_Config+0xf0>)
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	4a25      	ldr	r2, [pc, #148]	; (8006bd4 <SystemClock_Config+0xf0>)
 8006b40:	f043 0302 	orr.w	r3, r3, #2
 8006b44:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006b46:	2301      	movs	r3, #1
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b50:	2302      	movs	r3, #2
 8006b52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006b54:	2302      	movs	r3, #2
 8006b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8006b5c:	232c      	movs	r3, #44	; 0x2c
 8006b5e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006b60:	2301      	movs	r3, #1
 8006b62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006b64:	2303      	movs	r3, #3
 8006b66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f004 fbf9 	bl	800b374 <HAL_RCC_OscConfig>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8006b88:	f000 f866 	bl	8006c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006b8c:	233f      	movs	r3, #63	; 0x3f
 8006b8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b90:	2303      	movs	r3, #3
 8006b92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006b98:	2308      	movs	r3, #8
 8006b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006b9c:	2340      	movs	r3, #64	; 0x40
 8006b9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006ba0:	2340      	movs	r3, #64	; 0x40
 8006ba2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006baa:	2340      	movs	r3, #64	; 0x40
 8006bac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006bae:	1d3b      	adds	r3, r7, #4
 8006bb0:	2103      	movs	r1, #3
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f004 ff8a 	bl	800bacc <HAL_RCC_ClockConfig>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8006bbe:	f000 f84b 	bl	8006c58 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8006bc2:	f005 f939 	bl	800be38 <HAL_RCC_EnableCSS>
}
 8006bc6:	bf00      	nop
 8006bc8:	3770      	adds	r7, #112	; 0x70
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	58024800 	.word	0x58024800
 8006bd4:	58024400 	.word	0x58024400

08006bd8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b0ae      	sub	sp, #184	; 0xb8
 8006bdc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	22b4      	movs	r2, #180	; 0xb4
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f00a fdbb 	bl	8011760 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006bea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006bee:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8006bf4:	230f      	movs	r3, #15
 8006bf6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006c00:	2302      	movs	r3, #2
 8006c02:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8006c04:	23c0      	movs	r3, #192	; 0xc0
 8006c06:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8006c0c:	f640 3386 	movw	r3, #2950	; 0xb86
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8006c12:	2300      	movs	r3, #0
 8006c14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c18:	1d3b      	adds	r3, r7, #4
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f005 fb0e 	bl	800c23c <HAL_RCCEx_PeriphCLKConfig>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8006c26:	f000 f817 	bl	8006c58 <Error_Handler>
  }
}
 8006c2a:	bf00      	nop
 8006c2c:	37b8      	adds	r7, #184	; 0xb8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 1);
 8006c3c:	1d39      	adds	r1, r7, #4
 8006c3e:	2301      	movs	r3, #1
 8006c40:	2201      	movs	r2, #1
 8006c42:	4804      	ldr	r0, [pc, #16]	; (8006c54 <__io_putchar+0x20>)
 8006c44:	f008 fe5a 	bl	800f8fc <HAL_UART_Transmit>

	return ch;
 8006c48:	687b      	ldr	r3, [r7, #4]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	24000c18 	.word	0x24000c18

08006c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006c5c:	b672      	cpsid	i
}
 8006c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006c60:	e7fe      	b.n	8006c60 <Error_Handler+0x8>
	...

08006c64 <stepper_initialise>:
 */

#include "motor.h"

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		uint32_t tim_channel, GPIO_TypeDef *dir_port, uint16_t dir_pin, uint8_t dir_mode) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	605a      	str	r2, [r3, #4]
	dev->dir_port = dir_port;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	609a      	str	r2, [r3, #8]
	dev->dir_pin = dir_pin;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8b3a      	ldrh	r2, [r7, #24]
 8006c88:	819a      	strh	r2, [r3, #12]
	/*
	 * dir mode set direction of stepper
	 */
	dev->dir_mode = dir_mode;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	7f3a      	ldrb	r2, [r7, #28]
 8006c8e:	755a      	strb	r2, [r3, #21]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6898      	ldr	r0, [r3, #8]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	899b      	ldrh	r3, [r3, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	f004 fb16 	bl	800b2cc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4610      	mov	r0, r2
 8006cac:	f007 fd32 	bl	800e714 <HAL_TIM_PWM_Start>
	dev->freq = 1;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006cb6:	611a      	str	r2, [r3, #16]
	stepper_set_speed(dev, 0);
 8006cb8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8006ccc <stepper_initialise+0x68>
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 f88d 	bl	8006ddc <stepper_set_speed>
}
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	00000000 	.word	0x00000000

08006cd0 <set_pwm>:
	dev->degree = 1;
	servo_set_degree(dev, 0);
}

void set_pwm(TIM_HandleTypeDef *tim_pwm, uint32_t tim_channel, float freq,
		float duty_cycle) {
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	ed87 0a01 	vstr	s0, [r7, #4]
 8006cde:	edc7 0a00 	vstr	s1, [r7]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	if (freq > MAX_FREQUENCY){
 8006ce2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ce6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006dcc <set_pwm+0xfc>
 8006cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf2:	dd02      	ble.n	8006cfa <set_pwm+0x2a>
		freq = MAX_FREQUENCY;
 8006cf4:	4b36      	ldr	r3, [pc, #216]	; (8006dd0 <set_pwm+0x100>)
 8006cf6:	607b      	str	r3, [r7, #4]
 8006cf8:	e00a      	b.n	8006d10 <set_pwm+0x40>
	}
	else if ((freq * -1) > MAX_FREQUENCY){
 8006cfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cfe:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006dd4 <set_pwm+0x104>
 8006d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d0a:	d501      	bpl.n	8006d10 <set_pwm+0x40>
		freq = MAX_FREQUENCY;
 8006d0c:	4b30      	ldr	r3, [pc, #192]	; (8006dd0 <set_pwm+0x100>)
 8006d0e:	607b      	str	r3, [r7, #4]
	}
	uint16_t ARR_value = 50000 / freq; //500000 come from 275MHz/550
 8006d10:	eddf 6a31 	vldr	s13, [pc, #196]	; 8006dd8 <set_pwm+0x108>
 8006d14:	ed97 7a01 	vldr	s14, [r7, #4]
 8006d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d20:	ee17 3a90 	vmov	r3, s15
 8006d24:	82bb      	strh	r3, [r7, #20]
	uint16_t CCRx_value = (ARR_value * duty_cycle);
 8006d26:	8abb      	ldrh	r3, [r7, #20]
 8006d28:	ee07 3a90 	vmov	s15, r3
 8006d2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d30:	edd7 7a00 	vldr	s15, [r7]
 8006d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d3c:	ee17 3a90 	vmov	r3, s15
 8006d40:	82fb      	strh	r3, [r7, #22]
	if (duty_cycle == 1.0) {
 8006d42:	edd7 7a00 	vldr	s15, [r7]
 8006d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d4a:	eef4 7a47 	vcmp.f32	s15, s14
 8006d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d52:	d101      	bne.n	8006d58 <set_pwm+0x88>
		CCRx_value = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	82fb      	strh	r3, [r7, #22]
	}
	__HAL_TIM_SET_AUTORELOAD(tim_pwm, ARR_value);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	8aba      	ldrh	r2, [r7, #20]
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d60:	8aba      	ldrh	r2, [r7, #20]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <set_pwm+0xa6>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	8afa      	ldrh	r2, [r7, #22]
 8006d72:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006d74:	e023      	b.n	8006dbe <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d104      	bne.n	8006d86 <set_pwm+0xb6>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	8afb      	ldrh	r3, [r7, #22]
 8006d82:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006d84:	e01b      	b.n	8006dbe <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d104      	bne.n	8006d96 <set_pwm+0xc6>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	8afb      	ldrh	r3, [r7, #22]
 8006d92:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8006d94:	e013      	b.n	8006dbe <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b0c      	cmp	r3, #12
 8006d9a:	d104      	bne.n	8006da6 <set_pwm+0xd6>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	8afb      	ldrh	r3, [r7, #22]
 8006da2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8006da4:	e00b      	b.n	8006dbe <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b10      	cmp	r3, #16
 8006daa:	d104      	bne.n	8006db6 <set_pwm+0xe6>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	8afb      	ldrh	r3, [r7, #22]
 8006db2:	6593      	str	r3, [r2, #88]	; 0x58
}
 8006db4:	e003      	b.n	8006dbe <set_pwm+0xee>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	8afb      	ldrh	r3, [r7, #22]
 8006dbc:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8006dbe:	bf00      	nop
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	46c35000 	.word	0x46c35000
 8006dd0:	46c35000 	.word	0x46c35000
 8006dd4:	c6c35000 	.word	0xc6c35000
 8006dd8:	47435000 	.word	0x47435000

08006ddc <stepper_set_speed>:
		set_pwm(dev->timHandle, dev->tim_channel, 50, cyc);
		dev->degree = degree;
	}
}

void stepper_set_speed(Stepper_Motor *dev, float freq) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	ed87 0a00 	vstr	s0, [r7]
	 stepper_set_speed does set your stepper to your given value.

	 :param freq can be -9999.9999 to 9999.9999. signed value use to set stepper direction.
	 :return: None
	 */
	if (freq != dev->freq) {
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	edd3 7a04 	vldr	s15, [r3, #16]
 8006dee:	ed97 7a00 	vldr	s14, [r7]
 8006df2:	eeb4 7a67 	vcmp.f32	s14, s15
 8006df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dfa:	d070      	beq.n	8006ede <stepper_set_speed+0x102>
		if (freq > MIN_FREQUENCY) {
 8006dfc:	edd7 7a00 	vldr	s15, [r7]
 8006e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0c:	dd25      	ble.n	8006e5a <stepper_set_speed+0x7e>
			if (dev->dir_mode == 0){
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7d5b      	ldrb	r3, [r3, #21]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d108      	bne.n	8006e28 <stepper_set_speed+0x4c>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6898      	ldr	r0, [r3, #8]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	899b      	ldrh	r3, [r3, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4619      	mov	r1, r3
 8006e22:	f004 fa53 	bl	800b2cc <HAL_GPIO_WritePin>
 8006e26:	e00b      	b.n	8006e40 <stepper_set_speed+0x64>
			}
			else if (dev->dir_mode == 1){
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	7d5b      	ldrb	r3, [r3, #21]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d107      	bne.n	8006e40 <stepper_set_speed+0x64>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6898      	ldr	r0, [r3, #8]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	899b      	ldrh	r3, [r3, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	f004 fa46 	bl	800b2cc <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, freq, 0.50);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8006e4c:	ed97 0a00 	vldr	s0, [r7]
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f7ff ff3c 	bl	8006cd0 <set_pwm>
 8006e58:	e03e      	b.n	8006ed8 <stepper_set_speed+0xfc>
		} else if (freq < (-1 * MIN_FREQUENCY)) {
 8006e5a:	edd7 7a00 	vldr	s15, [r7]
 8006e5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6a:	d529      	bpl.n	8006ec0 <stepper_set_speed+0xe4>
			if (dev->dir_mode == 0){
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	7d5b      	ldrb	r3, [r3, #21]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d108      	bne.n	8006e86 <stepper_set_speed+0xaa>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6898      	ldr	r0, [r3, #8]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	899b      	ldrh	r3, [r3, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	4619      	mov	r1, r3
 8006e80:	f004 fa24 	bl	800b2cc <HAL_GPIO_WritePin>
 8006e84:	e00b      	b.n	8006e9e <stepper_set_speed+0xc2>
			}
			else if (dev->dir_mode == 1){
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	7d5b      	ldrb	r3, [r3, #21]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d107      	bne.n	8006e9e <stepper_set_speed+0xc2>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6898      	ldr	r0, [r3, #8]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	899b      	ldrh	r3, [r3, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f004 fa17 	bl	800b2cc <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, (-1*freq), 0.50);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	edd7 7a00 	vldr	s15, [r7]
 8006eaa:	eef1 7a67 	vneg.f32	s15, s15
 8006eae:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8006eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4610      	mov	r0, r2
 8006eba:	f7ff ff09 	bl	8006cd0 <set_pwm>
 8006ebe:	e00b      	b.n	8006ed8 <stepper_set_speed+0xfc>
		} else {
			set_pwm(dev->timHandle, dev->tim_channel, 100, 1.0);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006ecc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8006ee8 <stepper_set_speed+0x10c>
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f7ff fefc 	bl	8006cd0 <set_pwm>
		}
		dev->freq = freq;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	611a      	str	r2, [r3, #16]
	}
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	42c80000 	.word	0x42c80000

08006eec <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8006ef0:	4b27      	ldr	r3, [pc, #156]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006ef2:	4a28      	ldr	r2, [pc, #160]	; (8006f94 <MX_SPI3_Init+0xa8>)
 8006ef4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006ef6:	4b26      	ldr	r3, [pc, #152]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006ef8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006efc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006efe:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8006f04:	4b22      	ldr	r3, [pc, #136]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f06:	2203      	movs	r2, #3
 8006f08:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f0a:	4b21      	ldr	r3, [pc, #132]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f10:	4b1f      	ldr	r3, [pc, #124]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006f16:	4b1e      	ldr	r3, [pc, #120]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006f1c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f1e:	4b1c      	ldr	r3, [pc, #112]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f24:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f2a:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f30:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8006f36:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f3c:	4b14      	ldr	r3, [pc, #80]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f42:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006f44:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006f4a:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006f50:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006f56:	4b0e      	ldr	r3, [pc, #56]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8006f62:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006f6e:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006f7a:	4805      	ldr	r0, [pc, #20]	; (8006f90 <MX_SPI3_Init+0xa4>)
 8006f7c:	f007 f9f0 	bl	800e360 <HAL_SPI_Init>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8006f86:	f7ff fe67 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006f8a:	bf00      	nop
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	24000800 	.word	0x24000800
 8006f94:	40003c00 	.word	0x40003c00

08006f98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b0b6      	sub	sp, #216	; 0xd8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	605a      	str	r2, [r3, #4]
 8006faa:	609a      	str	r2, [r3, #8]
 8006fac:	60da      	str	r2, [r3, #12]
 8006fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006fb0:	f107 0310 	add.w	r3, r7, #16
 8006fb4:	22b4      	movs	r2, #180	; 0xb4
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f00a fbd1 	bl	8011760 <memset>
  if(spiHandle->Instance==SPI3)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a25      	ldr	r2, [pc, #148]	; (8007058 <HAL_SPI_MspInit+0xc0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d142      	bne.n	800704e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8006fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fcc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006fd2:	f107 0310 	add.w	r3, r7, #16
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f005 f930 	bl	800c23c <HAL_RCCEx_PeriphCLKConfig>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8006fe2:	f7ff fe39 	bl	8006c58 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006fe6:	4b1d      	ldr	r3, [pc, #116]	; (800705c <HAL_SPI_MspInit+0xc4>)
 8006fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fec:	4a1b      	ldr	r2, [pc, #108]	; (800705c <HAL_SPI_MspInit+0xc4>)
 8006fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006ff6:	4b19      	ldr	r3, [pc, #100]	; (800705c <HAL_SPI_MspInit+0xc4>)
 8006ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007004:	4b15      	ldr	r3, [pc, #84]	; (800705c <HAL_SPI_MspInit+0xc4>)
 8007006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800700a:	4a14      	ldr	r2, [pc, #80]	; (800705c <HAL_SPI_MspInit+0xc4>)
 800700c:	f043 0304 	orr.w	r3, r3, #4
 8007010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007014:	4b11      	ldr	r3, [pc, #68]	; (800705c <HAL_SPI_MspInit+0xc4>)
 8007016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	60bb      	str	r3, [r7, #8]
 8007020:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007022:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007026:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702a:	2302      	movs	r3, #2
 800702c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007030:	2300      	movs	r3, #0
 8007032:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007036:	2300      	movs	r3, #0
 8007038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800703c:	2306      	movs	r3, #6
 800703e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007042:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007046:	4619      	mov	r1, r3
 8007048:	4805      	ldr	r0, [pc, #20]	; (8007060 <HAL_SPI_MspInit+0xc8>)
 800704a:	f003 ff97 	bl	800af7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800704e:	bf00      	nop
 8007050:	37d8      	adds	r7, #216	; 0xd8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	40003c00 	.word	0x40003c00
 800705c:	58024400 	.word	0x58024400
 8007060:	58020800 	.word	0x58020800

08007064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800706a:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <HAL_MspInit+0x30>)
 800706c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007070:	4a08      	ldr	r2, [pc, #32]	; (8007094 <HAL_MspInit+0x30>)
 8007072:	f043 0302 	orr.w	r3, r3, #2
 8007076:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800707a:	4b06      	ldr	r3, [pc, #24]	; (8007094 <HAL_MspInit+0x30>)
 800707c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	607b      	str	r3, [r7, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	58024400 	.word	0x58024400

08007098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800709c:	f005 f8b2 	bl	800c204 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80070a0:	e7fe      	b.n	80070a0 <NMI_Handler+0x8>

080070a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80070a2:	b480      	push	{r7}
 80070a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070a6:	e7fe      	b.n	80070a6 <HardFault_Handler+0x4>

080070a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80070ac:	e7fe      	b.n	80070ac <MemManage_Handler+0x4>

080070ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80070ae:	b480      	push	{r7}
 80070b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80070b2:	e7fe      	b.n	80070b2 <BusFault_Handler+0x4>

080070b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80070b8:	e7fe      	b.n	80070b8 <UsageFault_Handler+0x4>

080070ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80070ba:	b480      	push	{r7}
 80070bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80070be:	bf00      	nop
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070cc:	bf00      	nop
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80070d6:	b480      	push	{r7}
 80070d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80070da:	bf00      	nop
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070e8:	f001 fc5e 	bl	80089a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80070ec:	bf00      	nop
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80070f4:	4802      	ldr	r0, [pc, #8]	; (8007100 <USART3_IRQHandler+0x10>)
 80070f6:	f008 fd6b 	bl	800fbd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	24000c18 	.word	0x24000c18

08007104 <HAL_UART_TxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	__HAL_UART_FLUSH_DRREGISTER(huart);
	ARMsProtocol_FUNC_Rx_Callback(huart);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	//__HAL_UART_FLUSH_DRREGISTER(huart);
	ARMsProtocol_Data.Tx_flag = 0;
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <HAL_UART_TxCpltCallback+0x1c>)
 800710e:	2200      	movs	r2, #0
 8007110:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	2400027c 	.word	0x2400027c

08007124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
	return 1;
 8007128:	2301      	movs	r3, #1
}
 800712a:	4618      	mov	r0, r3
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <_kill>:

int _kill(int pid, int sig)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800713e:	f00a fad7 	bl	80116f0 <__errno>
 8007142:	4603      	mov	r3, r0
 8007144:	2216      	movs	r2, #22
 8007146:	601a      	str	r2, [r3, #0]
	return -1;
 8007148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <_exit>:

void _exit (int status)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800715c:	f04f 31ff 	mov.w	r1, #4294967295
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff ffe7 	bl	8007134 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007166:	e7fe      	b.n	8007166 <_exit+0x12>

08007168 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	e00a      	b.n	8007190 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800717a:	f3af 8000 	nop.w
 800717e:	4601      	mov	r1, r0
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	60ba      	str	r2, [r7, #8]
 8007186:	b2ca      	uxtb	r2, r1
 8007188:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	3301      	adds	r3, #1
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	dbf0      	blt.n	800717a <_read+0x12>
	}

return len;
 8007198:	687b      	ldr	r3, [r7, #4]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b086      	sub	sp, #24
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071ae:	2300      	movs	r3, #0
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	e009      	b.n	80071c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	60ba      	str	r2, [r7, #8]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff fd39 	bl	8006c34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	3301      	adds	r3, #1
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	dbf1      	blt.n	80071b4 <_write+0x12>
	}
	return len;
 80071d0:	687b      	ldr	r3, [r7, #4]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <_close>:

int _close(int file)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
	return -1;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007202:	605a      	str	r2, [r3, #4]
	return 0;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <_isatty>:

int _isatty(int file)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
	return 1;
 800721a:	2301      	movs	r3, #1
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
	return 0;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800724c:	4a14      	ldr	r2, [pc, #80]	; (80072a0 <_sbrk+0x5c>)
 800724e:	4b15      	ldr	r3, [pc, #84]	; (80072a4 <_sbrk+0x60>)
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007258:	4b13      	ldr	r3, [pc, #76]	; (80072a8 <_sbrk+0x64>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d102      	bne.n	8007266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007260:	4b11      	ldr	r3, [pc, #68]	; (80072a8 <_sbrk+0x64>)
 8007262:	4a12      	ldr	r2, [pc, #72]	; (80072ac <_sbrk+0x68>)
 8007264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007266:	4b10      	ldr	r3, [pc, #64]	; (80072a8 <_sbrk+0x64>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4413      	add	r3, r2
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	429a      	cmp	r2, r3
 8007272:	d207      	bcs.n	8007284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007274:	f00a fa3c 	bl	80116f0 <__errno>
 8007278:	4603      	mov	r3, r0
 800727a:	220c      	movs	r2, #12
 800727c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800727e:	f04f 33ff 	mov.w	r3, #4294967295
 8007282:	e009      	b.n	8007298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007284:	4b08      	ldr	r3, [pc, #32]	; (80072a8 <_sbrk+0x64>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800728a:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <_sbrk+0x64>)
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4413      	add	r3, r2
 8007292:	4a05      	ldr	r2, [pc, #20]	; (80072a8 <_sbrk+0x64>)
 8007294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007296:	68fb      	ldr	r3, [r7, #12]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	24050000 	.word	0x24050000
 80072a4:	00000400 	.word	0x00000400
 80072a8:	24000264 	.word	0x24000264
 80072ac:	24000e70 	.word	0x24000e70

080072b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80072b4:	4b32      	ldr	r3, [pc, #200]	; (8007380 <SystemInit+0xd0>)
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ba:	4a31      	ldr	r2, [pc, #196]	; (8007380 <SystemInit+0xd0>)
 80072bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80072c4:	4b2f      	ldr	r3, [pc, #188]	; (8007384 <SystemInit+0xd4>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 030f 	and.w	r3, r3, #15
 80072cc:	2b06      	cmp	r3, #6
 80072ce:	d807      	bhi.n	80072e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80072d0:	4b2c      	ldr	r3, [pc, #176]	; (8007384 <SystemInit+0xd4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f023 030f 	bic.w	r3, r3, #15
 80072d8:	4a2a      	ldr	r2, [pc, #168]	; (8007384 <SystemInit+0xd4>)
 80072da:	f043 0307 	orr.w	r3, r3, #7
 80072de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80072e0:	4b29      	ldr	r3, [pc, #164]	; (8007388 <SystemInit+0xd8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a28      	ldr	r2, [pc, #160]	; (8007388 <SystemInit+0xd8>)
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80072ec:	4b26      	ldr	r3, [pc, #152]	; (8007388 <SystemInit+0xd8>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80072f2:	4b25      	ldr	r3, [pc, #148]	; (8007388 <SystemInit+0xd8>)
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	4924      	ldr	r1, [pc, #144]	; (8007388 <SystemInit+0xd8>)
 80072f8:	4b24      	ldr	r3, [pc, #144]	; (800738c <SystemInit+0xdc>)
 80072fa:	4013      	ands	r3, r2
 80072fc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80072fe:	4b21      	ldr	r3, [pc, #132]	; (8007384 <SystemInit+0xd4>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d007      	beq.n	800731a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800730a:	4b1e      	ldr	r3, [pc, #120]	; (8007384 <SystemInit+0xd4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f023 030f 	bic.w	r3, r3, #15
 8007312:	4a1c      	ldr	r2, [pc, #112]	; (8007384 <SystemInit+0xd4>)
 8007314:	f043 0307 	orr.w	r3, r3, #7
 8007318:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800731a:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <SystemInit+0xd8>)
 800731c:	2200      	movs	r2, #0
 800731e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007320:	4b19      	ldr	r3, [pc, #100]	; (8007388 <SystemInit+0xd8>)
 8007322:	2200      	movs	r2, #0
 8007324:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007326:	4b18      	ldr	r3, [pc, #96]	; (8007388 <SystemInit+0xd8>)
 8007328:	2200      	movs	r2, #0
 800732a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800732c:	4b16      	ldr	r3, [pc, #88]	; (8007388 <SystemInit+0xd8>)
 800732e:	4a18      	ldr	r2, [pc, #96]	; (8007390 <SystemInit+0xe0>)
 8007330:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <SystemInit+0xd8>)
 8007334:	4a17      	ldr	r2, [pc, #92]	; (8007394 <SystemInit+0xe4>)
 8007336:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007338:	4b13      	ldr	r3, [pc, #76]	; (8007388 <SystemInit+0xd8>)
 800733a:	4a17      	ldr	r2, [pc, #92]	; (8007398 <SystemInit+0xe8>)
 800733c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800733e:	4b12      	ldr	r3, [pc, #72]	; (8007388 <SystemInit+0xd8>)
 8007340:	2200      	movs	r2, #0
 8007342:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007344:	4b10      	ldr	r3, [pc, #64]	; (8007388 <SystemInit+0xd8>)
 8007346:	4a14      	ldr	r2, [pc, #80]	; (8007398 <SystemInit+0xe8>)
 8007348:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800734a:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <SystemInit+0xd8>)
 800734c:	2200      	movs	r2, #0
 800734e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007350:	4b0d      	ldr	r3, [pc, #52]	; (8007388 <SystemInit+0xd8>)
 8007352:	4a11      	ldr	r2, [pc, #68]	; (8007398 <SystemInit+0xe8>)
 8007354:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007356:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <SystemInit+0xd8>)
 8007358:	2200      	movs	r2, #0
 800735a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <SystemInit+0xd8>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a09      	ldr	r2, [pc, #36]	; (8007388 <SystemInit+0xd8>)
 8007362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007366:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <SystemInit+0xd8>)
 800736a:	2200      	movs	r2, #0
 800736c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800736e:	4b0b      	ldr	r3, [pc, #44]	; (800739c <SystemInit+0xec>)
 8007370:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8007374:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8007376:	bf00      	nop
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	e000ed00 	.word	0xe000ed00
 8007384:	52002000 	.word	0x52002000
 8007388:	58024400 	.word	0x58024400
 800738c:	eaf6ed7f 	.word	0xeaf6ed7f
 8007390:	02020200 	.word	0x02020200
 8007394:	01ff0000 	.word	0x01ff0000
 8007398:	01010280 	.word	0x01010280
 800739c:	52004000 	.word	0x52004000

080073a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b09c      	sub	sp, #112	; 0x70
 80073a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80073a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	605a      	str	r2, [r3, #4]
 80073b0:	609a      	str	r2, [r3, #8]
 80073b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	605a      	str	r2, [r3, #4]
 80073be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80073c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	605a      	str	r2, [r3, #4]
 80073ca:	609a      	str	r2, [r3, #8]
 80073cc:	60da      	str	r2, [r3, #12]
 80073ce:	611a      	str	r2, [r3, #16]
 80073d0:	615a      	str	r2, [r3, #20]
 80073d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80073d4:	1d3b      	adds	r3, r7, #4
 80073d6:	2234      	movs	r2, #52	; 0x34
 80073d8:	2100      	movs	r1, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	f00a f9c0 	bl	8011760 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80073e0:	4b44      	ldr	r3, [pc, #272]	; (80074f4 <MX_TIM1_Init+0x154>)
 80073e2:	4a45      	ldr	r2, [pc, #276]	; (80074f8 <MX_TIM1_Init+0x158>)
 80073e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5500-1;
 80073e6:	4b43      	ldr	r3, [pc, #268]	; (80074f4 <MX_TIM1_Init+0x154>)
 80073e8:	f241 527b 	movw	r2, #5499	; 0x157b
 80073ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073ee:	4b41      	ldr	r3, [pc, #260]	; (80074f4 <MX_TIM1_Init+0x154>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80073f4:	4b3f      	ldr	r3, [pc, #252]	; (80074f4 <MX_TIM1_Init+0x154>)
 80073f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80073fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073fc:	4b3d      	ldr	r3, [pc, #244]	; (80074f4 <MX_TIM1_Init+0x154>)
 80073fe:	2200      	movs	r2, #0
 8007400:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007402:	4b3c      	ldr	r3, [pc, #240]	; (80074f4 <MX_TIM1_Init+0x154>)
 8007404:	2200      	movs	r2, #0
 8007406:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007408:	4b3a      	ldr	r3, [pc, #232]	; (80074f4 <MX_TIM1_Init+0x154>)
 800740a:	2280      	movs	r2, #128	; 0x80
 800740c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800740e:	4839      	ldr	r0, [pc, #228]	; (80074f4 <MX_TIM1_Init+0x154>)
 8007410:	f007 f8c7 	bl	800e5a2 <HAL_TIM_Base_Init>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800741a:	f7ff fc1d 	bl	8006c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800741e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007422:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007424:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007428:	4619      	mov	r1, r3
 800742a:	4832      	ldr	r0, [pc, #200]	; (80074f4 <MX_TIM1_Init+0x154>)
 800742c:	f007 fba2 	bl	800eb74 <HAL_TIM_ConfigClockSource>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8007436:	f7ff fc0f 	bl	8006c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800743a:	482e      	ldr	r0, [pc, #184]	; (80074f4 <MX_TIM1_Init+0x154>)
 800743c:	f007 f908 	bl	800e650 <HAL_TIM_PWM_Init>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8007446:	f7ff fc07 	bl	8006c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800744a:	2300      	movs	r3, #0
 800744c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800744e:	2300      	movs	r3, #0
 8007450:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007452:	2300      	movs	r3, #0
 8007454:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007456:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800745a:	4619      	mov	r1, r3
 800745c:	4825      	ldr	r0, [pc, #148]	; (80074f4 <MX_TIM1_Init+0x154>)
 800745e:	f008 f8c1 	bl	800f5e4 <HAL_TIMEx_MasterConfigSynchronization>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8007468:	f7ff fbf6 	bl	8006c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800746c:	2360      	movs	r3, #96	; 0x60
 800746e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007474:	2300      	movs	r3, #0
 8007476:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007478:	2300      	movs	r3, #0
 800747a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800747c:	2300      	movs	r3, #0
 800747e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007480:	2300      	movs	r3, #0
 8007482:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007484:	2300      	movs	r3, #0
 8007486:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007488:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800748c:	2200      	movs	r2, #0
 800748e:	4619      	mov	r1, r3
 8007490:	4818      	ldr	r0, [pc, #96]	; (80074f4 <MX_TIM1_Init+0x154>)
 8007492:	f007 fa5b 	bl	800e94c <HAL_TIM_PWM_ConfigChannel>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800749c:	f7ff fbdc 	bl	8006c58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80074b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80074be:	2300      	movs	r3, #0
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80074c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80074c8:	2300      	movs	r3, #0
 80074ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80074cc:	2300      	movs	r3, #0
 80074ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80074d0:	1d3b      	adds	r3, r7, #4
 80074d2:	4619      	mov	r1, r3
 80074d4:	4807      	ldr	r0, [pc, #28]	; (80074f4 <MX_TIM1_Init+0x154>)
 80074d6:	f008 f921 	bl	800f71c <HAL_TIMEx_ConfigBreakDeadTime>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80074e0:	f7ff fbba 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80074e4:	4803      	ldr	r0, [pc, #12]	; (80074f4 <MX_TIM1_Init+0x154>)
 80074e6:	f000 fdc3 	bl	8008070 <HAL_TIM_MspPostInit>

}
 80074ea:	bf00      	nop
 80074ec:	3770      	adds	r7, #112	; 0x70
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	24000a50 	.word	0x24000a50
 80074f8:	40010000 	.word	0x40010000

080074fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08e      	sub	sp, #56	; 0x38
 8007500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	605a      	str	r2, [r3, #4]
 800750c:	609a      	str	r2, [r3, #8]
 800750e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007510:	f107 031c 	add.w	r3, r7, #28
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	605a      	str	r2, [r3, #4]
 800751a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800751c:	463b      	mov	r3, r7
 800751e:	2200      	movs	r2, #0
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	605a      	str	r2, [r3, #4]
 8007524:	609a      	str	r2, [r3, #8]
 8007526:	60da      	str	r2, [r3, #12]
 8007528:	611a      	str	r2, [r3, #16]
 800752a:	615a      	str	r2, [r3, #20]
 800752c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800752e:	4b2e      	ldr	r3, [pc, #184]	; (80075e8 <MX_TIM2_Init+0xec>)
 8007530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007534:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5500- 1;
 8007536:	4b2c      	ldr	r3, [pc, #176]	; (80075e8 <MX_TIM2_Init+0xec>)
 8007538:	f241 527b 	movw	r2, #5499	; 0x157b
 800753c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800753e:	4b2a      	ldr	r3, [pc, #168]	; (80075e8 <MX_TIM2_Init+0xec>)
 8007540:	2200      	movs	r2, #0
 8007542:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8007544:	4b28      	ldr	r3, [pc, #160]	; (80075e8 <MX_TIM2_Init+0xec>)
 8007546:	f242 7210 	movw	r2, #10000	; 0x2710
 800754a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800754c:	4b26      	ldr	r3, [pc, #152]	; (80075e8 <MX_TIM2_Init+0xec>)
 800754e:	2200      	movs	r2, #0
 8007550:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007552:	4b25      	ldr	r3, [pc, #148]	; (80075e8 <MX_TIM2_Init+0xec>)
 8007554:	2280      	movs	r2, #128	; 0x80
 8007556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007558:	4823      	ldr	r0, [pc, #140]	; (80075e8 <MX_TIM2_Init+0xec>)
 800755a:	f007 f822 	bl	800e5a2 <HAL_TIM_Base_Init>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8007564:	f7ff fb78 	bl	8006c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800756c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800756e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007572:	4619      	mov	r1, r3
 8007574:	481c      	ldr	r0, [pc, #112]	; (80075e8 <MX_TIM2_Init+0xec>)
 8007576:	f007 fafd 	bl	800eb74 <HAL_TIM_ConfigClockSource>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8007580:	f7ff fb6a 	bl	8006c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007584:	4818      	ldr	r0, [pc, #96]	; (80075e8 <MX_TIM2_Init+0xec>)
 8007586:	f007 f863 	bl	800e650 <HAL_TIM_PWM_Init>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8007590:	f7ff fb62 	bl	8006c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007594:	2300      	movs	r3, #0
 8007596:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007598:	2300      	movs	r3, #0
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800759c:	f107 031c 	add.w	r3, r7, #28
 80075a0:	4619      	mov	r1, r3
 80075a2:	4811      	ldr	r0, [pc, #68]	; (80075e8 <MX_TIM2_Init+0xec>)
 80075a4:	f008 f81e 	bl	800f5e4 <HAL_TIMEx_MasterConfigSynchronization>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80075ae:	f7ff fb53 	bl	8006c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80075b2:	2360      	movs	r3, #96	; 0x60
 80075b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80075ba:	2300      	movs	r3, #0
 80075bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80075be:	2300      	movs	r3, #0
 80075c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80075c2:	463b      	mov	r3, r7
 80075c4:	2200      	movs	r2, #0
 80075c6:	4619      	mov	r1, r3
 80075c8:	4807      	ldr	r0, [pc, #28]	; (80075e8 <MX_TIM2_Init+0xec>)
 80075ca:	f007 f9bf 	bl	800e94c <HAL_TIM_PWM_ConfigChannel>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80075d4:	f7ff fb40 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80075d8:	4803      	ldr	r0, [pc, #12]	; (80075e8 <MX_TIM2_Init+0xec>)
 80075da:	f000 fd49 	bl	8008070 <HAL_TIM_MspPostInit>

}
 80075de:	bf00      	nop
 80075e0:	3738      	adds	r7, #56	; 0x38
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	24000a9c 	.word	0x24000a9c

080075ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08e      	sub	sp, #56	; 0x38
 80075f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80075f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	605a      	str	r2, [r3, #4]
 80075fc:	609a      	str	r2, [r3, #8]
 80075fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007600:	f107 031c 	add.w	r3, r7, #28
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	605a      	str	r2, [r3, #4]
 800760a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800760c:	463b      	mov	r3, r7
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	605a      	str	r2, [r3, #4]
 8007614:	609a      	str	r2, [r3, #8]
 8007616:	60da      	str	r2, [r3, #12]
 8007618:	611a      	str	r2, [r3, #16]
 800761a:	615a      	str	r2, [r3, #20]
 800761c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800761e:	4b2d      	ldr	r3, [pc, #180]	; (80076d4 <MX_TIM3_Init+0xe8>)
 8007620:	4a2d      	ldr	r2, [pc, #180]	; (80076d8 <MX_TIM3_Init+0xec>)
 8007622:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5500 - 1;
 8007624:	4b2b      	ldr	r3, [pc, #172]	; (80076d4 <MX_TIM3_Init+0xe8>)
 8007626:	f241 527b 	movw	r2, #5499	; 0x157b
 800762a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800762c:	4b29      	ldr	r3, [pc, #164]	; (80076d4 <MX_TIM3_Init+0xe8>)
 800762e:	2200      	movs	r2, #0
 8007630:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8007632:	4b28      	ldr	r3, [pc, #160]	; (80076d4 <MX_TIM3_Init+0xe8>)
 8007634:	f242 7210 	movw	r2, #10000	; 0x2710
 8007638:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800763a:	4b26      	ldr	r3, [pc, #152]	; (80076d4 <MX_TIM3_Init+0xe8>)
 800763c:	2200      	movs	r2, #0
 800763e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007640:	4b24      	ldr	r3, [pc, #144]	; (80076d4 <MX_TIM3_Init+0xe8>)
 8007642:	2280      	movs	r2, #128	; 0x80
 8007644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007646:	4823      	ldr	r0, [pc, #140]	; (80076d4 <MX_TIM3_Init+0xe8>)
 8007648:	f006 ffab 	bl	800e5a2 <HAL_TIM_Base_Init>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8007652:	f7ff fb01 	bl	8006c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800765c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007660:	4619      	mov	r1, r3
 8007662:	481c      	ldr	r0, [pc, #112]	; (80076d4 <MX_TIM3_Init+0xe8>)
 8007664:	f007 fa86 	bl	800eb74 <HAL_TIM_ConfigClockSource>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800766e:	f7ff faf3 	bl	8006c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007672:	4818      	ldr	r0, [pc, #96]	; (80076d4 <MX_TIM3_Init+0xe8>)
 8007674:	f006 ffec 	bl	800e650 <HAL_TIM_PWM_Init>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800767e:	f7ff faeb 	bl	8006c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007686:	2300      	movs	r3, #0
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800768a:	f107 031c 	add.w	r3, r7, #28
 800768e:	4619      	mov	r1, r3
 8007690:	4810      	ldr	r0, [pc, #64]	; (80076d4 <MX_TIM3_Init+0xe8>)
 8007692:	f007 ffa7 	bl	800f5e4 <HAL_TIMEx_MasterConfigSynchronization>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800769c:	f7ff fadc 	bl	8006c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80076a0:	2360      	movs	r3, #96	; 0x60
 80076a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80076a8:	2300      	movs	r3, #0
 80076aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80076ac:	2300      	movs	r3, #0
 80076ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80076b0:	463b      	mov	r3, r7
 80076b2:	2200      	movs	r2, #0
 80076b4:	4619      	mov	r1, r3
 80076b6:	4807      	ldr	r0, [pc, #28]	; (80076d4 <MX_TIM3_Init+0xe8>)
 80076b8:	f007 f948 	bl	800e94c <HAL_TIM_PWM_ConfigChannel>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80076c2:	f7ff fac9 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80076c6:	4803      	ldr	r0, [pc, #12]	; (80076d4 <MX_TIM3_Init+0xe8>)
 80076c8:	f000 fcd2 	bl	8008070 <HAL_TIM_MspPostInit>

}
 80076cc:	bf00      	nop
 80076ce:	3738      	adds	r7, #56	; 0x38
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	240009b8 	.word	0x240009b8
 80076d8:	40000400 	.word	0x40000400

080076dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08e      	sub	sp, #56	; 0x38
 80076e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80076e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	605a      	str	r2, [r3, #4]
 80076ec:	609a      	str	r2, [r3, #8]
 80076ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076f0:	f107 031c 	add.w	r3, r7, #28
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	605a      	str	r2, [r3, #4]
 80076fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80076fc:	463b      	mov	r3, r7
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	605a      	str	r2, [r3, #4]
 8007704:	609a      	str	r2, [r3, #8]
 8007706:	60da      	str	r2, [r3, #12]
 8007708:	611a      	str	r2, [r3, #16]
 800770a:	615a      	str	r2, [r3, #20]
 800770c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800770e:	4b2d      	ldr	r3, [pc, #180]	; (80077c4 <MX_TIM4_Init+0xe8>)
 8007710:	4a2d      	ldr	r2, [pc, #180]	; (80077c8 <MX_TIM4_Init+0xec>)
 8007712:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5500-1;
 8007714:	4b2b      	ldr	r3, [pc, #172]	; (80077c4 <MX_TIM4_Init+0xe8>)
 8007716:	f241 527b 	movw	r2, #5499	; 0x157b
 800771a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800771c:	4b29      	ldr	r3, [pc, #164]	; (80077c4 <MX_TIM4_Init+0xe8>)
 800771e:	2200      	movs	r2, #0
 8007720:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8007722:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <MX_TIM4_Init+0xe8>)
 8007724:	f242 7210 	movw	r2, #10000	; 0x2710
 8007728:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800772a:	4b26      	ldr	r3, [pc, #152]	; (80077c4 <MX_TIM4_Init+0xe8>)
 800772c:	2200      	movs	r2, #0
 800772e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007730:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <MX_TIM4_Init+0xe8>)
 8007732:	2280      	movs	r2, #128	; 0x80
 8007734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007736:	4823      	ldr	r0, [pc, #140]	; (80077c4 <MX_TIM4_Init+0xe8>)
 8007738:	f006 ff33 	bl	800e5a2 <HAL_TIM_Base_Init>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8007742:	f7ff fa89 	bl	8006c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800774c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007750:	4619      	mov	r1, r3
 8007752:	481c      	ldr	r0, [pc, #112]	; (80077c4 <MX_TIM4_Init+0xe8>)
 8007754:	f007 fa0e 	bl	800eb74 <HAL_TIM_ConfigClockSource>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800775e:	f7ff fa7b 	bl	8006c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007762:	4818      	ldr	r0, [pc, #96]	; (80077c4 <MX_TIM4_Init+0xe8>)
 8007764:	f006 ff74 	bl	800e650 <HAL_TIM_PWM_Init>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800776e:	f7ff fa73 	bl	8006c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007776:	2300      	movs	r3, #0
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800777a:	f107 031c 	add.w	r3, r7, #28
 800777e:	4619      	mov	r1, r3
 8007780:	4810      	ldr	r0, [pc, #64]	; (80077c4 <MX_TIM4_Init+0xe8>)
 8007782:	f007 ff2f 	bl	800f5e4 <HAL_TIMEx_MasterConfigSynchronization>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800778c:	f7ff fa64 	bl	8006c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007790:	2360      	movs	r3, #96	; 0x60
 8007792:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007798:	2300      	movs	r3, #0
 800779a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800779c:	2300      	movs	r3, #0
 800779e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80077a0:	463b      	mov	r3, r7
 80077a2:	2200      	movs	r2, #0
 80077a4:	4619      	mov	r1, r3
 80077a6:	4807      	ldr	r0, [pc, #28]	; (80077c4 <MX_TIM4_Init+0xe8>)
 80077a8:	f007 f8d0 	bl	800e94c <HAL_TIM_PWM_ConfigChannel>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80077b2:	f7ff fa51 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80077b6:	4803      	ldr	r0, [pc, #12]	; (80077c4 <MX_TIM4_Init+0xe8>)
 80077b8:	f000 fc5a 	bl	8008070 <HAL_TIM_MspPostInit>

}
 80077bc:	bf00      	nop
 80077be:	3738      	adds	r7, #56	; 0x38
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	240008d4 	.word	0x240008d4
 80077c8:	40000800 	.word	0x40000800

080077cc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08c      	sub	sp, #48	; 0x30
 80077d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077d2:	f107 0320 	add.w	r3, r7, #32
 80077d6:	2200      	movs	r2, #0
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	605a      	str	r2, [r3, #4]
 80077dc:	609a      	str	r2, [r3, #8]
 80077de:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80077e0:	1d3b      	adds	r3, r7, #4
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	605a      	str	r2, [r3, #4]
 80077e8:	609a      	str	r2, [r3, #8]
 80077ea:	60da      	str	r2, [r3, #12]
 80077ec:	611a      	str	r2, [r3, #16]
 80077ee:	615a      	str	r2, [r3, #20]
 80077f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80077f2:	4b26      	ldr	r3, [pc, #152]	; (800788c <MX_TIM12_Init+0xc0>)
 80077f4:	4a26      	ldr	r2, [pc, #152]	; (8007890 <MX_TIM12_Init+0xc4>)
 80077f6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 550 - 1;
 80077f8:	4b24      	ldr	r3, [pc, #144]	; (800788c <MX_TIM12_Init+0xc0>)
 80077fa:	f240 2225 	movw	r2, #549	; 0x225
 80077fe:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007800:	4b22      	ldr	r3, [pc, #136]	; (800788c <MX_TIM12_Init+0xc0>)
 8007802:	2200      	movs	r2, #0
 8007804:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1 - 1;
 8007806:	4b21      	ldr	r3, [pc, #132]	; (800788c <MX_TIM12_Init+0xc0>)
 8007808:	2200      	movs	r2, #0
 800780a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800780c:	4b1f      	ldr	r3, [pc, #124]	; (800788c <MX_TIM12_Init+0xc0>)
 800780e:	2200      	movs	r2, #0
 8007810:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007812:	4b1e      	ldr	r3, [pc, #120]	; (800788c <MX_TIM12_Init+0xc0>)
 8007814:	2280      	movs	r2, #128	; 0x80
 8007816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8007818:	481c      	ldr	r0, [pc, #112]	; (800788c <MX_TIM12_Init+0xc0>)
 800781a:	f006 fec2 	bl	800e5a2 <HAL_TIM_Base_Init>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8007824:	f7ff fa18 	bl	8006c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800782c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800782e:	f107 0320 	add.w	r3, r7, #32
 8007832:	4619      	mov	r1, r3
 8007834:	4815      	ldr	r0, [pc, #84]	; (800788c <MX_TIM12_Init+0xc0>)
 8007836:	f007 f99d 	bl	800eb74 <HAL_TIM_ConfigClockSource>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8007840:	f7ff fa0a 	bl	8006c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8007844:	4811      	ldr	r0, [pc, #68]	; (800788c <MX_TIM12_Init+0xc0>)
 8007846:	f006 ff03 	bl	800e650 <HAL_TIM_PWM_Init>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8007850:	f7ff fa02 	bl	8006c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007854:	2360      	movs	r3, #96	; 0x60
 8007856:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 8007858:	f240 13f3 	movw	r3, #499	; 0x1f3
 800785c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800785e:	2300      	movs	r3, #0
 8007860:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007862:	2300      	movs	r3, #0
 8007864:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007866:	1d3b      	adds	r3, r7, #4
 8007868:	2200      	movs	r2, #0
 800786a:	4619      	mov	r1, r3
 800786c:	4807      	ldr	r0, [pc, #28]	; (800788c <MX_TIM12_Init+0xc0>)
 800786e:	f007 f86d 	bl	800e94c <HAL_TIM_PWM_ConfigChannel>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8007878:	f7ff f9ee 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800787c:	4803      	ldr	r0, [pc, #12]	; (800788c <MX_TIM12_Init+0xc0>)
 800787e:	f000 fbf7 	bl	8008070 <HAL_TIM_MspPostInit>

}
 8007882:	bf00      	nop
 8007884:	3730      	adds	r7, #48	; 0x30
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	24000b80 	.word	0x24000b80
 8007890:	40001800 	.word	0x40001800

08007894 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8007898:	4b0e      	ldr	r3, [pc, #56]	; (80078d4 <MX_TIM13_Init+0x40>)
 800789a:	4a0f      	ldr	r2, [pc, #60]	; (80078d8 <MX_TIM13_Init+0x44>)
 800789c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550 - 1;
 800789e:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <MX_TIM13_Init+0x40>)
 80078a0:	f240 2225 	movw	r2, #549	; 0x225
 80078a4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078a6:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <MX_TIM13_Init+0x40>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1-1;
 80078ac:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <MX_TIM13_Init+0x40>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078b2:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <MX_TIM13_Init+0x40>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <MX_TIM13_Init+0x40>)
 80078ba:	2280      	movs	r2, #128	; 0x80
 80078bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80078be:	4805      	ldr	r0, [pc, #20]	; (80078d4 <MX_TIM13_Init+0x40>)
 80078c0:	f006 fe6f 	bl	800e5a2 <HAL_TIM_Base_Init>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80078ca:	f7ff f9c5 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80078ce:	bf00      	nop
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	24000a04 	.word	0x24000a04
 80078d8:	40001c00 	.word	0x40001c00

080078dc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80078e2:	1d3b      	adds	r3, r7, #4
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	60da      	str	r2, [r3, #12]
 80078ee:	611a      	str	r2, [r3, #16]
 80078f0:	615a      	str	r2, [r3, #20]
 80078f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80078f4:	4b1e      	ldr	r3, [pc, #120]	; (8007970 <MX_TIM14_Init+0x94>)
 80078f6:	4a1f      	ldr	r2, [pc, #124]	; (8007974 <MX_TIM14_Init+0x98>)
 80078f8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 80078fa:	4b1d      	ldr	r3, [pc, #116]	; (8007970 <MX_TIM14_Init+0x94>)
 80078fc:	f240 2225 	movw	r2, #549	; 0x225
 8007900:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007902:	4b1b      	ldr	r3, [pc, #108]	; (8007970 <MX_TIM14_Init+0x94>)
 8007904:	2200      	movs	r2, #0
 8007906:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1-1;
 8007908:	4b19      	ldr	r3, [pc, #100]	; (8007970 <MX_TIM14_Init+0x94>)
 800790a:	2200      	movs	r2, #0
 800790c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800790e:	4b18      	ldr	r3, [pc, #96]	; (8007970 <MX_TIM14_Init+0x94>)
 8007910:	2200      	movs	r2, #0
 8007912:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007914:	4b16      	ldr	r3, [pc, #88]	; (8007970 <MX_TIM14_Init+0x94>)
 8007916:	2280      	movs	r2, #128	; 0x80
 8007918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800791a:	4815      	ldr	r0, [pc, #84]	; (8007970 <MX_TIM14_Init+0x94>)
 800791c:	f006 fe41 	bl	800e5a2 <HAL_TIM_Base_Init>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8007926:	f7ff f997 	bl	8006c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800792a:	4811      	ldr	r0, [pc, #68]	; (8007970 <MX_TIM14_Init+0x94>)
 800792c:	f006 fe90 	bl	800e650 <HAL_TIM_PWM_Init>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8007936:	f7ff f98f 	bl	8006c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800793a:	2360      	movs	r3, #96	; 0x60
 800793c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800793e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8007942:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007948:	2300      	movs	r3, #0
 800794a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800794c:	1d3b      	adds	r3, r7, #4
 800794e:	2200      	movs	r2, #0
 8007950:	4619      	mov	r1, r3
 8007952:	4807      	ldr	r0, [pc, #28]	; (8007970 <MX_TIM14_Init+0x94>)
 8007954:	f006 fffa 	bl	800e94c <HAL_TIM_PWM_ConfigChannel>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800795e:	f7ff f97b 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8007962:	4803      	ldr	r0, [pc, #12]	; (8007970 <MX_TIM14_Init+0x94>)
 8007964:	f000 fb84 	bl	8008070 <HAL_TIM_MspPostInit>

}
 8007968:	bf00      	nop
 800796a:	3720      	adds	r7, #32
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	24000b34 	.word	0x24000b34
 8007974:	40002000 	.word	0x40002000

08007978 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b09c      	sub	sp, #112	; 0x70
 800797c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800797e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	605a      	str	r2, [r3, #4]
 8007988:	609a      	str	r2, [r3, #8]
 800798a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800798c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	605a      	str	r2, [r3, #4]
 8007996:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007998:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	605a      	str	r2, [r3, #4]
 80079a2:	609a      	str	r2, [r3, #8]
 80079a4:	60da      	str	r2, [r3, #12]
 80079a6:	611a      	str	r2, [r3, #16]
 80079a8:	615a      	str	r2, [r3, #20]
 80079aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80079ac:	1d3b      	adds	r3, r7, #4
 80079ae:	2234      	movs	r2, #52	; 0x34
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f009 fed4 	bl	8011760 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80079b8:	4b3f      	ldr	r3, [pc, #252]	; (8007ab8 <MX_TIM15_Init+0x140>)
 80079ba:	4a40      	ldr	r2, [pc, #256]	; (8007abc <MX_TIM15_Init+0x144>)
 80079bc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 5500 - 1;
 80079be:	4b3e      	ldr	r3, [pc, #248]	; (8007ab8 <MX_TIM15_Init+0x140>)
 80079c0:	f241 527b 	movw	r2, #5499	; 0x157b
 80079c4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079c6:	4b3c      	ldr	r3, [pc, #240]	; (8007ab8 <MX_TIM15_Init+0x140>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 80079cc:	4b3a      	ldr	r3, [pc, #232]	; (8007ab8 <MX_TIM15_Init+0x140>)
 80079ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80079d2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079d4:	4b38      	ldr	r3, [pc, #224]	; (8007ab8 <MX_TIM15_Init+0x140>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80079da:	4b37      	ldr	r3, [pc, #220]	; (8007ab8 <MX_TIM15_Init+0x140>)
 80079dc:	2200      	movs	r2, #0
 80079de:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80079e0:	4b35      	ldr	r3, [pc, #212]	; (8007ab8 <MX_TIM15_Init+0x140>)
 80079e2:	2280      	movs	r2, #128	; 0x80
 80079e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80079e6:	4834      	ldr	r0, [pc, #208]	; (8007ab8 <MX_TIM15_Init+0x140>)
 80079e8:	f006 fddb 	bl	800e5a2 <HAL_TIM_Base_Init>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80079f2:	f7ff f931 	bl	8006c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079fa:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80079fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007a00:	4619      	mov	r1, r3
 8007a02:	482d      	ldr	r0, [pc, #180]	; (8007ab8 <MX_TIM15_Init+0x140>)
 8007a04:	f007 f8b6 	bl	800eb74 <HAL_TIM_ConfigClockSource>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8007a0e:	f7ff f923 	bl	8006c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8007a12:	4829      	ldr	r0, [pc, #164]	; (8007ab8 <MX_TIM15_Init+0x140>)
 8007a14:	f006 fe1c 	bl	800e650 <HAL_TIM_PWM_Init>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8007a1e:	f7ff f91b 	bl	8006c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a22:	2300      	movs	r3, #0
 8007a24:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a26:	2300      	movs	r3, #0
 8007a28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007a2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4821      	ldr	r0, [pc, #132]	; (8007ab8 <MX_TIM15_Init+0x140>)
 8007a32:	f007 fdd7 	bl	800f5e4 <HAL_TIMEx_MasterConfigSynchronization>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8007a3c:	f7ff f90c 	bl	8006c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007a40:	2360      	movs	r3, #96	; 0x60
 8007a42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007a50:	2300      	movs	r3, #0
 8007a52:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007a54:	2300      	movs	r3, #0
 8007a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007a5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a60:	2200      	movs	r2, #0
 8007a62:	4619      	mov	r1, r3
 8007a64:	4814      	ldr	r0, [pc, #80]	; (8007ab8 <MX_TIM15_Init+0x140>)
 8007a66:	f006 ff71 	bl	800e94c <HAL_TIM_PWM_ConfigChannel>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8007a70:	f7ff f8f2 	bl	8006c58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007a74:	2300      	movs	r3, #0
 8007a76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007a80:	2300      	movs	r3, #0
 8007a82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007a84:	2300      	movs	r3, #0
 8007a86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8007a96:	1d3b      	adds	r3, r7, #4
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4807      	ldr	r0, [pc, #28]	; (8007ab8 <MX_TIM15_Init+0x140>)
 8007a9c:	f007 fe3e 	bl	800f71c <HAL_TIMEx_ConfigBreakDeadTime>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8007aa6:	f7ff f8d7 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8007aaa:	4803      	ldr	r0, [pc, #12]	; (8007ab8 <MX_TIM15_Init+0x140>)
 8007aac:	f000 fae0 	bl	8008070 <HAL_TIM_MspPostInit>

}
 8007ab0:	bf00      	nop
 8007ab2:	3770      	adds	r7, #112	; 0x70
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	24000920 	.word	0x24000920
 8007abc:	40014000 	.word	0x40014000

08007ac0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b094      	sub	sp, #80	; 0x50
 8007ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007ac6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	609a      	str	r2, [r3, #8]
 8007ad2:	60da      	str	r2, [r3, #12]
 8007ad4:	611a      	str	r2, [r3, #16]
 8007ad6:	615a      	str	r2, [r3, #20]
 8007ad8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007ada:	463b      	mov	r3, r7
 8007adc:	2234      	movs	r2, #52	; 0x34
 8007ade:	2100      	movs	r1, #0
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f009 fe3d 	bl	8011760 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007ae6:	4b31      	ldr	r3, [pc, #196]	; (8007bac <MX_TIM16_Init+0xec>)
 8007ae8:	4a31      	ldr	r2, [pc, #196]	; (8007bb0 <MX_TIM16_Init+0xf0>)
 8007aea:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8007aec:	4b2f      	ldr	r3, [pc, #188]	; (8007bac <MX_TIM16_Init+0xec>)
 8007aee:	f240 2225 	movw	r2, #549	; 0x225
 8007af2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007af4:	4b2d      	ldr	r3, [pc, #180]	; (8007bac <MX_TIM16_Init+0xec>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1-1;
 8007afa:	4b2c      	ldr	r3, [pc, #176]	; (8007bac <MX_TIM16_Init+0xec>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b00:	4b2a      	ldr	r3, [pc, #168]	; (8007bac <MX_TIM16_Init+0xec>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007b06:	4b29      	ldr	r3, [pc, #164]	; (8007bac <MX_TIM16_Init+0xec>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007b0c:	4b27      	ldr	r3, [pc, #156]	; (8007bac <MX_TIM16_Init+0xec>)
 8007b0e:	2280      	movs	r2, #128	; 0x80
 8007b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007b12:	4826      	ldr	r0, [pc, #152]	; (8007bac <MX_TIM16_Init+0xec>)
 8007b14:	f006 fd45 	bl	800e5a2 <HAL_TIM_Base_Init>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8007b1e:	f7ff f89b 	bl	8006c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8007b22:	4822      	ldr	r0, [pc, #136]	; (8007bac <MX_TIM16_Init+0xec>)
 8007b24:	f006 fd94 	bl	800e650 <HAL_TIM_PWM_Init>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8007b2e:	f7ff f893 	bl	8006c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007b32:	2360      	movs	r3, #96	; 0x60
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8007b36:	f240 13f3 	movw	r3, #499	; 0x1f3
 8007b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007b40:	2300      	movs	r3, #0
 8007b42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007b44:	2300      	movs	r3, #0
 8007b46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007b50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b54:	2200      	movs	r2, #0
 8007b56:	4619      	mov	r1, r3
 8007b58:	4814      	ldr	r0, [pc, #80]	; (8007bac <MX_TIM16_Init+0xec>)
 8007b5a:	f006 fef7 	bl	800e94c <HAL_TIM_PWM_ConfigChannel>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8007b64:	f7ff f878 	bl	8006c58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007b86:	2300      	movs	r3, #0
 8007b88:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8007b8a:	463b      	mov	r3, r7
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4807      	ldr	r0, [pc, #28]	; (8007bac <MX_TIM16_Init+0xec>)
 8007b90:	f007 fdc4 	bl	800f71c <HAL_TIMEx_ConfigBreakDeadTime>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8007b9a:	f7ff f85d 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8007b9e:	4803      	ldr	r0, [pc, #12]	; (8007bac <MX_TIM16_Init+0xec>)
 8007ba0:	f000 fa66 	bl	8008070 <HAL_TIM_MspPostInit>

}
 8007ba4:	bf00      	nop
 8007ba6:	3750      	adds	r7, #80	; 0x50
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	24000bcc 	.word	0x24000bcc
 8007bb0:	40014400 	.word	0x40014400

08007bb4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b094      	sub	sp, #80	; 0x50
 8007bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007bba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	605a      	str	r2, [r3, #4]
 8007bc4:	609a      	str	r2, [r3, #8]
 8007bc6:	60da      	str	r2, [r3, #12]
 8007bc8:	611a      	str	r2, [r3, #16]
 8007bca:	615a      	str	r2, [r3, #20]
 8007bcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007bce:	463b      	mov	r3, r7
 8007bd0:	2234      	movs	r2, #52	; 0x34
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f009 fdc3 	bl	8011760 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8007bda:	4b32      	ldr	r3, [pc, #200]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007bdc:	4a32      	ldr	r2, [pc, #200]	; (8007ca8 <MX_TIM17_Init+0xf4>)
 8007bde:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8007be0:	4b30      	ldr	r3, [pc, #192]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007be2:	f240 2225 	movw	r2, #549	; 0x225
 8007be6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007be8:	4b2e      	ldr	r3, [pc, #184]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8007bee:	4b2d      	ldr	r3, [pc, #180]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007bf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bf4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007bf6:	4b2b      	ldr	r3, [pc, #172]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8007bfc:	4b29      	ldr	r3, [pc, #164]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007c02:	4b28      	ldr	r3, [pc, #160]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007c04:	2280      	movs	r2, #128	; 0x80
 8007c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8007c08:	4826      	ldr	r0, [pc, #152]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007c0a:	f006 fcca 	bl	800e5a2 <HAL_TIM_Base_Init>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8007c14:	f7ff f820 	bl	8006c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8007c18:	4822      	ldr	r0, [pc, #136]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007c1a:	f006 fd19 	bl	800e650 <HAL_TIM_PWM_Init>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8007c24:	f7ff f818 	bl	8006c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007c28:	2360      	movs	r3, #96	; 0x60
 8007c2a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8007c2c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8007c30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007c32:	2300      	movs	r3, #0
 8007c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007c36:	2300      	movs	r3, #0
 8007c38:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007c42:	2300      	movs	r3, #0
 8007c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007c46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4815      	ldr	r0, [pc, #84]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007c50:	f006 fe7c 	bl	800e94c <HAL_TIM_PWM_ConfigChannel>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8007c5a:	f7fe fffd 	bl	8006c58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007c62:	2300      	movs	r3, #0
 8007c64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8007c80:	463b      	mov	r3, r7
 8007c82:	4619      	mov	r1, r3
 8007c84:	4807      	ldr	r0, [pc, #28]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007c86:	f007 fd49 	bl	800f71c <HAL_TIMEx_ConfigBreakDeadTime>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8007c90:	f7fe ffe2 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8007c94:	4803      	ldr	r0, [pc, #12]	; (8007ca4 <MX_TIM17_Init+0xf0>)
 8007c96:	f000 f9eb 	bl	8008070 <HAL_TIM_MspPostInit>

}
 8007c9a:	bf00      	nop
 8007c9c:	3750      	adds	r7, #80	; 0x50
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	2400096c 	.word	0x2400096c
 8007ca8:	40014800 	.word	0x40014800

08007cac <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007cb2:	f107 0310 	add.w	r3, r7, #16
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	605a      	str	r2, [r3, #4]
 8007cbc:	609a      	str	r2, [r3, #8]
 8007cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cc0:	1d3b      	adds	r3, r7, #4
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	605a      	str	r2, [r3, #4]
 8007cc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8007cca:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <MX_TIM23_Init+0x98>)
 8007ccc:	4a1e      	ldr	r2, [pc, #120]	; (8007d48 <MX_TIM23_Init+0x9c>)
 8007cce:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8007cd0:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <MX_TIM23_Init+0x98>)
 8007cd2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007cd6:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cd8:	4b1a      	ldr	r3, [pc, #104]	; (8007d44 <MX_TIM23_Init+0x98>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8007cde:	4b19      	ldr	r3, [pc, #100]	; (8007d44 <MX_TIM23_Init+0x98>)
 8007ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce4:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ce6:	4b17      	ldr	r3, [pc, #92]	; (8007d44 <MX_TIM23_Init+0x98>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007cec:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <MX_TIM23_Init+0x98>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8007cf2:	4814      	ldr	r0, [pc, #80]	; (8007d44 <MX_TIM23_Init+0x98>)
 8007cf4:	f006 fc55 	bl	800e5a2 <HAL_TIM_Base_Init>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8007cfe:	f7fe ffab 	bl	8006c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8007d08:	f107 0310 	add.w	r3, r7, #16
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	480d      	ldr	r0, [pc, #52]	; (8007d44 <MX_TIM23_Init+0x98>)
 8007d10:	f006 ff30 	bl	800eb74 <HAL_TIM_ConfigClockSource>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8007d1a:	f7fe ff9d 	bl	8006c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8007d26:	1d3b      	adds	r3, r7, #4
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4806      	ldr	r0, [pc, #24]	; (8007d44 <MX_TIM23_Init+0x98>)
 8007d2c:	f007 fc5a 	bl	800f5e4 <HAL_TIMEx_MasterConfigSynchronization>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8007d36:	f7fe ff8f 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8007d3a:	bf00      	nop
 8007d3c:	3720      	adds	r7, #32
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	24000ae8 	.word	0x24000ae8
 8007d48:	4000e000 	.word	0x4000e000

08007d4c <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d52:	f107 0310 	add.w	r3, r7, #16
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	605a      	str	r2, [r3, #4]
 8007d5c:	609a      	str	r2, [r3, #8]
 8007d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d60:	1d3b      	adds	r3, r7, #4
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	605a      	str	r2, [r3, #4]
 8007d68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8007d6a:	4b1d      	ldr	r3, [pc, #116]	; (8007de0 <MX_TIM24_Init+0x94>)
 8007d6c:	4a1d      	ldr	r2, [pc, #116]	; (8007de4 <MX_TIM24_Init+0x98>)
 8007d6e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8007d70:	4b1b      	ldr	r3, [pc, #108]	; (8007de0 <MX_TIM24_Init+0x94>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d76:	4b1a      	ldr	r3, [pc, #104]	; (8007de0 <MX_TIM24_Init+0x94>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8007d7c:	4b18      	ldr	r3, [pc, #96]	; (8007de0 <MX_TIM24_Init+0x94>)
 8007d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d82:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d84:	4b16      	ldr	r3, [pc, #88]	; (8007de0 <MX_TIM24_Init+0x94>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d8a:	4b15      	ldr	r3, [pc, #84]	; (8007de0 <MX_TIM24_Init+0x94>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8007d90:	4813      	ldr	r0, [pc, #76]	; (8007de0 <MX_TIM24_Init+0x94>)
 8007d92:	f006 fc06 	bl	800e5a2 <HAL_TIM_Base_Init>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 8007d9c:	f7fe ff5c 	bl	8006c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007da4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8007da6:	f107 0310 	add.w	r3, r7, #16
 8007daa:	4619      	mov	r1, r3
 8007dac:	480c      	ldr	r0, [pc, #48]	; (8007de0 <MX_TIM24_Init+0x94>)
 8007dae:	f006 fee1 	bl	800eb74 <HAL_TIM_ConfigClockSource>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 8007db8:	f7fe ff4e 	bl	8006c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8007dc4:	1d3b      	adds	r3, r7, #4
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4805      	ldr	r0, [pc, #20]	; (8007de0 <MX_TIM24_Init+0x94>)
 8007dca:	f007 fc0b 	bl	800f5e4 <HAL_TIMEx_MasterConfigSynchronization>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 8007dd4:	f7fe ff40 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8007dd8:	bf00      	nop
 8007dda:	3720      	adds	r7, #32
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	24000888 	.word	0x24000888
 8007de4:	4000e400 	.word	0x4000e400

08007de8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b094      	sub	sp, #80	; 0x50
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007df0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	605a      	str	r2, [r3, #4]
 8007dfa:	609a      	str	r2, [r3, #8]
 8007dfc:	60da      	str	r2, [r3, #12]
 8007dfe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a8d      	ldr	r2, [pc, #564]	; (800803c <HAL_TIM_Base_MspInit+0x254>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d10f      	bne.n	8007e2a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007e0a:	4b8d      	ldr	r3, [pc, #564]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e10:	4a8b      	ldr	r2, [pc, #556]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007e1a:	4b89      	ldr	r3, [pc, #548]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8007e28:	e104      	b.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM2)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e32:	d10f      	bne.n	8007e54 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e34:	4b82      	ldr	r3, [pc, #520]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e3a:	4a81      	ldr	r2, [pc, #516]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e3c:	f043 0301 	orr.w	r3, r3, #1
 8007e40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007e44:	4b7e      	ldr	r3, [pc, #504]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e52:	e0ef      	b.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM3)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a7a      	ldr	r2, [pc, #488]	; (8008044 <HAL_TIM_Base_MspInit+0x25c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d10f      	bne.n	8007e7e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007e5e:	4b78      	ldr	r3, [pc, #480]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e64:	4a76      	ldr	r2, [pc, #472]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e66:	f043 0302 	orr.w	r3, r3, #2
 8007e6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007e6e:	4b74      	ldr	r3, [pc, #464]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	633b      	str	r3, [r7, #48]	; 0x30
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007e7c:	e0da      	b.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM4)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a71      	ldr	r2, [pc, #452]	; (8008048 <HAL_TIM_Base_MspInit+0x260>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d10f      	bne.n	8007ea8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007e88:	4b6d      	ldr	r3, [pc, #436]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e8e:	4a6c      	ldr	r2, [pc, #432]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e90:	f043 0304 	orr.w	r3, r3, #4
 8007e94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007e98:	4b69      	ldr	r3, [pc, #420]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e9e:	f003 0304 	and.w	r3, r3, #4
 8007ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007ea6:	e0c5      	b.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM12)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a67      	ldr	r2, [pc, #412]	; (800804c <HAL_TIM_Base_MspInit+0x264>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d10f      	bne.n	8007ed2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8007eb2:	4b63      	ldr	r3, [pc, #396]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007eb8:	4a61      	ldr	r2, [pc, #388]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ebe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007ec2:	4b5f      	ldr	r3, [pc, #380]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007ed0:	e0b0      	b.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM13)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a5e      	ldr	r2, [pc, #376]	; (8008050 <HAL_TIM_Base_MspInit+0x268>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d10f      	bne.n	8007efc <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007edc:	4b58      	ldr	r3, [pc, #352]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ee2:	4a57      	ldr	r2, [pc, #348]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007eec:	4b54      	ldr	r3, [pc, #336]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007efa:	e09b      	b.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM14)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a54      	ldr	r2, [pc, #336]	; (8008054 <HAL_TIM_Base_MspInit+0x26c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d10f      	bne.n	8007f26 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8007f06:	4b4e      	ldr	r3, [pc, #312]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f0c:	4a4c      	ldr	r2, [pc, #304]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007f16:	4b4a      	ldr	r3, [pc, #296]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f20:	623b      	str	r3, [r7, #32]
 8007f22:	6a3b      	ldr	r3, [r7, #32]
}
 8007f24:	e086      	b.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM15)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a4b      	ldr	r2, [pc, #300]	; (8008058 <HAL_TIM_Base_MspInit+0x270>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d12e      	bne.n	8007f8e <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007f30:	4b43      	ldr	r3, [pc, #268]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f36:	4a42      	ldr	r2, [pc, #264]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007f40:	4b3f      	ldr	r3, [pc, #252]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f4e:	4b3c      	ldr	r3, [pc, #240]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f54:	4a3a      	ldr	r2, [pc, #232]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007f5e:	4b38      	ldr	r3, [pc, #224]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	61bb      	str	r3, [r7, #24]
 8007f6a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007f6c:	2308      	movs	r3, #8
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f70:	2302      	movs	r3, #2
 8007f72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8007f7c:	2304      	movs	r3, #4
 8007f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007f84:	4619      	mov	r1, r3
 8007f86:	4835      	ldr	r0, [pc, #212]	; (800805c <HAL_TIM_Base_MspInit+0x274>)
 8007f88:	f002 fff8 	bl	800af7c <HAL_GPIO_Init>
}
 8007f8c:	e052      	b.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM16)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a33      	ldr	r2, [pc, #204]	; (8008060 <HAL_TIM_Base_MspInit+0x278>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d10f      	bne.n	8007fb8 <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007f98:	4b29      	ldr	r3, [pc, #164]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f9e:	4a28      	ldr	r2, [pc, #160]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007fa8:	4b25      	ldr	r3, [pc, #148]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb2:	617b      	str	r3, [r7, #20]
 8007fb4:	697b      	ldr	r3, [r7, #20]
}
 8007fb6:	e03d      	b.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM17)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a29      	ldr	r2, [pc, #164]	; (8008064 <HAL_TIM_Base_MspInit+0x27c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d10f      	bne.n	8007fe2 <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007fc2:	4b1f      	ldr	r3, [pc, #124]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fc8:	4a1d      	ldr	r2, [pc, #116]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007fd2:	4b1b      	ldr	r3, [pc, #108]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fdc:	613b      	str	r3, [r7, #16]
 8007fde:	693b      	ldr	r3, [r7, #16]
}
 8007fe0:	e028      	b.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM23)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a20      	ldr	r2, [pc, #128]	; (8008068 <HAL_TIM_Base_MspInit+0x280>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d10f      	bne.n	800800c <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8007fec:	4b14      	ldr	r3, [pc, #80]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007fee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007ff2:	4a13      	ldr	r2, [pc, #76]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ff8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8007ffc:	4b10      	ldr	r3, [pc, #64]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8007ffe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
}
 800800a:	e013      	b.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM24)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a16      	ldr	r2, [pc, #88]	; (800806c <HAL_TIM_Base_MspInit+0x284>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d10e      	bne.n	8008034 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8008016:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8008018:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800801c:	4a08      	ldr	r2, [pc, #32]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 800801e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008022:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8008026:	4b06      	ldr	r3, [pc, #24]	; (8008040 <HAL_TIM_Base_MspInit+0x258>)
 8008028:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800802c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	68bb      	ldr	r3, [r7, #8]
}
 8008034:	bf00      	nop
 8008036:	3750      	adds	r7, #80	; 0x50
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	40010000 	.word	0x40010000
 8008040:	58024400 	.word	0x58024400
 8008044:	40000400 	.word	0x40000400
 8008048:	40000800 	.word	0x40000800
 800804c:	40001800 	.word	0x40001800
 8008050:	40001c00 	.word	0x40001c00
 8008054:	40002000 	.word	0x40002000
 8008058:	40014000 	.word	0x40014000
 800805c:	58020000 	.word	0x58020000
 8008060:	40014400 	.word	0x40014400
 8008064:	40014800 	.word	0x40014800
 8008068:	4000e000 	.word	0x4000e000
 800806c:	4000e400 	.word	0x4000e400

08008070 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b090      	sub	sp, #64	; 0x40
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008078:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	605a      	str	r2, [r3, #4]
 8008082:	609a      	str	r2, [r3, #8]
 8008084:	60da      	str	r2, [r3, #12]
 8008086:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4aa9      	ldr	r2, [pc, #676]	; (8008334 <HAL_TIM_MspPostInit+0x2c4>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d120      	bne.n	80080d4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008092:	4ba9      	ldr	r3, [pc, #676]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 8008094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008098:	4aa7      	ldr	r2, [pc, #668]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 800809a:	f043 0310 	orr.w	r3, r3, #16
 800809e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080a2:	4ba5      	ldr	r3, [pc, #660]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80080a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80080b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080b6:	2302      	movs	r3, #2
 80080b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080be:	2300      	movs	r3, #0
 80080c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80080c2:	2301      	movs	r3, #1
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80080c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080ca:	4619      	mov	r1, r3
 80080cc:	489b      	ldr	r0, [pc, #620]	; (800833c <HAL_TIM_MspPostInit+0x2cc>)
 80080ce:	f002 ff55 	bl	800af7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80080d2:	e12a      	b.n	800832a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM2)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080dc:	d11f      	bne.n	800811e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080de:	4b96      	ldr	r3, [pc, #600]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80080e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080e4:	4a94      	ldr	r2, [pc, #592]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80080e6:	f043 0301 	orr.w	r3, r3, #1
 80080ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080ee:	4b92      	ldr	r3, [pc, #584]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80080f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80080fc:	2301      	movs	r3, #1
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008100:	2302      	movs	r3, #2
 8008102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008104:	2300      	movs	r3, #0
 8008106:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008108:	2300      	movs	r3, #0
 800810a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800810c:	2301      	movs	r3, #1
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008114:	4619      	mov	r1, r3
 8008116:	488a      	ldr	r0, [pc, #552]	; (8008340 <HAL_TIM_MspPostInit+0x2d0>)
 8008118:	f002 ff30 	bl	800af7c <HAL_GPIO_Init>
}
 800811c:	e105      	b.n	800832a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM3)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a88      	ldr	r2, [pc, #544]	; (8008344 <HAL_TIM_MspPostInit+0x2d4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d11f      	bne.n	8008168 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008128:	4b83      	ldr	r3, [pc, #524]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 800812a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800812e:	4a82      	ldr	r2, [pc, #520]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 8008130:	f043 0304 	orr.w	r3, r3, #4
 8008134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008138:	4b7f      	ldr	r3, [pc, #508]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 800813a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800813e:	f003 0304 	and.w	r3, r3, #4
 8008142:	623b      	str	r3, [r7, #32]
 8008144:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008146:	2340      	movs	r3, #64	; 0x40
 8008148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800814a:	2302      	movs	r3, #2
 800814c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800814e:	2300      	movs	r3, #0
 8008150:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008152:	2300      	movs	r3, #0
 8008154:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008156:	2302      	movs	r3, #2
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800815a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800815e:	4619      	mov	r1, r3
 8008160:	4879      	ldr	r0, [pc, #484]	; (8008348 <HAL_TIM_MspPostInit+0x2d8>)
 8008162:	f002 ff0b 	bl	800af7c <HAL_GPIO_Init>
}
 8008166:	e0e0      	b.n	800832a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM4)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a77      	ldr	r2, [pc, #476]	; (800834c <HAL_TIM_MspPostInit+0x2dc>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d120      	bne.n	80081b4 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008172:	4b71      	ldr	r3, [pc, #452]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 8008174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008178:	4a6f      	ldr	r2, [pc, #444]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 800817a:	f043 0308 	orr.w	r3, r3, #8
 800817e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008182:	4b6d      	ldr	r3, [pc, #436]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 8008184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008188:	f003 0308 	and.w	r3, r3, #8
 800818c:	61fb      	str	r3, [r7, #28]
 800818e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008194:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008196:	2302      	movs	r3, #2
 8008198:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819a:	2300      	movs	r3, #0
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800819e:	2300      	movs	r3, #0
 80081a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80081a2:	2302      	movs	r3, #2
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80081a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081aa:	4619      	mov	r1, r3
 80081ac:	4868      	ldr	r0, [pc, #416]	; (8008350 <HAL_TIM_MspPostInit+0x2e0>)
 80081ae:	f002 fee5 	bl	800af7c <HAL_GPIO_Init>
}
 80081b2:	e0ba      	b.n	800832a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM12)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a66      	ldr	r2, [pc, #408]	; (8008354 <HAL_TIM_MspPostInit+0x2e4>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d120      	bne.n	8008200 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081be:	4b5e      	ldr	r3, [pc, #376]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80081c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081c4:	4a5c      	ldr	r2, [pc, #368]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80081c6:	f043 0302 	orr.w	r3, r3, #2
 80081ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80081ce:	4b5a      	ldr	r3, [pc, #360]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80081d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081d4:	f003 0302 	and.w	r3, r3, #2
 80081d8:	61bb      	str	r3, [r7, #24]
 80081da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80081dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80081e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081e2:	2302      	movs	r3, #2
 80081e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081ea:	2300      	movs	r3, #0
 80081ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80081ee:	2302      	movs	r3, #2
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081f6:	4619      	mov	r1, r3
 80081f8:	4857      	ldr	r0, [pc, #348]	; (8008358 <HAL_TIM_MspPostInit+0x2e8>)
 80081fa:	f002 febf 	bl	800af7c <HAL_GPIO_Init>
}
 80081fe:	e094      	b.n	800832a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM14)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a55      	ldr	r2, [pc, #340]	; (800835c <HAL_TIM_MspPostInit+0x2ec>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d11f      	bne.n	800824a <HAL_TIM_MspPostInit+0x1da>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800820a:	4b4b      	ldr	r3, [pc, #300]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 800820c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008210:	4a49      	ldr	r2, [pc, #292]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 8008212:	f043 0301 	orr.w	r3, r3, #1
 8008216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800821a:	4b47      	ldr	r3, [pc, #284]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 800821c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	617b      	str	r3, [r7, #20]
 8008226:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008228:	2380      	movs	r3, #128	; 0x80
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800822c:	2302      	movs	r3, #2
 800822e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008230:	2300      	movs	r3, #0
 8008232:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008234:	2300      	movs	r3, #0
 8008236:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8008238:	2309      	movs	r3, #9
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800823c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008240:	4619      	mov	r1, r3
 8008242:	483f      	ldr	r0, [pc, #252]	; (8008340 <HAL_TIM_MspPostInit+0x2d0>)
 8008244:	f002 fe9a 	bl	800af7c <HAL_GPIO_Init>
}
 8008248:	e06f      	b.n	800832a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM15)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a44      	ldr	r2, [pc, #272]	; (8008360 <HAL_TIM_MspPostInit+0x2f0>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d11f      	bne.n	8008294 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008254:	4b38      	ldr	r3, [pc, #224]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 8008256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800825a:	4a37      	ldr	r2, [pc, #220]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 800825c:	f043 0310 	orr.w	r3, r3, #16
 8008260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008264:	4b34      	ldr	r3, [pc, #208]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 8008266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800826a:	f003 0310 	and.w	r3, r3, #16
 800826e:	613b      	str	r3, [r7, #16]
 8008270:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008272:	2320      	movs	r3, #32
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008276:	2302      	movs	r3, #2
 8008278:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800827a:	2300      	movs	r3, #0
 800827c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800827e:	2300      	movs	r3, #0
 8008280:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8008282:	2304      	movs	r3, #4
 8008284:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800828a:	4619      	mov	r1, r3
 800828c:	482b      	ldr	r0, [pc, #172]	; (800833c <HAL_TIM_MspPostInit+0x2cc>)
 800828e:	f002 fe75 	bl	800af7c <HAL_GPIO_Init>
}
 8008292:	e04a      	b.n	800832a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM16)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a32      	ldr	r2, [pc, #200]	; (8008364 <HAL_TIM_MspPostInit+0x2f4>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d120      	bne.n	80082e0 <HAL_TIM_MspPostInit+0x270>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800829e:	4b26      	ldr	r3, [pc, #152]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80082a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082a4:	4a24      	ldr	r2, [pc, #144]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80082a6:	f043 0302 	orr.w	r3, r3, #2
 80082aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082ae:	4b22      	ldr	r3, [pc, #136]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80082b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	60fb      	str	r3, [r7, #12]
 80082ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80082bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082c2:	2302      	movs	r3, #2
 80082c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082ca:	2300      	movs	r3, #0
 80082cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80082ce:	2301      	movs	r3, #1
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082d6:	4619      	mov	r1, r3
 80082d8:	481f      	ldr	r0, [pc, #124]	; (8008358 <HAL_TIM_MspPostInit+0x2e8>)
 80082da:	f002 fe4f 	bl	800af7c <HAL_GPIO_Init>
}
 80082de:	e024      	b.n	800832a <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM17)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a20      	ldr	r2, [pc, #128]	; (8008368 <HAL_TIM_MspPostInit+0x2f8>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d11f      	bne.n	800832a <HAL_TIM_MspPostInit+0x2ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082ea:	4b13      	ldr	r3, [pc, #76]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80082ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082f0:	4a11      	ldr	r2, [pc, #68]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80082f2:	f043 0302 	orr.w	r3, r3, #2
 80082f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082fa:	4b0f      	ldr	r3, [pc, #60]	; (8008338 <HAL_TIM_MspPostInit+0x2c8>)
 80082fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	60bb      	str	r3, [r7, #8]
 8008306:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800830c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800830e:	2302      	movs	r3, #2
 8008310:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008312:	2300      	movs	r3, #0
 8008314:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008316:	2300      	movs	r3, #0
 8008318:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800831a:	2301      	movs	r3, #1
 800831c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800831e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008322:	4619      	mov	r1, r3
 8008324:	480c      	ldr	r0, [pc, #48]	; (8008358 <HAL_TIM_MspPostInit+0x2e8>)
 8008326:	f002 fe29 	bl	800af7c <HAL_GPIO_Init>
}
 800832a:	bf00      	nop
 800832c:	3740      	adds	r7, #64	; 0x40
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	40010000 	.word	0x40010000
 8008338:	58024400 	.word	0x58024400
 800833c:	58021000 	.word	0x58021000
 8008340:	58020000 	.word	0x58020000
 8008344:	40000400 	.word	0x40000400
 8008348:	58020800 	.word	0x58020800
 800834c:	40000800 	.word	0x40000800
 8008350:	58020c00 	.word	0x58020c00
 8008354:	40001800 	.word	0x40001800
 8008358:	58020400 	.word	0x58020400
 800835c:	40002000 	.word	0x40002000
 8008360:	40014000 	.word	0x40014000
 8008364:	40014400 	.word	0x40014400
 8008368:	40014800 	.word	0x40014800

0800836c <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8008370:	4b22      	ldr	r3, [pc, #136]	; (80083fc <MX_UART4_Init+0x90>)
 8008372:	4a23      	ldr	r2, [pc, #140]	; (8008400 <MX_UART4_Init+0x94>)
 8008374:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8008376:	4b21      	ldr	r3, [pc, #132]	; (80083fc <MX_UART4_Init+0x90>)
 8008378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800837c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800837e:	4b1f      	ldr	r3, [pc, #124]	; (80083fc <MX_UART4_Init+0x90>)
 8008380:	2200      	movs	r2, #0
 8008382:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008384:	4b1d      	ldr	r3, [pc, #116]	; (80083fc <MX_UART4_Init+0x90>)
 8008386:	2200      	movs	r2, #0
 8008388:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800838a:	4b1c      	ldr	r3, [pc, #112]	; (80083fc <MX_UART4_Init+0x90>)
 800838c:	2200      	movs	r2, #0
 800838e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008390:	4b1a      	ldr	r3, [pc, #104]	; (80083fc <MX_UART4_Init+0x90>)
 8008392:	220c      	movs	r2, #12
 8008394:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008396:	4b19      	ldr	r3, [pc, #100]	; (80083fc <MX_UART4_Init+0x90>)
 8008398:	2200      	movs	r2, #0
 800839a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800839c:	4b17      	ldr	r3, [pc, #92]	; (80083fc <MX_UART4_Init+0x90>)
 800839e:	2200      	movs	r2, #0
 80083a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80083a2:	4b16      	ldr	r3, [pc, #88]	; (80083fc <MX_UART4_Init+0x90>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80083a8:	4b14      	ldr	r3, [pc, #80]	; (80083fc <MX_UART4_Init+0x90>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <MX_UART4_Init+0x90>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80083b4:	4811      	ldr	r0, [pc, #68]	; (80083fc <MX_UART4_Init+0x90>)
 80083b6:	f007 fa51 	bl	800f85c <HAL_UART_Init>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80083c0:	f7fe fc4a 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80083c4:	2100      	movs	r1, #0
 80083c6:	480d      	ldr	r0, [pc, #52]	; (80083fc <MX_UART4_Init+0x90>)
 80083c8:	f009 f8c8 	bl	801155c <HAL_UARTEx_SetTxFifoThreshold>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80083d2:	f7fe fc41 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80083d6:	2100      	movs	r1, #0
 80083d8:	4808      	ldr	r0, [pc, #32]	; (80083fc <MX_UART4_Init+0x90>)
 80083da:	f009 f8fd 	bl	80115d8 <HAL_UARTEx_SetRxFifoThreshold>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80083e4:	f7fe fc38 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80083e8:	4804      	ldr	r0, [pc, #16]	; (80083fc <MX_UART4_Init+0x90>)
 80083ea:	f009 f87e 	bl	80114ea <HAL_UARTEx_DisableFifoMode>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80083f4:	f7fe fc30 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80083f8:	bf00      	nop
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	24000d38 	.word	0x24000d38
 8008400:	40004c00 	.word	0x40004c00

08008404 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8008408:	4b22      	ldr	r3, [pc, #136]	; (8008494 <MX_UART5_Init+0x90>)
 800840a:	4a23      	ldr	r2, [pc, #140]	; (8008498 <MX_UART5_Init+0x94>)
 800840c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800840e:	4b21      	ldr	r3, [pc, #132]	; (8008494 <MX_UART5_Init+0x90>)
 8008410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008414:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8008416:	4b1f      	ldr	r3, [pc, #124]	; (8008494 <MX_UART5_Init+0x90>)
 8008418:	2200      	movs	r2, #0
 800841a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800841c:	4b1d      	ldr	r3, [pc, #116]	; (8008494 <MX_UART5_Init+0x90>)
 800841e:	2200      	movs	r2, #0
 8008420:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8008422:	4b1c      	ldr	r3, [pc, #112]	; (8008494 <MX_UART5_Init+0x90>)
 8008424:	2200      	movs	r2, #0
 8008426:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8008428:	4b1a      	ldr	r3, [pc, #104]	; (8008494 <MX_UART5_Init+0x90>)
 800842a:	220c      	movs	r2, #12
 800842c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800842e:	4b19      	ldr	r3, [pc, #100]	; (8008494 <MX_UART5_Init+0x90>)
 8008430:	2200      	movs	r2, #0
 8008432:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8008434:	4b17      	ldr	r3, [pc, #92]	; (8008494 <MX_UART5_Init+0x90>)
 8008436:	2200      	movs	r2, #0
 8008438:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800843a:	4b16      	ldr	r3, [pc, #88]	; (8008494 <MX_UART5_Init+0x90>)
 800843c:	2200      	movs	r2, #0
 800843e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008440:	4b14      	ldr	r3, [pc, #80]	; (8008494 <MX_UART5_Init+0x90>)
 8008442:	2200      	movs	r2, #0
 8008444:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008446:	4b13      	ldr	r3, [pc, #76]	; (8008494 <MX_UART5_Init+0x90>)
 8008448:	2200      	movs	r2, #0
 800844a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800844c:	4811      	ldr	r0, [pc, #68]	; (8008494 <MX_UART5_Init+0x90>)
 800844e:	f007 fa05 	bl	800f85c <HAL_UART_Init>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8008458:	f7fe fbfe 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800845c:	2100      	movs	r1, #0
 800845e:	480d      	ldr	r0, [pc, #52]	; (8008494 <MX_UART5_Init+0x90>)
 8008460:	f009 f87c 	bl	801155c <HAL_UARTEx_SetTxFifoThreshold>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800846a:	f7fe fbf5 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800846e:	2100      	movs	r1, #0
 8008470:	4808      	ldr	r0, [pc, #32]	; (8008494 <MX_UART5_Init+0x90>)
 8008472:	f009 f8b1 	bl	80115d8 <HAL_UARTEx_SetRxFifoThreshold>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800847c:	f7fe fbec 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8008480:	4804      	ldr	r0, [pc, #16]	; (8008494 <MX_UART5_Init+0x90>)
 8008482:	f009 f832 	bl	80114ea <HAL_UARTEx_DisableFifoMode>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800848c:	f7fe fbe4 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8008490:	bf00      	nop
 8008492:	bd80      	pop	{r7, pc}
 8008494:	24000ca8 	.word	0x24000ca8
 8008498:	40005000 	.word	0x40005000

0800849c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80084a0:	4b22      	ldr	r3, [pc, #136]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084a2:	4a23      	ldr	r2, [pc, #140]	; (8008530 <MX_USART2_UART_Init+0x94>)
 80084a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80084a6:	4b21      	ldr	r3, [pc, #132]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80084ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80084ae:	4b1f      	ldr	r3, [pc, #124]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80084b4:	4b1d      	ldr	r3, [pc, #116]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80084ba:	4b1c      	ldr	r3, [pc, #112]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084bc:	2200      	movs	r2, #0
 80084be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80084c0:	4b1a      	ldr	r3, [pc, #104]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084c2:	220c      	movs	r2, #12
 80084c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80084c6:	4b19      	ldr	r3, [pc, #100]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80084cc:	4b17      	ldr	r3, [pc, #92]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80084d2:	4b16      	ldr	r3, [pc, #88]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80084d8:	4b14      	ldr	r3, [pc, #80]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084da:	2200      	movs	r2, #0
 80084dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80084de:	4b13      	ldr	r3, [pc, #76]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80084e4:	4811      	ldr	r0, [pc, #68]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084e6:	f007 f9b9 	bl	800f85c <HAL_UART_Init>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80084f0:	f7fe fbb2 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80084f4:	2100      	movs	r1, #0
 80084f6:	480d      	ldr	r0, [pc, #52]	; (800852c <MX_USART2_UART_Init+0x90>)
 80084f8:	f009 f830 	bl	801155c <HAL_UARTEx_SetTxFifoThreshold>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8008502:	f7fe fba9 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008506:	2100      	movs	r1, #0
 8008508:	4808      	ldr	r0, [pc, #32]	; (800852c <MX_USART2_UART_Init+0x90>)
 800850a:	f009 f865 	bl	80115d8 <HAL_UARTEx_SetRxFifoThreshold>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008514:	f7fe fba0 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008518:	4804      	ldr	r0, [pc, #16]	; (800852c <MX_USART2_UART_Init+0x90>)
 800851a:	f008 ffe6 	bl	80114ea <HAL_UARTEx_DisableFifoMode>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008524:	f7fe fb98 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008528:	bf00      	nop
 800852a:	bd80      	pop	{r7, pc}
 800852c:	24000dc8 	.word	0x24000dc8
 8008530:	40004400 	.word	0x40004400

08008534 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008538:	4b22      	ldr	r3, [pc, #136]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 800853a:	4a23      	ldr	r2, [pc, #140]	; (80085c8 <MX_USART3_UART_Init+0x94>)
 800853c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800853e:	4b21      	ldr	r3, [pc, #132]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 8008540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008544:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008546:	4b1f      	ldr	r3, [pc, #124]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 8008548:	2200      	movs	r2, #0
 800854a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800854c:	4b1d      	ldr	r3, [pc, #116]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 800854e:	2200      	movs	r2, #0
 8008550:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008552:	4b1c      	ldr	r3, [pc, #112]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 8008554:	2200      	movs	r2, #0
 8008556:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008558:	4b1a      	ldr	r3, [pc, #104]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 800855a:	220c      	movs	r2, #12
 800855c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800855e:	4b19      	ldr	r3, [pc, #100]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 8008560:	2200      	movs	r2, #0
 8008562:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008564:	4b17      	ldr	r3, [pc, #92]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 8008566:	2200      	movs	r2, #0
 8008568:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800856a:	4b16      	ldr	r3, [pc, #88]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 800856c:	2200      	movs	r2, #0
 800856e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008570:	4b14      	ldr	r3, [pc, #80]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 8008572:	2200      	movs	r2, #0
 8008574:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008576:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 8008578:	2200      	movs	r2, #0
 800857a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800857c:	4811      	ldr	r0, [pc, #68]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 800857e:	f007 f96d 	bl	800f85c <HAL_UART_Init>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8008588:	f7fe fb66 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800858c:	2100      	movs	r1, #0
 800858e:	480d      	ldr	r0, [pc, #52]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 8008590:	f008 ffe4 	bl	801155c <HAL_UARTEx_SetTxFifoThreshold>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800859a:	f7fe fb5d 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800859e:	2100      	movs	r1, #0
 80085a0:	4808      	ldr	r0, [pc, #32]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 80085a2:	f009 f819 	bl	80115d8 <HAL_UARTEx_SetRxFifoThreshold>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80085ac:	f7fe fb54 	bl	8006c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80085b0:	4804      	ldr	r0, [pc, #16]	; (80085c4 <MX_USART3_UART_Init+0x90>)
 80085b2:	f008 ff9a 	bl	80114ea <HAL_UARTEx_DisableFifoMode>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80085bc:	f7fe fb4c 	bl	8006c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80085c0:	bf00      	nop
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	24000c18 	.word	0x24000c18
 80085c8:	40004800 	.word	0x40004800

080085cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b0bc      	sub	sp, #240	; 0xf0
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	605a      	str	r2, [r3, #4]
 80085de:	609a      	str	r2, [r3, #8]
 80085e0:	60da      	str	r2, [r3, #12]
 80085e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80085e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085e8:	22b4      	movs	r2, #180	; 0xb4
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f009 f8b7 	bl	8011760 <memset>
  if(uartHandle->Instance==UART4)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a96      	ldr	r2, [pc, #600]	; (8008850 <HAL_UART_MspInit+0x284>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d143      	bne.n	8008684 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80085fc:	2302      	movs	r3, #2
 80085fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008600:	2300      	movs	r3, #0
 8008602:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800860a:	4618      	mov	r0, r3
 800860c:	f003 fe16 	bl	800c23c <HAL_RCCEx_PeriphCLKConfig>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008616:	f7fe fb1f 	bl	8006c58 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800861a:	4b8e      	ldr	r3, [pc, #568]	; (8008854 <HAL_UART_MspInit+0x288>)
 800861c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008620:	4a8c      	ldr	r2, [pc, #560]	; (8008854 <HAL_UART_MspInit+0x288>)
 8008622:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008626:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800862a:	4b8a      	ldr	r3, [pc, #552]	; (8008854 <HAL_UART_MspInit+0x288>)
 800862c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008634:	627b      	str	r3, [r7, #36]	; 0x24
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008638:	4b86      	ldr	r3, [pc, #536]	; (8008854 <HAL_UART_MspInit+0x288>)
 800863a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800863e:	4a85      	ldr	r2, [pc, #532]	; (8008854 <HAL_UART_MspInit+0x288>)
 8008640:	f043 0301 	orr.w	r3, r3, #1
 8008644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008648:	4b82      	ldr	r3, [pc, #520]	; (8008854 <HAL_UART_MspInit+0x288>)
 800864a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	623b      	str	r3, [r7, #32]
 8008654:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008656:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800865a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800865e:	2302      	movs	r3, #2
 8008660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008664:	2300      	movs	r3, #0
 8008666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800866a:	2300      	movs	r3, #0
 800866c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8008670:	2306      	movs	r3, #6
 8008672:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008676:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800867a:	4619      	mov	r1, r3
 800867c:	4876      	ldr	r0, [pc, #472]	; (8008858 <HAL_UART_MspInit+0x28c>)
 800867e:	f002 fc7d 	bl	800af7c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008682:	e0e0      	b.n	8008846 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==UART5)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a74      	ldr	r2, [pc, #464]	; (800885c <HAL_UART_MspInit+0x290>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d143      	bne.n	8008716 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800868e:	2302      	movs	r3, #2
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008692:	2300      	movs	r3, #0
 8008694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800869c:	4618      	mov	r0, r3
 800869e:	f003 fdcd 	bl	800c23c <HAL_RCCEx_PeriphCLKConfig>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80086a8:	f7fe fad6 	bl	8006c58 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80086ac:	4b69      	ldr	r3, [pc, #420]	; (8008854 <HAL_UART_MspInit+0x288>)
 80086ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086b2:	4a68      	ldr	r2, [pc, #416]	; (8008854 <HAL_UART_MspInit+0x288>)
 80086b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80086bc:	4b65      	ldr	r3, [pc, #404]	; (8008854 <HAL_UART_MspInit+0x288>)
 80086be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086ca:	4b62      	ldr	r3, [pc, #392]	; (8008854 <HAL_UART_MspInit+0x288>)
 80086cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086d0:	4a60      	ldr	r2, [pc, #384]	; (8008854 <HAL_UART_MspInit+0x288>)
 80086d2:	f043 0302 	orr.w	r3, r3, #2
 80086d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086da:	4b5e      	ldr	r3, [pc, #376]	; (8008854 <HAL_UART_MspInit+0x288>)
 80086dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	61bb      	str	r3, [r7, #24]
 80086e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80086e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80086ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086f0:	2302      	movs	r3, #2
 80086f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f6:	2300      	movs	r3, #0
 80086f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086fc:	2300      	movs	r3, #0
 80086fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8008702:	230e      	movs	r3, #14
 8008704:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008708:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800870c:	4619      	mov	r1, r3
 800870e:	4854      	ldr	r0, [pc, #336]	; (8008860 <HAL_UART_MspInit+0x294>)
 8008710:	f002 fc34 	bl	800af7c <HAL_GPIO_Init>
}
 8008714:	e097      	b.n	8008846 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART2)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a52      	ldr	r2, [pc, #328]	; (8008864 <HAL_UART_MspInit+0x298>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d142      	bne.n	80087a6 <HAL_UART_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008720:	2302      	movs	r3, #2
 8008722:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008724:	2300      	movs	r3, #0
 8008726:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800872a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800872e:	4618      	mov	r0, r3
 8008730:	f003 fd84 	bl	800c23c <HAL_RCCEx_PeriphCLKConfig>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <HAL_UART_MspInit+0x172>
      Error_Handler();
 800873a:	f7fe fa8d 	bl	8006c58 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800873e:	4b45      	ldr	r3, [pc, #276]	; (8008854 <HAL_UART_MspInit+0x288>)
 8008740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008744:	4a43      	ldr	r2, [pc, #268]	; (8008854 <HAL_UART_MspInit+0x288>)
 8008746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800874a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800874e:	4b41      	ldr	r3, [pc, #260]	; (8008854 <HAL_UART_MspInit+0x288>)
 8008750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800875c:	4b3d      	ldr	r3, [pc, #244]	; (8008854 <HAL_UART_MspInit+0x288>)
 800875e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008762:	4a3c      	ldr	r2, [pc, #240]	; (8008854 <HAL_UART_MspInit+0x288>)
 8008764:	f043 0308 	orr.w	r3, r3, #8
 8008768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800876c:	4b39      	ldr	r3, [pc, #228]	; (8008854 <HAL_UART_MspInit+0x288>)
 800876e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008772:	f003 0308 	and.w	r3, r3, #8
 8008776:	613b      	str	r3, [r7, #16]
 8008778:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800877a:	2360      	movs	r3, #96	; 0x60
 800877c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008780:	2302      	movs	r3, #2
 8008782:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008786:	2300      	movs	r3, #0
 8008788:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800878c:	2300      	movs	r3, #0
 800878e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008792:	2307      	movs	r3, #7
 8008794:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008798:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800879c:	4619      	mov	r1, r3
 800879e:	4832      	ldr	r0, [pc, #200]	; (8008868 <HAL_UART_MspInit+0x29c>)
 80087a0:	f002 fbec 	bl	800af7c <HAL_GPIO_Init>
}
 80087a4:	e04f      	b.n	8008846 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART3)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a30      	ldr	r2, [pc, #192]	; (800886c <HAL_UART_MspInit+0x2a0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d14a      	bne.n	8008846 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80087b0:	2302      	movs	r3, #2
 80087b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80087b4:	2300      	movs	r3, #0
 80087b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80087ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087be:	4618      	mov	r0, r3
 80087c0:	f003 fd3c 	bl	800c23c <HAL_RCCEx_PeriphCLKConfig>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <HAL_UART_MspInit+0x202>
      Error_Handler();
 80087ca:	f7fe fa45 	bl	8006c58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80087ce:	4b21      	ldr	r3, [pc, #132]	; (8008854 <HAL_UART_MspInit+0x288>)
 80087d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80087d4:	4a1f      	ldr	r2, [pc, #124]	; (8008854 <HAL_UART_MspInit+0x288>)
 80087d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80087de:	4b1d      	ldr	r3, [pc, #116]	; (8008854 <HAL_UART_MspInit+0x288>)
 80087e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80087e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80087ec:	4b19      	ldr	r3, [pc, #100]	; (8008854 <HAL_UART_MspInit+0x288>)
 80087ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087f2:	4a18      	ldr	r2, [pc, #96]	; (8008854 <HAL_UART_MspInit+0x288>)
 80087f4:	f043 0302 	orr.w	r3, r3, #2
 80087f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087fc:	4b15      	ldr	r3, [pc, #84]	; (8008854 <HAL_UART_MspInit+0x288>)
 80087fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	60bb      	str	r3, [r7, #8]
 8008808:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800880a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800880e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008812:	2302      	movs	r3, #2
 8008814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008818:	2300      	movs	r3, #0
 800881a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800881e:	2300      	movs	r3, #0
 8008820:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008824:	2307      	movs	r3, #7
 8008826:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800882a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800882e:	4619      	mov	r1, r3
 8008830:	480b      	ldr	r0, [pc, #44]	; (8008860 <HAL_UART_MspInit+0x294>)
 8008832:	f002 fba3 	bl	800af7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8008836:	2200      	movs	r2, #0
 8008838:	2100      	movs	r1, #0
 800883a:	2027      	movs	r0, #39	; 0x27
 800883c:	f001 fd1d 	bl	800a27a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008840:	2027      	movs	r0, #39	; 0x27
 8008842:	f001 fd34 	bl	800a2ae <HAL_NVIC_EnableIRQ>
}
 8008846:	bf00      	nop
 8008848:	37f0      	adds	r7, #240	; 0xf0
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	40004c00 	.word	0x40004c00
 8008854:	58024400 	.word	0x58024400
 8008858:	58020000 	.word	0x58020000
 800885c:	40005000 	.word	0x40005000
 8008860:	58020400 	.word	0x58020400
 8008864:	40004400 	.word	0x40004400
 8008868:	58020c00 	.word	0x58020c00
 800886c:	40004800 	.word	0x40004800

08008870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80088a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008874:	f7fe fd1c 	bl	80072b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008878:	480c      	ldr	r0, [pc, #48]	; (80088ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800887a:	490d      	ldr	r1, [pc, #52]	; (80088b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800887c:	4a0d      	ldr	r2, [pc, #52]	; (80088b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800887e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008880:	e002      	b.n	8008888 <LoopCopyDataInit>

08008882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008886:	3304      	adds	r3, #4

08008888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800888a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800888c:	d3f9      	bcc.n	8008882 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800888e:	4a0a      	ldr	r2, [pc, #40]	; (80088b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008890:	4c0a      	ldr	r4, [pc, #40]	; (80088bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8008892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008894:	e001      	b.n	800889a <LoopFillZerobss>

08008896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008898:	3204      	adds	r2, #4

0800889a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800889a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800889c:	d3fb      	bcc.n	8008896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800889e:	f008 ff2d 	bl	80116fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80088a2:	f7fd fcd9 	bl	8006258 <main>
  bx  lr
 80088a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80088a8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80088ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80088b0:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80088b4:	08015248 	.word	0x08015248
  ldr r2, =_sbss
 80088b8:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80088bc:	24000e6c 	.word	0x24000e6c

080088c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80088c0:	e7fe      	b.n	80088c0 <ADC3_IRQHandler>
	...

080088c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80088ca:	2003      	movs	r0, #3
 80088cc:	f001 fcca 	bl	800a264 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088d0:	f003 fac2 	bl	800be58 <HAL_RCC_GetSysClockFreq>
 80088d4:	4602      	mov	r2, r0
 80088d6:	4b15      	ldr	r3, [pc, #84]	; (800892c <HAL_Init+0x68>)
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	0a1b      	lsrs	r3, r3, #8
 80088dc:	f003 030f 	and.w	r3, r3, #15
 80088e0:	4913      	ldr	r1, [pc, #76]	; (8008930 <HAL_Init+0x6c>)
 80088e2:	5ccb      	ldrb	r3, [r1, r3]
 80088e4:	f003 031f 	and.w	r3, r3, #31
 80088e8:	fa22 f303 	lsr.w	r3, r2, r3
 80088ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088ee:	4b0f      	ldr	r3, [pc, #60]	; (800892c <HAL_Init+0x68>)
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	4a0e      	ldr	r2, [pc, #56]	; (8008930 <HAL_Init+0x6c>)
 80088f8:	5cd3      	ldrb	r3, [r2, r3]
 80088fa:	f003 031f 	and.w	r3, r3, #31
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
 8008904:	4a0b      	ldr	r2, [pc, #44]	; (8008934 <HAL_Init+0x70>)
 8008906:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008908:	4a0b      	ldr	r2, [pc, #44]	; (8008938 <HAL_Init+0x74>)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800890e:	2000      	movs	r0, #0
 8008910:	f000 f814 	bl	800893c <HAL_InitTick>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e002      	b.n	8008924 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800891e:	f7fe fba1 	bl	8007064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	58024400 	.word	0x58024400
 8008930:	08014c40 	.word	0x08014c40
 8008934:	24000004 	.word	0x24000004
 8008938:	24000000 	.word	0x24000000

0800893c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008944:	4b15      	ldr	r3, [pc, #84]	; (800899c <HAL_InitTick+0x60>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e021      	b.n	8008994 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008950:	4b13      	ldr	r3, [pc, #76]	; (80089a0 <HAL_InitTick+0x64>)
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	4b11      	ldr	r3, [pc, #68]	; (800899c <HAL_InitTick+0x60>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	4619      	mov	r1, r3
 800895a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800895e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008962:	fbb2 f3f3 	udiv	r3, r2, r3
 8008966:	4618      	mov	r0, r3
 8008968:	f001 fcaf 	bl	800a2ca <HAL_SYSTICK_Config>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e00e      	b.n	8008994 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b0f      	cmp	r3, #15
 800897a:	d80a      	bhi.n	8008992 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800897c:	2200      	movs	r2, #0
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	f001 fc79 	bl	800a27a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008988:	4a06      	ldr	r2, [pc, #24]	; (80089a4 <HAL_InitTick+0x68>)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	e000      	b.n	8008994 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
}
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	2400000c 	.word	0x2400000c
 80089a0:	24000000 	.word	0x24000000
 80089a4:	24000008 	.word	0x24000008

080089a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80089ac:	4b06      	ldr	r3, [pc, #24]	; (80089c8 <HAL_IncTick+0x20>)
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	4b06      	ldr	r3, [pc, #24]	; (80089cc <HAL_IncTick+0x24>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4413      	add	r3, r2
 80089b8:	4a04      	ldr	r2, [pc, #16]	; (80089cc <HAL_IncTick+0x24>)
 80089ba:	6013      	str	r3, [r2, #0]
}
 80089bc:	bf00      	nop
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	2400000c 	.word	0x2400000c
 80089cc:	24000e58 	.word	0x24000e58

080089d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80089d0:	b480      	push	{r7}
 80089d2:	af00      	add	r7, sp, #0
  return uwTick;
 80089d4:	4b03      	ldr	r3, [pc, #12]	; (80089e4 <HAL_GetTick+0x14>)
 80089d6:	681b      	ldr	r3, [r3, #0]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	24000e58 	.word	0x24000e58

080089e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	431a      	orrs	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	609a      	str	r2, [r3, #8]
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	609a      	str	r2, [r3, #8]
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	3360      	adds	r3, #96	; 0x60
 8008a62:	461a      	mov	r2, r3
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4a10      	ldr	r2, [pc, #64]	; (8008ab0 <LL_ADC_SetOffset+0x60>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d10b      	bne.n	8008a8c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8008a8a:	e00b      	b.n	8008aa4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	601a      	str	r2, [r3, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	371c      	adds	r7, #28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	58026000 	.word	0x58026000

08008ab4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3360      	adds	r3, #96	; 0x60
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f003 031f 	and.w	r3, r3, #31
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	fa01 f303 	lsl.w	r3, r1, r3
 8008b00:	431a      	orrs	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	611a      	str	r2, [r3, #16]
}
 8008b06:	bf00      	nop
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
	...

08008b14 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4a0c      	ldr	r2, [pc, #48]	; (8008b54 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00e      	beq.n	8008b46 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3360      	adds	r3, #96	; 0x60
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	431a      	orrs	r2, r3
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	601a      	str	r2, [r3, #0]
  }
}
 8008b46:	bf00      	nop
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	58026000 	.word	0x58026000

08008b58 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4a0c      	ldr	r2, [pc, #48]	; (8008b98 <LL_ADC_SetOffsetSaturation+0x40>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d10e      	bne.n	8008b8a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3360      	adds	r3, #96	; 0x60
 8008b70:	461a      	mov	r2, r3
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	431a      	orrs	r2, r3
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8008b8a:	bf00      	nop
 8008b8c:	371c      	adds	r7, #28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	58026000 	.word	0x58026000

08008b9c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4a0c      	ldr	r2, [pc, #48]	; (8008bdc <LL_ADC_SetOffsetSign+0x40>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d10e      	bne.n	8008bce <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3360      	adds	r3, #96	; 0x60
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8008bce:	bf00      	nop
 8008bd0:	371c      	adds	r7, #28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	58026000 	.word	0x58026000

08008be0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3360      	adds	r3, #96	; 0x60
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4a0c      	ldr	r2, [pc, #48]	; (8008c30 <LL_ADC_SetOffsetState+0x50>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d108      	bne.n	8008c14 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8008c12:	e007      	b.n	8008c24 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	601a      	str	r2, [r3, #0]
}
 8008c24:	bf00      	nop
 8008c26:	371c      	adds	r7, #28
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	58026000 	.word	0x58026000

08008c34 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3330      	adds	r3, #48	; 0x30
 8008c44:	461a      	mov	r2, r3
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	0a1b      	lsrs	r3, r3, #8
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	f003 030c 	and.w	r3, r3, #12
 8008c50:	4413      	add	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f003 031f 	and.w	r3, r3, #31
 8008c5e:	211f      	movs	r1, #31
 8008c60:	fa01 f303 	lsl.w	r3, r1, r3
 8008c64:	43db      	mvns	r3, r3
 8008c66:	401a      	ands	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	0e9b      	lsrs	r3, r3, #26
 8008c6c:	f003 011f 	and.w	r1, r3, #31
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f003 031f 	and.w	r3, r3, #31
 8008c76:	fa01 f303 	lsl.w	r3, r1, r3
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008c80:	bf00      	nop
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	3314      	adds	r3, #20
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	0e5b      	lsrs	r3, r3, #25
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	4413      	add	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	0d1b      	lsrs	r3, r3, #20
 8008cb4:	f003 031f 	and.w	r3, r3, #31
 8008cb8:	2107      	movs	r1, #7
 8008cba:	fa01 f303 	lsl.w	r3, r1, r3
 8008cbe:	43db      	mvns	r3, r3
 8008cc0:	401a      	ands	r2, r3
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	0d1b      	lsrs	r3, r3, #20
 8008cc6:	f003 031f 	and.w	r3, r3, #31
 8008cca:	6879      	ldr	r1, [r7, #4]
 8008ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008cd6:	bf00      	nop
 8008cd8:	371c      	adds	r7, #28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
	...

08008ce4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4a1a      	ldr	r2, [pc, #104]	; (8008d5c <LL_ADC_SetChannelSingleDiff+0x78>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d115      	bne.n	8008d24 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d04:	43db      	mvns	r3, r3
 8008d06:	401a      	ands	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f003 0318 	and.w	r3, r3, #24
 8008d0e:	4914      	ldr	r1, [pc, #80]	; (8008d60 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008d10:	40d9      	lsrs	r1, r3
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	400b      	ands	r3, r1
 8008d16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8008d22:	e014      	b.n	8008d4e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d30:	43db      	mvns	r3, r3
 8008d32:	401a      	ands	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f003 0318 	and.w	r3, r3, #24
 8008d3a:	4909      	ldr	r1, [pc, #36]	; (8008d60 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8008d3c:	40d9      	lsrs	r1, r3
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	400b      	ands	r3, r1
 8008d42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d46:	431a      	orrs	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8008d4e:	bf00      	nop
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	58026000 	.word	0x58026000
 8008d60:	000fffff 	.word	0x000fffff

08008d64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	4b04      	ldr	r3, [pc, #16]	; (8008d84 <LL_ADC_DisableDeepPowerDown+0x20>)
 8008d72:	4013      	ands	r3, r2
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	6093      	str	r3, [r2, #8]
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	5fffffc0 	.word	0x5fffffc0

08008d88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d9c:	d101      	bne.n	8008da2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e000      	b.n	8008da4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <LL_ADC_EnableInternalRegulator+0x24>)
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	6fffffc0 	.word	0x6fffffc0

08008dd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dec:	d101      	bne.n	8008df2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e000      	b.n	8008df4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d101      	bne.n	8008e18 <LL_ADC_IsEnabled+0x18>
 8008e14:	2301      	movs	r3, #1
 8008e16:	e000      	b.n	8008e1a <LL_ADC_IsEnabled+0x1a>
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f003 0304 	and.w	r3, r3, #4
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d101      	bne.n	8008e3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e000      	b.n	8008e40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f003 0308 	and.w	r3, r3, #8
 8008e5c:	2b08      	cmp	r3, #8
 8008e5e:	d101      	bne.n	8008e64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008e60:	2301      	movs	r3, #1
 8008e62:	e000      	b.n	8008e66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008e74:	b590      	push	{r4, r7, lr}
 8008e76:	b089      	sub	sp, #36	; 0x24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e1ee      	b.n	800926c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d109      	bne.n	8008eb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7f7 fee5 	bl	8000c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff ff67 	bl	8008d88 <LL_ADC_IsDeepPowerDownEnabled>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d004      	beq.n	8008eca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7ff ff4d 	bl	8008d64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff ff82 	bl	8008dd8 <LL_ADC_IsInternalRegulatorEnabled>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d114      	bne.n	8008f04 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7ff ff66 	bl	8008db0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008ee4:	4b8e      	ldr	r3, [pc, #568]	; (8009120 <HAL_ADC_Init+0x2ac>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	099b      	lsrs	r3, r3, #6
 8008eea:	4a8e      	ldr	r2, [pc, #568]	; (8009124 <HAL_ADC_Init+0x2b0>)
 8008eec:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef0:	099b      	lsrs	r3, r3, #6
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008ef6:	e002      	b.n	8008efe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1f9      	bne.n	8008ef8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7ff ff65 	bl	8008dd8 <LL_ADC_IsInternalRegulatorEnabled>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10d      	bne.n	8008f30 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f18:	f043 0210 	orr.w	r2, r3, #16
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f24:	f043 0201 	orr.w	r2, r3, #1
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff ff76 	bl	8008e26 <LL_ADC_REG_IsConversionOngoing>
 8008f3a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f040 8188 	bne.w	800925a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f040 8184 	bne.w	800925a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f56:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008f5a:	f043 0202 	orr.w	r2, r3, #2
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff ff4a 	bl	8008e00 <LL_ADC_IsEnabled>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d136      	bne.n	8008fe0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a6c      	ldr	r2, [pc, #432]	; (8009128 <HAL_ADC_Init+0x2b4>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d004      	beq.n	8008f86 <HAL_ADC_Init+0x112>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a6a      	ldr	r2, [pc, #424]	; (800912c <HAL_ADC_Init+0x2b8>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d10e      	bne.n	8008fa4 <HAL_ADC_Init+0x130>
 8008f86:	4868      	ldr	r0, [pc, #416]	; (8009128 <HAL_ADC_Init+0x2b4>)
 8008f88:	f7ff ff3a 	bl	8008e00 <LL_ADC_IsEnabled>
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	4867      	ldr	r0, [pc, #412]	; (800912c <HAL_ADC_Init+0x2b8>)
 8008f90:	f7ff ff36 	bl	8008e00 <LL_ADC_IsEnabled>
 8008f94:	4603      	mov	r3, r0
 8008f96:	4323      	orrs	r3, r4
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	bf0c      	ite	eq
 8008f9c:	2301      	moveq	r3, #1
 8008f9e:	2300      	movne	r3, #0
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	e008      	b.n	8008fb6 <HAL_ADC_Init+0x142>
 8008fa4:	4862      	ldr	r0, [pc, #392]	; (8009130 <HAL_ADC_Init+0x2bc>)
 8008fa6:	f7ff ff2b 	bl	8008e00 <LL_ADC_IsEnabled>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	bf0c      	ite	eq
 8008fb0:	2301      	moveq	r3, #1
 8008fb2:	2300      	movne	r3, #0
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d012      	beq.n	8008fe0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a5a      	ldr	r2, [pc, #360]	; (8009128 <HAL_ADC_Init+0x2b4>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d004      	beq.n	8008fce <HAL_ADC_Init+0x15a>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a58      	ldr	r2, [pc, #352]	; (800912c <HAL_ADC_Init+0x2b8>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d101      	bne.n	8008fd2 <HAL_ADC_Init+0x15e>
 8008fce:	4a59      	ldr	r2, [pc, #356]	; (8009134 <HAL_ADC_Init+0x2c0>)
 8008fd0:	e000      	b.n	8008fd4 <HAL_ADC_Init+0x160>
 8008fd2:	4a59      	ldr	r2, [pc, #356]	; (8009138 <HAL_ADC_Init+0x2c4>)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4610      	mov	r0, r2
 8008fdc:	f7ff fd04 	bl	80089e8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a52      	ldr	r2, [pc, #328]	; (8009130 <HAL_ADC_Init+0x2bc>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d129      	bne.n	800903e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	7e5b      	ldrb	r3, [r3, #25]
 8008fee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8008ff4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8008ffa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	2b08      	cmp	r3, #8
 8009002:	d013      	beq.n	800902c <HAL_ADC_Init+0x1b8>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	2b0c      	cmp	r3, #12
 800900a:	d00d      	beq.n	8009028 <HAL_ADC_Init+0x1b4>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	2b1c      	cmp	r3, #28
 8009012:	d007      	beq.n	8009024 <HAL_ADC_Init+0x1b0>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	2b18      	cmp	r3, #24
 800901a:	d101      	bne.n	8009020 <HAL_ADC_Init+0x1ac>
 800901c:	2318      	movs	r3, #24
 800901e:	e006      	b.n	800902e <HAL_ADC_Init+0x1ba>
 8009020:	2300      	movs	r3, #0
 8009022:	e004      	b.n	800902e <HAL_ADC_Init+0x1ba>
 8009024:	2310      	movs	r3, #16
 8009026:	e002      	b.n	800902e <HAL_ADC_Init+0x1ba>
 8009028:	2308      	movs	r3, #8
 800902a:	e000      	b.n	800902e <HAL_ADC_Init+0x1ba>
 800902c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800902e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009036:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009038:	4313      	orrs	r3, r2
 800903a:	61bb      	str	r3, [r7, #24]
 800903c:	e00e      	b.n	800905c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	7e5b      	ldrb	r3, [r3, #25]
 8009042:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009048:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800904e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009056:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009058:	4313      	orrs	r3, r2
 800905a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d106      	bne.n	8009074 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	3b01      	subs	r3, #1
 800906c:	045b      	lsls	r3, r3, #17
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	4313      	orrs	r3, r2
 8009072:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	2b00      	cmp	r3, #0
 800907a:	d009      	beq.n	8009090 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009080:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	4313      	orrs	r3, r2
 800908e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a26      	ldr	r2, [pc, #152]	; (8009130 <HAL_ADC_Init+0x2bc>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d115      	bne.n	80090c6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	4b26      	ldr	r3, [pc, #152]	; (800913c <HAL_ADC_Init+0x2c8>)
 80090a2:	4013      	ands	r3, r2
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	6812      	ldr	r2, [r2, #0]
 80090a8:	69b9      	ldr	r1, [r7, #24]
 80090aa:	430b      	orrs	r3, r1
 80090ac:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	611a      	str	r2, [r3, #16]
 80090c4:	e009      	b.n	80090da <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68da      	ldr	r2, [r3, #12]
 80090cc:	4b1c      	ldr	r3, [pc, #112]	; (8009140 <HAL_ADC_Init+0x2cc>)
 80090ce:	4013      	ands	r3, r2
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	6812      	ldr	r2, [r2, #0]
 80090d4:	69b9      	ldr	r1, [r7, #24]
 80090d6:	430b      	orrs	r3, r1
 80090d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff fea1 	bl	8008e26 <LL_ADC_REG_IsConversionOngoing>
 80090e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff feae 	bl	8008e4c <LL_ADC_INJ_IsConversionOngoing>
 80090f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f040 808e 	bne.w	8009216 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f040 808a 	bne.w	8009216 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a0a      	ldr	r2, [pc, #40]	; (8009130 <HAL_ADC_Init+0x2bc>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d11b      	bne.n	8009144 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	7e1b      	ldrb	r3, [r3, #24]
 8009110:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009118:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800911a:	4313      	orrs	r3, r2
 800911c:	61bb      	str	r3, [r7, #24]
 800911e:	e018      	b.n	8009152 <HAL_ADC_Init+0x2de>
 8009120:	24000000 	.word	0x24000000
 8009124:	053e2d63 	.word	0x053e2d63
 8009128:	40022000 	.word	0x40022000
 800912c:	40022100 	.word	0x40022100
 8009130:	58026000 	.word	0x58026000
 8009134:	40022300 	.word	0x40022300
 8009138:	58026300 	.word	0x58026300
 800913c:	fff04007 	.word	0xfff04007
 8009140:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	7e1b      	ldrb	r3, [r3, #24]
 8009148:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800914e:	4313      	orrs	r3, r2
 8009150:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68da      	ldr	r2, [r3, #12]
 8009158:	4b46      	ldr	r3, [pc, #280]	; (8009274 <HAL_ADC_Init+0x400>)
 800915a:	4013      	ands	r3, r2
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	6812      	ldr	r2, [r2, #0]
 8009160:	69b9      	ldr	r1, [r7, #24]
 8009162:	430b      	orrs	r3, r1
 8009164:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800916c:	2b01      	cmp	r3, #1
 800916e:	d137      	bne.n	80091e0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a3f      	ldr	r2, [pc, #252]	; (8009278 <HAL_ADC_Init+0x404>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d116      	bne.n	80091ae <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	691a      	ldr	r2, [r3, #16]
 8009186:	4b3d      	ldr	r3, [pc, #244]	; (800927c <HAL_ADC_Init+0x408>)
 8009188:	4013      	ands	r3, r2
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009192:	4311      	orrs	r1, r2
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009198:	4311      	orrs	r1, r2
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800919e:	430a      	orrs	r2, r1
 80091a0:	431a      	orrs	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0201 	orr.w	r2, r2, #1
 80091aa:	611a      	str	r2, [r3, #16]
 80091ac:	e020      	b.n	80091f0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	691a      	ldr	r2, [r3, #16]
 80091b4:	4b32      	ldr	r3, [pc, #200]	; (8009280 <HAL_ADC_Init+0x40c>)
 80091b6:	4013      	ands	r3, r2
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80091bc:	3a01      	subs	r2, #1
 80091be:	0411      	lsls	r1, r2, #16
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80091c4:	4311      	orrs	r1, r2
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80091ca:	4311      	orrs	r1, r2
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80091d0:	430a      	orrs	r2, r1
 80091d2:	431a      	orrs	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f042 0201 	orr.w	r2, r2, #1
 80091dc:	611a      	str	r2, [r3, #16]
 80091de:	e007      	b.n	80091f0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	691a      	ldr	r2, [r3, #16]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0201 	bic.w	r2, r2, #1
 80091ee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a1b      	ldr	r2, [pc, #108]	; (8009278 <HAL_ADC_Init+0x404>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d002      	beq.n	8009216 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fd63 	bl	8009cdc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d10c      	bne.n	8009238 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009224:	f023 010f 	bic.w	r1, r3, #15
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	1e5a      	subs	r2, r3, #1
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	631a      	str	r2, [r3, #48]	; 0x30
 8009236:	e007      	b.n	8009248 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 020f 	bic.w	r2, r2, #15
 8009246:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800924c:	f023 0303 	bic.w	r3, r3, #3
 8009250:	f043 0201 	orr.w	r2, r3, #1
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	661a      	str	r2, [r3, #96]	; 0x60
 8009258:	e007      	b.n	800926a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925e:	f043 0210 	orr.w	r2, r3, #16
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800926a:	7ffb      	ldrb	r3, [r7, #31]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3724      	adds	r7, #36	; 0x24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd90      	pop	{r4, r7, pc}
 8009274:	ffffbffc 	.word	0xffffbffc
 8009278:	58026000 	.word	0x58026000
 800927c:	fc00f81f 	.word	0xfc00f81f
 8009280:	fc00f81e 	.word	0xfc00f81e

08009284 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009284:	b590      	push	{r4, r7, lr}
 8009286:	b0b9      	sub	sp, #228	; 0xe4
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800929e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	4ab3      	ldr	r2, [pc, #716]	; (8009574 <HAL_ADC_ConfigChannel+0x2f0>)
 80092a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d102      	bne.n	80092b8 <HAL_ADC_ConfigChannel+0x34>
 80092b2:	2302      	movs	r3, #2
 80092b4:	f000 bcfa 	b.w	8009cac <HAL_ADC_ConfigChannel+0xa28>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff fdae 	bl	8008e26 <LL_ADC_REG_IsConversionOngoing>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f040 84de 	bne.w	8009c8e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4aa8      	ldr	r2, [pc, #672]	; (8009578 <HAL_ADC_ConfigChannel+0x2f4>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d033      	beq.n	8009344 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d108      	bne.n	80092fa <HAL_ADC_ConfigChannel+0x76>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	0e9b      	lsrs	r3, r3, #26
 80092ee:	f003 031f 	and.w	r3, r3, #31
 80092f2:	2201      	movs	r2, #1
 80092f4:	fa02 f303 	lsl.w	r3, r2, r3
 80092f8:	e01d      	b.n	8009336 <HAL_ADC_ConfigChannel+0xb2>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009306:	fa93 f3a3 	rbit	r3, r3
 800930a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800930e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009312:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800931e:	2320      	movs	r3, #32
 8009320:	e004      	b.n	800932c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8009322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009326:	fab3 f383 	clz	r3, r3
 800932a:	b2db      	uxtb	r3, r3
 800932c:	f003 031f 	and.w	r3, r3, #31
 8009330:	2201      	movs	r2, #1
 8009332:	fa02 f303 	lsl.w	r3, r2, r3
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	6812      	ldr	r2, [r2, #0]
 800933a:	69d1      	ldr	r1, [r2, #28]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	6812      	ldr	r2, [r2, #0]
 8009340:	430b      	orrs	r3, r1
 8009342:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	6859      	ldr	r1, [r3, #4]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	f7ff fc6f 	bl	8008c34 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff fd63 	bl	8008e26 <LL_ADC_REG_IsConversionOngoing>
 8009360:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff fd6f 	bl	8008e4c <LL_ADC_INJ_IsConversionOngoing>
 800936e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009376:	2b00      	cmp	r3, #0
 8009378:	f040 8270 	bne.w	800985c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800937c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009380:	2b00      	cmp	r3, #0
 8009382:	f040 826b 	bne.w	800985c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6818      	ldr	r0, [r3, #0]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	6819      	ldr	r1, [r3, #0]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	461a      	mov	r2, r3
 8009394:	f7ff fc7a 	bl	8008c8c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a76      	ldr	r2, [pc, #472]	; (8009578 <HAL_ADC_ConfigChannel+0x2f4>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d10d      	bne.n	80093be <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	695a      	ldr	r2, [r3, #20]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	08db      	lsrs	r3, r3, #3
 80093ae:	f003 0303 	and.w	r3, r3, #3
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	fa02 f303 	lsl.w	r3, r2, r3
 80093b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80093bc:	e032      	b.n	8009424 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80093be:	4b6f      	ldr	r3, [pc, #444]	; (800957c <HAL_ADC_ConfigChannel+0x2f8>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80093c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093ca:	d10b      	bne.n	80093e4 <HAL_ADC_ConfigChannel+0x160>
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	695a      	ldr	r2, [r3, #20]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	089b      	lsrs	r3, r3, #2
 80093d8:	f003 0307 	and.w	r3, r3, #7
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	fa02 f303 	lsl.w	r3, r2, r3
 80093e2:	e01d      	b.n	8009420 <HAL_ADC_ConfigChannel+0x19c>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	f003 0310 	and.w	r3, r3, #16
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10b      	bne.n	800940a <HAL_ADC_ConfigChannel+0x186>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	695a      	ldr	r2, [r3, #20]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	089b      	lsrs	r3, r3, #2
 80093fe:	f003 0307 	and.w	r3, r3, #7
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	fa02 f303 	lsl.w	r3, r2, r3
 8009408:	e00a      	b.n	8009420 <HAL_ADC_ConfigChannel+0x19c>
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	695a      	ldr	r2, [r3, #20]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	089b      	lsrs	r3, r3, #2
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	005b      	lsls	r3, r3, #1
 800941c:	fa02 f303 	lsl.w	r3, r2, r3
 8009420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	2b04      	cmp	r3, #4
 800942a:	d048      	beq.n	80094be <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6818      	ldr	r0, [r3, #0]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	6919      	ldr	r1, [r3, #16]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800943c:	f7ff fb08 	bl	8008a50 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a4c      	ldr	r2, [pc, #304]	; (8009578 <HAL_ADC_ConfigChannel+0x2f4>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d119      	bne.n	800947e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	6919      	ldr	r1, [r3, #16]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	461a      	mov	r2, r3
 8009458:	f7ff fba0 	bl	8008b9c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	6919      	ldr	r1, [r3, #16]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d102      	bne.n	8009474 <HAL_ADC_ConfigChannel+0x1f0>
 800946e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009472:	e000      	b.n	8009476 <HAL_ADC_ConfigChannel+0x1f2>
 8009474:	2300      	movs	r3, #0
 8009476:	461a      	mov	r2, r3
 8009478:	f7ff fb6e 	bl	8008b58 <LL_ADC_SetOffsetSaturation>
 800947c:	e1ee      	b.n	800985c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6818      	ldr	r0, [r3, #0]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	6919      	ldr	r1, [r3, #16]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800948c:	2b01      	cmp	r3, #1
 800948e:	d102      	bne.n	8009496 <HAL_ADC_ConfigChannel+0x212>
 8009490:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009494:	e000      	b.n	8009498 <HAL_ADC_ConfigChannel+0x214>
 8009496:	2300      	movs	r3, #0
 8009498:	461a      	mov	r2, r3
 800949a:	f7ff fb3b 	bl	8008b14 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6919      	ldr	r1, [r3, #16]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	7e1b      	ldrb	r3, [r3, #24]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d102      	bne.n	80094b4 <HAL_ADC_ConfigChannel+0x230>
 80094ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094b2:	e000      	b.n	80094b6 <HAL_ADC_ConfigChannel+0x232>
 80094b4:	2300      	movs	r3, #0
 80094b6:	461a      	mov	r2, r3
 80094b8:	f7ff fb12 	bl	8008ae0 <LL_ADC_SetDataRightShift>
 80094bc:	e1ce      	b.n	800985c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a2d      	ldr	r2, [pc, #180]	; (8009578 <HAL_ADC_ConfigChannel+0x2f4>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	f040 8181 	bne.w	80097cc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2100      	movs	r1, #0
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7ff faef 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 80094d6:	4603      	mov	r3, r0
 80094d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10a      	bne.n	80094f6 <HAL_ADC_ConfigChannel+0x272>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff fae4 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 80094ec:	4603      	mov	r3, r0
 80094ee:	0e9b      	lsrs	r3, r3, #26
 80094f0:	f003 021f 	and.w	r2, r3, #31
 80094f4:	e01e      	b.n	8009534 <HAL_ADC_ConfigChannel+0x2b0>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2100      	movs	r1, #0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fad9 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 8009502:	4603      	mov	r3, r0
 8009504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009508:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800950c:	fa93 f3a3 	rbit	r3, r3
 8009510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8009514:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009518:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800951c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009520:	2b00      	cmp	r3, #0
 8009522:	d101      	bne.n	8009528 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8009524:	2320      	movs	r3, #32
 8009526:	e004      	b.n	8009532 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8009528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800952c:	fab3 f383 	clz	r3, r3
 8009530:	b2db      	uxtb	r3, r3
 8009532:	461a      	mov	r2, r3
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800953c:	2b00      	cmp	r3, #0
 800953e:	d105      	bne.n	800954c <HAL_ADC_ConfigChannel+0x2c8>
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	0e9b      	lsrs	r3, r3, #26
 8009546:	f003 031f 	and.w	r3, r3, #31
 800954a:	e01e      	b.n	800958a <HAL_ADC_ConfigChannel+0x306>
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009558:	fa93 f3a3 	rbit	r3, r3
 800955c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8009560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8009568:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d107      	bne.n	8009580 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8009570:	2320      	movs	r3, #32
 8009572:	e00a      	b.n	800958a <HAL_ADC_ConfigChannel+0x306>
 8009574:	47ff0000 	.word	0x47ff0000
 8009578:	58026000 	.word	0x58026000
 800957c:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8009580:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009584:	fab3 f383 	clz	r3, r3
 8009588:	b2db      	uxtb	r3, r3
 800958a:	429a      	cmp	r2, r3
 800958c:	d106      	bne.n	800959c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2200      	movs	r2, #0
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff fb22 	bl	8008be0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2101      	movs	r1, #1
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7ff fa86 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 80095a8:	4603      	mov	r3, r0
 80095aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10a      	bne.n	80095c8 <HAL_ADC_ConfigChannel+0x344>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2101      	movs	r1, #1
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff fa7b 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 80095be:	4603      	mov	r3, r0
 80095c0:	0e9b      	lsrs	r3, r3, #26
 80095c2:	f003 021f 	and.w	r2, r3, #31
 80095c6:	e01e      	b.n	8009606 <HAL_ADC_ConfigChannel+0x382>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2101      	movs	r1, #1
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff fa70 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095de:	fa93 f3a3 	rbit	r3, r3
 80095e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80095e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80095ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80095f6:	2320      	movs	r3, #32
 80095f8:	e004      	b.n	8009604 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80095fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095fe:	fab3 f383 	clz	r3, r3
 8009602:	b2db      	uxtb	r3, r3
 8009604:	461a      	mov	r2, r3
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800960e:	2b00      	cmp	r3, #0
 8009610:	d105      	bne.n	800961e <HAL_ADC_ConfigChannel+0x39a>
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	0e9b      	lsrs	r3, r3, #26
 8009618:	f003 031f 	and.w	r3, r3, #31
 800961c:	e018      	b.n	8009650 <HAL_ADC_ConfigChannel+0x3cc>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009626:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800962a:	fa93 f3a3 	rbit	r3, r3
 800962e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8009632:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009636:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800963a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8009642:	2320      	movs	r3, #32
 8009644:	e004      	b.n	8009650 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8009646:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800964a:	fab3 f383 	clz	r3, r3
 800964e:	b2db      	uxtb	r3, r3
 8009650:	429a      	cmp	r2, r3
 8009652:	d106      	bne.n	8009662 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2200      	movs	r2, #0
 800965a:	2101      	movs	r1, #1
 800965c:	4618      	mov	r0, r3
 800965e:	f7ff fabf 	bl	8008be0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2102      	movs	r1, #2
 8009668:	4618      	mov	r0, r3
 800966a:	f7ff fa23 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 800966e:	4603      	mov	r3, r0
 8009670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10a      	bne.n	800968e <HAL_ADC_ConfigChannel+0x40a>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2102      	movs	r1, #2
 800967e:	4618      	mov	r0, r3
 8009680:	f7ff fa18 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 8009684:	4603      	mov	r3, r0
 8009686:	0e9b      	lsrs	r3, r3, #26
 8009688:	f003 021f 	and.w	r2, r3, #31
 800968c:	e01e      	b.n	80096cc <HAL_ADC_ConfigChannel+0x448>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2102      	movs	r1, #2
 8009694:	4618      	mov	r0, r3
 8009696:	f7ff fa0d 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 800969a:	4603      	mov	r3, r0
 800969c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096a4:	fa93 f3a3 	rbit	r3, r3
 80096a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80096ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80096b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80096bc:	2320      	movs	r3, #32
 80096be:	e004      	b.n	80096ca <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80096c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096c4:	fab3 f383 	clz	r3, r3
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d105      	bne.n	80096e4 <HAL_ADC_ConfigChannel+0x460>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	0e9b      	lsrs	r3, r3, #26
 80096de:	f003 031f 	and.w	r3, r3, #31
 80096e2:	e014      	b.n	800970e <HAL_ADC_ConfigChannel+0x48a>
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096ec:	fa93 f3a3 	rbit	r3, r3
 80096f0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80096f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80096f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8009700:	2320      	movs	r3, #32
 8009702:	e004      	b.n	800970e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8009704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009708:	fab3 f383 	clz	r3, r3
 800970c:	b2db      	uxtb	r3, r3
 800970e:	429a      	cmp	r2, r3
 8009710:	d106      	bne.n	8009720 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2200      	movs	r2, #0
 8009718:	2102      	movs	r1, #2
 800971a:	4618      	mov	r0, r3
 800971c:	f7ff fa60 	bl	8008be0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2103      	movs	r1, #3
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff f9c4 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 800972c:	4603      	mov	r3, r0
 800972e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10a      	bne.n	800974c <HAL_ADC_ConfigChannel+0x4c8>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2103      	movs	r1, #3
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff f9b9 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 8009742:	4603      	mov	r3, r0
 8009744:	0e9b      	lsrs	r3, r3, #26
 8009746:	f003 021f 	and.w	r2, r3, #31
 800974a:	e017      	b.n	800977c <HAL_ADC_ConfigChannel+0x4f8>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2103      	movs	r1, #3
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff f9ae 	bl	8008ab4 <LL_ADC_GetOffsetChannel>
 8009758:	4603      	mov	r3, r0
 800975a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800975c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800975e:	fa93 f3a3 	rbit	r3, r3
 8009762:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009766:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8009768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800976e:	2320      	movs	r3, #32
 8009770:	e003      	b.n	800977a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8009772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009774:	fab3 f383 	clz	r3, r3
 8009778:	b2db      	uxtb	r3, r3
 800977a:	461a      	mov	r2, r3
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009784:	2b00      	cmp	r3, #0
 8009786:	d105      	bne.n	8009794 <HAL_ADC_ConfigChannel+0x510>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	0e9b      	lsrs	r3, r3, #26
 800978e:	f003 031f 	and.w	r3, r3, #31
 8009792:	e011      	b.n	80097b8 <HAL_ADC_ConfigChannel+0x534>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800979a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800979c:	fa93 f3a3 	rbit	r3, r3
 80097a0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80097a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097a4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80097a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80097ac:	2320      	movs	r3, #32
 80097ae:	e003      	b.n	80097b8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80097b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097b2:	fab3 f383 	clz	r3, r3
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d14f      	bne.n	800985c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2200      	movs	r2, #0
 80097c2:	2103      	movs	r1, #3
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fa0b 	bl	8008be0 <LL_ADC_SetOffsetState>
 80097ca:	e047      	b.n	800985c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	069b      	lsls	r3, r3, #26
 80097dc:	429a      	cmp	r2, r3
 80097de:	d107      	bne.n	80097f0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80097ee:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	069b      	lsls	r3, r3, #26
 8009800:	429a      	cmp	r2, r3
 8009802:	d107      	bne.n	8009814 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009812:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800981a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	069b      	lsls	r3, r3, #26
 8009824:	429a      	cmp	r2, r3
 8009826:	d107      	bne.n	8009838 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009836:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800983e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	069b      	lsls	r3, r3, #26
 8009848:	429a      	cmp	r2, r3
 800984a:	d107      	bne.n	800985c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800985a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff facd 	bl	8008e00 <LL_ADC_IsEnabled>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	f040 8219 	bne.w	8009ca0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	6819      	ldr	r1, [r3, #0]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	461a      	mov	r2, r3
 800987c:	f7ff fa32 	bl	8008ce4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	4aa1      	ldr	r2, [pc, #644]	; (8009b0c <HAL_ADC_ConfigChannel+0x888>)
 8009886:	4293      	cmp	r3, r2
 8009888:	f040 812e 	bne.w	8009ae8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10b      	bne.n	80098b4 <HAL_ADC_ConfigChannel+0x630>
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	0e9b      	lsrs	r3, r3, #26
 80098a2:	3301      	adds	r3, #1
 80098a4:	f003 031f 	and.w	r3, r3, #31
 80098a8:	2b09      	cmp	r3, #9
 80098aa:	bf94      	ite	ls
 80098ac:	2301      	movls	r3, #1
 80098ae:	2300      	movhi	r3, #0
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	e019      	b.n	80098e8 <HAL_ADC_ConfigChannel+0x664>
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098bc:	fa93 f3a3 	rbit	r3, r3
 80098c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80098c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80098c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80098cc:	2320      	movs	r3, #32
 80098ce:	e003      	b.n	80098d8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80098d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098d2:	fab3 f383 	clz	r3, r3
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	3301      	adds	r3, #1
 80098da:	f003 031f 	and.w	r3, r3, #31
 80098de:	2b09      	cmp	r3, #9
 80098e0:	bf94      	ite	ls
 80098e2:	2301      	movls	r3, #1
 80098e4:	2300      	movhi	r3, #0
 80098e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d079      	beq.n	80099e0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d107      	bne.n	8009908 <HAL_ADC_ConfigChannel+0x684>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	0e9b      	lsrs	r3, r3, #26
 80098fe:	3301      	adds	r3, #1
 8009900:	069b      	lsls	r3, r3, #26
 8009902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009906:	e015      	b.n	8009934 <HAL_ADC_ConfigChannel+0x6b0>
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800990e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009910:	fa93 f3a3 	rbit	r3, r3
 8009914:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8009916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009918:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800991a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8009920:	2320      	movs	r3, #32
 8009922:	e003      	b.n	800992c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8009924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009926:	fab3 f383 	clz	r3, r3
 800992a:	b2db      	uxtb	r3, r3
 800992c:	3301      	adds	r3, #1
 800992e:	069b      	lsls	r3, r3, #26
 8009930:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800993c:	2b00      	cmp	r3, #0
 800993e:	d109      	bne.n	8009954 <HAL_ADC_ConfigChannel+0x6d0>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	0e9b      	lsrs	r3, r3, #26
 8009946:	3301      	adds	r3, #1
 8009948:	f003 031f 	and.w	r3, r3, #31
 800994c:	2101      	movs	r1, #1
 800994e:	fa01 f303 	lsl.w	r3, r1, r3
 8009952:	e017      	b.n	8009984 <HAL_ADC_ConfigChannel+0x700>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800995a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800995c:	fa93 f3a3 	rbit	r3, r3
 8009960:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009964:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8009966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800996c:	2320      	movs	r3, #32
 800996e:	e003      	b.n	8009978 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8009970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009972:	fab3 f383 	clz	r3, r3
 8009976:	b2db      	uxtb	r3, r3
 8009978:	3301      	adds	r3, #1
 800997a:	f003 031f 	and.w	r3, r3, #31
 800997e:	2101      	movs	r1, #1
 8009980:	fa01 f303 	lsl.w	r3, r1, r3
 8009984:	ea42 0103 	orr.w	r1, r2, r3
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10a      	bne.n	80099aa <HAL_ADC_ConfigChannel+0x726>
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	0e9b      	lsrs	r3, r3, #26
 800999a:	3301      	adds	r3, #1
 800999c:	f003 021f 	and.w	r2, r3, #31
 80099a0:	4613      	mov	r3, r2
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	4413      	add	r3, r2
 80099a6:	051b      	lsls	r3, r3, #20
 80099a8:	e018      	b.n	80099dc <HAL_ADC_ConfigChannel+0x758>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b2:	fa93 f3a3 	rbit	r3, r3
 80099b6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80099bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d101      	bne.n	80099c6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80099c2:	2320      	movs	r3, #32
 80099c4:	e003      	b.n	80099ce <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	fab3 f383 	clz	r3, r3
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	3301      	adds	r3, #1
 80099d0:	f003 021f 	and.w	r2, r3, #31
 80099d4:	4613      	mov	r3, r2
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	4413      	add	r3, r2
 80099da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80099dc:	430b      	orrs	r3, r1
 80099de:	e07e      	b.n	8009ade <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d107      	bne.n	80099fc <HAL_ADC_ConfigChannel+0x778>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	0e9b      	lsrs	r3, r3, #26
 80099f2:	3301      	adds	r3, #1
 80099f4:	069b      	lsls	r3, r3, #26
 80099f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80099fa:	e015      	b.n	8009a28 <HAL_ADC_ConfigChannel+0x7a4>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	fa93 f3a3 	rbit	r3, r3
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8009a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8009a14:	2320      	movs	r3, #32
 8009a16:	e003      	b.n	8009a20 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8009a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1a:	fab3 f383 	clz	r3, r3
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	3301      	adds	r3, #1
 8009a22:	069b      	lsls	r3, r3, #26
 8009a24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d109      	bne.n	8009a48 <HAL_ADC_ConfigChannel+0x7c4>
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	0e9b      	lsrs	r3, r3, #26
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	f003 031f 	and.w	r3, r3, #31
 8009a40:	2101      	movs	r1, #1
 8009a42:	fa01 f303 	lsl.w	r3, r1, r3
 8009a46:	e017      	b.n	8009a78 <HAL_ADC_ConfigChannel+0x7f4>
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	fa93 f3a3 	rbit	r3, r3
 8009a54:	61bb      	str	r3, [r7, #24]
  return result;
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8009a60:	2320      	movs	r3, #32
 8009a62:	e003      	b.n	8009a6c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	fab3 f383 	clz	r3, r3
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	f003 031f 	and.w	r3, r3, #31
 8009a72:	2101      	movs	r1, #1
 8009a74:	fa01 f303 	lsl.w	r3, r1, r3
 8009a78:	ea42 0103 	orr.w	r1, r2, r3
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10d      	bne.n	8009aa4 <HAL_ADC_ConfigChannel+0x820>
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	0e9b      	lsrs	r3, r3, #26
 8009a8e:	3301      	adds	r3, #1
 8009a90:	f003 021f 	and.w	r2, r3, #31
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	3b1e      	subs	r3, #30
 8009a9c:	051b      	lsls	r3, r3, #20
 8009a9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009aa2:	e01b      	b.n	8009adc <HAL_ADC_ConfigChannel+0x858>
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	fa93 f3a3 	rbit	r3, r3
 8009ab0:	60fb      	str	r3, [r7, #12]
  return result;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8009abc:	2320      	movs	r3, #32
 8009abe:	e003      	b.n	8009ac8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	fab3 f383 	clz	r3, r3
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	3301      	adds	r3, #1
 8009aca:	f003 021f 	and.w	r2, r3, #31
 8009ace:	4613      	mov	r3, r2
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3b1e      	subs	r3, #30
 8009ad6:	051b      	lsls	r3, r3, #20
 8009ad8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009adc:	430b      	orrs	r3, r1
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	6892      	ldr	r2, [r2, #8]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	f7ff f8d2 	bl	8008c8c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f280 80d7 	bge.w	8009ca0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a06      	ldr	r2, [pc, #24]	; (8009b10 <HAL_ADC_ConfigChannel+0x88c>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d004      	beq.n	8009b06 <HAL_ADC_ConfigChannel+0x882>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a04      	ldr	r2, [pc, #16]	; (8009b14 <HAL_ADC_ConfigChannel+0x890>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d10a      	bne.n	8009b1c <HAL_ADC_ConfigChannel+0x898>
 8009b06:	4b04      	ldr	r3, [pc, #16]	; (8009b18 <HAL_ADC_ConfigChannel+0x894>)
 8009b08:	e009      	b.n	8009b1e <HAL_ADC_ConfigChannel+0x89a>
 8009b0a:	bf00      	nop
 8009b0c:	47ff0000 	.word	0x47ff0000
 8009b10:	40022000 	.word	0x40022000
 8009b14:	40022100 	.word	0x40022100
 8009b18:	40022300 	.word	0x40022300
 8009b1c:	4b65      	ldr	r3, [pc, #404]	; (8009cb4 <HAL_ADC_ConfigChannel+0xa30>)
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe ff88 	bl	8008a34 <LL_ADC_GetCommonPathInternalCh>
 8009b24:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a62      	ldr	r2, [pc, #392]	; (8009cb8 <HAL_ADC_ConfigChannel+0xa34>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d004      	beq.n	8009b3c <HAL_ADC_ConfigChannel+0x8b8>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a61      	ldr	r2, [pc, #388]	; (8009cbc <HAL_ADC_ConfigChannel+0xa38>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d10e      	bne.n	8009b5a <HAL_ADC_ConfigChannel+0x8d6>
 8009b3c:	485e      	ldr	r0, [pc, #376]	; (8009cb8 <HAL_ADC_ConfigChannel+0xa34>)
 8009b3e:	f7ff f95f 	bl	8008e00 <LL_ADC_IsEnabled>
 8009b42:	4604      	mov	r4, r0
 8009b44:	485d      	ldr	r0, [pc, #372]	; (8009cbc <HAL_ADC_ConfigChannel+0xa38>)
 8009b46:	f7ff f95b 	bl	8008e00 <LL_ADC_IsEnabled>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	4323      	orrs	r3, r4
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bf0c      	ite	eq
 8009b52:	2301      	moveq	r3, #1
 8009b54:	2300      	movne	r3, #0
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	e008      	b.n	8009b6c <HAL_ADC_ConfigChannel+0x8e8>
 8009b5a:	4859      	ldr	r0, [pc, #356]	; (8009cc0 <HAL_ADC_ConfigChannel+0xa3c>)
 8009b5c:	f7ff f950 	bl	8008e00 <LL_ADC_IsEnabled>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	bf0c      	ite	eq
 8009b66:	2301      	moveq	r3, #1
 8009b68:	2300      	movne	r3, #0
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 8084 	beq.w	8009c7a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a53      	ldr	r2, [pc, #332]	; (8009cc4 <HAL_ADC_ConfigChannel+0xa40>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d132      	bne.n	8009be2 <HAL_ADC_ConfigChannel+0x95e>
 8009b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d12c      	bne.n	8009be2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a4c      	ldr	r2, [pc, #304]	; (8009cc0 <HAL_ADC_ConfigChannel+0xa3c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	f040 8086 	bne.w	8009ca0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a47      	ldr	r2, [pc, #284]	; (8009cb8 <HAL_ADC_ConfigChannel+0xa34>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d004      	beq.n	8009ba8 <HAL_ADC_ConfigChannel+0x924>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a46      	ldr	r2, [pc, #280]	; (8009cbc <HAL_ADC_ConfigChannel+0xa38>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d101      	bne.n	8009bac <HAL_ADC_ConfigChannel+0x928>
 8009ba8:	4a47      	ldr	r2, [pc, #284]	; (8009cc8 <HAL_ADC_ConfigChannel+0xa44>)
 8009baa:	e000      	b.n	8009bae <HAL_ADC_ConfigChannel+0x92a>
 8009bac:	4a41      	ldr	r2, [pc, #260]	; (8009cb4 <HAL_ADC_ConfigChannel+0xa30>)
 8009bae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	4610      	mov	r0, r2
 8009bba:	f7fe ff28 	bl	8008a0e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009bbe:	4b43      	ldr	r3, [pc, #268]	; (8009ccc <HAL_ADC_ConfigChannel+0xa48>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	099b      	lsrs	r3, r3, #6
 8009bc4:	4a42      	ldr	r2, [pc, #264]	; (8009cd0 <HAL_ADC_ConfigChannel+0xa4c>)
 8009bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bca:	099b      	lsrs	r3, r3, #6
 8009bcc:	3301      	adds	r3, #1
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8009bd2:	e002      	b.n	8009bda <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1f9      	bne.n	8009bd4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009be0:	e05e      	b.n	8009ca0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a3b      	ldr	r2, [pc, #236]	; (8009cd4 <HAL_ADC_ConfigChannel+0xa50>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d120      	bne.n	8009c2e <HAL_ADC_ConfigChannel+0x9aa>
 8009bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d11a      	bne.n	8009c2e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a30      	ldr	r2, [pc, #192]	; (8009cc0 <HAL_ADC_ConfigChannel+0xa3c>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d14e      	bne.n	8009ca0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a2c      	ldr	r2, [pc, #176]	; (8009cb8 <HAL_ADC_ConfigChannel+0xa34>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d004      	beq.n	8009c16 <HAL_ADC_ConfigChannel+0x992>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a2a      	ldr	r2, [pc, #168]	; (8009cbc <HAL_ADC_ConfigChannel+0xa38>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d101      	bne.n	8009c1a <HAL_ADC_ConfigChannel+0x996>
 8009c16:	4a2c      	ldr	r2, [pc, #176]	; (8009cc8 <HAL_ADC_ConfigChannel+0xa44>)
 8009c18:	e000      	b.n	8009c1c <HAL_ADC_ConfigChannel+0x998>
 8009c1a:	4a26      	ldr	r2, [pc, #152]	; (8009cb4 <HAL_ADC_ConfigChannel+0xa30>)
 8009c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	f7fe fef1 	bl	8008a0e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009c2c:	e038      	b.n	8009ca0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a29      	ldr	r2, [pc, #164]	; (8009cd8 <HAL_ADC_ConfigChannel+0xa54>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d133      	bne.n	8009ca0 <HAL_ADC_ConfigChannel+0xa1c>
 8009c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d12d      	bne.n	8009ca0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a1d      	ldr	r2, [pc, #116]	; (8009cc0 <HAL_ADC_ConfigChannel+0xa3c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d128      	bne.n	8009ca0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a19      	ldr	r2, [pc, #100]	; (8009cb8 <HAL_ADC_ConfigChannel+0xa34>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d004      	beq.n	8009c62 <HAL_ADC_ConfigChannel+0x9de>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a17      	ldr	r2, [pc, #92]	; (8009cbc <HAL_ADC_ConfigChannel+0xa38>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d101      	bne.n	8009c66 <HAL_ADC_ConfigChannel+0x9e2>
 8009c62:	4a19      	ldr	r2, [pc, #100]	; (8009cc8 <HAL_ADC_ConfigChannel+0xa44>)
 8009c64:	e000      	b.n	8009c68 <HAL_ADC_ConfigChannel+0x9e4>
 8009c66:	4a13      	ldr	r2, [pc, #76]	; (8009cb4 <HAL_ADC_ConfigChannel+0xa30>)
 8009c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c70:	4619      	mov	r1, r3
 8009c72:	4610      	mov	r0, r2
 8009c74:	f7fe fecb 	bl	8008a0e <LL_ADC_SetCommonPathInternalCh>
 8009c78:	e012      	b.n	8009ca0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c7e:	f043 0220 	orr.w	r2, r3, #32
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8009c8c:	e008      	b.n	8009ca0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c92:	f043 0220 	orr.w	r2, r3, #32
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8009ca8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	37e4      	adds	r7, #228	; 0xe4
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd90      	pop	{r4, r7, pc}
 8009cb4:	58026300 	.word	0x58026300
 8009cb8:	40022000 	.word	0x40022000
 8009cbc:	40022100 	.word	0x40022100
 8009cc0:	58026000 	.word	0x58026000
 8009cc4:	c7520000 	.word	0xc7520000
 8009cc8:	40022300 	.word	0x40022300
 8009ccc:	24000000 	.word	0x24000000
 8009cd0:	053e2d63 	.word	0x053e2d63
 8009cd4:	c3210000 	.word	0xc3210000
 8009cd8:	cb840000 	.word	0xcb840000

08009cdc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a6b      	ldr	r2, [pc, #428]	; (8009e98 <ADC_ConfigureBoostMode+0x1bc>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d004      	beq.n	8009cf8 <ADC_ConfigureBoostMode+0x1c>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a6a      	ldr	r2, [pc, #424]	; (8009e9c <ADC_ConfigureBoostMode+0x1c0>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d109      	bne.n	8009d0c <ADC_ConfigureBoostMode+0x30>
 8009cf8:	4b69      	ldr	r3, [pc, #420]	; (8009ea0 <ADC_ConfigureBoostMode+0x1c4>)
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bf14      	ite	ne
 8009d04:	2301      	movne	r3, #1
 8009d06:	2300      	moveq	r3, #0
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	e008      	b.n	8009d1e <ADC_ConfigureBoostMode+0x42>
 8009d0c:	4b65      	ldr	r3, [pc, #404]	; (8009ea4 <ADC_ConfigureBoostMode+0x1c8>)
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	bf14      	ite	ne
 8009d18:	2301      	movne	r3, #1
 8009d1a:	2300      	moveq	r3, #0
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d01c      	beq.n	8009d5c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8009d22:	f002 fa13 	bl	800c14c <HAL_RCC_GetHCLKFreq>
 8009d26:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d30:	d010      	beq.n	8009d54 <ADC_ConfigureBoostMode+0x78>
 8009d32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d36:	d871      	bhi.n	8009e1c <ADC_ConfigureBoostMode+0x140>
 8009d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d3c:	d002      	beq.n	8009d44 <ADC_ConfigureBoostMode+0x68>
 8009d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d42:	d16b      	bne.n	8009e1c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	0c1b      	lsrs	r3, r3, #16
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d50:	60fb      	str	r3, [r7, #12]
        break;
 8009d52:	e066      	b.n	8009e22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	089b      	lsrs	r3, r3, #2
 8009d58:	60fb      	str	r3, [r7, #12]
        break;
 8009d5a:	e062      	b.n	8009e22 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8009d5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009d60:	f003 f966 	bl	800d030 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d64:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8009d6e:	d051      	beq.n	8009e14 <ADC_ConfigureBoostMode+0x138>
 8009d70:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8009d74:	d854      	bhi.n	8009e20 <ADC_ConfigureBoostMode+0x144>
 8009d76:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8009d7a:	d047      	beq.n	8009e0c <ADC_ConfigureBoostMode+0x130>
 8009d7c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8009d80:	d84e      	bhi.n	8009e20 <ADC_ConfigureBoostMode+0x144>
 8009d82:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8009d86:	d03d      	beq.n	8009e04 <ADC_ConfigureBoostMode+0x128>
 8009d88:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8009d8c:	d848      	bhi.n	8009e20 <ADC_ConfigureBoostMode+0x144>
 8009d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d92:	d033      	beq.n	8009dfc <ADC_ConfigureBoostMode+0x120>
 8009d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d98:	d842      	bhi.n	8009e20 <ADC_ConfigureBoostMode+0x144>
 8009d9a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009d9e:	d029      	beq.n	8009df4 <ADC_ConfigureBoostMode+0x118>
 8009da0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009da4:	d83c      	bhi.n	8009e20 <ADC_ConfigureBoostMode+0x144>
 8009da6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009daa:	d01a      	beq.n	8009de2 <ADC_ConfigureBoostMode+0x106>
 8009dac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009db0:	d836      	bhi.n	8009e20 <ADC_ConfigureBoostMode+0x144>
 8009db2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009db6:	d014      	beq.n	8009de2 <ADC_ConfigureBoostMode+0x106>
 8009db8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009dbc:	d830      	bhi.n	8009e20 <ADC_ConfigureBoostMode+0x144>
 8009dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dc2:	d00e      	beq.n	8009de2 <ADC_ConfigureBoostMode+0x106>
 8009dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dc8:	d82a      	bhi.n	8009e20 <ADC_ConfigureBoostMode+0x144>
 8009dca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009dce:	d008      	beq.n	8009de2 <ADC_ConfigureBoostMode+0x106>
 8009dd0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009dd4:	d824      	bhi.n	8009e20 <ADC_ConfigureBoostMode+0x144>
 8009dd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009dda:	d002      	beq.n	8009de2 <ADC_ConfigureBoostMode+0x106>
 8009ddc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009de0:	d11e      	bne.n	8009e20 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	0c9b      	lsrs	r3, r3, #18
 8009de8:	005b      	lsls	r3, r3, #1
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df0:	60fb      	str	r3, [r7, #12]
        break;
 8009df2:	e016      	b.n	8009e22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	091b      	lsrs	r3, r3, #4
 8009df8:	60fb      	str	r3, [r7, #12]
        break;
 8009dfa:	e012      	b.n	8009e22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	095b      	lsrs	r3, r3, #5
 8009e00:	60fb      	str	r3, [r7, #12]
        break;
 8009e02:	e00e      	b.n	8009e22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	099b      	lsrs	r3, r3, #6
 8009e08:	60fb      	str	r3, [r7, #12]
        break;
 8009e0a:	e00a      	b.n	8009e22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	09db      	lsrs	r3, r3, #7
 8009e10:	60fb      	str	r3, [r7, #12]
        break;
 8009e12:	e006      	b.n	8009e22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	0a1b      	lsrs	r3, r3, #8
 8009e18:	60fb      	str	r3, [r7, #12]
        break;
 8009e1a:	e002      	b.n	8009e22 <ADC_ConfigureBoostMode+0x146>
        break;
 8009e1c:	bf00      	nop
 8009e1e:	e000      	b.n	8009e22 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8009e20:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	085b      	lsrs	r3, r3, #1
 8009e26:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	4a1f      	ldr	r2, [pc, #124]	; (8009ea8 <ADC_ConfigureBoostMode+0x1cc>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d808      	bhi.n	8009e42 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689a      	ldr	r2, [r3, #8]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009e3e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8009e40:	e025      	b.n	8009e8e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	4a19      	ldr	r2, [pc, #100]	; (8009eac <ADC_ConfigureBoostMode+0x1d0>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d80a      	bhi.n	8009e60 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e5c:	609a      	str	r2, [r3, #8]
}
 8009e5e:	e016      	b.n	8009e8e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4a13      	ldr	r2, [pc, #76]	; (8009eb0 <ADC_ConfigureBoostMode+0x1d4>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d80a      	bhi.n	8009e7e <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e7a:	609a      	str	r2, [r3, #8]
}
 8009e7c:	e007      	b.n	8009e8e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689a      	ldr	r2, [r3, #8]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009e8c:	609a      	str	r2, [r3, #8]
}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	40022000 	.word	0x40022000
 8009e9c:	40022100 	.word	0x40022100
 8009ea0:	40022300 	.word	0x40022300
 8009ea4:	58026300 	.word	0x58026300
 8009ea8:	005f5e10 	.word	0x005f5e10
 8009eac:	00bebc20 	.word	0x00bebc20
 8009eb0:	017d7840 	.word	0x017d7840

08009eb4 <LL_ADC_IsEnabled>:
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d101      	bne.n	8009ecc <LL_ADC_IsEnabled+0x18>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e000      	b.n	8009ece <LL_ADC_IsEnabled+0x1a>
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <LL_ADC_REG_IsConversionOngoing>:
{
 8009eda:	b480      	push	{r7}
 8009edc:	b083      	sub	sp, #12
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f003 0304 	and.w	r3, r3, #4
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	d101      	bne.n	8009ef2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e000      	b.n	8009ef4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009f00:	b590      	push	{r4, r7, lr}
 8009f02:	b0a3      	sub	sp, #140	; 0x8c
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d101      	bne.n	8009f1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	e0c1      	b.n	800a0a2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8009f26:	2300      	movs	r3, #0
 8009f28:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a5e      	ldr	r2, [pc, #376]	; (800a0ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d102      	bne.n	8009f3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009f38:	4b5d      	ldr	r3, [pc, #372]	; (800a0b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	e001      	b.n	8009f42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10b      	bne.n	8009f60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f4c:	f043 0220 	orr.w	r2, r3, #32
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e0a0      	b.n	800a0a2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff ffb9 	bl	8009eda <LL_ADC_REG_IsConversionOngoing>
 8009f68:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7ff ffb2 	bl	8009eda <LL_ADC_REG_IsConversionOngoing>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f040 8081 	bne.w	800a080 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d17c      	bne.n	800a080 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a48      	ldr	r2, [pc, #288]	; (800a0ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d004      	beq.n	8009f9a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a46      	ldr	r2, [pc, #280]	; (800a0b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d101      	bne.n	8009f9e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8009f9a:	4b46      	ldr	r3, [pc, #280]	; (800a0b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8009f9c:	e000      	b.n	8009fa0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009f9e:	4b46      	ldr	r3, [pc, #280]	; (800a0b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8009fa0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d039      	beq.n	800a01e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8009faa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a3a      	ldr	r2, [pc, #232]	; (800a0ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d004      	beq.n	8009fd0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a39      	ldr	r2, [pc, #228]	; (800a0b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d10e      	bne.n	8009fee <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8009fd0:	4836      	ldr	r0, [pc, #216]	; (800a0ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009fd2:	f7ff ff6f 	bl	8009eb4 <LL_ADC_IsEnabled>
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4835      	ldr	r0, [pc, #212]	; (800a0b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009fda:	f7ff ff6b 	bl	8009eb4 <LL_ADC_IsEnabled>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	4323      	orrs	r3, r4
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	bf0c      	ite	eq
 8009fe6:	2301      	moveq	r3, #1
 8009fe8:	2300      	movne	r3, #0
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	e008      	b.n	800a000 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009fee:	4833      	ldr	r0, [pc, #204]	; (800a0bc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8009ff0:	f7ff ff60 	bl	8009eb4 <LL_ADC_IsEnabled>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	bf0c      	ite	eq
 8009ffa:	2301      	moveq	r3, #1
 8009ffc:	2300      	movne	r3, #0
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d047      	beq.n	800a094 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	4b2d      	ldr	r3, [pc, #180]	; (800a0c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800a00a:	4013      	ands	r3, r2
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	6811      	ldr	r1, [r2, #0]
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	6892      	ldr	r2, [r2, #8]
 800a014:	430a      	orrs	r2, r1
 800a016:	431a      	orrs	r2, r3
 800a018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a01a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a01c:	e03a      	b.n	800a094 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800a01e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a028:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a1f      	ldr	r2, [pc, #124]	; (800a0ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d004      	beq.n	800a03e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a1d      	ldr	r2, [pc, #116]	; (800a0b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d10e      	bne.n	800a05c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800a03e:	481b      	ldr	r0, [pc, #108]	; (800a0ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800a040:	f7ff ff38 	bl	8009eb4 <LL_ADC_IsEnabled>
 800a044:	4604      	mov	r4, r0
 800a046:	481a      	ldr	r0, [pc, #104]	; (800a0b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800a048:	f7ff ff34 	bl	8009eb4 <LL_ADC_IsEnabled>
 800a04c:	4603      	mov	r3, r0
 800a04e:	4323      	orrs	r3, r4
 800a050:	2b00      	cmp	r3, #0
 800a052:	bf0c      	ite	eq
 800a054:	2301      	moveq	r3, #1
 800a056:	2300      	movne	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	e008      	b.n	800a06e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800a05c:	4817      	ldr	r0, [pc, #92]	; (800a0bc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800a05e:	f7ff ff29 	bl	8009eb4 <LL_ADC_IsEnabled>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	bf0c      	ite	eq
 800a068:	2301      	moveq	r3, #1
 800a06a:	2300      	movne	r3, #0
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d010      	beq.n	800a094 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a074:	689a      	ldr	r2, [r3, #8]
 800a076:	4b12      	ldr	r3, [pc, #72]	; (800a0c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800a078:	4013      	ands	r3, r2
 800a07a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a07c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a07e:	e009      	b.n	800a094 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a084:	f043 0220 	orr.w	r2, r3, #32
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800a092:	e000      	b.n	800a096 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a094:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800a09e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	378c      	adds	r7, #140	; 0x8c
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd90      	pop	{r4, r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	40022000 	.word	0x40022000
 800a0b0:	40022100 	.word	0x40022100
 800a0b4:	40022300 	.word	0x40022300
 800a0b8:	58026300 	.word	0x58026300
 800a0bc:	58026000 	.word	0x58026000
 800a0c0:	fffff0e0 	.word	0xfffff0e0

0800a0c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f003 0307 	and.w	r3, r3, #7
 800a0d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a0d4:	4b0b      	ldr	r3, [pc, #44]	; (800a104 <__NVIC_SetPriorityGrouping+0x40>)
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a0ec:	4b06      	ldr	r3, [pc, #24]	; (800a108 <__NVIC_SetPriorityGrouping+0x44>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a0f2:	4a04      	ldr	r2, [pc, #16]	; (800a104 <__NVIC_SetPriorityGrouping+0x40>)
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	60d3      	str	r3, [r2, #12]
}
 800a0f8:	bf00      	nop
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	e000ed00 	.word	0xe000ed00
 800a108:	05fa0000 	.word	0x05fa0000

0800a10c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a10c:	b480      	push	{r7}
 800a10e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a110:	4b04      	ldr	r3, [pc, #16]	; (800a124 <__NVIC_GetPriorityGrouping+0x18>)
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	0a1b      	lsrs	r3, r3, #8
 800a116:	f003 0307 	and.w	r3, r3, #7
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	e000ed00 	.word	0xe000ed00

0800a128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a136:	2b00      	cmp	r3, #0
 800a138:	db0b      	blt.n	800a152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a13a:	88fb      	ldrh	r3, [r7, #6]
 800a13c:	f003 021f 	and.w	r2, r3, #31
 800a140:	4907      	ldr	r1, [pc, #28]	; (800a160 <__NVIC_EnableIRQ+0x38>)
 800a142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a146:	095b      	lsrs	r3, r3, #5
 800a148:	2001      	movs	r0, #1
 800a14a:	fa00 f202 	lsl.w	r2, r0, r2
 800a14e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a152:	bf00      	nop
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	e000e100 	.word	0xe000e100

0800a164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	6039      	str	r1, [r7, #0]
 800a16e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a174:	2b00      	cmp	r3, #0
 800a176:	db0a      	blt.n	800a18e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	490c      	ldr	r1, [pc, #48]	; (800a1b0 <__NVIC_SetPriority+0x4c>)
 800a17e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a182:	0112      	lsls	r2, r2, #4
 800a184:	b2d2      	uxtb	r2, r2
 800a186:	440b      	add	r3, r1
 800a188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a18c:	e00a      	b.n	800a1a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	b2da      	uxtb	r2, r3
 800a192:	4908      	ldr	r1, [pc, #32]	; (800a1b4 <__NVIC_SetPriority+0x50>)
 800a194:	88fb      	ldrh	r3, [r7, #6]
 800a196:	f003 030f 	and.w	r3, r3, #15
 800a19a:	3b04      	subs	r3, #4
 800a19c:	0112      	lsls	r2, r2, #4
 800a19e:	b2d2      	uxtb	r2, r2
 800a1a0:	440b      	add	r3, r1
 800a1a2:	761a      	strb	r2, [r3, #24]
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	e000e100 	.word	0xe000e100
 800a1b4:	e000ed00 	.word	0xe000ed00

0800a1b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b089      	sub	sp, #36	; 0x24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	f1c3 0307 	rsb	r3, r3, #7
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	bf28      	it	cs
 800a1d6:	2304      	movcs	r3, #4
 800a1d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	2b06      	cmp	r3, #6
 800a1e0:	d902      	bls.n	800a1e8 <NVIC_EncodePriority+0x30>
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	3b03      	subs	r3, #3
 800a1e6:	e000      	b.n	800a1ea <NVIC_EncodePriority+0x32>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f6:	43da      	mvns	r2, r3
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	401a      	ands	r2, r3
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a200:	f04f 31ff 	mov.w	r1, #4294967295
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	fa01 f303 	lsl.w	r3, r1, r3
 800a20a:	43d9      	mvns	r1, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a210:	4313      	orrs	r3, r2
         );
}
 800a212:	4618      	mov	r0, r3
 800a214:	3724      	adds	r7, #36	; 0x24
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
	...

0800a220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a230:	d301      	bcc.n	800a236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a232:	2301      	movs	r3, #1
 800a234:	e00f      	b.n	800a256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a236:	4a0a      	ldr	r2, [pc, #40]	; (800a260 <SysTick_Config+0x40>)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3b01      	subs	r3, #1
 800a23c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a23e:	210f      	movs	r1, #15
 800a240:	f04f 30ff 	mov.w	r0, #4294967295
 800a244:	f7ff ff8e 	bl	800a164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a248:	4b05      	ldr	r3, [pc, #20]	; (800a260 <SysTick_Config+0x40>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a24e:	4b04      	ldr	r3, [pc, #16]	; (800a260 <SysTick_Config+0x40>)
 800a250:	2207      	movs	r2, #7
 800a252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	e000e010 	.word	0xe000e010

0800a264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7ff ff29 	bl	800a0c4 <__NVIC_SetPriorityGrouping>
}
 800a272:	bf00      	nop
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b086      	sub	sp, #24
 800a27e:	af00      	add	r7, sp, #0
 800a280:	4603      	mov	r3, r0
 800a282:	60b9      	str	r1, [r7, #8]
 800a284:	607a      	str	r2, [r7, #4]
 800a286:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a288:	f7ff ff40 	bl	800a10c <__NVIC_GetPriorityGrouping>
 800a28c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	68b9      	ldr	r1, [r7, #8]
 800a292:	6978      	ldr	r0, [r7, #20]
 800a294:	f7ff ff90 	bl	800a1b8 <NVIC_EncodePriority>
 800a298:	4602      	mov	r2, r0
 800a29a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a29e:	4611      	mov	r1, r2
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff ff5f 	bl	800a164 <__NVIC_SetPriority>
}
 800a2a6:	bf00      	nop
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b082      	sub	sp, #8
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a2b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7ff ff33 	bl	800a128 <__NVIC_EnableIRQ>
}
 800a2c2:	bf00      	nop
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7ff ffa4 	bl	800a220 <SysTick_Config>
 800a2d8:	4603      	mov	r3, r0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
	...

0800a2e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e054      	b.n	800a3a0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7f5b      	ldrb	r3, [r3, #29]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d105      	bne.n	800a30c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7f6 fd38 	bl	8000d7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2202      	movs	r2, #2
 800a310:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	791b      	ldrb	r3, [r3, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10c      	bne.n	800a334 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a22      	ldr	r2, [pc, #136]	; (800a3a8 <HAL_CRC_Init+0xc4>)
 800a320:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 0218 	bic.w	r2, r2, #24
 800a330:	609a      	str	r2, [r3, #8]
 800a332:	e00c      	b.n	800a34e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6899      	ldr	r1, [r3, #8]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	461a      	mov	r2, r3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f834 	bl	800a3ac <HAL_CRCEx_Polynomial_Set>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e028      	b.n	800a3a0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	795b      	ldrb	r3, [r3, #5]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d105      	bne.n	800a362 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f04f 32ff 	mov.w	r2, #4294967295
 800a35e:	611a      	str	r2, [r3, #16]
 800a360:	e004      	b.n	800a36c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	6912      	ldr	r2, [r2, #16]
 800a36a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695a      	ldr	r2, [r3, #20]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	699a      	ldr	r2, [r3, #24]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	430a      	orrs	r2, r1
 800a396:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	04c11db7 	.word	0x04c11db7

0800a3ac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a3bc:	231f      	movs	r3, #31
 800a3be:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a3c0:	bf00      	nop
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	1e5a      	subs	r2, r3, #1
 800a3c6:	613a      	str	r2, [r7, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d009      	beq.n	800a3e0 <HAL_CRCEx_Polynomial_Set+0x34>
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f003 031f 	and.w	r3, r3, #31
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3d8:	f003 0301 	and.w	r3, r3, #1
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d0f0      	beq.n	800a3c2 <HAL_CRCEx_Polynomial_Set+0x16>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b18      	cmp	r3, #24
 800a3e4:	d846      	bhi.n	800a474 <HAL_CRCEx_Polynomial_Set+0xc8>
 800a3e6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ec <HAL_CRCEx_Polynomial_Set+0x40>)
 800a3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ec:	0800a47b 	.word	0x0800a47b
 800a3f0:	0800a475 	.word	0x0800a475
 800a3f4:	0800a475 	.word	0x0800a475
 800a3f8:	0800a475 	.word	0x0800a475
 800a3fc:	0800a475 	.word	0x0800a475
 800a400:	0800a475 	.word	0x0800a475
 800a404:	0800a475 	.word	0x0800a475
 800a408:	0800a475 	.word	0x0800a475
 800a40c:	0800a469 	.word	0x0800a469
 800a410:	0800a475 	.word	0x0800a475
 800a414:	0800a475 	.word	0x0800a475
 800a418:	0800a475 	.word	0x0800a475
 800a41c:	0800a475 	.word	0x0800a475
 800a420:	0800a475 	.word	0x0800a475
 800a424:	0800a475 	.word	0x0800a475
 800a428:	0800a475 	.word	0x0800a475
 800a42c:	0800a45d 	.word	0x0800a45d
 800a430:	0800a475 	.word	0x0800a475
 800a434:	0800a475 	.word	0x0800a475
 800a438:	0800a475 	.word	0x0800a475
 800a43c:	0800a475 	.word	0x0800a475
 800a440:	0800a475 	.word	0x0800a475
 800a444:	0800a475 	.word	0x0800a475
 800a448:	0800a475 	.word	0x0800a475
 800a44c:	0800a451 	.word	0x0800a451
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2b06      	cmp	r3, #6
 800a454:	d913      	bls.n	800a47e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a45a:	e010      	b.n	800a47e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	2b07      	cmp	r3, #7
 800a460:	d90f      	bls.n	800a482 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a466:	e00c      	b.n	800a482 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	2b0f      	cmp	r3, #15
 800a46c:	d90b      	bls.n	800a486 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a472:	e008      	b.n	800a486 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	75fb      	strb	r3, [r7, #23]
      break;
 800a478:	e006      	b.n	800a488 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a47a:	bf00      	nop
 800a47c:	e004      	b.n	800a488 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a47e:	bf00      	nop
 800a480:	e002      	b.n	800a488 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a482:	bf00      	nop
 800a484:	e000      	b.n	800a488 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a486:	bf00      	nop
  }
  if (status == HAL_OK)
 800a488:	7dfb      	ldrb	r3, [r7, #23]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10d      	bne.n	800a4aa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f023 0118 	bic.w	r1, r3, #24
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a4aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	371c      	adds	r7, #28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800a4c0:	f7fe fa86 	bl	80089d0 <HAL_GetTick>
 800a4c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e2dc      	b.n	800aa8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d008      	beq.n	800a4ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2280      	movs	r2, #128	; 0x80
 800a4e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e2cd      	b.n	800aa8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a76      	ldr	r2, [pc, #472]	; (800a6cc <HAL_DMA_Abort+0x214>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d04a      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a74      	ldr	r2, [pc, #464]	; (800a6d0 <HAL_DMA_Abort+0x218>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d045      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a73      	ldr	r2, [pc, #460]	; (800a6d4 <HAL_DMA_Abort+0x21c>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d040      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a71      	ldr	r2, [pc, #452]	; (800a6d8 <HAL_DMA_Abort+0x220>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d03b      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a70      	ldr	r2, [pc, #448]	; (800a6dc <HAL_DMA_Abort+0x224>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d036      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a6e      	ldr	r2, [pc, #440]	; (800a6e0 <HAL_DMA_Abort+0x228>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d031      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a6d      	ldr	r2, [pc, #436]	; (800a6e4 <HAL_DMA_Abort+0x22c>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d02c      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a6b      	ldr	r2, [pc, #428]	; (800a6e8 <HAL_DMA_Abort+0x230>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d027      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a6a      	ldr	r2, [pc, #424]	; (800a6ec <HAL_DMA_Abort+0x234>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d022      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a68      	ldr	r2, [pc, #416]	; (800a6f0 <HAL_DMA_Abort+0x238>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d01d      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a67      	ldr	r2, [pc, #412]	; (800a6f4 <HAL_DMA_Abort+0x23c>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d018      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a65      	ldr	r2, [pc, #404]	; (800a6f8 <HAL_DMA_Abort+0x240>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d013      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a64      	ldr	r2, [pc, #400]	; (800a6fc <HAL_DMA_Abort+0x244>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d00e      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a62      	ldr	r2, [pc, #392]	; (800a700 <HAL_DMA_Abort+0x248>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d009      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a61      	ldr	r2, [pc, #388]	; (800a704 <HAL_DMA_Abort+0x24c>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d004      	beq.n	800a58e <HAL_DMA_Abort+0xd6>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a5f      	ldr	r2, [pc, #380]	; (800a708 <HAL_DMA_Abort+0x250>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d101      	bne.n	800a592 <HAL_DMA_Abort+0xda>
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <HAL_DMA_Abort+0xdc>
 800a592:	2300      	movs	r3, #0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d013      	beq.n	800a5c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 021e 	bic.w	r2, r2, #30
 800a5a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	695a      	ldr	r2, [r3, #20]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	617b      	str	r3, [r7, #20]
 800a5be:	e00a      	b.n	800a5d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 020e 	bic.w	r2, r2, #14
 800a5ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a3c      	ldr	r2, [pc, #240]	; (800a6cc <HAL_DMA_Abort+0x214>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d072      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a3a      	ldr	r2, [pc, #232]	; (800a6d0 <HAL_DMA_Abort+0x218>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d06d      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a39      	ldr	r2, [pc, #228]	; (800a6d4 <HAL_DMA_Abort+0x21c>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d068      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a37      	ldr	r2, [pc, #220]	; (800a6d8 <HAL_DMA_Abort+0x220>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d063      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a36      	ldr	r2, [pc, #216]	; (800a6dc <HAL_DMA_Abort+0x224>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d05e      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a34      	ldr	r2, [pc, #208]	; (800a6e0 <HAL_DMA_Abort+0x228>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d059      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a33      	ldr	r2, [pc, #204]	; (800a6e4 <HAL_DMA_Abort+0x22c>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d054      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a31      	ldr	r2, [pc, #196]	; (800a6e8 <HAL_DMA_Abort+0x230>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d04f      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a30      	ldr	r2, [pc, #192]	; (800a6ec <HAL_DMA_Abort+0x234>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d04a      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a2e      	ldr	r2, [pc, #184]	; (800a6f0 <HAL_DMA_Abort+0x238>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d045      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a2d      	ldr	r2, [pc, #180]	; (800a6f4 <HAL_DMA_Abort+0x23c>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d040      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a2b      	ldr	r2, [pc, #172]	; (800a6f8 <HAL_DMA_Abort+0x240>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d03b      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a2a      	ldr	r2, [pc, #168]	; (800a6fc <HAL_DMA_Abort+0x244>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d036      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a28      	ldr	r2, [pc, #160]	; (800a700 <HAL_DMA_Abort+0x248>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d031      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a27      	ldr	r2, [pc, #156]	; (800a704 <HAL_DMA_Abort+0x24c>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d02c      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a25      	ldr	r2, [pc, #148]	; (800a708 <HAL_DMA_Abort+0x250>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d027      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a24      	ldr	r2, [pc, #144]	; (800a70c <HAL_DMA_Abort+0x254>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d022      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a22      	ldr	r2, [pc, #136]	; (800a710 <HAL_DMA_Abort+0x258>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d01d      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a21      	ldr	r2, [pc, #132]	; (800a714 <HAL_DMA_Abort+0x25c>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d018      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a1f      	ldr	r2, [pc, #124]	; (800a718 <HAL_DMA_Abort+0x260>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d013      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a1e      	ldr	r2, [pc, #120]	; (800a71c <HAL_DMA_Abort+0x264>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d00e      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a1c      	ldr	r2, [pc, #112]	; (800a720 <HAL_DMA_Abort+0x268>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d009      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a1b      	ldr	r2, [pc, #108]	; (800a724 <HAL_DMA_Abort+0x26c>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d004      	beq.n	800a6c6 <HAL_DMA_Abort+0x20e>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a19      	ldr	r2, [pc, #100]	; (800a728 <HAL_DMA_Abort+0x270>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d132      	bne.n	800a72c <HAL_DMA_Abort+0x274>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e031      	b.n	800a72e <HAL_DMA_Abort+0x276>
 800a6ca:	bf00      	nop
 800a6cc:	40020010 	.word	0x40020010
 800a6d0:	40020028 	.word	0x40020028
 800a6d4:	40020040 	.word	0x40020040
 800a6d8:	40020058 	.word	0x40020058
 800a6dc:	40020070 	.word	0x40020070
 800a6e0:	40020088 	.word	0x40020088
 800a6e4:	400200a0 	.word	0x400200a0
 800a6e8:	400200b8 	.word	0x400200b8
 800a6ec:	40020410 	.word	0x40020410
 800a6f0:	40020428 	.word	0x40020428
 800a6f4:	40020440 	.word	0x40020440
 800a6f8:	40020458 	.word	0x40020458
 800a6fc:	40020470 	.word	0x40020470
 800a700:	40020488 	.word	0x40020488
 800a704:	400204a0 	.word	0x400204a0
 800a708:	400204b8 	.word	0x400204b8
 800a70c:	58025408 	.word	0x58025408
 800a710:	5802541c 	.word	0x5802541c
 800a714:	58025430 	.word	0x58025430
 800a718:	58025444 	.word	0x58025444
 800a71c:	58025458 	.word	0x58025458
 800a720:	5802546c 	.word	0x5802546c
 800a724:	58025480 	.word	0x58025480
 800a728:	58025494 	.word	0x58025494
 800a72c:	2300      	movs	r3, #0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d007      	beq.n	800a742 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a73c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a740:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a6d      	ldr	r2, [pc, #436]	; (800a8fc <HAL_DMA_Abort+0x444>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d04a      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a6b      	ldr	r2, [pc, #428]	; (800a900 <HAL_DMA_Abort+0x448>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d045      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a6a      	ldr	r2, [pc, #424]	; (800a904 <HAL_DMA_Abort+0x44c>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d040      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a68      	ldr	r2, [pc, #416]	; (800a908 <HAL_DMA_Abort+0x450>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d03b      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a67      	ldr	r2, [pc, #412]	; (800a90c <HAL_DMA_Abort+0x454>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d036      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a65      	ldr	r2, [pc, #404]	; (800a910 <HAL_DMA_Abort+0x458>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d031      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a64      	ldr	r2, [pc, #400]	; (800a914 <HAL_DMA_Abort+0x45c>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d02c      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a62      	ldr	r2, [pc, #392]	; (800a918 <HAL_DMA_Abort+0x460>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d027      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a61      	ldr	r2, [pc, #388]	; (800a91c <HAL_DMA_Abort+0x464>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d022      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a5f      	ldr	r2, [pc, #380]	; (800a920 <HAL_DMA_Abort+0x468>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d01d      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a5e      	ldr	r2, [pc, #376]	; (800a924 <HAL_DMA_Abort+0x46c>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d018      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a5c      	ldr	r2, [pc, #368]	; (800a928 <HAL_DMA_Abort+0x470>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d013      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a5b      	ldr	r2, [pc, #364]	; (800a92c <HAL_DMA_Abort+0x474>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d00e      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a59      	ldr	r2, [pc, #356]	; (800a930 <HAL_DMA_Abort+0x478>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d009      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a58      	ldr	r2, [pc, #352]	; (800a934 <HAL_DMA_Abort+0x47c>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d004      	beq.n	800a7e2 <HAL_DMA_Abort+0x32a>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a56      	ldr	r2, [pc, #344]	; (800a938 <HAL_DMA_Abort+0x480>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d108      	bne.n	800a7f4 <HAL_DMA_Abort+0x33c>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f022 0201 	bic.w	r2, r2, #1
 800a7f0:	601a      	str	r2, [r3, #0]
 800a7f2:	e007      	b.n	800a804 <HAL_DMA_Abort+0x34c>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f022 0201 	bic.w	r2, r2, #1
 800a802:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a804:	e013      	b.n	800a82e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a806:	f7fe f8e3 	bl	80089d0 <HAL_GetTick>
 800a80a:	4602      	mov	r2, r0
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	2b05      	cmp	r3, #5
 800a812:	d90c      	bls.n	800a82e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2220      	movs	r2, #32
 800a818:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2203      	movs	r2, #3
 800a81e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	e12d      	b.n	800aa8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1e5      	bne.n	800a806 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a2f      	ldr	r2, [pc, #188]	; (800a8fc <HAL_DMA_Abort+0x444>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d04a      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a2d      	ldr	r2, [pc, #180]	; (800a900 <HAL_DMA_Abort+0x448>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d045      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a2c      	ldr	r2, [pc, #176]	; (800a904 <HAL_DMA_Abort+0x44c>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d040      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a2a      	ldr	r2, [pc, #168]	; (800a908 <HAL_DMA_Abort+0x450>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d03b      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a29      	ldr	r2, [pc, #164]	; (800a90c <HAL_DMA_Abort+0x454>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d036      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a27      	ldr	r2, [pc, #156]	; (800a910 <HAL_DMA_Abort+0x458>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d031      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a26      	ldr	r2, [pc, #152]	; (800a914 <HAL_DMA_Abort+0x45c>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d02c      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a24      	ldr	r2, [pc, #144]	; (800a918 <HAL_DMA_Abort+0x460>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d027      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a23      	ldr	r2, [pc, #140]	; (800a91c <HAL_DMA_Abort+0x464>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d022      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a21      	ldr	r2, [pc, #132]	; (800a920 <HAL_DMA_Abort+0x468>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d01d      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a20      	ldr	r2, [pc, #128]	; (800a924 <HAL_DMA_Abort+0x46c>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d018      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a1e      	ldr	r2, [pc, #120]	; (800a928 <HAL_DMA_Abort+0x470>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d013      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a1d      	ldr	r2, [pc, #116]	; (800a92c <HAL_DMA_Abort+0x474>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d00e      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1b      	ldr	r2, [pc, #108]	; (800a930 <HAL_DMA_Abort+0x478>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d009      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1a      	ldr	r2, [pc, #104]	; (800a934 <HAL_DMA_Abort+0x47c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d004      	beq.n	800a8da <HAL_DMA_Abort+0x422>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a18      	ldr	r2, [pc, #96]	; (800a938 <HAL_DMA_Abort+0x480>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d101      	bne.n	800a8de <HAL_DMA_Abort+0x426>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e000      	b.n	800a8e0 <HAL_DMA_Abort+0x428>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d02b      	beq.n	800a93c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ee:	f003 031f 	and.w	r3, r3, #31
 800a8f2:	223f      	movs	r2, #63	; 0x3f
 800a8f4:	409a      	lsls	r2, r3
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	609a      	str	r2, [r3, #8]
 800a8fa:	e02a      	b.n	800a952 <HAL_DMA_Abort+0x49a>
 800a8fc:	40020010 	.word	0x40020010
 800a900:	40020028 	.word	0x40020028
 800a904:	40020040 	.word	0x40020040
 800a908:	40020058 	.word	0x40020058
 800a90c:	40020070 	.word	0x40020070
 800a910:	40020088 	.word	0x40020088
 800a914:	400200a0 	.word	0x400200a0
 800a918:	400200b8 	.word	0x400200b8
 800a91c:	40020410 	.word	0x40020410
 800a920:	40020428 	.word	0x40020428
 800a924:	40020440 	.word	0x40020440
 800a928:	40020458 	.word	0x40020458
 800a92c:	40020470 	.word	0x40020470
 800a930:	40020488 	.word	0x40020488
 800a934:	400204a0 	.word	0x400204a0
 800a938:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a940:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a946:	f003 031f 	and.w	r3, r3, #31
 800a94a:	2201      	movs	r2, #1
 800a94c:	409a      	lsls	r2, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a4f      	ldr	r2, [pc, #316]	; (800aa94 <HAL_DMA_Abort+0x5dc>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d072      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a4d      	ldr	r2, [pc, #308]	; (800aa98 <HAL_DMA_Abort+0x5e0>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d06d      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a4c      	ldr	r2, [pc, #304]	; (800aa9c <HAL_DMA_Abort+0x5e4>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d068      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a4a      	ldr	r2, [pc, #296]	; (800aaa0 <HAL_DMA_Abort+0x5e8>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d063      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a49      	ldr	r2, [pc, #292]	; (800aaa4 <HAL_DMA_Abort+0x5ec>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d05e      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a47      	ldr	r2, [pc, #284]	; (800aaa8 <HAL_DMA_Abort+0x5f0>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d059      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a46      	ldr	r2, [pc, #280]	; (800aaac <HAL_DMA_Abort+0x5f4>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d054      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a44      	ldr	r2, [pc, #272]	; (800aab0 <HAL_DMA_Abort+0x5f8>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d04f      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a43      	ldr	r2, [pc, #268]	; (800aab4 <HAL_DMA_Abort+0x5fc>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d04a      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a41      	ldr	r2, [pc, #260]	; (800aab8 <HAL_DMA_Abort+0x600>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d045      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a40      	ldr	r2, [pc, #256]	; (800aabc <HAL_DMA_Abort+0x604>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d040      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a3e      	ldr	r2, [pc, #248]	; (800aac0 <HAL_DMA_Abort+0x608>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d03b      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a3d      	ldr	r2, [pc, #244]	; (800aac4 <HAL_DMA_Abort+0x60c>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d036      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a3b      	ldr	r2, [pc, #236]	; (800aac8 <HAL_DMA_Abort+0x610>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d031      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a3a      	ldr	r2, [pc, #232]	; (800aacc <HAL_DMA_Abort+0x614>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d02c      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a38      	ldr	r2, [pc, #224]	; (800aad0 <HAL_DMA_Abort+0x618>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d027      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a37      	ldr	r2, [pc, #220]	; (800aad4 <HAL_DMA_Abort+0x61c>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d022      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a35      	ldr	r2, [pc, #212]	; (800aad8 <HAL_DMA_Abort+0x620>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d01d      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a34      	ldr	r2, [pc, #208]	; (800aadc <HAL_DMA_Abort+0x624>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d018      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a32      	ldr	r2, [pc, #200]	; (800aae0 <HAL_DMA_Abort+0x628>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d013      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a31      	ldr	r2, [pc, #196]	; (800aae4 <HAL_DMA_Abort+0x62c>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d00e      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a2f      	ldr	r2, [pc, #188]	; (800aae8 <HAL_DMA_Abort+0x630>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d009      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a2e      	ldr	r2, [pc, #184]	; (800aaec <HAL_DMA_Abort+0x634>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d004      	beq.n	800aa42 <HAL_DMA_Abort+0x58a>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a2c      	ldr	r2, [pc, #176]	; (800aaf0 <HAL_DMA_Abort+0x638>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d101      	bne.n	800aa46 <HAL_DMA_Abort+0x58e>
 800aa42:	2301      	movs	r3, #1
 800aa44:	e000      	b.n	800aa48 <HAL_DMA_Abort+0x590>
 800aa46:	2300      	movs	r3, #0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d015      	beq.n	800aa78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800aa54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00c      	beq.n	800aa78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800aa76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	40020010 	.word	0x40020010
 800aa98:	40020028 	.word	0x40020028
 800aa9c:	40020040 	.word	0x40020040
 800aaa0:	40020058 	.word	0x40020058
 800aaa4:	40020070 	.word	0x40020070
 800aaa8:	40020088 	.word	0x40020088
 800aaac:	400200a0 	.word	0x400200a0
 800aab0:	400200b8 	.word	0x400200b8
 800aab4:	40020410 	.word	0x40020410
 800aab8:	40020428 	.word	0x40020428
 800aabc:	40020440 	.word	0x40020440
 800aac0:	40020458 	.word	0x40020458
 800aac4:	40020470 	.word	0x40020470
 800aac8:	40020488 	.word	0x40020488
 800aacc:	400204a0 	.word	0x400204a0
 800aad0:	400204b8 	.word	0x400204b8
 800aad4:	58025408 	.word	0x58025408
 800aad8:	5802541c 	.word	0x5802541c
 800aadc:	58025430 	.word	0x58025430
 800aae0:	58025444 	.word	0x58025444
 800aae4:	58025458 	.word	0x58025458
 800aae8:	5802546c 	.word	0x5802546c
 800aaec:	58025480 	.word	0x58025480
 800aaf0:	58025494 	.word	0x58025494

0800aaf4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e205      	b.n	800af12 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d004      	beq.n	800ab1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2280      	movs	r2, #128	; 0x80
 800ab16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e1fa      	b.n	800af12 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a8c      	ldr	r2, [pc, #560]	; (800ad54 <HAL_DMA_Abort_IT+0x260>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d04a      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a8b      	ldr	r2, [pc, #556]	; (800ad58 <HAL_DMA_Abort_IT+0x264>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d045      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a89      	ldr	r2, [pc, #548]	; (800ad5c <HAL_DMA_Abort_IT+0x268>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d040      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a88      	ldr	r2, [pc, #544]	; (800ad60 <HAL_DMA_Abort_IT+0x26c>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d03b      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a86      	ldr	r2, [pc, #536]	; (800ad64 <HAL_DMA_Abort_IT+0x270>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d036      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a85      	ldr	r2, [pc, #532]	; (800ad68 <HAL_DMA_Abort_IT+0x274>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d031      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a83      	ldr	r2, [pc, #524]	; (800ad6c <HAL_DMA_Abort_IT+0x278>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d02c      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a82      	ldr	r2, [pc, #520]	; (800ad70 <HAL_DMA_Abort_IT+0x27c>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d027      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a80      	ldr	r2, [pc, #512]	; (800ad74 <HAL_DMA_Abort_IT+0x280>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d022      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a7f      	ldr	r2, [pc, #508]	; (800ad78 <HAL_DMA_Abort_IT+0x284>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d01d      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a7d      	ldr	r2, [pc, #500]	; (800ad7c <HAL_DMA_Abort_IT+0x288>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d018      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a7c      	ldr	r2, [pc, #496]	; (800ad80 <HAL_DMA_Abort_IT+0x28c>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d013      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a7a      	ldr	r2, [pc, #488]	; (800ad84 <HAL_DMA_Abort_IT+0x290>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d00e      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a79      	ldr	r2, [pc, #484]	; (800ad88 <HAL_DMA_Abort_IT+0x294>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d009      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a77      	ldr	r2, [pc, #476]	; (800ad8c <HAL_DMA_Abort_IT+0x298>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d004      	beq.n	800abbc <HAL_DMA_Abort_IT+0xc8>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a76      	ldr	r2, [pc, #472]	; (800ad90 <HAL_DMA_Abort_IT+0x29c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d101      	bne.n	800abc0 <HAL_DMA_Abort_IT+0xcc>
 800abbc:	2301      	movs	r3, #1
 800abbe:	e000      	b.n	800abc2 <HAL_DMA_Abort_IT+0xce>
 800abc0:	2300      	movs	r3, #0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d065      	beq.n	800ac92 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2204      	movs	r2, #4
 800abca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a60      	ldr	r2, [pc, #384]	; (800ad54 <HAL_DMA_Abort_IT+0x260>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d04a      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a5e      	ldr	r2, [pc, #376]	; (800ad58 <HAL_DMA_Abort_IT+0x264>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d045      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a5d      	ldr	r2, [pc, #372]	; (800ad5c <HAL_DMA_Abort_IT+0x268>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d040      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a5b      	ldr	r2, [pc, #364]	; (800ad60 <HAL_DMA_Abort_IT+0x26c>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d03b      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a5a      	ldr	r2, [pc, #360]	; (800ad64 <HAL_DMA_Abort_IT+0x270>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d036      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a58      	ldr	r2, [pc, #352]	; (800ad68 <HAL_DMA_Abort_IT+0x274>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d031      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a57      	ldr	r2, [pc, #348]	; (800ad6c <HAL_DMA_Abort_IT+0x278>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d02c      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a55      	ldr	r2, [pc, #340]	; (800ad70 <HAL_DMA_Abort_IT+0x27c>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d027      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a54      	ldr	r2, [pc, #336]	; (800ad74 <HAL_DMA_Abort_IT+0x280>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d022      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a52      	ldr	r2, [pc, #328]	; (800ad78 <HAL_DMA_Abort_IT+0x284>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d01d      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a51      	ldr	r2, [pc, #324]	; (800ad7c <HAL_DMA_Abort_IT+0x288>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d018      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a4f      	ldr	r2, [pc, #316]	; (800ad80 <HAL_DMA_Abort_IT+0x28c>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d013      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a4e      	ldr	r2, [pc, #312]	; (800ad84 <HAL_DMA_Abort_IT+0x290>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00e      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a4c      	ldr	r2, [pc, #304]	; (800ad88 <HAL_DMA_Abort_IT+0x294>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d009      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a4b      	ldr	r2, [pc, #300]	; (800ad8c <HAL_DMA_Abort_IT+0x298>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d004      	beq.n	800ac6e <HAL_DMA_Abort_IT+0x17a>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a49      	ldr	r2, [pc, #292]	; (800ad90 <HAL_DMA_Abort_IT+0x29c>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d108      	bne.n	800ac80 <HAL_DMA_Abort_IT+0x18c>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 0201 	bic.w	r2, r2, #1
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	e147      	b.n	800af10 <HAL_DMA_Abort_IT+0x41c>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f022 0201 	bic.w	r2, r2, #1
 800ac8e:	601a      	str	r2, [r3, #0]
 800ac90:	e13e      	b.n	800af10 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f022 020e 	bic.w	r2, r2, #14
 800aca0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a2b      	ldr	r2, [pc, #172]	; (800ad54 <HAL_DMA_Abort_IT+0x260>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d04a      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a29      	ldr	r2, [pc, #164]	; (800ad58 <HAL_DMA_Abort_IT+0x264>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d045      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a28      	ldr	r2, [pc, #160]	; (800ad5c <HAL_DMA_Abort_IT+0x268>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d040      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a26      	ldr	r2, [pc, #152]	; (800ad60 <HAL_DMA_Abort_IT+0x26c>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d03b      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a25      	ldr	r2, [pc, #148]	; (800ad64 <HAL_DMA_Abort_IT+0x270>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d036      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a23      	ldr	r2, [pc, #140]	; (800ad68 <HAL_DMA_Abort_IT+0x274>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d031      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a22      	ldr	r2, [pc, #136]	; (800ad6c <HAL_DMA_Abort_IT+0x278>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d02c      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a20      	ldr	r2, [pc, #128]	; (800ad70 <HAL_DMA_Abort_IT+0x27c>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d027      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a1f      	ldr	r2, [pc, #124]	; (800ad74 <HAL_DMA_Abort_IT+0x280>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d022      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a1d      	ldr	r2, [pc, #116]	; (800ad78 <HAL_DMA_Abort_IT+0x284>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d01d      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a1c      	ldr	r2, [pc, #112]	; (800ad7c <HAL_DMA_Abort_IT+0x288>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d018      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a1a      	ldr	r2, [pc, #104]	; (800ad80 <HAL_DMA_Abort_IT+0x28c>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d013      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a19      	ldr	r2, [pc, #100]	; (800ad84 <HAL_DMA_Abort_IT+0x290>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d00e      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a17      	ldr	r2, [pc, #92]	; (800ad88 <HAL_DMA_Abort_IT+0x294>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d009      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a16      	ldr	r2, [pc, #88]	; (800ad8c <HAL_DMA_Abort_IT+0x298>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d004      	beq.n	800ad42 <HAL_DMA_Abort_IT+0x24e>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a14      	ldr	r2, [pc, #80]	; (800ad90 <HAL_DMA_Abort_IT+0x29c>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d128      	bne.n	800ad94 <HAL_DMA_Abort_IT+0x2a0>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0201 	bic.w	r2, r2, #1
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	e027      	b.n	800ada4 <HAL_DMA_Abort_IT+0x2b0>
 800ad54:	40020010 	.word	0x40020010
 800ad58:	40020028 	.word	0x40020028
 800ad5c:	40020040 	.word	0x40020040
 800ad60:	40020058 	.word	0x40020058
 800ad64:	40020070 	.word	0x40020070
 800ad68:	40020088 	.word	0x40020088
 800ad6c:	400200a0 	.word	0x400200a0
 800ad70:	400200b8 	.word	0x400200b8
 800ad74:	40020410 	.word	0x40020410
 800ad78:	40020428 	.word	0x40020428
 800ad7c:	40020440 	.word	0x40020440
 800ad80:	40020458 	.word	0x40020458
 800ad84:	40020470 	.word	0x40020470
 800ad88:	40020488 	.word	0x40020488
 800ad8c:	400204a0 	.word	0x400204a0
 800ad90:	400204b8 	.word	0x400204b8
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f022 0201 	bic.w	r2, r2, #1
 800ada2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a5c      	ldr	r2, [pc, #368]	; (800af1c <HAL_DMA_Abort_IT+0x428>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d072      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a5b      	ldr	r2, [pc, #364]	; (800af20 <HAL_DMA_Abort_IT+0x42c>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d06d      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a59      	ldr	r2, [pc, #356]	; (800af24 <HAL_DMA_Abort_IT+0x430>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d068      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a58      	ldr	r2, [pc, #352]	; (800af28 <HAL_DMA_Abort_IT+0x434>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d063      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a56      	ldr	r2, [pc, #344]	; (800af2c <HAL_DMA_Abort_IT+0x438>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d05e      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a55      	ldr	r2, [pc, #340]	; (800af30 <HAL_DMA_Abort_IT+0x43c>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d059      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a53      	ldr	r2, [pc, #332]	; (800af34 <HAL_DMA_Abort_IT+0x440>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d054      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a52      	ldr	r2, [pc, #328]	; (800af38 <HAL_DMA_Abort_IT+0x444>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d04f      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a50      	ldr	r2, [pc, #320]	; (800af3c <HAL_DMA_Abort_IT+0x448>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d04a      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a4f      	ldr	r2, [pc, #316]	; (800af40 <HAL_DMA_Abort_IT+0x44c>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d045      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a4d      	ldr	r2, [pc, #308]	; (800af44 <HAL_DMA_Abort_IT+0x450>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d040      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a4c      	ldr	r2, [pc, #304]	; (800af48 <HAL_DMA_Abort_IT+0x454>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d03b      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a4a      	ldr	r2, [pc, #296]	; (800af4c <HAL_DMA_Abort_IT+0x458>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d036      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a49      	ldr	r2, [pc, #292]	; (800af50 <HAL_DMA_Abort_IT+0x45c>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d031      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a47      	ldr	r2, [pc, #284]	; (800af54 <HAL_DMA_Abort_IT+0x460>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d02c      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a46      	ldr	r2, [pc, #280]	; (800af58 <HAL_DMA_Abort_IT+0x464>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d027      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a44      	ldr	r2, [pc, #272]	; (800af5c <HAL_DMA_Abort_IT+0x468>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d022      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a43      	ldr	r2, [pc, #268]	; (800af60 <HAL_DMA_Abort_IT+0x46c>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d01d      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a41      	ldr	r2, [pc, #260]	; (800af64 <HAL_DMA_Abort_IT+0x470>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d018      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a40      	ldr	r2, [pc, #256]	; (800af68 <HAL_DMA_Abort_IT+0x474>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d013      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a3e      	ldr	r2, [pc, #248]	; (800af6c <HAL_DMA_Abort_IT+0x478>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d00e      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a3d      	ldr	r2, [pc, #244]	; (800af70 <HAL_DMA_Abort_IT+0x47c>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d009      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a3b      	ldr	r2, [pc, #236]	; (800af74 <HAL_DMA_Abort_IT+0x480>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d004      	beq.n	800ae94 <HAL_DMA_Abort_IT+0x3a0>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a3a      	ldr	r2, [pc, #232]	; (800af78 <HAL_DMA_Abort_IT+0x484>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d101      	bne.n	800ae98 <HAL_DMA_Abort_IT+0x3a4>
 800ae94:	2301      	movs	r3, #1
 800ae96:	e000      	b.n	800ae9a <HAL_DMA_Abort_IT+0x3a6>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d028      	beq.n	800aef0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aeac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeb2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeb8:	f003 031f 	and.w	r3, r3, #31
 800aebc:	2201      	movs	r2, #1
 800aebe:	409a      	lsls	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800aecc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00c      	beq.n	800aef0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aee4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800aeee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af04:	2b00      	cmp	r3, #0
 800af06:	d003      	beq.n	800af10 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	40020010 	.word	0x40020010
 800af20:	40020028 	.word	0x40020028
 800af24:	40020040 	.word	0x40020040
 800af28:	40020058 	.word	0x40020058
 800af2c:	40020070 	.word	0x40020070
 800af30:	40020088 	.word	0x40020088
 800af34:	400200a0 	.word	0x400200a0
 800af38:	400200b8 	.word	0x400200b8
 800af3c:	40020410 	.word	0x40020410
 800af40:	40020428 	.word	0x40020428
 800af44:	40020440 	.word	0x40020440
 800af48:	40020458 	.word	0x40020458
 800af4c:	40020470 	.word	0x40020470
 800af50:	40020488 	.word	0x40020488
 800af54:	400204a0 	.word	0x400204a0
 800af58:	400204b8 	.word	0x400204b8
 800af5c:	58025408 	.word	0x58025408
 800af60:	5802541c 	.word	0x5802541c
 800af64:	58025430 	.word	0x58025430
 800af68:	58025444 	.word	0x58025444
 800af6c:	58025458 	.word	0x58025458
 800af70:	5802546c 	.word	0x5802546c
 800af74:	58025480 	.word	0x58025480
 800af78:	58025494 	.word	0x58025494

0800af7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b089      	sub	sp, #36	; 0x24
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800af86:	2300      	movs	r3, #0
 800af88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800af8a:	4b86      	ldr	r3, [pc, #536]	; (800b1a4 <HAL_GPIO_Init+0x228>)
 800af8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800af8e:	e18c      	b.n	800b2aa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	2101      	movs	r1, #1
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	fa01 f303 	lsl.w	r3, r1, r3
 800af9c:	4013      	ands	r3, r2
 800af9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 817e 	beq.w	800b2a4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	f003 0303 	and.w	r3, r3, #3
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d005      	beq.n	800afc0 <HAL_GPIO_Init+0x44>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	f003 0303 	and.w	r3, r3, #3
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d130      	bne.n	800b022 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	005b      	lsls	r3, r3, #1
 800afca:	2203      	movs	r2, #3
 800afcc:	fa02 f303 	lsl.w	r3, r2, r3
 800afd0:	43db      	mvns	r3, r3
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	4013      	ands	r3, r2
 800afd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	68da      	ldr	r2, [r3, #12]
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	fa02 f303 	lsl.w	r3, r2, r3
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	69ba      	ldr	r2, [r7, #24]
 800afee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aff6:	2201      	movs	r2, #1
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	fa02 f303 	lsl.w	r3, r2, r3
 800affe:	43db      	mvns	r3, r3
 800b000:	69ba      	ldr	r2, [r7, #24]
 800b002:	4013      	ands	r3, r2
 800b004:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	091b      	lsrs	r3, r3, #4
 800b00c:	f003 0201 	and.w	r2, r3, #1
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	fa02 f303 	lsl.w	r3, r2, r3
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	4313      	orrs	r3, r2
 800b01a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	69ba      	ldr	r2, [r7, #24]
 800b020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	f003 0303 	and.w	r3, r3, #3
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d017      	beq.n	800b05e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	2203      	movs	r2, #3
 800b03a:	fa02 f303 	lsl.w	r3, r2, r3
 800b03e:	43db      	mvns	r3, r3
 800b040:	69ba      	ldr	r2, [r7, #24]
 800b042:	4013      	ands	r3, r2
 800b044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	689a      	ldr	r2, [r3, #8]
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	005b      	lsls	r3, r3, #1
 800b04e:	fa02 f303 	lsl.w	r3, r2, r3
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	4313      	orrs	r3, r2
 800b056:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	f003 0303 	and.w	r3, r3, #3
 800b066:	2b02      	cmp	r3, #2
 800b068:	d123      	bne.n	800b0b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	08da      	lsrs	r2, r3, #3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	3208      	adds	r2, #8
 800b072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	f003 0307 	and.w	r3, r3, #7
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	220f      	movs	r2, #15
 800b082:	fa02 f303 	lsl.w	r3, r2, r3
 800b086:	43db      	mvns	r3, r3
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	4013      	ands	r3, r2
 800b08c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	691a      	ldr	r2, [r3, #16]
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	f003 0307 	and.w	r3, r3, #7
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	fa02 f303 	lsl.w	r3, r2, r3
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	08da      	lsrs	r2, r3, #3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3208      	adds	r2, #8
 800b0ac:	69b9      	ldr	r1, [r7, #24]
 800b0ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	2203      	movs	r2, #3
 800b0be:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c2:	43db      	mvns	r3, r3
 800b0c4:	69ba      	ldr	r2, [r7, #24]
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f003 0203 	and.w	r2, r3, #3
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0da:	69ba      	ldr	r2, [r7, #24]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f000 80d8 	beq.w	800b2a4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0f4:	4b2c      	ldr	r3, [pc, #176]	; (800b1a8 <HAL_GPIO_Init+0x22c>)
 800b0f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0fa:	4a2b      	ldr	r2, [pc, #172]	; (800b1a8 <HAL_GPIO_Init+0x22c>)
 800b0fc:	f043 0302 	orr.w	r3, r3, #2
 800b100:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b104:	4b28      	ldr	r3, [pc, #160]	; (800b1a8 <HAL_GPIO_Init+0x22c>)
 800b106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b10a:	f003 0302 	and.w	r3, r3, #2
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b112:	4a26      	ldr	r2, [pc, #152]	; (800b1ac <HAL_GPIO_Init+0x230>)
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	089b      	lsrs	r3, r3, #2
 800b118:	3302      	adds	r3, #2
 800b11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b11e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	f003 0303 	and.w	r3, r3, #3
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	220f      	movs	r2, #15
 800b12a:	fa02 f303 	lsl.w	r3, r2, r3
 800b12e:	43db      	mvns	r3, r3
 800b130:	69ba      	ldr	r2, [r7, #24]
 800b132:	4013      	ands	r3, r2
 800b134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a1d      	ldr	r2, [pc, #116]	; (800b1b0 <HAL_GPIO_Init+0x234>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d04a      	beq.n	800b1d4 <HAL_GPIO_Init+0x258>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a1c      	ldr	r2, [pc, #112]	; (800b1b4 <HAL_GPIO_Init+0x238>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d02b      	beq.n	800b19e <HAL_GPIO_Init+0x222>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a1b      	ldr	r2, [pc, #108]	; (800b1b8 <HAL_GPIO_Init+0x23c>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d025      	beq.n	800b19a <HAL_GPIO_Init+0x21e>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a1a      	ldr	r2, [pc, #104]	; (800b1bc <HAL_GPIO_Init+0x240>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d01f      	beq.n	800b196 <HAL_GPIO_Init+0x21a>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a19      	ldr	r2, [pc, #100]	; (800b1c0 <HAL_GPIO_Init+0x244>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d019      	beq.n	800b192 <HAL_GPIO_Init+0x216>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a18      	ldr	r2, [pc, #96]	; (800b1c4 <HAL_GPIO_Init+0x248>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d013      	beq.n	800b18e <HAL_GPIO_Init+0x212>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a17      	ldr	r2, [pc, #92]	; (800b1c8 <HAL_GPIO_Init+0x24c>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d00d      	beq.n	800b18a <HAL_GPIO_Init+0x20e>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a16      	ldr	r2, [pc, #88]	; (800b1cc <HAL_GPIO_Init+0x250>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d007      	beq.n	800b186 <HAL_GPIO_Init+0x20a>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a15      	ldr	r2, [pc, #84]	; (800b1d0 <HAL_GPIO_Init+0x254>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d101      	bne.n	800b182 <HAL_GPIO_Init+0x206>
 800b17e:	2309      	movs	r3, #9
 800b180:	e029      	b.n	800b1d6 <HAL_GPIO_Init+0x25a>
 800b182:	230a      	movs	r3, #10
 800b184:	e027      	b.n	800b1d6 <HAL_GPIO_Init+0x25a>
 800b186:	2307      	movs	r3, #7
 800b188:	e025      	b.n	800b1d6 <HAL_GPIO_Init+0x25a>
 800b18a:	2306      	movs	r3, #6
 800b18c:	e023      	b.n	800b1d6 <HAL_GPIO_Init+0x25a>
 800b18e:	2305      	movs	r3, #5
 800b190:	e021      	b.n	800b1d6 <HAL_GPIO_Init+0x25a>
 800b192:	2304      	movs	r3, #4
 800b194:	e01f      	b.n	800b1d6 <HAL_GPIO_Init+0x25a>
 800b196:	2303      	movs	r3, #3
 800b198:	e01d      	b.n	800b1d6 <HAL_GPIO_Init+0x25a>
 800b19a:	2302      	movs	r3, #2
 800b19c:	e01b      	b.n	800b1d6 <HAL_GPIO_Init+0x25a>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e019      	b.n	800b1d6 <HAL_GPIO_Init+0x25a>
 800b1a2:	bf00      	nop
 800b1a4:	58000080 	.word	0x58000080
 800b1a8:	58024400 	.word	0x58024400
 800b1ac:	58000400 	.word	0x58000400
 800b1b0:	58020000 	.word	0x58020000
 800b1b4:	58020400 	.word	0x58020400
 800b1b8:	58020800 	.word	0x58020800
 800b1bc:	58020c00 	.word	0x58020c00
 800b1c0:	58021000 	.word	0x58021000
 800b1c4:	58021400 	.word	0x58021400
 800b1c8:	58021800 	.word	0x58021800
 800b1cc:	58021c00 	.word	0x58021c00
 800b1d0:	58022400 	.word	0x58022400
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	69fa      	ldr	r2, [r7, #28]
 800b1d8:	f002 0203 	and.w	r2, r2, #3
 800b1dc:	0092      	lsls	r2, r2, #2
 800b1de:	4093      	lsls	r3, r2
 800b1e0:	69ba      	ldr	r2, [r7, #24]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b1e6:	4938      	ldr	r1, [pc, #224]	; (800b2c8 <HAL_GPIO_Init+0x34c>)
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	089b      	lsrs	r3, r3, #2
 800b1ec:	3302      	adds	r3, #2
 800b1ee:	69ba      	ldr	r2, [r7, #24]
 800b1f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b1f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	43db      	mvns	r3, r3
 800b200:	69ba      	ldr	r2, [r7, #24]
 800b202:	4013      	ands	r3, r2
 800b204:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b212:	69ba      	ldr	r2, [r7, #24]
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	4313      	orrs	r3, r2
 800b218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b21a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	43db      	mvns	r3, r3
 800b22e:	69ba      	ldr	r2, [r7, #24]
 800b230:	4013      	ands	r3, r2
 800b232:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d003      	beq.n	800b248 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b240:	69ba      	ldr	r2, [r7, #24]
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	4313      	orrs	r3, r2
 800b246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	43db      	mvns	r3, r3
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	4013      	ands	r3, r2
 800b25e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b26c:	69ba      	ldr	r2, [r7, #24]
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	4313      	orrs	r3, r2
 800b272:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	43db      	mvns	r3, r3
 800b284:	69ba      	ldr	r2, [r7, #24]
 800b286:	4013      	ands	r3, r2
 800b288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d003      	beq.n	800b29e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b296:	69ba      	ldr	r2, [r7, #24]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f47f ae6b 	bne.w	800af90 <HAL_GPIO_Init+0x14>
  }
}
 800b2ba:	bf00      	nop
 800b2bc:	bf00      	nop
 800b2be:	3724      	adds	r7, #36	; 0x24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr
 800b2c8:	58000400 	.word	0x58000400

0800b2cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	807b      	strh	r3, [r7, #2]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b2dc:	787b      	ldrb	r3, [r7, #1]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b2e2:	887a      	ldrh	r2, [r7, #2]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b2e8:	e003      	b.n	800b2f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b2ea:	887b      	ldrh	r3, [r7, #2]
 800b2ec:	041a      	lsls	r2, r3, #16
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	619a      	str	r2, [r3, #24]
}
 800b2f2:	bf00      	nop
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
	...

0800b300 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b308:	4b19      	ldr	r3, [pc, #100]	; (800b370 <HAL_PWREx_ConfigSupply+0x70>)
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f003 0304 	and.w	r3, r3, #4
 800b310:	2b04      	cmp	r3, #4
 800b312:	d00a      	beq.n	800b32a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b314:	4b16      	ldr	r3, [pc, #88]	; (800b370 <HAL_PWREx_ConfigSupply+0x70>)
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	f003 0307 	and.w	r3, r3, #7
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d001      	beq.n	800b326 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e01f      	b.n	800b366 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	e01d      	b.n	800b366 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b32a:	4b11      	ldr	r3, [pc, #68]	; (800b370 <HAL_PWREx_ConfigSupply+0x70>)
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	f023 0207 	bic.w	r2, r3, #7
 800b332:	490f      	ldr	r1, [pc, #60]	; (800b370 <HAL_PWREx_ConfigSupply+0x70>)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4313      	orrs	r3, r2
 800b338:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b33a:	f7fd fb49 	bl	80089d0 <HAL_GetTick>
 800b33e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b340:	e009      	b.n	800b356 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b342:	f7fd fb45 	bl	80089d0 <HAL_GetTick>
 800b346:	4602      	mov	r2, r0
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b350:	d901      	bls.n	800b356 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e007      	b.n	800b366 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b356:	4b06      	ldr	r3, [pc, #24]	; (800b370 <HAL_PWREx_ConfigSupply+0x70>)
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b35e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b362:	d1ee      	bne.n	800b342 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	58024800 	.word	0x58024800

0800b374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b08c      	sub	sp, #48	; 0x30
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e397      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f000 8087 	beq.w	800b4a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b394:	4b9e      	ldr	r3, [pc, #632]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b39c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b39e:	4b9c      	ldr	r3, [pc, #624]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a6:	2b10      	cmp	r3, #16
 800b3a8:	d007      	beq.n	800b3ba <HAL_RCC_OscConfig+0x46>
 800b3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ac:	2b18      	cmp	r3, #24
 800b3ae:	d110      	bne.n	800b3d2 <HAL_RCC_OscConfig+0x5e>
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	f003 0303 	and.w	r3, r3, #3
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d10b      	bne.n	800b3d2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3ba:	4b95      	ldr	r3, [pc, #596]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d06c      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x12c>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d168      	bne.n	800b4a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e371      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3da:	d106      	bne.n	800b3ea <HAL_RCC_OscConfig+0x76>
 800b3dc:	4b8c      	ldr	r3, [pc, #560]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a8b      	ldr	r2, [pc, #556]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b3e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	e02e      	b.n	800b448 <HAL_RCC_OscConfig+0xd4>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10c      	bne.n	800b40c <HAL_RCC_OscConfig+0x98>
 800b3f2:	4b87      	ldr	r3, [pc, #540]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a86      	ldr	r2, [pc, #536]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b3f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3fc:	6013      	str	r3, [r2, #0]
 800b3fe:	4b84      	ldr	r3, [pc, #528]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a83      	ldr	r2, [pc, #524]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b408:	6013      	str	r3, [r2, #0]
 800b40a:	e01d      	b.n	800b448 <HAL_RCC_OscConfig+0xd4>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b414:	d10c      	bne.n	800b430 <HAL_RCC_OscConfig+0xbc>
 800b416:	4b7e      	ldr	r3, [pc, #504]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a7d      	ldr	r2, [pc, #500]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b41c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	4b7b      	ldr	r3, [pc, #492]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a7a      	ldr	r2, [pc, #488]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	e00b      	b.n	800b448 <HAL_RCC_OscConfig+0xd4>
 800b430:	4b77      	ldr	r3, [pc, #476]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a76      	ldr	r2, [pc, #472]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b43a:	6013      	str	r3, [r2, #0]
 800b43c:	4b74      	ldr	r3, [pc, #464]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a73      	ldr	r2, [pc, #460]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d013      	beq.n	800b478 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b450:	f7fd fabe 	bl	80089d0 <HAL_GetTick>
 800b454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b456:	e008      	b.n	800b46a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b458:	f7fd faba 	bl	80089d0 <HAL_GetTick>
 800b45c:	4602      	mov	r2, r0
 800b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	2b64      	cmp	r3, #100	; 0x64
 800b464:	d901      	bls.n	800b46a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b466:	2303      	movs	r3, #3
 800b468:	e325      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b46a:	4b69      	ldr	r3, [pc, #420]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0f0      	beq.n	800b458 <HAL_RCC_OscConfig+0xe4>
 800b476:	e014      	b.n	800b4a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b478:	f7fd faaa 	bl	80089d0 <HAL_GetTick>
 800b47c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b47e:	e008      	b.n	800b492 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b480:	f7fd faa6 	bl	80089d0 <HAL_GetTick>
 800b484:	4602      	mov	r2, r0
 800b486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	2b64      	cmp	r3, #100	; 0x64
 800b48c:	d901      	bls.n	800b492 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b48e:	2303      	movs	r3, #3
 800b490:	e311      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b492:	4b5f      	ldr	r3, [pc, #380]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1f0      	bne.n	800b480 <HAL_RCC_OscConfig+0x10c>
 800b49e:	e000      	b.n	800b4a2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 0302 	and.w	r3, r3, #2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 808a 	beq.w	800b5c4 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b4b0:	4b57      	ldr	r3, [pc, #348]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b4b2:	691b      	ldr	r3, [r3, #16]
 800b4b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b4ba:	4b55      	ldr	r3, [pc, #340]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4be:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b4c0:	6a3b      	ldr	r3, [r7, #32]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d007      	beq.n	800b4d6 <HAL_RCC_OscConfig+0x162>
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	2b18      	cmp	r3, #24
 800b4ca:	d137      	bne.n	800b53c <HAL_RCC_OscConfig+0x1c8>
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d132      	bne.n	800b53c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4d6:	4b4e      	ldr	r3, [pc, #312]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 0304 	and.w	r3, r3, #4
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d005      	beq.n	800b4ee <HAL_RCC_OscConfig+0x17a>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d101      	bne.n	800b4ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e2e3      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b4ee:	4b48      	ldr	r3, [pc, #288]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f023 0219 	bic.w	r2, r3, #25
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	4945      	ldr	r1, [pc, #276]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b500:	f7fd fa66 	bl	80089d0 <HAL_GetTick>
 800b504:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b506:	e008      	b.n	800b51a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b508:	f7fd fa62 	bl	80089d0 <HAL_GetTick>
 800b50c:	4602      	mov	r2, r0
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	2b02      	cmp	r3, #2
 800b514:	d901      	bls.n	800b51a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e2cd      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b51a:	4b3d      	ldr	r3, [pc, #244]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0304 	and.w	r3, r3, #4
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0f0      	beq.n	800b508 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b526:	4b3a      	ldr	r3, [pc, #232]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	061b      	lsls	r3, r3, #24
 800b534:	4936      	ldr	r1, [pc, #216]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b536:	4313      	orrs	r3, r2
 800b538:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b53a:	e043      	b.n	800b5c4 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d026      	beq.n	800b592 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b544:	4b32      	ldr	r3, [pc, #200]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f023 0219 	bic.w	r2, r3, #25
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	492f      	ldr	r1, [pc, #188]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b552:	4313      	orrs	r3, r2
 800b554:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b556:	f7fd fa3b 	bl	80089d0 <HAL_GetTick>
 800b55a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b55c:	e008      	b.n	800b570 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b55e:	f7fd fa37 	bl	80089d0 <HAL_GetTick>
 800b562:	4602      	mov	r2, r0
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d901      	bls.n	800b570 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b56c:	2303      	movs	r3, #3
 800b56e:	e2a2      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b570:	4b27      	ldr	r3, [pc, #156]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d0f0      	beq.n	800b55e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b57c:	4b24      	ldr	r3, [pc, #144]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	061b      	lsls	r3, r3, #24
 800b58a:	4921      	ldr	r1, [pc, #132]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	604b      	str	r3, [r1, #4]
 800b590:	e018      	b.n	800b5c4 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b592:	4b1f      	ldr	r3, [pc, #124]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a1e      	ldr	r2, [pc, #120]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b598:	f023 0301 	bic.w	r3, r3, #1
 800b59c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b59e:	f7fd fa17 	bl	80089d0 <HAL_GetTick>
 800b5a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b5a4:	e008      	b.n	800b5b8 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b5a6:	f7fd fa13 	bl	80089d0 <HAL_GetTick>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	d901      	bls.n	800b5b8 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e27e      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b5b8:	4b15      	ldr	r3, [pc, #84]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 0304 	and.w	r3, r3, #4
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1f0      	bne.n	800b5a6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0310 	and.w	r3, r3, #16
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d06d      	beq.n	800b6ac <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5d0:	4b0f      	ldr	r3, [pc, #60]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5d8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b5da:	4b0d      	ldr	r3, [pc, #52]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5de:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	2b08      	cmp	r3, #8
 800b5e4:	d007      	beq.n	800b5f6 <HAL_RCC_OscConfig+0x282>
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	2b18      	cmp	r3, #24
 800b5ea:	d11e      	bne.n	800b62a <HAL_RCC_OscConfig+0x2b6>
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f003 0303 	and.w	r3, r3, #3
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d119      	bne.n	800b62a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b5f6:	4b06      	ldr	r3, [pc, #24]	; (800b610 <HAL_RCC_OscConfig+0x29c>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d008      	beq.n	800b614 <HAL_RCC_OscConfig+0x2a0>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	69db      	ldr	r3, [r3, #28]
 800b606:	2b80      	cmp	r3, #128	; 0x80
 800b608:	d004      	beq.n	800b614 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e253      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
 800b60e:	bf00      	nop
 800b610:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b614:	4ba3      	ldr	r3, [pc, #652]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a1b      	ldr	r3, [r3, #32]
 800b620:	061b      	lsls	r3, r3, #24
 800b622:	49a0      	ldr	r1, [pc, #640]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b624:	4313      	orrs	r3, r2
 800b626:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b628:	e040      	b.n	800b6ac <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d023      	beq.n	800b67a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b632:	4b9c      	ldr	r3, [pc, #624]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a9b      	ldr	r2, [pc, #620]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b63c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b63e:	f7fd f9c7 	bl	80089d0 <HAL_GetTick>
 800b642:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b644:	e008      	b.n	800b658 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b646:	f7fd f9c3 	bl	80089d0 <HAL_GetTick>
 800b64a:	4602      	mov	r2, r0
 800b64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	2b02      	cmp	r3, #2
 800b652:	d901      	bls.n	800b658 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800b654:	2303      	movs	r3, #3
 800b656:	e22e      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b658:	4b92      	ldr	r3, [pc, #584]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b660:	2b00      	cmp	r3, #0
 800b662:	d0f0      	beq.n	800b646 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b664:	4b8f      	ldr	r3, [pc, #572]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a1b      	ldr	r3, [r3, #32]
 800b670:	061b      	lsls	r3, r3, #24
 800b672:	498c      	ldr	r1, [pc, #560]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b674:	4313      	orrs	r3, r2
 800b676:	60cb      	str	r3, [r1, #12]
 800b678:	e018      	b.n	800b6ac <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b67a:	4b8a      	ldr	r3, [pc, #552]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a89      	ldr	r2, [pc, #548]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b686:	f7fd f9a3 	bl	80089d0 <HAL_GetTick>
 800b68a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b68c:	e008      	b.n	800b6a0 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b68e:	f7fd f99f 	bl	80089d0 <HAL_GetTick>
 800b692:	4602      	mov	r2, r0
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d901      	bls.n	800b6a0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b69c:	2303      	movs	r3, #3
 800b69e:	e20a      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b6a0:	4b80      	ldr	r3, [pc, #512]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1f0      	bne.n	800b68e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 0308 	and.w	r3, r3, #8
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d036      	beq.n	800b726 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d019      	beq.n	800b6f4 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6c0:	4b78      	ldr	r3, [pc, #480]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b6c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6c4:	4a77      	ldr	r2, [pc, #476]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b6c6:	f043 0301 	orr.w	r3, r3, #1
 800b6ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6cc:	f7fd f980 	bl	80089d0 <HAL_GetTick>
 800b6d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b6d2:	e008      	b.n	800b6e6 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b6d4:	f7fd f97c 	bl	80089d0 <HAL_GetTick>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d901      	bls.n	800b6e6 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	e1e7      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b6e6:	4b6f      	ldr	r3, [pc, #444]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b6e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ea:	f003 0302 	and.w	r3, r3, #2
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d0f0      	beq.n	800b6d4 <HAL_RCC_OscConfig+0x360>
 800b6f2:	e018      	b.n	800b726 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b6f4:	4b6b      	ldr	r3, [pc, #428]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b6f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6f8:	4a6a      	ldr	r2, [pc, #424]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b6fa:	f023 0301 	bic.w	r3, r3, #1
 800b6fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b700:	f7fd f966 	bl	80089d0 <HAL_GetTick>
 800b704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b706:	e008      	b.n	800b71a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b708:	f7fd f962 	bl	80089d0 <HAL_GetTick>
 800b70c:	4602      	mov	r2, r0
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	2b02      	cmp	r3, #2
 800b714:	d901      	bls.n	800b71a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800b716:	2303      	movs	r3, #3
 800b718:	e1cd      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b71a:	4b62      	ldr	r3, [pc, #392]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b71c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b71e:	f003 0302 	and.w	r3, r3, #2
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1f0      	bne.n	800b708 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0320 	and.w	r3, r3, #32
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d036      	beq.n	800b7a0 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d019      	beq.n	800b76e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b73a:	4b5a      	ldr	r3, [pc, #360]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a59      	ldr	r2, [pc, #356]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b744:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b746:	f7fd f943 	bl	80089d0 <HAL_GetTick>
 800b74a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b74c:	e008      	b.n	800b760 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b74e:	f7fd f93f 	bl	80089d0 <HAL_GetTick>
 800b752:	4602      	mov	r2, r0
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d901      	bls.n	800b760 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800b75c:	2303      	movs	r3, #3
 800b75e:	e1aa      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b760:	4b50      	ldr	r3, [pc, #320]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d0f0      	beq.n	800b74e <HAL_RCC_OscConfig+0x3da>
 800b76c:	e018      	b.n	800b7a0 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b76e:	4b4d      	ldr	r3, [pc, #308]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a4c      	ldr	r2, [pc, #304]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b778:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b77a:	f7fd f929 	bl	80089d0 <HAL_GetTick>
 800b77e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b780:	e008      	b.n	800b794 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b782:	f7fd f925 	bl	80089d0 <HAL_GetTick>
 800b786:	4602      	mov	r2, r0
 800b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78a:	1ad3      	subs	r3, r2, r3
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d901      	bls.n	800b794 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800b790:	2303      	movs	r3, #3
 800b792:	e190      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b794:	4b43      	ldr	r3, [pc, #268]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1f0      	bne.n	800b782 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 0304 	and.w	r3, r3, #4
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 8085 	beq.w	800b8b8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b7ae:	4b3e      	ldr	r3, [pc, #248]	; (800b8a8 <HAL_RCC_OscConfig+0x534>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a3d      	ldr	r2, [pc, #244]	; (800b8a8 <HAL_RCC_OscConfig+0x534>)
 800b7b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7ba:	f7fd f909 	bl	80089d0 <HAL_GetTick>
 800b7be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7c0:	e008      	b.n	800b7d4 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b7c2:	f7fd f905 	bl	80089d0 <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	2b64      	cmp	r3, #100	; 0x64
 800b7ce:	d901      	bls.n	800b7d4 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e170      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7d4:	4b34      	ldr	r3, [pc, #208]	; (800b8a8 <HAL_RCC_OscConfig+0x534>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d0f0      	beq.n	800b7c2 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d106      	bne.n	800b7f6 <HAL_RCC_OscConfig+0x482>
 800b7e8:	4b2e      	ldr	r3, [pc, #184]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ec:	4a2d      	ldr	r2, [pc, #180]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b7ee:	f043 0301 	orr.w	r3, r3, #1
 800b7f2:	6713      	str	r3, [r2, #112]	; 0x70
 800b7f4:	e02d      	b.n	800b852 <HAL_RCC_OscConfig+0x4de>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10c      	bne.n	800b818 <HAL_RCC_OscConfig+0x4a4>
 800b7fe:	4b29      	ldr	r3, [pc, #164]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b802:	4a28      	ldr	r2, [pc, #160]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b804:	f023 0301 	bic.w	r3, r3, #1
 800b808:	6713      	str	r3, [r2, #112]	; 0x70
 800b80a:	4b26      	ldr	r3, [pc, #152]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b80e:	4a25      	ldr	r2, [pc, #148]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b810:	f023 0304 	bic.w	r3, r3, #4
 800b814:	6713      	str	r3, [r2, #112]	; 0x70
 800b816:	e01c      	b.n	800b852 <HAL_RCC_OscConfig+0x4de>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	2b05      	cmp	r3, #5
 800b81e:	d10c      	bne.n	800b83a <HAL_RCC_OscConfig+0x4c6>
 800b820:	4b20      	ldr	r3, [pc, #128]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b824:	4a1f      	ldr	r2, [pc, #124]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b826:	f043 0304 	orr.w	r3, r3, #4
 800b82a:	6713      	str	r3, [r2, #112]	; 0x70
 800b82c:	4b1d      	ldr	r3, [pc, #116]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b830:	4a1c      	ldr	r2, [pc, #112]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b832:	f043 0301 	orr.w	r3, r3, #1
 800b836:	6713      	str	r3, [r2, #112]	; 0x70
 800b838:	e00b      	b.n	800b852 <HAL_RCC_OscConfig+0x4de>
 800b83a:	4b1a      	ldr	r3, [pc, #104]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b83e:	4a19      	ldr	r2, [pc, #100]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b840:	f023 0301 	bic.w	r3, r3, #1
 800b844:	6713      	str	r3, [r2, #112]	; 0x70
 800b846:	4b17      	ldr	r3, [pc, #92]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b84a:	4a16      	ldr	r2, [pc, #88]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b84c:	f023 0304 	bic.w	r3, r3, #4
 800b850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d015      	beq.n	800b886 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b85a:	f7fd f8b9 	bl	80089d0 <HAL_GetTick>
 800b85e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b860:	e00a      	b.n	800b878 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b862:	f7fd f8b5 	bl	80089d0 <HAL_GetTick>
 800b866:	4602      	mov	r2, r0
 800b868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b870:	4293      	cmp	r3, r2
 800b872:	d901      	bls.n	800b878 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800b874:	2303      	movs	r3, #3
 800b876:	e11e      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b878:	4b0a      	ldr	r3, [pc, #40]	; (800b8a4 <HAL_RCC_OscConfig+0x530>)
 800b87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b87c:	f003 0302 	and.w	r3, r3, #2
 800b880:	2b00      	cmp	r3, #0
 800b882:	d0ee      	beq.n	800b862 <HAL_RCC_OscConfig+0x4ee>
 800b884:	e018      	b.n	800b8b8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b886:	f7fd f8a3 	bl	80089d0 <HAL_GetTick>
 800b88a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b88c:	e00e      	b.n	800b8ac <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b88e:	f7fd f89f 	bl	80089d0 <HAL_GetTick>
 800b892:	4602      	mov	r2, r0
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	f241 3288 	movw	r2, #5000	; 0x1388
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d905      	bls.n	800b8ac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e108      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
 800b8a4:	58024400 	.word	0x58024400
 800b8a8:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b8ac:	4b84      	ldr	r3, [pc, #528]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b8ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8b0:	f003 0302 	and.w	r3, r3, #2
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1ea      	bne.n	800b88e <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 80f9 	beq.w	800bab4 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b8c2:	4b7f      	ldr	r3, [pc, #508]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8ca:	2b18      	cmp	r3, #24
 800b8cc:	f000 80b4 	beq.w	800ba38 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	f040 8095 	bne.w	800ba04 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8da:	4b79      	ldr	r3, [pc, #484]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a78      	ldr	r2, [pc, #480]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b8e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8e6:	f7fd f873 	bl	80089d0 <HAL_GetTick>
 800b8ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8ec:	e008      	b.n	800b900 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b8ee:	f7fd f86f 	bl	80089d0 <HAL_GetTick>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d901      	bls.n	800b900 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e0da      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b900:	4b6f      	ldr	r3, [pc, #444]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1f0      	bne.n	800b8ee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b90c:	4b6c      	ldr	r3, [pc, #432]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b90e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b910:	4b6c      	ldr	r3, [pc, #432]	; (800bac4 <HAL_RCC_OscConfig+0x750>)
 800b912:	4013      	ands	r3, r2
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b91c:	0112      	lsls	r2, r2, #4
 800b91e:	430a      	orrs	r2, r1
 800b920:	4967      	ldr	r1, [pc, #412]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b922:	4313      	orrs	r3, r2
 800b924:	628b      	str	r3, [r1, #40]	; 0x28
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b92a:	3b01      	subs	r3, #1
 800b92c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b934:	3b01      	subs	r3, #1
 800b936:	025b      	lsls	r3, r3, #9
 800b938:	b29b      	uxth	r3, r3
 800b93a:	431a      	orrs	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b940:	3b01      	subs	r3, #1
 800b942:	041b      	lsls	r3, r3, #16
 800b944:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b948:	431a      	orrs	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b94e:	3b01      	subs	r3, #1
 800b950:	061b      	lsls	r3, r3, #24
 800b952:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b956:	495a      	ldr	r1, [pc, #360]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b958:	4313      	orrs	r3, r2
 800b95a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b95c:	4b58      	ldr	r3, [pc, #352]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b960:	4a57      	ldr	r2, [pc, #348]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b962:	f023 0301 	bic.w	r3, r3, #1
 800b966:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b968:	4b55      	ldr	r3, [pc, #340]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b96a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b96c:	4b56      	ldr	r3, [pc, #344]	; (800bac8 <HAL_RCC_OscConfig+0x754>)
 800b96e:	4013      	ands	r3, r2
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b974:	00d2      	lsls	r2, r2, #3
 800b976:	4952      	ldr	r1, [pc, #328]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b978:	4313      	orrs	r3, r2
 800b97a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b97c:	4b50      	ldr	r3, [pc, #320]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b980:	f023 020c 	bic.w	r2, r3, #12
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b988:	494d      	ldr	r1, [pc, #308]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b98a:	4313      	orrs	r3, r2
 800b98c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b98e:	4b4c      	ldr	r3, [pc, #304]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b992:	f023 0202 	bic.w	r2, r3, #2
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b99a:	4949      	ldr	r1, [pc, #292]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b99c:	4313      	orrs	r3, r2
 800b99e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b9a0:	4b47      	ldr	r3, [pc, #284]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a4:	4a46      	ldr	r2, [pc, #280]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b9a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9ac:	4b44      	ldr	r3, [pc, #272]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b0:	4a43      	ldr	r2, [pc, #268]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b9b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b9b8:	4b41      	ldr	r3, [pc, #260]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9bc:	4a40      	ldr	r2, [pc, #256]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b9be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b9c4:	4b3e      	ldr	r3, [pc, #248]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	4a3d      	ldr	r2, [pc, #244]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b9ca:	f043 0301 	orr.w	r3, r3, #1
 800b9ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b9d0:	4b3b      	ldr	r3, [pc, #236]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a3a      	ldr	r2, [pc, #232]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b9d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9dc:	f7fc fff8 	bl	80089d0 <HAL_GetTick>
 800b9e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9e2:	e008      	b.n	800b9f6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9e4:	f7fc fff4 	bl	80089d0 <HAL_GetTick>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d901      	bls.n	800b9f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	e05f      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9f6:	4b32      	ldr	r3, [pc, #200]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d0f0      	beq.n	800b9e4 <HAL_RCC_OscConfig+0x670>
 800ba02:	e057      	b.n	800bab4 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba04:	4b2e      	ldr	r3, [pc, #184]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a2d      	ldr	r2, [pc, #180]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800ba0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba10:	f7fc ffde 	bl	80089d0 <HAL_GetTick>
 800ba14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba16:	e008      	b.n	800ba2a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba18:	f7fc ffda 	bl	80089d0 <HAL_GetTick>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d901      	bls.n	800ba2a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ba26:	2303      	movs	r3, #3
 800ba28:	e045      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba2a:	4b25      	ldr	r3, [pc, #148]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1f0      	bne.n	800ba18 <HAL_RCC_OscConfig+0x6a4>
 800ba36:	e03d      	b.n	800bab4 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ba38:	4b21      	ldr	r3, [pc, #132]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800ba3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ba3e:	4b20      	ldr	r3, [pc, #128]	; (800bac0 <HAL_RCC_OscConfig+0x74c>)
 800ba40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba42:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d031      	beq.n	800bab0 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	f003 0203 	and.w	r2, r3, #3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d12a      	bne.n	800bab0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	091b      	lsrs	r3, r3, #4
 800ba5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d122      	bne.n	800bab0 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba74:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d11a      	bne.n	800bab0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	0a5b      	lsrs	r3, r3, #9
 800ba7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba86:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d111      	bne.n	800bab0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	0c1b      	lsrs	r3, r3, #16
 800ba90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba98:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d108      	bne.n	800bab0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	0e1b      	lsrs	r3, r3, #24
 800baa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baaa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800baac:	429a      	cmp	r2, r3
 800baae:	d001      	beq.n	800bab4 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e000      	b.n	800bab6 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3730      	adds	r7, #48	; 0x30
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	58024400 	.word	0x58024400
 800bac4:	fffffc0c 	.word	0xfffffc0c
 800bac8:	ffff0007 	.word	0xffff0007

0800bacc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b086      	sub	sp, #24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d101      	bne.n	800bae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800badc:	2301      	movs	r3, #1
 800bade:	e19c      	b.n	800be1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bae0:	4b8a      	ldr	r3, [pc, #552]	; (800bd0c <HAL_RCC_ClockConfig+0x240>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f003 030f 	and.w	r3, r3, #15
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	429a      	cmp	r2, r3
 800baec:	d910      	bls.n	800bb10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800baee:	4b87      	ldr	r3, [pc, #540]	; (800bd0c <HAL_RCC_ClockConfig+0x240>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f023 020f 	bic.w	r2, r3, #15
 800baf6:	4985      	ldr	r1, [pc, #532]	; (800bd0c <HAL_RCC_ClockConfig+0x240>)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bafe:	4b83      	ldr	r3, [pc, #524]	; (800bd0c <HAL_RCC_ClockConfig+0x240>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f003 030f 	and.w	r3, r3, #15
 800bb06:	683a      	ldr	r2, [r7, #0]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d001      	beq.n	800bb10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e184      	b.n	800be1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 0304 	and.w	r3, r3, #4
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d010      	beq.n	800bb3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	691a      	ldr	r2, [r3, #16]
 800bb20:	4b7b      	ldr	r3, [pc, #492]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d908      	bls.n	800bb3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bb2c:	4b78      	ldr	r3, [pc, #480]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bb2e:	699b      	ldr	r3, [r3, #24]
 800bb30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	4975      	ldr	r1, [pc, #468]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 0308 	and.w	r3, r3, #8
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d010      	beq.n	800bb6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	695a      	ldr	r2, [r3, #20]
 800bb4e:	4b70      	ldr	r3, [pc, #448]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d908      	bls.n	800bb6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bb5a:	4b6d      	ldr	r3, [pc, #436]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bb5c:	69db      	ldr	r3, [r3, #28]
 800bb5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	496a      	ldr	r1, [pc, #424]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 0310 	and.w	r3, r3, #16
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d010      	beq.n	800bb9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	699a      	ldr	r2, [r3, #24]
 800bb7c:	4b64      	ldr	r3, [pc, #400]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d908      	bls.n	800bb9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bb88:	4b61      	ldr	r3, [pc, #388]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bb8a:	69db      	ldr	r3, [r3, #28]
 800bb8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	699b      	ldr	r3, [r3, #24]
 800bb94:	495e      	ldr	r1, [pc, #376]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bb96:	4313      	orrs	r3, r2
 800bb98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0320 	and.w	r3, r3, #32
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d010      	beq.n	800bbc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	69da      	ldr	r2, [r3, #28]
 800bbaa:	4b59      	ldr	r3, [pc, #356]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d908      	bls.n	800bbc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bbb6:	4b56      	ldr	r3, [pc, #344]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	4953      	ldr	r1, [pc, #332]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 0302 	and.w	r3, r3, #2
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d010      	beq.n	800bbf6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68da      	ldr	r2, [r3, #12]
 800bbd8:	4b4d      	ldr	r3, [pc, #308]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	f003 030f 	and.w	r3, r3, #15
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d908      	bls.n	800bbf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbe4:	4b4a      	ldr	r3, [pc, #296]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	f023 020f 	bic.w	r2, r3, #15
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	4947      	ldr	r1, [pc, #284]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 0301 	and.w	r3, r3, #1
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d055      	beq.n	800bcae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bc02:	4b43      	ldr	r3, [pc, #268]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bc04:	699b      	ldr	r3, [r3, #24]
 800bc06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	4940      	ldr	r1, [pc, #256]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bc10:	4313      	orrs	r3, r2
 800bc12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d107      	bne.n	800bc2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bc1c:	4b3c      	ldr	r3, [pc, #240]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d121      	bne.n	800bc6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e0f6      	b.n	800be1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d107      	bne.n	800bc44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc34:	4b36      	ldr	r3, [pc, #216]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d115      	bne.n	800bc6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	e0ea      	b.n	800be1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d107      	bne.n	800bc5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bc4c:	4b30      	ldr	r3, [pc, #192]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d109      	bne.n	800bc6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e0de      	b.n	800be1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc5c:	4b2c      	ldr	r3, [pc, #176]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 0304 	and.w	r3, r3, #4
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d101      	bne.n	800bc6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e0d6      	b.n	800be1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bc6c:	4b28      	ldr	r3, [pc, #160]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	f023 0207 	bic.w	r2, r3, #7
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	4925      	ldr	r1, [pc, #148]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc7e:	f7fc fea7 	bl	80089d0 <HAL_GetTick>
 800bc82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc84:	e00a      	b.n	800bc9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc86:	f7fc fea3 	bl	80089d0 <HAL_GetTick>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	1ad3      	subs	r3, r2, r3
 800bc90:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d901      	bls.n	800bc9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	e0be      	b.n	800be1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc9c:	4b1c      	ldr	r3, [pc, #112]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	00db      	lsls	r3, r3, #3
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d1eb      	bne.n	800bc86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 0302 	and.w	r3, r3, #2
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d010      	beq.n	800bcdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68da      	ldr	r2, [r3, #12]
 800bcbe:	4b14      	ldr	r3, [pc, #80]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	f003 030f 	and.w	r3, r3, #15
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d208      	bcs.n	800bcdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bcca:	4b11      	ldr	r3, [pc, #68]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	f023 020f 	bic.w	r2, r3, #15
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	490e      	ldr	r1, [pc, #56]	; (800bd10 <HAL_RCC_ClockConfig+0x244>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bcdc:	4b0b      	ldr	r3, [pc, #44]	; (800bd0c <HAL_RCC_ClockConfig+0x240>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 030f 	and.w	r3, r3, #15
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d214      	bcs.n	800bd14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcea:	4b08      	ldr	r3, [pc, #32]	; (800bd0c <HAL_RCC_ClockConfig+0x240>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f023 020f 	bic.w	r2, r3, #15
 800bcf2:	4906      	ldr	r1, [pc, #24]	; (800bd0c <HAL_RCC_ClockConfig+0x240>)
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcfa:	4b04      	ldr	r3, [pc, #16]	; (800bd0c <HAL_RCC_ClockConfig+0x240>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 030f 	and.w	r3, r3, #15
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d005      	beq.n	800bd14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e086      	b.n	800be1a <HAL_RCC_ClockConfig+0x34e>
 800bd0c:	52002000 	.word	0x52002000
 800bd10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d010      	beq.n	800bd42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	691a      	ldr	r2, [r3, #16]
 800bd24:	4b3f      	ldr	r3, [pc, #252]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d208      	bcs.n	800bd42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bd30:	4b3c      	ldr	r3, [pc, #240]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	4939      	ldr	r1, [pc, #228]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0308 	and.w	r3, r3, #8
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d010      	beq.n	800bd70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	695a      	ldr	r2, [r3, #20]
 800bd52:	4b34      	ldr	r3, [pc, #208]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bd54:	69db      	ldr	r3, [r3, #28]
 800bd56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d208      	bcs.n	800bd70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bd5e:	4b31      	ldr	r3, [pc, #196]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	695b      	ldr	r3, [r3, #20]
 800bd6a:	492e      	ldr	r1, [pc, #184]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 0310 	and.w	r3, r3, #16
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d010      	beq.n	800bd9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	699a      	ldr	r2, [r3, #24]
 800bd80:	4b28      	ldr	r3, [pc, #160]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bd82:	69db      	ldr	r3, [r3, #28]
 800bd84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d208      	bcs.n	800bd9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bd8c:	4b25      	ldr	r3, [pc, #148]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bd8e:	69db      	ldr	r3, [r3, #28]
 800bd90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	4922      	ldr	r1, [pc, #136]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 0320 	and.w	r3, r3, #32
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d010      	beq.n	800bdcc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	69da      	ldr	r2, [r3, #28]
 800bdae:	4b1d      	ldr	r3, [pc, #116]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d208      	bcs.n	800bdcc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bdba:	4b1a      	ldr	r3, [pc, #104]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bdbc:	6a1b      	ldr	r3, [r3, #32]
 800bdbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	4917      	ldr	r1, [pc, #92]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bdcc:	f000 f844 	bl	800be58 <HAL_RCC_GetSysClockFreq>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	4b14      	ldr	r3, [pc, #80]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	0a1b      	lsrs	r3, r3, #8
 800bdd8:	f003 030f 	and.w	r3, r3, #15
 800bddc:	4912      	ldr	r1, [pc, #72]	; (800be28 <HAL_RCC_ClockConfig+0x35c>)
 800bdde:	5ccb      	ldrb	r3, [r1, r3]
 800bde0:	f003 031f 	and.w	r3, r3, #31
 800bde4:	fa22 f303 	lsr.w	r3, r2, r3
 800bde8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bdea:	4b0e      	ldr	r3, [pc, #56]	; (800be24 <HAL_RCC_ClockConfig+0x358>)
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	f003 030f 	and.w	r3, r3, #15
 800bdf2:	4a0d      	ldr	r2, [pc, #52]	; (800be28 <HAL_RCC_ClockConfig+0x35c>)
 800bdf4:	5cd3      	ldrb	r3, [r2, r3]
 800bdf6:	f003 031f 	and.w	r3, r3, #31
 800bdfa:	693a      	ldr	r2, [r7, #16]
 800bdfc:	fa22 f303 	lsr.w	r3, r2, r3
 800be00:	4a0a      	ldr	r2, [pc, #40]	; (800be2c <HAL_RCC_ClockConfig+0x360>)
 800be02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800be04:	4a0a      	ldr	r2, [pc, #40]	; (800be30 <HAL_RCC_ClockConfig+0x364>)
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800be0a:	4b0a      	ldr	r3, [pc, #40]	; (800be34 <HAL_RCC_ClockConfig+0x368>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fc fd94 	bl	800893c <HAL_InitTick>
 800be14:	4603      	mov	r3, r0
 800be16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800be18:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3718      	adds	r7, #24
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	58024400 	.word	0x58024400
 800be28:	08014c40 	.word	0x08014c40
 800be2c:	24000004 	.word	0x24000004
 800be30:	24000000 	.word	0x24000000
 800be34:	24000008 	.word	0x24000008

0800be38 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800be38:	b480      	push	{r7}
 800be3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800be3c:	4b05      	ldr	r3, [pc, #20]	; (800be54 <HAL_RCC_EnableCSS+0x1c>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a04      	ldr	r2, [pc, #16]	; (800be54 <HAL_RCC_EnableCSS+0x1c>)
 800be42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be46:	6013      	str	r3, [r2, #0]
}
 800be48:	bf00      	nop
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	58024400 	.word	0x58024400

0800be58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be58:	b480      	push	{r7}
 800be5a:	b089      	sub	sp, #36	; 0x24
 800be5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be5e:	4bb3      	ldr	r3, [pc, #716]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be66:	2b18      	cmp	r3, #24
 800be68:	f200 8155 	bhi.w	800c116 <HAL_RCC_GetSysClockFreq+0x2be>
 800be6c:	a201      	add	r2, pc, #4	; (adr r2, 800be74 <HAL_RCC_GetSysClockFreq+0x1c>)
 800be6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be72:	bf00      	nop
 800be74:	0800bed9 	.word	0x0800bed9
 800be78:	0800c117 	.word	0x0800c117
 800be7c:	0800c117 	.word	0x0800c117
 800be80:	0800c117 	.word	0x0800c117
 800be84:	0800c117 	.word	0x0800c117
 800be88:	0800c117 	.word	0x0800c117
 800be8c:	0800c117 	.word	0x0800c117
 800be90:	0800c117 	.word	0x0800c117
 800be94:	0800beff 	.word	0x0800beff
 800be98:	0800c117 	.word	0x0800c117
 800be9c:	0800c117 	.word	0x0800c117
 800bea0:	0800c117 	.word	0x0800c117
 800bea4:	0800c117 	.word	0x0800c117
 800bea8:	0800c117 	.word	0x0800c117
 800beac:	0800c117 	.word	0x0800c117
 800beb0:	0800c117 	.word	0x0800c117
 800beb4:	0800bf05 	.word	0x0800bf05
 800beb8:	0800c117 	.word	0x0800c117
 800bebc:	0800c117 	.word	0x0800c117
 800bec0:	0800c117 	.word	0x0800c117
 800bec4:	0800c117 	.word	0x0800c117
 800bec8:	0800c117 	.word	0x0800c117
 800becc:	0800c117 	.word	0x0800c117
 800bed0:	0800c117 	.word	0x0800c117
 800bed4:	0800bf0b 	.word	0x0800bf0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bed8:	4b94      	ldr	r3, [pc, #592]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 0320 	and.w	r3, r3, #32
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d009      	beq.n	800bef8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bee4:	4b91      	ldr	r3, [pc, #580]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	08db      	lsrs	r3, r3, #3
 800beea:	f003 0303 	and.w	r3, r3, #3
 800beee:	4a90      	ldr	r2, [pc, #576]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bef0:	fa22 f303 	lsr.w	r3, r2, r3
 800bef4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800bef6:	e111      	b.n	800c11c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bef8:	4b8d      	ldr	r3, [pc, #564]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800befa:	61bb      	str	r3, [r7, #24]
    break;
 800befc:	e10e      	b.n	800c11c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800befe:	4b8d      	ldr	r3, [pc, #564]	; (800c134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bf00:	61bb      	str	r3, [r7, #24]
    break;
 800bf02:	e10b      	b.n	800c11c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800bf04:	4b8c      	ldr	r3, [pc, #560]	; (800c138 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bf06:	61bb      	str	r3, [r7, #24]
    break;
 800bf08:	e108      	b.n	800c11c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf0a:	4b88      	ldr	r3, [pc, #544]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0e:	f003 0303 	and.w	r3, r3, #3
 800bf12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800bf14:	4b85      	ldr	r3, [pc, #532]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf18:	091b      	lsrs	r3, r3, #4
 800bf1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bf20:	4b82      	ldr	r3, [pc, #520]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf24:	f003 0301 	and.w	r3, r3, #1
 800bf28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bf2a:	4b80      	ldr	r3, [pc, #512]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf2e:	08db      	lsrs	r3, r3, #3
 800bf30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	fb02 f303 	mul.w	r3, r2, r3
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 80e1 	beq.w	800c110 <HAL_RCC_GetSysClockFreq+0x2b8>
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	f000 8083 	beq.w	800c05c <HAL_RCC_GetSysClockFreq+0x204>
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	f200 80a1 	bhi.w	800c0a0 <HAL_RCC_GetSysClockFreq+0x248>
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d003      	beq.n	800bf6c <HAL_RCC_GetSysClockFreq+0x114>
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d056      	beq.n	800c018 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bf6a:	e099      	b.n	800c0a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf6c:	4b6f      	ldr	r3, [pc, #444]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 0320 	and.w	r3, r3, #32
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d02d      	beq.n	800bfd4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf78:	4b6c      	ldr	r3, [pc, #432]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	08db      	lsrs	r3, r3, #3
 800bf7e:	f003 0303 	and.w	r3, r3, #3
 800bf82:	4a6b      	ldr	r2, [pc, #428]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf84:	fa22 f303 	lsr.w	r3, r2, r3
 800bf88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	ee07 3a90 	vmov	s15, r3
 800bf90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa2:	4b62      	ldr	r3, [pc, #392]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c13c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800bfd2:	e087      	b.n	800c0e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	ee07 3a90 	vmov	s15, r3
 800bfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfde:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c140 <HAL_RCC_GetSysClockFreq+0x2e8>
 800bfe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe6:	4b51      	ldr	r3, [pc, #324]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bff6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bffa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c13c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c016:	e065      	b.n	800c0e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	ee07 3a90 	vmov	s15, r3
 800c01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c022:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c144 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c02a:	4b40      	ldr	r3, [pc, #256]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c03a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c03e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c13c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c04a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c05a:	e043      	b.n	800c0e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	ee07 3a90 	vmov	s15, r3
 800c062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c066:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c148 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c06e:	4b2f      	ldr	r3, [pc, #188]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c07e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c082:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c13c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c09a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c09e:	e021      	b.n	800c0e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	ee07 3a90 	vmov	s15, r3
 800c0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c144 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0b2:	4b1e      	ldr	r3, [pc, #120]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ba:	ee07 3a90 	vmov	s15, r3
 800c0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c13c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c0e4:	4b11      	ldr	r3, [pc, #68]	; (800c12c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e8:	0a5b      	lsrs	r3, r3, #9
 800c0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	ee07 3a90 	vmov	s15, r3
 800c0f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c0fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c108:	ee17 3a90 	vmov	r3, s15
 800c10c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c10e:	e005      	b.n	800c11c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c110:	2300      	movs	r3, #0
 800c112:	61bb      	str	r3, [r7, #24]
    break;
 800c114:	e002      	b.n	800c11c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c116:	4b07      	ldr	r3, [pc, #28]	; (800c134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c118:	61bb      	str	r3, [r7, #24]
    break;
 800c11a:	bf00      	nop
  }

  return sysclockfreq;
 800c11c:	69bb      	ldr	r3, [r7, #24]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3724      	adds	r7, #36	; 0x24
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	58024400 	.word	0x58024400
 800c130:	03d09000 	.word	0x03d09000
 800c134:	003d0900 	.word	0x003d0900
 800c138:	017d7840 	.word	0x017d7840
 800c13c:	46000000 	.word	0x46000000
 800c140:	4c742400 	.word	0x4c742400
 800c144:	4a742400 	.word	0x4a742400
 800c148:	4bbebc20 	.word	0x4bbebc20

0800c14c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c152:	f7ff fe81 	bl	800be58 <HAL_RCC_GetSysClockFreq>
 800c156:	4602      	mov	r2, r0
 800c158:	4b10      	ldr	r3, [pc, #64]	; (800c19c <HAL_RCC_GetHCLKFreq+0x50>)
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	0a1b      	lsrs	r3, r3, #8
 800c15e:	f003 030f 	and.w	r3, r3, #15
 800c162:	490f      	ldr	r1, [pc, #60]	; (800c1a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800c164:	5ccb      	ldrb	r3, [r1, r3]
 800c166:	f003 031f 	and.w	r3, r3, #31
 800c16a:	fa22 f303 	lsr.w	r3, r2, r3
 800c16e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c170:	4b0a      	ldr	r3, [pc, #40]	; (800c19c <HAL_RCC_GetHCLKFreq+0x50>)
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	f003 030f 	and.w	r3, r3, #15
 800c178:	4a09      	ldr	r2, [pc, #36]	; (800c1a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800c17a:	5cd3      	ldrb	r3, [r2, r3]
 800c17c:	f003 031f 	and.w	r3, r3, #31
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	fa22 f303 	lsr.w	r3, r2, r3
 800c186:	4a07      	ldr	r2, [pc, #28]	; (800c1a4 <HAL_RCC_GetHCLKFreq+0x58>)
 800c188:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c18a:	4a07      	ldr	r2, [pc, #28]	; (800c1a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c190:	4b04      	ldr	r3, [pc, #16]	; (800c1a4 <HAL_RCC_GetHCLKFreq+0x58>)
 800c192:	681b      	ldr	r3, [r3, #0]
}
 800c194:	4618      	mov	r0, r3
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	58024400 	.word	0x58024400
 800c1a0:	08014c40 	.word	0x08014c40
 800c1a4:	24000004 	.word	0x24000004
 800c1a8:	24000000 	.word	0x24000000

0800c1ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c1b0:	f7ff ffcc 	bl	800c14c <HAL_RCC_GetHCLKFreq>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	4b06      	ldr	r3, [pc, #24]	; (800c1d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c1b8:	69db      	ldr	r3, [r3, #28]
 800c1ba:	091b      	lsrs	r3, r3, #4
 800c1bc:	f003 0307 	and.w	r3, r3, #7
 800c1c0:	4904      	ldr	r1, [pc, #16]	; (800c1d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c1c2:	5ccb      	ldrb	r3, [r1, r3]
 800c1c4:	f003 031f 	and.w	r3, r3, #31
 800c1c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	58024400 	.word	0x58024400
 800c1d4:	08014c40 	.word	0x08014c40

0800c1d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c1dc:	f7ff ffb6 	bl	800c14c <HAL_RCC_GetHCLKFreq>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	4b06      	ldr	r3, [pc, #24]	; (800c1fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800c1e4:	69db      	ldr	r3, [r3, #28]
 800c1e6:	0a1b      	lsrs	r3, r3, #8
 800c1e8:	f003 0307 	and.w	r3, r3, #7
 800c1ec:	4904      	ldr	r1, [pc, #16]	; (800c200 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c1ee:	5ccb      	ldrb	r3, [r1, r3]
 800c1f0:	f003 031f 	and.w	r3, r3, #31
 800c1f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	58024400 	.word	0x58024400
 800c200:	08014c40 	.word	0x08014c40

0800c204 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800c208:	4b07      	ldr	r3, [pc, #28]	; (800c228 <HAL_RCC_NMI_IRQHandler+0x24>)
 800c20a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c20c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c214:	d105      	bne.n	800c222 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800c216:	f000 f809 	bl	800c22c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800c21a:	4b03      	ldr	r3, [pc, #12]	; (800c228 <HAL_RCC_NMI_IRQHandler+0x24>)
 800c21c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c220:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800c222:	bf00      	nop
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	58024400 	.word	0x58024400

0800c22c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800c22c:	b480      	push	{r7}
 800c22e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800c230:	bf00      	nop
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
	...

0800c23c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b086      	sub	sp, #24
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c244:	2300      	movs	r3, #0
 800c246:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c248:	2300      	movs	r3, #0
 800c24a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c254:	2b00      	cmp	r3, #0
 800c256:	d03f      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c25c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c260:	d02a      	beq.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c262:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c266:	d824      	bhi.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c26c:	d018      	beq.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c26e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c272:	d81e      	bhi.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c274:	2b00      	cmp	r3, #0
 800c276:	d003      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c27c:	d007      	beq.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c27e:	e018      	b.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c280:	4bab      	ldr	r3, [pc, #684]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c284:	4aaa      	ldr	r2, [pc, #680]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c28a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c28c:	e015      	b.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	3304      	adds	r3, #4
 800c292:	2102      	movs	r1, #2
 800c294:	4618      	mov	r0, r3
 800c296:	f001 feff 	bl	800e098 <RCCEx_PLL2_Config>
 800c29a:	4603      	mov	r3, r0
 800c29c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c29e:	e00c      	b.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	3324      	adds	r3, #36	; 0x24
 800c2a4:	2102      	movs	r1, #2
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f001 ffa8 	bl	800e1fc <RCCEx_PLL3_Config>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c2b0:	e003      	b.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	75fb      	strb	r3, [r7, #23]
      break;
 800c2b6:	e000      	b.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c2b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2ba:	7dfb      	ldrb	r3, [r7, #23]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d109      	bne.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c2c0:	4b9b      	ldr	r3, [pc, #620]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c2c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2cc:	4998      	ldr	r1, [pc, #608]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	650b      	str	r3, [r1, #80]	; 0x50
 800c2d2:	e001      	b.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d4:	7dfb      	ldrb	r3, [r7, #23]
 800c2d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d03d      	beq.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e8:	2b04      	cmp	r3, #4
 800c2ea:	d826      	bhi.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c2ec:	a201      	add	r2, pc, #4	; (adr r2, 800c2f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f2:	bf00      	nop
 800c2f4:	0800c309 	.word	0x0800c309
 800c2f8:	0800c317 	.word	0x0800c317
 800c2fc:	0800c329 	.word	0x0800c329
 800c300:	0800c341 	.word	0x0800c341
 800c304:	0800c341 	.word	0x0800c341
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c308:	4b89      	ldr	r3, [pc, #548]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30c:	4a88      	ldr	r2, [pc, #544]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c30e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c312:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c314:	e015      	b.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	3304      	adds	r3, #4
 800c31a:	2100      	movs	r1, #0
 800c31c:	4618      	mov	r0, r3
 800c31e:	f001 febb 	bl	800e098 <RCCEx_PLL2_Config>
 800c322:	4603      	mov	r3, r0
 800c324:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c326:	e00c      	b.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	3324      	adds	r3, #36	; 0x24
 800c32c:	2100      	movs	r1, #0
 800c32e:	4618      	mov	r0, r3
 800c330:	f001 ff64 	bl	800e1fc <RCCEx_PLL3_Config>
 800c334:	4603      	mov	r3, r0
 800c336:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c338:	e003      	b.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	75fb      	strb	r3, [r7, #23]
      break;
 800c33e:	e000      	b.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c340:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c342:	7dfb      	ldrb	r3, [r7, #23]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d109      	bne.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c348:	4b79      	ldr	r3, [pc, #484]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c34a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c34c:	f023 0207 	bic.w	r2, r3, #7
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c354:	4976      	ldr	r1, [pc, #472]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c356:	4313      	orrs	r3, r2
 800c358:	650b      	str	r3, [r1, #80]	; 0x50
 800c35a:	e001      	b.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c35c:	7dfb      	ldrb	r3, [r7, #23]
 800c35e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d051      	beq.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c372:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800c376:	d036      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c378:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800c37c:	d830      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c37e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c382:	d032      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800c384:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c388:	d82a      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c38a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c38e:	d02e      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800c390:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c394:	d824      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c39a:	d018      	beq.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c39c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3a0:	d81e      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x172>
 800c3a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3aa:	d007      	beq.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800c3ac:	e018      	b.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3ae:	4b60      	ldr	r3, [pc, #384]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b2:	4a5f      	ldr	r2, [pc, #380]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c3ba:	e019      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	3304      	adds	r3, #4
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f001 fe68 	bl	800e098 <RCCEx_PLL2_Config>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c3cc:	e010      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	3324      	adds	r3, #36	; 0x24
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f001 ff11 	bl	800e1fc <RCCEx_PLL3_Config>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c3de:	e007      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	75fb      	strb	r3, [r7, #23]
      break;
 800c3e4:	e004      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c3e6:	bf00      	nop
 800c3e8:	e002      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c3ea:	bf00      	nop
 800c3ec:	e000      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c3ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10a      	bne.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c3f6:	4b4e      	ldr	r3, [pc, #312]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3fa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c404:	494a      	ldr	r1, [pc, #296]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c406:	4313      	orrs	r3, r2
 800c408:	658b      	str	r3, [r1, #88]	; 0x58
 800c40a:	e001      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
 800c40e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d051      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c422:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c426:	d036      	beq.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800c428:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c42c:	d830      	bhi.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c42e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c432:	d032      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800c434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c438:	d82a      	bhi.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c43a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c43e:	d02e      	beq.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0x262>
 800c440:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c444:	d824      	bhi.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c44a:	d018      	beq.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800c44c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c450:	d81e      	bhi.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c452:	2b00      	cmp	r3, #0
 800c454:	d003      	beq.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0x222>
 800c456:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c45a:	d007      	beq.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c45c:	e018      	b.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c45e:	4b34      	ldr	r3, [pc, #208]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c462:	4a33      	ldr	r2, [pc, #204]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c46a:	e019      	b.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	3304      	adds	r3, #4
 800c470:	2100      	movs	r1, #0
 800c472:	4618      	mov	r0, r3
 800c474:	f001 fe10 	bl	800e098 <RCCEx_PLL2_Config>
 800c478:	4603      	mov	r3, r0
 800c47a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c47c:	e010      	b.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	3324      	adds	r3, #36	; 0x24
 800c482:	2100      	movs	r1, #0
 800c484:	4618      	mov	r0, r3
 800c486:	f001 feb9 	bl	800e1fc <RCCEx_PLL3_Config>
 800c48a:	4603      	mov	r3, r0
 800c48c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c48e:	e007      	b.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	75fb      	strb	r3, [r7, #23]
      break;
 800c494:	e004      	b.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c496:	bf00      	nop
 800c498:	e002      	b.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c49a:	bf00      	nop
 800c49c:	e000      	b.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c49e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4a0:	7dfb      	ldrb	r3, [r7, #23]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d10a      	bne.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c4a6:	4b22      	ldr	r3, [pc, #136]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4aa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c4b4:	491e      	ldr	r1, [pc, #120]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	658b      	str	r3, [r1, #88]	; 0x58
 800c4ba:	e001      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4bc:	7dfb      	ldrb	r3, [r7, #23]
 800c4be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d035      	beq.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4d0:	2b30      	cmp	r3, #48	; 0x30
 800c4d2:	d01c      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c4d4:	2b30      	cmp	r3, #48	; 0x30
 800c4d6:	d817      	bhi.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800c4d8:	2b20      	cmp	r3, #32
 800c4da:	d00c      	beq.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800c4dc:	2b20      	cmp	r3, #32
 800c4de:	d813      	bhi.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d016      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800c4e4:	2b10      	cmp	r3, #16
 800c4e6:	d10f      	bne.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4e8:	4b11      	ldr	r3, [pc, #68]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ec:	4a10      	ldr	r2, [pc, #64]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800c4f4:	e00e      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	3304      	adds	r3, #4
 800c4fa:	2102      	movs	r1, #2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 fdcb 	bl	800e098 <RCCEx_PLL2_Config>
 800c502:	4603      	mov	r3, r0
 800c504:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800c506:	e005      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	75fb      	strb	r3, [r7, #23]
      break;
 800c50c:	e002      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800c50e:	bf00      	nop
 800c510:	e000      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800c512:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10c      	bne.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c51a:	4b05      	ldr	r3, [pc, #20]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c51e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c526:	4902      	ldr	r1, [pc, #8]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c528:	4313      	orrs	r3, r2
 800c52a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c52c:	e004      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800c52e:	bf00      	nop
 800c530:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c534:	7dfb      	ldrb	r3, [r7, #23]
 800c536:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c540:	2b00      	cmp	r3, #0
 800c542:	d047      	beq.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c54c:	d030      	beq.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800c54e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c552:	d82a      	bhi.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c554:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c558:	d02c      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800c55a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c55e:	d824      	bhi.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c564:	d018      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c56a:	d81e      	bhi.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d003      	beq.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c574:	d007      	beq.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c576:	e018      	b.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c578:	4bac      	ldr	r3, [pc, #688]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57c:	4aab      	ldr	r2, [pc, #684]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c57e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c584:	e017      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	3304      	adds	r3, #4
 800c58a:	2100      	movs	r1, #0
 800c58c:	4618      	mov	r0, r3
 800c58e:	f001 fd83 	bl	800e098 <RCCEx_PLL2_Config>
 800c592:	4603      	mov	r3, r0
 800c594:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c596:	e00e      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	3324      	adds	r3, #36	; 0x24
 800c59c:	2100      	movs	r1, #0
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f001 fe2c 	bl	800e1fc <RCCEx_PLL3_Config>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c5a8:	e005      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	75fb      	strb	r3, [r7, #23]
      break;
 800c5ae:	e002      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800c5b0:	bf00      	nop
 800c5b2:	e000      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800c5b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d109      	bne.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c5bc:	4b9b      	ldr	r3, [pc, #620]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5c8:	4998      	ldr	r1, [pc, #608]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	650b      	str	r3, [r1, #80]	; 0x50
 800c5ce:	e001      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5d0:	7dfb      	ldrb	r3, [r7, #23]
 800c5d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d049      	beq.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5e8:	d02e      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800c5ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5ee:	d828      	bhi.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c5f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5f4:	d02a      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800c5f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5fa:	d822      	bhi.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c5fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c600:	d026      	beq.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800c602:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c606:	d81c      	bhi.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c60c:	d010      	beq.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800c60e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c612:	d816      	bhi.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c614:	2b00      	cmp	r3, #0
 800c616:	d01d      	beq.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800c618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c61c:	d111      	bne.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	3304      	adds	r3, #4
 800c622:	2101      	movs	r1, #1
 800c624:	4618      	mov	r0, r3
 800c626:	f001 fd37 	bl	800e098 <RCCEx_PLL2_Config>
 800c62a:	4603      	mov	r3, r0
 800c62c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c62e:	e012      	b.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3324      	adds	r3, #36	; 0x24
 800c634:	2101      	movs	r1, #1
 800c636:	4618      	mov	r0, r3
 800c638:	f001 fde0 	bl	800e1fc <RCCEx_PLL3_Config>
 800c63c:	4603      	mov	r3, r0
 800c63e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c640:	e009      	b.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	75fb      	strb	r3, [r7, #23]
      break;
 800c646:	e006      	b.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c648:	bf00      	nop
 800c64a:	e004      	b.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c64c:	bf00      	nop
 800c64e:	e002      	b.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c650:	bf00      	nop
 800c652:	e000      	b.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c654:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c656:	7dfb      	ldrb	r3, [r7, #23]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d109      	bne.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c65c:	4b73      	ldr	r3, [pc, #460]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c660:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c668:	4970      	ldr	r1, [pc, #448]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c66a:	4313      	orrs	r3, r2
 800c66c:	650b      	str	r3, [r1, #80]	; 0x50
 800c66e:	e001      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c670:	7dfb      	ldrb	r3, [r7, #23]
 800c672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d04b      	beq.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c68a:	d02e      	beq.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800c68c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c690:	d828      	bhi.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c696:	d02a      	beq.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800c698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c69c:	d822      	bhi.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c69e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6a2:	d026      	beq.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800c6a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6a8:	d81c      	bhi.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c6aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ae:	d010      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800c6b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6b4:	d816      	bhi.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d01d      	beq.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800c6ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6be:	d111      	bne.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f001 fce6 	bl	800e098 <RCCEx_PLL2_Config>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c6d0:	e012      	b.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	3324      	adds	r3, #36	; 0x24
 800c6d6:	2101      	movs	r1, #1
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f001 fd8f 	bl	800e1fc <RCCEx_PLL3_Config>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c6e2:	e009      	b.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	75fb      	strb	r3, [r7, #23]
      break;
 800c6e8:	e006      	b.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c6ea:	bf00      	nop
 800c6ec:	e004      	b.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c6ee:	bf00      	nop
 800c6f0:	e002      	b.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c6f2:	bf00      	nop
 800c6f4:	e000      	b.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c6f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6f8:	7dfb      	ldrb	r3, [r7, #23]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10a      	bne.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c6fe:	4b4b      	ldr	r3, [pc, #300]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c702:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c70c:	4947      	ldr	r1, [pc, #284]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c70e:	4313      	orrs	r3, r2
 800c710:	658b      	str	r3, [r1, #88]	; 0x58
 800c712:	e001      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c714:	7dfb      	ldrb	r3, [r7, #23]
 800c716:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c720:	2b00      	cmp	r3, #0
 800c722:	d02f      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c72c:	d00e      	beq.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800c72e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c732:	d814      	bhi.n	800c75e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c734:	2b00      	cmp	r3, #0
 800c736:	d015      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800c738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c73c:	d10f      	bne.n	800c75e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c73e:	4b3b      	ldr	r3, [pc, #236]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c742:	4a3a      	ldr	r2, [pc, #232]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c748:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c74a:	e00c      	b.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	3304      	adds	r3, #4
 800c750:	2101      	movs	r1, #1
 800c752:	4618      	mov	r0, r3
 800c754:	f001 fca0 	bl	800e098 <RCCEx_PLL2_Config>
 800c758:	4603      	mov	r3, r0
 800c75a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c75c:	e003      	b.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
 800c760:	75fb      	strb	r3, [r7, #23]
      break;
 800c762:	e000      	b.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800c764:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c766:	7dfb      	ldrb	r3, [r7, #23]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d109      	bne.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c76c:	4b2f      	ldr	r3, [pc, #188]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c770:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c778:	492c      	ldr	r1, [pc, #176]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c77a:	4313      	orrs	r3, r2
 800c77c:	650b      	str	r3, [r1, #80]	; 0x50
 800c77e:	e001      	b.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c780:	7dfb      	ldrb	r3, [r7, #23]
 800c782:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d032      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c794:	2b03      	cmp	r3, #3
 800c796:	d81b      	bhi.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800c798:	a201      	add	r2, pc, #4	; (adr r2, 800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800c79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79e:	bf00      	nop
 800c7a0:	0800c7d7 	.word	0x0800c7d7
 800c7a4:	0800c7b1 	.word	0x0800c7b1
 800c7a8:	0800c7bf 	.word	0x0800c7bf
 800c7ac:	0800c7d7 	.word	0x0800c7d7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7b0:	4b1e      	ldr	r3, [pc, #120]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b4:	4a1d      	ldr	r2, [pc, #116]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c7bc:	e00c      	b.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	2102      	movs	r1, #2
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f001 fc67 	bl	800e098 <RCCEx_PLL2_Config>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c7ce:	e003      	b.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c7d4:	e000      	b.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800c7d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d109      	bne.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c7de:	4b13      	ldr	r3, [pc, #76]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7e2:	f023 0203 	bic.w	r2, r3, #3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ea:	4910      	ldr	r1, [pc, #64]	; (800c82c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c7f0:	e001      	b.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7f2:	7dfb      	ldrb	r3, [r7, #23]
 800c7f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f000 808a 	beq.w	800c918 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c804:	4b0a      	ldr	r3, [pc, #40]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a09      	ldr	r2, [pc, #36]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800c80a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c80e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c810:	f7fc f8de 	bl	80089d0 <HAL_GetTick>
 800c814:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c816:	e00d      	b.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c818:	f7fc f8da 	bl	80089d0 <HAL_GetTick>
 800c81c:	4602      	mov	r2, r0
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	2b64      	cmp	r3, #100	; 0x64
 800c824:	d906      	bls.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800c826:	2303      	movs	r3, #3
 800c828:	75fb      	strb	r3, [r7, #23]
        break;
 800c82a:	e009      	b.n	800c840 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c82c:	58024400 	.word	0x58024400
 800c830:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c834:	4bb9      	ldr	r3, [pc, #740]	; (800cb1c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d0eb      	beq.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800c840:	7dfb      	ldrb	r3, [r7, #23]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d166      	bne.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c846:	4bb6      	ldr	r3, [pc, #728]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c848:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c850:	4053      	eors	r3, r2
 800c852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c856:	2b00      	cmp	r3, #0
 800c858:	d013      	beq.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c85a:	4bb1      	ldr	r3, [pc, #708]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c85c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c85e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c862:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c864:	4bae      	ldr	r3, [pc, #696]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c868:	4aad      	ldr	r2, [pc, #692]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c86a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c86e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c870:	4bab      	ldr	r3, [pc, #684]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c874:	4aaa      	ldr	r2, [pc, #680]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c87a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c87c:	4aa8      	ldr	r2, [pc, #672]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c88c:	d115      	bne.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c88e:	f7fc f89f 	bl	80089d0 <HAL_GetTick>
 800c892:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c894:	e00b      	b.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c896:	f7fc f89b 	bl	80089d0 <HAL_GetTick>
 800c89a:	4602      	mov	r2, r0
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d902      	bls.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	75fb      	strb	r3, [r7, #23]
            break;
 800c8ac:	e005      	b.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c8ae:	4b9c      	ldr	r3, [pc, #624]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8b2:	f003 0302 	and.w	r3, r3, #2
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d0ed      	beq.n	800c896 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800c8ba:	7dfb      	ldrb	r3, [r7, #23]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d126      	bne.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c8c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8ce:	d10d      	bne.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800c8d0:	4b93      	ldr	r3, [pc, #588]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c8de:	0919      	lsrs	r1, r3, #4
 800c8e0:	4b90      	ldr	r3, [pc, #576]	; (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800c8e2:	400b      	ands	r3, r1
 800c8e4:	498e      	ldr	r1, [pc, #568]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	610b      	str	r3, [r1, #16]
 800c8ea:	e005      	b.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800c8ec:	4b8c      	ldr	r3, [pc, #560]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8ee:	691b      	ldr	r3, [r3, #16]
 800c8f0:	4a8b      	ldr	r2, [pc, #556]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c8f6:	6113      	str	r3, [r2, #16]
 800c8f8:	4b89      	ldr	r3, [pc, #548]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c8fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c906:	4986      	ldr	r1, [pc, #536]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800c908:	4313      	orrs	r3, r2
 800c90a:	670b      	str	r3, [r1, #112]	; 0x70
 800c90c:	e004      	b.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	75bb      	strb	r3, [r7, #22]
 800c912:	e001      	b.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c914:	7dfb      	ldrb	r3, [r7, #23]
 800c916:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f003 0301 	and.w	r3, r3, #1
 800c920:	2b00      	cmp	r3, #0
 800c922:	d07e      	beq.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c928:	2b28      	cmp	r3, #40	; 0x28
 800c92a:	d867      	bhi.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800c92c:	a201      	add	r2, pc, #4	; (adr r2, 800c934 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800c92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c932:	bf00      	nop
 800c934:	0800ca03 	.word	0x0800ca03
 800c938:	0800c9fd 	.word	0x0800c9fd
 800c93c:	0800c9fd 	.word	0x0800c9fd
 800c940:	0800c9fd 	.word	0x0800c9fd
 800c944:	0800c9fd 	.word	0x0800c9fd
 800c948:	0800c9fd 	.word	0x0800c9fd
 800c94c:	0800c9fd 	.word	0x0800c9fd
 800c950:	0800c9fd 	.word	0x0800c9fd
 800c954:	0800c9d9 	.word	0x0800c9d9
 800c958:	0800c9fd 	.word	0x0800c9fd
 800c95c:	0800c9fd 	.word	0x0800c9fd
 800c960:	0800c9fd 	.word	0x0800c9fd
 800c964:	0800c9fd 	.word	0x0800c9fd
 800c968:	0800c9fd 	.word	0x0800c9fd
 800c96c:	0800c9fd 	.word	0x0800c9fd
 800c970:	0800c9fd 	.word	0x0800c9fd
 800c974:	0800c9eb 	.word	0x0800c9eb
 800c978:	0800c9fd 	.word	0x0800c9fd
 800c97c:	0800c9fd 	.word	0x0800c9fd
 800c980:	0800c9fd 	.word	0x0800c9fd
 800c984:	0800c9fd 	.word	0x0800c9fd
 800c988:	0800c9fd 	.word	0x0800c9fd
 800c98c:	0800c9fd 	.word	0x0800c9fd
 800c990:	0800c9fd 	.word	0x0800c9fd
 800c994:	0800ca03 	.word	0x0800ca03
 800c998:	0800c9fd 	.word	0x0800c9fd
 800c99c:	0800c9fd 	.word	0x0800c9fd
 800c9a0:	0800c9fd 	.word	0x0800c9fd
 800c9a4:	0800c9fd 	.word	0x0800c9fd
 800c9a8:	0800c9fd 	.word	0x0800c9fd
 800c9ac:	0800c9fd 	.word	0x0800c9fd
 800c9b0:	0800c9fd 	.word	0x0800c9fd
 800c9b4:	0800ca03 	.word	0x0800ca03
 800c9b8:	0800c9fd 	.word	0x0800c9fd
 800c9bc:	0800c9fd 	.word	0x0800c9fd
 800c9c0:	0800c9fd 	.word	0x0800c9fd
 800c9c4:	0800c9fd 	.word	0x0800c9fd
 800c9c8:	0800c9fd 	.word	0x0800c9fd
 800c9cc:	0800c9fd 	.word	0x0800c9fd
 800c9d0:	0800c9fd 	.word	0x0800c9fd
 800c9d4:	0800ca03 	.word	0x0800ca03
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	3304      	adds	r3, #4
 800c9dc:	2101      	movs	r1, #1
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f001 fb5a 	bl	800e098 <RCCEx_PLL2_Config>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c9e8:	e00c      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	3324      	adds	r3, #36	; 0x24
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f001 fc03 	bl	800e1fc <RCCEx_PLL3_Config>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c9fa:	e003      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	75fb      	strb	r3, [r7, #23]
      break;
 800ca00:	e000      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800ca02:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d109      	bne.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ca0a:	4b45      	ldr	r3, [pc, #276]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ca0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca16:	4942      	ldr	r1, [pc, #264]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	654b      	str	r3, [r1, #84]	; 0x54
 800ca1c:	e001      	b.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
 800ca20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f003 0302 	and.w	r3, r3, #2
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d037      	beq.n	800ca9e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca32:	2b05      	cmp	r3, #5
 800ca34:	d820      	bhi.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800ca36:	a201      	add	r2, pc, #4	; (adr r2, 800ca3c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800ca38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3c:	0800ca7f 	.word	0x0800ca7f
 800ca40:	0800ca55 	.word	0x0800ca55
 800ca44:	0800ca67 	.word	0x0800ca67
 800ca48:	0800ca7f 	.word	0x0800ca7f
 800ca4c:	0800ca7f 	.word	0x0800ca7f
 800ca50:	0800ca7f 	.word	0x0800ca7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	3304      	adds	r3, #4
 800ca58:	2101      	movs	r1, #1
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f001 fb1c 	bl	800e098 <RCCEx_PLL2_Config>
 800ca60:	4603      	mov	r3, r0
 800ca62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ca64:	e00c      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	3324      	adds	r3, #36	; 0x24
 800ca6a:	2101      	movs	r1, #1
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f001 fbc5 	bl	800e1fc <RCCEx_PLL3_Config>
 800ca72:	4603      	mov	r3, r0
 800ca74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ca76:	e003      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	75fb      	strb	r3, [r7, #23]
      break;
 800ca7c:	e000      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800ca7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d109      	bne.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ca86:	4b26      	ldr	r3, [pc, #152]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ca88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca8a:	f023 0207 	bic.w	r2, r3, #7
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca92:	4923      	ldr	r1, [pc, #140]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ca94:	4313      	orrs	r3, r2
 800ca96:	654b      	str	r3, [r1, #84]	; 0x54
 800ca98:	e001      	b.n	800ca9e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f003 0304 	and.w	r3, r3, #4
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d040      	beq.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cab0:	2b05      	cmp	r3, #5
 800cab2:	d821      	bhi.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800cab4:	a201      	add	r2, pc, #4	; (adr r2, 800cabc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800cab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caba:	bf00      	nop
 800cabc:	0800caff 	.word	0x0800caff
 800cac0:	0800cad5 	.word	0x0800cad5
 800cac4:	0800cae7 	.word	0x0800cae7
 800cac8:	0800caff 	.word	0x0800caff
 800cacc:	0800caff 	.word	0x0800caff
 800cad0:	0800caff 	.word	0x0800caff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	3304      	adds	r3, #4
 800cad8:	2101      	movs	r1, #1
 800cada:	4618      	mov	r0, r3
 800cadc:	f001 fadc 	bl	800e098 <RCCEx_PLL2_Config>
 800cae0:	4603      	mov	r3, r0
 800cae2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cae4:	e00c      	b.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	3324      	adds	r3, #36	; 0x24
 800caea:	2101      	movs	r1, #1
 800caec:	4618      	mov	r0, r3
 800caee:	f001 fb85 	bl	800e1fc <RCCEx_PLL3_Config>
 800caf2:	4603      	mov	r3, r0
 800caf4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800caf6:	e003      	b.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	75fb      	strb	r3, [r7, #23]
      break;
 800cafc:	e000      	b.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800cafe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d110      	bne.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cb06:	4b06      	ldr	r3, [pc, #24]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800cb08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb0a:	f023 0207 	bic.w	r2, r3, #7
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb14:	4902      	ldr	r1, [pc, #8]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800cb16:	4313      	orrs	r3, r2
 800cb18:	658b      	str	r3, [r1, #88]	; 0x58
 800cb1a:	e007      	b.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800cb1c:	58024800 	.word	0x58024800
 800cb20:	58024400 	.word	0x58024400
 800cb24:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb28:	7dfb      	ldrb	r3, [r7, #23]
 800cb2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 0320 	and.w	r3, r3, #32
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d04b      	beq.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb42:	d02e      	beq.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800cb44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb48:	d828      	bhi.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cb4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb4e:	d02a      	beq.n	800cba6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800cb50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb54:	d822      	bhi.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cb56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb5a:	d026      	beq.n	800cbaa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800cb5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb60:	d81c      	bhi.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cb62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb66:	d010      	beq.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800cb68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb6c:	d816      	bhi.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d01d      	beq.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x972>
 800cb72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb76:	d111      	bne.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f001 fa8a 	bl	800e098 <RCCEx_PLL2_Config>
 800cb84:	4603      	mov	r3, r0
 800cb86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cb88:	e012      	b.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	3324      	adds	r3, #36	; 0x24
 800cb8e:	2102      	movs	r1, #2
 800cb90:	4618      	mov	r0, r3
 800cb92:	f001 fb33 	bl	800e1fc <RCCEx_PLL3_Config>
 800cb96:	4603      	mov	r3, r0
 800cb98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cb9a:	e009      	b.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	75fb      	strb	r3, [r7, #23]
      break;
 800cba0:	e006      	b.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cba2:	bf00      	nop
 800cba4:	e004      	b.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cba6:	bf00      	nop
 800cba8:	e002      	b.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cbaa:	bf00      	nop
 800cbac:	e000      	b.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800cbae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cbb0:	7dfb      	ldrb	r3, [r7, #23]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d10a      	bne.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cbb6:	4bb2      	ldr	r3, [pc, #712]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cbb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbc4:	49ae      	ldr	r1, [pc, #696]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	654b      	str	r3, [r1, #84]	; 0x54
 800cbca:	e001      	b.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbcc:	7dfb      	ldrb	r3, [r7, #23]
 800cbce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d04b      	beq.n	800cc74 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbe2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cbe6:	d02e      	beq.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800cbe8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cbec:	d828      	bhi.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cbee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbf2:	d02a      	beq.n	800cc4a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800cbf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbf8:	d822      	bhi.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cbfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cbfe:	d026      	beq.n	800cc4e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800cc00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cc04:	d81c      	bhi.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cc06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc0a:	d010      	beq.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800cc0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc10:	d816      	bhi.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d01d      	beq.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800cc16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc1a:	d111      	bne.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3304      	adds	r3, #4
 800cc20:	2100      	movs	r1, #0
 800cc22:	4618      	mov	r0, r3
 800cc24:	f001 fa38 	bl	800e098 <RCCEx_PLL2_Config>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc2c:	e012      	b.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3324      	adds	r3, #36	; 0x24
 800cc32:	2102      	movs	r1, #2
 800cc34:	4618      	mov	r0, r3
 800cc36:	f001 fae1 	bl	800e1fc <RCCEx_PLL3_Config>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc3e:	e009      	b.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	75fb      	strb	r3, [r7, #23]
      break;
 800cc44:	e006      	b.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800cc46:	bf00      	nop
 800cc48:	e004      	b.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800cc4a:	bf00      	nop
 800cc4c:	e002      	b.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800cc4e:	bf00      	nop
 800cc50:	e000      	b.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800cc52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc54:	7dfb      	ldrb	r3, [r7, #23]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d10a      	bne.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cc5a:	4b89      	ldr	r3, [pc, #548]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cc5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc68:	4985      	ldr	r1, [pc, #532]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	658b      	str	r3, [r1, #88]	; 0x58
 800cc6e:	e001      	b.n	800cc74 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
 800cc72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d04b      	beq.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cc86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cc8a:	d02e      	beq.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800cc8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cc90:	d828      	bhi.n	800cce4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800cc92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc96:	d02a      	beq.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800cc98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc9c:	d822      	bhi.n	800cce4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800cc9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cca2:	d026      	beq.n	800ccf2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800cca4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cca8:	d81c      	bhi.n	800cce4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800ccaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ccae:	d010      	beq.n	800ccd2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800ccb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ccb4:	d816      	bhi.n	800cce4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d01d      	beq.n	800ccf6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800ccba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccbe:	d111      	bne.n	800cce4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f001 f9e6 	bl	800e098 <RCCEx_PLL2_Config>
 800cccc:	4603      	mov	r3, r0
 800ccce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ccd0:	e012      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	3324      	adds	r3, #36	; 0x24
 800ccd6:	2102      	movs	r1, #2
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f001 fa8f 	bl	800e1fc <RCCEx_PLL3_Config>
 800ccde:	4603      	mov	r3, r0
 800cce0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cce2:	e009      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	75fb      	strb	r3, [r7, #23]
      break;
 800cce8:	e006      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ccea:	bf00      	nop
 800ccec:	e004      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ccee:	bf00      	nop
 800ccf0:	e002      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ccf2:	bf00      	nop
 800ccf4:	e000      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ccf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ccf8:	7dfb      	ldrb	r3, [r7, #23]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10a      	bne.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ccfe:	4b60      	ldr	r3, [pc, #384]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd0c:	495c      	ldr	r1, [pc, #368]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	658b      	str	r3, [r1, #88]	; 0x58
 800cd12:	e001      	b.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd14:	7dfb      	ldrb	r3, [r7, #23]
 800cd16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 0308 	and.w	r3, r3, #8
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d018      	beq.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd2c:	d10a      	bne.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	3324      	adds	r3, #36	; 0x24
 800cd32:	2102      	movs	r1, #2
 800cd34:	4618      	mov	r0, r3
 800cd36:	f001 fa61 	bl	800e1fc <RCCEx_PLL3_Config>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d001      	beq.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800cd44:	4b4e      	ldr	r3, [pc, #312]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd50:	494b      	ldr	r1, [pc, #300]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd52:	4313      	orrs	r3, r2
 800cd54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f003 0310 	and.w	r3, r3, #16
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d01a      	beq.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd6c:	d10a      	bne.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	3324      	adds	r3, #36	; 0x24
 800cd72:	2102      	movs	r1, #2
 800cd74:	4618      	mov	r0, r3
 800cd76:	f001 fa41 	bl	800e1fc <RCCEx_PLL3_Config>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d001      	beq.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800cd80:	2301      	movs	r3, #1
 800cd82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cd84:	4b3e      	ldr	r3, [pc, #248]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd92:	493b      	ldr	r1, [pc, #236]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cd94:	4313      	orrs	r3, r2
 800cd96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d034      	beq.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cdaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdae:	d01d      	beq.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800cdb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdb4:	d817      	bhi.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800cdba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdbe:	d009      	beq.n	800cdd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cdc0:	e011      	b.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	3304      	adds	r3, #4
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f001 f965 	bl	800e098 <RCCEx_PLL2_Config>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cdd2:	e00c      	b.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	3324      	adds	r3, #36	; 0x24
 800cdd8:	2102      	movs	r1, #2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f001 fa0e 	bl	800e1fc <RCCEx_PLL3_Config>
 800cde0:	4603      	mov	r3, r0
 800cde2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cde4:	e003      	b.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	75fb      	strb	r3, [r7, #23]
      break;
 800cdea:	e000      	b.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800cdec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cdee:	7dfb      	ldrb	r3, [r7, #23]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10a      	bne.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cdf4:	4b22      	ldr	r3, [pc, #136]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800cdf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce02:	491f      	ldr	r1, [pc, #124]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce04:	4313      	orrs	r3, r2
 800ce06:	658b      	str	r3, [r1, #88]	; 0x58
 800ce08:	e001      	b.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d036      	beq.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce24:	d01c      	beq.n	800ce60 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ce26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce2a:	d816      	bhi.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ce2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce30:	d003      	beq.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ce32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce36:	d007      	beq.n	800ce48 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800ce38:	e00f      	b.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce3a:	4b11      	ldr	r3, [pc, #68]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3e:	4a10      	ldr	r2, [pc, #64]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ce46:	e00c      	b.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3324      	adds	r3, #36	; 0x24
 800ce4c:	2101      	movs	r1, #1
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f001 f9d4 	bl	800e1fc <RCCEx_PLL3_Config>
 800ce54:	4603      	mov	r3, r0
 800ce56:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ce58:	e003      	b.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ce5e:	e000      	b.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800ce60:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10d      	bne.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ce68:	4b05      	ldr	r3, [pc, #20]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce76:	4902      	ldr	r1, [pc, #8]	; (800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	654b      	str	r3, [r1, #84]	; 0x54
 800ce7c:	e004      	b.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800ce7e:	bf00      	nop
 800ce80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce84:	7dfb      	ldrb	r3, [r7, #23]
 800ce86:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d029      	beq.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d003      	beq.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ce9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cea0:	d007      	beq.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800cea2:	e00f      	b.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cea4:	4b61      	ldr	r3, [pc, #388]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea8:	4a60      	ldr	r2, [pc, #384]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ceaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ceae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ceb0:	e00b      	b.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	2102      	movs	r1, #2
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f001 f8ed 	bl	800e098 <RCCEx_PLL2_Config>
 800cebe:	4603      	mov	r3, r0
 800cec0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800cec2:	e002      	b.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	75fb      	strb	r3, [r7, #23]
      break;
 800cec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ceca:	7dfb      	ldrb	r3, [r7, #23]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d109      	bne.n	800cee4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ced0:	4b56      	ldr	r3, [pc, #344]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ced2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ced4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cedc:	4953      	ldr	r1, [pc, #332]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cede:	4313      	orrs	r3, r2
 800cee0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cee2:	e001      	b.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
 800cee6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00a      	beq.n	800cf0a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	3324      	adds	r3, #36	; 0x24
 800cef8:	2102      	movs	r1, #2
 800cefa:	4618      	mov	r0, r3
 800cefc:	f001 f97e 	bl	800e1fc <RCCEx_PLL3_Config>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d001      	beq.n	800cf0a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d030      	beq.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf1e:	d017      	beq.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800cf20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf24:	d811      	bhi.n	800cf4a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800cf26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf2a:	d013      	beq.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800cf2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf30:	d80b      	bhi.n	800cf4a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d010      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800cf36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf3a:	d106      	bne.n	800cf4a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf3c:	4b3b      	ldr	r3, [pc, #236]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf40:	4a3a      	ldr	r2, [pc, #232]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800cf48:	e007      	b.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	75fb      	strb	r3, [r7, #23]
      break;
 800cf4e:	e004      	b.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cf50:	bf00      	nop
 800cf52:	e002      	b.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cf54:	bf00      	nop
 800cf56:	e000      	b.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800cf58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf5a:	7dfb      	ldrb	r3, [r7, #23]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d109      	bne.n	800cf74 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf60:	4b32      	ldr	r3, [pc, #200]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf6c:	492f      	ldr	r1, [pc, #188]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	654b      	str	r3, [r1, #84]	; 0x54
 800cf72:	e001      	b.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf74:	7dfb      	ldrb	r3, [r7, #23]
 800cf76:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d008      	beq.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cf84:	4b29      	ldr	r3, [pc, #164]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf90:	4926      	ldr	r1, [pc, #152]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cf92:	4313      	orrs	r3, r2
 800cf94:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d008      	beq.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cfa2:	4b22      	ldr	r3, [pc, #136]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfa6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfae:	491f      	ldr	r1, [pc, #124]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00d      	beq.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cfc0:	4b1a      	ldr	r3, [pc, #104]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	4a19      	ldr	r2, [pc, #100]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cfca:	6113      	str	r3, [r2, #16]
 800cfcc:	4b17      	ldr	r3, [pc, #92]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfce:	691a      	ldr	r2, [r3, #16]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cfd6:	4915      	ldr	r1, [pc, #84]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	da08      	bge.n	800cff6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cfe4:	4b11      	ldr	r3, [pc, #68]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cfe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfe8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cff0:	490e      	ldr	r1, [pc, #56]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800cff2:	4313      	orrs	r3, r2
 800cff4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d009      	beq.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d002:	4b0a      	ldr	r3, [pc, #40]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d006:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d010:	4906      	ldr	r1, [pc, #24]	; (800d02c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d012:	4313      	orrs	r3, r2
 800d014:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d016:	7dbb      	ldrb	r3, [r7, #22]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	e000      	b.n	800d022 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800d020:	2301      	movs	r3, #1
}
 800d022:	4618      	mov	r0, r3
 800d024:	3718      	adds	r7, #24
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	58024400 	.word	0x58024400

0800d030 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b090      	sub	sp, #64	; 0x40
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d03e:	f040 8089 	bne.w	800d154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800d042:	4b95      	ldr	r3, [pc, #596]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d046:	f003 0307 	and.w	r3, r3, #7
 800d04a:	633b      	str	r3, [r7, #48]	; 0x30
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04e:	2b04      	cmp	r3, #4
 800d050:	d87d      	bhi.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800d052:	a201      	add	r2, pc, #4	; (adr r2, 800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800d054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d058:	0800d06d 	.word	0x0800d06d
 800d05c:	0800d091 	.word	0x0800d091
 800d060:	0800d0b5 	.word	0x0800d0b5
 800d064:	0800d149 	.word	0x0800d149
 800d068:	0800d0d9 	.word	0x0800d0d9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d06c:	4b8a      	ldr	r3, [pc, #552]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d078:	d107      	bne.n	800d08a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d07a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d07e:	4618      	mov	r0, r3
 800d080:	f000 feb8 	bl	800ddf4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800d084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d086:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d088:	e3ed      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d08e:	e3ea      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d090:	4b81      	ldr	r3, [pc, #516]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d09c:	d107      	bne.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d09e:	f107 0318 	add.w	r3, r7, #24
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f000 fbfe 	bl	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d0ac:	e3db      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d0b2:	e3d8      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0b4:	4b78      	ldr	r3, [pc, #480]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0c0:	d107      	bne.n	800d0d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0c2:	f107 030c 	add.w	r3, r7, #12
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f000 fd40 	bl	800db4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d0d0:	e3c9      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d0d6:	e3c6      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d0d8:	4b6f      	ldr	r3, [pc, #444]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d0e0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d0e2:	4b6d      	ldr	r3, [pc, #436]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f003 0304 	and.w	r3, r3, #4
 800d0ea:	2b04      	cmp	r3, #4
 800d0ec:	d10c      	bne.n	800d108 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800d0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d109      	bne.n	800d108 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d0f4:	4b68      	ldr	r3, [pc, #416]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	08db      	lsrs	r3, r3, #3
 800d0fa:	f003 0303 	and.w	r3, r3, #3
 800d0fe:	4a67      	ldr	r2, [pc, #412]	; (800d29c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800d100:	fa22 f303 	lsr.w	r3, r2, r3
 800d104:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d106:	e01e      	b.n	800d146 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d108:	4b63      	ldr	r3, [pc, #396]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d114:	d106      	bne.n	800d124 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800d116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d11c:	d102      	bne.n	800d124 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d11e:	4b60      	ldr	r3, [pc, #384]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d120:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d122:	e010      	b.n	800d146 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d124:	4b5c      	ldr	r3, [pc, #368]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d12c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d130:	d106      	bne.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d138:	d102      	bne.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d13a:	4b5a      	ldr	r3, [pc, #360]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800d13c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d13e:	e002      	b.n	800d146 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d140:	2300      	movs	r3, #0
 800d142:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d144:	e38f      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d146:	e38e      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d148:	4b57      	ldr	r3, [pc, #348]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d14a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d14c:	e38b      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800d14e:	2300      	movs	r3, #0
 800d150:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d152:	e388      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d15a:	f040 80a7 	bne.w	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800d15e:	4b4e      	ldr	r3, [pc, #312]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d162:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800d166:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d16e:	d054      	beq.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800d170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d172:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d176:	f200 808b 	bhi.w	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d180:	f000 8083 	beq.w	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800d184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d186:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d18a:	f200 8081 	bhi.w	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d194:	d02f      	beq.n	800d1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800d196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d19c:	d878      	bhi.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d004      	beq.n	800d1ae <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800d1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d1aa:	d012      	beq.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800d1ac:	e070      	b.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d1ae:	4b3a      	ldr	r3, [pc, #232]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1ba:	d107      	bne.n	800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f000 fe17 	bl	800ddf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d1ca:	e34c      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d1d0:	e349      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1d2:	4b31      	ldr	r3, [pc, #196]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1de:	d107      	bne.n	800d1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1e0:	f107 0318 	add.w	r3, r7, #24
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f000 fb5d 	bl	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d1ee:	e33a      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d1f4:	e337      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d1f6:	4b28      	ldr	r3, [pc, #160]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d202:	d107      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d204:	f107 030c 	add.w	r3, r7, #12
 800d208:	4618      	mov	r0, r3
 800d20a:	f000 fc9f 	bl	800db4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d212:	e328      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d214:	2300      	movs	r3, #0
 800d216:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d218:	e325      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d21a:	4b1f      	ldr	r3, [pc, #124]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d21e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d222:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d224:	4b1c      	ldr	r3, [pc, #112]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 0304 	and.w	r3, r3, #4
 800d22c:	2b04      	cmp	r3, #4
 800d22e:	d10c      	bne.n	800d24a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800d230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d232:	2b00      	cmp	r3, #0
 800d234:	d109      	bne.n	800d24a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d236:	4b18      	ldr	r3, [pc, #96]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	08db      	lsrs	r3, r3, #3
 800d23c:	f003 0303 	and.w	r3, r3, #3
 800d240:	4a16      	ldr	r2, [pc, #88]	; (800d29c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800d242:	fa22 f303 	lsr.w	r3, r2, r3
 800d246:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d248:	e01e      	b.n	800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d24a:	4b13      	ldr	r3, [pc, #76]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d256:	d106      	bne.n	800d266 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800d258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d25a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d25e:	d102      	bne.n	800d266 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d260:	4b0f      	ldr	r3, [pc, #60]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d262:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d264:	e010      	b.n	800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d266:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d26e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d272:	d106      	bne.n	800d282 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800d274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d27a:	d102      	bne.n	800d282 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d27c:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800d27e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d280:	e002      	b.n	800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d282:	2300      	movs	r3, #0
 800d284:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d286:	e2ee      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d288:	e2ed      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d28a:	4b07      	ldr	r3, [pc, #28]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d28c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d28e:	e2ea      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d290:	2300      	movs	r3, #0
 800d292:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d294:	e2e7      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d296:	bf00      	nop
 800d298:	58024400 	.word	0x58024400
 800d29c:	03d09000 	.word	0x03d09000
 800d2a0:	003d0900 	.word	0x003d0900
 800d2a4:	017d7840 	.word	0x017d7840
 800d2a8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2b2:	f040 809c 	bne.w	800d3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800d2b6:	4b9e      	ldr	r3, [pc, #632]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800d2be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d2c6:	d054      	beq.n	800d372 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d2ce:	f200 808b 	bhi.w	800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d2d8:	f000 8083 	beq.w	800d3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d2e2:	f200 8081 	bhi.w	800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2ec:	d02f      	beq.n	800d34e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2f4:	d878      	bhi.n	800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d004      	beq.n	800d306 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d302:	d012      	beq.n	800d32a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d304:	e070      	b.n	800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d306:	4b8a      	ldr	r3, [pc, #552]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d30e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d312:	d107      	bne.n	800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 fd6b 	bl	800ddf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d320:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d322:	e2a0      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d324:	2300      	movs	r3, #0
 800d326:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d328:	e29d      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d32a:	4b81      	ldr	r3, [pc, #516]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d336:	d107      	bne.n	800d348 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d338:	f107 0318 	add.w	r3, r7, #24
 800d33c:	4618      	mov	r0, r3
 800d33e:	f000 fab1 	bl	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800d346:	e28e      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d348:	2300      	movs	r3, #0
 800d34a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d34c:	e28b      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d34e:	4b78      	ldr	r3, [pc, #480]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d356:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d35a:	d107      	bne.n	800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d35c:	f107 030c 	add.w	r3, r7, #12
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fbf3 	bl	800db4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d36a:	e27c      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d36c:	2300      	movs	r3, #0
 800d36e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d370:	e279      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d372:	4b6f      	ldr	r3, [pc, #444]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d376:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d37a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d37c:	4b6c      	ldr	r3, [pc, #432]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f003 0304 	and.w	r3, r3, #4
 800d384:	2b04      	cmp	r3, #4
 800d386:	d10c      	bne.n	800d3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800d388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d109      	bne.n	800d3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d38e:	4b68      	ldr	r3, [pc, #416]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	08db      	lsrs	r3, r3, #3
 800d394:	f003 0303 	and.w	r3, r3, #3
 800d398:	4a66      	ldr	r2, [pc, #408]	; (800d534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d39a:	fa22 f303 	lsr.w	r3, r2, r3
 800d39e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3a0:	e01e      	b.n	800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d3a2:	4b63      	ldr	r3, [pc, #396]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3ae:	d106      	bne.n	800d3be <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800d3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3b6:	d102      	bne.n	800d3be <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d3b8:	4b5f      	ldr	r3, [pc, #380]	; (800d538 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800d3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3bc:	e010      	b.n	800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d3be:	4b5c      	ldr	r3, [pc, #368]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3ca:	d106      	bne.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800d3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3d2:	d102      	bne.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d3d4:	4b59      	ldr	r3, [pc, #356]	; (800d53c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800d3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3d8:	e002      	b.n	800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d3de:	e242      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d3e0:	e241      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d3e2:	4b57      	ldr	r3, [pc, #348]	; (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800d3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d3e6:	e23e      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d3ec:	e23b      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3f4:	f040 80a6 	bne.w	800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800d3f8:	4b4d      	ldr	r3, [pc, #308]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3fc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d400:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d408:	d054      	beq.n	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800d40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d410:	f200 808b 	bhi.w	800d52a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d416:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d41a:	f000 8083 	beq.w	800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800d41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d420:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d424:	f200 8081 	bhi.w	800d52a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d42e:	d02f      	beq.n	800d490 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d436:	d878      	bhi.n	800d52a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d004      	beq.n	800d448 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800d43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d444:	d012      	beq.n	800d46c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800d446:	e070      	b.n	800d52a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d448:	4b39      	ldr	r3, [pc, #228]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d454:	d107      	bne.n	800d466 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 fcca 	bl	800ddf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d462:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d464:	e1ff      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d466:	2300      	movs	r3, #0
 800d468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d46a:	e1fc      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d46c:	4b30      	ldr	r3, [pc, #192]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d478:	d107      	bne.n	800d48a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d47a:	f107 0318 	add.w	r3, r7, #24
 800d47e:	4618      	mov	r0, r3
 800d480:	f000 fa10 	bl	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d488:	e1ed      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d48e:	e1ea      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d490:	4b27      	ldr	r3, [pc, #156]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d49c:	d107      	bne.n	800d4ae <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d49e:	f107 030c 	add.w	r3, r7, #12
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 fb52 	bl	800db4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d4ac:	e1db      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d4b2:	e1d8      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d4b4:	4b1e      	ldr	r3, [pc, #120]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d4bc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d4be:	4b1c      	ldr	r3, [pc, #112]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f003 0304 	and.w	r3, r3, #4
 800d4c6:	2b04      	cmp	r3, #4
 800d4c8:	d10c      	bne.n	800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800d4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d109      	bne.n	800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d4d0:	4b17      	ldr	r3, [pc, #92]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	08db      	lsrs	r3, r3, #3
 800d4d6:	f003 0303 	and.w	r3, r3, #3
 800d4da:	4a16      	ldr	r2, [pc, #88]	; (800d534 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d4dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4e2:	e01e      	b.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d4e4:	4b12      	ldr	r3, [pc, #72]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4f0:	d106      	bne.n	800d500 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800d4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4f8:	d102      	bne.n	800d500 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d4fa:	4b0f      	ldr	r3, [pc, #60]	; (800d538 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800d4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4fe:	e010      	b.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d500:	4b0b      	ldr	r3, [pc, #44]	; (800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d50c:	d106      	bne.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800d50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d514:	d102      	bne.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d516:	4b09      	ldr	r3, [pc, #36]	; (800d53c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800d518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d51a:	e002      	b.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d51c:	2300      	movs	r3, #0
 800d51e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d520:	e1a1      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d522:	e1a0      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d524:	4b06      	ldr	r3, [pc, #24]	; (800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800d526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d528:	e19d      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800d52a:	2300      	movs	r3, #0
 800d52c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d52e:	e19a      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d530:	58024400 	.word	0x58024400
 800d534:	03d09000 	.word	0x03d09000
 800d538:	003d0900 	.word	0x003d0900
 800d53c:	017d7840 	.word	0x017d7840
 800d540:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d54a:	d173      	bne.n	800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800d54c:	4b9a      	ldr	r3, [pc, #616]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d54e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d554:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d55c:	d02f      	beq.n	800d5be <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800d55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d564:	d863      	bhi.n	800d62e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800d566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d004      	beq.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800d56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d572:	d012      	beq.n	800d59a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800d574:	e05b      	b.n	800d62e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d576:	4b90      	ldr	r3, [pc, #576]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d57e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d582:	d107      	bne.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d584:	f107 0318 	add.w	r3, r7, #24
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 f98b 	bl	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d592:	e168      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d598:	e165      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d59a:	4b87      	ldr	r3, [pc, #540]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5a6:	d107      	bne.n	800d5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5a8:	f107 030c 	add.w	r3, r7, #12
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f000 facd 	bl	800db4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d5b6:	e156      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d5bc:	e153      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d5be:	4b7e      	ldr	r3, [pc, #504]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d5c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d5c6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d5c8:	4b7b      	ldr	r3, [pc, #492]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f003 0304 	and.w	r3, r3, #4
 800d5d0:	2b04      	cmp	r3, #4
 800d5d2:	d10c      	bne.n	800d5ee <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800d5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d109      	bne.n	800d5ee <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d5da:	4b77      	ldr	r3, [pc, #476]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	08db      	lsrs	r3, r3, #3
 800d5e0:	f003 0303 	and.w	r3, r3, #3
 800d5e4:	4a75      	ldr	r2, [pc, #468]	; (800d7bc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d5e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5ec:	e01e      	b.n	800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d5ee:	4b72      	ldr	r3, [pc, #456]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5fa:	d106      	bne.n	800d60a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800d5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d602:	d102      	bne.n	800d60a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d604:	4b6e      	ldr	r3, [pc, #440]	; (800d7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800d606:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d608:	e010      	b.n	800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d60a:	4b6b      	ldr	r3, [pc, #428]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d616:	d106      	bne.n	800d626 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d61a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d61e:	d102      	bne.n	800d626 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d620:	4b68      	ldr	r3, [pc, #416]	; (800d7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800d622:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d624:	e002      	b.n	800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d626:	2300      	movs	r3, #0
 800d628:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d62a:	e11c      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d62c:	e11b      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d632:	e118      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d63a:	d133      	bne.n	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800d63c:	4b5e      	ldr	r3, [pc, #376]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d63e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d644:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d004      	beq.n	800d656 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800d64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d652:	d012      	beq.n	800d67a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800d654:	e023      	b.n	800d69e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d656:	4b58      	ldr	r3, [pc, #352]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d65e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d662:	d107      	bne.n	800d674 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d668:	4618      	mov	r0, r3
 800d66a:	f000 fbc3 	bl	800ddf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d672:	e0f8      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d674:	2300      	movs	r3, #0
 800d676:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d678:	e0f5      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d67a:	4b4f      	ldr	r3, [pc, #316]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d686:	d107      	bne.n	800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d688:	f107 0318 	add.w	r3, r7, #24
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 f909 	bl	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d696:	e0e6      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d69c:	e0e3      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d6a2:	e0e0      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d6aa:	f040 808d 	bne.w	800d7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800d6ae:	4b42      	ldr	r3, [pc, #264]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d6b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6be:	d06b      	beq.n	800d798 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6c6:	d874      	bhi.n	800d7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6ce:	d056      	beq.n	800d77e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6d6:	d86c      	bhi.n	800d7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6de:	d03b      	beq.n	800d758 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800d6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6e6:	d864      	bhi.n	800d7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6ee:	d021      	beq.n	800d734 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6f6:	d85c      	bhi.n	800d7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d004      	beq.n	800d708 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800d6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d704:	d004      	beq.n	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800d706:	e054      	b.n	800d7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d708:	f000 f8b6 	bl	800d878 <HAL_RCCEx_GetD3PCLK1Freq>
 800d70c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800d70e:	e0aa      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d710:	4b29      	ldr	r3, [pc, #164]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d71c:	d107      	bne.n	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d71e:	f107 0318 	add.w	r3, r7, #24
 800d722:	4618      	mov	r0, r3
 800d724:	f000 f8be 	bl	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d72c:	e09b      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d72e:	2300      	movs	r3, #0
 800d730:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d732:	e098      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d734:	4b20      	ldr	r3, [pc, #128]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d73c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d740:	d107      	bne.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d742:	f107 030c 	add.w	r3, r7, #12
 800d746:	4618      	mov	r0, r3
 800d748:	f000 fa00 	bl	800db4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d750:	e089      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d756:	e086      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d758:	4b17      	ldr	r3, [pc, #92]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f003 0304 	and.w	r3, r3, #4
 800d760:	2b04      	cmp	r3, #4
 800d762:	d109      	bne.n	800d778 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d764:	4b14      	ldr	r3, [pc, #80]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	08db      	lsrs	r3, r3, #3
 800d76a:	f003 0303 	and.w	r3, r3, #3
 800d76e:	4a13      	ldr	r2, [pc, #76]	; (800d7bc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d770:	fa22 f303 	lsr.w	r3, r2, r3
 800d774:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d776:	e076      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d77c:	e073      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d77e:	4b0e      	ldr	r3, [pc, #56]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d78a:	d102      	bne.n	800d792 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800d78c:	4b0c      	ldr	r3, [pc, #48]	; (800d7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800d78e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d790:	e069      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d796:	e066      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d798:	4b07      	ldr	r3, [pc, #28]	; (800d7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d7a4:	d102      	bne.n	800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800d7a6:	4b07      	ldr	r3, [pc, #28]	; (800d7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800d7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d7aa:	e05c      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7b0:	e059      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d7b6:	e056      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800d7b8:	58024400 	.word	0x58024400
 800d7bc:	03d09000 	.word	0x03d09000
 800d7c0:	003d0900 	.word	0x003d0900
 800d7c4:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7ce:	d148      	bne.n	800d862 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800d7d0:	4b27      	ldr	r3, [pc, #156]	; (800d870 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d7d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7e0:	d02a      	beq.n	800d838 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800d7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7e8:	d838      	bhi.n	800d85c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800d7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d004      	beq.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800d7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7f6:	d00d      	beq.n	800d814 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800d7f8:	e030      	b.n	800d85c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d7fa:	4b1d      	ldr	r3, [pc, #116]	; (800d870 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d806:	d102      	bne.n	800d80e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800d808:	4b1a      	ldr	r3, [pc, #104]	; (800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d80a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d80c:	e02b      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d812:	e028      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d814:	4b16      	ldr	r3, [pc, #88]	; (800d870 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d81c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d820:	d107      	bne.n	800d832 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d826:	4618      	mov	r0, r3
 800d828:	f000 fae4 	bl	800ddf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d830:	e019      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d832:	2300      	movs	r3, #0
 800d834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d836:	e016      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d838:	4b0d      	ldr	r3, [pc, #52]	; (800d870 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d844:	d107      	bne.n	800d856 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d846:	f107 0318 	add.w	r3, r7, #24
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 f82a 	bl	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d854:	e007      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800d856:	2300      	movs	r3, #0
 800d858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d85a:	e004      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800d85c:	2300      	movs	r3, #0
 800d85e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d860:	e001      	b.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800d862:	2300      	movs	r3, #0
 800d864:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800d866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3740      	adds	r7, #64	; 0x40
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	58024400 	.word	0x58024400
 800d874:	017d7840 	.word	0x017d7840

0800d878 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d87c:	f7fe fc66 	bl	800c14c <HAL_RCC_GetHCLKFreq>
 800d880:	4602      	mov	r2, r0
 800d882:	4b06      	ldr	r3, [pc, #24]	; (800d89c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d884:	6a1b      	ldr	r3, [r3, #32]
 800d886:	091b      	lsrs	r3, r3, #4
 800d888:	f003 0307 	and.w	r3, r3, #7
 800d88c:	4904      	ldr	r1, [pc, #16]	; (800d8a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d88e:	5ccb      	ldrb	r3, [r1, r3]
 800d890:	f003 031f 	and.w	r3, r3, #31
 800d894:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d898:	4618      	mov	r0, r3
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	58024400 	.word	0x58024400
 800d8a0:	08014c40 	.word	0x08014c40

0800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b089      	sub	sp, #36	; 0x24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d8ac:	4ba1      	ldr	r3, [pc, #644]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8b0:	f003 0303 	and.w	r3, r3, #3
 800d8b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d8b6:	4b9f      	ldr	r3, [pc, #636]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ba:	0b1b      	lsrs	r3, r3, #12
 800d8bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d8c2:	4b9c      	ldr	r3, [pc, #624]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c6:	091b      	lsrs	r3, r3, #4
 800d8c8:	f003 0301 	and.w	r3, r3, #1
 800d8cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d8ce:	4b99      	ldr	r3, [pc, #612]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8d2:	08db      	lsrs	r3, r3, #3
 800d8d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8d8:	693a      	ldr	r2, [r7, #16]
 800d8da:	fb02 f303 	mul.w	r3, r2, r3
 800d8de:	ee07 3a90 	vmov	s15, r3
 800d8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f000 8111 	beq.w	800db14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	f000 8083 	beq.w	800da00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	f200 80a1 	bhi.w	800da44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d003      	beq.n	800d910 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d056      	beq.n	800d9bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d90e:	e099      	b.n	800da44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d910:	4b88      	ldr	r3, [pc, #544]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f003 0320 	and.w	r3, r3, #32
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d02d      	beq.n	800d978 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d91c:	4b85      	ldr	r3, [pc, #532]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	08db      	lsrs	r3, r3, #3
 800d922:	f003 0303 	and.w	r3, r3, #3
 800d926:	4a84      	ldr	r2, [pc, #528]	; (800db38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d928:	fa22 f303 	lsr.w	r3, r2, r3
 800d92c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	ee07 3a90 	vmov	s15, r3
 800d934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	ee07 3a90 	vmov	s15, r3
 800d93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d946:	4b7b      	ldr	r3, [pc, #492]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d94e:	ee07 3a90 	vmov	s15, r3
 800d952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d956:	ed97 6a03 	vldr	s12, [r7, #12]
 800d95a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800db3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d95e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d972:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d976:	e087      	b.n	800da88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	ee07 3a90 	vmov	s15, r3
 800d97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d982:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800db40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d98a:	4b6a      	ldr	r3, [pc, #424]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d992:	ee07 3a90 	vmov	s15, r3
 800d996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d99a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d99e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800db3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d9ba:	e065      	b.n	800da88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	ee07 3a90 	vmov	s15, r3
 800d9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800db44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9ce:	4b59      	ldr	r3, [pc, #356]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d6:	ee07 3a90 	vmov	s15, r3
 800d9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800db3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d9fe:	e043      	b.n	800da88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	ee07 3a90 	vmov	s15, r3
 800da06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800db48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800da0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da12:	4b48      	ldr	r3, [pc, #288]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da1a:	ee07 3a90 	vmov	s15, r3
 800da1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da22:	ed97 6a03 	vldr	s12, [r7, #12]
 800da26:	eddf 5a45 	vldr	s11, [pc, #276]	; 800db3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da42:	e021      	b.n	800da88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	ee07 3a90 	vmov	s15, r3
 800da4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800db44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800da52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da56:	4b37      	ldr	r3, [pc, #220]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da5e:	ee07 3a90 	vmov	s15, r3
 800da62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da66:	ed97 6a03 	vldr	s12, [r7, #12]
 800da6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800db3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800da88:	4b2a      	ldr	r3, [pc, #168]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da8c:	0a5b      	lsrs	r3, r3, #9
 800da8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da92:	ee07 3a90 	vmov	s15, r3
 800da96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800daa2:	edd7 6a07 	vldr	s13, [r7, #28]
 800daa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daae:	ee17 2a90 	vmov	r2, s15
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800dab6:	4b1f      	ldr	r3, [pc, #124]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daba:	0c1b      	lsrs	r3, r3, #16
 800dabc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dac0:	ee07 3a90 	vmov	s15, r3
 800dac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dacc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dad0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dadc:	ee17 2a90 	vmov	r2, s15
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800dae4:	4b13      	ldr	r3, [pc, #76]	; (800db34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae8:	0e1b      	lsrs	r3, r3, #24
 800daea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daee:	ee07 3a90 	vmov	s15, r3
 800daf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dafa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dafe:	edd7 6a07 	vldr	s13, [r7, #28]
 800db02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db0a:	ee17 2a90 	vmov	r2, s15
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800db12:	e008      	b.n	800db26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	609a      	str	r2, [r3, #8]
}
 800db26:	bf00      	nop
 800db28:	3724      	adds	r7, #36	; 0x24
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	58024400 	.word	0x58024400
 800db38:	03d09000 	.word	0x03d09000
 800db3c:	46000000 	.word	0x46000000
 800db40:	4c742400 	.word	0x4c742400
 800db44:	4a742400 	.word	0x4a742400
 800db48:	4bbebc20 	.word	0x4bbebc20

0800db4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b089      	sub	sp, #36	; 0x24
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800db54:	4ba1      	ldr	r3, [pc, #644]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db58:	f003 0303 	and.w	r3, r3, #3
 800db5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800db5e:	4b9f      	ldr	r3, [pc, #636]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db62:	0d1b      	lsrs	r3, r3, #20
 800db64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800db6a:	4b9c      	ldr	r3, [pc, #624]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6e:	0a1b      	lsrs	r3, r3, #8
 800db70:	f003 0301 	and.w	r3, r3, #1
 800db74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800db76:	4b99      	ldr	r3, [pc, #612]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db7a:	08db      	lsrs	r3, r3, #3
 800db7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db80:	693a      	ldr	r2, [r7, #16]
 800db82:	fb02 f303 	mul.w	r3, r2, r3
 800db86:	ee07 3a90 	vmov	s15, r3
 800db8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	2b00      	cmp	r3, #0
 800db96:	f000 8111 	beq.w	800ddbc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	f000 8083 	beq.w	800dca8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	f200 80a1 	bhi.w	800dcec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d003      	beq.n	800dbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d056      	beq.n	800dc64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dbb6:	e099      	b.n	800dcec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbb8:	4b88      	ldr	r3, [pc, #544]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f003 0320 	and.w	r3, r3, #32
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d02d      	beq.n	800dc20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dbc4:	4b85      	ldr	r3, [pc, #532]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	08db      	lsrs	r3, r3, #3
 800dbca:	f003 0303 	and.w	r3, r3, #3
 800dbce:	4a84      	ldr	r2, [pc, #528]	; (800dde0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dbd0:	fa22 f303 	lsr.w	r3, r2, r3
 800dbd4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	ee07 3a90 	vmov	s15, r3
 800dbdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	ee07 3a90 	vmov	s15, r3
 800dbe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbee:	4b7b      	ldr	r3, [pc, #492]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbf6:	ee07 3a90 	vmov	s15, r3
 800dbfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc02:	eddf 5a78 	vldr	s11, [pc, #480]	; 800dde4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800dc1e:	e087      	b.n	800dd30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	ee07 3a90 	vmov	s15, r3
 800dc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dde8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dc2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc32:	4b6a      	ldr	r3, [pc, #424]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc3a:	ee07 3a90 	vmov	s15, r3
 800dc3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc42:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc46:	eddf 5a67 	vldr	s11, [pc, #412]	; 800dde4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dc62:	e065      	b.n	800dd30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	ee07 3a90 	vmov	s15, r3
 800dc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ddec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dc72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc76:	4b59      	ldr	r3, [pc, #356]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc7e:	ee07 3a90 	vmov	s15, r3
 800dc82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc86:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800dde4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dca2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dca6:	e043      	b.n	800dd30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	ee07 3a90 	vmov	s15, r3
 800dcae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ddf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dcb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcba:	4b48      	ldr	r3, [pc, #288]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcc2:	ee07 3a90 	vmov	s15, r3
 800dcc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcca:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800dde4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dce6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dcea:	e021      	b.n	800dd30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	ee07 3a90 	vmov	s15, r3
 800dcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ddec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dcfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcfe:	4b37      	ldr	r3, [pc, #220]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd06:	ee07 3a90 	vmov	s15, r3
 800dd0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd12:	eddf 5a34 	vldr	s11, [pc, #208]	; 800dde4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dd2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800dd30:	4b2a      	ldr	r3, [pc, #168]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd34:	0a5b      	lsrs	r3, r3, #9
 800dd36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd3a:	ee07 3a90 	vmov	s15, r3
 800dd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd56:	ee17 2a90 	vmov	r2, s15
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800dd5e:	4b1f      	ldr	r3, [pc, #124]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd62:	0c1b      	lsrs	r3, r3, #16
 800dd64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd68:	ee07 3a90 	vmov	s15, r3
 800dd6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd78:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd84:	ee17 2a90 	vmov	r2, s15
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800dd8c:	4b13      	ldr	r3, [pc, #76]	; (800dddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd90:	0e1b      	lsrs	r3, r3, #24
 800dd92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd96:	ee07 3a90 	vmov	s15, r3
 800dd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dda2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dda6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddb2:	ee17 2a90 	vmov	r2, s15
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ddba:	e008      	b.n	800ddce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	609a      	str	r2, [r3, #8]
}
 800ddce:	bf00      	nop
 800ddd0:	3724      	adds	r7, #36	; 0x24
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop
 800dddc:	58024400 	.word	0x58024400
 800dde0:	03d09000 	.word	0x03d09000
 800dde4:	46000000 	.word	0x46000000
 800dde8:	4c742400 	.word	0x4c742400
 800ddec:	4a742400 	.word	0x4a742400
 800ddf0:	4bbebc20 	.word	0x4bbebc20

0800ddf4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b089      	sub	sp, #36	; 0x24
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ddfc:	4ba0      	ldr	r3, [pc, #640]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de00:	f003 0303 	and.w	r3, r3, #3
 800de04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800de06:	4b9e      	ldr	r3, [pc, #632]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de0a:	091b      	lsrs	r3, r3, #4
 800de0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800de12:	4b9b      	ldr	r3, [pc, #620]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de16:	f003 0301 	and.w	r3, r3, #1
 800de1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800de1c:	4b98      	ldr	r3, [pc, #608]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de20:	08db      	lsrs	r3, r3, #3
 800de22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de26:	693a      	ldr	r2, [r7, #16]
 800de28:	fb02 f303 	mul.w	r3, r2, r3
 800de2c:	ee07 3a90 	vmov	s15, r3
 800de30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f000 8111 	beq.w	800e062 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	2b02      	cmp	r3, #2
 800de44:	f000 8083 	beq.w	800df4e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	f200 80a1 	bhi.w	800df92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d003      	beq.n	800de5e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d056      	beq.n	800df0a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800de5c:	e099      	b.n	800df92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de5e:	4b88      	ldr	r3, [pc, #544]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f003 0320 	and.w	r3, r3, #32
 800de66:	2b00      	cmp	r3, #0
 800de68:	d02d      	beq.n	800dec6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800de6a:	4b85      	ldr	r3, [pc, #532]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	08db      	lsrs	r3, r3, #3
 800de70:	f003 0303 	and.w	r3, r3, #3
 800de74:	4a83      	ldr	r2, [pc, #524]	; (800e084 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800de76:	fa22 f303 	lsr.w	r3, r2, r3
 800de7a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	ee07 3a90 	vmov	s15, r3
 800de82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	ee07 3a90 	vmov	s15, r3
 800de8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de94:	4b7a      	ldr	r3, [pc, #488]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de9c:	ee07 3a90 	vmov	s15, r3
 800dea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dea4:	ed97 6a03 	vldr	s12, [r7, #12]
 800dea8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800e088 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800deac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800deb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800deb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800deb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800debc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dec0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800dec4:	e087      	b.n	800dfd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	ee07 3a90 	vmov	s15, r3
 800decc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ded0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800e08c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ded4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ded8:	4b69      	ldr	r3, [pc, #420]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800deda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dedc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dee0:	ee07 3a90 	vmov	s15, r3
 800dee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dee8:	ed97 6a03 	vldr	s12, [r7, #12]
 800deec:	eddf 5a66 	vldr	s11, [pc, #408]	; 800e088 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800def0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800def4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800def8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800defc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800df08:	e065      	b.n	800dfd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	ee07 3a90 	vmov	s15, r3
 800df10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df14:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800e090 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800df18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df1c:	4b58      	ldr	r3, [pc, #352]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df24:	ee07 3a90 	vmov	s15, r3
 800df28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800df30:	eddf 5a55 	vldr	s11, [pc, #340]	; 800e088 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800df4c:	e043      	b.n	800dfd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	ee07 3a90 	vmov	s15, r3
 800df54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df58:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800e094 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800df5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df60:	4b47      	ldr	r3, [pc, #284]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df68:	ee07 3a90 	vmov	s15, r3
 800df6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df70:	ed97 6a03 	vldr	s12, [r7, #12]
 800df74:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e088 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800df90:	e021      	b.n	800dfd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	ee07 3a90 	vmov	s15, r3
 800df98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df9c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e08c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dfa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfa4:	4b36      	ldr	r3, [pc, #216]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfac:	ee07 3a90 	vmov	s15, r3
 800dfb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfb8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e088 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dfbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dfd4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800dfd6:	4b2a      	ldr	r3, [pc, #168]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfda:	0a5b      	lsrs	r3, r3, #9
 800dfdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfe0:	ee07 3a90 	vmov	s15, r3
 800dfe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dfec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dff0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dffc:	ee17 2a90 	vmov	r2, s15
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800e004:	4b1e      	ldr	r3, [pc, #120]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e008:	0c1b      	lsrs	r3, r3, #16
 800e00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e00e:	ee07 3a90 	vmov	s15, r3
 800e012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e01a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e01e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e02a:	ee17 2a90 	vmov	r2, s15
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800e032:	4b13      	ldr	r3, [pc, #76]	; (800e080 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e036:	0e1b      	lsrs	r3, r3, #24
 800e038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e03c:	ee07 3a90 	vmov	s15, r3
 800e040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e048:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e04c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e058:	ee17 2a90 	vmov	r2, s15
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e060:	e008      	b.n	800e074 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2200      	movs	r2, #0
 800e06c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	609a      	str	r2, [r3, #8]
}
 800e074:	bf00      	nop
 800e076:	3724      	adds	r7, #36	; 0x24
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	58024400 	.word	0x58024400
 800e084:	03d09000 	.word	0x03d09000
 800e088:	46000000 	.word	0x46000000
 800e08c:	4c742400 	.word	0x4c742400
 800e090:	4a742400 	.word	0x4a742400
 800e094:	4bbebc20 	.word	0x4bbebc20

0800e098 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e0a6:	4b53      	ldr	r3, [pc, #332]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0aa:	f003 0303 	and.w	r3, r3, #3
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	d101      	bne.n	800e0b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e099      	b.n	800e1ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e0b6:	4b4f      	ldr	r3, [pc, #316]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4a4e      	ldr	r2, [pc, #312]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e0bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e0c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0c2:	f7fa fc85 	bl	80089d0 <HAL_GetTick>
 800e0c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e0c8:	e008      	b.n	800e0dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e0ca:	f7fa fc81 	bl	80089d0 <HAL_GetTick>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	1ad3      	subs	r3, r2, r3
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	d901      	bls.n	800e0dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e0d8:	2303      	movs	r3, #3
 800e0da:	e086      	b.n	800e1ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e0dc:	4b45      	ldr	r3, [pc, #276]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1f0      	bne.n	800e0ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e0e8:	4b42      	ldr	r3, [pc, #264]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	031b      	lsls	r3, r3, #12
 800e0f6:	493f      	ldr	r1, [pc, #252]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e0f8:	4313      	orrs	r3, r2
 800e0fa:	628b      	str	r3, [r1, #40]	; 0x28
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	3b01      	subs	r3, #1
 800e102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	3b01      	subs	r3, #1
 800e10c:	025b      	lsls	r3, r3, #9
 800e10e:	b29b      	uxth	r3, r3
 800e110:	431a      	orrs	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	3b01      	subs	r3, #1
 800e118:	041b      	lsls	r3, r3, #16
 800e11a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e11e:	431a      	orrs	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	691b      	ldr	r3, [r3, #16]
 800e124:	3b01      	subs	r3, #1
 800e126:	061b      	lsls	r3, r3, #24
 800e128:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e12c:	4931      	ldr	r1, [pc, #196]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e12e:	4313      	orrs	r3, r2
 800e130:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e132:	4b30      	ldr	r3, [pc, #192]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e136:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	695b      	ldr	r3, [r3, #20]
 800e13e:	492d      	ldr	r1, [pc, #180]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e140:	4313      	orrs	r3, r2
 800e142:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e144:	4b2b      	ldr	r3, [pc, #172]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e148:	f023 0220 	bic.w	r2, r3, #32
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	699b      	ldr	r3, [r3, #24]
 800e150:	4928      	ldr	r1, [pc, #160]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e152:	4313      	orrs	r3, r2
 800e154:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e156:	4b27      	ldr	r3, [pc, #156]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15a:	4a26      	ldr	r2, [pc, #152]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e15c:	f023 0310 	bic.w	r3, r3, #16
 800e160:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e162:	4b24      	ldr	r3, [pc, #144]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e166:	4b24      	ldr	r3, [pc, #144]	; (800e1f8 <RCCEx_PLL2_Config+0x160>)
 800e168:	4013      	ands	r3, r2
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	69d2      	ldr	r2, [r2, #28]
 800e16e:	00d2      	lsls	r2, r2, #3
 800e170:	4920      	ldr	r1, [pc, #128]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e172:	4313      	orrs	r3, r2
 800e174:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e176:	4b1f      	ldr	r3, [pc, #124]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17a:	4a1e      	ldr	r2, [pc, #120]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e17c:	f043 0310 	orr.w	r3, r3, #16
 800e180:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d106      	bne.n	800e196 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e188:	4b1a      	ldr	r3, [pc, #104]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18c:	4a19      	ldr	r2, [pc, #100]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e18e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e192:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e194:	e00f      	b.n	800e1b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d106      	bne.n	800e1aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e19c:	4b15      	ldr	r3, [pc, #84]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a0:	4a14      	ldr	r2, [pc, #80]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e1a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e1a8:	e005      	b.n	800e1b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e1aa:	4b12      	ldr	r3, [pc, #72]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ae:	4a11      	ldr	r2, [pc, #68]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e1b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e1b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e1b6:	4b0f      	ldr	r3, [pc, #60]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4a0e      	ldr	r2, [pc, #56]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e1bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e1c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e1c2:	f7fa fc05 	bl	80089d0 <HAL_GetTick>
 800e1c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e1c8:	e008      	b.n	800e1dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e1ca:	f7fa fc01 	bl	80089d0 <HAL_GetTick>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	1ad3      	subs	r3, r2, r3
 800e1d4:	2b02      	cmp	r3, #2
 800e1d6:	d901      	bls.n	800e1dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e1d8:	2303      	movs	r3, #3
 800e1da:	e006      	b.n	800e1ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e1dc:	4b05      	ldr	r3, [pc, #20]	; (800e1f4 <RCCEx_PLL2_Config+0x15c>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d0f0      	beq.n	800e1ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	58024400 	.word	0x58024400
 800e1f8:	ffff0007 	.word	0xffff0007

0800e1fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b084      	sub	sp, #16
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e206:	2300      	movs	r3, #0
 800e208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e20a:	4b53      	ldr	r3, [pc, #332]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e20e:	f003 0303 	and.w	r3, r3, #3
 800e212:	2b03      	cmp	r3, #3
 800e214:	d101      	bne.n	800e21a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e216:	2301      	movs	r3, #1
 800e218:	e099      	b.n	800e34e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e21a:	4b4f      	ldr	r3, [pc, #316]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4a4e      	ldr	r2, [pc, #312]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e226:	f7fa fbd3 	bl	80089d0 <HAL_GetTick>
 800e22a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e22c:	e008      	b.n	800e240 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e22e:	f7fa fbcf 	bl	80089d0 <HAL_GetTick>
 800e232:	4602      	mov	r2, r0
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	1ad3      	subs	r3, r2, r3
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d901      	bls.n	800e240 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e23c:	2303      	movs	r3, #3
 800e23e:	e086      	b.n	800e34e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e240:	4b45      	ldr	r3, [pc, #276]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d1f0      	bne.n	800e22e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e24c:	4b42      	ldr	r3, [pc, #264]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e250:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	051b      	lsls	r3, r3, #20
 800e25a:	493f      	ldr	r1, [pc, #252]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e25c:	4313      	orrs	r3, r2
 800e25e:	628b      	str	r3, [r1, #40]	; 0x28
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	3b01      	subs	r3, #1
 800e266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	3b01      	subs	r3, #1
 800e270:	025b      	lsls	r3, r3, #9
 800e272:	b29b      	uxth	r3, r3
 800e274:	431a      	orrs	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	68db      	ldr	r3, [r3, #12]
 800e27a:	3b01      	subs	r3, #1
 800e27c:	041b      	lsls	r3, r3, #16
 800e27e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e282:	431a      	orrs	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	3b01      	subs	r3, #1
 800e28a:	061b      	lsls	r3, r3, #24
 800e28c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e290:	4931      	ldr	r1, [pc, #196]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e292:	4313      	orrs	r3, r2
 800e294:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e296:	4b30      	ldr	r3, [pc, #192]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	695b      	ldr	r3, [r3, #20]
 800e2a2:	492d      	ldr	r1, [pc, #180]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e2a8:	4b2b      	ldr	r3, [pc, #172]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	4928      	ldr	r1, [pc, #160]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e2ba:	4b27      	ldr	r3, [pc, #156]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2be:	4a26      	ldr	r2, [pc, #152]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e2c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e2c6:	4b24      	ldr	r3, [pc, #144]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e2c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2ca:	4b24      	ldr	r3, [pc, #144]	; (800e35c <RCCEx_PLL3_Config+0x160>)
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	69d2      	ldr	r2, [r2, #28]
 800e2d2:	00d2      	lsls	r2, r2, #3
 800e2d4:	4920      	ldr	r1, [pc, #128]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e2da:	4b1f      	ldr	r3, [pc, #124]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2de:	4a1e      	ldr	r2, [pc, #120]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e2e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d106      	bne.n	800e2fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e2ec:	4b1a      	ldr	r3, [pc, #104]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f0:	4a19      	ldr	r2, [pc, #100]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e2f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e2f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e2f8:	e00f      	b.n	800e31a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d106      	bne.n	800e30e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e300:	4b15      	ldr	r3, [pc, #84]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e304:	4a14      	ldr	r2, [pc, #80]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e306:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e30a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e30c:	e005      	b.n	800e31a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e30e:	4b12      	ldr	r3, [pc, #72]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e312:	4a11      	ldr	r2, [pc, #68]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e318:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e31a:	4b0f      	ldr	r3, [pc, #60]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a0e      	ldr	r2, [pc, #56]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e326:	f7fa fb53 	bl	80089d0 <HAL_GetTick>
 800e32a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e32c:	e008      	b.n	800e340 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e32e:	f7fa fb4f 	bl	80089d0 <HAL_GetTick>
 800e332:	4602      	mov	r2, r0
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	2b02      	cmp	r3, #2
 800e33a:	d901      	bls.n	800e340 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e33c:	2303      	movs	r3, #3
 800e33e:	e006      	b.n	800e34e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e340:	4b05      	ldr	r3, [pc, #20]	; (800e358 <RCCEx_PLL3_Config+0x15c>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d0f0      	beq.n	800e32e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	58024400 	.word	0x58024400
 800e35c:	ffff0007 	.word	0xffff0007

0800e360 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d101      	bne.n	800e372 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e36e:	2301      	movs	r3, #1
 800e370:	e0f1      	b.n	800e556 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2200      	movs	r2, #0
 800e376:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a78      	ldr	r2, [pc, #480]	; (800e560 <HAL_SPI_Init+0x200>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d00f      	beq.n	800e3a2 <HAL_SPI_Init+0x42>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a77      	ldr	r2, [pc, #476]	; (800e564 <HAL_SPI_Init+0x204>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d00a      	beq.n	800e3a2 <HAL_SPI_Init+0x42>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a75      	ldr	r2, [pc, #468]	; (800e568 <HAL_SPI_Init+0x208>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d005      	beq.n	800e3a2 <HAL_SPI_Init+0x42>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	2b0f      	cmp	r3, #15
 800e39c:	d901      	bls.n	800e3a2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	e0d9      	b.n	800e556 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f8e2 	bl	800e56c <SPI_GetPacketSize>
 800e3a8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4a6c      	ldr	r2, [pc, #432]	; (800e560 <HAL_SPI_Init+0x200>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d00c      	beq.n	800e3ce <HAL_SPI_Init+0x6e>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a6a      	ldr	r2, [pc, #424]	; (800e564 <HAL_SPI_Init+0x204>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d007      	beq.n	800e3ce <HAL_SPI_Init+0x6e>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a69      	ldr	r2, [pc, #420]	; (800e568 <HAL_SPI_Init+0x208>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d002      	beq.n	800e3ce <HAL_SPI_Init+0x6e>
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2b08      	cmp	r3, #8
 800e3cc:	d811      	bhi.n	800e3f2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e3d2:	4a63      	ldr	r2, [pc, #396]	; (800e560 <HAL_SPI_Init+0x200>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d009      	beq.n	800e3ec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a61      	ldr	r2, [pc, #388]	; (800e564 <HAL_SPI_Init+0x204>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d004      	beq.n	800e3ec <HAL_SPI_Init+0x8c>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4a60      	ldr	r2, [pc, #384]	; (800e568 <HAL_SPI_Init+0x208>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d104      	bne.n	800e3f6 <HAL_SPI_Init+0x96>
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2b10      	cmp	r3, #16
 800e3f0:	d901      	bls.n	800e3f6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	e0af      	b.n	800e556 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d106      	bne.n	800e410 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2200      	movs	r2, #0
 800e406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7f8 fdc4 	bl	8006f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2202      	movs	r2, #2
 800e414:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f022 0201 	bic.w	r2, r2, #1
 800e426:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e432:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	699b      	ldr	r3, [r3, #24]
 800e438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e43c:	d119      	bne.n	800e472 <HAL_SPI_Init+0x112>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e446:	d103      	bne.n	800e450 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d008      	beq.n	800e462 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10c      	bne.n	800e472 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e45c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e460:	d107      	bne.n	800e472 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	681a      	ldr	r2, [r3, #0]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e470:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	69da      	ldr	r2, [r3, #28]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e47a:	431a      	orrs	r2, r3
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	431a      	orrs	r2, r3
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e484:	ea42 0103 	orr.w	r1, r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	68da      	ldr	r2, [r3, #12]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	430a      	orrs	r2, r1
 800e492:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49c:	431a      	orrs	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a2:	431a      	orrs	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	431a      	orrs	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	691b      	ldr	r3, [r3, #16]
 800e4ae:	431a      	orrs	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	695b      	ldr	r3, [r3, #20]
 800e4b4:	431a      	orrs	r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6a1b      	ldr	r3, [r3, #32]
 800e4ba:	431a      	orrs	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	431a      	orrs	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4c6:	431a      	orrs	r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	431a      	orrs	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4d2:	ea42 0103 	orr.w	r1, r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	430a      	orrs	r2, r1
 800e4e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d113      	bne.n	800e512 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	689b      	ldr	r3, [r3, #8]
 800e4f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e510:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f022 0201 	bic.w	r2, r2, #1
 800e520:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00a      	beq.n	800e544 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	430a      	orrs	r2, r1
 800e542:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2201      	movs	r2, #1
 800e550:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	40013000 	.word	0x40013000
 800e564:	40003800 	.word	0x40003800
 800e568:	40003c00 	.word	0x40003c00

0800e56c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b085      	sub	sp, #20
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e578:	095b      	lsrs	r3, r3, #5
 800e57a:	3301      	adds	r3, #1
 800e57c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	3301      	adds	r3, #1
 800e584:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	3307      	adds	r3, #7
 800e58a:	08db      	lsrs	r3, r3, #3
 800e58c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	68fa      	ldr	r2, [r7, #12]
 800e592:	fb02 f303 	mul.w	r3, r2, r3
}
 800e596:	4618      	mov	r0, r3
 800e598:	3714      	adds	r7, #20
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr

0800e5a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b082      	sub	sp, #8
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d101      	bne.n	800e5b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	e049      	b.n	800e648 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5ba:	b2db      	uxtb	r3, r3
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d106      	bne.n	800e5ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7f9 fc0d 	bl	8007de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2202      	movs	r2, #2
 800e5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	3304      	adds	r3, #4
 800e5de:	4619      	mov	r1, r3
 800e5e0:	4610      	mov	r0, r2
 800e5e2:	f000 fbbf 	bl	800ed64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2201      	movs	r2, #1
 800e602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2201      	movs	r2, #1
 800e60a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2201      	movs	r2, #1
 800e61a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2201      	movs	r2, #1
 800e622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2201      	movs	r2, #1
 800e62a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2201      	movs	r2, #1
 800e63a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2201      	movs	r2, #1
 800e642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3708      	adds	r7, #8
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d101      	bne.n	800e662 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e65e:	2301      	movs	r3, #1
 800e660:	e049      	b.n	800e6f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d106      	bne.n	800e67c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 f841 	bl	800e6fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2202      	movs	r2, #2
 800e680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	3304      	adds	r3, #4
 800e68c:	4619      	mov	r1, r3
 800e68e:	4610      	mov	r0, r2
 800e690:	f000 fb68 	bl	800ed64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2201      	movs	r2, #1
 800e698:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e6f4:	2300      	movs	r3, #0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e6fe:	b480      	push	{r7}
 800e700:	b083      	sub	sp, #12
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e706:	bf00      	nop
 800e708:	370c      	adds	r7, #12
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr
	...

0800e714 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d109      	bne.n	800e738 <HAL_TIM_PWM_Start+0x24>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	bf14      	ite	ne
 800e730:	2301      	movne	r3, #1
 800e732:	2300      	moveq	r3, #0
 800e734:	b2db      	uxtb	r3, r3
 800e736:	e03c      	b.n	800e7b2 <HAL_TIM_PWM_Start+0x9e>
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	2b04      	cmp	r3, #4
 800e73c:	d109      	bne.n	800e752 <HAL_TIM_PWM_Start+0x3e>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e744:	b2db      	uxtb	r3, r3
 800e746:	2b01      	cmp	r3, #1
 800e748:	bf14      	ite	ne
 800e74a:	2301      	movne	r3, #1
 800e74c:	2300      	moveq	r3, #0
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	e02f      	b.n	800e7b2 <HAL_TIM_PWM_Start+0x9e>
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	2b08      	cmp	r3, #8
 800e756:	d109      	bne.n	800e76c <HAL_TIM_PWM_Start+0x58>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	2b01      	cmp	r3, #1
 800e762:	bf14      	ite	ne
 800e764:	2301      	movne	r3, #1
 800e766:	2300      	moveq	r3, #0
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	e022      	b.n	800e7b2 <HAL_TIM_PWM_Start+0x9e>
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	2b0c      	cmp	r3, #12
 800e770:	d109      	bne.n	800e786 <HAL_TIM_PWM_Start+0x72>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e778:	b2db      	uxtb	r3, r3
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	bf14      	ite	ne
 800e77e:	2301      	movne	r3, #1
 800e780:	2300      	moveq	r3, #0
 800e782:	b2db      	uxtb	r3, r3
 800e784:	e015      	b.n	800e7b2 <HAL_TIM_PWM_Start+0x9e>
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	2b10      	cmp	r3, #16
 800e78a:	d109      	bne.n	800e7a0 <HAL_TIM_PWM_Start+0x8c>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b01      	cmp	r3, #1
 800e796:	bf14      	ite	ne
 800e798:	2301      	movne	r3, #1
 800e79a:	2300      	moveq	r3, #0
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	e008      	b.n	800e7b2 <HAL_TIM_PWM_Start+0x9e>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	bf14      	ite	ne
 800e7ac:	2301      	movne	r3, #1
 800e7ae:	2300      	moveq	r3, #0
 800e7b0:	b2db      	uxtb	r3, r3
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d001      	beq.n	800e7ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e0ab      	b.n	800e912 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d104      	bne.n	800e7ca <HAL_TIM_PWM_Start+0xb6>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e7c8:	e023      	b.n	800e812 <HAL_TIM_PWM_Start+0xfe>
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2b04      	cmp	r3, #4
 800e7ce:	d104      	bne.n	800e7da <HAL_TIM_PWM_Start+0xc6>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2202      	movs	r2, #2
 800e7d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e7d8:	e01b      	b.n	800e812 <HAL_TIM_PWM_Start+0xfe>
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	2b08      	cmp	r3, #8
 800e7de:	d104      	bne.n	800e7ea <HAL_TIM_PWM_Start+0xd6>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2202      	movs	r2, #2
 800e7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e7e8:	e013      	b.n	800e812 <HAL_TIM_PWM_Start+0xfe>
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	2b0c      	cmp	r3, #12
 800e7ee:	d104      	bne.n	800e7fa <HAL_TIM_PWM_Start+0xe6>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e7f8:	e00b      	b.n	800e812 <HAL_TIM_PWM_Start+0xfe>
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	2b10      	cmp	r3, #16
 800e7fe:	d104      	bne.n	800e80a <HAL_TIM_PWM_Start+0xf6>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2202      	movs	r2, #2
 800e804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e808:	e003      	b.n	800e812 <HAL_TIM_PWM_Start+0xfe>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2202      	movs	r2, #2
 800e80e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2201      	movs	r2, #1
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 febc 	bl	800f598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a3d      	ldr	r2, [pc, #244]	; (800e91c <HAL_TIM_PWM_Start+0x208>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d013      	beq.n	800e852 <HAL_TIM_PWM_Start+0x13e>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4a3c      	ldr	r2, [pc, #240]	; (800e920 <HAL_TIM_PWM_Start+0x20c>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d00e      	beq.n	800e852 <HAL_TIM_PWM_Start+0x13e>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a3a      	ldr	r2, [pc, #232]	; (800e924 <HAL_TIM_PWM_Start+0x210>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d009      	beq.n	800e852 <HAL_TIM_PWM_Start+0x13e>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a39      	ldr	r2, [pc, #228]	; (800e928 <HAL_TIM_PWM_Start+0x214>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d004      	beq.n	800e852 <HAL_TIM_PWM_Start+0x13e>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a37      	ldr	r2, [pc, #220]	; (800e92c <HAL_TIM_PWM_Start+0x218>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d101      	bne.n	800e856 <HAL_TIM_PWM_Start+0x142>
 800e852:	2301      	movs	r3, #1
 800e854:	e000      	b.n	800e858 <HAL_TIM_PWM_Start+0x144>
 800e856:	2300      	movs	r3, #0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d007      	beq.n	800e86c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e86a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a2a      	ldr	r2, [pc, #168]	; (800e91c <HAL_TIM_PWM_Start+0x208>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d02c      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1bc>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e87e:	d027      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1bc>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a2a      	ldr	r2, [pc, #168]	; (800e930 <HAL_TIM_PWM_Start+0x21c>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d022      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1bc>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a29      	ldr	r2, [pc, #164]	; (800e934 <HAL_TIM_PWM_Start+0x220>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d01d      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1bc>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a27      	ldr	r2, [pc, #156]	; (800e938 <HAL_TIM_PWM_Start+0x224>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d018      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1bc>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a1f      	ldr	r2, [pc, #124]	; (800e920 <HAL_TIM_PWM_Start+0x20c>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d013      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1bc>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a23      	ldr	r2, [pc, #140]	; (800e93c <HAL_TIM_PWM_Start+0x228>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d00e      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1bc>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4a1b      	ldr	r2, [pc, #108]	; (800e924 <HAL_TIM_PWM_Start+0x210>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d009      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1bc>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a1f      	ldr	r2, [pc, #124]	; (800e940 <HAL_TIM_PWM_Start+0x22c>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d004      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1bc>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4a1e      	ldr	r2, [pc, #120]	; (800e944 <HAL_TIM_PWM_Start+0x230>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d115      	bne.n	800e8fc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	689a      	ldr	r2, [r3, #8]
 800e8d6:	4b1c      	ldr	r3, [pc, #112]	; (800e948 <HAL_TIM_PWM_Start+0x234>)
 800e8d8:	4013      	ands	r3, r2
 800e8da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b06      	cmp	r3, #6
 800e8e0:	d015      	beq.n	800e90e <HAL_TIM_PWM_Start+0x1fa>
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8e8:	d011      	beq.n	800e90e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f042 0201 	orr.w	r2, r2, #1
 800e8f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8fa:	e008      	b.n	800e90e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f042 0201 	orr.w	r2, r2, #1
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	e000      	b.n	800e910 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e90e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	40010000 	.word	0x40010000
 800e920:	40010400 	.word	0x40010400
 800e924:	40014000 	.word	0x40014000
 800e928:	40014400 	.word	0x40014400
 800e92c:	40014800 	.word	0x40014800
 800e930:	40000400 	.word	0x40000400
 800e934:	40000800 	.word	0x40000800
 800e938:	40000c00 	.word	0x40000c00
 800e93c:	40001800 	.word	0x40001800
 800e940:	4000e000 	.word	0x4000e000
 800e944:	4000e400 	.word	0x4000e400
 800e948:	00010007 	.word	0x00010007

0800e94c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b086      	sub	sp, #24
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e958:	2300      	movs	r3, #0
 800e95a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e962:	2b01      	cmp	r3, #1
 800e964:	d101      	bne.n	800e96a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e966:	2302      	movs	r3, #2
 800e968:	e0ff      	b.n	800eb6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2201      	movs	r2, #1
 800e96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2b14      	cmp	r3, #20
 800e976:	f200 80f0 	bhi.w	800eb5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e97a:	a201      	add	r2, pc, #4	; (adr r2, 800e980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e980:	0800e9d5 	.word	0x0800e9d5
 800e984:	0800eb5b 	.word	0x0800eb5b
 800e988:	0800eb5b 	.word	0x0800eb5b
 800e98c:	0800eb5b 	.word	0x0800eb5b
 800e990:	0800ea15 	.word	0x0800ea15
 800e994:	0800eb5b 	.word	0x0800eb5b
 800e998:	0800eb5b 	.word	0x0800eb5b
 800e99c:	0800eb5b 	.word	0x0800eb5b
 800e9a0:	0800ea57 	.word	0x0800ea57
 800e9a4:	0800eb5b 	.word	0x0800eb5b
 800e9a8:	0800eb5b 	.word	0x0800eb5b
 800e9ac:	0800eb5b 	.word	0x0800eb5b
 800e9b0:	0800ea97 	.word	0x0800ea97
 800e9b4:	0800eb5b 	.word	0x0800eb5b
 800e9b8:	0800eb5b 	.word	0x0800eb5b
 800e9bc:	0800eb5b 	.word	0x0800eb5b
 800e9c0:	0800ead9 	.word	0x0800ead9
 800e9c4:	0800eb5b 	.word	0x0800eb5b
 800e9c8:	0800eb5b 	.word	0x0800eb5b
 800e9cc:	0800eb5b 	.word	0x0800eb5b
 800e9d0:	0800eb19 	.word	0x0800eb19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	68b9      	ldr	r1, [r7, #8]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f000 fa68 	bl	800eeb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	699a      	ldr	r2, [r3, #24]
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f042 0208 	orr.w	r2, r2, #8
 800e9ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	699a      	ldr	r2, [r3, #24]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f022 0204 	bic.w	r2, r2, #4
 800e9fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	6999      	ldr	r1, [r3, #24]
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	691a      	ldr	r2, [r3, #16]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	430a      	orrs	r2, r1
 800ea10:	619a      	str	r2, [r3, #24]
      break;
 800ea12:	e0a5      	b.n	800eb60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	68b9      	ldr	r1, [r7, #8]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f000 fad8 	bl	800efd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	699a      	ldr	r2, [r3, #24]
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	699a      	ldr	r2, [r3, #24]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	6999      	ldr	r1, [r3, #24]
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	691b      	ldr	r3, [r3, #16]
 800ea4a:	021a      	lsls	r2, r3, #8
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	430a      	orrs	r2, r1
 800ea52:	619a      	str	r2, [r3, #24]
      break;
 800ea54:	e084      	b.n	800eb60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	68b9      	ldr	r1, [r7, #8]
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f000 fb41 	bl	800f0e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	69da      	ldr	r2, [r3, #28]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f042 0208 	orr.w	r2, r2, #8
 800ea70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	69da      	ldr	r2, [r3, #28]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f022 0204 	bic.w	r2, r2, #4
 800ea80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	69d9      	ldr	r1, [r3, #28]
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	691a      	ldr	r2, [r3, #16]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	430a      	orrs	r2, r1
 800ea92:	61da      	str	r2, [r3, #28]
      break;
 800ea94:	e064      	b.n	800eb60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	68b9      	ldr	r1, [r7, #8]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f000 fba9 	bl	800f1f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	69da      	ldr	r2, [r3, #28]
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	69da      	ldr	r2, [r3, #28]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	69d9      	ldr	r1, [r3, #28]
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	691b      	ldr	r3, [r3, #16]
 800eacc:	021a      	lsls	r2, r3, #8
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	430a      	orrs	r2, r1
 800ead4:	61da      	str	r2, [r3, #28]
      break;
 800ead6:	e043      	b.n	800eb60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	68b9      	ldr	r1, [r7, #8]
 800eade:	4618      	mov	r0, r3
 800eae0:	f000 fbf2 	bl	800f2c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f042 0208 	orr.w	r2, r2, #8
 800eaf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f022 0204 	bic.w	r2, r2, #4
 800eb02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	691a      	ldr	r2, [r3, #16]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	430a      	orrs	r2, r1
 800eb14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eb16:	e023      	b.n	800eb60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	68b9      	ldr	r1, [r7, #8]
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f000 fc36 	bl	800f390 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	691b      	ldr	r3, [r3, #16]
 800eb4e:	021a      	lsls	r2, r3, #8
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	430a      	orrs	r2, r1
 800eb56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eb58:	e002      	b.n	800eb60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	75fb      	strb	r3, [r7, #23]
      break;
 800eb5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eb68:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3718      	adds	r7, #24
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop

0800eb74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d101      	bne.n	800eb90 <HAL_TIM_ConfigClockSource+0x1c>
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	e0dc      	b.n	800ed4a <HAL_TIM_ConfigClockSource+0x1d6>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	689b      	ldr	r3, [r3, #8]
 800eba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eba8:	68ba      	ldr	r2, [r7, #8]
 800ebaa:	4b6a      	ldr	r3, [pc, #424]	; (800ed54 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ebac:	4013      	ands	r3, r2
 800ebae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ebb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a64      	ldr	r2, [pc, #400]	; (800ed58 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	f000 80a9 	beq.w	800ed1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ebcc:	4a62      	ldr	r2, [pc, #392]	; (800ed58 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	f200 80ae 	bhi.w	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebd4:	4a61      	ldr	r2, [pc, #388]	; (800ed5c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	f000 80a1 	beq.w	800ed1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ebdc:	4a5f      	ldr	r2, [pc, #380]	; (800ed5c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	f200 80a6 	bhi.w	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebe4:	4a5e      	ldr	r2, [pc, #376]	; (800ed60 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	f000 8099 	beq.w	800ed1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ebec:	4a5c      	ldr	r2, [pc, #368]	; (800ed60 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	f200 809e 	bhi.w	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ebf8:	f000 8091 	beq.w	800ed1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ebfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ec00:	f200 8096 	bhi.w	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec08:	f000 8089 	beq.w	800ed1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ec0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec10:	f200 808e 	bhi.w	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec18:	d03e      	beq.n	800ec98 <HAL_TIM_ConfigClockSource+0x124>
 800ec1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec1e:	f200 8087 	bhi.w	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec26:	f000 8086 	beq.w	800ed36 <HAL_TIM_ConfigClockSource+0x1c2>
 800ec2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec2e:	d87f      	bhi.n	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec30:	2b70      	cmp	r3, #112	; 0x70
 800ec32:	d01a      	beq.n	800ec6a <HAL_TIM_ConfigClockSource+0xf6>
 800ec34:	2b70      	cmp	r3, #112	; 0x70
 800ec36:	d87b      	bhi.n	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec38:	2b60      	cmp	r3, #96	; 0x60
 800ec3a:	d050      	beq.n	800ecde <HAL_TIM_ConfigClockSource+0x16a>
 800ec3c:	2b60      	cmp	r3, #96	; 0x60
 800ec3e:	d877      	bhi.n	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec40:	2b50      	cmp	r3, #80	; 0x50
 800ec42:	d03c      	beq.n	800ecbe <HAL_TIM_ConfigClockSource+0x14a>
 800ec44:	2b50      	cmp	r3, #80	; 0x50
 800ec46:	d873      	bhi.n	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec48:	2b40      	cmp	r3, #64	; 0x40
 800ec4a:	d058      	beq.n	800ecfe <HAL_TIM_ConfigClockSource+0x18a>
 800ec4c:	2b40      	cmp	r3, #64	; 0x40
 800ec4e:	d86f      	bhi.n	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec50:	2b30      	cmp	r3, #48	; 0x30
 800ec52:	d064      	beq.n	800ed1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ec54:	2b30      	cmp	r3, #48	; 0x30
 800ec56:	d86b      	bhi.n	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec58:	2b20      	cmp	r3, #32
 800ec5a:	d060      	beq.n	800ed1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ec5c:	2b20      	cmp	r3, #32
 800ec5e:	d867      	bhi.n	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d05c      	beq.n	800ed1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ec64:	2b10      	cmp	r3, #16
 800ec66:	d05a      	beq.n	800ed1e <HAL_TIM_ConfigClockSource+0x1aa>
 800ec68:	e062      	b.n	800ed30 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6818      	ldr	r0, [r3, #0]
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	6899      	ldr	r1, [r3, #8]
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	685a      	ldr	r2, [r3, #4]
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	68db      	ldr	r3, [r3, #12]
 800ec7a:	f000 fc6d 	bl	800f558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	689b      	ldr	r3, [r3, #8]
 800ec84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ec8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	68ba      	ldr	r2, [r7, #8]
 800ec94:	609a      	str	r2, [r3, #8]
      break;
 800ec96:	e04f      	b.n	800ed38 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6818      	ldr	r0, [r3, #0]
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	6899      	ldr	r1, [r3, #8]
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	685a      	ldr	r2, [r3, #4]
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	68db      	ldr	r3, [r3, #12]
 800eca8:	f000 fc56 	bl	800f558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	689a      	ldr	r2, [r3, #8]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ecba:	609a      	str	r2, [r3, #8]
      break;
 800ecbc:	e03c      	b.n	800ed38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6818      	ldr	r0, [r3, #0]
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	6859      	ldr	r1, [r3, #4]
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	68db      	ldr	r3, [r3, #12]
 800ecca:	461a      	mov	r2, r3
 800eccc:	f000 fbc6 	bl	800f45c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2150      	movs	r1, #80	; 0x50
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f000 fc20 	bl	800f51c <TIM_ITRx_SetConfig>
      break;
 800ecdc:	e02c      	b.n	800ed38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6818      	ldr	r0, [r3, #0]
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	6859      	ldr	r1, [r3, #4]
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	68db      	ldr	r3, [r3, #12]
 800ecea:	461a      	mov	r2, r3
 800ecec:	f000 fbe5 	bl	800f4ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2160      	movs	r1, #96	; 0x60
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f000 fc10 	bl	800f51c <TIM_ITRx_SetConfig>
      break;
 800ecfc:	e01c      	b.n	800ed38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6818      	ldr	r0, [r3, #0]
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	6859      	ldr	r1, [r3, #4]
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	f000 fba6 	bl	800f45c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2140      	movs	r1, #64	; 0x40
 800ed16:	4618      	mov	r0, r3
 800ed18:	f000 fc00 	bl	800f51c <TIM_ITRx_SetConfig>
      break;
 800ed1c:	e00c      	b.n	800ed38 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4619      	mov	r1, r3
 800ed28:	4610      	mov	r0, r2
 800ed2a:	f000 fbf7 	bl	800f51c <TIM_ITRx_SetConfig>
      break;
 800ed2e:	e003      	b.n	800ed38 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ed30:	2301      	movs	r3, #1
 800ed32:	73fb      	strb	r3, [r7, #15]
      break;
 800ed34:	e000      	b.n	800ed38 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ed36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ed48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	ffceff88 	.word	0xffceff88
 800ed58:	00100040 	.word	0x00100040
 800ed5c:	00100030 	.word	0x00100030
 800ed60:	00100020 	.word	0x00100020

0800ed64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b085      	sub	sp, #20
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4a44      	ldr	r2, [pc, #272]	; (800ee88 <TIM_Base_SetConfig+0x124>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d013      	beq.n	800eda4 <TIM_Base_SetConfig+0x40>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed82:	d00f      	beq.n	800eda4 <TIM_Base_SetConfig+0x40>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4a41      	ldr	r2, [pc, #260]	; (800ee8c <TIM_Base_SetConfig+0x128>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d00b      	beq.n	800eda4 <TIM_Base_SetConfig+0x40>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4a40      	ldr	r2, [pc, #256]	; (800ee90 <TIM_Base_SetConfig+0x12c>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d007      	beq.n	800eda4 <TIM_Base_SetConfig+0x40>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	4a3f      	ldr	r2, [pc, #252]	; (800ee94 <TIM_Base_SetConfig+0x130>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d003      	beq.n	800eda4 <TIM_Base_SetConfig+0x40>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4a3e      	ldr	r2, [pc, #248]	; (800ee98 <TIM_Base_SetConfig+0x134>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d108      	bne.n	800edb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	68fa      	ldr	r2, [r7, #12]
 800edb2:	4313      	orrs	r3, r2
 800edb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	4a33      	ldr	r2, [pc, #204]	; (800ee88 <TIM_Base_SetConfig+0x124>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d027      	beq.n	800ee0e <TIM_Base_SetConfig+0xaa>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edc4:	d023      	beq.n	800ee0e <TIM_Base_SetConfig+0xaa>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4a30      	ldr	r2, [pc, #192]	; (800ee8c <TIM_Base_SetConfig+0x128>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d01f      	beq.n	800ee0e <TIM_Base_SetConfig+0xaa>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4a2f      	ldr	r2, [pc, #188]	; (800ee90 <TIM_Base_SetConfig+0x12c>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d01b      	beq.n	800ee0e <TIM_Base_SetConfig+0xaa>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4a2e      	ldr	r2, [pc, #184]	; (800ee94 <TIM_Base_SetConfig+0x130>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d017      	beq.n	800ee0e <TIM_Base_SetConfig+0xaa>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	4a2d      	ldr	r2, [pc, #180]	; (800ee98 <TIM_Base_SetConfig+0x134>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d013      	beq.n	800ee0e <TIM_Base_SetConfig+0xaa>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4a2c      	ldr	r2, [pc, #176]	; (800ee9c <TIM_Base_SetConfig+0x138>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d00f      	beq.n	800ee0e <TIM_Base_SetConfig+0xaa>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4a2b      	ldr	r2, [pc, #172]	; (800eea0 <TIM_Base_SetConfig+0x13c>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d00b      	beq.n	800ee0e <TIM_Base_SetConfig+0xaa>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4a2a      	ldr	r2, [pc, #168]	; (800eea4 <TIM_Base_SetConfig+0x140>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d007      	beq.n	800ee0e <TIM_Base_SetConfig+0xaa>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4a29      	ldr	r2, [pc, #164]	; (800eea8 <TIM_Base_SetConfig+0x144>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d003      	beq.n	800ee0e <TIM_Base_SetConfig+0xaa>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4a28      	ldr	r2, [pc, #160]	; (800eeac <TIM_Base_SetConfig+0x148>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d108      	bne.n	800ee20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	68fa      	ldr	r2, [r7, #12]
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	695b      	ldr	r3, [r3, #20]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	689a      	ldr	r2, [r3, #8]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4a10      	ldr	r2, [pc, #64]	; (800ee88 <TIM_Base_SetConfig+0x124>)
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d00f      	beq.n	800ee6c <TIM_Base_SetConfig+0x108>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	4a12      	ldr	r2, [pc, #72]	; (800ee98 <TIM_Base_SetConfig+0x134>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d00b      	beq.n	800ee6c <TIM_Base_SetConfig+0x108>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4a11      	ldr	r2, [pc, #68]	; (800ee9c <TIM_Base_SetConfig+0x138>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d007      	beq.n	800ee6c <TIM_Base_SetConfig+0x108>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	4a10      	ldr	r2, [pc, #64]	; (800eea0 <TIM_Base_SetConfig+0x13c>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d003      	beq.n	800ee6c <TIM_Base_SetConfig+0x108>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4a0f      	ldr	r2, [pc, #60]	; (800eea4 <TIM_Base_SetConfig+0x140>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d103      	bne.n	800ee74 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	691a      	ldr	r2, [r3, #16]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2201      	movs	r2, #1
 800ee78:	615a      	str	r2, [r3, #20]
}
 800ee7a:	bf00      	nop
 800ee7c:	3714      	adds	r7, #20
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	40010000 	.word	0x40010000
 800ee8c:	40000400 	.word	0x40000400
 800ee90:	40000800 	.word	0x40000800
 800ee94:	40000c00 	.word	0x40000c00
 800ee98:	40010400 	.word	0x40010400
 800ee9c:	40014000 	.word	0x40014000
 800eea0:	40014400 	.word	0x40014400
 800eea4:	40014800 	.word	0x40014800
 800eea8:	4000e000 	.word	0x4000e000
 800eeac:	4000e400 	.word	0x4000e400

0800eeb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b087      	sub	sp, #28
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6a1b      	ldr	r3, [r3, #32]
 800eebe:	f023 0201 	bic.w	r2, r3, #1
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6a1b      	ldr	r3, [r3, #32]
 800eeca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	699b      	ldr	r3, [r3, #24]
 800eed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eed8:	68fa      	ldr	r2, [r7, #12]
 800eeda:	4b37      	ldr	r3, [pc, #220]	; (800efb8 <TIM_OC1_SetConfig+0x108>)
 800eedc:	4013      	ands	r3, r2
 800eede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	f023 0303 	bic.w	r3, r3, #3
 800eee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	4313      	orrs	r3, r2
 800eef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	f023 0302 	bic.w	r3, r3, #2
 800eef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	4313      	orrs	r3, r2
 800ef02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a2d      	ldr	r2, [pc, #180]	; (800efbc <TIM_OC1_SetConfig+0x10c>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d00f      	beq.n	800ef2c <TIM_OC1_SetConfig+0x7c>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a2c      	ldr	r2, [pc, #176]	; (800efc0 <TIM_OC1_SetConfig+0x110>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d00b      	beq.n	800ef2c <TIM_OC1_SetConfig+0x7c>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a2b      	ldr	r2, [pc, #172]	; (800efc4 <TIM_OC1_SetConfig+0x114>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d007      	beq.n	800ef2c <TIM_OC1_SetConfig+0x7c>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a2a      	ldr	r2, [pc, #168]	; (800efc8 <TIM_OC1_SetConfig+0x118>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d003      	beq.n	800ef2c <TIM_OC1_SetConfig+0x7c>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	4a29      	ldr	r2, [pc, #164]	; (800efcc <TIM_OC1_SetConfig+0x11c>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d10c      	bne.n	800ef46 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	f023 0308 	bic.w	r3, r3, #8
 800ef32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	697a      	ldr	r2, [r7, #20]
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	f023 0304 	bic.w	r3, r3, #4
 800ef44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a1c      	ldr	r2, [pc, #112]	; (800efbc <TIM_OC1_SetConfig+0x10c>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d00f      	beq.n	800ef6e <TIM_OC1_SetConfig+0xbe>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a1b      	ldr	r2, [pc, #108]	; (800efc0 <TIM_OC1_SetConfig+0x110>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d00b      	beq.n	800ef6e <TIM_OC1_SetConfig+0xbe>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a1a      	ldr	r2, [pc, #104]	; (800efc4 <TIM_OC1_SetConfig+0x114>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d007      	beq.n	800ef6e <TIM_OC1_SetConfig+0xbe>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a19      	ldr	r2, [pc, #100]	; (800efc8 <TIM_OC1_SetConfig+0x118>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d003      	beq.n	800ef6e <TIM_OC1_SetConfig+0xbe>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4a18      	ldr	r2, [pc, #96]	; (800efcc <TIM_OC1_SetConfig+0x11c>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d111      	bne.n	800ef92 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ef7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	695b      	ldr	r3, [r3, #20]
 800ef82:	693a      	ldr	r2, [r7, #16]
 800ef84:	4313      	orrs	r3, r2
 800ef86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	699b      	ldr	r3, [r3, #24]
 800ef8c:	693a      	ldr	r2, [r7, #16]
 800ef8e:	4313      	orrs	r3, r2
 800ef90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	693a      	ldr	r2, [r7, #16]
 800ef96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	68fa      	ldr	r2, [r7, #12]
 800ef9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	685a      	ldr	r2, [r3, #4]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	697a      	ldr	r2, [r7, #20]
 800efaa:	621a      	str	r2, [r3, #32]
}
 800efac:	bf00      	nop
 800efae:	371c      	adds	r7, #28
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr
 800efb8:	fffeff8f 	.word	0xfffeff8f
 800efbc:	40010000 	.word	0x40010000
 800efc0:	40010400 	.word	0x40010400
 800efc4:	40014000 	.word	0x40014000
 800efc8:	40014400 	.word	0x40014400
 800efcc:	40014800 	.word	0x40014800

0800efd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b087      	sub	sp, #28
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a1b      	ldr	r3, [r3, #32]
 800efde:	f023 0210 	bic.w	r2, r3, #16
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6a1b      	ldr	r3, [r3, #32]
 800efea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	699b      	ldr	r3, [r3, #24]
 800eff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	4b34      	ldr	r3, [pc, #208]	; (800f0cc <TIM_OC2_SetConfig+0xfc>)
 800effc:	4013      	ands	r3, r2
 800effe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	021b      	lsls	r3, r3, #8
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	4313      	orrs	r3, r2
 800f012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	f023 0320 	bic.w	r3, r3, #32
 800f01a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	011b      	lsls	r3, r3, #4
 800f022:	697a      	ldr	r2, [r7, #20]
 800f024:	4313      	orrs	r3, r2
 800f026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a29      	ldr	r2, [pc, #164]	; (800f0d0 <TIM_OC2_SetConfig+0x100>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d003      	beq.n	800f038 <TIM_OC2_SetConfig+0x68>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a28      	ldr	r2, [pc, #160]	; (800f0d4 <TIM_OC2_SetConfig+0x104>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d10d      	bne.n	800f054 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f03e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	011b      	lsls	r3, r3, #4
 800f046:	697a      	ldr	r2, [r7, #20]
 800f048:	4313      	orrs	r3, r2
 800f04a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4a1e      	ldr	r2, [pc, #120]	; (800f0d0 <TIM_OC2_SetConfig+0x100>)
 800f058:	4293      	cmp	r3, r2
 800f05a:	d00f      	beq.n	800f07c <TIM_OC2_SetConfig+0xac>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a1d      	ldr	r2, [pc, #116]	; (800f0d4 <TIM_OC2_SetConfig+0x104>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d00b      	beq.n	800f07c <TIM_OC2_SetConfig+0xac>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a1c      	ldr	r2, [pc, #112]	; (800f0d8 <TIM_OC2_SetConfig+0x108>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d007      	beq.n	800f07c <TIM_OC2_SetConfig+0xac>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a1b      	ldr	r2, [pc, #108]	; (800f0dc <TIM_OC2_SetConfig+0x10c>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d003      	beq.n	800f07c <TIM_OC2_SetConfig+0xac>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4a1a      	ldr	r2, [pc, #104]	; (800f0e0 <TIM_OC2_SetConfig+0x110>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d113      	bne.n	800f0a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f08a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	695b      	ldr	r3, [r3, #20]
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	693a      	ldr	r2, [r7, #16]
 800f094:	4313      	orrs	r3, r2
 800f096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	699b      	ldr	r3, [r3, #24]
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	693a      	ldr	r2, [r7, #16]
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	693a      	ldr	r2, [r7, #16]
 800f0a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	685a      	ldr	r2, [r3, #4]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	697a      	ldr	r2, [r7, #20]
 800f0bc:	621a      	str	r2, [r3, #32]
}
 800f0be:	bf00      	nop
 800f0c0:	371c      	adds	r7, #28
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	feff8fff 	.word	0xfeff8fff
 800f0d0:	40010000 	.word	0x40010000
 800f0d4:	40010400 	.word	0x40010400
 800f0d8:	40014000 	.word	0x40014000
 800f0dc:	40014400 	.word	0x40014400
 800f0e0:	40014800 	.word	0x40014800

0800f0e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b087      	sub	sp, #28
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6a1b      	ldr	r3, [r3, #32]
 800f0fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	69db      	ldr	r3, [r3, #28]
 800f10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f10c:	68fa      	ldr	r2, [r7, #12]
 800f10e:	4b33      	ldr	r3, [pc, #204]	; (800f1dc <TIM_OC3_SetConfig+0xf8>)
 800f110:	4013      	ands	r3, r2
 800f112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f023 0303 	bic.w	r3, r3, #3
 800f11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	4313      	orrs	r3, r2
 800f124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f12c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	689b      	ldr	r3, [r3, #8]
 800f132:	021b      	lsls	r3, r3, #8
 800f134:	697a      	ldr	r2, [r7, #20]
 800f136:	4313      	orrs	r3, r2
 800f138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4a28      	ldr	r2, [pc, #160]	; (800f1e0 <TIM_OC3_SetConfig+0xfc>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d003      	beq.n	800f14a <TIM_OC3_SetConfig+0x66>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4a27      	ldr	r2, [pc, #156]	; (800f1e4 <TIM_OC3_SetConfig+0x100>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d10d      	bne.n	800f166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	021b      	lsls	r3, r3, #8
 800f158:	697a      	ldr	r2, [r7, #20]
 800f15a:	4313      	orrs	r3, r2
 800f15c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4a1d      	ldr	r2, [pc, #116]	; (800f1e0 <TIM_OC3_SetConfig+0xfc>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d00f      	beq.n	800f18e <TIM_OC3_SetConfig+0xaa>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	4a1c      	ldr	r2, [pc, #112]	; (800f1e4 <TIM_OC3_SetConfig+0x100>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d00b      	beq.n	800f18e <TIM_OC3_SetConfig+0xaa>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	4a1b      	ldr	r2, [pc, #108]	; (800f1e8 <TIM_OC3_SetConfig+0x104>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d007      	beq.n	800f18e <TIM_OC3_SetConfig+0xaa>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4a1a      	ldr	r2, [pc, #104]	; (800f1ec <TIM_OC3_SetConfig+0x108>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d003      	beq.n	800f18e <TIM_OC3_SetConfig+0xaa>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4a19      	ldr	r2, [pc, #100]	; (800f1f0 <TIM_OC3_SetConfig+0x10c>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d113      	bne.n	800f1b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f19c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	695b      	ldr	r3, [r3, #20]
 800f1a2:	011b      	lsls	r3, r3, #4
 800f1a4:	693a      	ldr	r2, [r7, #16]
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	699b      	ldr	r3, [r3, #24]
 800f1ae:	011b      	lsls	r3, r3, #4
 800f1b0:	693a      	ldr	r2, [r7, #16]
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	693a      	ldr	r2, [r7, #16]
 800f1ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	68fa      	ldr	r2, [r7, #12]
 800f1c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	697a      	ldr	r2, [r7, #20]
 800f1ce:	621a      	str	r2, [r3, #32]
}
 800f1d0:	bf00      	nop
 800f1d2:	371c      	adds	r7, #28
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr
 800f1dc:	fffeff8f 	.word	0xfffeff8f
 800f1e0:	40010000 	.word	0x40010000
 800f1e4:	40010400 	.word	0x40010400
 800f1e8:	40014000 	.word	0x40014000
 800f1ec:	40014400 	.word	0x40014400
 800f1f0:	40014800 	.word	0x40014800

0800f1f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b087      	sub	sp, #28
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6a1b      	ldr	r3, [r3, #32]
 800f202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	69db      	ldr	r3, [r3, #28]
 800f21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	4b24      	ldr	r3, [pc, #144]	; (800f2b0 <TIM_OC4_SetConfig+0xbc>)
 800f220:	4013      	ands	r3, r2
 800f222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f22a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	021b      	lsls	r3, r3, #8
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	4313      	orrs	r3, r2
 800f236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f23e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	031b      	lsls	r3, r3, #12
 800f246:	693a      	ldr	r2, [r7, #16]
 800f248:	4313      	orrs	r3, r2
 800f24a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4a19      	ldr	r2, [pc, #100]	; (800f2b4 <TIM_OC4_SetConfig+0xc0>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d00f      	beq.n	800f274 <TIM_OC4_SetConfig+0x80>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	4a18      	ldr	r2, [pc, #96]	; (800f2b8 <TIM_OC4_SetConfig+0xc4>)
 800f258:	4293      	cmp	r3, r2
 800f25a:	d00b      	beq.n	800f274 <TIM_OC4_SetConfig+0x80>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	4a17      	ldr	r2, [pc, #92]	; (800f2bc <TIM_OC4_SetConfig+0xc8>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d007      	beq.n	800f274 <TIM_OC4_SetConfig+0x80>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a16      	ldr	r2, [pc, #88]	; (800f2c0 <TIM_OC4_SetConfig+0xcc>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d003      	beq.n	800f274 <TIM_OC4_SetConfig+0x80>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a15      	ldr	r2, [pc, #84]	; (800f2c4 <TIM_OC4_SetConfig+0xd0>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d109      	bne.n	800f288 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f27a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	695b      	ldr	r3, [r3, #20]
 800f280:	019b      	lsls	r3, r3, #6
 800f282:	697a      	ldr	r2, [r7, #20]
 800f284:	4313      	orrs	r3, r2
 800f286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	697a      	ldr	r2, [r7, #20]
 800f28c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	685a      	ldr	r2, [r3, #4]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	693a      	ldr	r2, [r7, #16]
 800f2a0:	621a      	str	r2, [r3, #32]
}
 800f2a2:	bf00      	nop
 800f2a4:	371c      	adds	r7, #28
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop
 800f2b0:	feff8fff 	.word	0xfeff8fff
 800f2b4:	40010000 	.word	0x40010000
 800f2b8:	40010400 	.word	0x40010400
 800f2bc:	40014000 	.word	0x40014000
 800f2c0:	40014400 	.word	0x40014400
 800f2c4:	40014800 	.word	0x40014800

0800f2c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b087      	sub	sp, #28
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6a1b      	ldr	r3, [r3, #32]
 800f2d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6a1b      	ldr	r3, [r3, #32]
 800f2e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f2f0:	68fa      	ldr	r2, [r7, #12]
 800f2f2:	4b21      	ldr	r3, [pc, #132]	; (800f378 <TIM_OC5_SetConfig+0xb0>)
 800f2f4:	4013      	ands	r3, r2
 800f2f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	4313      	orrs	r3, r2
 800f300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f308:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	041b      	lsls	r3, r3, #16
 800f310:	693a      	ldr	r2, [r7, #16]
 800f312:	4313      	orrs	r3, r2
 800f314:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a18      	ldr	r2, [pc, #96]	; (800f37c <TIM_OC5_SetConfig+0xb4>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d00f      	beq.n	800f33e <TIM_OC5_SetConfig+0x76>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a17      	ldr	r2, [pc, #92]	; (800f380 <TIM_OC5_SetConfig+0xb8>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d00b      	beq.n	800f33e <TIM_OC5_SetConfig+0x76>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a16      	ldr	r2, [pc, #88]	; (800f384 <TIM_OC5_SetConfig+0xbc>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d007      	beq.n	800f33e <TIM_OC5_SetConfig+0x76>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a15      	ldr	r2, [pc, #84]	; (800f388 <TIM_OC5_SetConfig+0xc0>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d003      	beq.n	800f33e <TIM_OC5_SetConfig+0x76>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4a14      	ldr	r2, [pc, #80]	; (800f38c <TIM_OC5_SetConfig+0xc4>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d109      	bne.n	800f352 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f344:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	695b      	ldr	r3, [r3, #20]
 800f34a:	021b      	lsls	r3, r3, #8
 800f34c:	697a      	ldr	r2, [r7, #20]
 800f34e:	4313      	orrs	r3, r2
 800f350:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	68fa      	ldr	r2, [r7, #12]
 800f35c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	685a      	ldr	r2, [r3, #4]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	693a      	ldr	r2, [r7, #16]
 800f36a:	621a      	str	r2, [r3, #32]
}
 800f36c:	bf00      	nop
 800f36e:	371c      	adds	r7, #28
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	fffeff8f 	.word	0xfffeff8f
 800f37c:	40010000 	.word	0x40010000
 800f380:	40010400 	.word	0x40010400
 800f384:	40014000 	.word	0x40014000
 800f388:	40014400 	.word	0x40014400
 800f38c:	40014800 	.word	0x40014800

0800f390 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f390:	b480      	push	{r7}
 800f392:	b087      	sub	sp, #28
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
 800f39e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6a1b      	ldr	r3, [r3, #32]
 800f3aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f3b8:	68fa      	ldr	r2, [r7, #12]
 800f3ba:	4b22      	ldr	r3, [pc, #136]	; (800f444 <TIM_OC6_SetConfig+0xb4>)
 800f3bc:	4013      	ands	r3, r2
 800f3be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	021b      	lsls	r3, r3, #8
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f3d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	051b      	lsls	r3, r3, #20
 800f3da:	693a      	ldr	r2, [r7, #16]
 800f3dc:	4313      	orrs	r3, r2
 800f3de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4a19      	ldr	r2, [pc, #100]	; (800f448 <TIM_OC6_SetConfig+0xb8>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d00f      	beq.n	800f408 <TIM_OC6_SetConfig+0x78>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a18      	ldr	r2, [pc, #96]	; (800f44c <TIM_OC6_SetConfig+0xbc>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d00b      	beq.n	800f408 <TIM_OC6_SetConfig+0x78>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4a17      	ldr	r2, [pc, #92]	; (800f450 <TIM_OC6_SetConfig+0xc0>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d007      	beq.n	800f408 <TIM_OC6_SetConfig+0x78>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4a16      	ldr	r2, [pc, #88]	; (800f454 <TIM_OC6_SetConfig+0xc4>)
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d003      	beq.n	800f408 <TIM_OC6_SetConfig+0x78>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	4a15      	ldr	r2, [pc, #84]	; (800f458 <TIM_OC6_SetConfig+0xc8>)
 800f404:	4293      	cmp	r3, r2
 800f406:	d109      	bne.n	800f41c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f40e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	695b      	ldr	r3, [r3, #20]
 800f414:	029b      	lsls	r3, r3, #10
 800f416:	697a      	ldr	r2, [r7, #20]
 800f418:	4313      	orrs	r3, r2
 800f41a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	697a      	ldr	r2, [r7, #20]
 800f420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	685a      	ldr	r2, [r3, #4]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	693a      	ldr	r2, [r7, #16]
 800f434:	621a      	str	r2, [r3, #32]
}
 800f436:	bf00      	nop
 800f438:	371c      	adds	r7, #28
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	feff8fff 	.word	0xfeff8fff
 800f448:	40010000 	.word	0x40010000
 800f44c:	40010400 	.word	0x40010400
 800f450:	40014000 	.word	0x40014000
 800f454:	40014400 	.word	0x40014400
 800f458:	40014800 	.word	0x40014800

0800f45c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b087      	sub	sp, #28
 800f460:	af00      	add	r7, sp, #0
 800f462:	60f8      	str	r0, [r7, #12]
 800f464:	60b9      	str	r1, [r7, #8]
 800f466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	6a1b      	ldr	r3, [r3, #32]
 800f46c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	6a1b      	ldr	r3, [r3, #32]
 800f472:	f023 0201 	bic.w	r2, r3, #1
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	699b      	ldr	r3, [r3, #24]
 800f47e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	011b      	lsls	r3, r3, #4
 800f48c:	693a      	ldr	r2, [r7, #16]
 800f48e:	4313      	orrs	r3, r2
 800f490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	f023 030a 	bic.w	r3, r3, #10
 800f498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f49a:	697a      	ldr	r2, [r7, #20]
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	693a      	ldr	r2, [r7, #16]
 800f4a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	697a      	ldr	r2, [r7, #20]
 800f4ac:	621a      	str	r2, [r3, #32]
}
 800f4ae:	bf00      	nop
 800f4b0:	371c      	adds	r7, #28
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr

0800f4ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4ba:	b480      	push	{r7}
 800f4bc:	b087      	sub	sp, #28
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	60f8      	str	r0, [r7, #12]
 800f4c2:	60b9      	str	r1, [r7, #8]
 800f4c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	6a1b      	ldr	r3, [r3, #32]
 800f4ca:	f023 0210 	bic.w	r2, r3, #16
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	699b      	ldr	r3, [r3, #24]
 800f4d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	6a1b      	ldr	r3, [r3, #32]
 800f4dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f4e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	031b      	lsls	r3, r3, #12
 800f4ea:	697a      	ldr	r2, [r7, #20]
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f4f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	011b      	lsls	r3, r3, #4
 800f4fc:	693a      	ldr	r2, [r7, #16]
 800f4fe:	4313      	orrs	r3, r2
 800f500:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	697a      	ldr	r2, [r7, #20]
 800f506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	693a      	ldr	r2, [r7, #16]
 800f50c:	621a      	str	r2, [r3, #32]
}
 800f50e:	bf00      	nop
 800f510:	371c      	adds	r7, #28
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr
	...

0800f51c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	689b      	ldr	r3, [r3, #8]
 800f52a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	4b09      	ldr	r3, [pc, #36]	; (800f554 <TIM_ITRx_SetConfig+0x38>)
 800f530:	4013      	ands	r3, r2
 800f532:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f534:	683a      	ldr	r2, [r7, #0]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	4313      	orrs	r3, r2
 800f53a:	f043 0307 	orr.w	r3, r3, #7
 800f53e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	68fa      	ldr	r2, [r7, #12]
 800f544:	609a      	str	r2, [r3, #8]
}
 800f546:	bf00      	nop
 800f548:	3714      	adds	r7, #20
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	ffcfff8f 	.word	0xffcfff8f

0800f558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f558:	b480      	push	{r7}
 800f55a:	b087      	sub	sp, #28
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
 800f564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	021a      	lsls	r2, r3, #8
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	431a      	orrs	r2, r3
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	4313      	orrs	r3, r2
 800f580:	697a      	ldr	r2, [r7, #20]
 800f582:	4313      	orrs	r3, r2
 800f584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	697a      	ldr	r2, [r7, #20]
 800f58a:	609a      	str	r2, [r3, #8]
}
 800f58c:	bf00      	nop
 800f58e:	371c      	adds	r7, #28
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f598:	b480      	push	{r7}
 800f59a:	b087      	sub	sp, #28
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	f003 031f 	and.w	r3, r3, #31
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f5b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6a1a      	ldr	r2, [r3, #32]
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	43db      	mvns	r3, r3
 800f5ba:	401a      	ands	r2, r3
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6a1a      	ldr	r2, [r3, #32]
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	f003 031f 	and.w	r3, r3, #31
 800f5ca:	6879      	ldr	r1, [r7, #4]
 800f5cc:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d0:	431a      	orrs	r2, r3
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	621a      	str	r2, [r3, #32]
}
 800f5d6:	bf00      	nop
 800f5d8:	371c      	adds	r7, #28
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e0:	4770      	bx	lr
	...

0800f5e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b085      	sub	sp, #20
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d101      	bne.n	800f5fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f5f8:	2302      	movs	r3, #2
 800f5fa:	e077      	b.n	800f6ec <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2201      	movs	r2, #1
 800f600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2202      	movs	r2, #2
 800f608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a35      	ldr	r2, [pc, #212]	; (800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d004      	beq.n	800f630 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4a34      	ldr	r2, [pc, #208]	; (800f6fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d108      	bne.n	800f642 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f636:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	4313      	orrs	r3, r2
 800f640:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f648:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	4313      	orrs	r3, r2
 800f652:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a25      	ldr	r2, [pc, #148]	; (800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d02c      	beq.n	800f6c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f66e:	d027      	beq.n	800f6c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a22      	ldr	r2, [pc, #136]	; (800f700 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d022      	beq.n	800f6c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	4a21      	ldr	r2, [pc, #132]	; (800f704 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d01d      	beq.n	800f6c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4a1f      	ldr	r2, [pc, #124]	; (800f708 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d018      	beq.n	800f6c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4a1a      	ldr	r2, [pc, #104]	; (800f6fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d013      	beq.n	800f6c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4a1b      	ldr	r2, [pc, #108]	; (800f70c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d00e      	beq.n	800f6c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	4a1a      	ldr	r2, [pc, #104]	; (800f710 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d009      	beq.n	800f6c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4a18      	ldr	r2, [pc, #96]	; (800f714 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d004      	beq.n	800f6c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4a17      	ldr	r2, [pc, #92]	; (800f718 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d10c      	bne.n	800f6da <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f6c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	689b      	ldr	r3, [r3, #8]
 800f6cc:	68ba      	ldr	r2, [r7, #8]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	68ba      	ldr	r2, [r7, #8]
 800f6d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f6ea:	2300      	movs	r3, #0
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3714      	adds	r7, #20
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr
 800f6f8:	40010000 	.word	0x40010000
 800f6fc:	40010400 	.word	0x40010400
 800f700:	40000400 	.word	0x40000400
 800f704:	40000800 	.word	0x40000800
 800f708:	40000c00 	.word	0x40000c00
 800f70c:	40001800 	.word	0x40001800
 800f710:	40014000 	.word	0x40014000
 800f714:	4000e000 	.word	0x4000e000
 800f718:	4000e400 	.word	0x4000e400

0800f71c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b085      	sub	sp, #20
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f726:	2300      	movs	r3, #0
 800f728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f730:	2b01      	cmp	r3, #1
 800f732:	d101      	bne.n	800f738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f734:	2302      	movs	r3, #2
 800f736:	e087      	b.n	800f848 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2201      	movs	r2, #1
 800f73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	4313      	orrs	r3, r2
 800f74c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	689b      	ldr	r3, [r3, #8]
 800f758:	4313      	orrs	r3, r2
 800f75a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	4313      	orrs	r3, r2
 800f768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4313      	orrs	r3, r2
 800f776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	691b      	ldr	r3, [r3, #16]
 800f782:	4313      	orrs	r3, r2
 800f784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	695b      	ldr	r3, [r3, #20]
 800f790:	4313      	orrs	r3, r2
 800f792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	699b      	ldr	r3, [r3, #24]
 800f7ac:	041b      	lsls	r3, r3, #16
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	4a27      	ldr	r2, [pc, #156]	; (800f854 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d004      	beq.n	800f7c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4a25      	ldr	r2, [pc, #148]	; (800f858 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d106      	bne.n	800f7d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	69db      	ldr	r3, [r3, #28]
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	4a1e      	ldr	r2, [pc, #120]	; (800f854 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d004      	beq.n	800f7e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4a1d      	ldr	r2, [pc, #116]	; (800f858 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d126      	bne.n	800f836 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7f2:	051b      	lsls	r3, r3, #20
 800f7f4:	4313      	orrs	r3, r2
 800f7f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	4313      	orrs	r3, r2
 800f804:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f810:	4313      	orrs	r3, r2
 800f812:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	4a0e      	ldr	r2, [pc, #56]	; (800f854 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d004      	beq.n	800f828 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4a0d      	ldr	r2, [pc, #52]	; (800f858 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d106      	bne.n	800f836 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f832:	4313      	orrs	r3, r2
 800f834:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	68fa      	ldr	r2, [r7, #12]
 800f83c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2200      	movs	r2, #0
 800f842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f846:	2300      	movs	r3, #0
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3714      	adds	r7, #20
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr
 800f854:	40010000 	.word	0x40010000
 800f858:	40010400 	.word	0x40010400

0800f85c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d101      	bne.n	800f86e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f86a:	2301      	movs	r3, #1
 800f86c:	e042      	b.n	800f8f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f874:	2b00      	cmp	r3, #0
 800f876:	d106      	bne.n	800f886 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f7f8 fea3 	bl	80085cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2224      	movs	r2, #36	; 0x24
 800f88a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f022 0201 	bic.w	r2, r2, #1
 800f89c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 fd4a 	bl	8010338 <UART_SetConfig>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d101      	bne.n	800f8ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e022      	b.n	800f8f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d002      	beq.n	800f8bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f001 fb9c 	bl	8010ff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	685a      	ldr	r2, [r3, #4]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f8ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	689a      	ldr	r2, [r3, #8]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f8da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f042 0201 	orr.w	r2, r2, #1
 800f8ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f001 fc23 	bl	8011138 <UART_CheckIdleState>
 800f8f2:	4603      	mov	r3, r0
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3708      	adds	r7, #8
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b08a      	sub	sp, #40	; 0x28
 800f900:	af02      	add	r7, sp, #8
 800f902:	60f8      	str	r0, [r7, #12]
 800f904:	60b9      	str	r1, [r7, #8]
 800f906:	603b      	str	r3, [r7, #0]
 800f908:	4613      	mov	r3, r2
 800f90a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f912:	2b20      	cmp	r3, #32
 800f914:	f040 8083 	bne.w	800fa1e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d002      	beq.n	800f924 <HAL_UART_Transmit+0x28>
 800f91e:	88fb      	ldrh	r3, [r7, #6]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d101      	bne.n	800f928 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f924:	2301      	movs	r3, #1
 800f926:	e07b      	b.n	800fa20 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d101      	bne.n	800f936 <HAL_UART_Transmit+0x3a>
 800f932:	2302      	movs	r3, #2
 800f934:	e074      	b.n	800fa20 <HAL_UART_Transmit+0x124>
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2201      	movs	r2, #1
 800f93a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	2200      	movs	r2, #0
 800f942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2221      	movs	r2, #33	; 0x21
 800f94a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f94e:	f7f9 f83f 	bl	80089d0 <HAL_GetTick>
 800f952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	88fa      	ldrh	r2, [r7, #6]
 800f958:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	88fa      	ldrh	r2, [r7, #6]
 800f960:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f96c:	d108      	bne.n	800f980 <HAL_UART_Transmit+0x84>
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	691b      	ldr	r3, [r3, #16]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d104      	bne.n	800f980 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f976:	2300      	movs	r3, #0
 800f978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	61bb      	str	r3, [r7, #24]
 800f97e:	e003      	b.n	800f988 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f984:	2300      	movs	r3, #0
 800f986:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2200      	movs	r2, #0
 800f98c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f990:	e02c      	b.n	800f9ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	9300      	str	r3, [sp, #0]
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	2200      	movs	r2, #0
 800f99a:	2180      	movs	r1, #128	; 0x80
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f001 fc16 	bl	80111ce <UART_WaitOnFlagUntilTimeout>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d001      	beq.n	800f9ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f9a8:	2303      	movs	r3, #3
 800f9aa:	e039      	b.n	800fa20 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d10b      	bne.n	800f9ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	881b      	ldrh	r3, [r3, #0]
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f9c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	3302      	adds	r3, #2
 800f9c6:	61bb      	str	r3, [r7, #24]
 800f9c8:	e007      	b.n	800f9da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	781a      	ldrb	r2, [r3, #0]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	3b01      	subs	r3, #1
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d1cc      	bne.n	800f992 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	2140      	movs	r1, #64	; 0x40
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f001 fbe3 	bl	80111ce <UART_WaitOnFlagUntilTimeout>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d001      	beq.n	800fa12 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800fa0e:	2303      	movs	r3, #3
 800fa10:	e006      	b.n	800fa20 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2220      	movs	r2, #32
 800fa16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	e000      	b.n	800fa20 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800fa1e:	2302      	movs	r3, #2
  }
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3720      	adds	r7, #32
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b08a      	sub	sp, #40	; 0x28
 800fa2c:	af02      	add	r7, sp, #8
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	603b      	str	r3, [r7, #0]
 800fa34:	4613      	mov	r3, r2
 800fa36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa3e:	2b20      	cmp	r3, #32
 800fa40:	f040 80c0 	bne.w	800fbc4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d002      	beq.n	800fa50 <HAL_UART_Receive+0x28>
 800fa4a:	88fb      	ldrh	r3, [r7, #6]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d101      	bne.n	800fa54 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fa50:	2301      	movs	r3, #1
 800fa52:	e0b8      	b.n	800fbc6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d101      	bne.n	800fa62 <HAL_UART_Receive+0x3a>
 800fa5e:	2302      	movs	r3, #2
 800fa60:	e0b1      	b.n	800fbc6 <HAL_UART_Receive+0x19e>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2201      	movs	r2, #1
 800fa66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2222      	movs	r2, #34	; 0x22
 800fa76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fa80:	f7f8 ffa6 	bl	80089d0 <HAL_GetTick>
 800fa84:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	88fa      	ldrh	r2, [r7, #6]
 800fa8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	88fa      	ldrh	r2, [r7, #6]
 800fa92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa9e:	d10e      	bne.n	800fabe <HAL_UART_Receive+0x96>
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	691b      	ldr	r3, [r3, #16]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d105      	bne.n	800fab4 <HAL_UART_Receive+0x8c>
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800faae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fab2:	e02d      	b.n	800fb10 <HAL_UART_Receive+0xe8>
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	22ff      	movs	r2, #255	; 0xff
 800fab8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fabc:	e028      	b.n	800fb10 <HAL_UART_Receive+0xe8>
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d10d      	bne.n	800fae2 <HAL_UART_Receive+0xba>
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	691b      	ldr	r3, [r3, #16]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d104      	bne.n	800fad8 <HAL_UART_Receive+0xb0>
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	22ff      	movs	r2, #255	; 0xff
 800fad2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fad6:	e01b      	b.n	800fb10 <HAL_UART_Receive+0xe8>
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	227f      	movs	r2, #127	; 0x7f
 800fadc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fae0:	e016      	b.n	800fb10 <HAL_UART_Receive+0xe8>
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800faea:	d10d      	bne.n	800fb08 <HAL_UART_Receive+0xe0>
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	691b      	ldr	r3, [r3, #16]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d104      	bne.n	800fafe <HAL_UART_Receive+0xd6>
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	227f      	movs	r2, #127	; 0x7f
 800faf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fafc:	e008      	b.n	800fb10 <HAL_UART_Receive+0xe8>
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	223f      	movs	r2, #63	; 0x3f
 800fb02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb06:	e003      	b.n	800fb10 <HAL_UART_Receive+0xe8>
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb16:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	689b      	ldr	r3, [r3, #8]
 800fb1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb20:	d108      	bne.n	800fb34 <HAL_UART_Receive+0x10c>
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	691b      	ldr	r3, [r3, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d104      	bne.n	800fb34 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	61bb      	str	r3, [r7, #24]
 800fb32:	e003      	b.n	800fb3c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fb44:	e032      	b.n	800fbac <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	2120      	movs	r1, #32
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	f001 fb3c 	bl	80111ce <UART_WaitOnFlagUntilTimeout>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800fb5c:	2303      	movs	r3, #3
 800fb5e:	e032      	b.n	800fbc6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d10c      	bne.n	800fb80 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	8a7b      	ldrh	r3, [r7, #18]
 800fb70:	4013      	ands	r3, r2
 800fb72:	b29a      	uxth	r2, r3
 800fb74:	69bb      	ldr	r3, [r7, #24]
 800fb76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	3302      	adds	r3, #2
 800fb7c:	61bb      	str	r3, [r7, #24]
 800fb7e:	e00c      	b.n	800fb9a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb86:	b2da      	uxtb	r2, r3
 800fb88:	8a7b      	ldrh	r3, [r7, #18]
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	4013      	ands	r3, r2
 800fb8e:	b2da      	uxtb	r2, r3
 800fb90:	69fb      	ldr	r3, [r7, #28]
 800fb92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	3301      	adds	r3, #1
 800fb98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fba0:	b29b      	uxth	r3, r3
 800fba2:	3b01      	subs	r3, #1
 800fba4:	b29a      	uxth	r2, r3
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d1c6      	bne.n	800fb46 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2220      	movs	r2, #32
 800fbbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	e000      	b.n	800fbc6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800fbc4:	2302      	movs	r3, #2
  }
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3720      	adds	r7, #32
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
	...

0800fbd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b0ba      	sub	sp, #232	; 0xe8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	69db      	ldr	r3, [r3, #28]
 800fbde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	689b      	ldr	r3, [r3, #8]
 800fbf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fbf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800fbfa:	f640 030f 	movw	r3, #2063	; 0x80f
 800fbfe:	4013      	ands	r3, r2
 800fc00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800fc04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d11b      	bne.n	800fc44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fc0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc10:	f003 0320 	and.w	r3, r3, #32
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d015      	beq.n	800fc44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fc18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc1c:	f003 0320 	and.w	r3, r3, #32
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d105      	bne.n	800fc30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fc24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fc28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d009      	beq.n	800fc44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	f000 835a 	beq.w	80102ee <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	4798      	blx	r3
      }
      return;
 800fc42:	e354      	b.n	80102ee <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fc44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	f000 811f 	beq.w	800fe8c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fc4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fc52:	4b8b      	ldr	r3, [pc, #556]	; (800fe80 <HAL_UART_IRQHandler+0x2b0>)
 800fc54:	4013      	ands	r3, r2
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d106      	bne.n	800fc68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fc5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800fc5e:	4b89      	ldr	r3, [pc, #548]	; (800fe84 <HAL_UART_IRQHandler+0x2b4>)
 800fc60:	4013      	ands	r3, r2
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f000 8112 	beq.w	800fe8c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc6c:	f003 0301 	and.w	r3, r3, #1
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d011      	beq.n	800fc98 <HAL_UART_IRQHandler+0xc8>
 800fc74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d00b      	beq.n	800fc98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2201      	movs	r2, #1
 800fc86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc8e:	f043 0201 	orr.w	r2, r3, #1
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fc98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc9c:	f003 0302 	and.w	r3, r3, #2
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d011      	beq.n	800fcc8 <HAL_UART_IRQHandler+0xf8>
 800fca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fca8:	f003 0301 	and.w	r3, r3, #1
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00b      	beq.n	800fcc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2202      	movs	r2, #2
 800fcb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcbe:	f043 0204 	orr.w	r2, r3, #4
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fccc:	f003 0304 	and.w	r3, r3, #4
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d011      	beq.n	800fcf8 <HAL_UART_IRQHandler+0x128>
 800fcd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fcd8:	f003 0301 	and.w	r3, r3, #1
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d00b      	beq.n	800fcf8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	2204      	movs	r2, #4
 800fce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcee:	f043 0202 	orr.w	r2, r3, #2
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fcf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcfc:	f003 0308 	and.w	r3, r3, #8
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d017      	beq.n	800fd34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd08:	f003 0320 	and.w	r3, r3, #32
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d105      	bne.n	800fd1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fd10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fd14:	4b5a      	ldr	r3, [pc, #360]	; (800fe80 <HAL_UART_IRQHandler+0x2b0>)
 800fd16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d00b      	beq.n	800fd34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2208      	movs	r2, #8
 800fd22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd2a:	f043 0208 	orr.w	r2, r3, #8
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fd34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d012      	beq.n	800fd66 <HAL_UART_IRQHandler+0x196>
 800fd40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d00c      	beq.n	800fd66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd5c:	f043 0220 	orr.w	r2, r3, #32
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	f000 82c0 	beq.w	80102f2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd76:	f003 0320 	and.w	r3, r3, #32
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d013      	beq.n	800fda6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd82:	f003 0320 	and.w	r3, r3, #32
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d105      	bne.n	800fd96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fd8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fd8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d007      	beq.n	800fda6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d003      	beq.n	800fda6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdba:	2b40      	cmp	r3, #64	; 0x40
 800fdbc:	d005      	beq.n	800fdca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fdbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fdc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d04f      	beq.n	800fe6a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f001 fac8 	bl	8011360 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	689b      	ldr	r3, [r3, #8]
 800fdd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdda:	2b40      	cmp	r3, #64	; 0x40
 800fddc:	d141      	bne.n	800fe62 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	3308      	adds	r3, #8
 800fde4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fdec:	e853 3f00 	ldrex	r3, [r3]
 800fdf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fdf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fdf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fdfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	3308      	adds	r3, #8
 800fe06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fe0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fe0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fe16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fe1a:	e841 2300 	strex	r3, r2, [r1]
 800fe1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fe22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1d9      	bne.n	800fdde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d013      	beq.n	800fe5a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe36:	4a14      	ldr	r2, [pc, #80]	; (800fe88 <HAL_UART_IRQHandler+0x2b8>)
 800fe38:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fa fe58 	bl	800aaf4 <HAL_DMA_Abort_IT>
 800fe44:	4603      	mov	r3, r0
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d017      	beq.n	800fe7a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800fe54:	4610      	mov	r0, r2
 800fe56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe58:	e00f      	b.n	800fe7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 fa56 	bl	801030c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe60:	e00b      	b.n	800fe7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 fa52 	bl	801030c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe68:	e007      	b.n	800fe7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f000 fa4e 	bl	801030c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2200      	movs	r2, #0
 800fe74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800fe78:	e23b      	b.n	80102f2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe7a:	bf00      	nop
    return;
 800fe7c:	e239      	b.n	80102f2 <HAL_UART_IRQHandler+0x722>
 800fe7e:	bf00      	nop
 800fe80:	10000001 	.word	0x10000001
 800fe84:	04000120 	.word	0x04000120
 800fe88:	0801142d 	.word	0x0801142d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	f040 81ce 	bne.w	8010232 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fe96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe9a:	f003 0310 	and.w	r3, r3, #16
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f000 81c7 	beq.w	8010232 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fea8:	f003 0310 	and.w	r3, r3, #16
 800feac:	2b00      	cmp	r3, #0
 800feae:	f000 81c0 	beq.w	8010232 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	2210      	movs	r2, #16
 800feb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	689b      	ldr	r3, [r3, #8]
 800fec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fec4:	2b40      	cmp	r3, #64	; 0x40
 800fec6:	f040 813b 	bne.w	8010140 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a8b      	ldr	r2, [pc, #556]	; (8010100 <HAL_UART_IRQHandler+0x530>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d059      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	4a89      	ldr	r2, [pc, #548]	; (8010104 <HAL_UART_IRQHandler+0x534>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d053      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	4a87      	ldr	r2, [pc, #540]	; (8010108 <HAL_UART_IRQHandler+0x538>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d04d      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	4a85      	ldr	r2, [pc, #532]	; (801010c <HAL_UART_IRQHandler+0x53c>)
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d047      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4a83      	ldr	r2, [pc, #524]	; (8010110 <HAL_UART_IRQHandler+0x540>)
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d041      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	4a81      	ldr	r2, [pc, #516]	; (8010114 <HAL_UART_IRQHandler+0x544>)
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d03b      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	4a7f      	ldr	r2, [pc, #508]	; (8010118 <HAL_UART_IRQHandler+0x548>)
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d035      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4a7d      	ldr	r2, [pc, #500]	; (801011c <HAL_UART_IRQHandler+0x54c>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d02f      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4a7b      	ldr	r2, [pc, #492]	; (8010120 <HAL_UART_IRQHandler+0x550>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d029      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	4a79      	ldr	r2, [pc, #484]	; (8010124 <HAL_UART_IRQHandler+0x554>)
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d023      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4a77      	ldr	r2, [pc, #476]	; (8010128 <HAL_UART_IRQHandler+0x558>)
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d01d      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4a75      	ldr	r2, [pc, #468]	; (801012c <HAL_UART_IRQHandler+0x55c>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d017      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4a73      	ldr	r2, [pc, #460]	; (8010130 <HAL_UART_IRQHandler+0x560>)
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d011      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4a71      	ldr	r2, [pc, #452]	; (8010134 <HAL_UART_IRQHandler+0x564>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d00b      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	4a6f      	ldr	r2, [pc, #444]	; (8010138 <HAL_UART_IRQHandler+0x568>)
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d005      	beq.n	800ff8a <HAL_UART_IRQHandler+0x3ba>
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4a6d      	ldr	r2, [pc, #436]	; (801013c <HAL_UART_IRQHandler+0x56c>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d105      	bne.n	800ff96 <HAL_UART_IRQHandler+0x3c6>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	e004      	b.n	800ffa0 <HAL_UART_IRQHandler+0x3d0>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ffa4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f000 81a4 	beq.w	80102f6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ffb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	f080 819c 	bcs.w	80102f6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ffc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffcc:	69db      	ldr	r3, [r3, #28]
 800ffce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffd2:	f000 8086 	beq.w	80100e2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffe2:	e853 3f00 	ldrex	r3, [r3]
 800ffe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ffea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ffee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fff2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	461a      	mov	r2, r3
 800fffc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010004:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010008:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801000c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010010:	e841 2300 	strex	r3, r2, [r1]
 8010014:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801001c:	2b00      	cmp	r3, #0
 801001e:	d1da      	bne.n	800ffd6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	3308      	adds	r3, #8
 8010026:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801002a:	e853 3f00 	ldrex	r3, [r3]
 801002e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010032:	f023 0301 	bic.w	r3, r3, #1
 8010036:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	3308      	adds	r3, #8
 8010040:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010044:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010048:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801004a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801004c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010050:	e841 2300 	strex	r3, r2, [r1]
 8010054:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1e1      	bne.n	8010020 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	3308      	adds	r3, #8
 8010062:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010066:	e853 3f00 	ldrex	r3, [r3]
 801006a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801006c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801006e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	3308      	adds	r3, #8
 801007c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010080:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010082:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010084:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010086:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010088:	e841 2300 	strex	r3, r2, [r1]
 801008c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801008e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010090:	2b00      	cmp	r3, #0
 8010092:	d1e3      	bne.n	801005c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2220      	movs	r2, #32
 8010098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100aa:	e853 3f00 	ldrex	r3, [r3]
 80100ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80100b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100b2:	f023 0310 	bic.w	r3, r3, #16
 80100b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	461a      	mov	r2, r3
 80100c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80100c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80100c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80100ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80100cc:	e841 2300 	strex	r3, r2, [r1]
 80100d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80100d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d1e4      	bne.n	80100a2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100dc:	4618      	mov	r0, r3
 80100de:	f7fa f9eb 	bl	800a4b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	1ad3      	subs	r3, r2, r3
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	4619      	mov	r1, r3
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 f912 	bl	8010320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80100fc:	e0fb      	b.n	80102f6 <HAL_UART_IRQHandler+0x726>
 80100fe:	bf00      	nop
 8010100:	40020010 	.word	0x40020010
 8010104:	40020028 	.word	0x40020028
 8010108:	40020040 	.word	0x40020040
 801010c:	40020058 	.word	0x40020058
 8010110:	40020070 	.word	0x40020070
 8010114:	40020088 	.word	0x40020088
 8010118:	400200a0 	.word	0x400200a0
 801011c:	400200b8 	.word	0x400200b8
 8010120:	40020410 	.word	0x40020410
 8010124:	40020428 	.word	0x40020428
 8010128:	40020440 	.word	0x40020440
 801012c:	40020458 	.word	0x40020458
 8010130:	40020470 	.word	0x40020470
 8010134:	40020488 	.word	0x40020488
 8010138:	400204a0 	.word	0x400204a0
 801013c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801014c:	b29b      	uxth	r3, r3
 801014e:	1ad3      	subs	r3, r2, r3
 8010150:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801015a:	b29b      	uxth	r3, r3
 801015c:	2b00      	cmp	r3, #0
 801015e:	f000 80cc 	beq.w	80102fa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8010162:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010166:	2b00      	cmp	r3, #0
 8010168:	f000 80c7 	beq.w	80102fa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010174:	e853 3f00 	ldrex	r3, [r3]
 8010178:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801017a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801017c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010180:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	461a      	mov	r2, r3
 801018a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801018e:	647b      	str	r3, [r7, #68]	; 0x44
 8010190:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010192:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010194:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010196:	e841 2300 	strex	r3, r2, [r1]
 801019a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801019c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d1e4      	bne.n	801016c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	3308      	adds	r3, #8
 80101a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	e853 3f00 	ldrex	r3, [r3]
 80101b0:	623b      	str	r3, [r7, #32]
   return(result);
 80101b2:	6a3a      	ldr	r2, [r7, #32]
 80101b4:	4b54      	ldr	r3, [pc, #336]	; (8010308 <HAL_UART_IRQHandler+0x738>)
 80101b6:	4013      	ands	r3, r2
 80101b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	3308      	adds	r3, #8
 80101c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80101c6:	633a      	str	r2, [r7, #48]	; 0x30
 80101c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80101cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101ce:	e841 2300 	strex	r3, r2, [r1]
 80101d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80101d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d1e3      	bne.n	80101a2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2220      	movs	r2, #32
 80101de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2200      	movs	r2, #0
 80101e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2200      	movs	r2, #0
 80101ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	e853 3f00 	ldrex	r3, [r3]
 80101fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f023 0310 	bic.w	r3, r3, #16
 8010202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	461a      	mov	r2, r3
 801020c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010210:	61fb      	str	r3, [r7, #28]
 8010212:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010214:	69b9      	ldr	r1, [r7, #24]
 8010216:	69fa      	ldr	r2, [r7, #28]
 8010218:	e841 2300 	strex	r3, r2, [r1]
 801021c:	617b      	str	r3, [r7, #20]
   return(result);
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1e4      	bne.n	80101ee <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010228:	4619      	mov	r1, r3
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 f878 	bl	8010320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010230:	e063      	b.n	80102fa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801023a:	2b00      	cmp	r3, #0
 801023c:	d00e      	beq.n	801025c <HAL_UART_IRQHandler+0x68c>
 801023e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010246:	2b00      	cmp	r3, #0
 8010248:	d008      	beq.n	801025c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010252:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f001 f92a 	bl	80114ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801025a:	e051      	b.n	8010300 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801025c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010264:	2b00      	cmp	r3, #0
 8010266:	d014      	beq.n	8010292 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801026c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010270:	2b00      	cmp	r3, #0
 8010272:	d105      	bne.n	8010280 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801027c:	2b00      	cmp	r3, #0
 801027e:	d008      	beq.n	8010292 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010284:	2b00      	cmp	r3, #0
 8010286:	d03a      	beq.n	80102fe <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	4798      	blx	r3
    }
    return;
 8010290:	e035      	b.n	80102fe <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801029a:	2b00      	cmp	r3, #0
 801029c:	d009      	beq.n	80102b2 <HAL_UART_IRQHandler+0x6e2>
 801029e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d003      	beq.n	80102b2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f001 f8d4 	bl	8011458 <UART_EndTransmit_IT>
    return;
 80102b0:	e026      	b.n	8010300 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80102b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d009      	beq.n	80102d2 <HAL_UART_IRQHandler+0x702>
 80102be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d003      	beq.n	80102d2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f001 f903 	bl	80114d6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80102d0:	e016      	b.n	8010300 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80102d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d010      	beq.n	8010300 <HAL_UART_IRQHandler+0x730>
 80102de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	da0c      	bge.n	8010300 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f001 f8eb 	bl	80114c2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80102ec:	e008      	b.n	8010300 <HAL_UART_IRQHandler+0x730>
      return;
 80102ee:	bf00      	nop
 80102f0:	e006      	b.n	8010300 <HAL_UART_IRQHandler+0x730>
    return;
 80102f2:	bf00      	nop
 80102f4:	e004      	b.n	8010300 <HAL_UART_IRQHandler+0x730>
      return;
 80102f6:	bf00      	nop
 80102f8:	e002      	b.n	8010300 <HAL_UART_IRQHandler+0x730>
      return;
 80102fa:	bf00      	nop
 80102fc:	e000      	b.n	8010300 <HAL_UART_IRQHandler+0x730>
    return;
 80102fe:	bf00      	nop
  }
}
 8010300:	37e8      	adds	r7, #232	; 0xe8
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	effffffe 	.word	0xeffffffe

0801030c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801030c:	b480      	push	{r7}
 801030e:	b083      	sub	sp, #12
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010314:	bf00      	nop
 8010316:	370c      	adds	r7, #12
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr

08010320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	460b      	mov	r3, r1
 801032a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801032c:	bf00      	nop
 801032e:	370c      	adds	r7, #12
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010338:	b5b0      	push	{r4, r5, r7, lr}
 801033a:	b08e      	sub	sp, #56	; 0x38
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010340:	2300      	movs	r3, #0
 8010342:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	689a      	ldr	r2, [r3, #8]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	691b      	ldr	r3, [r3, #16]
 801034e:	431a      	orrs	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	695b      	ldr	r3, [r3, #20]
 8010354:	431a      	orrs	r2, r3
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	69db      	ldr	r3, [r3, #28]
 801035a:	4313      	orrs	r3, r2
 801035c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	4bbf      	ldr	r3, [pc, #764]	; (8010664 <UART_SetConfig+0x32c>)
 8010366:	4013      	ands	r3, r2
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	6812      	ldr	r2, [r2, #0]
 801036c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801036e:	430b      	orrs	r3, r1
 8010370:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	68da      	ldr	r2, [r3, #12]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	430a      	orrs	r2, r1
 8010386:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	699b      	ldr	r3, [r3, #24]
 801038c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	4ab5      	ldr	r2, [pc, #724]	; (8010668 <UART_SetConfig+0x330>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d004      	beq.n	80103a2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6a1b      	ldr	r3, [r3, #32]
 801039c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801039e:	4313      	orrs	r3, r2
 80103a0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	689a      	ldr	r2, [r3, #8]
 80103a8:	4bb0      	ldr	r3, [pc, #704]	; (801066c <UART_SetConfig+0x334>)
 80103aa:	4013      	ands	r3, r2
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	6812      	ldr	r2, [r2, #0]
 80103b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80103b2:	430b      	orrs	r3, r1
 80103b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103bc:	f023 010f 	bic.w	r1, r3, #15
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	430a      	orrs	r2, r1
 80103ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4aa7      	ldr	r2, [pc, #668]	; (8010670 <UART_SetConfig+0x338>)
 80103d2:	4293      	cmp	r3, r2
 80103d4:	d176      	bne.n	80104c4 <UART_SetConfig+0x18c>
 80103d6:	4ba7      	ldr	r3, [pc, #668]	; (8010674 <UART_SetConfig+0x33c>)
 80103d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80103de:	2b28      	cmp	r3, #40	; 0x28
 80103e0:	d86c      	bhi.n	80104bc <UART_SetConfig+0x184>
 80103e2:	a201      	add	r2, pc, #4	; (adr r2, 80103e8 <UART_SetConfig+0xb0>)
 80103e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e8:	0801048d 	.word	0x0801048d
 80103ec:	080104bd 	.word	0x080104bd
 80103f0:	080104bd 	.word	0x080104bd
 80103f4:	080104bd 	.word	0x080104bd
 80103f8:	080104bd 	.word	0x080104bd
 80103fc:	080104bd 	.word	0x080104bd
 8010400:	080104bd 	.word	0x080104bd
 8010404:	080104bd 	.word	0x080104bd
 8010408:	08010495 	.word	0x08010495
 801040c:	080104bd 	.word	0x080104bd
 8010410:	080104bd 	.word	0x080104bd
 8010414:	080104bd 	.word	0x080104bd
 8010418:	080104bd 	.word	0x080104bd
 801041c:	080104bd 	.word	0x080104bd
 8010420:	080104bd 	.word	0x080104bd
 8010424:	080104bd 	.word	0x080104bd
 8010428:	0801049d 	.word	0x0801049d
 801042c:	080104bd 	.word	0x080104bd
 8010430:	080104bd 	.word	0x080104bd
 8010434:	080104bd 	.word	0x080104bd
 8010438:	080104bd 	.word	0x080104bd
 801043c:	080104bd 	.word	0x080104bd
 8010440:	080104bd 	.word	0x080104bd
 8010444:	080104bd 	.word	0x080104bd
 8010448:	080104a5 	.word	0x080104a5
 801044c:	080104bd 	.word	0x080104bd
 8010450:	080104bd 	.word	0x080104bd
 8010454:	080104bd 	.word	0x080104bd
 8010458:	080104bd 	.word	0x080104bd
 801045c:	080104bd 	.word	0x080104bd
 8010460:	080104bd 	.word	0x080104bd
 8010464:	080104bd 	.word	0x080104bd
 8010468:	080104ad 	.word	0x080104ad
 801046c:	080104bd 	.word	0x080104bd
 8010470:	080104bd 	.word	0x080104bd
 8010474:	080104bd 	.word	0x080104bd
 8010478:	080104bd 	.word	0x080104bd
 801047c:	080104bd 	.word	0x080104bd
 8010480:	080104bd 	.word	0x080104bd
 8010484:	080104bd 	.word	0x080104bd
 8010488:	080104b5 	.word	0x080104b5
 801048c:	2301      	movs	r3, #1
 801048e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010492:	e326      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010494:	2304      	movs	r3, #4
 8010496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801049a:	e322      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 801049c:	2308      	movs	r3, #8
 801049e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104a2:	e31e      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80104a4:	2310      	movs	r3, #16
 80104a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104aa:	e31a      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80104ac:	2320      	movs	r3, #32
 80104ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104b2:	e316      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80104b4:	2340      	movs	r3, #64	; 0x40
 80104b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104ba:	e312      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80104bc:	2380      	movs	r3, #128	; 0x80
 80104be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104c2:	e30e      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	4a6b      	ldr	r2, [pc, #428]	; (8010678 <UART_SetConfig+0x340>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d130      	bne.n	8010530 <UART_SetConfig+0x1f8>
 80104ce:	4b69      	ldr	r3, [pc, #420]	; (8010674 <UART_SetConfig+0x33c>)
 80104d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104d2:	f003 0307 	and.w	r3, r3, #7
 80104d6:	2b05      	cmp	r3, #5
 80104d8:	d826      	bhi.n	8010528 <UART_SetConfig+0x1f0>
 80104da:	a201      	add	r2, pc, #4	; (adr r2, 80104e0 <UART_SetConfig+0x1a8>)
 80104dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104e0:	080104f9 	.word	0x080104f9
 80104e4:	08010501 	.word	0x08010501
 80104e8:	08010509 	.word	0x08010509
 80104ec:	08010511 	.word	0x08010511
 80104f0:	08010519 	.word	0x08010519
 80104f4:	08010521 	.word	0x08010521
 80104f8:	2300      	movs	r3, #0
 80104fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104fe:	e2f0      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010500:	2304      	movs	r3, #4
 8010502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010506:	e2ec      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010508:	2308      	movs	r3, #8
 801050a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801050e:	e2e8      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010510:	2310      	movs	r3, #16
 8010512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010516:	e2e4      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010518:	2320      	movs	r3, #32
 801051a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801051e:	e2e0      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010520:	2340      	movs	r3, #64	; 0x40
 8010522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010526:	e2dc      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010528:	2380      	movs	r3, #128	; 0x80
 801052a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801052e:	e2d8      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	4a51      	ldr	r2, [pc, #324]	; (801067c <UART_SetConfig+0x344>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d130      	bne.n	801059c <UART_SetConfig+0x264>
 801053a:	4b4e      	ldr	r3, [pc, #312]	; (8010674 <UART_SetConfig+0x33c>)
 801053c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801053e:	f003 0307 	and.w	r3, r3, #7
 8010542:	2b05      	cmp	r3, #5
 8010544:	d826      	bhi.n	8010594 <UART_SetConfig+0x25c>
 8010546:	a201      	add	r2, pc, #4	; (adr r2, 801054c <UART_SetConfig+0x214>)
 8010548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801054c:	08010565 	.word	0x08010565
 8010550:	0801056d 	.word	0x0801056d
 8010554:	08010575 	.word	0x08010575
 8010558:	0801057d 	.word	0x0801057d
 801055c:	08010585 	.word	0x08010585
 8010560:	0801058d 	.word	0x0801058d
 8010564:	2300      	movs	r3, #0
 8010566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801056a:	e2ba      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 801056c:	2304      	movs	r3, #4
 801056e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010572:	e2b6      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010574:	2308      	movs	r3, #8
 8010576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801057a:	e2b2      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 801057c:	2310      	movs	r3, #16
 801057e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010582:	e2ae      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010584:	2320      	movs	r3, #32
 8010586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801058a:	e2aa      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 801058c:	2340      	movs	r3, #64	; 0x40
 801058e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010592:	e2a6      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010594:	2380      	movs	r3, #128	; 0x80
 8010596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801059a:	e2a2      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4a37      	ldr	r2, [pc, #220]	; (8010680 <UART_SetConfig+0x348>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d130      	bne.n	8010608 <UART_SetConfig+0x2d0>
 80105a6:	4b33      	ldr	r3, [pc, #204]	; (8010674 <UART_SetConfig+0x33c>)
 80105a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105aa:	f003 0307 	and.w	r3, r3, #7
 80105ae:	2b05      	cmp	r3, #5
 80105b0:	d826      	bhi.n	8010600 <UART_SetConfig+0x2c8>
 80105b2:	a201      	add	r2, pc, #4	; (adr r2, 80105b8 <UART_SetConfig+0x280>)
 80105b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105b8:	080105d1 	.word	0x080105d1
 80105bc:	080105d9 	.word	0x080105d9
 80105c0:	080105e1 	.word	0x080105e1
 80105c4:	080105e9 	.word	0x080105e9
 80105c8:	080105f1 	.word	0x080105f1
 80105cc:	080105f9 	.word	0x080105f9
 80105d0:	2300      	movs	r3, #0
 80105d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105d6:	e284      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80105d8:	2304      	movs	r3, #4
 80105da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105de:	e280      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80105e0:	2308      	movs	r3, #8
 80105e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105e6:	e27c      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80105e8:	2310      	movs	r3, #16
 80105ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105ee:	e278      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80105f0:	2320      	movs	r3, #32
 80105f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105f6:	e274      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80105f8:	2340      	movs	r3, #64	; 0x40
 80105fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105fe:	e270      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010600:	2380      	movs	r3, #128	; 0x80
 8010602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010606:	e26c      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4a1d      	ldr	r2, [pc, #116]	; (8010684 <UART_SetConfig+0x34c>)
 801060e:	4293      	cmp	r3, r2
 8010610:	d142      	bne.n	8010698 <UART_SetConfig+0x360>
 8010612:	4b18      	ldr	r3, [pc, #96]	; (8010674 <UART_SetConfig+0x33c>)
 8010614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010616:	f003 0307 	and.w	r3, r3, #7
 801061a:	2b05      	cmp	r3, #5
 801061c:	d838      	bhi.n	8010690 <UART_SetConfig+0x358>
 801061e:	a201      	add	r2, pc, #4	; (adr r2, 8010624 <UART_SetConfig+0x2ec>)
 8010620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010624:	0801063d 	.word	0x0801063d
 8010628:	08010645 	.word	0x08010645
 801062c:	0801064d 	.word	0x0801064d
 8010630:	08010655 	.word	0x08010655
 8010634:	0801065d 	.word	0x0801065d
 8010638:	08010689 	.word	0x08010689
 801063c:	2300      	movs	r3, #0
 801063e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010642:	e24e      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010644:	2304      	movs	r3, #4
 8010646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801064a:	e24a      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 801064c:	2308      	movs	r3, #8
 801064e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010652:	e246      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010654:	2310      	movs	r3, #16
 8010656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801065a:	e242      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 801065c:	2320      	movs	r3, #32
 801065e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010662:	e23e      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010664:	cfff69f3 	.word	0xcfff69f3
 8010668:	58000c00 	.word	0x58000c00
 801066c:	11fff4ff 	.word	0x11fff4ff
 8010670:	40011000 	.word	0x40011000
 8010674:	58024400 	.word	0x58024400
 8010678:	40004400 	.word	0x40004400
 801067c:	40004800 	.word	0x40004800
 8010680:	40004c00 	.word	0x40004c00
 8010684:	40005000 	.word	0x40005000
 8010688:	2340      	movs	r3, #64	; 0x40
 801068a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801068e:	e228      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010690:	2380      	movs	r3, #128	; 0x80
 8010692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010696:	e224      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4ab1      	ldr	r2, [pc, #708]	; (8010964 <UART_SetConfig+0x62c>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d176      	bne.n	8010790 <UART_SetConfig+0x458>
 80106a2:	4bb1      	ldr	r3, [pc, #708]	; (8010968 <UART_SetConfig+0x630>)
 80106a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80106aa:	2b28      	cmp	r3, #40	; 0x28
 80106ac:	d86c      	bhi.n	8010788 <UART_SetConfig+0x450>
 80106ae:	a201      	add	r2, pc, #4	; (adr r2, 80106b4 <UART_SetConfig+0x37c>)
 80106b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106b4:	08010759 	.word	0x08010759
 80106b8:	08010789 	.word	0x08010789
 80106bc:	08010789 	.word	0x08010789
 80106c0:	08010789 	.word	0x08010789
 80106c4:	08010789 	.word	0x08010789
 80106c8:	08010789 	.word	0x08010789
 80106cc:	08010789 	.word	0x08010789
 80106d0:	08010789 	.word	0x08010789
 80106d4:	08010761 	.word	0x08010761
 80106d8:	08010789 	.word	0x08010789
 80106dc:	08010789 	.word	0x08010789
 80106e0:	08010789 	.word	0x08010789
 80106e4:	08010789 	.word	0x08010789
 80106e8:	08010789 	.word	0x08010789
 80106ec:	08010789 	.word	0x08010789
 80106f0:	08010789 	.word	0x08010789
 80106f4:	08010769 	.word	0x08010769
 80106f8:	08010789 	.word	0x08010789
 80106fc:	08010789 	.word	0x08010789
 8010700:	08010789 	.word	0x08010789
 8010704:	08010789 	.word	0x08010789
 8010708:	08010789 	.word	0x08010789
 801070c:	08010789 	.word	0x08010789
 8010710:	08010789 	.word	0x08010789
 8010714:	08010771 	.word	0x08010771
 8010718:	08010789 	.word	0x08010789
 801071c:	08010789 	.word	0x08010789
 8010720:	08010789 	.word	0x08010789
 8010724:	08010789 	.word	0x08010789
 8010728:	08010789 	.word	0x08010789
 801072c:	08010789 	.word	0x08010789
 8010730:	08010789 	.word	0x08010789
 8010734:	08010779 	.word	0x08010779
 8010738:	08010789 	.word	0x08010789
 801073c:	08010789 	.word	0x08010789
 8010740:	08010789 	.word	0x08010789
 8010744:	08010789 	.word	0x08010789
 8010748:	08010789 	.word	0x08010789
 801074c:	08010789 	.word	0x08010789
 8010750:	08010789 	.word	0x08010789
 8010754:	08010781 	.word	0x08010781
 8010758:	2301      	movs	r3, #1
 801075a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801075e:	e1c0      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010760:	2304      	movs	r3, #4
 8010762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010766:	e1bc      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010768:	2308      	movs	r3, #8
 801076a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801076e:	e1b8      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010770:	2310      	movs	r3, #16
 8010772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010776:	e1b4      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010778:	2320      	movs	r3, #32
 801077a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801077e:	e1b0      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010780:	2340      	movs	r3, #64	; 0x40
 8010782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010786:	e1ac      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010788:	2380      	movs	r3, #128	; 0x80
 801078a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801078e:	e1a8      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a75      	ldr	r2, [pc, #468]	; (801096c <UART_SetConfig+0x634>)
 8010796:	4293      	cmp	r3, r2
 8010798:	d130      	bne.n	80107fc <UART_SetConfig+0x4c4>
 801079a:	4b73      	ldr	r3, [pc, #460]	; (8010968 <UART_SetConfig+0x630>)
 801079c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801079e:	f003 0307 	and.w	r3, r3, #7
 80107a2:	2b05      	cmp	r3, #5
 80107a4:	d826      	bhi.n	80107f4 <UART_SetConfig+0x4bc>
 80107a6:	a201      	add	r2, pc, #4	; (adr r2, 80107ac <UART_SetConfig+0x474>)
 80107a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ac:	080107c5 	.word	0x080107c5
 80107b0:	080107cd 	.word	0x080107cd
 80107b4:	080107d5 	.word	0x080107d5
 80107b8:	080107dd 	.word	0x080107dd
 80107bc:	080107e5 	.word	0x080107e5
 80107c0:	080107ed 	.word	0x080107ed
 80107c4:	2300      	movs	r3, #0
 80107c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107ca:	e18a      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80107cc:	2304      	movs	r3, #4
 80107ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107d2:	e186      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80107d4:	2308      	movs	r3, #8
 80107d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107da:	e182      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80107dc:	2310      	movs	r3, #16
 80107de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107e2:	e17e      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80107e4:	2320      	movs	r3, #32
 80107e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107ea:	e17a      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80107ec:	2340      	movs	r3, #64	; 0x40
 80107ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107f2:	e176      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80107f4:	2380      	movs	r3, #128	; 0x80
 80107f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107fa:	e172      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4a5b      	ldr	r2, [pc, #364]	; (8010970 <UART_SetConfig+0x638>)
 8010802:	4293      	cmp	r3, r2
 8010804:	d130      	bne.n	8010868 <UART_SetConfig+0x530>
 8010806:	4b58      	ldr	r3, [pc, #352]	; (8010968 <UART_SetConfig+0x630>)
 8010808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801080a:	f003 0307 	and.w	r3, r3, #7
 801080e:	2b05      	cmp	r3, #5
 8010810:	d826      	bhi.n	8010860 <UART_SetConfig+0x528>
 8010812:	a201      	add	r2, pc, #4	; (adr r2, 8010818 <UART_SetConfig+0x4e0>)
 8010814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010818:	08010831 	.word	0x08010831
 801081c:	08010839 	.word	0x08010839
 8010820:	08010841 	.word	0x08010841
 8010824:	08010849 	.word	0x08010849
 8010828:	08010851 	.word	0x08010851
 801082c:	08010859 	.word	0x08010859
 8010830:	2300      	movs	r3, #0
 8010832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010836:	e154      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010838:	2304      	movs	r3, #4
 801083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801083e:	e150      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010840:	2308      	movs	r3, #8
 8010842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010846:	e14c      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010848:	2310      	movs	r3, #16
 801084a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801084e:	e148      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010850:	2320      	movs	r3, #32
 8010852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010856:	e144      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010858:	2340      	movs	r3, #64	; 0x40
 801085a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801085e:	e140      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010860:	2380      	movs	r3, #128	; 0x80
 8010862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010866:	e13c      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	4a41      	ldr	r2, [pc, #260]	; (8010974 <UART_SetConfig+0x63c>)
 801086e:	4293      	cmp	r3, r2
 8010870:	f040 8082 	bne.w	8010978 <UART_SetConfig+0x640>
 8010874:	4b3c      	ldr	r3, [pc, #240]	; (8010968 <UART_SetConfig+0x630>)
 8010876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801087c:	2b28      	cmp	r3, #40	; 0x28
 801087e:	d86d      	bhi.n	801095c <UART_SetConfig+0x624>
 8010880:	a201      	add	r2, pc, #4	; (adr r2, 8010888 <UART_SetConfig+0x550>)
 8010882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010886:	bf00      	nop
 8010888:	0801092d 	.word	0x0801092d
 801088c:	0801095d 	.word	0x0801095d
 8010890:	0801095d 	.word	0x0801095d
 8010894:	0801095d 	.word	0x0801095d
 8010898:	0801095d 	.word	0x0801095d
 801089c:	0801095d 	.word	0x0801095d
 80108a0:	0801095d 	.word	0x0801095d
 80108a4:	0801095d 	.word	0x0801095d
 80108a8:	08010935 	.word	0x08010935
 80108ac:	0801095d 	.word	0x0801095d
 80108b0:	0801095d 	.word	0x0801095d
 80108b4:	0801095d 	.word	0x0801095d
 80108b8:	0801095d 	.word	0x0801095d
 80108bc:	0801095d 	.word	0x0801095d
 80108c0:	0801095d 	.word	0x0801095d
 80108c4:	0801095d 	.word	0x0801095d
 80108c8:	0801093d 	.word	0x0801093d
 80108cc:	0801095d 	.word	0x0801095d
 80108d0:	0801095d 	.word	0x0801095d
 80108d4:	0801095d 	.word	0x0801095d
 80108d8:	0801095d 	.word	0x0801095d
 80108dc:	0801095d 	.word	0x0801095d
 80108e0:	0801095d 	.word	0x0801095d
 80108e4:	0801095d 	.word	0x0801095d
 80108e8:	08010945 	.word	0x08010945
 80108ec:	0801095d 	.word	0x0801095d
 80108f0:	0801095d 	.word	0x0801095d
 80108f4:	0801095d 	.word	0x0801095d
 80108f8:	0801095d 	.word	0x0801095d
 80108fc:	0801095d 	.word	0x0801095d
 8010900:	0801095d 	.word	0x0801095d
 8010904:	0801095d 	.word	0x0801095d
 8010908:	0801094d 	.word	0x0801094d
 801090c:	0801095d 	.word	0x0801095d
 8010910:	0801095d 	.word	0x0801095d
 8010914:	0801095d 	.word	0x0801095d
 8010918:	0801095d 	.word	0x0801095d
 801091c:	0801095d 	.word	0x0801095d
 8010920:	0801095d 	.word	0x0801095d
 8010924:	0801095d 	.word	0x0801095d
 8010928:	08010955 	.word	0x08010955
 801092c:	2301      	movs	r3, #1
 801092e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010932:	e0d6      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010934:	2304      	movs	r3, #4
 8010936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801093a:	e0d2      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 801093c:	2308      	movs	r3, #8
 801093e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010942:	e0ce      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010944:	2310      	movs	r3, #16
 8010946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801094a:	e0ca      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 801094c:	2320      	movs	r3, #32
 801094e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010952:	e0c6      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010954:	2340      	movs	r3, #64	; 0x40
 8010956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801095a:	e0c2      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 801095c:	2380      	movs	r3, #128	; 0x80
 801095e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010962:	e0be      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010964:	40011400 	.word	0x40011400
 8010968:	58024400 	.word	0x58024400
 801096c:	40007800 	.word	0x40007800
 8010970:	40007c00 	.word	0x40007c00
 8010974:	40011800 	.word	0x40011800
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4aad      	ldr	r2, [pc, #692]	; (8010c34 <UART_SetConfig+0x8fc>)
 801097e:	4293      	cmp	r3, r2
 8010980:	d176      	bne.n	8010a70 <UART_SetConfig+0x738>
 8010982:	4bad      	ldr	r3, [pc, #692]	; (8010c38 <UART_SetConfig+0x900>)
 8010984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801098a:	2b28      	cmp	r3, #40	; 0x28
 801098c:	d86c      	bhi.n	8010a68 <UART_SetConfig+0x730>
 801098e:	a201      	add	r2, pc, #4	; (adr r2, 8010994 <UART_SetConfig+0x65c>)
 8010990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010994:	08010a39 	.word	0x08010a39
 8010998:	08010a69 	.word	0x08010a69
 801099c:	08010a69 	.word	0x08010a69
 80109a0:	08010a69 	.word	0x08010a69
 80109a4:	08010a69 	.word	0x08010a69
 80109a8:	08010a69 	.word	0x08010a69
 80109ac:	08010a69 	.word	0x08010a69
 80109b0:	08010a69 	.word	0x08010a69
 80109b4:	08010a41 	.word	0x08010a41
 80109b8:	08010a69 	.word	0x08010a69
 80109bc:	08010a69 	.word	0x08010a69
 80109c0:	08010a69 	.word	0x08010a69
 80109c4:	08010a69 	.word	0x08010a69
 80109c8:	08010a69 	.word	0x08010a69
 80109cc:	08010a69 	.word	0x08010a69
 80109d0:	08010a69 	.word	0x08010a69
 80109d4:	08010a49 	.word	0x08010a49
 80109d8:	08010a69 	.word	0x08010a69
 80109dc:	08010a69 	.word	0x08010a69
 80109e0:	08010a69 	.word	0x08010a69
 80109e4:	08010a69 	.word	0x08010a69
 80109e8:	08010a69 	.word	0x08010a69
 80109ec:	08010a69 	.word	0x08010a69
 80109f0:	08010a69 	.word	0x08010a69
 80109f4:	08010a51 	.word	0x08010a51
 80109f8:	08010a69 	.word	0x08010a69
 80109fc:	08010a69 	.word	0x08010a69
 8010a00:	08010a69 	.word	0x08010a69
 8010a04:	08010a69 	.word	0x08010a69
 8010a08:	08010a69 	.word	0x08010a69
 8010a0c:	08010a69 	.word	0x08010a69
 8010a10:	08010a69 	.word	0x08010a69
 8010a14:	08010a59 	.word	0x08010a59
 8010a18:	08010a69 	.word	0x08010a69
 8010a1c:	08010a69 	.word	0x08010a69
 8010a20:	08010a69 	.word	0x08010a69
 8010a24:	08010a69 	.word	0x08010a69
 8010a28:	08010a69 	.word	0x08010a69
 8010a2c:	08010a69 	.word	0x08010a69
 8010a30:	08010a69 	.word	0x08010a69
 8010a34:	08010a61 	.word	0x08010a61
 8010a38:	2301      	movs	r3, #1
 8010a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a3e:	e050      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010a40:	2304      	movs	r3, #4
 8010a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a46:	e04c      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010a48:	2308      	movs	r3, #8
 8010a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a4e:	e048      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010a50:	2310      	movs	r3, #16
 8010a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a56:	e044      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010a58:	2320      	movs	r3, #32
 8010a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a5e:	e040      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010a60:	2340      	movs	r3, #64	; 0x40
 8010a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a66:	e03c      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010a68:	2380      	movs	r3, #128	; 0x80
 8010a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a6e:	e038      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	4a71      	ldr	r2, [pc, #452]	; (8010c3c <UART_SetConfig+0x904>)
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d130      	bne.n	8010adc <UART_SetConfig+0x7a4>
 8010a7a:	4b6f      	ldr	r3, [pc, #444]	; (8010c38 <UART_SetConfig+0x900>)
 8010a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a7e:	f003 0307 	and.w	r3, r3, #7
 8010a82:	2b05      	cmp	r3, #5
 8010a84:	d826      	bhi.n	8010ad4 <UART_SetConfig+0x79c>
 8010a86:	a201      	add	r2, pc, #4	; (adr r2, 8010a8c <UART_SetConfig+0x754>)
 8010a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a8c:	08010aa5 	.word	0x08010aa5
 8010a90:	08010aad 	.word	0x08010aad
 8010a94:	08010ab5 	.word	0x08010ab5
 8010a98:	08010abd 	.word	0x08010abd
 8010a9c:	08010ac5 	.word	0x08010ac5
 8010aa0:	08010acd 	.word	0x08010acd
 8010aa4:	2302      	movs	r3, #2
 8010aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aaa:	e01a      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010aac:	2304      	movs	r3, #4
 8010aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ab2:	e016      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010ab4:	2308      	movs	r3, #8
 8010ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aba:	e012      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010abc:	2310      	movs	r3, #16
 8010abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ac2:	e00e      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010ac4:	2320      	movs	r3, #32
 8010ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aca:	e00a      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010acc:	2340      	movs	r3, #64	; 0x40
 8010ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ad2:	e006      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010ad4:	2380      	movs	r3, #128	; 0x80
 8010ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ada:	e002      	b.n	8010ae2 <UART_SetConfig+0x7aa>
 8010adc:	2380      	movs	r3, #128	; 0x80
 8010ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	4a55      	ldr	r2, [pc, #340]	; (8010c3c <UART_SetConfig+0x904>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	f040 80f0 	bne.w	8010cce <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010aee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010af2:	2b20      	cmp	r3, #32
 8010af4:	dc46      	bgt.n	8010b84 <UART_SetConfig+0x84c>
 8010af6:	2b02      	cmp	r3, #2
 8010af8:	db75      	blt.n	8010be6 <UART_SetConfig+0x8ae>
 8010afa:	3b02      	subs	r3, #2
 8010afc:	2b1e      	cmp	r3, #30
 8010afe:	d872      	bhi.n	8010be6 <UART_SetConfig+0x8ae>
 8010b00:	a201      	add	r2, pc, #4	; (adr r2, 8010b08 <UART_SetConfig+0x7d0>)
 8010b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b06:	bf00      	nop
 8010b08:	08010b8b 	.word	0x08010b8b
 8010b0c:	08010be7 	.word	0x08010be7
 8010b10:	08010b93 	.word	0x08010b93
 8010b14:	08010be7 	.word	0x08010be7
 8010b18:	08010be7 	.word	0x08010be7
 8010b1c:	08010be7 	.word	0x08010be7
 8010b20:	08010ba3 	.word	0x08010ba3
 8010b24:	08010be7 	.word	0x08010be7
 8010b28:	08010be7 	.word	0x08010be7
 8010b2c:	08010be7 	.word	0x08010be7
 8010b30:	08010be7 	.word	0x08010be7
 8010b34:	08010be7 	.word	0x08010be7
 8010b38:	08010be7 	.word	0x08010be7
 8010b3c:	08010be7 	.word	0x08010be7
 8010b40:	08010bb3 	.word	0x08010bb3
 8010b44:	08010be7 	.word	0x08010be7
 8010b48:	08010be7 	.word	0x08010be7
 8010b4c:	08010be7 	.word	0x08010be7
 8010b50:	08010be7 	.word	0x08010be7
 8010b54:	08010be7 	.word	0x08010be7
 8010b58:	08010be7 	.word	0x08010be7
 8010b5c:	08010be7 	.word	0x08010be7
 8010b60:	08010be7 	.word	0x08010be7
 8010b64:	08010be7 	.word	0x08010be7
 8010b68:	08010be7 	.word	0x08010be7
 8010b6c:	08010be7 	.word	0x08010be7
 8010b70:	08010be7 	.word	0x08010be7
 8010b74:	08010be7 	.word	0x08010be7
 8010b78:	08010be7 	.word	0x08010be7
 8010b7c:	08010be7 	.word	0x08010be7
 8010b80:	08010bd9 	.word	0x08010bd9
 8010b84:	2b40      	cmp	r3, #64	; 0x40
 8010b86:	d02a      	beq.n	8010bde <UART_SetConfig+0x8a6>
 8010b88:	e02d      	b.n	8010be6 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010b8a:	f7fc fe75 	bl	800d878 <HAL_RCCEx_GetD3PCLK1Freq>
 8010b8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010b90:	e02f      	b.n	8010bf2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b92:	f107 0314 	add.w	r3, r7, #20
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fc fe84 	bl	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010b9c:	69bb      	ldr	r3, [r7, #24]
 8010b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ba0:	e027      	b.n	8010bf2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ba2:	f107 0308 	add.w	r3, r7, #8
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7fc ffd0 	bl	800db4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010bb0:	e01f      	b.n	8010bf2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010bb2:	4b21      	ldr	r3, [pc, #132]	; (8010c38 <UART_SetConfig+0x900>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f003 0320 	and.w	r3, r3, #32
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d009      	beq.n	8010bd2 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010bbe:	4b1e      	ldr	r3, [pc, #120]	; (8010c38 <UART_SetConfig+0x900>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	08db      	lsrs	r3, r3, #3
 8010bc4:	f003 0303 	and.w	r3, r3, #3
 8010bc8:	4a1d      	ldr	r2, [pc, #116]	; (8010c40 <UART_SetConfig+0x908>)
 8010bca:	fa22 f303 	lsr.w	r3, r2, r3
 8010bce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010bd0:	e00f      	b.n	8010bf2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8010bd2:	4b1b      	ldr	r3, [pc, #108]	; (8010c40 <UART_SetConfig+0x908>)
 8010bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010bd6:	e00c      	b.n	8010bf2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010bd8:	4b1a      	ldr	r3, [pc, #104]	; (8010c44 <UART_SetConfig+0x90c>)
 8010bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010bdc:	e009      	b.n	8010bf2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010be4:	e005      	b.n	8010bf2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8010be6:	2300      	movs	r3, #0
 8010be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010bea:	2301      	movs	r3, #1
 8010bec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010bf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	f000 81e6 	beq.w	8010fc6 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bfe:	4a12      	ldr	r2, [pc, #72]	; (8010c48 <UART_SetConfig+0x910>)
 8010c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c04:	461a      	mov	r2, r3
 8010c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c0c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	685a      	ldr	r2, [r3, #4]
 8010c12:	4613      	mov	r3, r2
 8010c14:	005b      	lsls	r3, r3, #1
 8010c16:	4413      	add	r3, r2
 8010c18:	6a3a      	ldr	r2, [r7, #32]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d305      	bcc.n	8010c2a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	685b      	ldr	r3, [r3, #4]
 8010c22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c24:	6a3a      	ldr	r2, [r7, #32]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d910      	bls.n	8010c4c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010c30:	e1c9      	b.n	8010fc6 <UART_SetConfig+0xc8e>
 8010c32:	bf00      	nop
 8010c34:	40011c00 	.word	0x40011c00
 8010c38:	58024400 	.word	0x58024400
 8010c3c:	58000c00 	.word	0x58000c00
 8010c40:	03d09000 	.word	0x03d09000
 8010c44:	003d0900 	.word	0x003d0900
 8010c48:	08014c50 	.word	0x08014c50
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f04f 0100 	mov.w	r1, #0
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c58:	4ac1      	ldr	r2, [pc, #772]	; (8010f60 <UART_SetConfig+0xc28>)
 8010c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c5e:	b29a      	uxth	r2, r3
 8010c60:	f04f 0300 	mov.w	r3, #0
 8010c64:	f7ef fbac 	bl	80003c0 <__aeabi_uldivmod>
 8010c68:	4602      	mov	r2, r0
 8010c6a:	460b      	mov	r3, r1
 8010c6c:	4610      	mov	r0, r2
 8010c6e:	4619      	mov	r1, r3
 8010c70:	f04f 0200 	mov.w	r2, #0
 8010c74:	f04f 0300 	mov.w	r3, #0
 8010c78:	020b      	lsls	r3, r1, #8
 8010c7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010c7e:	0202      	lsls	r2, r0, #8
 8010c80:	6879      	ldr	r1, [r7, #4]
 8010c82:	6849      	ldr	r1, [r1, #4]
 8010c84:	0849      	lsrs	r1, r1, #1
 8010c86:	4608      	mov	r0, r1
 8010c88:	f04f 0100 	mov.w	r1, #0
 8010c8c:	1814      	adds	r4, r2, r0
 8010c8e:	eb43 0501 	adc.w	r5, r3, r1
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	461a      	mov	r2, r3
 8010c98:	f04f 0300 	mov.w	r3, #0
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	f7ef fb8e 	bl	80003c0 <__aeabi_uldivmod>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	4613      	mov	r3, r2
 8010caa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010cb2:	d308      	bcc.n	8010cc6 <UART_SetConfig+0x98e>
 8010cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cba:	d204      	bcs.n	8010cc6 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cc2:	60da      	str	r2, [r3, #12]
 8010cc4:	e17f      	b.n	8010fc6 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010ccc:	e17b      	b.n	8010fc6 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	69db      	ldr	r3, [r3, #28]
 8010cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cd6:	f040 80bd 	bne.w	8010e54 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8010cda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010cde:	2b20      	cmp	r3, #32
 8010ce0:	dc48      	bgt.n	8010d74 <UART_SetConfig+0xa3c>
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	db7b      	blt.n	8010dde <UART_SetConfig+0xaa6>
 8010ce6:	2b20      	cmp	r3, #32
 8010ce8:	d879      	bhi.n	8010dde <UART_SetConfig+0xaa6>
 8010cea:	a201      	add	r2, pc, #4	; (adr r2, 8010cf0 <UART_SetConfig+0x9b8>)
 8010cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cf0:	08010d7b 	.word	0x08010d7b
 8010cf4:	08010d83 	.word	0x08010d83
 8010cf8:	08010ddf 	.word	0x08010ddf
 8010cfc:	08010ddf 	.word	0x08010ddf
 8010d00:	08010d8b 	.word	0x08010d8b
 8010d04:	08010ddf 	.word	0x08010ddf
 8010d08:	08010ddf 	.word	0x08010ddf
 8010d0c:	08010ddf 	.word	0x08010ddf
 8010d10:	08010d9b 	.word	0x08010d9b
 8010d14:	08010ddf 	.word	0x08010ddf
 8010d18:	08010ddf 	.word	0x08010ddf
 8010d1c:	08010ddf 	.word	0x08010ddf
 8010d20:	08010ddf 	.word	0x08010ddf
 8010d24:	08010ddf 	.word	0x08010ddf
 8010d28:	08010ddf 	.word	0x08010ddf
 8010d2c:	08010ddf 	.word	0x08010ddf
 8010d30:	08010dab 	.word	0x08010dab
 8010d34:	08010ddf 	.word	0x08010ddf
 8010d38:	08010ddf 	.word	0x08010ddf
 8010d3c:	08010ddf 	.word	0x08010ddf
 8010d40:	08010ddf 	.word	0x08010ddf
 8010d44:	08010ddf 	.word	0x08010ddf
 8010d48:	08010ddf 	.word	0x08010ddf
 8010d4c:	08010ddf 	.word	0x08010ddf
 8010d50:	08010ddf 	.word	0x08010ddf
 8010d54:	08010ddf 	.word	0x08010ddf
 8010d58:	08010ddf 	.word	0x08010ddf
 8010d5c:	08010ddf 	.word	0x08010ddf
 8010d60:	08010ddf 	.word	0x08010ddf
 8010d64:	08010ddf 	.word	0x08010ddf
 8010d68:	08010ddf 	.word	0x08010ddf
 8010d6c:	08010ddf 	.word	0x08010ddf
 8010d70:	08010dd1 	.word	0x08010dd1
 8010d74:	2b40      	cmp	r3, #64	; 0x40
 8010d76:	d02e      	beq.n	8010dd6 <UART_SetConfig+0xa9e>
 8010d78:	e031      	b.n	8010dde <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d7a:	f7fb fa17 	bl	800c1ac <HAL_RCC_GetPCLK1Freq>
 8010d7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010d80:	e033      	b.n	8010dea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d82:	f7fb fa29 	bl	800c1d8 <HAL_RCC_GetPCLK2Freq>
 8010d86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010d88:	e02f      	b.n	8010dea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d8a:	f107 0314 	add.w	r3, r7, #20
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fc fd88 	bl	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d94:	69bb      	ldr	r3, [r7, #24]
 8010d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d98:	e027      	b.n	8010dea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d9a:	f107 0308 	add.w	r3, r7, #8
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fc fed4 	bl	800db4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010da8:	e01f      	b.n	8010dea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010daa:	4b6e      	ldr	r3, [pc, #440]	; (8010f64 <UART_SetConfig+0xc2c>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f003 0320 	and.w	r3, r3, #32
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d009      	beq.n	8010dca <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010db6:	4b6b      	ldr	r3, [pc, #428]	; (8010f64 <UART_SetConfig+0xc2c>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	08db      	lsrs	r3, r3, #3
 8010dbc:	f003 0303 	and.w	r3, r3, #3
 8010dc0:	4a69      	ldr	r2, [pc, #420]	; (8010f68 <UART_SetConfig+0xc30>)
 8010dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8010dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010dc8:	e00f      	b.n	8010dea <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8010dca:	4b67      	ldr	r3, [pc, #412]	; (8010f68 <UART_SetConfig+0xc30>)
 8010dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010dce:	e00c      	b.n	8010dea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010dd0:	4b66      	ldr	r3, [pc, #408]	; (8010f6c <UART_SetConfig+0xc34>)
 8010dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010dd4:	e009      	b.n	8010dea <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ddc:	e005      	b.n	8010dea <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8010dde:	2300      	movs	r3, #0
 8010de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010de2:	2301      	movs	r3, #1
 8010de4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010de8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	f000 80ea 	beq.w	8010fc6 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df6:	4a5a      	ldr	r2, [pc, #360]	; (8010f60 <UART_SetConfig+0xc28>)
 8010df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e04:	005a      	lsls	r2, r3, #1
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	085b      	lsrs	r3, r3, #1
 8010e0c:	441a      	add	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e16:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1a:	2b0f      	cmp	r3, #15
 8010e1c:	d916      	bls.n	8010e4c <UART_SetConfig+0xb14>
 8010e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e24:	d212      	bcs.n	8010e4c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	f023 030f 	bic.w	r3, r3, #15
 8010e2e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e32:	085b      	lsrs	r3, r3, #1
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	f003 0307 	and.w	r3, r3, #7
 8010e3a:	b29a      	uxth	r2, r3
 8010e3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e3e:	4313      	orrs	r3, r2
 8010e40:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010e48:	60da      	str	r2, [r3, #12]
 8010e4a:	e0bc      	b.n	8010fc6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010e52:	e0b8      	b.n	8010fc6 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010e58:	2b20      	cmp	r3, #32
 8010e5a:	dc4b      	bgt.n	8010ef4 <UART_SetConfig+0xbbc>
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	f2c0 8087 	blt.w	8010f70 <UART_SetConfig+0xc38>
 8010e62:	2b20      	cmp	r3, #32
 8010e64:	f200 8084 	bhi.w	8010f70 <UART_SetConfig+0xc38>
 8010e68:	a201      	add	r2, pc, #4	; (adr r2, 8010e70 <UART_SetConfig+0xb38>)
 8010e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e6e:	bf00      	nop
 8010e70:	08010efb 	.word	0x08010efb
 8010e74:	08010f03 	.word	0x08010f03
 8010e78:	08010f71 	.word	0x08010f71
 8010e7c:	08010f71 	.word	0x08010f71
 8010e80:	08010f0b 	.word	0x08010f0b
 8010e84:	08010f71 	.word	0x08010f71
 8010e88:	08010f71 	.word	0x08010f71
 8010e8c:	08010f71 	.word	0x08010f71
 8010e90:	08010f1b 	.word	0x08010f1b
 8010e94:	08010f71 	.word	0x08010f71
 8010e98:	08010f71 	.word	0x08010f71
 8010e9c:	08010f71 	.word	0x08010f71
 8010ea0:	08010f71 	.word	0x08010f71
 8010ea4:	08010f71 	.word	0x08010f71
 8010ea8:	08010f71 	.word	0x08010f71
 8010eac:	08010f71 	.word	0x08010f71
 8010eb0:	08010f2b 	.word	0x08010f2b
 8010eb4:	08010f71 	.word	0x08010f71
 8010eb8:	08010f71 	.word	0x08010f71
 8010ebc:	08010f71 	.word	0x08010f71
 8010ec0:	08010f71 	.word	0x08010f71
 8010ec4:	08010f71 	.word	0x08010f71
 8010ec8:	08010f71 	.word	0x08010f71
 8010ecc:	08010f71 	.word	0x08010f71
 8010ed0:	08010f71 	.word	0x08010f71
 8010ed4:	08010f71 	.word	0x08010f71
 8010ed8:	08010f71 	.word	0x08010f71
 8010edc:	08010f71 	.word	0x08010f71
 8010ee0:	08010f71 	.word	0x08010f71
 8010ee4:	08010f71 	.word	0x08010f71
 8010ee8:	08010f71 	.word	0x08010f71
 8010eec:	08010f71 	.word	0x08010f71
 8010ef0:	08010f51 	.word	0x08010f51
 8010ef4:	2b40      	cmp	r3, #64	; 0x40
 8010ef6:	d02e      	beq.n	8010f56 <UART_SetConfig+0xc1e>
 8010ef8:	e03a      	b.n	8010f70 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010efa:	f7fb f957 	bl	800c1ac <HAL_RCC_GetPCLK1Freq>
 8010efe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010f00:	e03c      	b.n	8010f7c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010f02:	f7fb f969 	bl	800c1d8 <HAL_RCC_GetPCLK2Freq>
 8010f06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010f08:	e038      	b.n	8010f7c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f0a:	f107 0314 	add.w	r3, r7, #20
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fc fcc8 	bl	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f18:	e030      	b.n	8010f7c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f1a:	f107 0308 	add.w	r3, r7, #8
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7fc fe14 	bl	800db4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f28:	e028      	b.n	8010f7c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f2a:	4b0e      	ldr	r3, [pc, #56]	; (8010f64 <UART_SetConfig+0xc2c>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	f003 0320 	and.w	r3, r3, #32
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d009      	beq.n	8010f4a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f36:	4b0b      	ldr	r3, [pc, #44]	; (8010f64 <UART_SetConfig+0xc2c>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	08db      	lsrs	r3, r3, #3
 8010f3c:	f003 0303 	and.w	r3, r3, #3
 8010f40:	4a09      	ldr	r2, [pc, #36]	; (8010f68 <UART_SetConfig+0xc30>)
 8010f42:	fa22 f303 	lsr.w	r3, r2, r3
 8010f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f48:	e018      	b.n	8010f7c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8010f4a:	4b07      	ldr	r3, [pc, #28]	; (8010f68 <UART_SetConfig+0xc30>)
 8010f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f4e:	e015      	b.n	8010f7c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f50:	4b06      	ldr	r3, [pc, #24]	; (8010f6c <UART_SetConfig+0xc34>)
 8010f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f54:	e012      	b.n	8010f7c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f5c:	e00e      	b.n	8010f7c <UART_SetConfig+0xc44>
 8010f5e:	bf00      	nop
 8010f60:	08014c50 	.word	0x08014c50
 8010f64:	58024400 	.word	0x58024400
 8010f68:	03d09000 	.word	0x03d09000
 8010f6c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8010f70:	2300      	movs	r3, #0
 8010f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010f74:	2301      	movs	r3, #1
 8010f76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010f7a:	bf00      	nop
    }

    if (pclk != 0U)
 8010f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d021      	beq.n	8010fc6 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f86:	4a1a      	ldr	r2, [pc, #104]	; (8010ff0 <UART_SetConfig+0xcb8>)
 8010f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f90:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	085b      	lsrs	r3, r3, #1
 8010f9a:	441a      	add	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	685b      	ldr	r3, [r3, #4]
 8010fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa8:	2b0f      	cmp	r3, #15
 8010faa:	d909      	bls.n	8010fc0 <UART_SetConfig+0xc88>
 8010fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fb2:	d205      	bcs.n	8010fc0 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	60da      	str	r2, [r3, #12]
 8010fbe:	e002      	b.n	8010fc6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2201      	movs	r2, #1
 8010fca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010fe2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3738      	adds	r7, #56	; 0x38
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bdb0      	pop	{r4, r5, r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	08014c50 	.word	0x08014c50

08010ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b083      	sub	sp, #12
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011000:	f003 0301 	and.w	r3, r3, #1
 8011004:	2b00      	cmp	r3, #0
 8011006:	d00a      	beq.n	801101e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	430a      	orrs	r2, r1
 801101c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011022:	f003 0302 	and.w	r3, r3, #2
 8011026:	2b00      	cmp	r3, #0
 8011028:	d00a      	beq.n	8011040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	430a      	orrs	r2, r1
 801103e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011044:	f003 0304 	and.w	r3, r3, #4
 8011048:	2b00      	cmp	r3, #0
 801104a:	d00a      	beq.n	8011062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	430a      	orrs	r2, r1
 8011060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011066:	f003 0308 	and.w	r3, r3, #8
 801106a:	2b00      	cmp	r3, #0
 801106c:	d00a      	beq.n	8011084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	685b      	ldr	r3, [r3, #4]
 8011074:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	430a      	orrs	r2, r1
 8011082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011088:	f003 0310 	and.w	r3, r3, #16
 801108c:	2b00      	cmp	r3, #0
 801108e:	d00a      	beq.n	80110a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	689b      	ldr	r3, [r3, #8]
 8011096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	430a      	orrs	r2, r1
 80110a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110aa:	f003 0320 	and.w	r3, r3, #32
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d00a      	beq.n	80110c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	689b      	ldr	r3, [r3, #8]
 80110b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	430a      	orrs	r2, r1
 80110c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d01a      	beq.n	801110a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	430a      	orrs	r2, r1
 80110e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110f2:	d10a      	bne.n	801110a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	430a      	orrs	r2, r1
 8011108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011112:	2b00      	cmp	r3, #0
 8011114:	d00a      	beq.n	801112c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	430a      	orrs	r2, r1
 801112a:	605a      	str	r2, [r3, #4]
  }
}
 801112c:	bf00      	nop
 801112e:	370c      	adds	r7, #12
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr

08011138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af02      	add	r7, sp, #8
 801113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011148:	f7f7 fc42 	bl	80089d0 <HAL_GetTick>
 801114c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f003 0308 	and.w	r3, r3, #8
 8011158:	2b08      	cmp	r3, #8
 801115a:	d10e      	bne.n	801117a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801115c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011160:	9300      	str	r3, [sp, #0]
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2200      	movs	r2, #0
 8011166:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f000 f82f 	bl	80111ce <UART_WaitOnFlagUntilTimeout>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d001      	beq.n	801117a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011176:	2303      	movs	r3, #3
 8011178:	e025      	b.n	80111c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	f003 0304 	and.w	r3, r3, #4
 8011184:	2b04      	cmp	r3, #4
 8011186:	d10e      	bne.n	80111a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801118c:	9300      	str	r3, [sp, #0]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2200      	movs	r2, #0
 8011192:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 f819 	bl	80111ce <UART_WaitOnFlagUntilTimeout>
 801119c:	4603      	mov	r3, r0
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d001      	beq.n	80111a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80111a2:	2303      	movs	r3, #3
 80111a4:	e00f      	b.n	80111c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2220      	movs	r2, #32
 80111aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2220      	movs	r2, #32
 80111b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2200      	movs	r2, #0
 80111ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2200      	movs	r2, #0
 80111c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3710      	adds	r7, #16
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}

080111ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80111ce:	b580      	push	{r7, lr}
 80111d0:	b09c      	sub	sp, #112	; 0x70
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	60f8      	str	r0, [r7, #12]
 80111d6:	60b9      	str	r1, [r7, #8]
 80111d8:	603b      	str	r3, [r7, #0]
 80111da:	4613      	mov	r3, r2
 80111dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80111de:	e0a9      	b.n	8011334 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80111e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111e6:	f000 80a5 	beq.w	8011334 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80111ea:	f7f7 fbf1 	bl	80089d0 <HAL_GetTick>
 80111ee:	4602      	mov	r2, r0
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	1ad3      	subs	r3, r2, r3
 80111f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80111f6:	429a      	cmp	r2, r3
 80111f8:	d302      	bcc.n	8011200 <UART_WaitOnFlagUntilTimeout+0x32>
 80111fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d140      	bne.n	8011282 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011208:	e853 3f00 	ldrex	r3, [r3]
 801120c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801120e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011210:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011214:	667b      	str	r3, [r7, #100]	; 0x64
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	461a      	mov	r2, r3
 801121c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801121e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011220:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011222:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011224:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011226:	e841 2300 	strex	r3, r2, [r1]
 801122a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801122c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801122e:	2b00      	cmp	r3, #0
 8011230:	d1e6      	bne.n	8011200 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	3308      	adds	r3, #8
 8011238:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801123a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801123c:	e853 3f00 	ldrex	r3, [r3]
 8011240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011244:	f023 0301 	bic.w	r3, r3, #1
 8011248:	663b      	str	r3, [r7, #96]	; 0x60
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	3308      	adds	r3, #8
 8011250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011252:	64ba      	str	r2, [r7, #72]	; 0x48
 8011254:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801125a:	e841 2300 	strex	r3, r2, [r1]
 801125e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011262:	2b00      	cmp	r3, #0
 8011264:	d1e5      	bne.n	8011232 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	2220      	movs	r2, #32
 801126a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	2220      	movs	r2, #32
 8011272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	2200      	movs	r2, #0
 801127a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801127e:	2303      	movs	r3, #3
 8011280:	e069      	b.n	8011356 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f003 0304 	and.w	r3, r3, #4
 801128c:	2b00      	cmp	r3, #0
 801128e:	d051      	beq.n	8011334 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	69db      	ldr	r3, [r3, #28]
 8011296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801129a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801129e:	d149      	bne.n	8011334 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80112a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b2:	e853 3f00 	ldrex	r3, [r3]
 80112b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80112b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80112be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	461a      	mov	r2, r3
 80112c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80112c8:	637b      	str	r3, [r7, #52]	; 0x34
 80112ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80112ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112d0:	e841 2300 	strex	r3, r2, [r1]
 80112d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80112d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d1e6      	bne.n	80112aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	3308      	adds	r3, #8
 80112e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	e853 3f00 	ldrex	r3, [r3]
 80112ea:	613b      	str	r3, [r7, #16]
   return(result);
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	f023 0301 	bic.w	r3, r3, #1
 80112f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	3308      	adds	r3, #8
 80112fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80112fc:	623a      	str	r2, [r7, #32]
 80112fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011300:	69f9      	ldr	r1, [r7, #28]
 8011302:	6a3a      	ldr	r2, [r7, #32]
 8011304:	e841 2300 	strex	r3, r2, [r1]
 8011308:	61bb      	str	r3, [r7, #24]
   return(result);
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d1e5      	bne.n	80112dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	2220      	movs	r2, #32
 8011314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2220      	movs	r2, #32
 801131c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2220      	movs	r2, #32
 8011324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	2200      	movs	r2, #0
 801132c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8011330:	2303      	movs	r3, #3
 8011332:	e010      	b.n	8011356 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	69da      	ldr	r2, [r3, #28]
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	4013      	ands	r3, r2
 801133e:	68ba      	ldr	r2, [r7, #8]
 8011340:	429a      	cmp	r2, r3
 8011342:	bf0c      	ite	eq
 8011344:	2301      	moveq	r3, #1
 8011346:	2300      	movne	r3, #0
 8011348:	b2db      	uxtb	r3, r3
 801134a:	461a      	mov	r2, r3
 801134c:	79fb      	ldrb	r3, [r7, #7]
 801134e:	429a      	cmp	r2, r3
 8011350:	f43f af46 	beq.w	80111e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011354:	2300      	movs	r3, #0
}
 8011356:	4618      	mov	r0, r3
 8011358:	3770      	adds	r7, #112	; 0x70
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
	...

08011360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011360:	b480      	push	{r7}
 8011362:	b095      	sub	sp, #84	; 0x54
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801136e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011370:	e853 3f00 	ldrex	r3, [r3]
 8011374:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801137c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	461a      	mov	r2, r3
 8011384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011386:	643b      	str	r3, [r7, #64]	; 0x40
 8011388:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801138a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801138c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801138e:	e841 2300 	strex	r3, r2, [r1]
 8011392:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011396:	2b00      	cmp	r3, #0
 8011398:	d1e6      	bne.n	8011368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	3308      	adds	r3, #8
 80113a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113a2:	6a3b      	ldr	r3, [r7, #32]
 80113a4:	e853 3f00 	ldrex	r3, [r3]
 80113a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80113aa:	69fa      	ldr	r2, [r7, #28]
 80113ac:	4b1e      	ldr	r3, [pc, #120]	; (8011428 <UART_EndRxTransfer+0xc8>)
 80113ae:	4013      	ands	r3, r2
 80113b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	3308      	adds	r3, #8
 80113b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80113bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80113c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113c2:	e841 2300 	strex	r3, r2, [r1]
 80113c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80113c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d1e5      	bne.n	801139a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113d2:	2b01      	cmp	r3, #1
 80113d4:	d118      	bne.n	8011408 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	e853 3f00 	ldrex	r3, [r3]
 80113e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	f023 0310 	bic.w	r3, r3, #16
 80113ea:	647b      	str	r3, [r7, #68]	; 0x44
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	461a      	mov	r2, r3
 80113f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113f4:	61bb      	str	r3, [r7, #24]
 80113f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113f8:	6979      	ldr	r1, [r7, #20]
 80113fa:	69ba      	ldr	r2, [r7, #24]
 80113fc:	e841 2300 	strex	r3, r2, [r1]
 8011400:	613b      	str	r3, [r7, #16]
   return(result);
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d1e6      	bne.n	80113d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2220      	movs	r2, #32
 801140c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2200      	movs	r2, #0
 801141a:	671a      	str	r2, [r3, #112]	; 0x70
}
 801141c:	bf00      	nop
 801141e:	3754      	adds	r7, #84	; 0x54
 8011420:	46bd      	mov	sp, r7
 8011422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011426:	4770      	bx	lr
 8011428:	effffffe 	.word	0xeffffffe

0801142c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011438:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2200      	movs	r2, #0
 801143e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	2200      	movs	r2, #0
 8011446:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f7fe ff5e 	bl	801030c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011450:	bf00      	nop
 8011452:	3710      	adds	r7, #16
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b088      	sub	sp, #32
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	e853 3f00 	ldrex	r3, [r3]
 801146c:	60bb      	str	r3, [r7, #8]
   return(result);
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011474:	61fb      	str	r3, [r7, #28]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	461a      	mov	r2, r3
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	61bb      	str	r3, [r7, #24]
 8011480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011482:	6979      	ldr	r1, [r7, #20]
 8011484:	69ba      	ldr	r2, [r7, #24]
 8011486:	e841 2300 	strex	r3, r2, [r1]
 801148a:	613b      	str	r3, [r7, #16]
   return(result);
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d1e6      	bne.n	8011460 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2220      	movs	r2, #32
 8011496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2200      	movs	r2, #0
 801149e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f7f5 fe2f 	bl	8007104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80114a6:	bf00      	nop
 80114a8:	3720      	adds	r7, #32
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}

080114ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80114ae:	b480      	push	{r7}
 80114b0:	b083      	sub	sp, #12
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80114b6:	bf00      	nop
 80114b8:	370c      	adds	r7, #12
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr

080114c2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80114c2:	b480      	push	{r7}
 80114c4:	b083      	sub	sp, #12
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80114ca:	bf00      	nop
 80114cc:	370c      	adds	r7, #12
 80114ce:	46bd      	mov	sp, r7
 80114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d4:	4770      	bx	lr

080114d6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80114d6:	b480      	push	{r7}
 80114d8:	b083      	sub	sp, #12
 80114da:	af00      	add	r7, sp, #0
 80114dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80114de:	bf00      	nop
 80114e0:	370c      	adds	r7, #12
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr

080114ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80114ea:	b480      	push	{r7}
 80114ec:	b085      	sub	sp, #20
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d101      	bne.n	8011500 <HAL_UARTEx_DisableFifoMode+0x16>
 80114fc:	2302      	movs	r3, #2
 80114fe:	e027      	b.n	8011550 <HAL_UARTEx_DisableFifoMode+0x66>
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2201      	movs	r2, #1
 8011504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2224      	movs	r2, #36	; 0x24
 801150c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	f022 0201 	bic.w	r2, r2, #1
 8011526:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801152e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2200      	movs	r2, #0
 8011534:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	68fa      	ldr	r2, [r7, #12]
 801153c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2220      	movs	r2, #32
 8011542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2200      	movs	r2, #0
 801154a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801154e:	2300      	movs	r3, #0
}
 8011550:	4618      	mov	r0, r3
 8011552:	3714      	adds	r7, #20
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801156c:	2b01      	cmp	r3, #1
 801156e:	d101      	bne.n	8011574 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011570:	2302      	movs	r3, #2
 8011572:	e02d      	b.n	80115d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2201      	movs	r2, #1
 8011578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2224      	movs	r2, #36	; 0x24
 8011580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	f022 0201 	bic.w	r2, r2, #1
 801159a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	689b      	ldr	r3, [r3, #8]
 80115a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	683a      	ldr	r2, [r7, #0]
 80115ac:	430a      	orrs	r2, r1
 80115ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 f84f 	bl	8011654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	68fa      	ldr	r2, [r7, #12]
 80115bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2220      	movs	r2, #32
 80115c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80115ce:	2300      	movs	r3, #0
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3710      	adds	r7, #16
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b084      	sub	sp, #16
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d101      	bne.n	80115f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80115ec:	2302      	movs	r3, #2
 80115ee:	e02d      	b.n	801164c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2201      	movs	r2, #1
 80115f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2224      	movs	r2, #36	; 0x24
 80115fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	f022 0201 	bic.w	r2, r2, #1
 8011616:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	689b      	ldr	r3, [r3, #8]
 801161e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	683a      	ldr	r2, [r7, #0]
 8011628:	430a      	orrs	r2, r1
 801162a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f000 f811 	bl	8011654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	68fa      	ldr	r2, [r7, #12]
 8011638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2220      	movs	r2, #32
 801163e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2200      	movs	r2, #0
 8011646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801164a:	2300      	movs	r3, #0
}
 801164c:	4618      	mov	r0, r3
 801164e:	3710      	adds	r7, #16
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011654:	b480      	push	{r7}
 8011656:	b085      	sub	sp, #20
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011660:	2b00      	cmp	r3, #0
 8011662:	d108      	bne.n	8011676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2201      	movs	r2, #1
 8011668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2201      	movs	r2, #1
 8011670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011674:	e031      	b.n	80116da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011676:	2310      	movs	r3, #16
 8011678:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801167a:	2310      	movs	r3, #16
 801167c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	689b      	ldr	r3, [r3, #8]
 8011684:	0e5b      	lsrs	r3, r3, #25
 8011686:	b2db      	uxtb	r3, r3
 8011688:	f003 0307 	and.w	r3, r3, #7
 801168c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	689b      	ldr	r3, [r3, #8]
 8011694:	0f5b      	lsrs	r3, r3, #29
 8011696:	b2db      	uxtb	r3, r3
 8011698:	f003 0307 	and.w	r3, r3, #7
 801169c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801169e:	7bbb      	ldrb	r3, [r7, #14]
 80116a0:	7b3a      	ldrb	r2, [r7, #12]
 80116a2:	4911      	ldr	r1, [pc, #68]	; (80116e8 <UARTEx_SetNbDataToProcess+0x94>)
 80116a4:	5c8a      	ldrb	r2, [r1, r2]
 80116a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80116aa:	7b3a      	ldrb	r2, [r7, #12]
 80116ac:	490f      	ldr	r1, [pc, #60]	; (80116ec <UARTEx_SetNbDataToProcess+0x98>)
 80116ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80116b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80116b4:	b29a      	uxth	r2, r3
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80116bc:	7bfb      	ldrb	r3, [r7, #15]
 80116be:	7b7a      	ldrb	r2, [r7, #13]
 80116c0:	4909      	ldr	r1, [pc, #36]	; (80116e8 <UARTEx_SetNbDataToProcess+0x94>)
 80116c2:	5c8a      	ldrb	r2, [r1, r2]
 80116c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80116c8:	7b7a      	ldrb	r2, [r7, #13]
 80116ca:	4908      	ldr	r1, [pc, #32]	; (80116ec <UARTEx_SetNbDataToProcess+0x98>)
 80116cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80116ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80116d2:	b29a      	uxth	r2, r3
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80116da:	bf00      	nop
 80116dc:	3714      	adds	r7, #20
 80116de:	46bd      	mov	sp, r7
 80116e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e4:	4770      	bx	lr
 80116e6:	bf00      	nop
 80116e8:	08014c68 	.word	0x08014c68
 80116ec:	08014c70 	.word	0x08014c70

080116f0 <__errno>:
 80116f0:	4b01      	ldr	r3, [pc, #4]	; (80116f8 <__errno+0x8>)
 80116f2:	6818      	ldr	r0, [r3, #0]
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop
 80116f8:	24000010 	.word	0x24000010

080116fc <__libc_init_array>:
 80116fc:	b570      	push	{r4, r5, r6, lr}
 80116fe:	4d0d      	ldr	r5, [pc, #52]	; (8011734 <__libc_init_array+0x38>)
 8011700:	4c0d      	ldr	r4, [pc, #52]	; (8011738 <__libc_init_array+0x3c>)
 8011702:	1b64      	subs	r4, r4, r5
 8011704:	10a4      	asrs	r4, r4, #2
 8011706:	2600      	movs	r6, #0
 8011708:	42a6      	cmp	r6, r4
 801170a:	d109      	bne.n	8011720 <__libc_init_array+0x24>
 801170c:	4d0b      	ldr	r5, [pc, #44]	; (801173c <__libc_init_array+0x40>)
 801170e:	4c0c      	ldr	r4, [pc, #48]	; (8011740 <__libc_init_array+0x44>)
 8011710:	f003 fa88 	bl	8014c24 <_init>
 8011714:	1b64      	subs	r4, r4, r5
 8011716:	10a4      	asrs	r4, r4, #2
 8011718:	2600      	movs	r6, #0
 801171a:	42a6      	cmp	r6, r4
 801171c:	d105      	bne.n	801172a <__libc_init_array+0x2e>
 801171e:	bd70      	pop	{r4, r5, r6, pc}
 8011720:	f855 3b04 	ldr.w	r3, [r5], #4
 8011724:	4798      	blx	r3
 8011726:	3601      	adds	r6, #1
 8011728:	e7ee      	b.n	8011708 <__libc_init_array+0xc>
 801172a:	f855 3b04 	ldr.w	r3, [r5], #4
 801172e:	4798      	blx	r3
 8011730:	3601      	adds	r6, #1
 8011732:	e7f2      	b.n	801171a <__libc_init_array+0x1e>
 8011734:	08015240 	.word	0x08015240
 8011738:	08015240 	.word	0x08015240
 801173c:	08015240 	.word	0x08015240
 8011740:	08015244 	.word	0x08015244

08011744 <memcpy>:
 8011744:	440a      	add	r2, r1
 8011746:	4291      	cmp	r1, r2
 8011748:	f100 33ff 	add.w	r3, r0, #4294967295
 801174c:	d100      	bne.n	8011750 <memcpy+0xc>
 801174e:	4770      	bx	lr
 8011750:	b510      	push	{r4, lr}
 8011752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011756:	f803 4f01 	strb.w	r4, [r3, #1]!
 801175a:	4291      	cmp	r1, r2
 801175c:	d1f9      	bne.n	8011752 <memcpy+0xe>
 801175e:	bd10      	pop	{r4, pc}

08011760 <memset>:
 8011760:	4402      	add	r2, r0
 8011762:	4603      	mov	r3, r0
 8011764:	4293      	cmp	r3, r2
 8011766:	d100      	bne.n	801176a <memset+0xa>
 8011768:	4770      	bx	lr
 801176a:	f803 1b01 	strb.w	r1, [r3], #1
 801176e:	e7f9      	b.n	8011764 <memset+0x4>

08011770 <__cvt>:
 8011770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011772:	ed2d 8b02 	vpush	{d8}
 8011776:	eeb0 8b40 	vmov.f64	d8, d0
 801177a:	b085      	sub	sp, #20
 801177c:	4617      	mov	r7, r2
 801177e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011780:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011782:	ee18 2a90 	vmov	r2, s17
 8011786:	f025 0520 	bic.w	r5, r5, #32
 801178a:	2a00      	cmp	r2, #0
 801178c:	bfb6      	itet	lt
 801178e:	222d      	movlt	r2, #45	; 0x2d
 8011790:	2200      	movge	r2, #0
 8011792:	eeb1 8b40 	vneglt.f64	d8, d0
 8011796:	2d46      	cmp	r5, #70	; 0x46
 8011798:	460c      	mov	r4, r1
 801179a:	701a      	strb	r2, [r3, #0]
 801179c:	d004      	beq.n	80117a8 <__cvt+0x38>
 801179e:	2d45      	cmp	r5, #69	; 0x45
 80117a0:	d100      	bne.n	80117a4 <__cvt+0x34>
 80117a2:	3401      	adds	r4, #1
 80117a4:	2102      	movs	r1, #2
 80117a6:	e000      	b.n	80117aa <__cvt+0x3a>
 80117a8:	2103      	movs	r1, #3
 80117aa:	ab03      	add	r3, sp, #12
 80117ac:	9301      	str	r3, [sp, #4]
 80117ae:	ab02      	add	r3, sp, #8
 80117b0:	9300      	str	r3, [sp, #0]
 80117b2:	4622      	mov	r2, r4
 80117b4:	4633      	mov	r3, r6
 80117b6:	eeb0 0b48 	vmov.f64	d0, d8
 80117ba:	f000 fca9 	bl	8012110 <_dtoa_r>
 80117be:	2d47      	cmp	r5, #71	; 0x47
 80117c0:	d109      	bne.n	80117d6 <__cvt+0x66>
 80117c2:	07fb      	lsls	r3, r7, #31
 80117c4:	d407      	bmi.n	80117d6 <__cvt+0x66>
 80117c6:	9b03      	ldr	r3, [sp, #12]
 80117c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117ca:	1a1b      	subs	r3, r3, r0
 80117cc:	6013      	str	r3, [r2, #0]
 80117ce:	b005      	add	sp, #20
 80117d0:	ecbd 8b02 	vpop	{d8}
 80117d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117d6:	2d46      	cmp	r5, #70	; 0x46
 80117d8:	eb00 0204 	add.w	r2, r0, r4
 80117dc:	d10c      	bne.n	80117f8 <__cvt+0x88>
 80117de:	7803      	ldrb	r3, [r0, #0]
 80117e0:	2b30      	cmp	r3, #48	; 0x30
 80117e2:	d107      	bne.n	80117f4 <__cvt+0x84>
 80117e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80117e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ec:	bf1c      	itt	ne
 80117ee:	f1c4 0401 	rsbne	r4, r4, #1
 80117f2:	6034      	strne	r4, [r6, #0]
 80117f4:	6833      	ldr	r3, [r6, #0]
 80117f6:	441a      	add	r2, r3
 80117f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80117fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011800:	bf08      	it	eq
 8011802:	9203      	streq	r2, [sp, #12]
 8011804:	2130      	movs	r1, #48	; 0x30
 8011806:	9b03      	ldr	r3, [sp, #12]
 8011808:	4293      	cmp	r3, r2
 801180a:	d2dc      	bcs.n	80117c6 <__cvt+0x56>
 801180c:	1c5c      	adds	r4, r3, #1
 801180e:	9403      	str	r4, [sp, #12]
 8011810:	7019      	strb	r1, [r3, #0]
 8011812:	e7f8      	b.n	8011806 <__cvt+0x96>

08011814 <__exponent>:
 8011814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011816:	4603      	mov	r3, r0
 8011818:	2900      	cmp	r1, #0
 801181a:	bfb8      	it	lt
 801181c:	4249      	neglt	r1, r1
 801181e:	f803 2b02 	strb.w	r2, [r3], #2
 8011822:	bfb4      	ite	lt
 8011824:	222d      	movlt	r2, #45	; 0x2d
 8011826:	222b      	movge	r2, #43	; 0x2b
 8011828:	2909      	cmp	r1, #9
 801182a:	7042      	strb	r2, [r0, #1]
 801182c:	dd2a      	ble.n	8011884 <__exponent+0x70>
 801182e:	f10d 0407 	add.w	r4, sp, #7
 8011832:	46a4      	mov	ip, r4
 8011834:	270a      	movs	r7, #10
 8011836:	46a6      	mov	lr, r4
 8011838:	460a      	mov	r2, r1
 801183a:	fb91 f6f7 	sdiv	r6, r1, r7
 801183e:	fb07 1516 	mls	r5, r7, r6, r1
 8011842:	3530      	adds	r5, #48	; 0x30
 8011844:	2a63      	cmp	r2, #99	; 0x63
 8011846:	f104 34ff 	add.w	r4, r4, #4294967295
 801184a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801184e:	4631      	mov	r1, r6
 8011850:	dcf1      	bgt.n	8011836 <__exponent+0x22>
 8011852:	3130      	adds	r1, #48	; 0x30
 8011854:	f1ae 0502 	sub.w	r5, lr, #2
 8011858:	f804 1c01 	strb.w	r1, [r4, #-1]
 801185c:	1c44      	adds	r4, r0, #1
 801185e:	4629      	mov	r1, r5
 8011860:	4561      	cmp	r1, ip
 8011862:	d30a      	bcc.n	801187a <__exponent+0x66>
 8011864:	f10d 0209 	add.w	r2, sp, #9
 8011868:	eba2 020e 	sub.w	r2, r2, lr
 801186c:	4565      	cmp	r5, ip
 801186e:	bf88      	it	hi
 8011870:	2200      	movhi	r2, #0
 8011872:	4413      	add	r3, r2
 8011874:	1a18      	subs	r0, r3, r0
 8011876:	b003      	add	sp, #12
 8011878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801187a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801187e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011882:	e7ed      	b.n	8011860 <__exponent+0x4c>
 8011884:	2330      	movs	r3, #48	; 0x30
 8011886:	3130      	adds	r1, #48	; 0x30
 8011888:	7083      	strb	r3, [r0, #2]
 801188a:	70c1      	strb	r1, [r0, #3]
 801188c:	1d03      	adds	r3, r0, #4
 801188e:	e7f1      	b.n	8011874 <__exponent+0x60>

08011890 <_printf_float>:
 8011890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011894:	b08b      	sub	sp, #44	; 0x2c
 8011896:	460c      	mov	r4, r1
 8011898:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801189c:	4616      	mov	r6, r2
 801189e:	461f      	mov	r7, r3
 80118a0:	4605      	mov	r5, r0
 80118a2:	f001 f9b7 	bl	8012c14 <_localeconv_r>
 80118a6:	f8d0 b000 	ldr.w	fp, [r0]
 80118aa:	4658      	mov	r0, fp
 80118ac:	f7ee fd30 	bl	8000310 <strlen>
 80118b0:	2300      	movs	r3, #0
 80118b2:	9308      	str	r3, [sp, #32]
 80118b4:	f8d8 3000 	ldr.w	r3, [r8]
 80118b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80118bc:	6822      	ldr	r2, [r4, #0]
 80118be:	3307      	adds	r3, #7
 80118c0:	f023 0307 	bic.w	r3, r3, #7
 80118c4:	f103 0108 	add.w	r1, r3, #8
 80118c8:	f8c8 1000 	str.w	r1, [r8]
 80118cc:	4682      	mov	sl, r0
 80118ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80118d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80118d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011b38 <_printf_float+0x2a8>
 80118da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80118de:	eeb0 6bc0 	vabs.f64	d6, d0
 80118e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80118e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ea:	dd24      	ble.n	8011936 <_printf_float+0xa6>
 80118ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80118f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f4:	d502      	bpl.n	80118fc <_printf_float+0x6c>
 80118f6:	232d      	movs	r3, #45	; 0x2d
 80118f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118fc:	4b90      	ldr	r3, [pc, #576]	; (8011b40 <_printf_float+0x2b0>)
 80118fe:	4891      	ldr	r0, [pc, #580]	; (8011b44 <_printf_float+0x2b4>)
 8011900:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011904:	bf94      	ite	ls
 8011906:	4698      	movls	r8, r3
 8011908:	4680      	movhi	r8, r0
 801190a:	2303      	movs	r3, #3
 801190c:	6123      	str	r3, [r4, #16]
 801190e:	f022 0204 	bic.w	r2, r2, #4
 8011912:	2300      	movs	r3, #0
 8011914:	6022      	str	r2, [r4, #0]
 8011916:	9304      	str	r3, [sp, #16]
 8011918:	9700      	str	r7, [sp, #0]
 801191a:	4633      	mov	r3, r6
 801191c:	aa09      	add	r2, sp, #36	; 0x24
 801191e:	4621      	mov	r1, r4
 8011920:	4628      	mov	r0, r5
 8011922:	f000 f9d3 	bl	8011ccc <_printf_common>
 8011926:	3001      	adds	r0, #1
 8011928:	f040 808a 	bne.w	8011a40 <_printf_float+0x1b0>
 801192c:	f04f 30ff 	mov.w	r0, #4294967295
 8011930:	b00b      	add	sp, #44	; 0x2c
 8011932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011936:	eeb4 0b40 	vcmp.f64	d0, d0
 801193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193e:	d709      	bvc.n	8011954 <_printf_float+0xc4>
 8011940:	ee10 3a90 	vmov	r3, s1
 8011944:	2b00      	cmp	r3, #0
 8011946:	bfbc      	itt	lt
 8011948:	232d      	movlt	r3, #45	; 0x2d
 801194a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801194e:	487e      	ldr	r0, [pc, #504]	; (8011b48 <_printf_float+0x2b8>)
 8011950:	4b7e      	ldr	r3, [pc, #504]	; (8011b4c <_printf_float+0x2bc>)
 8011952:	e7d5      	b.n	8011900 <_printf_float+0x70>
 8011954:	6863      	ldr	r3, [r4, #4]
 8011956:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801195a:	9104      	str	r1, [sp, #16]
 801195c:	1c59      	adds	r1, r3, #1
 801195e:	d13c      	bne.n	80119da <_printf_float+0x14a>
 8011960:	2306      	movs	r3, #6
 8011962:	6063      	str	r3, [r4, #4]
 8011964:	2300      	movs	r3, #0
 8011966:	9303      	str	r3, [sp, #12]
 8011968:	ab08      	add	r3, sp, #32
 801196a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801196e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011972:	ab07      	add	r3, sp, #28
 8011974:	6861      	ldr	r1, [r4, #4]
 8011976:	9300      	str	r3, [sp, #0]
 8011978:	6022      	str	r2, [r4, #0]
 801197a:	f10d 031b 	add.w	r3, sp, #27
 801197e:	4628      	mov	r0, r5
 8011980:	f7ff fef6 	bl	8011770 <__cvt>
 8011984:	9b04      	ldr	r3, [sp, #16]
 8011986:	9907      	ldr	r1, [sp, #28]
 8011988:	2b47      	cmp	r3, #71	; 0x47
 801198a:	4680      	mov	r8, r0
 801198c:	d108      	bne.n	80119a0 <_printf_float+0x110>
 801198e:	1cc8      	adds	r0, r1, #3
 8011990:	db02      	blt.n	8011998 <_printf_float+0x108>
 8011992:	6863      	ldr	r3, [r4, #4]
 8011994:	4299      	cmp	r1, r3
 8011996:	dd41      	ble.n	8011a1c <_printf_float+0x18c>
 8011998:	f1a9 0902 	sub.w	r9, r9, #2
 801199c:	fa5f f989 	uxtb.w	r9, r9
 80119a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80119a4:	d820      	bhi.n	80119e8 <_printf_float+0x158>
 80119a6:	3901      	subs	r1, #1
 80119a8:	464a      	mov	r2, r9
 80119aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80119ae:	9107      	str	r1, [sp, #28]
 80119b0:	f7ff ff30 	bl	8011814 <__exponent>
 80119b4:	9a08      	ldr	r2, [sp, #32]
 80119b6:	9004      	str	r0, [sp, #16]
 80119b8:	1813      	adds	r3, r2, r0
 80119ba:	2a01      	cmp	r2, #1
 80119bc:	6123      	str	r3, [r4, #16]
 80119be:	dc02      	bgt.n	80119c6 <_printf_float+0x136>
 80119c0:	6822      	ldr	r2, [r4, #0]
 80119c2:	07d2      	lsls	r2, r2, #31
 80119c4:	d501      	bpl.n	80119ca <_printf_float+0x13a>
 80119c6:	3301      	adds	r3, #1
 80119c8:	6123      	str	r3, [r4, #16]
 80119ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d0a2      	beq.n	8011918 <_printf_float+0x88>
 80119d2:	232d      	movs	r3, #45	; 0x2d
 80119d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119d8:	e79e      	b.n	8011918 <_printf_float+0x88>
 80119da:	9904      	ldr	r1, [sp, #16]
 80119dc:	2947      	cmp	r1, #71	; 0x47
 80119de:	d1c1      	bne.n	8011964 <_printf_float+0xd4>
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d1bf      	bne.n	8011964 <_printf_float+0xd4>
 80119e4:	2301      	movs	r3, #1
 80119e6:	e7bc      	b.n	8011962 <_printf_float+0xd2>
 80119e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80119ec:	d118      	bne.n	8011a20 <_printf_float+0x190>
 80119ee:	2900      	cmp	r1, #0
 80119f0:	6863      	ldr	r3, [r4, #4]
 80119f2:	dd0b      	ble.n	8011a0c <_printf_float+0x17c>
 80119f4:	6121      	str	r1, [r4, #16]
 80119f6:	b913      	cbnz	r3, 80119fe <_printf_float+0x16e>
 80119f8:	6822      	ldr	r2, [r4, #0]
 80119fa:	07d0      	lsls	r0, r2, #31
 80119fc:	d502      	bpl.n	8011a04 <_printf_float+0x174>
 80119fe:	3301      	adds	r3, #1
 8011a00:	440b      	add	r3, r1
 8011a02:	6123      	str	r3, [r4, #16]
 8011a04:	2300      	movs	r3, #0
 8011a06:	65a1      	str	r1, [r4, #88]	; 0x58
 8011a08:	9304      	str	r3, [sp, #16]
 8011a0a:	e7de      	b.n	80119ca <_printf_float+0x13a>
 8011a0c:	b913      	cbnz	r3, 8011a14 <_printf_float+0x184>
 8011a0e:	6822      	ldr	r2, [r4, #0]
 8011a10:	07d2      	lsls	r2, r2, #31
 8011a12:	d501      	bpl.n	8011a18 <_printf_float+0x188>
 8011a14:	3302      	adds	r3, #2
 8011a16:	e7f4      	b.n	8011a02 <_printf_float+0x172>
 8011a18:	2301      	movs	r3, #1
 8011a1a:	e7f2      	b.n	8011a02 <_printf_float+0x172>
 8011a1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011a20:	9b08      	ldr	r3, [sp, #32]
 8011a22:	4299      	cmp	r1, r3
 8011a24:	db05      	blt.n	8011a32 <_printf_float+0x1a2>
 8011a26:	6823      	ldr	r3, [r4, #0]
 8011a28:	6121      	str	r1, [r4, #16]
 8011a2a:	07d8      	lsls	r0, r3, #31
 8011a2c:	d5ea      	bpl.n	8011a04 <_printf_float+0x174>
 8011a2e:	1c4b      	adds	r3, r1, #1
 8011a30:	e7e7      	b.n	8011a02 <_printf_float+0x172>
 8011a32:	2900      	cmp	r1, #0
 8011a34:	bfd4      	ite	le
 8011a36:	f1c1 0202 	rsble	r2, r1, #2
 8011a3a:	2201      	movgt	r2, #1
 8011a3c:	4413      	add	r3, r2
 8011a3e:	e7e0      	b.n	8011a02 <_printf_float+0x172>
 8011a40:	6823      	ldr	r3, [r4, #0]
 8011a42:	055a      	lsls	r2, r3, #21
 8011a44:	d407      	bmi.n	8011a56 <_printf_float+0x1c6>
 8011a46:	6923      	ldr	r3, [r4, #16]
 8011a48:	4642      	mov	r2, r8
 8011a4a:	4631      	mov	r1, r6
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	47b8      	blx	r7
 8011a50:	3001      	adds	r0, #1
 8011a52:	d12a      	bne.n	8011aaa <_printf_float+0x21a>
 8011a54:	e76a      	b.n	801192c <_printf_float+0x9c>
 8011a56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011a5a:	f240 80e2 	bls.w	8011c22 <_printf_float+0x392>
 8011a5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011a62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a6a:	d133      	bne.n	8011ad4 <_printf_float+0x244>
 8011a6c:	4a38      	ldr	r2, [pc, #224]	; (8011b50 <_printf_float+0x2c0>)
 8011a6e:	2301      	movs	r3, #1
 8011a70:	4631      	mov	r1, r6
 8011a72:	4628      	mov	r0, r5
 8011a74:	47b8      	blx	r7
 8011a76:	3001      	adds	r0, #1
 8011a78:	f43f af58 	beq.w	801192c <_printf_float+0x9c>
 8011a7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	db02      	blt.n	8011a8a <_printf_float+0x1fa>
 8011a84:	6823      	ldr	r3, [r4, #0]
 8011a86:	07d8      	lsls	r0, r3, #31
 8011a88:	d50f      	bpl.n	8011aaa <_printf_float+0x21a>
 8011a8a:	4653      	mov	r3, sl
 8011a8c:	465a      	mov	r2, fp
 8011a8e:	4631      	mov	r1, r6
 8011a90:	4628      	mov	r0, r5
 8011a92:	47b8      	blx	r7
 8011a94:	3001      	adds	r0, #1
 8011a96:	f43f af49 	beq.w	801192c <_printf_float+0x9c>
 8011a9a:	f04f 0800 	mov.w	r8, #0
 8011a9e:	f104 091a 	add.w	r9, r4, #26
 8011aa2:	9b08      	ldr	r3, [sp, #32]
 8011aa4:	3b01      	subs	r3, #1
 8011aa6:	4543      	cmp	r3, r8
 8011aa8:	dc09      	bgt.n	8011abe <_printf_float+0x22e>
 8011aaa:	6823      	ldr	r3, [r4, #0]
 8011aac:	079b      	lsls	r3, r3, #30
 8011aae:	f100 8108 	bmi.w	8011cc2 <_printf_float+0x432>
 8011ab2:	68e0      	ldr	r0, [r4, #12]
 8011ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ab6:	4298      	cmp	r0, r3
 8011ab8:	bfb8      	it	lt
 8011aba:	4618      	movlt	r0, r3
 8011abc:	e738      	b.n	8011930 <_printf_float+0xa0>
 8011abe:	2301      	movs	r3, #1
 8011ac0:	464a      	mov	r2, r9
 8011ac2:	4631      	mov	r1, r6
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	47b8      	blx	r7
 8011ac8:	3001      	adds	r0, #1
 8011aca:	f43f af2f 	beq.w	801192c <_printf_float+0x9c>
 8011ace:	f108 0801 	add.w	r8, r8, #1
 8011ad2:	e7e6      	b.n	8011aa2 <_printf_float+0x212>
 8011ad4:	9b07      	ldr	r3, [sp, #28]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	dc3c      	bgt.n	8011b54 <_printf_float+0x2c4>
 8011ada:	4a1d      	ldr	r2, [pc, #116]	; (8011b50 <_printf_float+0x2c0>)
 8011adc:	2301      	movs	r3, #1
 8011ade:	4631      	mov	r1, r6
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	47b8      	blx	r7
 8011ae4:	3001      	adds	r0, #1
 8011ae6:	f43f af21 	beq.w	801192c <_printf_float+0x9c>
 8011aea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011aee:	4313      	orrs	r3, r2
 8011af0:	d102      	bne.n	8011af8 <_printf_float+0x268>
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	07d9      	lsls	r1, r3, #31
 8011af6:	d5d8      	bpl.n	8011aaa <_printf_float+0x21a>
 8011af8:	4653      	mov	r3, sl
 8011afa:	465a      	mov	r2, fp
 8011afc:	4631      	mov	r1, r6
 8011afe:	4628      	mov	r0, r5
 8011b00:	47b8      	blx	r7
 8011b02:	3001      	adds	r0, #1
 8011b04:	f43f af12 	beq.w	801192c <_printf_float+0x9c>
 8011b08:	f04f 0900 	mov.w	r9, #0
 8011b0c:	f104 0a1a 	add.w	sl, r4, #26
 8011b10:	9b07      	ldr	r3, [sp, #28]
 8011b12:	425b      	negs	r3, r3
 8011b14:	454b      	cmp	r3, r9
 8011b16:	dc01      	bgt.n	8011b1c <_printf_float+0x28c>
 8011b18:	9b08      	ldr	r3, [sp, #32]
 8011b1a:	e795      	b.n	8011a48 <_printf_float+0x1b8>
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	4652      	mov	r2, sl
 8011b20:	4631      	mov	r1, r6
 8011b22:	4628      	mov	r0, r5
 8011b24:	47b8      	blx	r7
 8011b26:	3001      	adds	r0, #1
 8011b28:	f43f af00 	beq.w	801192c <_printf_float+0x9c>
 8011b2c:	f109 0901 	add.w	r9, r9, #1
 8011b30:	e7ee      	b.n	8011b10 <_printf_float+0x280>
 8011b32:	bf00      	nop
 8011b34:	f3af 8000 	nop.w
 8011b38:	ffffffff 	.word	0xffffffff
 8011b3c:	7fefffff 	.word	0x7fefffff
 8011b40:	08014c7c 	.word	0x08014c7c
 8011b44:	08014c80 	.word	0x08014c80
 8011b48:	08014c88 	.word	0x08014c88
 8011b4c:	08014c84 	.word	0x08014c84
 8011b50:	08014c8c 	.word	0x08014c8c
 8011b54:	9a08      	ldr	r2, [sp, #32]
 8011b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	bfa8      	it	ge
 8011b5c:	461a      	movge	r2, r3
 8011b5e:	2a00      	cmp	r2, #0
 8011b60:	4691      	mov	r9, r2
 8011b62:	dc38      	bgt.n	8011bd6 <_printf_float+0x346>
 8011b64:	2300      	movs	r3, #0
 8011b66:	9305      	str	r3, [sp, #20]
 8011b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b6c:	f104 021a 	add.w	r2, r4, #26
 8011b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011b72:	9905      	ldr	r1, [sp, #20]
 8011b74:	9304      	str	r3, [sp, #16]
 8011b76:	eba3 0309 	sub.w	r3, r3, r9
 8011b7a:	428b      	cmp	r3, r1
 8011b7c:	dc33      	bgt.n	8011be6 <_printf_float+0x356>
 8011b7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011b82:	429a      	cmp	r2, r3
 8011b84:	db3c      	blt.n	8011c00 <_printf_float+0x370>
 8011b86:	6823      	ldr	r3, [r4, #0]
 8011b88:	07da      	lsls	r2, r3, #31
 8011b8a:	d439      	bmi.n	8011c00 <_printf_float+0x370>
 8011b8c:	9a08      	ldr	r2, [sp, #32]
 8011b8e:	9b04      	ldr	r3, [sp, #16]
 8011b90:	9907      	ldr	r1, [sp, #28]
 8011b92:	1ad3      	subs	r3, r2, r3
 8011b94:	eba2 0901 	sub.w	r9, r2, r1
 8011b98:	4599      	cmp	r9, r3
 8011b9a:	bfa8      	it	ge
 8011b9c:	4699      	movge	r9, r3
 8011b9e:	f1b9 0f00 	cmp.w	r9, #0
 8011ba2:	dc35      	bgt.n	8011c10 <_printf_float+0x380>
 8011ba4:	f04f 0800 	mov.w	r8, #0
 8011ba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011bac:	f104 0a1a 	add.w	sl, r4, #26
 8011bb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011bb4:	1a9b      	subs	r3, r3, r2
 8011bb6:	eba3 0309 	sub.w	r3, r3, r9
 8011bba:	4543      	cmp	r3, r8
 8011bbc:	f77f af75 	ble.w	8011aaa <_printf_float+0x21a>
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	4652      	mov	r2, sl
 8011bc4:	4631      	mov	r1, r6
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	47b8      	blx	r7
 8011bca:	3001      	adds	r0, #1
 8011bcc:	f43f aeae 	beq.w	801192c <_printf_float+0x9c>
 8011bd0:	f108 0801 	add.w	r8, r8, #1
 8011bd4:	e7ec      	b.n	8011bb0 <_printf_float+0x320>
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	4631      	mov	r1, r6
 8011bda:	4642      	mov	r2, r8
 8011bdc:	4628      	mov	r0, r5
 8011bde:	47b8      	blx	r7
 8011be0:	3001      	adds	r0, #1
 8011be2:	d1bf      	bne.n	8011b64 <_printf_float+0x2d4>
 8011be4:	e6a2      	b.n	801192c <_printf_float+0x9c>
 8011be6:	2301      	movs	r3, #1
 8011be8:	4631      	mov	r1, r6
 8011bea:	4628      	mov	r0, r5
 8011bec:	9204      	str	r2, [sp, #16]
 8011bee:	47b8      	blx	r7
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	f43f ae9b 	beq.w	801192c <_printf_float+0x9c>
 8011bf6:	9b05      	ldr	r3, [sp, #20]
 8011bf8:	9a04      	ldr	r2, [sp, #16]
 8011bfa:	3301      	adds	r3, #1
 8011bfc:	9305      	str	r3, [sp, #20]
 8011bfe:	e7b7      	b.n	8011b70 <_printf_float+0x2e0>
 8011c00:	4653      	mov	r3, sl
 8011c02:	465a      	mov	r2, fp
 8011c04:	4631      	mov	r1, r6
 8011c06:	4628      	mov	r0, r5
 8011c08:	47b8      	blx	r7
 8011c0a:	3001      	adds	r0, #1
 8011c0c:	d1be      	bne.n	8011b8c <_printf_float+0x2fc>
 8011c0e:	e68d      	b.n	801192c <_printf_float+0x9c>
 8011c10:	9a04      	ldr	r2, [sp, #16]
 8011c12:	464b      	mov	r3, r9
 8011c14:	4442      	add	r2, r8
 8011c16:	4631      	mov	r1, r6
 8011c18:	4628      	mov	r0, r5
 8011c1a:	47b8      	blx	r7
 8011c1c:	3001      	adds	r0, #1
 8011c1e:	d1c1      	bne.n	8011ba4 <_printf_float+0x314>
 8011c20:	e684      	b.n	801192c <_printf_float+0x9c>
 8011c22:	9a08      	ldr	r2, [sp, #32]
 8011c24:	2a01      	cmp	r2, #1
 8011c26:	dc01      	bgt.n	8011c2c <_printf_float+0x39c>
 8011c28:	07db      	lsls	r3, r3, #31
 8011c2a:	d537      	bpl.n	8011c9c <_printf_float+0x40c>
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	4642      	mov	r2, r8
 8011c30:	4631      	mov	r1, r6
 8011c32:	4628      	mov	r0, r5
 8011c34:	47b8      	blx	r7
 8011c36:	3001      	adds	r0, #1
 8011c38:	f43f ae78 	beq.w	801192c <_printf_float+0x9c>
 8011c3c:	4653      	mov	r3, sl
 8011c3e:	465a      	mov	r2, fp
 8011c40:	4631      	mov	r1, r6
 8011c42:	4628      	mov	r0, r5
 8011c44:	47b8      	blx	r7
 8011c46:	3001      	adds	r0, #1
 8011c48:	f43f ae70 	beq.w	801192c <_printf_float+0x9c>
 8011c4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011c50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c58:	d01b      	beq.n	8011c92 <_printf_float+0x402>
 8011c5a:	9b08      	ldr	r3, [sp, #32]
 8011c5c:	f108 0201 	add.w	r2, r8, #1
 8011c60:	3b01      	subs	r3, #1
 8011c62:	4631      	mov	r1, r6
 8011c64:	4628      	mov	r0, r5
 8011c66:	47b8      	blx	r7
 8011c68:	3001      	adds	r0, #1
 8011c6a:	d10e      	bne.n	8011c8a <_printf_float+0x3fa>
 8011c6c:	e65e      	b.n	801192c <_printf_float+0x9c>
 8011c6e:	2301      	movs	r3, #1
 8011c70:	464a      	mov	r2, r9
 8011c72:	4631      	mov	r1, r6
 8011c74:	4628      	mov	r0, r5
 8011c76:	47b8      	blx	r7
 8011c78:	3001      	adds	r0, #1
 8011c7a:	f43f ae57 	beq.w	801192c <_printf_float+0x9c>
 8011c7e:	f108 0801 	add.w	r8, r8, #1
 8011c82:	9b08      	ldr	r3, [sp, #32]
 8011c84:	3b01      	subs	r3, #1
 8011c86:	4543      	cmp	r3, r8
 8011c88:	dcf1      	bgt.n	8011c6e <_printf_float+0x3de>
 8011c8a:	9b04      	ldr	r3, [sp, #16]
 8011c8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011c90:	e6db      	b.n	8011a4a <_printf_float+0x1ba>
 8011c92:	f04f 0800 	mov.w	r8, #0
 8011c96:	f104 091a 	add.w	r9, r4, #26
 8011c9a:	e7f2      	b.n	8011c82 <_printf_float+0x3f2>
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	4642      	mov	r2, r8
 8011ca0:	e7df      	b.n	8011c62 <_printf_float+0x3d2>
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	464a      	mov	r2, r9
 8011ca6:	4631      	mov	r1, r6
 8011ca8:	4628      	mov	r0, r5
 8011caa:	47b8      	blx	r7
 8011cac:	3001      	adds	r0, #1
 8011cae:	f43f ae3d 	beq.w	801192c <_printf_float+0x9c>
 8011cb2:	f108 0801 	add.w	r8, r8, #1
 8011cb6:	68e3      	ldr	r3, [r4, #12]
 8011cb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011cba:	1a5b      	subs	r3, r3, r1
 8011cbc:	4543      	cmp	r3, r8
 8011cbe:	dcf0      	bgt.n	8011ca2 <_printf_float+0x412>
 8011cc0:	e6f7      	b.n	8011ab2 <_printf_float+0x222>
 8011cc2:	f04f 0800 	mov.w	r8, #0
 8011cc6:	f104 0919 	add.w	r9, r4, #25
 8011cca:	e7f4      	b.n	8011cb6 <_printf_float+0x426>

08011ccc <_printf_common>:
 8011ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cd0:	4616      	mov	r6, r2
 8011cd2:	4699      	mov	r9, r3
 8011cd4:	688a      	ldr	r2, [r1, #8]
 8011cd6:	690b      	ldr	r3, [r1, #16]
 8011cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	bfb8      	it	lt
 8011ce0:	4613      	movlt	r3, r2
 8011ce2:	6033      	str	r3, [r6, #0]
 8011ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ce8:	4607      	mov	r7, r0
 8011cea:	460c      	mov	r4, r1
 8011cec:	b10a      	cbz	r2, 8011cf2 <_printf_common+0x26>
 8011cee:	3301      	adds	r3, #1
 8011cf0:	6033      	str	r3, [r6, #0]
 8011cf2:	6823      	ldr	r3, [r4, #0]
 8011cf4:	0699      	lsls	r1, r3, #26
 8011cf6:	bf42      	ittt	mi
 8011cf8:	6833      	ldrmi	r3, [r6, #0]
 8011cfa:	3302      	addmi	r3, #2
 8011cfc:	6033      	strmi	r3, [r6, #0]
 8011cfe:	6825      	ldr	r5, [r4, #0]
 8011d00:	f015 0506 	ands.w	r5, r5, #6
 8011d04:	d106      	bne.n	8011d14 <_printf_common+0x48>
 8011d06:	f104 0a19 	add.w	sl, r4, #25
 8011d0a:	68e3      	ldr	r3, [r4, #12]
 8011d0c:	6832      	ldr	r2, [r6, #0]
 8011d0e:	1a9b      	subs	r3, r3, r2
 8011d10:	42ab      	cmp	r3, r5
 8011d12:	dc26      	bgt.n	8011d62 <_printf_common+0x96>
 8011d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d18:	1e13      	subs	r3, r2, #0
 8011d1a:	6822      	ldr	r2, [r4, #0]
 8011d1c:	bf18      	it	ne
 8011d1e:	2301      	movne	r3, #1
 8011d20:	0692      	lsls	r2, r2, #26
 8011d22:	d42b      	bmi.n	8011d7c <_printf_common+0xb0>
 8011d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d28:	4649      	mov	r1, r9
 8011d2a:	4638      	mov	r0, r7
 8011d2c:	47c0      	blx	r8
 8011d2e:	3001      	adds	r0, #1
 8011d30:	d01e      	beq.n	8011d70 <_printf_common+0xa4>
 8011d32:	6823      	ldr	r3, [r4, #0]
 8011d34:	68e5      	ldr	r5, [r4, #12]
 8011d36:	6832      	ldr	r2, [r6, #0]
 8011d38:	f003 0306 	and.w	r3, r3, #6
 8011d3c:	2b04      	cmp	r3, #4
 8011d3e:	bf08      	it	eq
 8011d40:	1aad      	subeq	r5, r5, r2
 8011d42:	68a3      	ldr	r3, [r4, #8]
 8011d44:	6922      	ldr	r2, [r4, #16]
 8011d46:	bf0c      	ite	eq
 8011d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d4c:	2500      	movne	r5, #0
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	bfc4      	itt	gt
 8011d52:	1a9b      	subgt	r3, r3, r2
 8011d54:	18ed      	addgt	r5, r5, r3
 8011d56:	2600      	movs	r6, #0
 8011d58:	341a      	adds	r4, #26
 8011d5a:	42b5      	cmp	r5, r6
 8011d5c:	d11a      	bne.n	8011d94 <_printf_common+0xc8>
 8011d5e:	2000      	movs	r0, #0
 8011d60:	e008      	b.n	8011d74 <_printf_common+0xa8>
 8011d62:	2301      	movs	r3, #1
 8011d64:	4652      	mov	r2, sl
 8011d66:	4649      	mov	r1, r9
 8011d68:	4638      	mov	r0, r7
 8011d6a:	47c0      	blx	r8
 8011d6c:	3001      	adds	r0, #1
 8011d6e:	d103      	bne.n	8011d78 <_printf_common+0xac>
 8011d70:	f04f 30ff 	mov.w	r0, #4294967295
 8011d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d78:	3501      	adds	r5, #1
 8011d7a:	e7c6      	b.n	8011d0a <_printf_common+0x3e>
 8011d7c:	18e1      	adds	r1, r4, r3
 8011d7e:	1c5a      	adds	r2, r3, #1
 8011d80:	2030      	movs	r0, #48	; 0x30
 8011d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d86:	4422      	add	r2, r4
 8011d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d90:	3302      	adds	r3, #2
 8011d92:	e7c7      	b.n	8011d24 <_printf_common+0x58>
 8011d94:	2301      	movs	r3, #1
 8011d96:	4622      	mov	r2, r4
 8011d98:	4649      	mov	r1, r9
 8011d9a:	4638      	mov	r0, r7
 8011d9c:	47c0      	blx	r8
 8011d9e:	3001      	adds	r0, #1
 8011da0:	d0e6      	beq.n	8011d70 <_printf_common+0xa4>
 8011da2:	3601      	adds	r6, #1
 8011da4:	e7d9      	b.n	8011d5a <_printf_common+0x8e>
	...

08011da8 <_printf_i>:
 8011da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011dac:	460c      	mov	r4, r1
 8011dae:	4691      	mov	r9, r2
 8011db0:	7e27      	ldrb	r7, [r4, #24]
 8011db2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011db4:	2f78      	cmp	r7, #120	; 0x78
 8011db6:	4680      	mov	r8, r0
 8011db8:	469a      	mov	sl, r3
 8011dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011dbe:	d807      	bhi.n	8011dd0 <_printf_i+0x28>
 8011dc0:	2f62      	cmp	r7, #98	; 0x62
 8011dc2:	d80a      	bhi.n	8011dda <_printf_i+0x32>
 8011dc4:	2f00      	cmp	r7, #0
 8011dc6:	f000 80d8 	beq.w	8011f7a <_printf_i+0x1d2>
 8011dca:	2f58      	cmp	r7, #88	; 0x58
 8011dcc:	f000 80a3 	beq.w	8011f16 <_printf_i+0x16e>
 8011dd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011dd8:	e03a      	b.n	8011e50 <_printf_i+0xa8>
 8011dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011dde:	2b15      	cmp	r3, #21
 8011de0:	d8f6      	bhi.n	8011dd0 <_printf_i+0x28>
 8011de2:	a001      	add	r0, pc, #4	; (adr r0, 8011de8 <_printf_i+0x40>)
 8011de4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011de8:	08011e41 	.word	0x08011e41
 8011dec:	08011e55 	.word	0x08011e55
 8011df0:	08011dd1 	.word	0x08011dd1
 8011df4:	08011dd1 	.word	0x08011dd1
 8011df8:	08011dd1 	.word	0x08011dd1
 8011dfc:	08011dd1 	.word	0x08011dd1
 8011e00:	08011e55 	.word	0x08011e55
 8011e04:	08011dd1 	.word	0x08011dd1
 8011e08:	08011dd1 	.word	0x08011dd1
 8011e0c:	08011dd1 	.word	0x08011dd1
 8011e10:	08011dd1 	.word	0x08011dd1
 8011e14:	08011f61 	.word	0x08011f61
 8011e18:	08011e85 	.word	0x08011e85
 8011e1c:	08011f43 	.word	0x08011f43
 8011e20:	08011dd1 	.word	0x08011dd1
 8011e24:	08011dd1 	.word	0x08011dd1
 8011e28:	08011f83 	.word	0x08011f83
 8011e2c:	08011dd1 	.word	0x08011dd1
 8011e30:	08011e85 	.word	0x08011e85
 8011e34:	08011dd1 	.word	0x08011dd1
 8011e38:	08011dd1 	.word	0x08011dd1
 8011e3c:	08011f4b 	.word	0x08011f4b
 8011e40:	680b      	ldr	r3, [r1, #0]
 8011e42:	1d1a      	adds	r2, r3, #4
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	600a      	str	r2, [r1, #0]
 8011e48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e50:	2301      	movs	r3, #1
 8011e52:	e0a3      	b.n	8011f9c <_printf_i+0x1f4>
 8011e54:	6825      	ldr	r5, [r4, #0]
 8011e56:	6808      	ldr	r0, [r1, #0]
 8011e58:	062e      	lsls	r6, r5, #24
 8011e5a:	f100 0304 	add.w	r3, r0, #4
 8011e5e:	d50a      	bpl.n	8011e76 <_printf_i+0xce>
 8011e60:	6805      	ldr	r5, [r0, #0]
 8011e62:	600b      	str	r3, [r1, #0]
 8011e64:	2d00      	cmp	r5, #0
 8011e66:	da03      	bge.n	8011e70 <_printf_i+0xc8>
 8011e68:	232d      	movs	r3, #45	; 0x2d
 8011e6a:	426d      	negs	r5, r5
 8011e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e70:	485e      	ldr	r0, [pc, #376]	; (8011fec <_printf_i+0x244>)
 8011e72:	230a      	movs	r3, #10
 8011e74:	e019      	b.n	8011eaa <_printf_i+0x102>
 8011e76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011e7a:	6805      	ldr	r5, [r0, #0]
 8011e7c:	600b      	str	r3, [r1, #0]
 8011e7e:	bf18      	it	ne
 8011e80:	b22d      	sxthne	r5, r5
 8011e82:	e7ef      	b.n	8011e64 <_printf_i+0xbc>
 8011e84:	680b      	ldr	r3, [r1, #0]
 8011e86:	6825      	ldr	r5, [r4, #0]
 8011e88:	1d18      	adds	r0, r3, #4
 8011e8a:	6008      	str	r0, [r1, #0]
 8011e8c:	0628      	lsls	r0, r5, #24
 8011e8e:	d501      	bpl.n	8011e94 <_printf_i+0xec>
 8011e90:	681d      	ldr	r5, [r3, #0]
 8011e92:	e002      	b.n	8011e9a <_printf_i+0xf2>
 8011e94:	0669      	lsls	r1, r5, #25
 8011e96:	d5fb      	bpl.n	8011e90 <_printf_i+0xe8>
 8011e98:	881d      	ldrh	r5, [r3, #0]
 8011e9a:	4854      	ldr	r0, [pc, #336]	; (8011fec <_printf_i+0x244>)
 8011e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8011e9e:	bf0c      	ite	eq
 8011ea0:	2308      	moveq	r3, #8
 8011ea2:	230a      	movne	r3, #10
 8011ea4:	2100      	movs	r1, #0
 8011ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011eaa:	6866      	ldr	r6, [r4, #4]
 8011eac:	60a6      	str	r6, [r4, #8]
 8011eae:	2e00      	cmp	r6, #0
 8011eb0:	bfa2      	ittt	ge
 8011eb2:	6821      	ldrge	r1, [r4, #0]
 8011eb4:	f021 0104 	bicge.w	r1, r1, #4
 8011eb8:	6021      	strge	r1, [r4, #0]
 8011eba:	b90d      	cbnz	r5, 8011ec0 <_printf_i+0x118>
 8011ebc:	2e00      	cmp	r6, #0
 8011ebe:	d04d      	beq.n	8011f5c <_printf_i+0x1b4>
 8011ec0:	4616      	mov	r6, r2
 8011ec2:	fbb5 f1f3 	udiv	r1, r5, r3
 8011ec6:	fb03 5711 	mls	r7, r3, r1, r5
 8011eca:	5dc7      	ldrb	r7, [r0, r7]
 8011ecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011ed0:	462f      	mov	r7, r5
 8011ed2:	42bb      	cmp	r3, r7
 8011ed4:	460d      	mov	r5, r1
 8011ed6:	d9f4      	bls.n	8011ec2 <_printf_i+0x11a>
 8011ed8:	2b08      	cmp	r3, #8
 8011eda:	d10b      	bne.n	8011ef4 <_printf_i+0x14c>
 8011edc:	6823      	ldr	r3, [r4, #0]
 8011ede:	07df      	lsls	r7, r3, #31
 8011ee0:	d508      	bpl.n	8011ef4 <_printf_i+0x14c>
 8011ee2:	6923      	ldr	r3, [r4, #16]
 8011ee4:	6861      	ldr	r1, [r4, #4]
 8011ee6:	4299      	cmp	r1, r3
 8011ee8:	bfde      	ittt	le
 8011eea:	2330      	movle	r3, #48	; 0x30
 8011eec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011ef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011ef4:	1b92      	subs	r2, r2, r6
 8011ef6:	6122      	str	r2, [r4, #16]
 8011ef8:	f8cd a000 	str.w	sl, [sp]
 8011efc:	464b      	mov	r3, r9
 8011efe:	aa03      	add	r2, sp, #12
 8011f00:	4621      	mov	r1, r4
 8011f02:	4640      	mov	r0, r8
 8011f04:	f7ff fee2 	bl	8011ccc <_printf_common>
 8011f08:	3001      	adds	r0, #1
 8011f0a:	d14c      	bne.n	8011fa6 <_printf_i+0x1fe>
 8011f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f10:	b004      	add	sp, #16
 8011f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f16:	4835      	ldr	r0, [pc, #212]	; (8011fec <_printf_i+0x244>)
 8011f18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011f1c:	6823      	ldr	r3, [r4, #0]
 8011f1e:	680e      	ldr	r6, [r1, #0]
 8011f20:	061f      	lsls	r7, r3, #24
 8011f22:	f856 5b04 	ldr.w	r5, [r6], #4
 8011f26:	600e      	str	r6, [r1, #0]
 8011f28:	d514      	bpl.n	8011f54 <_printf_i+0x1ac>
 8011f2a:	07d9      	lsls	r1, r3, #31
 8011f2c:	bf44      	itt	mi
 8011f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8011f32:	6023      	strmi	r3, [r4, #0]
 8011f34:	b91d      	cbnz	r5, 8011f3e <_printf_i+0x196>
 8011f36:	6823      	ldr	r3, [r4, #0]
 8011f38:	f023 0320 	bic.w	r3, r3, #32
 8011f3c:	6023      	str	r3, [r4, #0]
 8011f3e:	2310      	movs	r3, #16
 8011f40:	e7b0      	b.n	8011ea4 <_printf_i+0xfc>
 8011f42:	6823      	ldr	r3, [r4, #0]
 8011f44:	f043 0320 	orr.w	r3, r3, #32
 8011f48:	6023      	str	r3, [r4, #0]
 8011f4a:	2378      	movs	r3, #120	; 0x78
 8011f4c:	4828      	ldr	r0, [pc, #160]	; (8011ff0 <_printf_i+0x248>)
 8011f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011f52:	e7e3      	b.n	8011f1c <_printf_i+0x174>
 8011f54:	065e      	lsls	r6, r3, #25
 8011f56:	bf48      	it	mi
 8011f58:	b2ad      	uxthmi	r5, r5
 8011f5a:	e7e6      	b.n	8011f2a <_printf_i+0x182>
 8011f5c:	4616      	mov	r6, r2
 8011f5e:	e7bb      	b.n	8011ed8 <_printf_i+0x130>
 8011f60:	680b      	ldr	r3, [r1, #0]
 8011f62:	6826      	ldr	r6, [r4, #0]
 8011f64:	6960      	ldr	r0, [r4, #20]
 8011f66:	1d1d      	adds	r5, r3, #4
 8011f68:	600d      	str	r5, [r1, #0]
 8011f6a:	0635      	lsls	r5, r6, #24
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	d501      	bpl.n	8011f74 <_printf_i+0x1cc>
 8011f70:	6018      	str	r0, [r3, #0]
 8011f72:	e002      	b.n	8011f7a <_printf_i+0x1d2>
 8011f74:	0671      	lsls	r1, r6, #25
 8011f76:	d5fb      	bpl.n	8011f70 <_printf_i+0x1c8>
 8011f78:	8018      	strh	r0, [r3, #0]
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	6123      	str	r3, [r4, #16]
 8011f7e:	4616      	mov	r6, r2
 8011f80:	e7ba      	b.n	8011ef8 <_printf_i+0x150>
 8011f82:	680b      	ldr	r3, [r1, #0]
 8011f84:	1d1a      	adds	r2, r3, #4
 8011f86:	600a      	str	r2, [r1, #0]
 8011f88:	681e      	ldr	r6, [r3, #0]
 8011f8a:	6862      	ldr	r2, [r4, #4]
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	4630      	mov	r0, r6
 8011f90:	f7ee f9c6 	bl	8000320 <memchr>
 8011f94:	b108      	cbz	r0, 8011f9a <_printf_i+0x1f2>
 8011f96:	1b80      	subs	r0, r0, r6
 8011f98:	6060      	str	r0, [r4, #4]
 8011f9a:	6863      	ldr	r3, [r4, #4]
 8011f9c:	6123      	str	r3, [r4, #16]
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fa4:	e7a8      	b.n	8011ef8 <_printf_i+0x150>
 8011fa6:	6923      	ldr	r3, [r4, #16]
 8011fa8:	4632      	mov	r2, r6
 8011faa:	4649      	mov	r1, r9
 8011fac:	4640      	mov	r0, r8
 8011fae:	47d0      	blx	sl
 8011fb0:	3001      	adds	r0, #1
 8011fb2:	d0ab      	beq.n	8011f0c <_printf_i+0x164>
 8011fb4:	6823      	ldr	r3, [r4, #0]
 8011fb6:	079b      	lsls	r3, r3, #30
 8011fb8:	d413      	bmi.n	8011fe2 <_printf_i+0x23a>
 8011fba:	68e0      	ldr	r0, [r4, #12]
 8011fbc:	9b03      	ldr	r3, [sp, #12]
 8011fbe:	4298      	cmp	r0, r3
 8011fc0:	bfb8      	it	lt
 8011fc2:	4618      	movlt	r0, r3
 8011fc4:	e7a4      	b.n	8011f10 <_printf_i+0x168>
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	4632      	mov	r2, r6
 8011fca:	4649      	mov	r1, r9
 8011fcc:	4640      	mov	r0, r8
 8011fce:	47d0      	blx	sl
 8011fd0:	3001      	adds	r0, #1
 8011fd2:	d09b      	beq.n	8011f0c <_printf_i+0x164>
 8011fd4:	3501      	adds	r5, #1
 8011fd6:	68e3      	ldr	r3, [r4, #12]
 8011fd8:	9903      	ldr	r1, [sp, #12]
 8011fda:	1a5b      	subs	r3, r3, r1
 8011fdc:	42ab      	cmp	r3, r5
 8011fde:	dcf2      	bgt.n	8011fc6 <_printf_i+0x21e>
 8011fe0:	e7eb      	b.n	8011fba <_printf_i+0x212>
 8011fe2:	2500      	movs	r5, #0
 8011fe4:	f104 0619 	add.w	r6, r4, #25
 8011fe8:	e7f5      	b.n	8011fd6 <_printf_i+0x22e>
 8011fea:	bf00      	nop
 8011fec:	08014c8e 	.word	0x08014c8e
 8011ff0:	08014c9f 	.word	0x08014c9f

08011ff4 <quorem>:
 8011ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff8:	6903      	ldr	r3, [r0, #16]
 8011ffa:	690c      	ldr	r4, [r1, #16]
 8011ffc:	42a3      	cmp	r3, r4
 8011ffe:	4607      	mov	r7, r0
 8012000:	f2c0 8081 	blt.w	8012106 <quorem+0x112>
 8012004:	3c01      	subs	r4, #1
 8012006:	f101 0814 	add.w	r8, r1, #20
 801200a:	f100 0514 	add.w	r5, r0, #20
 801200e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012012:	9301      	str	r3, [sp, #4]
 8012014:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012018:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801201c:	3301      	adds	r3, #1
 801201e:	429a      	cmp	r2, r3
 8012020:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012024:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012028:	fbb2 f6f3 	udiv	r6, r2, r3
 801202c:	d331      	bcc.n	8012092 <quorem+0x9e>
 801202e:	f04f 0e00 	mov.w	lr, #0
 8012032:	4640      	mov	r0, r8
 8012034:	46ac      	mov	ip, r5
 8012036:	46f2      	mov	sl, lr
 8012038:	f850 2b04 	ldr.w	r2, [r0], #4
 801203c:	b293      	uxth	r3, r2
 801203e:	fb06 e303 	mla	r3, r6, r3, lr
 8012042:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012046:	b29b      	uxth	r3, r3
 8012048:	ebaa 0303 	sub.w	r3, sl, r3
 801204c:	0c12      	lsrs	r2, r2, #16
 801204e:	f8dc a000 	ldr.w	sl, [ip]
 8012052:	fb06 e202 	mla	r2, r6, r2, lr
 8012056:	fa13 f38a 	uxtah	r3, r3, sl
 801205a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801205e:	fa1f fa82 	uxth.w	sl, r2
 8012062:	f8dc 2000 	ldr.w	r2, [ip]
 8012066:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801206a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801206e:	b29b      	uxth	r3, r3
 8012070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012074:	4581      	cmp	r9, r0
 8012076:	f84c 3b04 	str.w	r3, [ip], #4
 801207a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801207e:	d2db      	bcs.n	8012038 <quorem+0x44>
 8012080:	f855 300b 	ldr.w	r3, [r5, fp]
 8012084:	b92b      	cbnz	r3, 8012092 <quorem+0x9e>
 8012086:	9b01      	ldr	r3, [sp, #4]
 8012088:	3b04      	subs	r3, #4
 801208a:	429d      	cmp	r5, r3
 801208c:	461a      	mov	r2, r3
 801208e:	d32e      	bcc.n	80120ee <quorem+0xfa>
 8012090:	613c      	str	r4, [r7, #16]
 8012092:	4638      	mov	r0, r7
 8012094:	f001 f848 	bl	8013128 <__mcmp>
 8012098:	2800      	cmp	r0, #0
 801209a:	db24      	blt.n	80120e6 <quorem+0xf2>
 801209c:	3601      	adds	r6, #1
 801209e:	4628      	mov	r0, r5
 80120a0:	f04f 0c00 	mov.w	ip, #0
 80120a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80120a8:	f8d0 e000 	ldr.w	lr, [r0]
 80120ac:	b293      	uxth	r3, r2
 80120ae:	ebac 0303 	sub.w	r3, ip, r3
 80120b2:	0c12      	lsrs	r2, r2, #16
 80120b4:	fa13 f38e 	uxtah	r3, r3, lr
 80120b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80120bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120c6:	45c1      	cmp	r9, r8
 80120c8:	f840 3b04 	str.w	r3, [r0], #4
 80120cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80120d0:	d2e8      	bcs.n	80120a4 <quorem+0xb0>
 80120d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120da:	b922      	cbnz	r2, 80120e6 <quorem+0xf2>
 80120dc:	3b04      	subs	r3, #4
 80120de:	429d      	cmp	r5, r3
 80120e0:	461a      	mov	r2, r3
 80120e2:	d30a      	bcc.n	80120fa <quorem+0x106>
 80120e4:	613c      	str	r4, [r7, #16]
 80120e6:	4630      	mov	r0, r6
 80120e8:	b003      	add	sp, #12
 80120ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ee:	6812      	ldr	r2, [r2, #0]
 80120f0:	3b04      	subs	r3, #4
 80120f2:	2a00      	cmp	r2, #0
 80120f4:	d1cc      	bne.n	8012090 <quorem+0x9c>
 80120f6:	3c01      	subs	r4, #1
 80120f8:	e7c7      	b.n	801208a <quorem+0x96>
 80120fa:	6812      	ldr	r2, [r2, #0]
 80120fc:	3b04      	subs	r3, #4
 80120fe:	2a00      	cmp	r2, #0
 8012100:	d1f0      	bne.n	80120e4 <quorem+0xf0>
 8012102:	3c01      	subs	r4, #1
 8012104:	e7eb      	b.n	80120de <quorem+0xea>
 8012106:	2000      	movs	r0, #0
 8012108:	e7ee      	b.n	80120e8 <quorem+0xf4>
 801210a:	0000      	movs	r0, r0
 801210c:	0000      	movs	r0, r0
	...

08012110 <_dtoa_r>:
 8012110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012114:	ec59 8b10 	vmov	r8, r9, d0
 8012118:	b095      	sub	sp, #84	; 0x54
 801211a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801211c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801211e:	9107      	str	r1, [sp, #28]
 8012120:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012124:	4606      	mov	r6, r0
 8012126:	9209      	str	r2, [sp, #36]	; 0x24
 8012128:	9310      	str	r3, [sp, #64]	; 0x40
 801212a:	b975      	cbnz	r5, 801214a <_dtoa_r+0x3a>
 801212c:	2010      	movs	r0, #16
 801212e:	f000 fd75 	bl	8012c1c <malloc>
 8012132:	4602      	mov	r2, r0
 8012134:	6270      	str	r0, [r6, #36]	; 0x24
 8012136:	b920      	cbnz	r0, 8012142 <_dtoa_r+0x32>
 8012138:	4bab      	ldr	r3, [pc, #684]	; (80123e8 <_dtoa_r+0x2d8>)
 801213a:	21ea      	movs	r1, #234	; 0xea
 801213c:	48ab      	ldr	r0, [pc, #684]	; (80123ec <_dtoa_r+0x2dc>)
 801213e:	f001 f9bd 	bl	80134bc <__assert_func>
 8012142:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012146:	6005      	str	r5, [r0, #0]
 8012148:	60c5      	str	r5, [r0, #12]
 801214a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801214c:	6819      	ldr	r1, [r3, #0]
 801214e:	b151      	cbz	r1, 8012166 <_dtoa_r+0x56>
 8012150:	685a      	ldr	r2, [r3, #4]
 8012152:	604a      	str	r2, [r1, #4]
 8012154:	2301      	movs	r3, #1
 8012156:	4093      	lsls	r3, r2
 8012158:	608b      	str	r3, [r1, #8]
 801215a:	4630      	mov	r0, r6
 801215c:	f000 fda6 	bl	8012cac <_Bfree>
 8012160:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012162:	2200      	movs	r2, #0
 8012164:	601a      	str	r2, [r3, #0]
 8012166:	f1b9 0300 	subs.w	r3, r9, #0
 801216a:	bfbb      	ittet	lt
 801216c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012170:	9303      	strlt	r3, [sp, #12]
 8012172:	2300      	movge	r3, #0
 8012174:	2201      	movlt	r2, #1
 8012176:	bfac      	ite	ge
 8012178:	6023      	strge	r3, [r4, #0]
 801217a:	6022      	strlt	r2, [r4, #0]
 801217c:	4b9c      	ldr	r3, [pc, #624]	; (80123f0 <_dtoa_r+0x2e0>)
 801217e:	9c03      	ldr	r4, [sp, #12]
 8012180:	43a3      	bics	r3, r4
 8012182:	d11a      	bne.n	80121ba <_dtoa_r+0xaa>
 8012184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012186:	f242 730f 	movw	r3, #9999	; 0x270f
 801218a:	6013      	str	r3, [r2, #0]
 801218c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012190:	ea53 0308 	orrs.w	r3, r3, r8
 8012194:	f000 8512 	beq.w	8012bbc <_dtoa_r+0xaac>
 8012198:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801219a:	b953      	cbnz	r3, 80121b2 <_dtoa_r+0xa2>
 801219c:	4b95      	ldr	r3, [pc, #596]	; (80123f4 <_dtoa_r+0x2e4>)
 801219e:	e01f      	b.n	80121e0 <_dtoa_r+0xd0>
 80121a0:	4b95      	ldr	r3, [pc, #596]	; (80123f8 <_dtoa_r+0x2e8>)
 80121a2:	9300      	str	r3, [sp, #0]
 80121a4:	3308      	adds	r3, #8
 80121a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80121a8:	6013      	str	r3, [r2, #0]
 80121aa:	9800      	ldr	r0, [sp, #0]
 80121ac:	b015      	add	sp, #84	; 0x54
 80121ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b2:	4b90      	ldr	r3, [pc, #576]	; (80123f4 <_dtoa_r+0x2e4>)
 80121b4:	9300      	str	r3, [sp, #0]
 80121b6:	3303      	adds	r3, #3
 80121b8:	e7f5      	b.n	80121a6 <_dtoa_r+0x96>
 80121ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80121be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80121c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80121ca:	d10b      	bne.n	80121e4 <_dtoa_r+0xd4>
 80121cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80121ce:	2301      	movs	r3, #1
 80121d0:	6013      	str	r3, [r2, #0]
 80121d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	f000 84ee 	beq.w	8012bb6 <_dtoa_r+0xaa6>
 80121da:	4888      	ldr	r0, [pc, #544]	; (80123fc <_dtoa_r+0x2ec>)
 80121dc:	6018      	str	r0, [r3, #0]
 80121de:	1e43      	subs	r3, r0, #1
 80121e0:	9300      	str	r3, [sp, #0]
 80121e2:	e7e2      	b.n	80121aa <_dtoa_r+0x9a>
 80121e4:	a913      	add	r1, sp, #76	; 0x4c
 80121e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80121ea:	aa12      	add	r2, sp, #72	; 0x48
 80121ec:	4630      	mov	r0, r6
 80121ee:	f001 f83f 	bl	8013270 <__d2b>
 80121f2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80121f6:	4605      	mov	r5, r0
 80121f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80121fa:	2900      	cmp	r1, #0
 80121fc:	d047      	beq.n	801228e <_dtoa_r+0x17e>
 80121fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012200:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012204:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012208:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801220c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012210:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012214:	2400      	movs	r4, #0
 8012216:	ec43 2b16 	vmov	d6, r2, r3
 801221a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801221e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80123d0 <_dtoa_r+0x2c0>
 8012222:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012226:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80123d8 <_dtoa_r+0x2c8>
 801222a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801222e:	eeb0 7b46 	vmov.f64	d7, d6
 8012232:	ee06 1a90 	vmov	s13, r1
 8012236:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801223a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80123e0 <_dtoa_r+0x2d0>
 801223e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012242:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012246:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801224e:	ee16 ba90 	vmov	fp, s13
 8012252:	9411      	str	r4, [sp, #68]	; 0x44
 8012254:	d508      	bpl.n	8012268 <_dtoa_r+0x158>
 8012256:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801225a:	eeb4 6b47 	vcmp.f64	d6, d7
 801225e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012262:	bf18      	it	ne
 8012264:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012268:	f1bb 0f16 	cmp.w	fp, #22
 801226c:	d832      	bhi.n	80122d4 <_dtoa_r+0x1c4>
 801226e:	4b64      	ldr	r3, [pc, #400]	; (8012400 <_dtoa_r+0x2f0>)
 8012270:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012274:	ed93 7b00 	vldr	d7, [r3]
 8012278:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801227c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012284:	d501      	bpl.n	801228a <_dtoa_r+0x17a>
 8012286:	f10b 3bff 	add.w	fp, fp, #4294967295
 801228a:	2300      	movs	r3, #0
 801228c:	e023      	b.n	80122d6 <_dtoa_r+0x1c6>
 801228e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012290:	4401      	add	r1, r0
 8012292:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012296:	2b20      	cmp	r3, #32
 8012298:	bfc3      	ittte	gt
 801229a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801229e:	fa04 f303 	lslgt.w	r3, r4, r3
 80122a2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80122a6:	f1c3 0320 	rsble	r3, r3, #32
 80122aa:	bfc6      	itte	gt
 80122ac:	fa28 f804 	lsrgt.w	r8, r8, r4
 80122b0:	ea43 0308 	orrgt.w	r3, r3, r8
 80122b4:	fa08 f303 	lslle.w	r3, r8, r3
 80122b8:	ee07 3a90 	vmov	s15, r3
 80122bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80122c0:	3901      	subs	r1, #1
 80122c2:	ed8d 7b00 	vstr	d7, [sp]
 80122c6:	9c01      	ldr	r4, [sp, #4]
 80122c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80122d0:	2401      	movs	r4, #1
 80122d2:	e7a0      	b.n	8012216 <_dtoa_r+0x106>
 80122d4:	2301      	movs	r3, #1
 80122d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80122d8:	1a43      	subs	r3, r0, r1
 80122da:	1e5a      	subs	r2, r3, #1
 80122dc:	bf45      	ittet	mi
 80122de:	f1c3 0301 	rsbmi	r3, r3, #1
 80122e2:	9305      	strmi	r3, [sp, #20]
 80122e4:	2300      	movpl	r3, #0
 80122e6:	2300      	movmi	r3, #0
 80122e8:	9206      	str	r2, [sp, #24]
 80122ea:	bf54      	ite	pl
 80122ec:	9305      	strpl	r3, [sp, #20]
 80122ee:	9306      	strmi	r3, [sp, #24]
 80122f0:	f1bb 0f00 	cmp.w	fp, #0
 80122f4:	db18      	blt.n	8012328 <_dtoa_r+0x218>
 80122f6:	9b06      	ldr	r3, [sp, #24]
 80122f8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80122fc:	445b      	add	r3, fp
 80122fe:	9306      	str	r3, [sp, #24]
 8012300:	2300      	movs	r3, #0
 8012302:	9a07      	ldr	r2, [sp, #28]
 8012304:	2a09      	cmp	r2, #9
 8012306:	d849      	bhi.n	801239c <_dtoa_r+0x28c>
 8012308:	2a05      	cmp	r2, #5
 801230a:	bfc4      	itt	gt
 801230c:	3a04      	subgt	r2, #4
 801230e:	9207      	strgt	r2, [sp, #28]
 8012310:	9a07      	ldr	r2, [sp, #28]
 8012312:	f1a2 0202 	sub.w	r2, r2, #2
 8012316:	bfcc      	ite	gt
 8012318:	2400      	movgt	r4, #0
 801231a:	2401      	movle	r4, #1
 801231c:	2a03      	cmp	r2, #3
 801231e:	d848      	bhi.n	80123b2 <_dtoa_r+0x2a2>
 8012320:	e8df f002 	tbb	[pc, r2]
 8012324:	3a2c2e0b 	.word	0x3a2c2e0b
 8012328:	9b05      	ldr	r3, [sp, #20]
 801232a:	2200      	movs	r2, #0
 801232c:	eba3 030b 	sub.w	r3, r3, fp
 8012330:	9305      	str	r3, [sp, #20]
 8012332:	920e      	str	r2, [sp, #56]	; 0x38
 8012334:	f1cb 0300 	rsb	r3, fp, #0
 8012338:	e7e3      	b.n	8012302 <_dtoa_r+0x1f2>
 801233a:	2200      	movs	r2, #0
 801233c:	9208      	str	r2, [sp, #32]
 801233e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012340:	2a00      	cmp	r2, #0
 8012342:	dc39      	bgt.n	80123b8 <_dtoa_r+0x2a8>
 8012344:	f04f 0a01 	mov.w	sl, #1
 8012348:	46d1      	mov	r9, sl
 801234a:	4652      	mov	r2, sl
 801234c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012350:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012352:	2100      	movs	r1, #0
 8012354:	6079      	str	r1, [r7, #4]
 8012356:	2004      	movs	r0, #4
 8012358:	f100 0c14 	add.w	ip, r0, #20
 801235c:	4594      	cmp	ip, r2
 801235e:	6879      	ldr	r1, [r7, #4]
 8012360:	d92f      	bls.n	80123c2 <_dtoa_r+0x2b2>
 8012362:	4630      	mov	r0, r6
 8012364:	930c      	str	r3, [sp, #48]	; 0x30
 8012366:	f000 fc61 	bl	8012c2c <_Balloc>
 801236a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801236c:	9000      	str	r0, [sp, #0]
 801236e:	4602      	mov	r2, r0
 8012370:	2800      	cmp	r0, #0
 8012372:	d149      	bne.n	8012408 <_dtoa_r+0x2f8>
 8012374:	4b23      	ldr	r3, [pc, #140]	; (8012404 <_dtoa_r+0x2f4>)
 8012376:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801237a:	e6df      	b.n	801213c <_dtoa_r+0x2c>
 801237c:	2201      	movs	r2, #1
 801237e:	e7dd      	b.n	801233c <_dtoa_r+0x22c>
 8012380:	2200      	movs	r2, #0
 8012382:	9208      	str	r2, [sp, #32]
 8012384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012386:	eb0b 0a02 	add.w	sl, fp, r2
 801238a:	f10a 0901 	add.w	r9, sl, #1
 801238e:	464a      	mov	r2, r9
 8012390:	2a01      	cmp	r2, #1
 8012392:	bfb8      	it	lt
 8012394:	2201      	movlt	r2, #1
 8012396:	e7db      	b.n	8012350 <_dtoa_r+0x240>
 8012398:	2201      	movs	r2, #1
 801239a:	e7f2      	b.n	8012382 <_dtoa_r+0x272>
 801239c:	2401      	movs	r4, #1
 801239e:	2200      	movs	r2, #0
 80123a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80123a4:	f04f 3aff 	mov.w	sl, #4294967295
 80123a8:	2100      	movs	r1, #0
 80123aa:	46d1      	mov	r9, sl
 80123ac:	2212      	movs	r2, #18
 80123ae:	9109      	str	r1, [sp, #36]	; 0x24
 80123b0:	e7ce      	b.n	8012350 <_dtoa_r+0x240>
 80123b2:	2201      	movs	r2, #1
 80123b4:	9208      	str	r2, [sp, #32]
 80123b6:	e7f5      	b.n	80123a4 <_dtoa_r+0x294>
 80123b8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80123bc:	46d1      	mov	r9, sl
 80123be:	4652      	mov	r2, sl
 80123c0:	e7c6      	b.n	8012350 <_dtoa_r+0x240>
 80123c2:	3101      	adds	r1, #1
 80123c4:	6079      	str	r1, [r7, #4]
 80123c6:	0040      	lsls	r0, r0, #1
 80123c8:	e7c6      	b.n	8012358 <_dtoa_r+0x248>
 80123ca:	bf00      	nop
 80123cc:	f3af 8000 	nop.w
 80123d0:	636f4361 	.word	0x636f4361
 80123d4:	3fd287a7 	.word	0x3fd287a7
 80123d8:	8b60c8b3 	.word	0x8b60c8b3
 80123dc:	3fc68a28 	.word	0x3fc68a28
 80123e0:	509f79fb 	.word	0x509f79fb
 80123e4:	3fd34413 	.word	0x3fd34413
 80123e8:	08014cbd 	.word	0x08014cbd
 80123ec:	08014cd4 	.word	0x08014cd4
 80123f0:	7ff00000 	.word	0x7ff00000
 80123f4:	08014cb9 	.word	0x08014cb9
 80123f8:	08014cb0 	.word	0x08014cb0
 80123fc:	08014c8d 	.word	0x08014c8d
 8012400:	08014dd0 	.word	0x08014dd0
 8012404:	08014d33 	.word	0x08014d33
 8012408:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801240a:	9900      	ldr	r1, [sp, #0]
 801240c:	6011      	str	r1, [r2, #0]
 801240e:	f1b9 0f0e 	cmp.w	r9, #14
 8012412:	d872      	bhi.n	80124fa <_dtoa_r+0x3ea>
 8012414:	2c00      	cmp	r4, #0
 8012416:	d070      	beq.n	80124fa <_dtoa_r+0x3ea>
 8012418:	f1bb 0f00 	cmp.w	fp, #0
 801241c:	f340 80a6 	ble.w	801256c <_dtoa_r+0x45c>
 8012420:	49ca      	ldr	r1, [pc, #808]	; (801274c <_dtoa_r+0x63c>)
 8012422:	f00b 020f 	and.w	r2, fp, #15
 8012426:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801242a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801242e:	ed92 7b00 	vldr	d7, [r2]
 8012432:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012436:	f000 808d 	beq.w	8012554 <_dtoa_r+0x444>
 801243a:	4ac5      	ldr	r2, [pc, #788]	; (8012750 <_dtoa_r+0x640>)
 801243c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012440:	ed92 6b08 	vldr	d6, [r2, #32]
 8012444:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012448:	ed8d 6b02 	vstr	d6, [sp, #8]
 801244c:	f001 010f 	and.w	r1, r1, #15
 8012450:	2203      	movs	r2, #3
 8012452:	48bf      	ldr	r0, [pc, #764]	; (8012750 <_dtoa_r+0x640>)
 8012454:	2900      	cmp	r1, #0
 8012456:	d17f      	bne.n	8012558 <_dtoa_r+0x448>
 8012458:	ed9d 6b02 	vldr	d6, [sp, #8]
 801245c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012460:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012464:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012466:	2900      	cmp	r1, #0
 8012468:	f000 80b2 	beq.w	80125d0 <_dtoa_r+0x4c0>
 801246c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012470:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012474:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247c:	f140 80a8 	bpl.w	80125d0 <_dtoa_r+0x4c0>
 8012480:	f1b9 0f00 	cmp.w	r9, #0
 8012484:	f000 80a4 	beq.w	80125d0 <_dtoa_r+0x4c0>
 8012488:	f1ba 0f00 	cmp.w	sl, #0
 801248c:	dd31      	ble.n	80124f2 <_dtoa_r+0x3e2>
 801248e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012492:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012496:	ed8d 7b02 	vstr	d7, [sp, #8]
 801249a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801249e:	3201      	adds	r2, #1
 80124a0:	4650      	mov	r0, sl
 80124a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80124a6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80124aa:	ee07 2a90 	vmov	s15, r2
 80124ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80124b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80124b6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80124ba:	9c03      	ldr	r4, [sp, #12]
 80124bc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80124c0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80124c4:	2800      	cmp	r0, #0
 80124c6:	f040 8086 	bne.w	80125d6 <_dtoa_r+0x4c6>
 80124ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80124ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80124d2:	ec42 1b17 	vmov	d7, r1, r2
 80124d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80124da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124de:	f300 8272 	bgt.w	80129c6 <_dtoa_r+0x8b6>
 80124e2:	eeb1 7b47 	vneg.f64	d7, d7
 80124e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80124ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ee:	f100 8267 	bmi.w	80129c0 <_dtoa_r+0x8b0>
 80124f2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80124f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80124fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80124fc:	2a00      	cmp	r2, #0
 80124fe:	f2c0 8129 	blt.w	8012754 <_dtoa_r+0x644>
 8012502:	f1bb 0f0e 	cmp.w	fp, #14
 8012506:	f300 8125 	bgt.w	8012754 <_dtoa_r+0x644>
 801250a:	4b90      	ldr	r3, [pc, #576]	; (801274c <_dtoa_r+0x63c>)
 801250c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012510:	ed93 6b00 	vldr	d6, [r3]
 8012514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012516:	2b00      	cmp	r3, #0
 8012518:	f280 80c3 	bge.w	80126a2 <_dtoa_r+0x592>
 801251c:	f1b9 0f00 	cmp.w	r9, #0
 8012520:	f300 80bf 	bgt.w	80126a2 <_dtoa_r+0x592>
 8012524:	f040 824c 	bne.w	80129c0 <_dtoa_r+0x8b0>
 8012528:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801252c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012534:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801253c:	464c      	mov	r4, r9
 801253e:	464f      	mov	r7, r9
 8012540:	f280 8222 	bge.w	8012988 <_dtoa_r+0x878>
 8012544:	f8dd 8000 	ldr.w	r8, [sp]
 8012548:	2331      	movs	r3, #49	; 0x31
 801254a:	f808 3b01 	strb.w	r3, [r8], #1
 801254e:	f10b 0b01 	add.w	fp, fp, #1
 8012552:	e21e      	b.n	8012992 <_dtoa_r+0x882>
 8012554:	2202      	movs	r2, #2
 8012556:	e77c      	b.n	8012452 <_dtoa_r+0x342>
 8012558:	07cc      	lsls	r4, r1, #31
 801255a:	d504      	bpl.n	8012566 <_dtoa_r+0x456>
 801255c:	ed90 6b00 	vldr	d6, [r0]
 8012560:	3201      	adds	r2, #1
 8012562:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012566:	1049      	asrs	r1, r1, #1
 8012568:	3008      	adds	r0, #8
 801256a:	e773      	b.n	8012454 <_dtoa_r+0x344>
 801256c:	d02e      	beq.n	80125cc <_dtoa_r+0x4bc>
 801256e:	f1cb 0100 	rsb	r1, fp, #0
 8012572:	4a76      	ldr	r2, [pc, #472]	; (801274c <_dtoa_r+0x63c>)
 8012574:	f001 000f 	and.w	r0, r1, #15
 8012578:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801257c:	ed92 7b00 	vldr	d7, [r2]
 8012580:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012584:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012588:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801258c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8012590:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012594:	486e      	ldr	r0, [pc, #440]	; (8012750 <_dtoa_r+0x640>)
 8012596:	1109      	asrs	r1, r1, #4
 8012598:	2400      	movs	r4, #0
 801259a:	2202      	movs	r2, #2
 801259c:	b939      	cbnz	r1, 80125ae <_dtoa_r+0x49e>
 801259e:	2c00      	cmp	r4, #0
 80125a0:	f43f af60 	beq.w	8012464 <_dtoa_r+0x354>
 80125a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80125a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125ac:	e75a      	b.n	8012464 <_dtoa_r+0x354>
 80125ae:	07cf      	lsls	r7, r1, #31
 80125b0:	d509      	bpl.n	80125c6 <_dtoa_r+0x4b6>
 80125b2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80125b6:	ed90 7b00 	vldr	d7, [r0]
 80125ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80125be:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80125c2:	3201      	adds	r2, #1
 80125c4:	2401      	movs	r4, #1
 80125c6:	1049      	asrs	r1, r1, #1
 80125c8:	3008      	adds	r0, #8
 80125ca:	e7e7      	b.n	801259c <_dtoa_r+0x48c>
 80125cc:	2202      	movs	r2, #2
 80125ce:	e749      	b.n	8012464 <_dtoa_r+0x354>
 80125d0:	465f      	mov	r7, fp
 80125d2:	4648      	mov	r0, r9
 80125d4:	e765      	b.n	80124a2 <_dtoa_r+0x392>
 80125d6:	ec42 1b17 	vmov	d7, r1, r2
 80125da:	4a5c      	ldr	r2, [pc, #368]	; (801274c <_dtoa_r+0x63c>)
 80125dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80125e0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80125e4:	9a00      	ldr	r2, [sp, #0]
 80125e6:	1814      	adds	r4, r2, r0
 80125e8:	9a08      	ldr	r2, [sp, #32]
 80125ea:	b352      	cbz	r2, 8012642 <_dtoa_r+0x532>
 80125ec:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80125f0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80125f4:	f8dd 8000 	ldr.w	r8, [sp]
 80125f8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80125fc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012600:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012604:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012608:	ee14 2a90 	vmov	r2, s9
 801260c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012610:	3230      	adds	r2, #48	; 0x30
 8012612:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012616:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801261a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801261e:	f808 2b01 	strb.w	r2, [r8], #1
 8012622:	d439      	bmi.n	8012698 <_dtoa_r+0x588>
 8012624:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012628:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012630:	d472      	bmi.n	8012718 <_dtoa_r+0x608>
 8012632:	45a0      	cmp	r8, r4
 8012634:	f43f af5d 	beq.w	80124f2 <_dtoa_r+0x3e2>
 8012638:	ee27 7b03 	vmul.f64	d7, d7, d3
 801263c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012640:	e7e0      	b.n	8012604 <_dtoa_r+0x4f4>
 8012642:	f8dd 8000 	ldr.w	r8, [sp]
 8012646:	ee27 7b04 	vmul.f64	d7, d7, d4
 801264a:	4621      	mov	r1, r4
 801264c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012650:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012654:	ee14 2a90 	vmov	r2, s9
 8012658:	3230      	adds	r2, #48	; 0x30
 801265a:	f808 2b01 	strb.w	r2, [r8], #1
 801265e:	45a0      	cmp	r8, r4
 8012660:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012664:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012668:	d118      	bne.n	801269c <_dtoa_r+0x58c>
 801266a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801266e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012672:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801267a:	dc4d      	bgt.n	8012718 <_dtoa_r+0x608>
 801267c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012680:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012688:	f57f af33 	bpl.w	80124f2 <_dtoa_r+0x3e2>
 801268c:	4688      	mov	r8, r1
 801268e:	3901      	subs	r1, #1
 8012690:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012694:	2b30      	cmp	r3, #48	; 0x30
 8012696:	d0f9      	beq.n	801268c <_dtoa_r+0x57c>
 8012698:	46bb      	mov	fp, r7
 801269a:	e02a      	b.n	80126f2 <_dtoa_r+0x5e2>
 801269c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80126a0:	e7d6      	b.n	8012650 <_dtoa_r+0x540>
 80126a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80126a6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80126aa:	f8dd 8000 	ldr.w	r8, [sp]
 80126ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80126b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80126b6:	ee15 3a10 	vmov	r3, s10
 80126ba:	3330      	adds	r3, #48	; 0x30
 80126bc:	f808 3b01 	strb.w	r3, [r8], #1
 80126c0:	9b00      	ldr	r3, [sp, #0]
 80126c2:	eba8 0303 	sub.w	r3, r8, r3
 80126c6:	4599      	cmp	r9, r3
 80126c8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80126cc:	eea3 7b46 	vfms.f64	d7, d3, d6
 80126d0:	d133      	bne.n	801273a <_dtoa_r+0x62a>
 80126d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80126d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80126da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126de:	dc1a      	bgt.n	8012716 <_dtoa_r+0x606>
 80126e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80126e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e8:	d103      	bne.n	80126f2 <_dtoa_r+0x5e2>
 80126ea:	ee15 3a10 	vmov	r3, s10
 80126ee:	07d9      	lsls	r1, r3, #31
 80126f0:	d411      	bmi.n	8012716 <_dtoa_r+0x606>
 80126f2:	4629      	mov	r1, r5
 80126f4:	4630      	mov	r0, r6
 80126f6:	f000 fad9 	bl	8012cac <_Bfree>
 80126fa:	2300      	movs	r3, #0
 80126fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80126fe:	f888 3000 	strb.w	r3, [r8]
 8012702:	f10b 0301 	add.w	r3, fp, #1
 8012706:	6013      	str	r3, [r2, #0]
 8012708:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801270a:	2b00      	cmp	r3, #0
 801270c:	f43f ad4d 	beq.w	80121aa <_dtoa_r+0x9a>
 8012710:	f8c3 8000 	str.w	r8, [r3]
 8012714:	e549      	b.n	80121aa <_dtoa_r+0x9a>
 8012716:	465f      	mov	r7, fp
 8012718:	4643      	mov	r3, r8
 801271a:	4698      	mov	r8, r3
 801271c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012720:	2a39      	cmp	r2, #57	; 0x39
 8012722:	d106      	bne.n	8012732 <_dtoa_r+0x622>
 8012724:	9a00      	ldr	r2, [sp, #0]
 8012726:	429a      	cmp	r2, r3
 8012728:	d1f7      	bne.n	801271a <_dtoa_r+0x60a>
 801272a:	9900      	ldr	r1, [sp, #0]
 801272c:	2230      	movs	r2, #48	; 0x30
 801272e:	3701      	adds	r7, #1
 8012730:	700a      	strb	r2, [r1, #0]
 8012732:	781a      	ldrb	r2, [r3, #0]
 8012734:	3201      	adds	r2, #1
 8012736:	701a      	strb	r2, [r3, #0]
 8012738:	e7ae      	b.n	8012698 <_dtoa_r+0x588>
 801273a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801273e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012746:	d1b2      	bne.n	80126ae <_dtoa_r+0x59e>
 8012748:	e7d3      	b.n	80126f2 <_dtoa_r+0x5e2>
 801274a:	bf00      	nop
 801274c:	08014dd0 	.word	0x08014dd0
 8012750:	08014da8 	.word	0x08014da8
 8012754:	9908      	ldr	r1, [sp, #32]
 8012756:	2900      	cmp	r1, #0
 8012758:	f000 80d1 	beq.w	80128fe <_dtoa_r+0x7ee>
 801275c:	9907      	ldr	r1, [sp, #28]
 801275e:	2901      	cmp	r1, #1
 8012760:	f300 80b4 	bgt.w	80128cc <_dtoa_r+0x7bc>
 8012764:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012766:	2900      	cmp	r1, #0
 8012768:	f000 80ac 	beq.w	80128c4 <_dtoa_r+0x7b4>
 801276c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012770:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012774:	461c      	mov	r4, r3
 8012776:	930a      	str	r3, [sp, #40]	; 0x28
 8012778:	9b05      	ldr	r3, [sp, #20]
 801277a:	4413      	add	r3, r2
 801277c:	9305      	str	r3, [sp, #20]
 801277e:	9b06      	ldr	r3, [sp, #24]
 8012780:	2101      	movs	r1, #1
 8012782:	4413      	add	r3, r2
 8012784:	4630      	mov	r0, r6
 8012786:	9306      	str	r3, [sp, #24]
 8012788:	f000 fb4c 	bl	8012e24 <__i2b>
 801278c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801278e:	4607      	mov	r7, r0
 8012790:	f1b8 0f00 	cmp.w	r8, #0
 8012794:	dd0d      	ble.n	80127b2 <_dtoa_r+0x6a2>
 8012796:	9a06      	ldr	r2, [sp, #24]
 8012798:	2a00      	cmp	r2, #0
 801279a:	dd0a      	ble.n	80127b2 <_dtoa_r+0x6a2>
 801279c:	4542      	cmp	r2, r8
 801279e:	9905      	ldr	r1, [sp, #20]
 80127a0:	bfa8      	it	ge
 80127a2:	4642      	movge	r2, r8
 80127a4:	1a89      	subs	r1, r1, r2
 80127a6:	9105      	str	r1, [sp, #20]
 80127a8:	9906      	ldr	r1, [sp, #24]
 80127aa:	eba8 0802 	sub.w	r8, r8, r2
 80127ae:	1a8a      	subs	r2, r1, r2
 80127b0:	9206      	str	r2, [sp, #24]
 80127b2:	b303      	cbz	r3, 80127f6 <_dtoa_r+0x6e6>
 80127b4:	9a08      	ldr	r2, [sp, #32]
 80127b6:	2a00      	cmp	r2, #0
 80127b8:	f000 80a6 	beq.w	8012908 <_dtoa_r+0x7f8>
 80127bc:	2c00      	cmp	r4, #0
 80127be:	dd13      	ble.n	80127e8 <_dtoa_r+0x6d8>
 80127c0:	4639      	mov	r1, r7
 80127c2:	4622      	mov	r2, r4
 80127c4:	4630      	mov	r0, r6
 80127c6:	930c      	str	r3, [sp, #48]	; 0x30
 80127c8:	f000 fbe8 	bl	8012f9c <__pow5mult>
 80127cc:	462a      	mov	r2, r5
 80127ce:	4601      	mov	r1, r0
 80127d0:	4607      	mov	r7, r0
 80127d2:	4630      	mov	r0, r6
 80127d4:	f000 fb3c 	bl	8012e50 <__multiply>
 80127d8:	4629      	mov	r1, r5
 80127da:	900a      	str	r0, [sp, #40]	; 0x28
 80127dc:	4630      	mov	r0, r6
 80127de:	f000 fa65 	bl	8012cac <_Bfree>
 80127e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127e6:	4615      	mov	r5, r2
 80127e8:	1b1a      	subs	r2, r3, r4
 80127ea:	d004      	beq.n	80127f6 <_dtoa_r+0x6e6>
 80127ec:	4629      	mov	r1, r5
 80127ee:	4630      	mov	r0, r6
 80127f0:	f000 fbd4 	bl	8012f9c <__pow5mult>
 80127f4:	4605      	mov	r5, r0
 80127f6:	2101      	movs	r1, #1
 80127f8:	4630      	mov	r0, r6
 80127fa:	f000 fb13 	bl	8012e24 <__i2b>
 80127fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012800:	2b00      	cmp	r3, #0
 8012802:	4604      	mov	r4, r0
 8012804:	f340 8082 	ble.w	801290c <_dtoa_r+0x7fc>
 8012808:	461a      	mov	r2, r3
 801280a:	4601      	mov	r1, r0
 801280c:	4630      	mov	r0, r6
 801280e:	f000 fbc5 	bl	8012f9c <__pow5mult>
 8012812:	9b07      	ldr	r3, [sp, #28]
 8012814:	2b01      	cmp	r3, #1
 8012816:	4604      	mov	r4, r0
 8012818:	dd7b      	ble.n	8012912 <_dtoa_r+0x802>
 801281a:	2300      	movs	r3, #0
 801281c:	930a      	str	r3, [sp, #40]	; 0x28
 801281e:	6922      	ldr	r2, [r4, #16]
 8012820:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012824:	6910      	ldr	r0, [r2, #16]
 8012826:	f000 faad 	bl	8012d84 <__hi0bits>
 801282a:	f1c0 0020 	rsb	r0, r0, #32
 801282e:	9b06      	ldr	r3, [sp, #24]
 8012830:	4418      	add	r0, r3
 8012832:	f010 001f 	ands.w	r0, r0, #31
 8012836:	f000 808d 	beq.w	8012954 <_dtoa_r+0x844>
 801283a:	f1c0 0220 	rsb	r2, r0, #32
 801283e:	2a04      	cmp	r2, #4
 8012840:	f340 8086 	ble.w	8012950 <_dtoa_r+0x840>
 8012844:	f1c0 001c 	rsb	r0, r0, #28
 8012848:	9b05      	ldr	r3, [sp, #20]
 801284a:	4403      	add	r3, r0
 801284c:	9305      	str	r3, [sp, #20]
 801284e:	9b06      	ldr	r3, [sp, #24]
 8012850:	4403      	add	r3, r0
 8012852:	4480      	add	r8, r0
 8012854:	9306      	str	r3, [sp, #24]
 8012856:	9b05      	ldr	r3, [sp, #20]
 8012858:	2b00      	cmp	r3, #0
 801285a:	dd05      	ble.n	8012868 <_dtoa_r+0x758>
 801285c:	4629      	mov	r1, r5
 801285e:	461a      	mov	r2, r3
 8012860:	4630      	mov	r0, r6
 8012862:	f000 fbf5 	bl	8013050 <__lshift>
 8012866:	4605      	mov	r5, r0
 8012868:	9b06      	ldr	r3, [sp, #24]
 801286a:	2b00      	cmp	r3, #0
 801286c:	dd05      	ble.n	801287a <_dtoa_r+0x76a>
 801286e:	4621      	mov	r1, r4
 8012870:	461a      	mov	r2, r3
 8012872:	4630      	mov	r0, r6
 8012874:	f000 fbec 	bl	8013050 <__lshift>
 8012878:	4604      	mov	r4, r0
 801287a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801287c:	2b00      	cmp	r3, #0
 801287e:	d06b      	beq.n	8012958 <_dtoa_r+0x848>
 8012880:	4621      	mov	r1, r4
 8012882:	4628      	mov	r0, r5
 8012884:	f000 fc50 	bl	8013128 <__mcmp>
 8012888:	2800      	cmp	r0, #0
 801288a:	da65      	bge.n	8012958 <_dtoa_r+0x848>
 801288c:	2300      	movs	r3, #0
 801288e:	4629      	mov	r1, r5
 8012890:	220a      	movs	r2, #10
 8012892:	4630      	mov	r0, r6
 8012894:	f000 fa2c 	bl	8012cf0 <__multadd>
 8012898:	9b08      	ldr	r3, [sp, #32]
 801289a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801289e:	4605      	mov	r5, r0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f000 8192 	beq.w	8012bca <_dtoa_r+0xaba>
 80128a6:	4639      	mov	r1, r7
 80128a8:	2300      	movs	r3, #0
 80128aa:	220a      	movs	r2, #10
 80128ac:	4630      	mov	r0, r6
 80128ae:	f000 fa1f 	bl	8012cf0 <__multadd>
 80128b2:	f1ba 0f00 	cmp.w	sl, #0
 80128b6:	4607      	mov	r7, r0
 80128b8:	f300 808e 	bgt.w	80129d8 <_dtoa_r+0x8c8>
 80128bc:	9b07      	ldr	r3, [sp, #28]
 80128be:	2b02      	cmp	r3, #2
 80128c0:	dc51      	bgt.n	8012966 <_dtoa_r+0x856>
 80128c2:	e089      	b.n	80129d8 <_dtoa_r+0x8c8>
 80128c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80128c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80128ca:	e751      	b.n	8012770 <_dtoa_r+0x660>
 80128cc:	f109 34ff 	add.w	r4, r9, #4294967295
 80128d0:	42a3      	cmp	r3, r4
 80128d2:	bfbf      	itttt	lt
 80128d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80128d6:	1ae3      	sublt	r3, r4, r3
 80128d8:	18d2      	addlt	r2, r2, r3
 80128da:	4613      	movlt	r3, r2
 80128dc:	bfb7      	itett	lt
 80128de:	930e      	strlt	r3, [sp, #56]	; 0x38
 80128e0:	1b1c      	subge	r4, r3, r4
 80128e2:	4623      	movlt	r3, r4
 80128e4:	2400      	movlt	r4, #0
 80128e6:	f1b9 0f00 	cmp.w	r9, #0
 80128ea:	bfb5      	itete	lt
 80128ec:	9a05      	ldrlt	r2, [sp, #20]
 80128ee:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80128f2:	eba2 0809 	sublt.w	r8, r2, r9
 80128f6:	464a      	movge	r2, r9
 80128f8:	bfb8      	it	lt
 80128fa:	2200      	movlt	r2, #0
 80128fc:	e73b      	b.n	8012776 <_dtoa_r+0x666>
 80128fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012902:	9f08      	ldr	r7, [sp, #32]
 8012904:	461c      	mov	r4, r3
 8012906:	e743      	b.n	8012790 <_dtoa_r+0x680>
 8012908:	461a      	mov	r2, r3
 801290a:	e76f      	b.n	80127ec <_dtoa_r+0x6dc>
 801290c:	9b07      	ldr	r3, [sp, #28]
 801290e:	2b01      	cmp	r3, #1
 8012910:	dc18      	bgt.n	8012944 <_dtoa_r+0x834>
 8012912:	9b02      	ldr	r3, [sp, #8]
 8012914:	b9b3      	cbnz	r3, 8012944 <_dtoa_r+0x834>
 8012916:	9b03      	ldr	r3, [sp, #12]
 8012918:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801291c:	b9a2      	cbnz	r2, 8012948 <_dtoa_r+0x838>
 801291e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012922:	0d12      	lsrs	r2, r2, #20
 8012924:	0512      	lsls	r2, r2, #20
 8012926:	b18a      	cbz	r2, 801294c <_dtoa_r+0x83c>
 8012928:	9b05      	ldr	r3, [sp, #20]
 801292a:	3301      	adds	r3, #1
 801292c:	9305      	str	r3, [sp, #20]
 801292e:	9b06      	ldr	r3, [sp, #24]
 8012930:	3301      	adds	r3, #1
 8012932:	9306      	str	r3, [sp, #24]
 8012934:	2301      	movs	r3, #1
 8012936:	930a      	str	r3, [sp, #40]	; 0x28
 8012938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801293a:	2b00      	cmp	r3, #0
 801293c:	f47f af6f 	bne.w	801281e <_dtoa_r+0x70e>
 8012940:	2001      	movs	r0, #1
 8012942:	e774      	b.n	801282e <_dtoa_r+0x71e>
 8012944:	2300      	movs	r3, #0
 8012946:	e7f6      	b.n	8012936 <_dtoa_r+0x826>
 8012948:	9b02      	ldr	r3, [sp, #8]
 801294a:	e7f4      	b.n	8012936 <_dtoa_r+0x826>
 801294c:	920a      	str	r2, [sp, #40]	; 0x28
 801294e:	e7f3      	b.n	8012938 <_dtoa_r+0x828>
 8012950:	d081      	beq.n	8012856 <_dtoa_r+0x746>
 8012952:	4610      	mov	r0, r2
 8012954:	301c      	adds	r0, #28
 8012956:	e777      	b.n	8012848 <_dtoa_r+0x738>
 8012958:	f1b9 0f00 	cmp.w	r9, #0
 801295c:	dc37      	bgt.n	80129ce <_dtoa_r+0x8be>
 801295e:	9b07      	ldr	r3, [sp, #28]
 8012960:	2b02      	cmp	r3, #2
 8012962:	dd34      	ble.n	80129ce <_dtoa_r+0x8be>
 8012964:	46ca      	mov	sl, r9
 8012966:	f1ba 0f00 	cmp.w	sl, #0
 801296a:	d10d      	bne.n	8012988 <_dtoa_r+0x878>
 801296c:	4621      	mov	r1, r4
 801296e:	4653      	mov	r3, sl
 8012970:	2205      	movs	r2, #5
 8012972:	4630      	mov	r0, r6
 8012974:	f000 f9bc 	bl	8012cf0 <__multadd>
 8012978:	4601      	mov	r1, r0
 801297a:	4604      	mov	r4, r0
 801297c:	4628      	mov	r0, r5
 801297e:	f000 fbd3 	bl	8013128 <__mcmp>
 8012982:	2800      	cmp	r0, #0
 8012984:	f73f adde 	bgt.w	8012544 <_dtoa_r+0x434>
 8012988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801298a:	f8dd 8000 	ldr.w	r8, [sp]
 801298e:	ea6f 0b03 	mvn.w	fp, r3
 8012992:	f04f 0900 	mov.w	r9, #0
 8012996:	4621      	mov	r1, r4
 8012998:	4630      	mov	r0, r6
 801299a:	f000 f987 	bl	8012cac <_Bfree>
 801299e:	2f00      	cmp	r7, #0
 80129a0:	f43f aea7 	beq.w	80126f2 <_dtoa_r+0x5e2>
 80129a4:	f1b9 0f00 	cmp.w	r9, #0
 80129a8:	d005      	beq.n	80129b6 <_dtoa_r+0x8a6>
 80129aa:	45b9      	cmp	r9, r7
 80129ac:	d003      	beq.n	80129b6 <_dtoa_r+0x8a6>
 80129ae:	4649      	mov	r1, r9
 80129b0:	4630      	mov	r0, r6
 80129b2:	f000 f97b 	bl	8012cac <_Bfree>
 80129b6:	4639      	mov	r1, r7
 80129b8:	4630      	mov	r0, r6
 80129ba:	f000 f977 	bl	8012cac <_Bfree>
 80129be:	e698      	b.n	80126f2 <_dtoa_r+0x5e2>
 80129c0:	2400      	movs	r4, #0
 80129c2:	4627      	mov	r7, r4
 80129c4:	e7e0      	b.n	8012988 <_dtoa_r+0x878>
 80129c6:	46bb      	mov	fp, r7
 80129c8:	4604      	mov	r4, r0
 80129ca:	4607      	mov	r7, r0
 80129cc:	e5ba      	b.n	8012544 <_dtoa_r+0x434>
 80129ce:	9b08      	ldr	r3, [sp, #32]
 80129d0:	46ca      	mov	sl, r9
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	f000 8100 	beq.w	8012bd8 <_dtoa_r+0xac8>
 80129d8:	f1b8 0f00 	cmp.w	r8, #0
 80129dc:	dd05      	ble.n	80129ea <_dtoa_r+0x8da>
 80129de:	4639      	mov	r1, r7
 80129e0:	4642      	mov	r2, r8
 80129e2:	4630      	mov	r0, r6
 80129e4:	f000 fb34 	bl	8013050 <__lshift>
 80129e8:	4607      	mov	r7, r0
 80129ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d05d      	beq.n	8012aac <_dtoa_r+0x99c>
 80129f0:	6879      	ldr	r1, [r7, #4]
 80129f2:	4630      	mov	r0, r6
 80129f4:	f000 f91a 	bl	8012c2c <_Balloc>
 80129f8:	4680      	mov	r8, r0
 80129fa:	b928      	cbnz	r0, 8012a08 <_dtoa_r+0x8f8>
 80129fc:	4b82      	ldr	r3, [pc, #520]	; (8012c08 <_dtoa_r+0xaf8>)
 80129fe:	4602      	mov	r2, r0
 8012a00:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012a04:	f7ff bb9a 	b.w	801213c <_dtoa_r+0x2c>
 8012a08:	693a      	ldr	r2, [r7, #16]
 8012a0a:	3202      	adds	r2, #2
 8012a0c:	0092      	lsls	r2, r2, #2
 8012a0e:	f107 010c 	add.w	r1, r7, #12
 8012a12:	300c      	adds	r0, #12
 8012a14:	f7fe fe96 	bl	8011744 <memcpy>
 8012a18:	2201      	movs	r2, #1
 8012a1a:	4641      	mov	r1, r8
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	f000 fb17 	bl	8013050 <__lshift>
 8012a22:	9b00      	ldr	r3, [sp, #0]
 8012a24:	3301      	adds	r3, #1
 8012a26:	9305      	str	r3, [sp, #20]
 8012a28:	9b00      	ldr	r3, [sp, #0]
 8012a2a:	4453      	add	r3, sl
 8012a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8012a2e:	9b02      	ldr	r3, [sp, #8]
 8012a30:	f003 0301 	and.w	r3, r3, #1
 8012a34:	46b9      	mov	r9, r7
 8012a36:	9308      	str	r3, [sp, #32]
 8012a38:	4607      	mov	r7, r0
 8012a3a:	9b05      	ldr	r3, [sp, #20]
 8012a3c:	4621      	mov	r1, r4
 8012a3e:	3b01      	subs	r3, #1
 8012a40:	4628      	mov	r0, r5
 8012a42:	9302      	str	r3, [sp, #8]
 8012a44:	f7ff fad6 	bl	8011ff4 <quorem>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	3330      	adds	r3, #48	; 0x30
 8012a4c:	9006      	str	r0, [sp, #24]
 8012a4e:	4649      	mov	r1, r9
 8012a50:	4628      	mov	r0, r5
 8012a52:	930a      	str	r3, [sp, #40]	; 0x28
 8012a54:	f000 fb68 	bl	8013128 <__mcmp>
 8012a58:	463a      	mov	r2, r7
 8012a5a:	4682      	mov	sl, r0
 8012a5c:	4621      	mov	r1, r4
 8012a5e:	4630      	mov	r0, r6
 8012a60:	f000 fb7e 	bl	8013160 <__mdiff>
 8012a64:	68c2      	ldr	r2, [r0, #12]
 8012a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a68:	4680      	mov	r8, r0
 8012a6a:	bb0a      	cbnz	r2, 8012ab0 <_dtoa_r+0x9a0>
 8012a6c:	4601      	mov	r1, r0
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f000 fb5a 	bl	8013128 <__mcmp>
 8012a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a76:	4602      	mov	r2, r0
 8012a78:	4641      	mov	r1, r8
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	920e      	str	r2, [sp, #56]	; 0x38
 8012a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8012a80:	f000 f914 	bl	8012cac <_Bfree>
 8012a84:	9b07      	ldr	r3, [sp, #28]
 8012a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a88:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012a8c:	ea43 0102 	orr.w	r1, r3, r2
 8012a90:	9b08      	ldr	r3, [sp, #32]
 8012a92:	430b      	orrs	r3, r1
 8012a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a96:	d10d      	bne.n	8012ab4 <_dtoa_r+0x9a4>
 8012a98:	2b39      	cmp	r3, #57	; 0x39
 8012a9a:	d029      	beq.n	8012af0 <_dtoa_r+0x9e0>
 8012a9c:	f1ba 0f00 	cmp.w	sl, #0
 8012aa0:	dd01      	ble.n	8012aa6 <_dtoa_r+0x996>
 8012aa2:	9b06      	ldr	r3, [sp, #24]
 8012aa4:	3331      	adds	r3, #49	; 0x31
 8012aa6:	9a02      	ldr	r2, [sp, #8]
 8012aa8:	7013      	strb	r3, [r2, #0]
 8012aaa:	e774      	b.n	8012996 <_dtoa_r+0x886>
 8012aac:	4638      	mov	r0, r7
 8012aae:	e7b8      	b.n	8012a22 <_dtoa_r+0x912>
 8012ab0:	2201      	movs	r2, #1
 8012ab2:	e7e1      	b.n	8012a78 <_dtoa_r+0x968>
 8012ab4:	f1ba 0f00 	cmp.w	sl, #0
 8012ab8:	db06      	blt.n	8012ac8 <_dtoa_r+0x9b8>
 8012aba:	9907      	ldr	r1, [sp, #28]
 8012abc:	ea41 0a0a 	orr.w	sl, r1, sl
 8012ac0:	9908      	ldr	r1, [sp, #32]
 8012ac2:	ea5a 0101 	orrs.w	r1, sl, r1
 8012ac6:	d120      	bne.n	8012b0a <_dtoa_r+0x9fa>
 8012ac8:	2a00      	cmp	r2, #0
 8012aca:	ddec      	ble.n	8012aa6 <_dtoa_r+0x996>
 8012acc:	4629      	mov	r1, r5
 8012ace:	2201      	movs	r2, #1
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	9305      	str	r3, [sp, #20]
 8012ad4:	f000 fabc 	bl	8013050 <__lshift>
 8012ad8:	4621      	mov	r1, r4
 8012ada:	4605      	mov	r5, r0
 8012adc:	f000 fb24 	bl	8013128 <__mcmp>
 8012ae0:	2800      	cmp	r0, #0
 8012ae2:	9b05      	ldr	r3, [sp, #20]
 8012ae4:	dc02      	bgt.n	8012aec <_dtoa_r+0x9dc>
 8012ae6:	d1de      	bne.n	8012aa6 <_dtoa_r+0x996>
 8012ae8:	07da      	lsls	r2, r3, #31
 8012aea:	d5dc      	bpl.n	8012aa6 <_dtoa_r+0x996>
 8012aec:	2b39      	cmp	r3, #57	; 0x39
 8012aee:	d1d8      	bne.n	8012aa2 <_dtoa_r+0x992>
 8012af0:	9a02      	ldr	r2, [sp, #8]
 8012af2:	2339      	movs	r3, #57	; 0x39
 8012af4:	7013      	strb	r3, [r2, #0]
 8012af6:	4643      	mov	r3, r8
 8012af8:	4698      	mov	r8, r3
 8012afa:	3b01      	subs	r3, #1
 8012afc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012b00:	2a39      	cmp	r2, #57	; 0x39
 8012b02:	d051      	beq.n	8012ba8 <_dtoa_r+0xa98>
 8012b04:	3201      	adds	r2, #1
 8012b06:	701a      	strb	r2, [r3, #0]
 8012b08:	e745      	b.n	8012996 <_dtoa_r+0x886>
 8012b0a:	2a00      	cmp	r2, #0
 8012b0c:	dd03      	ble.n	8012b16 <_dtoa_r+0xa06>
 8012b0e:	2b39      	cmp	r3, #57	; 0x39
 8012b10:	d0ee      	beq.n	8012af0 <_dtoa_r+0x9e0>
 8012b12:	3301      	adds	r3, #1
 8012b14:	e7c7      	b.n	8012aa6 <_dtoa_r+0x996>
 8012b16:	9a05      	ldr	r2, [sp, #20]
 8012b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b1a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012b1e:	428a      	cmp	r2, r1
 8012b20:	d02b      	beq.n	8012b7a <_dtoa_r+0xa6a>
 8012b22:	4629      	mov	r1, r5
 8012b24:	2300      	movs	r3, #0
 8012b26:	220a      	movs	r2, #10
 8012b28:	4630      	mov	r0, r6
 8012b2a:	f000 f8e1 	bl	8012cf0 <__multadd>
 8012b2e:	45b9      	cmp	r9, r7
 8012b30:	4605      	mov	r5, r0
 8012b32:	f04f 0300 	mov.w	r3, #0
 8012b36:	f04f 020a 	mov.w	r2, #10
 8012b3a:	4649      	mov	r1, r9
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	d107      	bne.n	8012b50 <_dtoa_r+0xa40>
 8012b40:	f000 f8d6 	bl	8012cf0 <__multadd>
 8012b44:	4681      	mov	r9, r0
 8012b46:	4607      	mov	r7, r0
 8012b48:	9b05      	ldr	r3, [sp, #20]
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	9305      	str	r3, [sp, #20]
 8012b4e:	e774      	b.n	8012a3a <_dtoa_r+0x92a>
 8012b50:	f000 f8ce 	bl	8012cf0 <__multadd>
 8012b54:	4639      	mov	r1, r7
 8012b56:	4681      	mov	r9, r0
 8012b58:	2300      	movs	r3, #0
 8012b5a:	220a      	movs	r2, #10
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	f000 f8c7 	bl	8012cf0 <__multadd>
 8012b62:	4607      	mov	r7, r0
 8012b64:	e7f0      	b.n	8012b48 <_dtoa_r+0xa38>
 8012b66:	f1ba 0f00 	cmp.w	sl, #0
 8012b6a:	9a00      	ldr	r2, [sp, #0]
 8012b6c:	bfcc      	ite	gt
 8012b6e:	46d0      	movgt	r8, sl
 8012b70:	f04f 0801 	movle.w	r8, #1
 8012b74:	4490      	add	r8, r2
 8012b76:	f04f 0900 	mov.w	r9, #0
 8012b7a:	4629      	mov	r1, r5
 8012b7c:	2201      	movs	r2, #1
 8012b7e:	4630      	mov	r0, r6
 8012b80:	9302      	str	r3, [sp, #8]
 8012b82:	f000 fa65 	bl	8013050 <__lshift>
 8012b86:	4621      	mov	r1, r4
 8012b88:	4605      	mov	r5, r0
 8012b8a:	f000 facd 	bl	8013128 <__mcmp>
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	dcb1      	bgt.n	8012af6 <_dtoa_r+0x9e6>
 8012b92:	d102      	bne.n	8012b9a <_dtoa_r+0xa8a>
 8012b94:	9b02      	ldr	r3, [sp, #8]
 8012b96:	07db      	lsls	r3, r3, #31
 8012b98:	d4ad      	bmi.n	8012af6 <_dtoa_r+0x9e6>
 8012b9a:	4643      	mov	r3, r8
 8012b9c:	4698      	mov	r8, r3
 8012b9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ba2:	2a30      	cmp	r2, #48	; 0x30
 8012ba4:	d0fa      	beq.n	8012b9c <_dtoa_r+0xa8c>
 8012ba6:	e6f6      	b.n	8012996 <_dtoa_r+0x886>
 8012ba8:	9a00      	ldr	r2, [sp, #0]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d1a4      	bne.n	8012af8 <_dtoa_r+0x9e8>
 8012bae:	f10b 0b01 	add.w	fp, fp, #1
 8012bb2:	2331      	movs	r3, #49	; 0x31
 8012bb4:	e778      	b.n	8012aa8 <_dtoa_r+0x998>
 8012bb6:	4b15      	ldr	r3, [pc, #84]	; (8012c0c <_dtoa_r+0xafc>)
 8012bb8:	f7ff bb12 	b.w	80121e0 <_dtoa_r+0xd0>
 8012bbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	f47f aaee 	bne.w	80121a0 <_dtoa_r+0x90>
 8012bc4:	4b12      	ldr	r3, [pc, #72]	; (8012c10 <_dtoa_r+0xb00>)
 8012bc6:	f7ff bb0b 	b.w	80121e0 <_dtoa_r+0xd0>
 8012bca:	f1ba 0f00 	cmp.w	sl, #0
 8012bce:	dc03      	bgt.n	8012bd8 <_dtoa_r+0xac8>
 8012bd0:	9b07      	ldr	r3, [sp, #28]
 8012bd2:	2b02      	cmp	r3, #2
 8012bd4:	f73f aec7 	bgt.w	8012966 <_dtoa_r+0x856>
 8012bd8:	f8dd 8000 	ldr.w	r8, [sp]
 8012bdc:	4621      	mov	r1, r4
 8012bde:	4628      	mov	r0, r5
 8012be0:	f7ff fa08 	bl	8011ff4 <quorem>
 8012be4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012be8:	f808 3b01 	strb.w	r3, [r8], #1
 8012bec:	9a00      	ldr	r2, [sp, #0]
 8012bee:	eba8 0202 	sub.w	r2, r8, r2
 8012bf2:	4592      	cmp	sl, r2
 8012bf4:	ddb7      	ble.n	8012b66 <_dtoa_r+0xa56>
 8012bf6:	4629      	mov	r1, r5
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	220a      	movs	r2, #10
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	f000 f877 	bl	8012cf0 <__multadd>
 8012c02:	4605      	mov	r5, r0
 8012c04:	e7ea      	b.n	8012bdc <_dtoa_r+0xacc>
 8012c06:	bf00      	nop
 8012c08:	08014d33 	.word	0x08014d33
 8012c0c:	08014c8c 	.word	0x08014c8c
 8012c10:	08014cb0 	.word	0x08014cb0

08012c14 <_localeconv_r>:
 8012c14:	4800      	ldr	r0, [pc, #0]	; (8012c18 <_localeconv_r+0x4>)
 8012c16:	4770      	bx	lr
 8012c18:	24000164 	.word	0x24000164

08012c1c <malloc>:
 8012c1c:	4b02      	ldr	r3, [pc, #8]	; (8012c28 <malloc+0xc>)
 8012c1e:	4601      	mov	r1, r0
 8012c20:	6818      	ldr	r0, [r3, #0]
 8012c22:	f000 bbe1 	b.w	80133e8 <_malloc_r>
 8012c26:	bf00      	nop
 8012c28:	24000010 	.word	0x24000010

08012c2c <_Balloc>:
 8012c2c:	b570      	push	{r4, r5, r6, lr}
 8012c2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012c30:	4604      	mov	r4, r0
 8012c32:	460d      	mov	r5, r1
 8012c34:	b976      	cbnz	r6, 8012c54 <_Balloc+0x28>
 8012c36:	2010      	movs	r0, #16
 8012c38:	f7ff fff0 	bl	8012c1c <malloc>
 8012c3c:	4602      	mov	r2, r0
 8012c3e:	6260      	str	r0, [r4, #36]	; 0x24
 8012c40:	b920      	cbnz	r0, 8012c4c <_Balloc+0x20>
 8012c42:	4b18      	ldr	r3, [pc, #96]	; (8012ca4 <_Balloc+0x78>)
 8012c44:	4818      	ldr	r0, [pc, #96]	; (8012ca8 <_Balloc+0x7c>)
 8012c46:	2166      	movs	r1, #102	; 0x66
 8012c48:	f000 fc38 	bl	80134bc <__assert_func>
 8012c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c50:	6006      	str	r6, [r0, #0]
 8012c52:	60c6      	str	r6, [r0, #12]
 8012c54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012c56:	68f3      	ldr	r3, [r6, #12]
 8012c58:	b183      	cbz	r3, 8012c7c <_Balloc+0x50>
 8012c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c5c:	68db      	ldr	r3, [r3, #12]
 8012c5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c62:	b9b8      	cbnz	r0, 8012c94 <_Balloc+0x68>
 8012c64:	2101      	movs	r1, #1
 8012c66:	fa01 f605 	lsl.w	r6, r1, r5
 8012c6a:	1d72      	adds	r2, r6, #5
 8012c6c:	0092      	lsls	r2, r2, #2
 8012c6e:	4620      	mov	r0, r4
 8012c70:	f000 fb5a 	bl	8013328 <_calloc_r>
 8012c74:	b160      	cbz	r0, 8012c90 <_Balloc+0x64>
 8012c76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012c7a:	e00e      	b.n	8012c9a <_Balloc+0x6e>
 8012c7c:	2221      	movs	r2, #33	; 0x21
 8012c7e:	2104      	movs	r1, #4
 8012c80:	4620      	mov	r0, r4
 8012c82:	f000 fb51 	bl	8013328 <_calloc_r>
 8012c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c88:	60f0      	str	r0, [r6, #12]
 8012c8a:	68db      	ldr	r3, [r3, #12]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d1e4      	bne.n	8012c5a <_Balloc+0x2e>
 8012c90:	2000      	movs	r0, #0
 8012c92:	bd70      	pop	{r4, r5, r6, pc}
 8012c94:	6802      	ldr	r2, [r0, #0]
 8012c96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012ca0:	e7f7      	b.n	8012c92 <_Balloc+0x66>
 8012ca2:	bf00      	nop
 8012ca4:	08014cbd 	.word	0x08014cbd
 8012ca8:	08014d44 	.word	0x08014d44

08012cac <_Bfree>:
 8012cac:	b570      	push	{r4, r5, r6, lr}
 8012cae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012cb0:	4605      	mov	r5, r0
 8012cb2:	460c      	mov	r4, r1
 8012cb4:	b976      	cbnz	r6, 8012cd4 <_Bfree+0x28>
 8012cb6:	2010      	movs	r0, #16
 8012cb8:	f7ff ffb0 	bl	8012c1c <malloc>
 8012cbc:	4602      	mov	r2, r0
 8012cbe:	6268      	str	r0, [r5, #36]	; 0x24
 8012cc0:	b920      	cbnz	r0, 8012ccc <_Bfree+0x20>
 8012cc2:	4b09      	ldr	r3, [pc, #36]	; (8012ce8 <_Bfree+0x3c>)
 8012cc4:	4809      	ldr	r0, [pc, #36]	; (8012cec <_Bfree+0x40>)
 8012cc6:	218a      	movs	r1, #138	; 0x8a
 8012cc8:	f000 fbf8 	bl	80134bc <__assert_func>
 8012ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012cd0:	6006      	str	r6, [r0, #0]
 8012cd2:	60c6      	str	r6, [r0, #12]
 8012cd4:	b13c      	cbz	r4, 8012ce6 <_Bfree+0x3a>
 8012cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012cd8:	6862      	ldr	r2, [r4, #4]
 8012cda:	68db      	ldr	r3, [r3, #12]
 8012cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012ce0:	6021      	str	r1, [r4, #0]
 8012ce2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012ce6:	bd70      	pop	{r4, r5, r6, pc}
 8012ce8:	08014cbd 	.word	0x08014cbd
 8012cec:	08014d44 	.word	0x08014d44

08012cf0 <__multadd>:
 8012cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cf4:	690e      	ldr	r6, [r1, #16]
 8012cf6:	4607      	mov	r7, r0
 8012cf8:	4698      	mov	r8, r3
 8012cfa:	460c      	mov	r4, r1
 8012cfc:	f101 0014 	add.w	r0, r1, #20
 8012d00:	2300      	movs	r3, #0
 8012d02:	6805      	ldr	r5, [r0, #0]
 8012d04:	b2a9      	uxth	r1, r5
 8012d06:	fb02 8101 	mla	r1, r2, r1, r8
 8012d0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012d0e:	0c2d      	lsrs	r5, r5, #16
 8012d10:	fb02 c505 	mla	r5, r2, r5, ip
 8012d14:	b289      	uxth	r1, r1
 8012d16:	3301      	adds	r3, #1
 8012d18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012d1c:	429e      	cmp	r6, r3
 8012d1e:	f840 1b04 	str.w	r1, [r0], #4
 8012d22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012d26:	dcec      	bgt.n	8012d02 <__multadd+0x12>
 8012d28:	f1b8 0f00 	cmp.w	r8, #0
 8012d2c:	d022      	beq.n	8012d74 <__multadd+0x84>
 8012d2e:	68a3      	ldr	r3, [r4, #8]
 8012d30:	42b3      	cmp	r3, r6
 8012d32:	dc19      	bgt.n	8012d68 <__multadd+0x78>
 8012d34:	6861      	ldr	r1, [r4, #4]
 8012d36:	4638      	mov	r0, r7
 8012d38:	3101      	adds	r1, #1
 8012d3a:	f7ff ff77 	bl	8012c2c <_Balloc>
 8012d3e:	4605      	mov	r5, r0
 8012d40:	b928      	cbnz	r0, 8012d4e <__multadd+0x5e>
 8012d42:	4602      	mov	r2, r0
 8012d44:	4b0d      	ldr	r3, [pc, #52]	; (8012d7c <__multadd+0x8c>)
 8012d46:	480e      	ldr	r0, [pc, #56]	; (8012d80 <__multadd+0x90>)
 8012d48:	21b5      	movs	r1, #181	; 0xb5
 8012d4a:	f000 fbb7 	bl	80134bc <__assert_func>
 8012d4e:	6922      	ldr	r2, [r4, #16]
 8012d50:	3202      	adds	r2, #2
 8012d52:	f104 010c 	add.w	r1, r4, #12
 8012d56:	0092      	lsls	r2, r2, #2
 8012d58:	300c      	adds	r0, #12
 8012d5a:	f7fe fcf3 	bl	8011744 <memcpy>
 8012d5e:	4621      	mov	r1, r4
 8012d60:	4638      	mov	r0, r7
 8012d62:	f7ff ffa3 	bl	8012cac <_Bfree>
 8012d66:	462c      	mov	r4, r5
 8012d68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012d6c:	3601      	adds	r6, #1
 8012d6e:	f8c3 8014 	str.w	r8, [r3, #20]
 8012d72:	6126      	str	r6, [r4, #16]
 8012d74:	4620      	mov	r0, r4
 8012d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d7a:	bf00      	nop
 8012d7c:	08014d33 	.word	0x08014d33
 8012d80:	08014d44 	.word	0x08014d44

08012d84 <__hi0bits>:
 8012d84:	0c03      	lsrs	r3, r0, #16
 8012d86:	041b      	lsls	r3, r3, #16
 8012d88:	b9d3      	cbnz	r3, 8012dc0 <__hi0bits+0x3c>
 8012d8a:	0400      	lsls	r0, r0, #16
 8012d8c:	2310      	movs	r3, #16
 8012d8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012d92:	bf04      	itt	eq
 8012d94:	0200      	lsleq	r0, r0, #8
 8012d96:	3308      	addeq	r3, #8
 8012d98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012d9c:	bf04      	itt	eq
 8012d9e:	0100      	lsleq	r0, r0, #4
 8012da0:	3304      	addeq	r3, #4
 8012da2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012da6:	bf04      	itt	eq
 8012da8:	0080      	lsleq	r0, r0, #2
 8012daa:	3302      	addeq	r3, #2
 8012dac:	2800      	cmp	r0, #0
 8012dae:	db05      	blt.n	8012dbc <__hi0bits+0x38>
 8012db0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012db4:	f103 0301 	add.w	r3, r3, #1
 8012db8:	bf08      	it	eq
 8012dba:	2320      	moveq	r3, #32
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	4770      	bx	lr
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	e7e4      	b.n	8012d8e <__hi0bits+0xa>

08012dc4 <__lo0bits>:
 8012dc4:	6803      	ldr	r3, [r0, #0]
 8012dc6:	f013 0207 	ands.w	r2, r3, #7
 8012dca:	4601      	mov	r1, r0
 8012dcc:	d00b      	beq.n	8012de6 <__lo0bits+0x22>
 8012dce:	07da      	lsls	r2, r3, #31
 8012dd0:	d424      	bmi.n	8012e1c <__lo0bits+0x58>
 8012dd2:	0798      	lsls	r0, r3, #30
 8012dd4:	bf49      	itett	mi
 8012dd6:	085b      	lsrmi	r3, r3, #1
 8012dd8:	089b      	lsrpl	r3, r3, #2
 8012dda:	2001      	movmi	r0, #1
 8012ddc:	600b      	strmi	r3, [r1, #0]
 8012dde:	bf5c      	itt	pl
 8012de0:	600b      	strpl	r3, [r1, #0]
 8012de2:	2002      	movpl	r0, #2
 8012de4:	4770      	bx	lr
 8012de6:	b298      	uxth	r0, r3
 8012de8:	b9b0      	cbnz	r0, 8012e18 <__lo0bits+0x54>
 8012dea:	0c1b      	lsrs	r3, r3, #16
 8012dec:	2010      	movs	r0, #16
 8012dee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012df2:	bf04      	itt	eq
 8012df4:	0a1b      	lsreq	r3, r3, #8
 8012df6:	3008      	addeq	r0, #8
 8012df8:	071a      	lsls	r2, r3, #28
 8012dfa:	bf04      	itt	eq
 8012dfc:	091b      	lsreq	r3, r3, #4
 8012dfe:	3004      	addeq	r0, #4
 8012e00:	079a      	lsls	r2, r3, #30
 8012e02:	bf04      	itt	eq
 8012e04:	089b      	lsreq	r3, r3, #2
 8012e06:	3002      	addeq	r0, #2
 8012e08:	07da      	lsls	r2, r3, #31
 8012e0a:	d403      	bmi.n	8012e14 <__lo0bits+0x50>
 8012e0c:	085b      	lsrs	r3, r3, #1
 8012e0e:	f100 0001 	add.w	r0, r0, #1
 8012e12:	d005      	beq.n	8012e20 <__lo0bits+0x5c>
 8012e14:	600b      	str	r3, [r1, #0]
 8012e16:	4770      	bx	lr
 8012e18:	4610      	mov	r0, r2
 8012e1a:	e7e8      	b.n	8012dee <__lo0bits+0x2a>
 8012e1c:	2000      	movs	r0, #0
 8012e1e:	4770      	bx	lr
 8012e20:	2020      	movs	r0, #32
 8012e22:	4770      	bx	lr

08012e24 <__i2b>:
 8012e24:	b510      	push	{r4, lr}
 8012e26:	460c      	mov	r4, r1
 8012e28:	2101      	movs	r1, #1
 8012e2a:	f7ff feff 	bl	8012c2c <_Balloc>
 8012e2e:	4602      	mov	r2, r0
 8012e30:	b928      	cbnz	r0, 8012e3e <__i2b+0x1a>
 8012e32:	4b05      	ldr	r3, [pc, #20]	; (8012e48 <__i2b+0x24>)
 8012e34:	4805      	ldr	r0, [pc, #20]	; (8012e4c <__i2b+0x28>)
 8012e36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012e3a:	f000 fb3f 	bl	80134bc <__assert_func>
 8012e3e:	2301      	movs	r3, #1
 8012e40:	6144      	str	r4, [r0, #20]
 8012e42:	6103      	str	r3, [r0, #16]
 8012e44:	bd10      	pop	{r4, pc}
 8012e46:	bf00      	nop
 8012e48:	08014d33 	.word	0x08014d33
 8012e4c:	08014d44 	.word	0x08014d44

08012e50 <__multiply>:
 8012e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e54:	4614      	mov	r4, r2
 8012e56:	690a      	ldr	r2, [r1, #16]
 8012e58:	6923      	ldr	r3, [r4, #16]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	bfb8      	it	lt
 8012e5e:	460b      	movlt	r3, r1
 8012e60:	460d      	mov	r5, r1
 8012e62:	bfbc      	itt	lt
 8012e64:	4625      	movlt	r5, r4
 8012e66:	461c      	movlt	r4, r3
 8012e68:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012e6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012e70:	68ab      	ldr	r3, [r5, #8]
 8012e72:	6869      	ldr	r1, [r5, #4]
 8012e74:	eb0a 0709 	add.w	r7, sl, r9
 8012e78:	42bb      	cmp	r3, r7
 8012e7a:	b085      	sub	sp, #20
 8012e7c:	bfb8      	it	lt
 8012e7e:	3101      	addlt	r1, #1
 8012e80:	f7ff fed4 	bl	8012c2c <_Balloc>
 8012e84:	b930      	cbnz	r0, 8012e94 <__multiply+0x44>
 8012e86:	4602      	mov	r2, r0
 8012e88:	4b42      	ldr	r3, [pc, #264]	; (8012f94 <__multiply+0x144>)
 8012e8a:	4843      	ldr	r0, [pc, #268]	; (8012f98 <__multiply+0x148>)
 8012e8c:	f240 115d 	movw	r1, #349	; 0x15d
 8012e90:	f000 fb14 	bl	80134bc <__assert_func>
 8012e94:	f100 0614 	add.w	r6, r0, #20
 8012e98:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012e9c:	4633      	mov	r3, r6
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	4543      	cmp	r3, r8
 8012ea2:	d31e      	bcc.n	8012ee2 <__multiply+0x92>
 8012ea4:	f105 0c14 	add.w	ip, r5, #20
 8012ea8:	f104 0314 	add.w	r3, r4, #20
 8012eac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012eb0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012eb4:	9202      	str	r2, [sp, #8]
 8012eb6:	ebac 0205 	sub.w	r2, ip, r5
 8012eba:	3a15      	subs	r2, #21
 8012ebc:	f022 0203 	bic.w	r2, r2, #3
 8012ec0:	3204      	adds	r2, #4
 8012ec2:	f105 0115 	add.w	r1, r5, #21
 8012ec6:	458c      	cmp	ip, r1
 8012ec8:	bf38      	it	cc
 8012eca:	2204      	movcc	r2, #4
 8012ecc:	9201      	str	r2, [sp, #4]
 8012ece:	9a02      	ldr	r2, [sp, #8]
 8012ed0:	9303      	str	r3, [sp, #12]
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d808      	bhi.n	8012ee8 <__multiply+0x98>
 8012ed6:	2f00      	cmp	r7, #0
 8012ed8:	dc55      	bgt.n	8012f86 <__multiply+0x136>
 8012eda:	6107      	str	r7, [r0, #16]
 8012edc:	b005      	add	sp, #20
 8012ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee2:	f843 2b04 	str.w	r2, [r3], #4
 8012ee6:	e7db      	b.n	8012ea0 <__multiply+0x50>
 8012ee8:	f8b3 a000 	ldrh.w	sl, [r3]
 8012eec:	f1ba 0f00 	cmp.w	sl, #0
 8012ef0:	d020      	beq.n	8012f34 <__multiply+0xe4>
 8012ef2:	f105 0e14 	add.w	lr, r5, #20
 8012ef6:	46b1      	mov	r9, r6
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012efe:	f8d9 b000 	ldr.w	fp, [r9]
 8012f02:	b2a1      	uxth	r1, r4
 8012f04:	fa1f fb8b 	uxth.w	fp, fp
 8012f08:	fb0a b101 	mla	r1, sl, r1, fp
 8012f0c:	4411      	add	r1, r2
 8012f0e:	f8d9 2000 	ldr.w	r2, [r9]
 8012f12:	0c24      	lsrs	r4, r4, #16
 8012f14:	0c12      	lsrs	r2, r2, #16
 8012f16:	fb0a 2404 	mla	r4, sl, r4, r2
 8012f1a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012f1e:	b289      	uxth	r1, r1
 8012f20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012f24:	45f4      	cmp	ip, lr
 8012f26:	f849 1b04 	str.w	r1, [r9], #4
 8012f2a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012f2e:	d8e4      	bhi.n	8012efa <__multiply+0xaa>
 8012f30:	9901      	ldr	r1, [sp, #4]
 8012f32:	5072      	str	r2, [r6, r1]
 8012f34:	9a03      	ldr	r2, [sp, #12]
 8012f36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012f3a:	3304      	adds	r3, #4
 8012f3c:	f1b9 0f00 	cmp.w	r9, #0
 8012f40:	d01f      	beq.n	8012f82 <__multiply+0x132>
 8012f42:	6834      	ldr	r4, [r6, #0]
 8012f44:	f105 0114 	add.w	r1, r5, #20
 8012f48:	46b6      	mov	lr, r6
 8012f4a:	f04f 0a00 	mov.w	sl, #0
 8012f4e:	880a      	ldrh	r2, [r1, #0]
 8012f50:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012f54:	fb09 b202 	mla	r2, r9, r2, fp
 8012f58:	4492      	add	sl, r2
 8012f5a:	b2a4      	uxth	r4, r4
 8012f5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012f60:	f84e 4b04 	str.w	r4, [lr], #4
 8012f64:	f851 4b04 	ldr.w	r4, [r1], #4
 8012f68:	f8be 2000 	ldrh.w	r2, [lr]
 8012f6c:	0c24      	lsrs	r4, r4, #16
 8012f6e:	fb09 2404 	mla	r4, r9, r4, r2
 8012f72:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012f76:	458c      	cmp	ip, r1
 8012f78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012f7c:	d8e7      	bhi.n	8012f4e <__multiply+0xfe>
 8012f7e:	9a01      	ldr	r2, [sp, #4]
 8012f80:	50b4      	str	r4, [r6, r2]
 8012f82:	3604      	adds	r6, #4
 8012f84:	e7a3      	b.n	8012ece <__multiply+0x7e>
 8012f86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d1a5      	bne.n	8012eda <__multiply+0x8a>
 8012f8e:	3f01      	subs	r7, #1
 8012f90:	e7a1      	b.n	8012ed6 <__multiply+0x86>
 8012f92:	bf00      	nop
 8012f94:	08014d33 	.word	0x08014d33
 8012f98:	08014d44 	.word	0x08014d44

08012f9c <__pow5mult>:
 8012f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fa0:	4615      	mov	r5, r2
 8012fa2:	f012 0203 	ands.w	r2, r2, #3
 8012fa6:	4606      	mov	r6, r0
 8012fa8:	460f      	mov	r7, r1
 8012faa:	d007      	beq.n	8012fbc <__pow5mult+0x20>
 8012fac:	4c25      	ldr	r4, [pc, #148]	; (8013044 <__pow5mult+0xa8>)
 8012fae:	3a01      	subs	r2, #1
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012fb6:	f7ff fe9b 	bl	8012cf0 <__multadd>
 8012fba:	4607      	mov	r7, r0
 8012fbc:	10ad      	asrs	r5, r5, #2
 8012fbe:	d03d      	beq.n	801303c <__pow5mult+0xa0>
 8012fc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012fc2:	b97c      	cbnz	r4, 8012fe4 <__pow5mult+0x48>
 8012fc4:	2010      	movs	r0, #16
 8012fc6:	f7ff fe29 	bl	8012c1c <malloc>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	6270      	str	r0, [r6, #36]	; 0x24
 8012fce:	b928      	cbnz	r0, 8012fdc <__pow5mult+0x40>
 8012fd0:	4b1d      	ldr	r3, [pc, #116]	; (8013048 <__pow5mult+0xac>)
 8012fd2:	481e      	ldr	r0, [pc, #120]	; (801304c <__pow5mult+0xb0>)
 8012fd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012fd8:	f000 fa70 	bl	80134bc <__assert_func>
 8012fdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012fe0:	6004      	str	r4, [r0, #0]
 8012fe2:	60c4      	str	r4, [r0, #12]
 8012fe4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012fe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012fec:	b94c      	cbnz	r4, 8013002 <__pow5mult+0x66>
 8012fee:	f240 2171 	movw	r1, #625	; 0x271
 8012ff2:	4630      	mov	r0, r6
 8012ff4:	f7ff ff16 	bl	8012e24 <__i2b>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	f8c8 0008 	str.w	r0, [r8, #8]
 8012ffe:	4604      	mov	r4, r0
 8013000:	6003      	str	r3, [r0, #0]
 8013002:	f04f 0900 	mov.w	r9, #0
 8013006:	07eb      	lsls	r3, r5, #31
 8013008:	d50a      	bpl.n	8013020 <__pow5mult+0x84>
 801300a:	4639      	mov	r1, r7
 801300c:	4622      	mov	r2, r4
 801300e:	4630      	mov	r0, r6
 8013010:	f7ff ff1e 	bl	8012e50 <__multiply>
 8013014:	4639      	mov	r1, r7
 8013016:	4680      	mov	r8, r0
 8013018:	4630      	mov	r0, r6
 801301a:	f7ff fe47 	bl	8012cac <_Bfree>
 801301e:	4647      	mov	r7, r8
 8013020:	106d      	asrs	r5, r5, #1
 8013022:	d00b      	beq.n	801303c <__pow5mult+0xa0>
 8013024:	6820      	ldr	r0, [r4, #0]
 8013026:	b938      	cbnz	r0, 8013038 <__pow5mult+0x9c>
 8013028:	4622      	mov	r2, r4
 801302a:	4621      	mov	r1, r4
 801302c:	4630      	mov	r0, r6
 801302e:	f7ff ff0f 	bl	8012e50 <__multiply>
 8013032:	6020      	str	r0, [r4, #0]
 8013034:	f8c0 9000 	str.w	r9, [r0]
 8013038:	4604      	mov	r4, r0
 801303a:	e7e4      	b.n	8013006 <__pow5mult+0x6a>
 801303c:	4638      	mov	r0, r7
 801303e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013042:	bf00      	nop
 8013044:	08014e98 	.word	0x08014e98
 8013048:	08014cbd 	.word	0x08014cbd
 801304c:	08014d44 	.word	0x08014d44

08013050 <__lshift>:
 8013050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013054:	460c      	mov	r4, r1
 8013056:	6849      	ldr	r1, [r1, #4]
 8013058:	6923      	ldr	r3, [r4, #16]
 801305a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801305e:	68a3      	ldr	r3, [r4, #8]
 8013060:	4607      	mov	r7, r0
 8013062:	4691      	mov	r9, r2
 8013064:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013068:	f108 0601 	add.w	r6, r8, #1
 801306c:	42b3      	cmp	r3, r6
 801306e:	db0b      	blt.n	8013088 <__lshift+0x38>
 8013070:	4638      	mov	r0, r7
 8013072:	f7ff fddb 	bl	8012c2c <_Balloc>
 8013076:	4605      	mov	r5, r0
 8013078:	b948      	cbnz	r0, 801308e <__lshift+0x3e>
 801307a:	4602      	mov	r2, r0
 801307c:	4b28      	ldr	r3, [pc, #160]	; (8013120 <__lshift+0xd0>)
 801307e:	4829      	ldr	r0, [pc, #164]	; (8013124 <__lshift+0xd4>)
 8013080:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013084:	f000 fa1a 	bl	80134bc <__assert_func>
 8013088:	3101      	adds	r1, #1
 801308a:	005b      	lsls	r3, r3, #1
 801308c:	e7ee      	b.n	801306c <__lshift+0x1c>
 801308e:	2300      	movs	r3, #0
 8013090:	f100 0114 	add.w	r1, r0, #20
 8013094:	f100 0210 	add.w	r2, r0, #16
 8013098:	4618      	mov	r0, r3
 801309a:	4553      	cmp	r3, sl
 801309c:	db33      	blt.n	8013106 <__lshift+0xb6>
 801309e:	6920      	ldr	r0, [r4, #16]
 80130a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80130a4:	f104 0314 	add.w	r3, r4, #20
 80130a8:	f019 091f 	ands.w	r9, r9, #31
 80130ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80130b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80130b4:	d02b      	beq.n	801310e <__lshift+0xbe>
 80130b6:	f1c9 0e20 	rsb	lr, r9, #32
 80130ba:	468a      	mov	sl, r1
 80130bc:	2200      	movs	r2, #0
 80130be:	6818      	ldr	r0, [r3, #0]
 80130c0:	fa00 f009 	lsl.w	r0, r0, r9
 80130c4:	4302      	orrs	r2, r0
 80130c6:	f84a 2b04 	str.w	r2, [sl], #4
 80130ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80130ce:	459c      	cmp	ip, r3
 80130d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80130d4:	d8f3      	bhi.n	80130be <__lshift+0x6e>
 80130d6:	ebac 0304 	sub.w	r3, ip, r4
 80130da:	3b15      	subs	r3, #21
 80130dc:	f023 0303 	bic.w	r3, r3, #3
 80130e0:	3304      	adds	r3, #4
 80130e2:	f104 0015 	add.w	r0, r4, #21
 80130e6:	4584      	cmp	ip, r0
 80130e8:	bf38      	it	cc
 80130ea:	2304      	movcc	r3, #4
 80130ec:	50ca      	str	r2, [r1, r3]
 80130ee:	b10a      	cbz	r2, 80130f4 <__lshift+0xa4>
 80130f0:	f108 0602 	add.w	r6, r8, #2
 80130f4:	3e01      	subs	r6, #1
 80130f6:	4638      	mov	r0, r7
 80130f8:	612e      	str	r6, [r5, #16]
 80130fa:	4621      	mov	r1, r4
 80130fc:	f7ff fdd6 	bl	8012cac <_Bfree>
 8013100:	4628      	mov	r0, r5
 8013102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013106:	f842 0f04 	str.w	r0, [r2, #4]!
 801310a:	3301      	adds	r3, #1
 801310c:	e7c5      	b.n	801309a <__lshift+0x4a>
 801310e:	3904      	subs	r1, #4
 8013110:	f853 2b04 	ldr.w	r2, [r3], #4
 8013114:	f841 2f04 	str.w	r2, [r1, #4]!
 8013118:	459c      	cmp	ip, r3
 801311a:	d8f9      	bhi.n	8013110 <__lshift+0xc0>
 801311c:	e7ea      	b.n	80130f4 <__lshift+0xa4>
 801311e:	bf00      	nop
 8013120:	08014d33 	.word	0x08014d33
 8013124:	08014d44 	.word	0x08014d44

08013128 <__mcmp>:
 8013128:	b530      	push	{r4, r5, lr}
 801312a:	6902      	ldr	r2, [r0, #16]
 801312c:	690c      	ldr	r4, [r1, #16]
 801312e:	1b12      	subs	r2, r2, r4
 8013130:	d10e      	bne.n	8013150 <__mcmp+0x28>
 8013132:	f100 0314 	add.w	r3, r0, #20
 8013136:	3114      	adds	r1, #20
 8013138:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801313c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013140:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013144:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013148:	42a5      	cmp	r5, r4
 801314a:	d003      	beq.n	8013154 <__mcmp+0x2c>
 801314c:	d305      	bcc.n	801315a <__mcmp+0x32>
 801314e:	2201      	movs	r2, #1
 8013150:	4610      	mov	r0, r2
 8013152:	bd30      	pop	{r4, r5, pc}
 8013154:	4283      	cmp	r3, r0
 8013156:	d3f3      	bcc.n	8013140 <__mcmp+0x18>
 8013158:	e7fa      	b.n	8013150 <__mcmp+0x28>
 801315a:	f04f 32ff 	mov.w	r2, #4294967295
 801315e:	e7f7      	b.n	8013150 <__mcmp+0x28>

08013160 <__mdiff>:
 8013160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013164:	460c      	mov	r4, r1
 8013166:	4606      	mov	r6, r0
 8013168:	4611      	mov	r1, r2
 801316a:	4620      	mov	r0, r4
 801316c:	4617      	mov	r7, r2
 801316e:	f7ff ffdb 	bl	8013128 <__mcmp>
 8013172:	1e05      	subs	r5, r0, #0
 8013174:	d110      	bne.n	8013198 <__mdiff+0x38>
 8013176:	4629      	mov	r1, r5
 8013178:	4630      	mov	r0, r6
 801317a:	f7ff fd57 	bl	8012c2c <_Balloc>
 801317e:	b930      	cbnz	r0, 801318e <__mdiff+0x2e>
 8013180:	4b39      	ldr	r3, [pc, #228]	; (8013268 <__mdiff+0x108>)
 8013182:	4602      	mov	r2, r0
 8013184:	f240 2132 	movw	r1, #562	; 0x232
 8013188:	4838      	ldr	r0, [pc, #224]	; (801326c <__mdiff+0x10c>)
 801318a:	f000 f997 	bl	80134bc <__assert_func>
 801318e:	2301      	movs	r3, #1
 8013190:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013198:	bfa4      	itt	ge
 801319a:	463b      	movge	r3, r7
 801319c:	4627      	movge	r7, r4
 801319e:	4630      	mov	r0, r6
 80131a0:	6879      	ldr	r1, [r7, #4]
 80131a2:	bfa6      	itte	ge
 80131a4:	461c      	movge	r4, r3
 80131a6:	2500      	movge	r5, #0
 80131a8:	2501      	movlt	r5, #1
 80131aa:	f7ff fd3f 	bl	8012c2c <_Balloc>
 80131ae:	b920      	cbnz	r0, 80131ba <__mdiff+0x5a>
 80131b0:	4b2d      	ldr	r3, [pc, #180]	; (8013268 <__mdiff+0x108>)
 80131b2:	4602      	mov	r2, r0
 80131b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80131b8:	e7e6      	b.n	8013188 <__mdiff+0x28>
 80131ba:	693e      	ldr	r6, [r7, #16]
 80131bc:	60c5      	str	r5, [r0, #12]
 80131be:	6925      	ldr	r5, [r4, #16]
 80131c0:	f107 0114 	add.w	r1, r7, #20
 80131c4:	f104 0914 	add.w	r9, r4, #20
 80131c8:	f100 0e14 	add.w	lr, r0, #20
 80131cc:	f107 0210 	add.w	r2, r7, #16
 80131d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80131d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80131d8:	46f2      	mov	sl, lr
 80131da:	2700      	movs	r7, #0
 80131dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80131e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80131e4:	fa1f f883 	uxth.w	r8, r3
 80131e8:	fa17 f78b 	uxtah	r7, r7, fp
 80131ec:	0c1b      	lsrs	r3, r3, #16
 80131ee:	eba7 0808 	sub.w	r8, r7, r8
 80131f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80131f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80131fa:	fa1f f888 	uxth.w	r8, r8
 80131fe:	141f      	asrs	r7, r3, #16
 8013200:	454d      	cmp	r5, r9
 8013202:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013206:	f84a 3b04 	str.w	r3, [sl], #4
 801320a:	d8e7      	bhi.n	80131dc <__mdiff+0x7c>
 801320c:	1b2b      	subs	r3, r5, r4
 801320e:	3b15      	subs	r3, #21
 8013210:	f023 0303 	bic.w	r3, r3, #3
 8013214:	3304      	adds	r3, #4
 8013216:	3415      	adds	r4, #21
 8013218:	42a5      	cmp	r5, r4
 801321a:	bf38      	it	cc
 801321c:	2304      	movcc	r3, #4
 801321e:	4419      	add	r1, r3
 8013220:	4473      	add	r3, lr
 8013222:	469e      	mov	lr, r3
 8013224:	460d      	mov	r5, r1
 8013226:	4565      	cmp	r5, ip
 8013228:	d30e      	bcc.n	8013248 <__mdiff+0xe8>
 801322a:	f10c 0203 	add.w	r2, ip, #3
 801322e:	1a52      	subs	r2, r2, r1
 8013230:	f022 0203 	bic.w	r2, r2, #3
 8013234:	3903      	subs	r1, #3
 8013236:	458c      	cmp	ip, r1
 8013238:	bf38      	it	cc
 801323a:	2200      	movcc	r2, #0
 801323c:	441a      	add	r2, r3
 801323e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013242:	b17b      	cbz	r3, 8013264 <__mdiff+0x104>
 8013244:	6106      	str	r6, [r0, #16]
 8013246:	e7a5      	b.n	8013194 <__mdiff+0x34>
 8013248:	f855 8b04 	ldr.w	r8, [r5], #4
 801324c:	fa17 f488 	uxtah	r4, r7, r8
 8013250:	1422      	asrs	r2, r4, #16
 8013252:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013256:	b2a4      	uxth	r4, r4
 8013258:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801325c:	f84e 4b04 	str.w	r4, [lr], #4
 8013260:	1417      	asrs	r7, r2, #16
 8013262:	e7e0      	b.n	8013226 <__mdiff+0xc6>
 8013264:	3e01      	subs	r6, #1
 8013266:	e7ea      	b.n	801323e <__mdiff+0xde>
 8013268:	08014d33 	.word	0x08014d33
 801326c:	08014d44 	.word	0x08014d44

08013270 <__d2b>:
 8013270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013274:	4689      	mov	r9, r1
 8013276:	2101      	movs	r1, #1
 8013278:	ec57 6b10 	vmov	r6, r7, d0
 801327c:	4690      	mov	r8, r2
 801327e:	f7ff fcd5 	bl	8012c2c <_Balloc>
 8013282:	4604      	mov	r4, r0
 8013284:	b930      	cbnz	r0, 8013294 <__d2b+0x24>
 8013286:	4602      	mov	r2, r0
 8013288:	4b25      	ldr	r3, [pc, #148]	; (8013320 <__d2b+0xb0>)
 801328a:	4826      	ldr	r0, [pc, #152]	; (8013324 <__d2b+0xb4>)
 801328c:	f240 310a 	movw	r1, #778	; 0x30a
 8013290:	f000 f914 	bl	80134bc <__assert_func>
 8013294:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801329c:	bb35      	cbnz	r5, 80132ec <__d2b+0x7c>
 801329e:	2e00      	cmp	r6, #0
 80132a0:	9301      	str	r3, [sp, #4]
 80132a2:	d028      	beq.n	80132f6 <__d2b+0x86>
 80132a4:	4668      	mov	r0, sp
 80132a6:	9600      	str	r6, [sp, #0]
 80132a8:	f7ff fd8c 	bl	8012dc4 <__lo0bits>
 80132ac:	9900      	ldr	r1, [sp, #0]
 80132ae:	b300      	cbz	r0, 80132f2 <__d2b+0x82>
 80132b0:	9a01      	ldr	r2, [sp, #4]
 80132b2:	f1c0 0320 	rsb	r3, r0, #32
 80132b6:	fa02 f303 	lsl.w	r3, r2, r3
 80132ba:	430b      	orrs	r3, r1
 80132bc:	40c2      	lsrs	r2, r0
 80132be:	6163      	str	r3, [r4, #20]
 80132c0:	9201      	str	r2, [sp, #4]
 80132c2:	9b01      	ldr	r3, [sp, #4]
 80132c4:	61a3      	str	r3, [r4, #24]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	bf14      	ite	ne
 80132ca:	2202      	movne	r2, #2
 80132cc:	2201      	moveq	r2, #1
 80132ce:	6122      	str	r2, [r4, #16]
 80132d0:	b1d5      	cbz	r5, 8013308 <__d2b+0x98>
 80132d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80132d6:	4405      	add	r5, r0
 80132d8:	f8c9 5000 	str.w	r5, [r9]
 80132dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80132e0:	f8c8 0000 	str.w	r0, [r8]
 80132e4:	4620      	mov	r0, r4
 80132e6:	b003      	add	sp, #12
 80132e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80132f0:	e7d5      	b.n	801329e <__d2b+0x2e>
 80132f2:	6161      	str	r1, [r4, #20]
 80132f4:	e7e5      	b.n	80132c2 <__d2b+0x52>
 80132f6:	a801      	add	r0, sp, #4
 80132f8:	f7ff fd64 	bl	8012dc4 <__lo0bits>
 80132fc:	9b01      	ldr	r3, [sp, #4]
 80132fe:	6163      	str	r3, [r4, #20]
 8013300:	2201      	movs	r2, #1
 8013302:	6122      	str	r2, [r4, #16]
 8013304:	3020      	adds	r0, #32
 8013306:	e7e3      	b.n	80132d0 <__d2b+0x60>
 8013308:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801330c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013310:	f8c9 0000 	str.w	r0, [r9]
 8013314:	6918      	ldr	r0, [r3, #16]
 8013316:	f7ff fd35 	bl	8012d84 <__hi0bits>
 801331a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801331e:	e7df      	b.n	80132e0 <__d2b+0x70>
 8013320:	08014d33 	.word	0x08014d33
 8013324:	08014d44 	.word	0x08014d44

08013328 <_calloc_r>:
 8013328:	b513      	push	{r0, r1, r4, lr}
 801332a:	434a      	muls	r2, r1
 801332c:	4611      	mov	r1, r2
 801332e:	9201      	str	r2, [sp, #4]
 8013330:	f000 f85a 	bl	80133e8 <_malloc_r>
 8013334:	4604      	mov	r4, r0
 8013336:	b118      	cbz	r0, 8013340 <_calloc_r+0x18>
 8013338:	9a01      	ldr	r2, [sp, #4]
 801333a:	2100      	movs	r1, #0
 801333c:	f7fe fa10 	bl	8011760 <memset>
 8013340:	4620      	mov	r0, r4
 8013342:	b002      	add	sp, #8
 8013344:	bd10      	pop	{r4, pc}
	...

08013348 <_free_r>:
 8013348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801334a:	2900      	cmp	r1, #0
 801334c:	d048      	beq.n	80133e0 <_free_r+0x98>
 801334e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013352:	9001      	str	r0, [sp, #4]
 8013354:	2b00      	cmp	r3, #0
 8013356:	f1a1 0404 	sub.w	r4, r1, #4
 801335a:	bfb8      	it	lt
 801335c:	18e4      	addlt	r4, r4, r3
 801335e:	f000 f8ef 	bl	8013540 <__malloc_lock>
 8013362:	4a20      	ldr	r2, [pc, #128]	; (80133e4 <_free_r+0x9c>)
 8013364:	9801      	ldr	r0, [sp, #4]
 8013366:	6813      	ldr	r3, [r2, #0]
 8013368:	4615      	mov	r5, r2
 801336a:	b933      	cbnz	r3, 801337a <_free_r+0x32>
 801336c:	6063      	str	r3, [r4, #4]
 801336e:	6014      	str	r4, [r2, #0]
 8013370:	b003      	add	sp, #12
 8013372:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013376:	f000 b8e9 	b.w	801354c <__malloc_unlock>
 801337a:	42a3      	cmp	r3, r4
 801337c:	d90b      	bls.n	8013396 <_free_r+0x4e>
 801337e:	6821      	ldr	r1, [r4, #0]
 8013380:	1862      	adds	r2, r4, r1
 8013382:	4293      	cmp	r3, r2
 8013384:	bf04      	itt	eq
 8013386:	681a      	ldreq	r2, [r3, #0]
 8013388:	685b      	ldreq	r3, [r3, #4]
 801338a:	6063      	str	r3, [r4, #4]
 801338c:	bf04      	itt	eq
 801338e:	1852      	addeq	r2, r2, r1
 8013390:	6022      	streq	r2, [r4, #0]
 8013392:	602c      	str	r4, [r5, #0]
 8013394:	e7ec      	b.n	8013370 <_free_r+0x28>
 8013396:	461a      	mov	r2, r3
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	b10b      	cbz	r3, 80133a0 <_free_r+0x58>
 801339c:	42a3      	cmp	r3, r4
 801339e:	d9fa      	bls.n	8013396 <_free_r+0x4e>
 80133a0:	6811      	ldr	r1, [r2, #0]
 80133a2:	1855      	adds	r5, r2, r1
 80133a4:	42a5      	cmp	r5, r4
 80133a6:	d10b      	bne.n	80133c0 <_free_r+0x78>
 80133a8:	6824      	ldr	r4, [r4, #0]
 80133aa:	4421      	add	r1, r4
 80133ac:	1854      	adds	r4, r2, r1
 80133ae:	42a3      	cmp	r3, r4
 80133b0:	6011      	str	r1, [r2, #0]
 80133b2:	d1dd      	bne.n	8013370 <_free_r+0x28>
 80133b4:	681c      	ldr	r4, [r3, #0]
 80133b6:	685b      	ldr	r3, [r3, #4]
 80133b8:	6053      	str	r3, [r2, #4]
 80133ba:	4421      	add	r1, r4
 80133bc:	6011      	str	r1, [r2, #0]
 80133be:	e7d7      	b.n	8013370 <_free_r+0x28>
 80133c0:	d902      	bls.n	80133c8 <_free_r+0x80>
 80133c2:	230c      	movs	r3, #12
 80133c4:	6003      	str	r3, [r0, #0]
 80133c6:	e7d3      	b.n	8013370 <_free_r+0x28>
 80133c8:	6825      	ldr	r5, [r4, #0]
 80133ca:	1961      	adds	r1, r4, r5
 80133cc:	428b      	cmp	r3, r1
 80133ce:	bf04      	itt	eq
 80133d0:	6819      	ldreq	r1, [r3, #0]
 80133d2:	685b      	ldreq	r3, [r3, #4]
 80133d4:	6063      	str	r3, [r4, #4]
 80133d6:	bf04      	itt	eq
 80133d8:	1949      	addeq	r1, r1, r5
 80133da:	6021      	streq	r1, [r4, #0]
 80133dc:	6054      	str	r4, [r2, #4]
 80133de:	e7c7      	b.n	8013370 <_free_r+0x28>
 80133e0:	b003      	add	sp, #12
 80133e2:	bd30      	pop	{r4, r5, pc}
 80133e4:	24000268 	.word	0x24000268

080133e8 <_malloc_r>:
 80133e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ea:	1ccd      	adds	r5, r1, #3
 80133ec:	f025 0503 	bic.w	r5, r5, #3
 80133f0:	3508      	adds	r5, #8
 80133f2:	2d0c      	cmp	r5, #12
 80133f4:	bf38      	it	cc
 80133f6:	250c      	movcc	r5, #12
 80133f8:	2d00      	cmp	r5, #0
 80133fa:	4606      	mov	r6, r0
 80133fc:	db01      	blt.n	8013402 <_malloc_r+0x1a>
 80133fe:	42a9      	cmp	r1, r5
 8013400:	d903      	bls.n	801340a <_malloc_r+0x22>
 8013402:	230c      	movs	r3, #12
 8013404:	6033      	str	r3, [r6, #0]
 8013406:	2000      	movs	r0, #0
 8013408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801340a:	f000 f899 	bl	8013540 <__malloc_lock>
 801340e:	4921      	ldr	r1, [pc, #132]	; (8013494 <_malloc_r+0xac>)
 8013410:	680a      	ldr	r2, [r1, #0]
 8013412:	4614      	mov	r4, r2
 8013414:	b99c      	cbnz	r4, 801343e <_malloc_r+0x56>
 8013416:	4f20      	ldr	r7, [pc, #128]	; (8013498 <_malloc_r+0xb0>)
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	b923      	cbnz	r3, 8013426 <_malloc_r+0x3e>
 801341c:	4621      	mov	r1, r4
 801341e:	4630      	mov	r0, r6
 8013420:	f000 f83c 	bl	801349c <_sbrk_r>
 8013424:	6038      	str	r0, [r7, #0]
 8013426:	4629      	mov	r1, r5
 8013428:	4630      	mov	r0, r6
 801342a:	f000 f837 	bl	801349c <_sbrk_r>
 801342e:	1c43      	adds	r3, r0, #1
 8013430:	d123      	bne.n	801347a <_malloc_r+0x92>
 8013432:	230c      	movs	r3, #12
 8013434:	6033      	str	r3, [r6, #0]
 8013436:	4630      	mov	r0, r6
 8013438:	f000 f888 	bl	801354c <__malloc_unlock>
 801343c:	e7e3      	b.n	8013406 <_malloc_r+0x1e>
 801343e:	6823      	ldr	r3, [r4, #0]
 8013440:	1b5b      	subs	r3, r3, r5
 8013442:	d417      	bmi.n	8013474 <_malloc_r+0x8c>
 8013444:	2b0b      	cmp	r3, #11
 8013446:	d903      	bls.n	8013450 <_malloc_r+0x68>
 8013448:	6023      	str	r3, [r4, #0]
 801344a:	441c      	add	r4, r3
 801344c:	6025      	str	r5, [r4, #0]
 801344e:	e004      	b.n	801345a <_malloc_r+0x72>
 8013450:	6863      	ldr	r3, [r4, #4]
 8013452:	42a2      	cmp	r2, r4
 8013454:	bf0c      	ite	eq
 8013456:	600b      	streq	r3, [r1, #0]
 8013458:	6053      	strne	r3, [r2, #4]
 801345a:	4630      	mov	r0, r6
 801345c:	f000 f876 	bl	801354c <__malloc_unlock>
 8013460:	f104 000b 	add.w	r0, r4, #11
 8013464:	1d23      	adds	r3, r4, #4
 8013466:	f020 0007 	bic.w	r0, r0, #7
 801346a:	1ac2      	subs	r2, r0, r3
 801346c:	d0cc      	beq.n	8013408 <_malloc_r+0x20>
 801346e:	1a1b      	subs	r3, r3, r0
 8013470:	50a3      	str	r3, [r4, r2]
 8013472:	e7c9      	b.n	8013408 <_malloc_r+0x20>
 8013474:	4622      	mov	r2, r4
 8013476:	6864      	ldr	r4, [r4, #4]
 8013478:	e7cc      	b.n	8013414 <_malloc_r+0x2c>
 801347a:	1cc4      	adds	r4, r0, #3
 801347c:	f024 0403 	bic.w	r4, r4, #3
 8013480:	42a0      	cmp	r0, r4
 8013482:	d0e3      	beq.n	801344c <_malloc_r+0x64>
 8013484:	1a21      	subs	r1, r4, r0
 8013486:	4630      	mov	r0, r6
 8013488:	f000 f808 	bl	801349c <_sbrk_r>
 801348c:	3001      	adds	r0, #1
 801348e:	d1dd      	bne.n	801344c <_malloc_r+0x64>
 8013490:	e7cf      	b.n	8013432 <_malloc_r+0x4a>
 8013492:	bf00      	nop
 8013494:	24000268 	.word	0x24000268
 8013498:	2400026c 	.word	0x2400026c

0801349c <_sbrk_r>:
 801349c:	b538      	push	{r3, r4, r5, lr}
 801349e:	4d06      	ldr	r5, [pc, #24]	; (80134b8 <_sbrk_r+0x1c>)
 80134a0:	2300      	movs	r3, #0
 80134a2:	4604      	mov	r4, r0
 80134a4:	4608      	mov	r0, r1
 80134a6:	602b      	str	r3, [r5, #0]
 80134a8:	f7f3 fecc 	bl	8007244 <_sbrk>
 80134ac:	1c43      	adds	r3, r0, #1
 80134ae:	d102      	bne.n	80134b6 <_sbrk_r+0x1a>
 80134b0:	682b      	ldr	r3, [r5, #0]
 80134b2:	b103      	cbz	r3, 80134b6 <_sbrk_r+0x1a>
 80134b4:	6023      	str	r3, [r4, #0]
 80134b6:	bd38      	pop	{r3, r4, r5, pc}
 80134b8:	24000e5c 	.word	0x24000e5c

080134bc <__assert_func>:
 80134bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80134be:	4614      	mov	r4, r2
 80134c0:	461a      	mov	r2, r3
 80134c2:	4b09      	ldr	r3, [pc, #36]	; (80134e8 <__assert_func+0x2c>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	4605      	mov	r5, r0
 80134c8:	68d8      	ldr	r0, [r3, #12]
 80134ca:	b14c      	cbz	r4, 80134e0 <__assert_func+0x24>
 80134cc:	4b07      	ldr	r3, [pc, #28]	; (80134ec <__assert_func+0x30>)
 80134ce:	9100      	str	r1, [sp, #0]
 80134d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80134d4:	4906      	ldr	r1, [pc, #24]	; (80134f0 <__assert_func+0x34>)
 80134d6:	462b      	mov	r3, r5
 80134d8:	f000 f80e 	bl	80134f8 <fiprintf>
 80134dc:	f000 fa64 	bl	80139a8 <abort>
 80134e0:	4b04      	ldr	r3, [pc, #16]	; (80134f4 <__assert_func+0x38>)
 80134e2:	461c      	mov	r4, r3
 80134e4:	e7f3      	b.n	80134ce <__assert_func+0x12>
 80134e6:	bf00      	nop
 80134e8:	24000010 	.word	0x24000010
 80134ec:	08014ea4 	.word	0x08014ea4
 80134f0:	08014eb1 	.word	0x08014eb1
 80134f4:	08014edf 	.word	0x08014edf

080134f8 <fiprintf>:
 80134f8:	b40e      	push	{r1, r2, r3}
 80134fa:	b503      	push	{r0, r1, lr}
 80134fc:	4601      	mov	r1, r0
 80134fe:	ab03      	add	r3, sp, #12
 8013500:	4805      	ldr	r0, [pc, #20]	; (8013518 <fiprintf+0x20>)
 8013502:	f853 2b04 	ldr.w	r2, [r3], #4
 8013506:	6800      	ldr	r0, [r0, #0]
 8013508:	9301      	str	r3, [sp, #4]
 801350a:	f000 f84f 	bl	80135ac <_vfiprintf_r>
 801350e:	b002      	add	sp, #8
 8013510:	f85d eb04 	ldr.w	lr, [sp], #4
 8013514:	b003      	add	sp, #12
 8013516:	4770      	bx	lr
 8013518:	24000010 	.word	0x24000010

0801351c <__ascii_mbtowc>:
 801351c:	b082      	sub	sp, #8
 801351e:	b901      	cbnz	r1, 8013522 <__ascii_mbtowc+0x6>
 8013520:	a901      	add	r1, sp, #4
 8013522:	b142      	cbz	r2, 8013536 <__ascii_mbtowc+0x1a>
 8013524:	b14b      	cbz	r3, 801353a <__ascii_mbtowc+0x1e>
 8013526:	7813      	ldrb	r3, [r2, #0]
 8013528:	600b      	str	r3, [r1, #0]
 801352a:	7812      	ldrb	r2, [r2, #0]
 801352c:	1e10      	subs	r0, r2, #0
 801352e:	bf18      	it	ne
 8013530:	2001      	movne	r0, #1
 8013532:	b002      	add	sp, #8
 8013534:	4770      	bx	lr
 8013536:	4610      	mov	r0, r2
 8013538:	e7fb      	b.n	8013532 <__ascii_mbtowc+0x16>
 801353a:	f06f 0001 	mvn.w	r0, #1
 801353e:	e7f8      	b.n	8013532 <__ascii_mbtowc+0x16>

08013540 <__malloc_lock>:
 8013540:	4801      	ldr	r0, [pc, #4]	; (8013548 <__malloc_lock+0x8>)
 8013542:	f000 bbf1 	b.w	8013d28 <__retarget_lock_acquire_recursive>
 8013546:	bf00      	nop
 8013548:	24000e64 	.word	0x24000e64

0801354c <__malloc_unlock>:
 801354c:	4801      	ldr	r0, [pc, #4]	; (8013554 <__malloc_unlock+0x8>)
 801354e:	f000 bbec 	b.w	8013d2a <__retarget_lock_release_recursive>
 8013552:	bf00      	nop
 8013554:	24000e64 	.word	0x24000e64

08013558 <__sfputc_r>:
 8013558:	6893      	ldr	r3, [r2, #8]
 801355a:	3b01      	subs	r3, #1
 801355c:	2b00      	cmp	r3, #0
 801355e:	b410      	push	{r4}
 8013560:	6093      	str	r3, [r2, #8]
 8013562:	da08      	bge.n	8013576 <__sfputc_r+0x1e>
 8013564:	6994      	ldr	r4, [r2, #24]
 8013566:	42a3      	cmp	r3, r4
 8013568:	db01      	blt.n	801356e <__sfputc_r+0x16>
 801356a:	290a      	cmp	r1, #10
 801356c:	d103      	bne.n	8013576 <__sfputc_r+0x1e>
 801356e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013572:	f000 b94b 	b.w	801380c <__swbuf_r>
 8013576:	6813      	ldr	r3, [r2, #0]
 8013578:	1c58      	adds	r0, r3, #1
 801357a:	6010      	str	r0, [r2, #0]
 801357c:	7019      	strb	r1, [r3, #0]
 801357e:	4608      	mov	r0, r1
 8013580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013584:	4770      	bx	lr

08013586 <__sfputs_r>:
 8013586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013588:	4606      	mov	r6, r0
 801358a:	460f      	mov	r7, r1
 801358c:	4614      	mov	r4, r2
 801358e:	18d5      	adds	r5, r2, r3
 8013590:	42ac      	cmp	r4, r5
 8013592:	d101      	bne.n	8013598 <__sfputs_r+0x12>
 8013594:	2000      	movs	r0, #0
 8013596:	e007      	b.n	80135a8 <__sfputs_r+0x22>
 8013598:	f814 1b01 	ldrb.w	r1, [r4], #1
 801359c:	463a      	mov	r2, r7
 801359e:	4630      	mov	r0, r6
 80135a0:	f7ff ffda 	bl	8013558 <__sfputc_r>
 80135a4:	1c43      	adds	r3, r0, #1
 80135a6:	d1f3      	bne.n	8013590 <__sfputs_r+0xa>
 80135a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080135ac <_vfiprintf_r>:
 80135ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b0:	460d      	mov	r5, r1
 80135b2:	b09d      	sub	sp, #116	; 0x74
 80135b4:	4614      	mov	r4, r2
 80135b6:	4698      	mov	r8, r3
 80135b8:	4606      	mov	r6, r0
 80135ba:	b118      	cbz	r0, 80135c4 <_vfiprintf_r+0x18>
 80135bc:	6983      	ldr	r3, [r0, #24]
 80135be:	b90b      	cbnz	r3, 80135c4 <_vfiprintf_r+0x18>
 80135c0:	f000 fb14 	bl	8013bec <__sinit>
 80135c4:	4b89      	ldr	r3, [pc, #548]	; (80137ec <_vfiprintf_r+0x240>)
 80135c6:	429d      	cmp	r5, r3
 80135c8:	d11b      	bne.n	8013602 <_vfiprintf_r+0x56>
 80135ca:	6875      	ldr	r5, [r6, #4]
 80135cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135ce:	07d9      	lsls	r1, r3, #31
 80135d0:	d405      	bmi.n	80135de <_vfiprintf_r+0x32>
 80135d2:	89ab      	ldrh	r3, [r5, #12]
 80135d4:	059a      	lsls	r2, r3, #22
 80135d6:	d402      	bmi.n	80135de <_vfiprintf_r+0x32>
 80135d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135da:	f000 fba5 	bl	8013d28 <__retarget_lock_acquire_recursive>
 80135de:	89ab      	ldrh	r3, [r5, #12]
 80135e0:	071b      	lsls	r3, r3, #28
 80135e2:	d501      	bpl.n	80135e8 <_vfiprintf_r+0x3c>
 80135e4:	692b      	ldr	r3, [r5, #16]
 80135e6:	b9eb      	cbnz	r3, 8013624 <_vfiprintf_r+0x78>
 80135e8:	4629      	mov	r1, r5
 80135ea:	4630      	mov	r0, r6
 80135ec:	f000 f96e 	bl	80138cc <__swsetup_r>
 80135f0:	b1c0      	cbz	r0, 8013624 <_vfiprintf_r+0x78>
 80135f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135f4:	07dc      	lsls	r4, r3, #31
 80135f6:	d50e      	bpl.n	8013616 <_vfiprintf_r+0x6a>
 80135f8:	f04f 30ff 	mov.w	r0, #4294967295
 80135fc:	b01d      	add	sp, #116	; 0x74
 80135fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013602:	4b7b      	ldr	r3, [pc, #492]	; (80137f0 <_vfiprintf_r+0x244>)
 8013604:	429d      	cmp	r5, r3
 8013606:	d101      	bne.n	801360c <_vfiprintf_r+0x60>
 8013608:	68b5      	ldr	r5, [r6, #8]
 801360a:	e7df      	b.n	80135cc <_vfiprintf_r+0x20>
 801360c:	4b79      	ldr	r3, [pc, #484]	; (80137f4 <_vfiprintf_r+0x248>)
 801360e:	429d      	cmp	r5, r3
 8013610:	bf08      	it	eq
 8013612:	68f5      	ldreq	r5, [r6, #12]
 8013614:	e7da      	b.n	80135cc <_vfiprintf_r+0x20>
 8013616:	89ab      	ldrh	r3, [r5, #12]
 8013618:	0598      	lsls	r0, r3, #22
 801361a:	d4ed      	bmi.n	80135f8 <_vfiprintf_r+0x4c>
 801361c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801361e:	f000 fb84 	bl	8013d2a <__retarget_lock_release_recursive>
 8013622:	e7e9      	b.n	80135f8 <_vfiprintf_r+0x4c>
 8013624:	2300      	movs	r3, #0
 8013626:	9309      	str	r3, [sp, #36]	; 0x24
 8013628:	2320      	movs	r3, #32
 801362a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801362e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013632:	2330      	movs	r3, #48	; 0x30
 8013634:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80137f8 <_vfiprintf_r+0x24c>
 8013638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801363c:	f04f 0901 	mov.w	r9, #1
 8013640:	4623      	mov	r3, r4
 8013642:	469a      	mov	sl, r3
 8013644:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013648:	b10a      	cbz	r2, 801364e <_vfiprintf_r+0xa2>
 801364a:	2a25      	cmp	r2, #37	; 0x25
 801364c:	d1f9      	bne.n	8013642 <_vfiprintf_r+0x96>
 801364e:	ebba 0b04 	subs.w	fp, sl, r4
 8013652:	d00b      	beq.n	801366c <_vfiprintf_r+0xc0>
 8013654:	465b      	mov	r3, fp
 8013656:	4622      	mov	r2, r4
 8013658:	4629      	mov	r1, r5
 801365a:	4630      	mov	r0, r6
 801365c:	f7ff ff93 	bl	8013586 <__sfputs_r>
 8013660:	3001      	adds	r0, #1
 8013662:	f000 80aa 	beq.w	80137ba <_vfiprintf_r+0x20e>
 8013666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013668:	445a      	add	r2, fp
 801366a:	9209      	str	r2, [sp, #36]	; 0x24
 801366c:	f89a 3000 	ldrb.w	r3, [sl]
 8013670:	2b00      	cmp	r3, #0
 8013672:	f000 80a2 	beq.w	80137ba <_vfiprintf_r+0x20e>
 8013676:	2300      	movs	r3, #0
 8013678:	f04f 32ff 	mov.w	r2, #4294967295
 801367c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013680:	f10a 0a01 	add.w	sl, sl, #1
 8013684:	9304      	str	r3, [sp, #16]
 8013686:	9307      	str	r3, [sp, #28]
 8013688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801368c:	931a      	str	r3, [sp, #104]	; 0x68
 801368e:	4654      	mov	r4, sl
 8013690:	2205      	movs	r2, #5
 8013692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013696:	4858      	ldr	r0, [pc, #352]	; (80137f8 <_vfiprintf_r+0x24c>)
 8013698:	f7ec fe42 	bl	8000320 <memchr>
 801369c:	9a04      	ldr	r2, [sp, #16]
 801369e:	b9d8      	cbnz	r0, 80136d8 <_vfiprintf_r+0x12c>
 80136a0:	06d1      	lsls	r1, r2, #27
 80136a2:	bf44      	itt	mi
 80136a4:	2320      	movmi	r3, #32
 80136a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136aa:	0713      	lsls	r3, r2, #28
 80136ac:	bf44      	itt	mi
 80136ae:	232b      	movmi	r3, #43	; 0x2b
 80136b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136b4:	f89a 3000 	ldrb.w	r3, [sl]
 80136b8:	2b2a      	cmp	r3, #42	; 0x2a
 80136ba:	d015      	beq.n	80136e8 <_vfiprintf_r+0x13c>
 80136bc:	9a07      	ldr	r2, [sp, #28]
 80136be:	4654      	mov	r4, sl
 80136c0:	2000      	movs	r0, #0
 80136c2:	f04f 0c0a 	mov.w	ip, #10
 80136c6:	4621      	mov	r1, r4
 80136c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136cc:	3b30      	subs	r3, #48	; 0x30
 80136ce:	2b09      	cmp	r3, #9
 80136d0:	d94e      	bls.n	8013770 <_vfiprintf_r+0x1c4>
 80136d2:	b1b0      	cbz	r0, 8013702 <_vfiprintf_r+0x156>
 80136d4:	9207      	str	r2, [sp, #28]
 80136d6:	e014      	b.n	8013702 <_vfiprintf_r+0x156>
 80136d8:	eba0 0308 	sub.w	r3, r0, r8
 80136dc:	fa09 f303 	lsl.w	r3, r9, r3
 80136e0:	4313      	orrs	r3, r2
 80136e2:	9304      	str	r3, [sp, #16]
 80136e4:	46a2      	mov	sl, r4
 80136e6:	e7d2      	b.n	801368e <_vfiprintf_r+0xe2>
 80136e8:	9b03      	ldr	r3, [sp, #12]
 80136ea:	1d19      	adds	r1, r3, #4
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	9103      	str	r1, [sp, #12]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	bfbb      	ittet	lt
 80136f4:	425b      	neglt	r3, r3
 80136f6:	f042 0202 	orrlt.w	r2, r2, #2
 80136fa:	9307      	strge	r3, [sp, #28]
 80136fc:	9307      	strlt	r3, [sp, #28]
 80136fe:	bfb8      	it	lt
 8013700:	9204      	strlt	r2, [sp, #16]
 8013702:	7823      	ldrb	r3, [r4, #0]
 8013704:	2b2e      	cmp	r3, #46	; 0x2e
 8013706:	d10c      	bne.n	8013722 <_vfiprintf_r+0x176>
 8013708:	7863      	ldrb	r3, [r4, #1]
 801370a:	2b2a      	cmp	r3, #42	; 0x2a
 801370c:	d135      	bne.n	801377a <_vfiprintf_r+0x1ce>
 801370e:	9b03      	ldr	r3, [sp, #12]
 8013710:	1d1a      	adds	r2, r3, #4
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	9203      	str	r2, [sp, #12]
 8013716:	2b00      	cmp	r3, #0
 8013718:	bfb8      	it	lt
 801371a:	f04f 33ff 	movlt.w	r3, #4294967295
 801371e:	3402      	adds	r4, #2
 8013720:	9305      	str	r3, [sp, #20]
 8013722:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013808 <_vfiprintf_r+0x25c>
 8013726:	7821      	ldrb	r1, [r4, #0]
 8013728:	2203      	movs	r2, #3
 801372a:	4650      	mov	r0, sl
 801372c:	f7ec fdf8 	bl	8000320 <memchr>
 8013730:	b140      	cbz	r0, 8013744 <_vfiprintf_r+0x198>
 8013732:	2340      	movs	r3, #64	; 0x40
 8013734:	eba0 000a 	sub.w	r0, r0, sl
 8013738:	fa03 f000 	lsl.w	r0, r3, r0
 801373c:	9b04      	ldr	r3, [sp, #16]
 801373e:	4303      	orrs	r3, r0
 8013740:	3401      	adds	r4, #1
 8013742:	9304      	str	r3, [sp, #16]
 8013744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013748:	482c      	ldr	r0, [pc, #176]	; (80137fc <_vfiprintf_r+0x250>)
 801374a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801374e:	2206      	movs	r2, #6
 8013750:	f7ec fde6 	bl	8000320 <memchr>
 8013754:	2800      	cmp	r0, #0
 8013756:	d03f      	beq.n	80137d8 <_vfiprintf_r+0x22c>
 8013758:	4b29      	ldr	r3, [pc, #164]	; (8013800 <_vfiprintf_r+0x254>)
 801375a:	bb1b      	cbnz	r3, 80137a4 <_vfiprintf_r+0x1f8>
 801375c:	9b03      	ldr	r3, [sp, #12]
 801375e:	3307      	adds	r3, #7
 8013760:	f023 0307 	bic.w	r3, r3, #7
 8013764:	3308      	adds	r3, #8
 8013766:	9303      	str	r3, [sp, #12]
 8013768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801376a:	443b      	add	r3, r7
 801376c:	9309      	str	r3, [sp, #36]	; 0x24
 801376e:	e767      	b.n	8013640 <_vfiprintf_r+0x94>
 8013770:	fb0c 3202 	mla	r2, ip, r2, r3
 8013774:	460c      	mov	r4, r1
 8013776:	2001      	movs	r0, #1
 8013778:	e7a5      	b.n	80136c6 <_vfiprintf_r+0x11a>
 801377a:	2300      	movs	r3, #0
 801377c:	3401      	adds	r4, #1
 801377e:	9305      	str	r3, [sp, #20]
 8013780:	4619      	mov	r1, r3
 8013782:	f04f 0c0a 	mov.w	ip, #10
 8013786:	4620      	mov	r0, r4
 8013788:	f810 2b01 	ldrb.w	r2, [r0], #1
 801378c:	3a30      	subs	r2, #48	; 0x30
 801378e:	2a09      	cmp	r2, #9
 8013790:	d903      	bls.n	801379a <_vfiprintf_r+0x1ee>
 8013792:	2b00      	cmp	r3, #0
 8013794:	d0c5      	beq.n	8013722 <_vfiprintf_r+0x176>
 8013796:	9105      	str	r1, [sp, #20]
 8013798:	e7c3      	b.n	8013722 <_vfiprintf_r+0x176>
 801379a:	fb0c 2101 	mla	r1, ip, r1, r2
 801379e:	4604      	mov	r4, r0
 80137a0:	2301      	movs	r3, #1
 80137a2:	e7f0      	b.n	8013786 <_vfiprintf_r+0x1da>
 80137a4:	ab03      	add	r3, sp, #12
 80137a6:	9300      	str	r3, [sp, #0]
 80137a8:	462a      	mov	r2, r5
 80137aa:	4b16      	ldr	r3, [pc, #88]	; (8013804 <_vfiprintf_r+0x258>)
 80137ac:	a904      	add	r1, sp, #16
 80137ae:	4630      	mov	r0, r6
 80137b0:	f7fe f86e 	bl	8011890 <_printf_float>
 80137b4:	4607      	mov	r7, r0
 80137b6:	1c78      	adds	r0, r7, #1
 80137b8:	d1d6      	bne.n	8013768 <_vfiprintf_r+0x1bc>
 80137ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137bc:	07d9      	lsls	r1, r3, #31
 80137be:	d405      	bmi.n	80137cc <_vfiprintf_r+0x220>
 80137c0:	89ab      	ldrh	r3, [r5, #12]
 80137c2:	059a      	lsls	r2, r3, #22
 80137c4:	d402      	bmi.n	80137cc <_vfiprintf_r+0x220>
 80137c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137c8:	f000 faaf 	bl	8013d2a <__retarget_lock_release_recursive>
 80137cc:	89ab      	ldrh	r3, [r5, #12]
 80137ce:	065b      	lsls	r3, r3, #25
 80137d0:	f53f af12 	bmi.w	80135f8 <_vfiprintf_r+0x4c>
 80137d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137d6:	e711      	b.n	80135fc <_vfiprintf_r+0x50>
 80137d8:	ab03      	add	r3, sp, #12
 80137da:	9300      	str	r3, [sp, #0]
 80137dc:	462a      	mov	r2, r5
 80137de:	4b09      	ldr	r3, [pc, #36]	; (8013804 <_vfiprintf_r+0x258>)
 80137e0:	a904      	add	r1, sp, #16
 80137e2:	4630      	mov	r0, r6
 80137e4:	f7fe fae0 	bl	8011da8 <_printf_i>
 80137e8:	e7e4      	b.n	80137b4 <_vfiprintf_r+0x208>
 80137ea:	bf00      	nop
 80137ec:	0801501c 	.word	0x0801501c
 80137f0:	0801503c 	.word	0x0801503c
 80137f4:	08014ffc 	.word	0x08014ffc
 80137f8:	08014eea 	.word	0x08014eea
 80137fc:	08014ef4 	.word	0x08014ef4
 8013800:	08011891 	.word	0x08011891
 8013804:	08013587 	.word	0x08013587
 8013808:	08014ef0 	.word	0x08014ef0

0801380c <__swbuf_r>:
 801380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801380e:	460e      	mov	r6, r1
 8013810:	4614      	mov	r4, r2
 8013812:	4605      	mov	r5, r0
 8013814:	b118      	cbz	r0, 801381e <__swbuf_r+0x12>
 8013816:	6983      	ldr	r3, [r0, #24]
 8013818:	b90b      	cbnz	r3, 801381e <__swbuf_r+0x12>
 801381a:	f000 f9e7 	bl	8013bec <__sinit>
 801381e:	4b21      	ldr	r3, [pc, #132]	; (80138a4 <__swbuf_r+0x98>)
 8013820:	429c      	cmp	r4, r3
 8013822:	d12b      	bne.n	801387c <__swbuf_r+0x70>
 8013824:	686c      	ldr	r4, [r5, #4]
 8013826:	69a3      	ldr	r3, [r4, #24]
 8013828:	60a3      	str	r3, [r4, #8]
 801382a:	89a3      	ldrh	r3, [r4, #12]
 801382c:	071a      	lsls	r2, r3, #28
 801382e:	d52f      	bpl.n	8013890 <__swbuf_r+0x84>
 8013830:	6923      	ldr	r3, [r4, #16]
 8013832:	b36b      	cbz	r3, 8013890 <__swbuf_r+0x84>
 8013834:	6923      	ldr	r3, [r4, #16]
 8013836:	6820      	ldr	r0, [r4, #0]
 8013838:	1ac0      	subs	r0, r0, r3
 801383a:	6963      	ldr	r3, [r4, #20]
 801383c:	b2f6      	uxtb	r6, r6
 801383e:	4283      	cmp	r3, r0
 8013840:	4637      	mov	r7, r6
 8013842:	dc04      	bgt.n	801384e <__swbuf_r+0x42>
 8013844:	4621      	mov	r1, r4
 8013846:	4628      	mov	r0, r5
 8013848:	f000 f93c 	bl	8013ac4 <_fflush_r>
 801384c:	bb30      	cbnz	r0, 801389c <__swbuf_r+0x90>
 801384e:	68a3      	ldr	r3, [r4, #8]
 8013850:	3b01      	subs	r3, #1
 8013852:	60a3      	str	r3, [r4, #8]
 8013854:	6823      	ldr	r3, [r4, #0]
 8013856:	1c5a      	adds	r2, r3, #1
 8013858:	6022      	str	r2, [r4, #0]
 801385a:	701e      	strb	r6, [r3, #0]
 801385c:	6963      	ldr	r3, [r4, #20]
 801385e:	3001      	adds	r0, #1
 8013860:	4283      	cmp	r3, r0
 8013862:	d004      	beq.n	801386e <__swbuf_r+0x62>
 8013864:	89a3      	ldrh	r3, [r4, #12]
 8013866:	07db      	lsls	r3, r3, #31
 8013868:	d506      	bpl.n	8013878 <__swbuf_r+0x6c>
 801386a:	2e0a      	cmp	r6, #10
 801386c:	d104      	bne.n	8013878 <__swbuf_r+0x6c>
 801386e:	4621      	mov	r1, r4
 8013870:	4628      	mov	r0, r5
 8013872:	f000 f927 	bl	8013ac4 <_fflush_r>
 8013876:	b988      	cbnz	r0, 801389c <__swbuf_r+0x90>
 8013878:	4638      	mov	r0, r7
 801387a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801387c:	4b0a      	ldr	r3, [pc, #40]	; (80138a8 <__swbuf_r+0x9c>)
 801387e:	429c      	cmp	r4, r3
 8013880:	d101      	bne.n	8013886 <__swbuf_r+0x7a>
 8013882:	68ac      	ldr	r4, [r5, #8]
 8013884:	e7cf      	b.n	8013826 <__swbuf_r+0x1a>
 8013886:	4b09      	ldr	r3, [pc, #36]	; (80138ac <__swbuf_r+0xa0>)
 8013888:	429c      	cmp	r4, r3
 801388a:	bf08      	it	eq
 801388c:	68ec      	ldreq	r4, [r5, #12]
 801388e:	e7ca      	b.n	8013826 <__swbuf_r+0x1a>
 8013890:	4621      	mov	r1, r4
 8013892:	4628      	mov	r0, r5
 8013894:	f000 f81a 	bl	80138cc <__swsetup_r>
 8013898:	2800      	cmp	r0, #0
 801389a:	d0cb      	beq.n	8013834 <__swbuf_r+0x28>
 801389c:	f04f 37ff 	mov.w	r7, #4294967295
 80138a0:	e7ea      	b.n	8013878 <__swbuf_r+0x6c>
 80138a2:	bf00      	nop
 80138a4:	0801501c 	.word	0x0801501c
 80138a8:	0801503c 	.word	0x0801503c
 80138ac:	08014ffc 	.word	0x08014ffc

080138b0 <__ascii_wctomb>:
 80138b0:	b149      	cbz	r1, 80138c6 <__ascii_wctomb+0x16>
 80138b2:	2aff      	cmp	r2, #255	; 0xff
 80138b4:	bf85      	ittet	hi
 80138b6:	238a      	movhi	r3, #138	; 0x8a
 80138b8:	6003      	strhi	r3, [r0, #0]
 80138ba:	700a      	strbls	r2, [r1, #0]
 80138bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80138c0:	bf98      	it	ls
 80138c2:	2001      	movls	r0, #1
 80138c4:	4770      	bx	lr
 80138c6:	4608      	mov	r0, r1
 80138c8:	4770      	bx	lr
	...

080138cc <__swsetup_r>:
 80138cc:	4b32      	ldr	r3, [pc, #200]	; (8013998 <__swsetup_r+0xcc>)
 80138ce:	b570      	push	{r4, r5, r6, lr}
 80138d0:	681d      	ldr	r5, [r3, #0]
 80138d2:	4606      	mov	r6, r0
 80138d4:	460c      	mov	r4, r1
 80138d6:	b125      	cbz	r5, 80138e2 <__swsetup_r+0x16>
 80138d8:	69ab      	ldr	r3, [r5, #24]
 80138da:	b913      	cbnz	r3, 80138e2 <__swsetup_r+0x16>
 80138dc:	4628      	mov	r0, r5
 80138de:	f000 f985 	bl	8013bec <__sinit>
 80138e2:	4b2e      	ldr	r3, [pc, #184]	; (801399c <__swsetup_r+0xd0>)
 80138e4:	429c      	cmp	r4, r3
 80138e6:	d10f      	bne.n	8013908 <__swsetup_r+0x3c>
 80138e8:	686c      	ldr	r4, [r5, #4]
 80138ea:	89a3      	ldrh	r3, [r4, #12]
 80138ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80138f0:	0719      	lsls	r1, r3, #28
 80138f2:	d42c      	bmi.n	801394e <__swsetup_r+0x82>
 80138f4:	06dd      	lsls	r5, r3, #27
 80138f6:	d411      	bmi.n	801391c <__swsetup_r+0x50>
 80138f8:	2309      	movs	r3, #9
 80138fa:	6033      	str	r3, [r6, #0]
 80138fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013900:	81a3      	strh	r3, [r4, #12]
 8013902:	f04f 30ff 	mov.w	r0, #4294967295
 8013906:	e03e      	b.n	8013986 <__swsetup_r+0xba>
 8013908:	4b25      	ldr	r3, [pc, #148]	; (80139a0 <__swsetup_r+0xd4>)
 801390a:	429c      	cmp	r4, r3
 801390c:	d101      	bne.n	8013912 <__swsetup_r+0x46>
 801390e:	68ac      	ldr	r4, [r5, #8]
 8013910:	e7eb      	b.n	80138ea <__swsetup_r+0x1e>
 8013912:	4b24      	ldr	r3, [pc, #144]	; (80139a4 <__swsetup_r+0xd8>)
 8013914:	429c      	cmp	r4, r3
 8013916:	bf08      	it	eq
 8013918:	68ec      	ldreq	r4, [r5, #12]
 801391a:	e7e6      	b.n	80138ea <__swsetup_r+0x1e>
 801391c:	0758      	lsls	r0, r3, #29
 801391e:	d512      	bpl.n	8013946 <__swsetup_r+0x7a>
 8013920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013922:	b141      	cbz	r1, 8013936 <__swsetup_r+0x6a>
 8013924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013928:	4299      	cmp	r1, r3
 801392a:	d002      	beq.n	8013932 <__swsetup_r+0x66>
 801392c:	4630      	mov	r0, r6
 801392e:	f7ff fd0b 	bl	8013348 <_free_r>
 8013932:	2300      	movs	r3, #0
 8013934:	6363      	str	r3, [r4, #52]	; 0x34
 8013936:	89a3      	ldrh	r3, [r4, #12]
 8013938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801393c:	81a3      	strh	r3, [r4, #12]
 801393e:	2300      	movs	r3, #0
 8013940:	6063      	str	r3, [r4, #4]
 8013942:	6923      	ldr	r3, [r4, #16]
 8013944:	6023      	str	r3, [r4, #0]
 8013946:	89a3      	ldrh	r3, [r4, #12]
 8013948:	f043 0308 	orr.w	r3, r3, #8
 801394c:	81a3      	strh	r3, [r4, #12]
 801394e:	6923      	ldr	r3, [r4, #16]
 8013950:	b94b      	cbnz	r3, 8013966 <__swsetup_r+0x9a>
 8013952:	89a3      	ldrh	r3, [r4, #12]
 8013954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801395c:	d003      	beq.n	8013966 <__swsetup_r+0x9a>
 801395e:	4621      	mov	r1, r4
 8013960:	4630      	mov	r0, r6
 8013962:	f000 fa07 	bl	8013d74 <__smakebuf_r>
 8013966:	89a0      	ldrh	r0, [r4, #12]
 8013968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801396c:	f010 0301 	ands.w	r3, r0, #1
 8013970:	d00a      	beq.n	8013988 <__swsetup_r+0xbc>
 8013972:	2300      	movs	r3, #0
 8013974:	60a3      	str	r3, [r4, #8]
 8013976:	6963      	ldr	r3, [r4, #20]
 8013978:	425b      	negs	r3, r3
 801397a:	61a3      	str	r3, [r4, #24]
 801397c:	6923      	ldr	r3, [r4, #16]
 801397e:	b943      	cbnz	r3, 8013992 <__swsetup_r+0xc6>
 8013980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013984:	d1ba      	bne.n	80138fc <__swsetup_r+0x30>
 8013986:	bd70      	pop	{r4, r5, r6, pc}
 8013988:	0781      	lsls	r1, r0, #30
 801398a:	bf58      	it	pl
 801398c:	6963      	ldrpl	r3, [r4, #20]
 801398e:	60a3      	str	r3, [r4, #8]
 8013990:	e7f4      	b.n	801397c <__swsetup_r+0xb0>
 8013992:	2000      	movs	r0, #0
 8013994:	e7f7      	b.n	8013986 <__swsetup_r+0xba>
 8013996:	bf00      	nop
 8013998:	24000010 	.word	0x24000010
 801399c:	0801501c 	.word	0x0801501c
 80139a0:	0801503c 	.word	0x0801503c
 80139a4:	08014ffc 	.word	0x08014ffc

080139a8 <abort>:
 80139a8:	b508      	push	{r3, lr}
 80139aa:	2006      	movs	r0, #6
 80139ac:	f000 fa4a 	bl	8013e44 <raise>
 80139b0:	2001      	movs	r0, #1
 80139b2:	f7f3 fbcf 	bl	8007154 <_exit>
	...

080139b8 <__sflush_r>:
 80139b8:	898a      	ldrh	r2, [r1, #12]
 80139ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139be:	4605      	mov	r5, r0
 80139c0:	0710      	lsls	r0, r2, #28
 80139c2:	460c      	mov	r4, r1
 80139c4:	d458      	bmi.n	8013a78 <__sflush_r+0xc0>
 80139c6:	684b      	ldr	r3, [r1, #4]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	dc05      	bgt.n	80139d8 <__sflush_r+0x20>
 80139cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	dc02      	bgt.n	80139d8 <__sflush_r+0x20>
 80139d2:	2000      	movs	r0, #0
 80139d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80139da:	2e00      	cmp	r6, #0
 80139dc:	d0f9      	beq.n	80139d2 <__sflush_r+0x1a>
 80139de:	2300      	movs	r3, #0
 80139e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80139e4:	682f      	ldr	r7, [r5, #0]
 80139e6:	602b      	str	r3, [r5, #0]
 80139e8:	d032      	beq.n	8013a50 <__sflush_r+0x98>
 80139ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80139ec:	89a3      	ldrh	r3, [r4, #12]
 80139ee:	075a      	lsls	r2, r3, #29
 80139f0:	d505      	bpl.n	80139fe <__sflush_r+0x46>
 80139f2:	6863      	ldr	r3, [r4, #4]
 80139f4:	1ac0      	subs	r0, r0, r3
 80139f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80139f8:	b10b      	cbz	r3, 80139fe <__sflush_r+0x46>
 80139fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80139fc:	1ac0      	subs	r0, r0, r3
 80139fe:	2300      	movs	r3, #0
 8013a00:	4602      	mov	r2, r0
 8013a02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a04:	6a21      	ldr	r1, [r4, #32]
 8013a06:	4628      	mov	r0, r5
 8013a08:	47b0      	blx	r6
 8013a0a:	1c43      	adds	r3, r0, #1
 8013a0c:	89a3      	ldrh	r3, [r4, #12]
 8013a0e:	d106      	bne.n	8013a1e <__sflush_r+0x66>
 8013a10:	6829      	ldr	r1, [r5, #0]
 8013a12:	291d      	cmp	r1, #29
 8013a14:	d82c      	bhi.n	8013a70 <__sflush_r+0xb8>
 8013a16:	4a2a      	ldr	r2, [pc, #168]	; (8013ac0 <__sflush_r+0x108>)
 8013a18:	40ca      	lsrs	r2, r1
 8013a1a:	07d6      	lsls	r6, r2, #31
 8013a1c:	d528      	bpl.n	8013a70 <__sflush_r+0xb8>
 8013a1e:	2200      	movs	r2, #0
 8013a20:	6062      	str	r2, [r4, #4]
 8013a22:	04d9      	lsls	r1, r3, #19
 8013a24:	6922      	ldr	r2, [r4, #16]
 8013a26:	6022      	str	r2, [r4, #0]
 8013a28:	d504      	bpl.n	8013a34 <__sflush_r+0x7c>
 8013a2a:	1c42      	adds	r2, r0, #1
 8013a2c:	d101      	bne.n	8013a32 <__sflush_r+0x7a>
 8013a2e:	682b      	ldr	r3, [r5, #0]
 8013a30:	b903      	cbnz	r3, 8013a34 <__sflush_r+0x7c>
 8013a32:	6560      	str	r0, [r4, #84]	; 0x54
 8013a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a36:	602f      	str	r7, [r5, #0]
 8013a38:	2900      	cmp	r1, #0
 8013a3a:	d0ca      	beq.n	80139d2 <__sflush_r+0x1a>
 8013a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a40:	4299      	cmp	r1, r3
 8013a42:	d002      	beq.n	8013a4a <__sflush_r+0x92>
 8013a44:	4628      	mov	r0, r5
 8013a46:	f7ff fc7f 	bl	8013348 <_free_r>
 8013a4a:	2000      	movs	r0, #0
 8013a4c:	6360      	str	r0, [r4, #52]	; 0x34
 8013a4e:	e7c1      	b.n	80139d4 <__sflush_r+0x1c>
 8013a50:	6a21      	ldr	r1, [r4, #32]
 8013a52:	2301      	movs	r3, #1
 8013a54:	4628      	mov	r0, r5
 8013a56:	47b0      	blx	r6
 8013a58:	1c41      	adds	r1, r0, #1
 8013a5a:	d1c7      	bne.n	80139ec <__sflush_r+0x34>
 8013a5c:	682b      	ldr	r3, [r5, #0]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d0c4      	beq.n	80139ec <__sflush_r+0x34>
 8013a62:	2b1d      	cmp	r3, #29
 8013a64:	d001      	beq.n	8013a6a <__sflush_r+0xb2>
 8013a66:	2b16      	cmp	r3, #22
 8013a68:	d101      	bne.n	8013a6e <__sflush_r+0xb6>
 8013a6a:	602f      	str	r7, [r5, #0]
 8013a6c:	e7b1      	b.n	80139d2 <__sflush_r+0x1a>
 8013a6e:	89a3      	ldrh	r3, [r4, #12]
 8013a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a74:	81a3      	strh	r3, [r4, #12]
 8013a76:	e7ad      	b.n	80139d4 <__sflush_r+0x1c>
 8013a78:	690f      	ldr	r7, [r1, #16]
 8013a7a:	2f00      	cmp	r7, #0
 8013a7c:	d0a9      	beq.n	80139d2 <__sflush_r+0x1a>
 8013a7e:	0793      	lsls	r3, r2, #30
 8013a80:	680e      	ldr	r6, [r1, #0]
 8013a82:	bf08      	it	eq
 8013a84:	694b      	ldreq	r3, [r1, #20]
 8013a86:	600f      	str	r7, [r1, #0]
 8013a88:	bf18      	it	ne
 8013a8a:	2300      	movne	r3, #0
 8013a8c:	eba6 0807 	sub.w	r8, r6, r7
 8013a90:	608b      	str	r3, [r1, #8]
 8013a92:	f1b8 0f00 	cmp.w	r8, #0
 8013a96:	dd9c      	ble.n	80139d2 <__sflush_r+0x1a>
 8013a98:	6a21      	ldr	r1, [r4, #32]
 8013a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a9c:	4643      	mov	r3, r8
 8013a9e:	463a      	mov	r2, r7
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	47b0      	blx	r6
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	dc06      	bgt.n	8013ab6 <__sflush_r+0xfe>
 8013aa8:	89a3      	ldrh	r3, [r4, #12]
 8013aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013aae:	81a3      	strh	r3, [r4, #12]
 8013ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ab4:	e78e      	b.n	80139d4 <__sflush_r+0x1c>
 8013ab6:	4407      	add	r7, r0
 8013ab8:	eba8 0800 	sub.w	r8, r8, r0
 8013abc:	e7e9      	b.n	8013a92 <__sflush_r+0xda>
 8013abe:	bf00      	nop
 8013ac0:	20400001 	.word	0x20400001

08013ac4 <_fflush_r>:
 8013ac4:	b538      	push	{r3, r4, r5, lr}
 8013ac6:	690b      	ldr	r3, [r1, #16]
 8013ac8:	4605      	mov	r5, r0
 8013aca:	460c      	mov	r4, r1
 8013acc:	b913      	cbnz	r3, 8013ad4 <_fflush_r+0x10>
 8013ace:	2500      	movs	r5, #0
 8013ad0:	4628      	mov	r0, r5
 8013ad2:	bd38      	pop	{r3, r4, r5, pc}
 8013ad4:	b118      	cbz	r0, 8013ade <_fflush_r+0x1a>
 8013ad6:	6983      	ldr	r3, [r0, #24]
 8013ad8:	b90b      	cbnz	r3, 8013ade <_fflush_r+0x1a>
 8013ada:	f000 f887 	bl	8013bec <__sinit>
 8013ade:	4b14      	ldr	r3, [pc, #80]	; (8013b30 <_fflush_r+0x6c>)
 8013ae0:	429c      	cmp	r4, r3
 8013ae2:	d11b      	bne.n	8013b1c <_fflush_r+0x58>
 8013ae4:	686c      	ldr	r4, [r5, #4]
 8013ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d0ef      	beq.n	8013ace <_fflush_r+0xa>
 8013aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013af0:	07d0      	lsls	r0, r2, #31
 8013af2:	d404      	bmi.n	8013afe <_fflush_r+0x3a>
 8013af4:	0599      	lsls	r1, r3, #22
 8013af6:	d402      	bmi.n	8013afe <_fflush_r+0x3a>
 8013af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013afa:	f000 f915 	bl	8013d28 <__retarget_lock_acquire_recursive>
 8013afe:	4628      	mov	r0, r5
 8013b00:	4621      	mov	r1, r4
 8013b02:	f7ff ff59 	bl	80139b8 <__sflush_r>
 8013b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b08:	07da      	lsls	r2, r3, #31
 8013b0a:	4605      	mov	r5, r0
 8013b0c:	d4e0      	bmi.n	8013ad0 <_fflush_r+0xc>
 8013b0e:	89a3      	ldrh	r3, [r4, #12]
 8013b10:	059b      	lsls	r3, r3, #22
 8013b12:	d4dd      	bmi.n	8013ad0 <_fflush_r+0xc>
 8013b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b16:	f000 f908 	bl	8013d2a <__retarget_lock_release_recursive>
 8013b1a:	e7d9      	b.n	8013ad0 <_fflush_r+0xc>
 8013b1c:	4b05      	ldr	r3, [pc, #20]	; (8013b34 <_fflush_r+0x70>)
 8013b1e:	429c      	cmp	r4, r3
 8013b20:	d101      	bne.n	8013b26 <_fflush_r+0x62>
 8013b22:	68ac      	ldr	r4, [r5, #8]
 8013b24:	e7df      	b.n	8013ae6 <_fflush_r+0x22>
 8013b26:	4b04      	ldr	r3, [pc, #16]	; (8013b38 <_fflush_r+0x74>)
 8013b28:	429c      	cmp	r4, r3
 8013b2a:	bf08      	it	eq
 8013b2c:	68ec      	ldreq	r4, [r5, #12]
 8013b2e:	e7da      	b.n	8013ae6 <_fflush_r+0x22>
 8013b30:	0801501c 	.word	0x0801501c
 8013b34:	0801503c 	.word	0x0801503c
 8013b38:	08014ffc 	.word	0x08014ffc

08013b3c <std>:
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	b510      	push	{r4, lr}
 8013b40:	4604      	mov	r4, r0
 8013b42:	e9c0 3300 	strd	r3, r3, [r0]
 8013b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013b4a:	6083      	str	r3, [r0, #8]
 8013b4c:	8181      	strh	r1, [r0, #12]
 8013b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8013b50:	81c2      	strh	r2, [r0, #14]
 8013b52:	6183      	str	r3, [r0, #24]
 8013b54:	4619      	mov	r1, r3
 8013b56:	2208      	movs	r2, #8
 8013b58:	305c      	adds	r0, #92	; 0x5c
 8013b5a:	f7fd fe01 	bl	8011760 <memset>
 8013b5e:	4b05      	ldr	r3, [pc, #20]	; (8013b74 <std+0x38>)
 8013b60:	6263      	str	r3, [r4, #36]	; 0x24
 8013b62:	4b05      	ldr	r3, [pc, #20]	; (8013b78 <std+0x3c>)
 8013b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8013b66:	4b05      	ldr	r3, [pc, #20]	; (8013b7c <std+0x40>)
 8013b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013b6a:	4b05      	ldr	r3, [pc, #20]	; (8013b80 <std+0x44>)
 8013b6c:	6224      	str	r4, [r4, #32]
 8013b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8013b70:	bd10      	pop	{r4, pc}
 8013b72:	bf00      	nop
 8013b74:	08013e7d 	.word	0x08013e7d
 8013b78:	08013e9f 	.word	0x08013e9f
 8013b7c:	08013ed7 	.word	0x08013ed7
 8013b80:	08013efb 	.word	0x08013efb

08013b84 <_cleanup_r>:
 8013b84:	4901      	ldr	r1, [pc, #4]	; (8013b8c <_cleanup_r+0x8>)
 8013b86:	f000 b8af 	b.w	8013ce8 <_fwalk_reent>
 8013b8a:	bf00      	nop
 8013b8c:	08013ac5 	.word	0x08013ac5

08013b90 <__sfmoreglue>:
 8013b90:	b570      	push	{r4, r5, r6, lr}
 8013b92:	1e4a      	subs	r2, r1, #1
 8013b94:	2568      	movs	r5, #104	; 0x68
 8013b96:	4355      	muls	r5, r2
 8013b98:	460e      	mov	r6, r1
 8013b9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b9e:	f7ff fc23 	bl	80133e8 <_malloc_r>
 8013ba2:	4604      	mov	r4, r0
 8013ba4:	b140      	cbz	r0, 8013bb8 <__sfmoreglue+0x28>
 8013ba6:	2100      	movs	r1, #0
 8013ba8:	e9c0 1600 	strd	r1, r6, [r0]
 8013bac:	300c      	adds	r0, #12
 8013bae:	60a0      	str	r0, [r4, #8]
 8013bb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013bb4:	f7fd fdd4 	bl	8011760 <memset>
 8013bb8:	4620      	mov	r0, r4
 8013bba:	bd70      	pop	{r4, r5, r6, pc}

08013bbc <__sfp_lock_acquire>:
 8013bbc:	4801      	ldr	r0, [pc, #4]	; (8013bc4 <__sfp_lock_acquire+0x8>)
 8013bbe:	f000 b8b3 	b.w	8013d28 <__retarget_lock_acquire_recursive>
 8013bc2:	bf00      	nop
 8013bc4:	24000e68 	.word	0x24000e68

08013bc8 <__sfp_lock_release>:
 8013bc8:	4801      	ldr	r0, [pc, #4]	; (8013bd0 <__sfp_lock_release+0x8>)
 8013bca:	f000 b8ae 	b.w	8013d2a <__retarget_lock_release_recursive>
 8013bce:	bf00      	nop
 8013bd0:	24000e68 	.word	0x24000e68

08013bd4 <__sinit_lock_acquire>:
 8013bd4:	4801      	ldr	r0, [pc, #4]	; (8013bdc <__sinit_lock_acquire+0x8>)
 8013bd6:	f000 b8a7 	b.w	8013d28 <__retarget_lock_acquire_recursive>
 8013bda:	bf00      	nop
 8013bdc:	24000e63 	.word	0x24000e63

08013be0 <__sinit_lock_release>:
 8013be0:	4801      	ldr	r0, [pc, #4]	; (8013be8 <__sinit_lock_release+0x8>)
 8013be2:	f000 b8a2 	b.w	8013d2a <__retarget_lock_release_recursive>
 8013be6:	bf00      	nop
 8013be8:	24000e63 	.word	0x24000e63

08013bec <__sinit>:
 8013bec:	b510      	push	{r4, lr}
 8013bee:	4604      	mov	r4, r0
 8013bf0:	f7ff fff0 	bl	8013bd4 <__sinit_lock_acquire>
 8013bf4:	69a3      	ldr	r3, [r4, #24]
 8013bf6:	b11b      	cbz	r3, 8013c00 <__sinit+0x14>
 8013bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bfc:	f7ff bff0 	b.w	8013be0 <__sinit_lock_release>
 8013c00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013c04:	6523      	str	r3, [r4, #80]	; 0x50
 8013c06:	4b13      	ldr	r3, [pc, #76]	; (8013c54 <__sinit+0x68>)
 8013c08:	4a13      	ldr	r2, [pc, #76]	; (8013c58 <__sinit+0x6c>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013c0e:	42a3      	cmp	r3, r4
 8013c10:	bf04      	itt	eq
 8013c12:	2301      	moveq	r3, #1
 8013c14:	61a3      	streq	r3, [r4, #24]
 8013c16:	4620      	mov	r0, r4
 8013c18:	f000 f820 	bl	8013c5c <__sfp>
 8013c1c:	6060      	str	r0, [r4, #4]
 8013c1e:	4620      	mov	r0, r4
 8013c20:	f000 f81c 	bl	8013c5c <__sfp>
 8013c24:	60a0      	str	r0, [r4, #8]
 8013c26:	4620      	mov	r0, r4
 8013c28:	f000 f818 	bl	8013c5c <__sfp>
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	60e0      	str	r0, [r4, #12]
 8013c30:	2104      	movs	r1, #4
 8013c32:	6860      	ldr	r0, [r4, #4]
 8013c34:	f7ff ff82 	bl	8013b3c <std>
 8013c38:	68a0      	ldr	r0, [r4, #8]
 8013c3a:	2201      	movs	r2, #1
 8013c3c:	2109      	movs	r1, #9
 8013c3e:	f7ff ff7d 	bl	8013b3c <std>
 8013c42:	68e0      	ldr	r0, [r4, #12]
 8013c44:	2202      	movs	r2, #2
 8013c46:	2112      	movs	r1, #18
 8013c48:	f7ff ff78 	bl	8013b3c <std>
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	61a3      	str	r3, [r4, #24]
 8013c50:	e7d2      	b.n	8013bf8 <__sinit+0xc>
 8013c52:	bf00      	nop
 8013c54:	08014c78 	.word	0x08014c78
 8013c58:	08013b85 	.word	0x08013b85

08013c5c <__sfp>:
 8013c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c5e:	4607      	mov	r7, r0
 8013c60:	f7ff ffac 	bl	8013bbc <__sfp_lock_acquire>
 8013c64:	4b1e      	ldr	r3, [pc, #120]	; (8013ce0 <__sfp+0x84>)
 8013c66:	681e      	ldr	r6, [r3, #0]
 8013c68:	69b3      	ldr	r3, [r6, #24]
 8013c6a:	b913      	cbnz	r3, 8013c72 <__sfp+0x16>
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	f7ff ffbd 	bl	8013bec <__sinit>
 8013c72:	3648      	adds	r6, #72	; 0x48
 8013c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013c78:	3b01      	subs	r3, #1
 8013c7a:	d503      	bpl.n	8013c84 <__sfp+0x28>
 8013c7c:	6833      	ldr	r3, [r6, #0]
 8013c7e:	b30b      	cbz	r3, 8013cc4 <__sfp+0x68>
 8013c80:	6836      	ldr	r6, [r6, #0]
 8013c82:	e7f7      	b.n	8013c74 <__sfp+0x18>
 8013c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c88:	b9d5      	cbnz	r5, 8013cc0 <__sfp+0x64>
 8013c8a:	4b16      	ldr	r3, [pc, #88]	; (8013ce4 <__sfp+0x88>)
 8013c8c:	60e3      	str	r3, [r4, #12]
 8013c8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013c92:	6665      	str	r5, [r4, #100]	; 0x64
 8013c94:	f000 f847 	bl	8013d26 <__retarget_lock_init_recursive>
 8013c98:	f7ff ff96 	bl	8013bc8 <__sfp_lock_release>
 8013c9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013ca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013ca4:	6025      	str	r5, [r4, #0]
 8013ca6:	61a5      	str	r5, [r4, #24]
 8013ca8:	2208      	movs	r2, #8
 8013caa:	4629      	mov	r1, r5
 8013cac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013cb0:	f7fd fd56 	bl	8011760 <memset>
 8013cb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013cb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cc0:	3468      	adds	r4, #104	; 0x68
 8013cc2:	e7d9      	b.n	8013c78 <__sfp+0x1c>
 8013cc4:	2104      	movs	r1, #4
 8013cc6:	4638      	mov	r0, r7
 8013cc8:	f7ff ff62 	bl	8013b90 <__sfmoreglue>
 8013ccc:	4604      	mov	r4, r0
 8013cce:	6030      	str	r0, [r6, #0]
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d1d5      	bne.n	8013c80 <__sfp+0x24>
 8013cd4:	f7ff ff78 	bl	8013bc8 <__sfp_lock_release>
 8013cd8:	230c      	movs	r3, #12
 8013cda:	603b      	str	r3, [r7, #0]
 8013cdc:	e7ee      	b.n	8013cbc <__sfp+0x60>
 8013cde:	bf00      	nop
 8013ce0:	08014c78 	.word	0x08014c78
 8013ce4:	ffff0001 	.word	0xffff0001

08013ce8 <_fwalk_reent>:
 8013ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cec:	4606      	mov	r6, r0
 8013cee:	4688      	mov	r8, r1
 8013cf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013cf4:	2700      	movs	r7, #0
 8013cf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013cfa:	f1b9 0901 	subs.w	r9, r9, #1
 8013cfe:	d505      	bpl.n	8013d0c <_fwalk_reent+0x24>
 8013d00:	6824      	ldr	r4, [r4, #0]
 8013d02:	2c00      	cmp	r4, #0
 8013d04:	d1f7      	bne.n	8013cf6 <_fwalk_reent+0xe>
 8013d06:	4638      	mov	r0, r7
 8013d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d0c:	89ab      	ldrh	r3, [r5, #12]
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	d907      	bls.n	8013d22 <_fwalk_reent+0x3a>
 8013d12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d16:	3301      	adds	r3, #1
 8013d18:	d003      	beq.n	8013d22 <_fwalk_reent+0x3a>
 8013d1a:	4629      	mov	r1, r5
 8013d1c:	4630      	mov	r0, r6
 8013d1e:	47c0      	blx	r8
 8013d20:	4307      	orrs	r7, r0
 8013d22:	3568      	adds	r5, #104	; 0x68
 8013d24:	e7e9      	b.n	8013cfa <_fwalk_reent+0x12>

08013d26 <__retarget_lock_init_recursive>:
 8013d26:	4770      	bx	lr

08013d28 <__retarget_lock_acquire_recursive>:
 8013d28:	4770      	bx	lr

08013d2a <__retarget_lock_release_recursive>:
 8013d2a:	4770      	bx	lr

08013d2c <__swhatbuf_r>:
 8013d2c:	b570      	push	{r4, r5, r6, lr}
 8013d2e:	460e      	mov	r6, r1
 8013d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d34:	2900      	cmp	r1, #0
 8013d36:	b096      	sub	sp, #88	; 0x58
 8013d38:	4614      	mov	r4, r2
 8013d3a:	461d      	mov	r5, r3
 8013d3c:	da07      	bge.n	8013d4e <__swhatbuf_r+0x22>
 8013d3e:	2300      	movs	r3, #0
 8013d40:	602b      	str	r3, [r5, #0]
 8013d42:	89b3      	ldrh	r3, [r6, #12]
 8013d44:	061a      	lsls	r2, r3, #24
 8013d46:	d410      	bmi.n	8013d6a <__swhatbuf_r+0x3e>
 8013d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d4c:	e00e      	b.n	8013d6c <__swhatbuf_r+0x40>
 8013d4e:	466a      	mov	r2, sp
 8013d50:	f000 f8fa 	bl	8013f48 <_fstat_r>
 8013d54:	2800      	cmp	r0, #0
 8013d56:	dbf2      	blt.n	8013d3e <__swhatbuf_r+0x12>
 8013d58:	9a01      	ldr	r2, [sp, #4]
 8013d5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013d5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013d62:	425a      	negs	r2, r3
 8013d64:	415a      	adcs	r2, r3
 8013d66:	602a      	str	r2, [r5, #0]
 8013d68:	e7ee      	b.n	8013d48 <__swhatbuf_r+0x1c>
 8013d6a:	2340      	movs	r3, #64	; 0x40
 8013d6c:	2000      	movs	r0, #0
 8013d6e:	6023      	str	r3, [r4, #0]
 8013d70:	b016      	add	sp, #88	; 0x58
 8013d72:	bd70      	pop	{r4, r5, r6, pc}

08013d74 <__smakebuf_r>:
 8013d74:	898b      	ldrh	r3, [r1, #12]
 8013d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d78:	079d      	lsls	r5, r3, #30
 8013d7a:	4606      	mov	r6, r0
 8013d7c:	460c      	mov	r4, r1
 8013d7e:	d507      	bpl.n	8013d90 <__smakebuf_r+0x1c>
 8013d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d84:	6023      	str	r3, [r4, #0]
 8013d86:	6123      	str	r3, [r4, #16]
 8013d88:	2301      	movs	r3, #1
 8013d8a:	6163      	str	r3, [r4, #20]
 8013d8c:	b002      	add	sp, #8
 8013d8e:	bd70      	pop	{r4, r5, r6, pc}
 8013d90:	ab01      	add	r3, sp, #4
 8013d92:	466a      	mov	r2, sp
 8013d94:	f7ff ffca 	bl	8013d2c <__swhatbuf_r>
 8013d98:	9900      	ldr	r1, [sp, #0]
 8013d9a:	4605      	mov	r5, r0
 8013d9c:	4630      	mov	r0, r6
 8013d9e:	f7ff fb23 	bl	80133e8 <_malloc_r>
 8013da2:	b948      	cbnz	r0, 8013db8 <__smakebuf_r+0x44>
 8013da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013da8:	059a      	lsls	r2, r3, #22
 8013daa:	d4ef      	bmi.n	8013d8c <__smakebuf_r+0x18>
 8013dac:	f023 0303 	bic.w	r3, r3, #3
 8013db0:	f043 0302 	orr.w	r3, r3, #2
 8013db4:	81a3      	strh	r3, [r4, #12]
 8013db6:	e7e3      	b.n	8013d80 <__smakebuf_r+0xc>
 8013db8:	4b0d      	ldr	r3, [pc, #52]	; (8013df0 <__smakebuf_r+0x7c>)
 8013dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8013dbc:	89a3      	ldrh	r3, [r4, #12]
 8013dbe:	6020      	str	r0, [r4, #0]
 8013dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013dc4:	81a3      	strh	r3, [r4, #12]
 8013dc6:	9b00      	ldr	r3, [sp, #0]
 8013dc8:	6163      	str	r3, [r4, #20]
 8013dca:	9b01      	ldr	r3, [sp, #4]
 8013dcc:	6120      	str	r0, [r4, #16]
 8013dce:	b15b      	cbz	r3, 8013de8 <__smakebuf_r+0x74>
 8013dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dd4:	4630      	mov	r0, r6
 8013dd6:	f000 f8c9 	bl	8013f6c <_isatty_r>
 8013dda:	b128      	cbz	r0, 8013de8 <__smakebuf_r+0x74>
 8013ddc:	89a3      	ldrh	r3, [r4, #12]
 8013dde:	f023 0303 	bic.w	r3, r3, #3
 8013de2:	f043 0301 	orr.w	r3, r3, #1
 8013de6:	81a3      	strh	r3, [r4, #12]
 8013de8:	89a0      	ldrh	r0, [r4, #12]
 8013dea:	4305      	orrs	r5, r0
 8013dec:	81a5      	strh	r5, [r4, #12]
 8013dee:	e7cd      	b.n	8013d8c <__smakebuf_r+0x18>
 8013df0:	08013b85 	.word	0x08013b85

08013df4 <_raise_r>:
 8013df4:	291f      	cmp	r1, #31
 8013df6:	b538      	push	{r3, r4, r5, lr}
 8013df8:	4604      	mov	r4, r0
 8013dfa:	460d      	mov	r5, r1
 8013dfc:	d904      	bls.n	8013e08 <_raise_r+0x14>
 8013dfe:	2316      	movs	r3, #22
 8013e00:	6003      	str	r3, [r0, #0]
 8013e02:	f04f 30ff 	mov.w	r0, #4294967295
 8013e06:	bd38      	pop	{r3, r4, r5, pc}
 8013e08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013e0a:	b112      	cbz	r2, 8013e12 <_raise_r+0x1e>
 8013e0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013e10:	b94b      	cbnz	r3, 8013e26 <_raise_r+0x32>
 8013e12:	4620      	mov	r0, r4
 8013e14:	f000 f830 	bl	8013e78 <_getpid_r>
 8013e18:	462a      	mov	r2, r5
 8013e1a:	4601      	mov	r1, r0
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e22:	f000 b817 	b.w	8013e54 <_kill_r>
 8013e26:	2b01      	cmp	r3, #1
 8013e28:	d00a      	beq.n	8013e40 <_raise_r+0x4c>
 8013e2a:	1c59      	adds	r1, r3, #1
 8013e2c:	d103      	bne.n	8013e36 <_raise_r+0x42>
 8013e2e:	2316      	movs	r3, #22
 8013e30:	6003      	str	r3, [r0, #0]
 8013e32:	2001      	movs	r0, #1
 8013e34:	e7e7      	b.n	8013e06 <_raise_r+0x12>
 8013e36:	2400      	movs	r4, #0
 8013e38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013e3c:	4628      	mov	r0, r5
 8013e3e:	4798      	blx	r3
 8013e40:	2000      	movs	r0, #0
 8013e42:	e7e0      	b.n	8013e06 <_raise_r+0x12>

08013e44 <raise>:
 8013e44:	4b02      	ldr	r3, [pc, #8]	; (8013e50 <raise+0xc>)
 8013e46:	4601      	mov	r1, r0
 8013e48:	6818      	ldr	r0, [r3, #0]
 8013e4a:	f7ff bfd3 	b.w	8013df4 <_raise_r>
 8013e4e:	bf00      	nop
 8013e50:	24000010 	.word	0x24000010

08013e54 <_kill_r>:
 8013e54:	b538      	push	{r3, r4, r5, lr}
 8013e56:	4d07      	ldr	r5, [pc, #28]	; (8013e74 <_kill_r+0x20>)
 8013e58:	2300      	movs	r3, #0
 8013e5a:	4604      	mov	r4, r0
 8013e5c:	4608      	mov	r0, r1
 8013e5e:	4611      	mov	r1, r2
 8013e60:	602b      	str	r3, [r5, #0]
 8013e62:	f7f3 f967 	bl	8007134 <_kill>
 8013e66:	1c43      	adds	r3, r0, #1
 8013e68:	d102      	bne.n	8013e70 <_kill_r+0x1c>
 8013e6a:	682b      	ldr	r3, [r5, #0]
 8013e6c:	b103      	cbz	r3, 8013e70 <_kill_r+0x1c>
 8013e6e:	6023      	str	r3, [r4, #0]
 8013e70:	bd38      	pop	{r3, r4, r5, pc}
 8013e72:	bf00      	nop
 8013e74:	24000e5c 	.word	0x24000e5c

08013e78 <_getpid_r>:
 8013e78:	f7f3 b954 	b.w	8007124 <_getpid>

08013e7c <__sread>:
 8013e7c:	b510      	push	{r4, lr}
 8013e7e:	460c      	mov	r4, r1
 8013e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e84:	f000 f894 	bl	8013fb0 <_read_r>
 8013e88:	2800      	cmp	r0, #0
 8013e8a:	bfab      	itete	ge
 8013e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8013e90:	181b      	addge	r3, r3, r0
 8013e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013e96:	bfac      	ite	ge
 8013e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8013e9a:	81a3      	strhlt	r3, [r4, #12]
 8013e9c:	bd10      	pop	{r4, pc}

08013e9e <__swrite>:
 8013e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea2:	461f      	mov	r7, r3
 8013ea4:	898b      	ldrh	r3, [r1, #12]
 8013ea6:	05db      	lsls	r3, r3, #23
 8013ea8:	4605      	mov	r5, r0
 8013eaa:	460c      	mov	r4, r1
 8013eac:	4616      	mov	r6, r2
 8013eae:	d505      	bpl.n	8013ebc <__swrite+0x1e>
 8013eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eb4:	2302      	movs	r3, #2
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	f000 f868 	bl	8013f8c <_lseek_r>
 8013ebc:	89a3      	ldrh	r3, [r4, #12]
 8013ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ec6:	81a3      	strh	r3, [r4, #12]
 8013ec8:	4632      	mov	r2, r6
 8013eca:	463b      	mov	r3, r7
 8013ecc:	4628      	mov	r0, r5
 8013ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed2:	f000 b817 	b.w	8013f04 <_write_r>

08013ed6 <__sseek>:
 8013ed6:	b510      	push	{r4, lr}
 8013ed8:	460c      	mov	r4, r1
 8013eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ede:	f000 f855 	bl	8013f8c <_lseek_r>
 8013ee2:	1c43      	adds	r3, r0, #1
 8013ee4:	89a3      	ldrh	r3, [r4, #12]
 8013ee6:	bf15      	itete	ne
 8013ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8013eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013ef2:	81a3      	strheq	r3, [r4, #12]
 8013ef4:	bf18      	it	ne
 8013ef6:	81a3      	strhne	r3, [r4, #12]
 8013ef8:	bd10      	pop	{r4, pc}

08013efa <__sclose>:
 8013efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013efe:	f000 b813 	b.w	8013f28 <_close_r>
	...

08013f04 <_write_r>:
 8013f04:	b538      	push	{r3, r4, r5, lr}
 8013f06:	4d07      	ldr	r5, [pc, #28]	; (8013f24 <_write_r+0x20>)
 8013f08:	4604      	mov	r4, r0
 8013f0a:	4608      	mov	r0, r1
 8013f0c:	4611      	mov	r1, r2
 8013f0e:	2200      	movs	r2, #0
 8013f10:	602a      	str	r2, [r5, #0]
 8013f12:	461a      	mov	r2, r3
 8013f14:	f7f3 f945 	bl	80071a2 <_write>
 8013f18:	1c43      	adds	r3, r0, #1
 8013f1a:	d102      	bne.n	8013f22 <_write_r+0x1e>
 8013f1c:	682b      	ldr	r3, [r5, #0]
 8013f1e:	b103      	cbz	r3, 8013f22 <_write_r+0x1e>
 8013f20:	6023      	str	r3, [r4, #0]
 8013f22:	bd38      	pop	{r3, r4, r5, pc}
 8013f24:	24000e5c 	.word	0x24000e5c

08013f28 <_close_r>:
 8013f28:	b538      	push	{r3, r4, r5, lr}
 8013f2a:	4d06      	ldr	r5, [pc, #24]	; (8013f44 <_close_r+0x1c>)
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	4604      	mov	r4, r0
 8013f30:	4608      	mov	r0, r1
 8013f32:	602b      	str	r3, [r5, #0]
 8013f34:	f7f3 f951 	bl	80071da <_close>
 8013f38:	1c43      	adds	r3, r0, #1
 8013f3a:	d102      	bne.n	8013f42 <_close_r+0x1a>
 8013f3c:	682b      	ldr	r3, [r5, #0]
 8013f3e:	b103      	cbz	r3, 8013f42 <_close_r+0x1a>
 8013f40:	6023      	str	r3, [r4, #0]
 8013f42:	bd38      	pop	{r3, r4, r5, pc}
 8013f44:	24000e5c 	.word	0x24000e5c

08013f48 <_fstat_r>:
 8013f48:	b538      	push	{r3, r4, r5, lr}
 8013f4a:	4d07      	ldr	r5, [pc, #28]	; (8013f68 <_fstat_r+0x20>)
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	4604      	mov	r4, r0
 8013f50:	4608      	mov	r0, r1
 8013f52:	4611      	mov	r1, r2
 8013f54:	602b      	str	r3, [r5, #0]
 8013f56:	f7f3 f94c 	bl	80071f2 <_fstat>
 8013f5a:	1c43      	adds	r3, r0, #1
 8013f5c:	d102      	bne.n	8013f64 <_fstat_r+0x1c>
 8013f5e:	682b      	ldr	r3, [r5, #0]
 8013f60:	b103      	cbz	r3, 8013f64 <_fstat_r+0x1c>
 8013f62:	6023      	str	r3, [r4, #0]
 8013f64:	bd38      	pop	{r3, r4, r5, pc}
 8013f66:	bf00      	nop
 8013f68:	24000e5c 	.word	0x24000e5c

08013f6c <_isatty_r>:
 8013f6c:	b538      	push	{r3, r4, r5, lr}
 8013f6e:	4d06      	ldr	r5, [pc, #24]	; (8013f88 <_isatty_r+0x1c>)
 8013f70:	2300      	movs	r3, #0
 8013f72:	4604      	mov	r4, r0
 8013f74:	4608      	mov	r0, r1
 8013f76:	602b      	str	r3, [r5, #0]
 8013f78:	f7f3 f94b 	bl	8007212 <_isatty>
 8013f7c:	1c43      	adds	r3, r0, #1
 8013f7e:	d102      	bne.n	8013f86 <_isatty_r+0x1a>
 8013f80:	682b      	ldr	r3, [r5, #0]
 8013f82:	b103      	cbz	r3, 8013f86 <_isatty_r+0x1a>
 8013f84:	6023      	str	r3, [r4, #0]
 8013f86:	bd38      	pop	{r3, r4, r5, pc}
 8013f88:	24000e5c 	.word	0x24000e5c

08013f8c <_lseek_r>:
 8013f8c:	b538      	push	{r3, r4, r5, lr}
 8013f8e:	4d07      	ldr	r5, [pc, #28]	; (8013fac <_lseek_r+0x20>)
 8013f90:	4604      	mov	r4, r0
 8013f92:	4608      	mov	r0, r1
 8013f94:	4611      	mov	r1, r2
 8013f96:	2200      	movs	r2, #0
 8013f98:	602a      	str	r2, [r5, #0]
 8013f9a:	461a      	mov	r2, r3
 8013f9c:	f7f3 f944 	bl	8007228 <_lseek>
 8013fa0:	1c43      	adds	r3, r0, #1
 8013fa2:	d102      	bne.n	8013faa <_lseek_r+0x1e>
 8013fa4:	682b      	ldr	r3, [r5, #0]
 8013fa6:	b103      	cbz	r3, 8013faa <_lseek_r+0x1e>
 8013fa8:	6023      	str	r3, [r4, #0]
 8013faa:	bd38      	pop	{r3, r4, r5, pc}
 8013fac:	24000e5c 	.word	0x24000e5c

08013fb0 <_read_r>:
 8013fb0:	b538      	push	{r3, r4, r5, lr}
 8013fb2:	4d07      	ldr	r5, [pc, #28]	; (8013fd0 <_read_r+0x20>)
 8013fb4:	4604      	mov	r4, r0
 8013fb6:	4608      	mov	r0, r1
 8013fb8:	4611      	mov	r1, r2
 8013fba:	2200      	movs	r2, #0
 8013fbc:	602a      	str	r2, [r5, #0]
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	f7f3 f8d2 	bl	8007168 <_read>
 8013fc4:	1c43      	adds	r3, r0, #1
 8013fc6:	d102      	bne.n	8013fce <_read_r+0x1e>
 8013fc8:	682b      	ldr	r3, [r5, #0]
 8013fca:	b103      	cbz	r3, 8013fce <_read_r+0x1e>
 8013fcc:	6023      	str	r3, [r4, #0]
 8013fce:	bd38      	pop	{r3, r4, r5, pc}
 8013fd0:	24000e5c 	.word	0x24000e5c
 8013fd4:	00000000 	.word	0x00000000

08013fd8 <cos>:
 8013fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013fda:	eeb0 7b40 	vmov.f64	d7, d0
 8013fde:	ee17 3a90 	vmov	r3, s15
 8013fe2:	4a1f      	ldr	r2, [pc, #124]	; (8014060 <cos+0x88>)
 8013fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013fe8:	4293      	cmp	r3, r2
 8013fea:	dc04      	bgt.n	8013ff6 <cos+0x1e>
 8013fec:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8014058 <cos+0x80>
 8013ff0:	f000 f9ce 	bl	8014390 <__kernel_cos>
 8013ff4:	e004      	b.n	8014000 <cos+0x28>
 8013ff6:	4a1b      	ldr	r2, [pc, #108]	; (8014064 <cos+0x8c>)
 8013ff8:	4293      	cmp	r3, r2
 8013ffa:	dd04      	ble.n	8014006 <cos+0x2e>
 8013ffc:	ee30 0b40 	vsub.f64	d0, d0, d0
 8014000:	b005      	add	sp, #20
 8014002:	f85d fb04 	ldr.w	pc, [sp], #4
 8014006:	4668      	mov	r0, sp
 8014008:	f000 f882 	bl	8014110 <__ieee754_rem_pio2>
 801400c:	f000 0003 	and.w	r0, r0, #3
 8014010:	2801      	cmp	r0, #1
 8014012:	d007      	beq.n	8014024 <cos+0x4c>
 8014014:	2802      	cmp	r0, #2
 8014016:	d00e      	beq.n	8014036 <cos+0x5e>
 8014018:	b9a0      	cbnz	r0, 8014044 <cos+0x6c>
 801401a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801401e:	ed9d 0b00 	vldr	d0, [sp]
 8014022:	e7e5      	b.n	8013ff0 <cos+0x18>
 8014024:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014028:	ed9d 0b00 	vldr	d0, [sp]
 801402c:	f000 fc9c 	bl	8014968 <__kernel_sin>
 8014030:	eeb1 0b40 	vneg.f64	d0, d0
 8014034:	e7e4      	b.n	8014000 <cos+0x28>
 8014036:	ed9d 1b02 	vldr	d1, [sp, #8]
 801403a:	ed9d 0b00 	vldr	d0, [sp]
 801403e:	f000 f9a7 	bl	8014390 <__kernel_cos>
 8014042:	e7f5      	b.n	8014030 <cos+0x58>
 8014044:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014048:	ed9d 0b00 	vldr	d0, [sp]
 801404c:	2001      	movs	r0, #1
 801404e:	f000 fc8b 	bl	8014968 <__kernel_sin>
 8014052:	e7d5      	b.n	8014000 <cos+0x28>
 8014054:	f3af 8000 	nop.w
	...
 8014060:	3fe921fb 	.word	0x3fe921fb
 8014064:	7fefffff 	.word	0x7fefffff

08014068 <fabs>:
 8014068:	ec51 0b10 	vmov	r0, r1, d0
 801406c:	ee10 2a10 	vmov	r2, s0
 8014070:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014074:	ec43 2b10 	vmov	d0, r2, r3
 8014078:	4770      	bx	lr
 801407a:	0000      	movs	r0, r0
 801407c:	0000      	movs	r0, r0
	...

08014080 <sin>:
 8014080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014082:	eeb0 7b40 	vmov.f64	d7, d0
 8014086:	ee17 3a90 	vmov	r3, s15
 801408a:	4a1f      	ldr	r2, [pc, #124]	; (8014108 <sin+0x88>)
 801408c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014090:	4293      	cmp	r3, r2
 8014092:	dc05      	bgt.n	80140a0 <sin+0x20>
 8014094:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8014100 <sin+0x80>
 8014098:	2000      	movs	r0, #0
 801409a:	f000 fc65 	bl	8014968 <__kernel_sin>
 801409e:	e004      	b.n	80140aa <sin+0x2a>
 80140a0:	4a1a      	ldr	r2, [pc, #104]	; (801410c <sin+0x8c>)
 80140a2:	4293      	cmp	r3, r2
 80140a4:	dd04      	ble.n	80140b0 <sin+0x30>
 80140a6:	ee30 0b40 	vsub.f64	d0, d0, d0
 80140aa:	b005      	add	sp, #20
 80140ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80140b0:	4668      	mov	r0, sp
 80140b2:	f000 f82d 	bl	8014110 <__ieee754_rem_pio2>
 80140b6:	f000 0003 	and.w	r0, r0, #3
 80140ba:	2801      	cmp	r0, #1
 80140bc:	d008      	beq.n	80140d0 <sin+0x50>
 80140be:	2802      	cmp	r0, #2
 80140c0:	d00d      	beq.n	80140de <sin+0x5e>
 80140c2:	b9b0      	cbnz	r0, 80140f2 <sin+0x72>
 80140c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80140c8:	ed9d 0b00 	vldr	d0, [sp]
 80140cc:	2001      	movs	r0, #1
 80140ce:	e7e4      	b.n	801409a <sin+0x1a>
 80140d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80140d4:	ed9d 0b00 	vldr	d0, [sp]
 80140d8:	f000 f95a 	bl	8014390 <__kernel_cos>
 80140dc:	e7e5      	b.n	80140aa <sin+0x2a>
 80140de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80140e2:	ed9d 0b00 	vldr	d0, [sp]
 80140e6:	2001      	movs	r0, #1
 80140e8:	f000 fc3e 	bl	8014968 <__kernel_sin>
 80140ec:	eeb1 0b40 	vneg.f64	d0, d0
 80140f0:	e7db      	b.n	80140aa <sin+0x2a>
 80140f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80140f6:	ed9d 0b00 	vldr	d0, [sp]
 80140fa:	f000 f949 	bl	8014390 <__kernel_cos>
 80140fe:	e7f5      	b.n	80140ec <sin+0x6c>
	...
 8014108:	3fe921fb 	.word	0x3fe921fb
 801410c:	7fefffff 	.word	0x7fefffff

08014110 <__ieee754_rem_pio2>:
 8014110:	b570      	push	{r4, r5, r6, lr}
 8014112:	eeb0 7b40 	vmov.f64	d7, d0
 8014116:	ee17 5a90 	vmov	r5, s15
 801411a:	4b97      	ldr	r3, [pc, #604]	; (8014378 <__ieee754_rem_pio2+0x268>)
 801411c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014120:	429e      	cmp	r6, r3
 8014122:	b088      	sub	sp, #32
 8014124:	4604      	mov	r4, r0
 8014126:	dc07      	bgt.n	8014138 <__ieee754_rem_pio2+0x28>
 8014128:	2200      	movs	r2, #0
 801412a:	2300      	movs	r3, #0
 801412c:	ed84 0b00 	vstr	d0, [r4]
 8014130:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014134:	2000      	movs	r0, #0
 8014136:	e01b      	b.n	8014170 <__ieee754_rem_pio2+0x60>
 8014138:	4b90      	ldr	r3, [pc, #576]	; (801437c <__ieee754_rem_pio2+0x26c>)
 801413a:	429e      	cmp	r6, r3
 801413c:	dc3b      	bgt.n	80141b6 <__ieee754_rem_pio2+0xa6>
 801413e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8014142:	2d00      	cmp	r5, #0
 8014144:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8014338 <__ieee754_rem_pio2+0x228>
 8014148:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801414c:	dd19      	ble.n	8014182 <__ieee754_rem_pio2+0x72>
 801414e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8014152:	429e      	cmp	r6, r3
 8014154:	d00e      	beq.n	8014174 <__ieee754_rem_pio2+0x64>
 8014156:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8014340 <__ieee754_rem_pio2+0x230>
 801415a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801415e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014162:	ed84 5b00 	vstr	d5, [r4]
 8014166:	ee37 7b46 	vsub.f64	d7, d7, d6
 801416a:	ed84 7b02 	vstr	d7, [r4, #8]
 801416e:	2001      	movs	r0, #1
 8014170:	b008      	add	sp, #32
 8014172:	bd70      	pop	{r4, r5, r6, pc}
 8014174:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8014348 <__ieee754_rem_pio2+0x238>
 8014178:	ee37 7b46 	vsub.f64	d7, d7, d6
 801417c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8014350 <__ieee754_rem_pio2+0x240>
 8014180:	e7eb      	b.n	801415a <__ieee754_rem_pio2+0x4a>
 8014182:	429e      	cmp	r6, r3
 8014184:	ee30 7b06 	vadd.f64	d7, d0, d6
 8014188:	d00e      	beq.n	80141a8 <__ieee754_rem_pio2+0x98>
 801418a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8014340 <__ieee754_rem_pio2+0x230>
 801418e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8014192:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014196:	ed84 5b00 	vstr	d5, [r4]
 801419a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801419e:	f04f 30ff 	mov.w	r0, #4294967295
 80141a2:	ed84 7b02 	vstr	d7, [r4, #8]
 80141a6:	e7e3      	b.n	8014170 <__ieee754_rem_pio2+0x60>
 80141a8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8014348 <__ieee754_rem_pio2+0x238>
 80141ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80141b0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8014350 <__ieee754_rem_pio2+0x240>
 80141b4:	e7eb      	b.n	801418e <__ieee754_rem_pio2+0x7e>
 80141b6:	4b72      	ldr	r3, [pc, #456]	; (8014380 <__ieee754_rem_pio2+0x270>)
 80141b8:	429e      	cmp	r6, r3
 80141ba:	dc6e      	bgt.n	801429a <__ieee754_rem_pio2+0x18a>
 80141bc:	f7ff ff54 	bl	8014068 <fabs>
 80141c0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80141c4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8014358 <__ieee754_rem_pio2+0x248>
 80141c8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80141cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80141d0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80141d4:	ee17 0a90 	vmov	r0, s15
 80141d8:	eeb1 4b45 	vneg.f64	d4, d5
 80141dc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8014338 <__ieee754_rem_pio2+0x228>
 80141e0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80141e4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8014340 <__ieee754_rem_pio2+0x230>
 80141e8:	281f      	cmp	r0, #31
 80141ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80141ee:	ee30 6b47 	vsub.f64	d6, d0, d7
 80141f2:	dc08      	bgt.n	8014206 <__ieee754_rem_pio2+0xf6>
 80141f4:	4b63      	ldr	r3, [pc, #396]	; (8014384 <__ieee754_rem_pio2+0x274>)
 80141f6:	1e42      	subs	r2, r0, #1
 80141f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141fc:	42b3      	cmp	r3, r6
 80141fe:	d002      	beq.n	8014206 <__ieee754_rem_pio2+0xf6>
 8014200:	ed84 6b00 	vstr	d6, [r4]
 8014204:	e024      	b.n	8014250 <__ieee754_rem_pio2+0x140>
 8014206:	ee16 3a90 	vmov	r3, s13
 801420a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801420e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8014212:	2b10      	cmp	r3, #16
 8014214:	ea4f 5226 	mov.w	r2, r6, asr #20
 8014218:	ddf2      	ble.n	8014200 <__ieee754_rem_pio2+0xf0>
 801421a:	eeb0 6b40 	vmov.f64	d6, d0
 801421e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8014348 <__ieee754_rem_pio2+0x238>
 8014222:	eea4 6b03 	vfma.f64	d6, d4, d3
 8014226:	ee30 7b46 	vsub.f64	d7, d0, d6
 801422a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801422e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8014350 <__ieee754_rem_pio2+0x240>
 8014232:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8014236:	ee36 3b47 	vsub.f64	d3, d6, d7
 801423a:	ee13 3a90 	vmov	r3, s7
 801423e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8014242:	1ad3      	subs	r3, r2, r3
 8014244:	2b31      	cmp	r3, #49	; 0x31
 8014246:	dc17      	bgt.n	8014278 <__ieee754_rem_pio2+0x168>
 8014248:	eeb0 0b46 	vmov.f64	d0, d6
 801424c:	ed84 3b00 	vstr	d3, [r4]
 8014250:	ed94 6b00 	vldr	d6, [r4]
 8014254:	2d00      	cmp	r5, #0
 8014256:	ee30 0b46 	vsub.f64	d0, d0, d6
 801425a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801425e:	ed84 7b02 	vstr	d7, [r4, #8]
 8014262:	da85      	bge.n	8014170 <__ieee754_rem_pio2+0x60>
 8014264:	eeb1 6b46 	vneg.f64	d6, d6
 8014268:	ed84 6b00 	vstr	d6, [r4]
 801426c:	eeb1 7b47 	vneg.f64	d7, d7
 8014270:	4240      	negs	r0, r0
 8014272:	ed84 7b02 	vstr	d7, [r4, #8]
 8014276:	e77b      	b.n	8014170 <__ieee754_rem_pio2+0x60>
 8014278:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8014360 <__ieee754_rem_pio2+0x250>
 801427c:	eeb0 0b46 	vmov.f64	d0, d6
 8014280:	eea4 0b03 	vfma.f64	d0, d4, d3
 8014284:	ee36 7b40 	vsub.f64	d7, d6, d0
 8014288:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8014368 <__ieee754_rem_pio2+0x258>
 801428c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8014290:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8014294:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014298:	e7b2      	b.n	8014200 <__ieee754_rem_pio2+0xf0>
 801429a:	4b3b      	ldr	r3, [pc, #236]	; (8014388 <__ieee754_rem_pio2+0x278>)
 801429c:	429e      	cmp	r6, r3
 801429e:	dd06      	ble.n	80142ae <__ieee754_rem_pio2+0x19e>
 80142a0:	ee30 7b40 	vsub.f64	d7, d0, d0
 80142a4:	ed80 7b02 	vstr	d7, [r0, #8]
 80142a8:	ed80 7b00 	vstr	d7, [r0]
 80142ac:	e742      	b.n	8014134 <__ieee754_rem_pio2+0x24>
 80142ae:	1532      	asrs	r2, r6, #20
 80142b0:	ee10 0a10 	vmov	r0, s0
 80142b4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80142b8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80142bc:	ec41 0b17 	vmov	d7, r0, r1
 80142c0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80142c4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8014370 <__ieee754_rem_pio2+0x260>
 80142c8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80142cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80142d0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80142d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80142d8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80142dc:	a902      	add	r1, sp, #8
 80142de:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80142e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80142e6:	ed8d 6b04 	vstr	d6, [sp, #16]
 80142ea:	ee27 7b05 	vmul.f64	d7, d7, d5
 80142ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80142f2:	2603      	movs	r6, #3
 80142f4:	4608      	mov	r0, r1
 80142f6:	ed91 7b04 	vldr	d7, [r1, #16]
 80142fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80142fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014302:	4633      	mov	r3, r6
 8014304:	f1a1 0108 	sub.w	r1, r1, #8
 8014308:	f106 36ff 	add.w	r6, r6, #4294967295
 801430c:	d0f3      	beq.n	80142f6 <__ieee754_rem_pio2+0x1e6>
 801430e:	491f      	ldr	r1, [pc, #124]	; (801438c <__ieee754_rem_pio2+0x27c>)
 8014310:	9101      	str	r1, [sp, #4]
 8014312:	2102      	movs	r1, #2
 8014314:	9100      	str	r1, [sp, #0]
 8014316:	4621      	mov	r1, r4
 8014318:	f000 f8a6 	bl	8014468 <__kernel_rem_pio2>
 801431c:	2d00      	cmp	r5, #0
 801431e:	f6bf af27 	bge.w	8014170 <__ieee754_rem_pio2+0x60>
 8014322:	ed94 7b00 	vldr	d7, [r4]
 8014326:	eeb1 7b47 	vneg.f64	d7, d7
 801432a:	ed84 7b00 	vstr	d7, [r4]
 801432e:	ed94 7b02 	vldr	d7, [r4, #8]
 8014332:	e79b      	b.n	801426c <__ieee754_rem_pio2+0x15c>
 8014334:	f3af 8000 	nop.w
 8014338:	54400000 	.word	0x54400000
 801433c:	3ff921fb 	.word	0x3ff921fb
 8014340:	1a626331 	.word	0x1a626331
 8014344:	3dd0b461 	.word	0x3dd0b461
 8014348:	1a600000 	.word	0x1a600000
 801434c:	3dd0b461 	.word	0x3dd0b461
 8014350:	2e037073 	.word	0x2e037073
 8014354:	3ba3198a 	.word	0x3ba3198a
 8014358:	6dc9c883 	.word	0x6dc9c883
 801435c:	3fe45f30 	.word	0x3fe45f30
 8014360:	2e000000 	.word	0x2e000000
 8014364:	3ba3198a 	.word	0x3ba3198a
 8014368:	252049c1 	.word	0x252049c1
 801436c:	397b839a 	.word	0x397b839a
 8014370:	00000000 	.word	0x00000000
 8014374:	41700000 	.word	0x41700000
 8014378:	3fe921fb 	.word	0x3fe921fb
 801437c:	4002d97b 	.word	0x4002d97b
 8014380:	413921fb 	.word	0x413921fb
 8014384:	0801505c 	.word	0x0801505c
 8014388:	7fefffff 	.word	0x7fefffff
 801438c:	080150dc 	.word	0x080150dc

08014390 <__kernel_cos>:
 8014390:	ee10 1a90 	vmov	r1, s1
 8014394:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8014398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801439c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80143a0:	da05      	bge.n	80143ae <__kernel_cos+0x1e>
 80143a2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80143a6:	ee17 3a90 	vmov	r3, s15
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d03d      	beq.n	801442a <__kernel_cos+0x9a>
 80143ae:	ee20 3b00 	vmul.f64	d3, d0, d0
 80143b2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014430 <__kernel_cos+0xa0>
 80143b6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014438 <__kernel_cos+0xa8>
 80143ba:	eea3 6b07 	vfma.f64	d6, d3, d7
 80143be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014440 <__kernel_cos+0xb0>
 80143c2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80143c6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014448 <__kernel_cos+0xb8>
 80143ca:	eea7 6b03 	vfma.f64	d6, d7, d3
 80143ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014450 <__kernel_cos+0xc0>
 80143d2:	4b23      	ldr	r3, [pc, #140]	; (8014460 <__kernel_cos+0xd0>)
 80143d4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80143d8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8014458 <__kernel_cos+0xc8>
 80143dc:	4299      	cmp	r1, r3
 80143de:	eea7 6b03 	vfma.f64	d6, d7, d3
 80143e2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80143e6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80143ea:	ee23 7b07 	vmul.f64	d7, d3, d7
 80143ee:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80143f2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80143f6:	dc04      	bgt.n	8014402 <__kernel_cos+0x72>
 80143f8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80143fc:	ee34 0b46 	vsub.f64	d0, d4, d6
 8014400:	4770      	bx	lr
 8014402:	4b18      	ldr	r3, [pc, #96]	; (8014464 <__kernel_cos+0xd4>)
 8014404:	4299      	cmp	r1, r3
 8014406:	dc0d      	bgt.n	8014424 <__kernel_cos+0x94>
 8014408:	2200      	movs	r2, #0
 801440a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801440e:	ec43 2b15 	vmov	d5, r2, r3
 8014412:	ee34 0b45 	vsub.f64	d0, d4, d5
 8014416:	ee37 7b45 	vsub.f64	d7, d7, d5
 801441a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801441e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014422:	4770      	bx	lr
 8014424:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8014428:	e7f3      	b.n	8014412 <__kernel_cos+0x82>
 801442a:	eeb0 0b44 	vmov.f64	d0, d4
 801442e:	4770      	bx	lr
 8014430:	be8838d4 	.word	0xbe8838d4
 8014434:	bda8fae9 	.word	0xbda8fae9
 8014438:	bdb4b1c4 	.word	0xbdb4b1c4
 801443c:	3e21ee9e 	.word	0x3e21ee9e
 8014440:	809c52ad 	.word	0x809c52ad
 8014444:	be927e4f 	.word	0xbe927e4f
 8014448:	19cb1590 	.word	0x19cb1590
 801444c:	3efa01a0 	.word	0x3efa01a0
 8014450:	16c15177 	.word	0x16c15177
 8014454:	bf56c16c 	.word	0xbf56c16c
 8014458:	5555554c 	.word	0x5555554c
 801445c:	3fa55555 	.word	0x3fa55555
 8014460:	3fd33332 	.word	0x3fd33332
 8014464:	3fe90000 	.word	0x3fe90000

08014468 <__kernel_rem_pio2>:
 8014468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801446c:	ed2d 8b06 	vpush	{d8-d10}
 8014470:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8014474:	469b      	mov	fp, r3
 8014476:	460f      	mov	r7, r1
 8014478:	4bcf      	ldr	r3, [pc, #828]	; (80147b8 <__kernel_rem_pio2+0x350>)
 801447a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 801447c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8014480:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8014484:	9000      	str	r0, [sp, #0]
 8014486:	f112 0f14 	cmn.w	r2, #20
 801448a:	bfa8      	it	ge
 801448c:	2318      	movge	r3, #24
 801448e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8014492:	bfb8      	it	lt
 8014494:	2300      	movlt	r3, #0
 8014496:	f06f 0417 	mvn.w	r4, #23
 801449a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80147a0 <__kernel_rem_pio2+0x338>
 801449e:	bfa4      	itt	ge
 80144a0:	f1a2 0a03 	subge.w	sl, r2, #3
 80144a4:	fb9a f3f3 	sdivge	r3, sl, r3
 80144a8:	fb03 4404 	mla	r4, r3, r4, r4
 80144ac:	1a5d      	subs	r5, r3, r1
 80144ae:	4414      	add	r4, r2
 80144b0:	eb09 0601 	add.w	r6, r9, r1
 80144b4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80144b8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80144bc:	2200      	movs	r2, #0
 80144be:	42b2      	cmp	r2, r6
 80144c0:	dd12      	ble.n	80144e8 <__kernel_rem_pio2+0x80>
 80144c2:	aa18      	add	r2, sp, #96	; 0x60
 80144c4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80144c8:	460e      	mov	r6, r1
 80144ca:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80144ce:	f1cb 0a01 	rsb	sl, fp, #1
 80144d2:	eb0a 0006 	add.w	r0, sl, r6
 80144d6:	4581      	cmp	r9, r0
 80144d8:	db25      	blt.n	8014526 <__kernel_rem_pio2+0xbe>
 80144da:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 80147a0 <__kernel_rem_pio2+0x338>
 80144de:	f8dd e000 	ldr.w	lr, [sp]
 80144e2:	4615      	mov	r5, r2
 80144e4:	2000      	movs	r0, #0
 80144e6:	e015      	b.n	8014514 <__kernel_rem_pio2+0xac>
 80144e8:	42d5      	cmn	r5, r2
 80144ea:	d409      	bmi.n	8014500 <__kernel_rem_pio2+0x98>
 80144ec:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80144f0:	ee07 0a90 	vmov	s15, r0
 80144f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80144f8:	eca8 7b02 	vstmia	r8!, {d7}
 80144fc:	3201      	adds	r2, #1
 80144fe:	e7de      	b.n	80144be <__kernel_rem_pio2+0x56>
 8014500:	eeb0 7b46 	vmov.f64	d7, d6
 8014504:	e7f8      	b.n	80144f8 <__kernel_rem_pio2+0x90>
 8014506:	ecbe 5b02 	vldmia	lr!, {d5}
 801450a:	ed95 6b00 	vldr	d6, [r5]
 801450e:	3001      	adds	r0, #1
 8014510:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014514:	4288      	cmp	r0, r1
 8014516:	f1a5 0508 	sub.w	r5, r5, #8
 801451a:	ddf4      	ble.n	8014506 <__kernel_rem_pio2+0x9e>
 801451c:	eca8 7b02 	vstmia	r8!, {d7}
 8014520:	3208      	adds	r2, #8
 8014522:	3601      	adds	r6, #1
 8014524:	e7d5      	b.n	80144d2 <__kernel_rem_pio2+0x6a>
 8014526:	aa04      	add	r2, sp, #16
 8014528:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 80147a8 <__kernel_rem_pio2+0x340>
 801452c:	ed9f aba0 	vldr	d10, [pc, #640]	; 80147b0 <__kernel_rem_pio2+0x348>
 8014530:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8014534:	9201      	str	r2, [sp, #4]
 8014536:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 801453a:	464e      	mov	r6, r9
 801453c:	ab90      	add	r3, sp, #576	; 0x240
 801453e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014542:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8014546:	ab04      	add	r3, sp, #16
 8014548:	4618      	mov	r0, r3
 801454a:	4632      	mov	r2, r6
 801454c:	2a00      	cmp	r2, #0
 801454e:	dc4e      	bgt.n	80145ee <__kernel_rem_pio2+0x186>
 8014550:	4620      	mov	r0, r4
 8014552:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8014556:	f000 fad3 	bl	8014b00 <scalbn>
 801455a:	eeb0 8b40 	vmov.f64	d8, d0
 801455e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8014562:	ee28 0b00 	vmul.f64	d0, d8, d0
 8014566:	f000 fa57 	bl	8014a18 <floor>
 801456a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801456e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8014572:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8014576:	2c00      	cmp	r4, #0
 8014578:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801457c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8014580:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014584:	ee17 8a90 	vmov	r8, s15
 8014588:	dd46      	ble.n	8014618 <__kernel_rem_pio2+0x1b0>
 801458a:	1e70      	subs	r0, r6, #1
 801458c:	aa04      	add	r2, sp, #16
 801458e:	f1c4 0c18 	rsb	ip, r4, #24
 8014592:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8014596:	fa45 f20c 	asr.w	r2, r5, ip
 801459a:	4490      	add	r8, r2
 801459c:	fa02 f20c 	lsl.w	r2, r2, ip
 80145a0:	1aad      	subs	r5, r5, r2
 80145a2:	aa04      	add	r2, sp, #16
 80145a4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80145a8:	f1c4 0217 	rsb	r2, r4, #23
 80145ac:	4115      	asrs	r5, r2
 80145ae:	2d00      	cmp	r5, #0
 80145b0:	dd41      	ble.n	8014636 <__kernel_rem_pio2+0x1ce>
 80145b2:	f04f 0c00 	mov.w	ip, #0
 80145b6:	f108 0801 	add.w	r8, r8, #1
 80145ba:	4660      	mov	r0, ip
 80145bc:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80145c0:	4566      	cmp	r6, ip
 80145c2:	dc69      	bgt.n	8014698 <__kernel_rem_pio2+0x230>
 80145c4:	2c00      	cmp	r4, #0
 80145c6:	dd03      	ble.n	80145d0 <__kernel_rem_pio2+0x168>
 80145c8:	2c01      	cmp	r4, #1
 80145ca:	d076      	beq.n	80146ba <__kernel_rem_pio2+0x252>
 80145cc:	2c02      	cmp	r4, #2
 80145ce:	d07f      	beq.n	80146d0 <__kernel_rem_pio2+0x268>
 80145d0:	2d02      	cmp	r5, #2
 80145d2:	d130      	bne.n	8014636 <__kernel_rem_pio2+0x1ce>
 80145d4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80145d8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80145dc:	b358      	cbz	r0, 8014636 <__kernel_rem_pio2+0x1ce>
 80145de:	4620      	mov	r0, r4
 80145e0:	9102      	str	r1, [sp, #8]
 80145e2:	f000 fa8d 	bl	8014b00 <scalbn>
 80145e6:	9902      	ldr	r1, [sp, #8]
 80145e8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80145ec:	e023      	b.n	8014636 <__kernel_rem_pio2+0x1ce>
 80145ee:	ee20 7b09 	vmul.f64	d7, d0, d9
 80145f2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80145f6:	3a01      	subs	r2, #1
 80145f8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80145fc:	ad68      	add	r5, sp, #416	; 0x1a0
 80145fe:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8014602:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014606:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 801460a:	eca0 0a01 	vstmia	r0!, {s0}
 801460e:	ed95 0b00 	vldr	d0, [r5]
 8014612:	ee37 0b00 	vadd.f64	d0, d7, d0
 8014616:	e799      	b.n	801454c <__kernel_rem_pio2+0xe4>
 8014618:	d105      	bne.n	8014626 <__kernel_rem_pio2+0x1be>
 801461a:	1e72      	subs	r2, r6, #1
 801461c:	a804      	add	r0, sp, #16
 801461e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8014622:	15ed      	asrs	r5, r5, #23
 8014624:	e7c3      	b.n	80145ae <__kernel_rem_pio2+0x146>
 8014626:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801462a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014632:	da2f      	bge.n	8014694 <__kernel_rem_pio2+0x22c>
 8014634:	2500      	movs	r5, #0
 8014636:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801463e:	f040 8087 	bne.w	8014750 <__kernel_rem_pio2+0x2e8>
 8014642:	1e73      	subs	r3, r6, #1
 8014644:	4618      	mov	r0, r3
 8014646:	f04f 0c00 	mov.w	ip, #0
 801464a:	4548      	cmp	r0, r9
 801464c:	da47      	bge.n	80146de <__kernel_rem_pio2+0x276>
 801464e:	f1bc 0f00 	cmp.w	ip, #0
 8014652:	d070      	beq.n	8014736 <__kernel_rem_pio2+0x2ce>
 8014654:	aa04      	add	r2, sp, #16
 8014656:	3c18      	subs	r4, #24
 8014658:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801465c:	2a00      	cmp	r2, #0
 801465e:	d075      	beq.n	801474c <__kernel_rem_pio2+0x2e4>
 8014660:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014664:	4620      	mov	r0, r4
 8014666:	9300      	str	r3, [sp, #0]
 8014668:	f000 fa4a 	bl	8014b00 <scalbn>
 801466c:	9b00      	ldr	r3, [sp, #0]
 801466e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80147a8 <__kernel_rem_pio2+0x340>
 8014672:	461a      	mov	r2, r3
 8014674:	2a00      	cmp	r2, #0
 8014676:	f280 80ac 	bge.w	80147d2 <__kernel_rem_pio2+0x36a>
 801467a:	4619      	mov	r1, r3
 801467c:	2000      	movs	r0, #0
 801467e:	2900      	cmp	r1, #0
 8014680:	f2c0 80cd 	blt.w	801481e <__kernel_rem_pio2+0x3b6>
 8014684:	aa68      	add	r2, sp, #416	; 0x1a0
 8014686:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 801468a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80147a0 <__kernel_rem_pio2+0x338>
 801468e:	4e4b      	ldr	r6, [pc, #300]	; (80147bc <__kernel_rem_pio2+0x354>)
 8014690:	2200      	movs	r2, #0
 8014692:	e0b8      	b.n	8014806 <__kernel_rem_pio2+0x39e>
 8014694:	2502      	movs	r5, #2
 8014696:	e78c      	b.n	80145b2 <__kernel_rem_pio2+0x14a>
 8014698:	681a      	ldr	r2, [r3, #0]
 801469a:	b948      	cbnz	r0, 80146b0 <__kernel_rem_pio2+0x248>
 801469c:	b11a      	cbz	r2, 80146a6 <__kernel_rem_pio2+0x23e>
 801469e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80146a2:	601a      	str	r2, [r3, #0]
 80146a4:	2201      	movs	r2, #1
 80146a6:	f10c 0c01 	add.w	ip, ip, #1
 80146aa:	3304      	adds	r3, #4
 80146ac:	4610      	mov	r0, r2
 80146ae:	e787      	b.n	80145c0 <__kernel_rem_pio2+0x158>
 80146b0:	ebae 0202 	sub.w	r2, lr, r2
 80146b4:	601a      	str	r2, [r3, #0]
 80146b6:	4602      	mov	r2, r0
 80146b8:	e7f5      	b.n	80146a6 <__kernel_rem_pio2+0x23e>
 80146ba:	1e72      	subs	r2, r6, #1
 80146bc:	ab04      	add	r3, sp, #16
 80146be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80146c6:	f10d 0c10 	add.w	ip, sp, #16
 80146ca:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 80146ce:	e77f      	b.n	80145d0 <__kernel_rem_pio2+0x168>
 80146d0:	1e72      	subs	r2, r6, #1
 80146d2:	ab04      	add	r3, sp, #16
 80146d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80146dc:	e7f3      	b.n	80146c6 <__kernel_rem_pio2+0x25e>
 80146de:	aa04      	add	r2, sp, #16
 80146e0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80146e4:	3801      	subs	r0, #1
 80146e6:	ea4c 0c02 	orr.w	ip, ip, r2
 80146ea:	e7ae      	b.n	801464a <__kernel_rem_pio2+0x1e2>
 80146ec:	3001      	adds	r0, #1
 80146ee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80146f2:	2a00      	cmp	r2, #0
 80146f4:	d0fa      	beq.n	80146ec <__kernel_rem_pio2+0x284>
 80146f6:	eb06 020b 	add.w	r2, r6, fp
 80146fa:	ad18      	add	r5, sp, #96	; 0x60
 80146fc:	1c73      	adds	r3, r6, #1
 80146fe:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8014702:	4406      	add	r6, r0
 8014704:	429e      	cmp	r6, r3
 8014706:	f6ff af19 	blt.w	801453c <__kernel_rem_pio2+0xd4>
 801470a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801470e:	9d00      	ldr	r5, [sp, #0]
 8014710:	ee07 0a90 	vmov	s15, r0
 8014714:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014718:	2000      	movs	r0, #0
 801471a:	eca2 7b02 	vstmia	r2!, {d7}
 801471e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80147a0 <__kernel_rem_pio2+0x338>
 8014722:	4694      	mov	ip, r2
 8014724:	4288      	cmp	r0, r1
 8014726:	dd09      	ble.n	801473c <__kernel_rem_pio2+0x2d4>
 8014728:	a868      	add	r0, sp, #416	; 0x1a0
 801472a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 801472e:	ed80 7b00 	vstr	d7, [r0]
 8014732:	3301      	adds	r3, #1
 8014734:	e7e6      	b.n	8014704 <__kernel_rem_pio2+0x29c>
 8014736:	9b01      	ldr	r3, [sp, #4]
 8014738:	2001      	movs	r0, #1
 801473a:	e7d8      	b.n	80146ee <__kernel_rem_pio2+0x286>
 801473c:	ecb5 5b02 	vldmia	r5!, {d5}
 8014740:	ed3c 6b02 	vldmdb	ip!, {d6}
 8014744:	3001      	adds	r0, #1
 8014746:	eea5 7b06 	vfma.f64	d7, d5, d6
 801474a:	e7eb      	b.n	8014724 <__kernel_rem_pio2+0x2bc>
 801474c:	3b01      	subs	r3, #1
 801474e:	e781      	b.n	8014654 <__kernel_rem_pio2+0x1ec>
 8014750:	4260      	negs	r0, r4
 8014752:	eeb0 0b48 	vmov.f64	d0, d8
 8014756:	f000 f9d3 	bl	8014b00 <scalbn>
 801475a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80147b0 <__kernel_rem_pio2+0x348>
 801475e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8014762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014766:	db2b      	blt.n	80147c0 <__kernel_rem_pio2+0x358>
 8014768:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80147a8 <__kernel_rem_pio2+0x340>
 801476c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014770:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8014774:	aa04      	add	r2, sp, #16
 8014776:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801477a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801477e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014782:	a904      	add	r1, sp, #16
 8014784:	ee10 3a10 	vmov	r3, s0
 8014788:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801478c:	ee17 2a10 	vmov	r2, s14
 8014790:	1c73      	adds	r3, r6, #1
 8014792:	3418      	adds	r4, #24
 8014794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014798:	e762      	b.n	8014660 <__kernel_rem_pio2+0x1f8>
 801479a:	bf00      	nop
 801479c:	f3af 8000 	nop.w
	...
 80147ac:	3e700000 	.word	0x3e700000
 80147b0:	00000000 	.word	0x00000000
 80147b4:	41700000 	.word	0x41700000
 80147b8:	08015228 	.word	0x08015228
 80147bc:	080151e8 	.word	0x080151e8
 80147c0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80147c4:	aa04      	add	r2, sp, #16
 80147c6:	ee10 3a10 	vmov	r3, s0
 80147ca:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80147ce:	4633      	mov	r3, r6
 80147d0:	e746      	b.n	8014660 <__kernel_rem_pio2+0x1f8>
 80147d2:	a804      	add	r0, sp, #16
 80147d4:	a968      	add	r1, sp, #416	; 0x1a0
 80147d6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80147da:	9000      	str	r0, [sp, #0]
 80147dc:	ee07 0a90 	vmov	s15, r0
 80147e0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80147e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80147e8:	3a01      	subs	r2, #1
 80147ea:	ee27 7b00 	vmul.f64	d7, d7, d0
 80147ee:	ee20 0b06 	vmul.f64	d0, d0, d6
 80147f2:	ed81 7b00 	vstr	d7, [r1]
 80147f6:	e73d      	b.n	8014674 <__kernel_rem_pio2+0x20c>
 80147f8:	ecb6 5b02 	vldmia	r6!, {d5}
 80147fc:	ecb4 6b02 	vldmia	r4!, {d6}
 8014800:	3201      	adds	r2, #1
 8014802:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014806:	454a      	cmp	r2, r9
 8014808:	dc01      	bgt.n	801480e <__kernel_rem_pio2+0x3a6>
 801480a:	4290      	cmp	r0, r2
 801480c:	daf4      	bge.n	80147f8 <__kernel_rem_pio2+0x390>
 801480e:	aa40      	add	r2, sp, #256	; 0x100
 8014810:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014814:	ed82 7b00 	vstr	d7, [r2]
 8014818:	3901      	subs	r1, #1
 801481a:	3001      	adds	r0, #1
 801481c:	e72f      	b.n	801467e <__kernel_rem_pio2+0x216>
 801481e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8014820:	2a02      	cmp	r2, #2
 8014822:	dc0a      	bgt.n	801483a <__kernel_rem_pio2+0x3d2>
 8014824:	2a00      	cmp	r2, #0
 8014826:	dc5a      	bgt.n	80148de <__kernel_rem_pio2+0x476>
 8014828:	d039      	beq.n	801489e <__kernel_rem_pio2+0x436>
 801482a:	f008 0007 	and.w	r0, r8, #7
 801482e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8014832:	ecbd 8b06 	vpop	{d8-d10}
 8014836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801483a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 801483c:	2a03      	cmp	r2, #3
 801483e:	d1f4      	bne.n	801482a <__kernel_rem_pio2+0x3c2>
 8014840:	aa40      	add	r2, sp, #256	; 0x100
 8014842:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014846:	4611      	mov	r1, r2
 8014848:	4618      	mov	r0, r3
 801484a:	2800      	cmp	r0, #0
 801484c:	f1a1 0108 	sub.w	r1, r1, #8
 8014850:	dc52      	bgt.n	80148f8 <__kernel_rem_pio2+0x490>
 8014852:	4619      	mov	r1, r3
 8014854:	2901      	cmp	r1, #1
 8014856:	f1a2 0208 	sub.w	r2, r2, #8
 801485a:	dc5d      	bgt.n	8014918 <__kernel_rem_pio2+0x4b0>
 801485c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8014960 <__kernel_rem_pio2+0x4f8>
 8014860:	2b01      	cmp	r3, #1
 8014862:	dc69      	bgt.n	8014938 <__kernel_rem_pio2+0x4d0>
 8014864:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8014868:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 801486c:	2d00      	cmp	r5, #0
 801486e:	d16c      	bne.n	801494a <__kernel_rem_pio2+0x4e2>
 8014870:	ed87 5b00 	vstr	d5, [r7]
 8014874:	ed87 6b02 	vstr	d6, [r7, #8]
 8014878:	ed87 7b04 	vstr	d7, [r7, #16]
 801487c:	e7d5      	b.n	801482a <__kernel_rem_pio2+0x3c2>
 801487e:	aa40      	add	r2, sp, #256	; 0x100
 8014880:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014884:	ed92 6b00 	vldr	d6, [r2]
 8014888:	3b01      	subs	r3, #1
 801488a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801488e:	2b00      	cmp	r3, #0
 8014890:	daf5      	bge.n	801487e <__kernel_rem_pio2+0x416>
 8014892:	b10d      	cbz	r5, 8014898 <__kernel_rem_pio2+0x430>
 8014894:	eeb1 7b47 	vneg.f64	d7, d7
 8014898:	ed87 7b00 	vstr	d7, [r7]
 801489c:	e7c5      	b.n	801482a <__kernel_rem_pio2+0x3c2>
 801489e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8014960 <__kernel_rem_pio2+0x4f8>
 80148a2:	e7f4      	b.n	801488e <__kernel_rem_pio2+0x426>
 80148a4:	a940      	add	r1, sp, #256	; 0x100
 80148a6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80148aa:	ed91 7b00 	vldr	d7, [r1]
 80148ae:	3a01      	subs	r2, #1
 80148b0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80148b4:	2a00      	cmp	r2, #0
 80148b6:	daf5      	bge.n	80148a4 <__kernel_rem_pio2+0x43c>
 80148b8:	b1ad      	cbz	r5, 80148e6 <__kernel_rem_pio2+0x47e>
 80148ba:	eeb1 7b46 	vneg.f64	d7, d6
 80148be:	ed87 7b00 	vstr	d7, [r7]
 80148c2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 80148c6:	a942      	add	r1, sp, #264	; 0x108
 80148c8:	2201      	movs	r2, #1
 80148ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80148ce:	4293      	cmp	r3, r2
 80148d0:	da0c      	bge.n	80148ec <__kernel_rem_pio2+0x484>
 80148d2:	b10d      	cbz	r5, 80148d8 <__kernel_rem_pio2+0x470>
 80148d4:	eeb1 7b47 	vneg.f64	d7, d7
 80148d8:	ed87 7b02 	vstr	d7, [r7, #8]
 80148dc:	e7a5      	b.n	801482a <__kernel_rem_pio2+0x3c2>
 80148de:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014960 <__kernel_rem_pio2+0x4f8>
 80148e2:	461a      	mov	r2, r3
 80148e4:	e7e6      	b.n	80148b4 <__kernel_rem_pio2+0x44c>
 80148e6:	eeb0 7b46 	vmov.f64	d7, d6
 80148ea:	e7e8      	b.n	80148be <__kernel_rem_pio2+0x456>
 80148ec:	ecb1 6b02 	vldmia	r1!, {d6}
 80148f0:	3201      	adds	r2, #1
 80148f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80148f6:	e7ea      	b.n	80148ce <__kernel_rem_pio2+0x466>
 80148f8:	ed91 7b00 	vldr	d7, [r1]
 80148fc:	ed91 5b02 	vldr	d5, [r1, #8]
 8014900:	3801      	subs	r0, #1
 8014902:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014906:	ee37 7b46 	vsub.f64	d7, d7, d6
 801490a:	ed81 6b00 	vstr	d6, [r1]
 801490e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014912:	ed81 7b02 	vstr	d7, [r1, #8]
 8014916:	e798      	b.n	801484a <__kernel_rem_pio2+0x3e2>
 8014918:	ed92 7b00 	vldr	d7, [r2]
 801491c:	ed92 5b02 	vldr	d5, [r2, #8]
 8014920:	3901      	subs	r1, #1
 8014922:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014926:	ee37 7b46 	vsub.f64	d7, d7, d6
 801492a:	ed82 6b00 	vstr	d6, [r2]
 801492e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014932:	ed82 7b02 	vstr	d7, [r2, #8]
 8014936:	e78d      	b.n	8014854 <__kernel_rem_pio2+0x3ec>
 8014938:	aa40      	add	r2, sp, #256	; 0x100
 801493a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801493e:	ed92 6b00 	vldr	d6, [r2]
 8014942:	3b01      	subs	r3, #1
 8014944:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014948:	e78a      	b.n	8014860 <__kernel_rem_pio2+0x3f8>
 801494a:	eeb1 5b45 	vneg.f64	d5, d5
 801494e:	eeb1 6b46 	vneg.f64	d6, d6
 8014952:	ed87 5b00 	vstr	d5, [r7]
 8014956:	eeb1 7b47 	vneg.f64	d7, d7
 801495a:	ed87 6b02 	vstr	d6, [r7, #8]
 801495e:	e78b      	b.n	8014878 <__kernel_rem_pio2+0x410>
	...

08014968 <__kernel_sin>:
 8014968:	ee10 3a90 	vmov	r3, s1
 801496c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014970:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014974:	da04      	bge.n	8014980 <__kernel_sin+0x18>
 8014976:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801497a:	ee17 3a90 	vmov	r3, s15
 801497e:	b35b      	cbz	r3, 80149d8 <__kernel_sin+0x70>
 8014980:	ee20 6b00 	vmul.f64	d6, d0, d0
 8014984:	ee20 5b06 	vmul.f64	d5, d0, d6
 8014988:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80149e0 <__kernel_sin+0x78>
 801498c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80149e8 <__kernel_sin+0x80>
 8014990:	eea6 4b07 	vfma.f64	d4, d6, d7
 8014994:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80149f0 <__kernel_sin+0x88>
 8014998:	eea4 7b06 	vfma.f64	d7, d4, d6
 801499c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80149f8 <__kernel_sin+0x90>
 80149a0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80149a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014a00 <__kernel_sin+0x98>
 80149a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80149ac:	b930      	cbnz	r0, 80149bc <__kernel_sin+0x54>
 80149ae:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014a08 <__kernel_sin+0xa0>
 80149b2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80149b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80149ba:	4770      	bx	lr
 80149bc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80149c0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80149c4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80149c8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80149cc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8014a10 <__kernel_sin+0xa8>
 80149d0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80149d4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80149d8:	4770      	bx	lr
 80149da:	bf00      	nop
 80149dc:	f3af 8000 	nop.w
 80149e0:	5acfd57c 	.word	0x5acfd57c
 80149e4:	3de5d93a 	.word	0x3de5d93a
 80149e8:	8a2b9ceb 	.word	0x8a2b9ceb
 80149ec:	be5ae5e6 	.word	0xbe5ae5e6
 80149f0:	57b1fe7d 	.word	0x57b1fe7d
 80149f4:	3ec71de3 	.word	0x3ec71de3
 80149f8:	19c161d5 	.word	0x19c161d5
 80149fc:	bf2a01a0 	.word	0xbf2a01a0
 8014a00:	1110f8a6 	.word	0x1110f8a6
 8014a04:	3f811111 	.word	0x3f811111
 8014a08:	55555549 	.word	0x55555549
 8014a0c:	bfc55555 	.word	0xbfc55555
 8014a10:	55555549 	.word	0x55555549
 8014a14:	3fc55555 	.word	0x3fc55555

08014a18 <floor>:
 8014a18:	ee10 1a90 	vmov	r1, s1
 8014a1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014a20:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8014a24:	2b13      	cmp	r3, #19
 8014a26:	b530      	push	{r4, r5, lr}
 8014a28:	ee10 0a10 	vmov	r0, s0
 8014a2c:	ee10 5a10 	vmov	r5, s0
 8014a30:	dc31      	bgt.n	8014a96 <floor+0x7e>
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	da15      	bge.n	8014a62 <floor+0x4a>
 8014a36:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014af0 <floor+0xd8>
 8014a3a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014a3e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a46:	dd07      	ble.n	8014a58 <floor+0x40>
 8014a48:	2900      	cmp	r1, #0
 8014a4a:	da4e      	bge.n	8014aea <floor+0xd2>
 8014a4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014a50:	4318      	orrs	r0, r3
 8014a52:	d001      	beq.n	8014a58 <floor+0x40>
 8014a54:	4928      	ldr	r1, [pc, #160]	; (8014af8 <floor+0xe0>)
 8014a56:	2000      	movs	r0, #0
 8014a58:	460b      	mov	r3, r1
 8014a5a:	4602      	mov	r2, r0
 8014a5c:	ec43 2b10 	vmov	d0, r2, r3
 8014a60:	e020      	b.n	8014aa4 <floor+0x8c>
 8014a62:	4a26      	ldr	r2, [pc, #152]	; (8014afc <floor+0xe4>)
 8014a64:	411a      	asrs	r2, r3
 8014a66:	ea01 0402 	and.w	r4, r1, r2
 8014a6a:	4304      	orrs	r4, r0
 8014a6c:	d01a      	beq.n	8014aa4 <floor+0x8c>
 8014a6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014af0 <floor+0xd8>
 8014a72:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014a76:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a7e:	ddeb      	ble.n	8014a58 <floor+0x40>
 8014a80:	2900      	cmp	r1, #0
 8014a82:	bfbe      	ittt	lt
 8014a84:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8014a88:	fa40 f303 	asrlt.w	r3, r0, r3
 8014a8c:	18c9      	addlt	r1, r1, r3
 8014a8e:	ea21 0102 	bic.w	r1, r1, r2
 8014a92:	2000      	movs	r0, #0
 8014a94:	e7e0      	b.n	8014a58 <floor+0x40>
 8014a96:	2b33      	cmp	r3, #51	; 0x33
 8014a98:	dd05      	ble.n	8014aa6 <floor+0x8e>
 8014a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014a9e:	d101      	bne.n	8014aa4 <floor+0x8c>
 8014aa0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8014aa4:	bd30      	pop	{r4, r5, pc}
 8014aa6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8014aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8014aae:	40e2      	lsrs	r2, r4
 8014ab0:	4202      	tst	r2, r0
 8014ab2:	d0f7      	beq.n	8014aa4 <floor+0x8c>
 8014ab4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014af0 <floor+0xd8>
 8014ab8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014abc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ac4:	ddc8      	ble.n	8014a58 <floor+0x40>
 8014ac6:	2900      	cmp	r1, #0
 8014ac8:	da02      	bge.n	8014ad0 <floor+0xb8>
 8014aca:	2b14      	cmp	r3, #20
 8014acc:	d103      	bne.n	8014ad6 <floor+0xbe>
 8014ace:	3101      	adds	r1, #1
 8014ad0:	ea20 0002 	bic.w	r0, r0, r2
 8014ad4:	e7c0      	b.n	8014a58 <floor+0x40>
 8014ad6:	2401      	movs	r4, #1
 8014ad8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014adc:	fa04 f303 	lsl.w	r3, r4, r3
 8014ae0:	4418      	add	r0, r3
 8014ae2:	42a8      	cmp	r0, r5
 8014ae4:	bf38      	it	cc
 8014ae6:	1909      	addcc	r1, r1, r4
 8014ae8:	e7f2      	b.n	8014ad0 <floor+0xb8>
 8014aea:	2000      	movs	r0, #0
 8014aec:	4601      	mov	r1, r0
 8014aee:	e7b3      	b.n	8014a58 <floor+0x40>
 8014af0:	8800759c 	.word	0x8800759c
 8014af4:	7e37e43c 	.word	0x7e37e43c
 8014af8:	bff00000 	.word	0xbff00000
 8014afc:	000fffff 	.word	0x000fffff

08014b00 <scalbn>:
 8014b00:	b082      	sub	sp, #8
 8014b02:	ed8d 0b00 	vstr	d0, [sp]
 8014b06:	9b01      	ldr	r3, [sp, #4]
 8014b08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014b0c:	b9a2      	cbnz	r2, 8014b38 <scalbn+0x38>
 8014b0e:	9a00      	ldr	r2, [sp, #0]
 8014b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b14:	4313      	orrs	r3, r2
 8014b16:	d03a      	beq.n	8014b8e <scalbn+0x8e>
 8014b18:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8014bf0 <scalbn+0xf0>
 8014b1c:	4b40      	ldr	r3, [pc, #256]	; (8014c20 <scalbn+0x120>)
 8014b1e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014b22:	4298      	cmp	r0, r3
 8014b24:	ed8d 7b00 	vstr	d7, [sp]
 8014b28:	da11      	bge.n	8014b4e <scalbn+0x4e>
 8014b2a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8014bf8 <scalbn+0xf8>
 8014b2e:	ed9d 6b00 	vldr	d6, [sp]
 8014b32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014b36:	e007      	b.n	8014b48 <scalbn+0x48>
 8014b38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014b3c:	428a      	cmp	r2, r1
 8014b3e:	d10a      	bne.n	8014b56 <scalbn+0x56>
 8014b40:	ed9d 7b00 	vldr	d7, [sp]
 8014b44:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014b48:	ed8d 7b00 	vstr	d7, [sp]
 8014b4c:	e01f      	b.n	8014b8e <scalbn+0x8e>
 8014b4e:	9b01      	ldr	r3, [sp, #4]
 8014b50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014b54:	3a36      	subs	r2, #54	; 0x36
 8014b56:	4402      	add	r2, r0
 8014b58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014b5c:	428a      	cmp	r2, r1
 8014b5e:	dd0a      	ble.n	8014b76 <scalbn+0x76>
 8014b60:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8014c00 <scalbn+0x100>
 8014b64:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8014c08 <scalbn+0x108>
 8014b68:	eeb0 6b47 	vmov.f64	d6, d7
 8014b6c:	9b01      	ldr	r3, [sp, #4]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	fe27 7b05 	vselge.f64	d7, d7, d5
 8014b74:	e7dd      	b.n	8014b32 <scalbn+0x32>
 8014b76:	2a00      	cmp	r2, #0
 8014b78:	dd0d      	ble.n	8014b96 <scalbn+0x96>
 8014b7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b82:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014b86:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014b8a:	e9cd 0100 	strd	r0, r1, [sp]
 8014b8e:	ed9d 0b00 	vldr	d0, [sp]
 8014b92:	b002      	add	sp, #8
 8014b94:	4770      	bx	lr
 8014b96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014b9a:	da18      	bge.n	8014bce <scalbn+0xce>
 8014b9c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014ba0:	4298      	cmp	r0, r3
 8014ba2:	9b01      	ldr	r3, [sp, #4]
 8014ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ba8:	dd09      	ble.n	8014bbe <scalbn+0xbe>
 8014baa:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8014c00 <scalbn+0x100>
 8014bae:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8014c08 <scalbn+0x108>
 8014bb2:	eeb0 6b47 	vmov.f64	d6, d7
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8014bbc:	e7b9      	b.n	8014b32 <scalbn+0x32>
 8014bbe:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014bf8 <scalbn+0xf8>
 8014bc2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8014c10 <scalbn+0x110>
 8014bc6:	eeb0 6b47 	vmov.f64	d6, d7
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	e7f4      	b.n	8014bb8 <scalbn+0xb8>
 8014bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014bd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014bd6:	3236      	adds	r2, #54	; 0x36
 8014bd8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014bdc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014be0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8014c18 <scalbn+0x118>
 8014be4:	ec41 0b17 	vmov	d7, r0, r1
 8014be8:	e7a3      	b.n	8014b32 <scalbn+0x32>
 8014bea:	bf00      	nop
 8014bec:	f3af 8000 	nop.w
 8014bf0:	00000000 	.word	0x00000000
 8014bf4:	43500000 	.word	0x43500000
 8014bf8:	c2f8f359 	.word	0xc2f8f359
 8014bfc:	01a56e1f 	.word	0x01a56e1f
 8014c00:	8800759c 	.word	0x8800759c
 8014c04:	7e37e43c 	.word	0x7e37e43c
 8014c08:	8800759c 	.word	0x8800759c
 8014c0c:	fe37e43c 	.word	0xfe37e43c
 8014c10:	c2f8f359 	.word	0xc2f8f359
 8014c14:	81a56e1f 	.word	0x81a56e1f
 8014c18:	00000000 	.word	0x00000000
 8014c1c:	3c900000 	.word	0x3c900000
 8014c20:	ffff3cb0 	.word	0xffff3cb0

08014c24 <_init>:
 8014c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c26:	bf00      	nop
 8014c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c2a:	bc08      	pop	{r3}
 8014c2c:	469e      	mov	lr, r3
 8014c2e:	4770      	bx	lr

08014c30 <_fini>:
 8014c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c32:	bf00      	nop
 8014c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c36:	bc08      	pop	{r3}
 8014c38:	469e      	mov	lr, r3
 8014c3a:	4770      	bx	lr
